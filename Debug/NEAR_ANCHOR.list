
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0001652c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ce8  080165f0  080165f0  000175f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2d8  0801a2d8  0001c3d8  2**0
                  CONTENTS
  4 .ARM          00000000  0801a2d8  0801a2d8  0001c3d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a2d8  0801a2d8  0001c3d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a2d8  0801a2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a2dc  0801a2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d8  20000000  0801a2e0  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd0  200003d8  0801a6b8  0001c3d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  0801a6b8  0001cfa8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c3d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a5d  00000000  00000000  0001c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ed  00000000  00000000  0003fe5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00045450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f3  00000000  00000000  00047478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f39  00000000  00000000  00048d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029507  00000000  00000000  0006cca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0cac  00000000  00000000  000961ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008720  00000000  00000000  00146e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000103  00000000  00000000  0014f60f  2**0
=======
  1 .text         0001508c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ba4  08015150  08015150  00016150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cf4  08018cf4  0001a3d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08018cf4  08018cf4  0001a3d0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08018cf4  08018cf4  0001a3d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018cf4  08018cf4  00019cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018cf8  08018cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d0  20000000  08018cfc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  200003d0  080190cc  0001a3d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea0  080190cc  0001aea0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001a3d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023009  00000000  00000000  0001a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054cd  00000000  00000000  0003d401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  000428d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000188a  00000000  00000000  000448c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000904a  00000000  00000000  0004614a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291d1  00000000  00000000  0004f194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0ba3  00000000  00000000  00078365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008340  00000000  00000000  00128f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000013d  00000000  00000000  001312e9  2**0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003d0 	.word	0x200003d0
 80000e0:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80000e4:	080165d4 	.word	0x080165d4
=======
 80000e4:	08015134 	.word	0x08015134
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000100:	200003dc 	.word	0x200003dc
 8000104:	080165d4 	.word	0x080165d4
=======
 8000100:	200003d4 	.word	0x200003d4
 8000104:	08015134 	.word	0x08015134
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffc5 	bl	80013cc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff09 	bl	8001264 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffb7 	bl	80013cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffad 	bl	80013cc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff33 	bl	80012ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff29 	bl	80012ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	9000      	str	r0, [sp, #0]
 80004b6:	9101      	str	r1, [sp, #4]
 80004b8:	030e      	lsls	r6, r1, #12
 80004ba:	004c      	lsls	r4, r1, #1
 80004bc:	0fcd      	lsrs	r5, r1, #31
 80004be:	0a71      	lsrs	r1, r6, #9
 80004c0:	9e00      	ldr	r6, [sp, #0]
 80004c2:	005f      	lsls	r7, r3, #1
 80004c4:	0f76      	lsrs	r6, r6, #29
 80004c6:	430e      	orrs	r6, r1
 80004c8:	9900      	ldr	r1, [sp, #0]
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	00c9      	lsls	r1, r1, #3
 80004d0:	4689      	mov	r9, r1
 80004d2:	0319      	lsls	r1, r3, #12
 80004d4:	0d7b      	lsrs	r3, r7, #21
 80004d6:	4698      	mov	r8, r3
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	0fdb      	lsrs	r3, r3, #31
 80004de:	469c      	mov	ip, r3
 80004e0:	9b00      	ldr	r3, [sp, #0]
 80004e2:	9a00      	ldr	r2, [sp, #0]
 80004e4:	0f5b      	lsrs	r3, r3, #29
 80004e6:	430b      	orrs	r3, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	0d64      	lsrs	r4, r4, #21
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	1a61      	subs	r1, r4, r1
 80004f0:	4565      	cmp	r5, ip
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4e>
 80004f4:	e0a6      	b.n	8000644 <__aeabi_dadd+0x19c>
 80004f6:	2900      	cmp	r1, #0
 80004f8:	dd72      	ble.n	80005e0 <__aeabi_dadd+0x138>
 80004fa:	4647      	mov	r7, r8
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e0dd      	b.n	80006be <__aeabi_dadd+0x216>
 8000502:	4fcc      	ldr	r7, [pc, #816]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000504:	42bc      	cmp	r4, r7
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x62>
 8000508:	e19a      	b.n	8000840 <__aeabi_dadd+0x398>
 800050a:	2701      	movs	r7, #1
 800050c:	2938      	cmp	r1, #56	@ 0x38
 800050e:	dc17      	bgt.n	8000540 <__aeabi_dadd+0x98>
 8000510:	2780      	movs	r7, #128	@ 0x80
 8000512:	043f      	lsls	r7, r7, #16
 8000514:	433b      	orrs	r3, r7
 8000516:	291f      	cmp	r1, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x74>
 800051a:	e1dd      	b.n	80008d8 <__aeabi_dadd+0x430>
 800051c:	2720      	movs	r7, #32
 800051e:	1a78      	subs	r0, r7, r1
 8000520:	001f      	movs	r7, r3
 8000522:	4087      	lsls	r7, r0
 8000524:	46ba      	mov	sl, r7
 8000526:	0017      	movs	r7, r2
 8000528:	40cf      	lsrs	r7, r1
 800052a:	4684      	mov	ip, r0
 800052c:	0038      	movs	r0, r7
 800052e:	4657      	mov	r7, sl
 8000530:	4307      	orrs	r7, r0
 8000532:	4660      	mov	r0, ip
 8000534:	4082      	lsls	r2, r0
 8000536:	40cb      	lsrs	r3, r1
 8000538:	1e50      	subs	r0, r2, #1
 800053a:	4182      	sbcs	r2, r0
 800053c:	1af6      	subs	r6, r6, r3
 800053e:	4317      	orrs	r7, r2
 8000540:	464b      	mov	r3, r9
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	45b9      	cmp	r9, r7
 8000546:	4180      	sbcs	r0, r0
 8000548:	4240      	negs	r0, r0
 800054a:	1a36      	subs	r6, r6, r0
 800054c:	0233      	lsls	r3, r6, #8
 800054e:	d400      	bmi.n	8000552 <__aeabi_dadd+0xaa>
 8000550:	e0ff      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000552:	0276      	lsls	r6, r6, #9
 8000554:	0a76      	lsrs	r6, r6, #9
 8000556:	2e00      	cmp	r6, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb4>
 800055a:	e13c      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800055c:	0030      	movs	r0, r6
 800055e:	f001 ff43 	bl	80023e8 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2120      	movs	r1, #32
 8000568:	0038      	movs	r0, r7
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	40d0      	lsrs	r0, r2
 800056e:	409e      	lsls	r6, r3
 8000570:	0002      	movs	r2, r0
 8000572:	409f      	lsls	r7, r3
 8000574:	4332      	orrs	r2, r6
 8000576:	429c      	cmp	r4, r3
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xd4>
 800057a:	e1a6      	b.n	80008ca <__aeabi_dadd+0x422>
 800057c:	1b18      	subs	r0, r3, r4
 800057e:	3001      	adds	r0, #1
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	003e      	movs	r6, r7
 8000584:	408f      	lsls	r7, r1
 8000586:	40c6      	lsrs	r6, r0
 8000588:	1e7b      	subs	r3, r7, #1
 800058a:	419f      	sbcs	r7, r3
 800058c:	0013      	movs	r3, r2
 800058e:	408b      	lsls	r3, r1
 8000590:	4337      	orrs	r7, r6
 8000592:	431f      	orrs	r7, r3
 8000594:	40c2      	lsrs	r2, r0
 8000596:	003b      	movs	r3, r7
 8000598:	0016      	movs	r6, r2
 800059a:	2400      	movs	r4, #0
 800059c:	4313      	orrs	r3, r2
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0xfa>
 80005a0:	e1df      	b.n	8000962 <__aeabi_dadd+0x4ba>
 80005a2:	077b      	lsls	r3, r7, #29
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dadd+0x100>
 80005a6:	e332      	b.n	8000c0e <__aeabi_dadd+0x766>
 80005a8:	230f      	movs	r3, #15
 80005aa:	003a      	movs	r2, r7
 80005ac:	403b      	ands	r3, r7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d004      	beq.n	80005bc <__aeabi_dadd+0x114>
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	42ba      	cmp	r2, r7
 80005b6:	41bf      	sbcs	r7, r7
 80005b8:	427f      	negs	r7, r7
 80005ba:	19f6      	adds	r6, r6, r7
 80005bc:	0233      	lsls	r3, r6, #8
 80005be:	d400      	bmi.n	80005c2 <__aeabi_dadd+0x11a>
 80005c0:	e323      	b.n	8000c0a <__aeabi_dadd+0x762>
 80005c2:	4b9c      	ldr	r3, [pc, #624]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c4:	3401      	adds	r4, #1
 80005c6:	429c      	cmp	r4, r3
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x124>
 80005ca:	e0b4      	b.n	8000736 <__aeabi_dadd+0x28e>
 80005cc:	4b9a      	ldr	r3, [pc, #616]	@ (8000838 <__aeabi_dadd+0x390>)
 80005ce:	0564      	lsls	r4, r4, #21
 80005d0:	401e      	ands	r6, r3
 80005d2:	0d64      	lsrs	r4, r4, #21
 80005d4:	0777      	lsls	r7, r6, #29
 80005d6:	08d2      	lsrs	r2, r2, #3
 80005d8:	0276      	lsls	r6, r6, #9
 80005da:	4317      	orrs	r7, r2
 80005dc:	0b36      	lsrs	r6, r6, #12
 80005de:	e0ac      	b.n	800073a <__aeabi_dadd+0x292>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x13e>
 80005e4:	e07e      	b.n	80006e4 <__aeabi_dadd+0x23c>
 80005e6:	4641      	mov	r1, r8
 80005e8:	1b09      	subs	r1, r1, r4
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x148>
 80005ee:	e160      	b.n	80008b2 <__aeabi_dadd+0x40a>
 80005f0:	0034      	movs	r4, r6
 80005f2:	4648      	mov	r0, r9
 80005f4:	4304      	orrs	r4, r0
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x152>
 80005f8:	e1c9      	b.n	800098e <__aeabi_dadd+0x4e6>
 80005fa:	1e4c      	subs	r4, r1, #1
 80005fc:	2901      	cmp	r1, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e22e      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000602:	4d8c      	ldr	r5, [pc, #560]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000604:	42a9      	cmp	r1, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e224      	b.n	8000a54 <__aeabi_dadd+0x5ac>
 800060a:	2701      	movs	r7, #1
 800060c:	2c38      	cmp	r4, #56	@ 0x38
 800060e:	dc11      	bgt.n	8000634 <__aeabi_dadd+0x18c>
 8000610:	0021      	movs	r1, r4
 8000612:	291f      	cmp	r1, #31
 8000614:	dd00      	ble.n	8000618 <__aeabi_dadd+0x170>
 8000616:	e20b      	b.n	8000a30 <__aeabi_dadd+0x588>
 8000618:	2420      	movs	r4, #32
 800061a:	0037      	movs	r7, r6
 800061c:	4648      	mov	r0, r9
 800061e:	1a64      	subs	r4, r4, r1
 8000620:	40a7      	lsls	r7, r4
 8000622:	40c8      	lsrs	r0, r1
 8000624:	4307      	orrs	r7, r0
 8000626:	4648      	mov	r0, r9
 8000628:	40a0      	lsls	r0, r4
 800062a:	40ce      	lsrs	r6, r1
 800062c:	1e44      	subs	r4, r0, #1
 800062e:	41a0      	sbcs	r0, r4
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	4307      	orrs	r7, r0
 8000634:	1bd7      	subs	r7, r2, r7
 8000636:	42ba      	cmp	r2, r7
 8000638:	4192      	sbcs	r2, r2
 800063a:	4252      	negs	r2, r2
 800063c:	4665      	mov	r5, ip
 800063e:	4644      	mov	r4, r8
 8000640:	1a9e      	subs	r6, r3, r2
 8000642:	e783      	b.n	800054c <__aeabi_dadd+0xa4>
 8000644:	2900      	cmp	r1, #0
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e09c      	b.n	8000784 <__aeabi_dadd+0x2dc>
 800064a:	4647      	mov	r7, r8
 800064c:	2f00      	cmp	r7, #0
 800064e:	d167      	bne.n	8000720 <__aeabi_dadd+0x278>
 8000650:	001f      	movs	r7, r3
 8000652:	4317      	orrs	r7, r2
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x1b0>
 8000656:	e0e4      	b.n	8000822 <__aeabi_dadd+0x37a>
 8000658:	1e48      	subs	r0, r1, #1
 800065a:	2901      	cmp	r1, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1b8>
 800065e:	e19b      	b.n	8000998 <__aeabi_dadd+0x4f0>
 8000660:	4f74      	ldr	r7, [pc, #464]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000662:	42b9      	cmp	r1, r7
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1c0>
 8000666:	e0eb      	b.n	8000840 <__aeabi_dadd+0x398>
 8000668:	2701      	movs	r7, #1
 800066a:	0001      	movs	r1, r0
 800066c:	2838      	cmp	r0, #56	@ 0x38
 800066e:	dc11      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 8000670:	291f      	cmp	r1, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0x1ce>
 8000674:	e1c7      	b.n	8000a06 <__aeabi_dadd+0x55e>
 8000676:	2720      	movs	r7, #32
 8000678:	1a78      	subs	r0, r7, r1
 800067a:	001f      	movs	r7, r3
 800067c:	4684      	mov	ip, r0
 800067e:	4087      	lsls	r7, r0
 8000680:	0010      	movs	r0, r2
 8000682:	40c8      	lsrs	r0, r1
 8000684:	4307      	orrs	r7, r0
 8000686:	4660      	mov	r0, ip
 8000688:	4082      	lsls	r2, r0
 800068a:	40cb      	lsrs	r3, r1
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	18f6      	adds	r6, r6, r3
 8000692:	4317      	orrs	r7, r2
 8000694:	444f      	add	r7, r9
 8000696:	454f      	cmp	r7, r9
 8000698:	4180      	sbcs	r0, r0
 800069a:	4240      	negs	r0, r0
 800069c:	1836      	adds	r6, r6, r0
 800069e:	0233      	lsls	r3, r6, #8
 80006a0:	d557      	bpl.n	8000752 <__aeabi_dadd+0x2aa>
 80006a2:	4b64      	ldr	r3, [pc, #400]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006a4:	3401      	adds	r4, #1
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d045      	beq.n	8000736 <__aeabi_dadd+0x28e>
 80006aa:	2101      	movs	r1, #1
 80006ac:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <__aeabi_dadd+0x390>)
 80006ae:	087a      	lsrs	r2, r7, #1
 80006b0:	401e      	ands	r6, r3
 80006b2:	4039      	ands	r1, r7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	07f7      	lsls	r7, r6, #31
 80006b8:	4317      	orrs	r7, r2
 80006ba:	0876      	lsrs	r6, r6, #1
 80006bc:	e771      	b.n	80005a2 <__aeabi_dadd+0xfa>
 80006be:	001f      	movs	r7, r3
 80006c0:	4317      	orrs	r7, r2
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x21e>
 80006c4:	e0ad      	b.n	8000822 <__aeabi_dadd+0x37a>
 80006c6:	1e4f      	subs	r7, r1, #1
 80006c8:	46bc      	mov	ip, r7
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e182      	b.n	80009d6 <__aeabi_dadd+0x52e>
 80006d0:	4f58      	ldr	r7, [pc, #352]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006d2:	42b9      	cmp	r1, r7
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x230>
 80006d6:	e190      	b.n	80009fa <__aeabi_dadd+0x552>
 80006d8:	4661      	mov	r1, ip
 80006da:	2701      	movs	r7, #1
 80006dc:	2938      	cmp	r1, #56	@ 0x38
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x23a>
 80006e0:	e72e      	b.n	8000540 <__aeabi_dadd+0x98>
 80006e2:	e718      	b.n	8000516 <__aeabi_dadd+0x6e>
 80006e4:	4f55      	ldr	r7, [pc, #340]	@ (800083c <__aeabi_dadd+0x394>)
 80006e6:	1c61      	adds	r1, r4, #1
 80006e8:	4239      	tst	r1, r7
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e0d0      	b.n	8000890 <__aeabi_dadd+0x3e8>
 80006ee:	0031      	movs	r1, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	001f      	movs	r7, r3
 80006f4:	4301      	orrs	r1, r0
 80006f6:	4317      	orrs	r7, r2
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e13d      	b.n	800097a <__aeabi_dadd+0x4d2>
 80006fe:	2900      	cmp	r1, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x25c>
 8000702:	e1bc      	b.n	8000a7e <__aeabi_dadd+0x5d6>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d000      	beq.n	800070a <__aeabi_dadd+0x262>
 8000708:	e1bf      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 800070a:	464b      	mov	r3, r9
 800070c:	2100      	movs	r1, #0
 800070e:	08d8      	lsrs	r0, r3, #3
 8000710:	0777      	lsls	r7, r6, #29
 8000712:	4307      	orrs	r7, r0
 8000714:	08f0      	lsrs	r0, r6, #3
 8000716:	0306      	lsls	r6, r0, #12
 8000718:	054c      	lsls	r4, r1, #21
 800071a:	0b36      	lsrs	r6, r6, #12
 800071c:	0d64      	lsrs	r4, r4, #21
 800071e:	e00c      	b.n	800073a <__aeabi_dadd+0x292>
 8000720:	4f44      	ldr	r7, [pc, #272]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000722:	42bc      	cmp	r4, r7
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e08b      	b.n	8000840 <__aeabi_dadd+0x398>
 8000728:	2701      	movs	r7, #1
 800072a:	2938      	cmp	r1, #56	@ 0x38
 800072c:	dcb2      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 800072e:	2780      	movs	r7, #128	@ 0x80
 8000730:	043f      	lsls	r7, r7, #16
 8000732:	433b      	orrs	r3, r7
 8000734:	e79c      	b.n	8000670 <__aeabi_dadd+0x1c8>
 8000736:	2600      	movs	r6, #0
 8000738:	2700      	movs	r7, #0
 800073a:	0524      	lsls	r4, r4, #20
 800073c:	4334      	orrs	r4, r6
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	432c      	orrs	r4, r5
 8000742:	0038      	movs	r0, r7
 8000744:	0021      	movs	r1, r4
 8000746:	b002      	add	sp, #8
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	077b      	lsls	r3, r7, #29
 8000754:	d004      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 8000756:	230f      	movs	r3, #15
 8000758:	403b      	ands	r3, r7
 800075a:	2b04      	cmp	r3, #4
 800075c:	d000      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 800075e:	e728      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000760:	08f8      	lsrs	r0, r7, #3
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000764:	0777      	lsls	r7, r6, #29
 8000766:	4307      	orrs	r7, r0
 8000768:	08f0      	lsrs	r0, r6, #3
 800076a:	429c      	cmp	r4, r3
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x2c8>
 800076e:	e24a      	b.n	8000c06 <__aeabi_dadd+0x75e>
 8000770:	003b      	movs	r3, r7
 8000772:	4303      	orrs	r3, r0
 8000774:	d059      	beq.n	800082a <__aeabi_dadd+0x382>
 8000776:	2680      	movs	r6, #128	@ 0x80
 8000778:	0336      	lsls	r6, r6, #12
 800077a:	4306      	orrs	r6, r0
 800077c:	0336      	lsls	r6, r6, #12
 800077e:	4c2d      	ldr	r4, [pc, #180]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000780:	0b36      	lsrs	r6, r6, #12
 8000782:	e7da      	b.n	800073a <__aeabi_dadd+0x292>
 8000784:	2900      	cmp	r1, #0
 8000786:	d061      	beq.n	800084c <__aeabi_dadd+0x3a4>
 8000788:	4641      	mov	r1, r8
 800078a:	1b09      	subs	r1, r1, r4
 800078c:	2c00      	cmp	r4, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ea>
 8000790:	e0b9      	b.n	8000906 <__aeabi_dadd+0x45e>
 8000792:	4c28      	ldr	r4, [pc, #160]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000794:	45a0      	cmp	r8, r4
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2f2>
 8000798:	e1a5      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 800079a:	2701      	movs	r7, #1
 800079c:	2938      	cmp	r1, #56	@ 0x38
 800079e:	dc13      	bgt.n	80007c8 <__aeabi_dadd+0x320>
 80007a0:	2480      	movs	r4, #128	@ 0x80
 80007a2:	0424      	lsls	r4, r4, #16
 80007a4:	4326      	orrs	r6, r4
 80007a6:	291f      	cmp	r1, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e1c8      	b.n	8000b3e <__aeabi_dadd+0x696>
 80007ac:	2420      	movs	r4, #32
 80007ae:	0037      	movs	r7, r6
 80007b0:	4648      	mov	r0, r9
 80007b2:	1a64      	subs	r4, r4, r1
 80007b4:	40a7      	lsls	r7, r4
 80007b6:	40c8      	lsrs	r0, r1
 80007b8:	4307      	orrs	r7, r0
 80007ba:	4648      	mov	r0, r9
 80007bc:	40a0      	lsls	r0, r4
 80007be:	40ce      	lsrs	r6, r1
 80007c0:	1e44      	subs	r4, r0, #1
 80007c2:	41a0      	sbcs	r0, r4
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	4307      	orrs	r7, r0
 80007c8:	18bf      	adds	r7, r7, r2
 80007ca:	4297      	cmp	r7, r2
 80007cc:	4192      	sbcs	r2, r2
 80007ce:	4252      	negs	r2, r2
 80007d0:	4644      	mov	r4, r8
 80007d2:	18d6      	adds	r6, r2, r3
 80007d4:	e763      	b.n	800069e <__aeabi_dadd+0x1f6>
 80007d6:	0038      	movs	r0, r7
 80007d8:	f001 fe06 	bl	80023e8 <__clzsi2>
 80007dc:	0003      	movs	r3, r0
 80007de:	3318      	adds	r3, #24
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x33e>
 80007e4:	e6bf      	b.n	8000566 <__aeabi_dadd+0xbe>
 80007e6:	003a      	movs	r2, r7
 80007e8:	3808      	subs	r0, #8
 80007ea:	4082      	lsls	r2, r0
 80007ec:	429c      	cmp	r4, r3
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x34a>
 80007f0:	e083      	b.n	80008fa <__aeabi_dadd+0x452>
 80007f2:	1b1b      	subs	r3, r3, r4
 80007f4:	1c58      	adds	r0, r3, #1
 80007f6:	281f      	cmp	r0, #31
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x354>
 80007fa:	e1b4      	b.n	8000b66 <__aeabi_dadd+0x6be>
 80007fc:	0017      	movs	r7, r2
 80007fe:	3b1f      	subs	r3, #31
 8000800:	40df      	lsrs	r7, r3
 8000802:	2820      	cmp	r0, #32
 8000804:	d005      	beq.n	8000812 <__aeabi_dadd+0x36a>
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	409a      	lsls	r2, r3
 800080c:	1e53      	subs	r3, r2, #1
 800080e:	419a      	sbcs	r2, r3
 8000810:	4317      	orrs	r7, r2
 8000812:	2400      	movs	r4, #0
 8000814:	2f00      	cmp	r7, #0
 8000816:	d00a      	beq.n	800082e <__aeabi_dadd+0x386>
 8000818:	077b      	lsls	r3, r7, #29
 800081a:	d000      	beq.n	800081e <__aeabi_dadd+0x376>
 800081c:	e6c4      	b.n	80005a8 <__aeabi_dadd+0x100>
 800081e:	0026      	movs	r6, r4
 8000820:	e79e      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000822:	464b      	mov	r3, r9
 8000824:	000c      	movs	r4, r1
 8000826:	08d8      	lsrs	r0, r3, #3
 8000828:	e79b      	b.n	8000762 <__aeabi_dadd+0x2ba>
 800082a:	2700      	movs	r7, #0
 800082c:	4c01      	ldr	r4, [pc, #4]	@ (8000834 <__aeabi_dadd+0x38c>)
 800082e:	2600      	movs	r6, #0
 8000830:	e783      	b.n	800073a <__aeabi_dadd+0x292>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	000007ff 	.word	0x000007ff
 8000838:	ff7fffff 	.word	0xff7fffff
 800083c:	000007fe 	.word	0x000007fe
 8000840:	464b      	mov	r3, r9
 8000842:	0777      	lsls	r7, r6, #29
 8000844:	08d8      	lsrs	r0, r3, #3
 8000846:	4307      	orrs	r7, r0
 8000848:	08f0      	lsrs	r0, r6, #3
 800084a:	e791      	b.n	8000770 <__aeabi_dadd+0x2c8>
 800084c:	4fcd      	ldr	r7, [pc, #820]	@ (8000b84 <__aeabi_dadd+0x6dc>)
 800084e:	1c61      	adds	r1, r4, #1
 8000850:	4239      	tst	r1, r7
 8000852:	d16b      	bne.n	800092c <__aeabi_dadd+0x484>
 8000854:	0031      	movs	r1, r6
 8000856:	4648      	mov	r0, r9
 8000858:	4301      	orrs	r1, r0
 800085a:	2c00      	cmp	r4, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e14b      	b.n	8000af8 <__aeabi_dadd+0x650>
 8000860:	001f      	movs	r7, r3
 8000862:	4317      	orrs	r7, r2
 8000864:	2900      	cmp	r1, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x3c2>
 8000868:	e181      	b.n	8000b6e <__aeabi_dadd+0x6c6>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x3c8>
 800086e:	e74c      	b.n	800070a <__aeabi_dadd+0x262>
 8000870:	444a      	add	r2, r9
 8000872:	454a      	cmp	r2, r9
 8000874:	4180      	sbcs	r0, r0
 8000876:	18f6      	adds	r6, r6, r3
 8000878:	4240      	negs	r0, r0
 800087a:	1836      	adds	r6, r6, r0
 800087c:	0233      	lsls	r3, r6, #8
 800087e:	d500      	bpl.n	8000882 <__aeabi_dadd+0x3da>
 8000880:	e1b0      	b.n	8000be4 <__aeabi_dadd+0x73c>
 8000882:	0017      	movs	r7, r2
 8000884:	4691      	mov	r9, r2
 8000886:	4337      	orrs	r7, r6
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x3e4>
 800088a:	e73e      	b.n	800070a <__aeabi_dadd+0x262>
 800088c:	2600      	movs	r6, #0
 800088e:	e754      	b.n	800073a <__aeabi_dadd+0x292>
 8000890:	4649      	mov	r1, r9
 8000892:	1a89      	subs	r1, r1, r2
 8000894:	4688      	mov	r8, r1
 8000896:	45c1      	cmp	r9, r8
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1af1      	subs	r1, r6, r3
 800089c:	427f      	negs	r7, r7
 800089e:	1bc9      	subs	r1, r1, r7
 80008a0:	020f      	lsls	r7, r1, #8
 80008a2:	d461      	bmi.n	8000968 <__aeabi_dadd+0x4c0>
 80008a4:	4647      	mov	r7, r8
 80008a6:	430f      	orrs	r7, r1
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x404>
 80008aa:	e0bd      	b.n	8000a28 <__aeabi_dadd+0x580>
 80008ac:	000e      	movs	r6, r1
 80008ae:	4647      	mov	r7, r8
 80008b0:	e651      	b.n	8000556 <__aeabi_dadd+0xae>
 80008b2:	4cb5      	ldr	r4, [pc, #724]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 80008b4:	45a0      	cmp	r8, r4
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x412>
 80008b8:	e100      	b.n	8000abc <__aeabi_dadd+0x614>
 80008ba:	2701      	movs	r7, #1
 80008bc:	2938      	cmp	r1, #56	@ 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x41a>
 80008c0:	e6b8      	b.n	8000634 <__aeabi_dadd+0x18c>
 80008c2:	2480      	movs	r4, #128	@ 0x80
 80008c4:	0424      	lsls	r4, r4, #16
 80008c6:	4326      	orrs	r6, r4
 80008c8:	e6a3      	b.n	8000612 <__aeabi_dadd+0x16a>
 80008ca:	4eb0      	ldr	r6, [pc, #704]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	4016      	ands	r6, r2
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e73f      	b.n	8000756 <__aeabi_dadd+0x2ae>
 80008d6:	e743      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80008d8:	000f      	movs	r7, r1
 80008da:	0018      	movs	r0, r3
 80008dc:	3f20      	subs	r7, #32
 80008de:	40f8      	lsrs	r0, r7
 80008e0:	4684      	mov	ip, r0
 80008e2:	2920      	cmp	r1, #32
 80008e4:	d003      	beq.n	80008ee <__aeabi_dadd+0x446>
 80008e6:	2740      	movs	r7, #64	@ 0x40
 80008e8:	1a79      	subs	r1, r7, r1
 80008ea:	408b      	lsls	r3, r1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	1e53      	subs	r3, r2, #1
 80008f0:	419a      	sbcs	r2, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	0017      	movs	r7, r2
 80008f6:	431f      	orrs	r7, r3
 80008f8:	e622      	b.n	8000540 <__aeabi_dadd+0x98>
 80008fa:	48a4      	ldr	r0, [pc, #656]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008fc:	1ae1      	subs	r1, r4, r3
 80008fe:	4010      	ands	r0, r2
 8000900:	0747      	lsls	r7, r0, #29
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	e707      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000906:	0034      	movs	r4, r6
 8000908:	4648      	mov	r0, r9
 800090a:	4304      	orrs	r4, r0
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0fa      	b.n	8000b06 <__aeabi_dadd+0x65e>
 8000910:	1e4c      	subs	r4, r1, #1
 8000912:	2901      	cmp	r1, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0d7      	b.n	8000ac8 <__aeabi_dadd+0x620>
 8000918:	4f9b      	ldr	r7, [pc, #620]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800091a:	42b9      	cmp	r1, r7
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x478>
 800091e:	e0e2      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 8000920:	2701      	movs	r7, #1
 8000922:	2c38      	cmp	r4, #56	@ 0x38
 8000924:	dd00      	ble.n	8000928 <__aeabi_dadd+0x480>
 8000926:	e74f      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000928:	0021      	movs	r1, r4
 800092a:	e73c      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 800092c:	4c96      	ldr	r4, [pc, #600]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800092e:	42a1      	cmp	r1, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x48c>
 8000932:	e0dd      	b.n	8000af0 <__aeabi_dadd+0x648>
 8000934:	444a      	add	r2, r9
 8000936:	454a      	cmp	r2, r9
 8000938:	4180      	sbcs	r0, r0
 800093a:	18f3      	adds	r3, r6, r3
 800093c:	4240      	negs	r0, r0
 800093e:	1818      	adds	r0, r3, r0
 8000940:	07c7      	lsls	r7, r0, #31
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	4317      	orrs	r7, r2
 8000946:	0846      	lsrs	r6, r0, #1
 8000948:	0752      	lsls	r2, r2, #29
 800094a:	d005      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 800094c:	220f      	movs	r2, #15
 800094e:	000c      	movs	r4, r1
 8000950:	403a      	ands	r2, r7
 8000952:	2a04      	cmp	r2, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 8000956:	e62c      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000958:	0776      	lsls	r6, r6, #29
 800095a:	08ff      	lsrs	r7, r7, #3
 800095c:	4337      	orrs	r7, r6
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	e6d9      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000962:	2700      	movs	r7, #0
 8000964:	2600      	movs	r6, #0
 8000966:	e6e8      	b.n	800073a <__aeabi_dadd+0x292>
 8000968:	4649      	mov	r1, r9
 800096a:	1a57      	subs	r7, r2, r1
 800096c:	42ba      	cmp	r2, r7
 800096e:	4192      	sbcs	r2, r2
 8000970:	1b9e      	subs	r6, r3, r6
 8000972:	4252      	negs	r2, r2
 8000974:	4665      	mov	r5, ip
 8000976:	1ab6      	subs	r6, r6, r2
 8000978:	e5ed      	b.n	8000556 <__aeabi_dadd+0xae>
 800097a:	2900      	cmp	r1, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x4d8>
 800097e:	e0c6      	b.n	8000b0e <__aeabi_dadd+0x666>
 8000980:	2f00      	cmp	r7, #0
 8000982:	d167      	bne.n	8000a54 <__aeabi_dadd+0x5ac>
 8000984:	2680      	movs	r6, #128	@ 0x80
 8000986:	2500      	movs	r5, #0
 8000988:	4c7f      	ldr	r4, [pc, #508]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800098a:	0336      	lsls	r6, r6, #12
 800098c:	e6d5      	b.n	800073a <__aeabi_dadd+0x292>
 800098e:	4665      	mov	r5, ip
 8000990:	000c      	movs	r4, r1
 8000992:	001e      	movs	r6, r3
 8000994:	08d0      	lsrs	r0, r2, #3
 8000996:	e6e4      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000998:	444a      	add	r2, r9
 800099a:	454a      	cmp	r2, r9
 800099c:	4180      	sbcs	r0, r0
 800099e:	18f3      	adds	r3, r6, r3
 80009a0:	4240      	negs	r0, r0
 80009a2:	1818      	adds	r0, r3, r0
 80009a4:	0011      	movs	r1, r2
 80009a6:	0203      	lsls	r3, r0, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x504>
 80009aa:	e096      	b.n	8000ada <__aeabi_dadd+0x632>
 80009ac:	4b77      	ldr	r3, [pc, #476]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80009ae:	0849      	lsrs	r1, r1, #1
 80009b0:	4018      	ands	r0, r3
 80009b2:	07c3      	lsls	r3, r0, #31
 80009b4:	430b      	orrs	r3, r1
 80009b6:	0844      	lsrs	r4, r0, #1
 80009b8:	0749      	lsls	r1, r1, #29
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x516>
 80009bc:	e129      	b.n	8000c12 <__aeabi_dadd+0x76a>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x520>
 80009c6:	e0ea      	b.n	8000b9e <__aeabi_dadd+0x6f6>
 80009c8:	1d1f      	adds	r7, r3, #4
 80009ca:	429f      	cmp	r7, r3
 80009cc:	41b6      	sbcs	r6, r6
 80009ce:	4276      	negs	r6, r6
 80009d0:	1936      	adds	r6, r6, r4
 80009d2:	2402      	movs	r4, #2
 80009d4:	e6c4      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80009d6:	4649      	mov	r1, r9
 80009d8:	1a8f      	subs	r7, r1, r2
 80009da:	45b9      	cmp	r9, r7
 80009dc:	4180      	sbcs	r0, r0
 80009de:	1af6      	subs	r6, r6, r3
 80009e0:	4240      	negs	r0, r0
 80009e2:	1a36      	subs	r6, r6, r0
 80009e4:	0233      	lsls	r3, r6, #8
 80009e6:	d406      	bmi.n	80009f6 <__aeabi_dadd+0x54e>
 80009e8:	0773      	lsls	r3, r6, #29
 80009ea:	08ff      	lsrs	r7, r7, #3
 80009ec:	2101      	movs	r1, #1
 80009ee:	431f      	orrs	r7, r3
 80009f0:	08f0      	lsrs	r0, r6, #3
 80009f2:	e690      	b.n	8000716 <__aeabi_dadd+0x26e>
 80009f4:	4665      	mov	r5, ip
 80009f6:	2401      	movs	r4, #1
 80009f8:	e5ab      	b.n	8000552 <__aeabi_dadd+0xaa>
 80009fa:	464b      	mov	r3, r9
 80009fc:	0777      	lsls	r7, r6, #29
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	4307      	orrs	r7, r0
 8000a02:	08f0      	lsrs	r0, r6, #3
 8000a04:	e6b4      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a06:	000f      	movs	r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	3f20      	subs	r7, #32
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2920      	cmp	r1, #32
 8000a12:	d003      	beq.n	8000a1c <__aeabi_dadd+0x574>
 8000a14:	2740      	movs	r7, #64	@ 0x40
 8000a16:	1a79      	subs	r1, r7, r1
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	1e53      	subs	r3, r2, #1
 8000a1e:	419a      	sbcs	r2, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	0017      	movs	r7, r2
 8000a24:	431f      	orrs	r7, r3
 8000a26:	e635      	b.n	8000694 <__aeabi_dadd+0x1ec>
 8000a28:	2500      	movs	r5, #0
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e684      	b.n	800073a <__aeabi_dadd+0x292>
 8000a30:	000c      	movs	r4, r1
 8000a32:	0035      	movs	r5, r6
 8000a34:	3c20      	subs	r4, #32
 8000a36:	40e5      	lsrs	r5, r4
 8000a38:	2920      	cmp	r1, #32
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a3c:	2440      	movs	r4, #64	@ 0x40
 8000a3e:	1a61      	subs	r1, r4, r1
 8000a40:	408e      	lsls	r6, r1
 8000a42:	4649      	mov	r1, r9
 8000a44:	4331      	orrs	r1, r6
 8000a46:	4689      	mov	r9, r1
 8000a48:	4648      	mov	r0, r9
 8000a4a:	1e41      	subs	r1, r0, #1
 8000a4c:	4188      	sbcs	r0, r1
 8000a4e:	0007      	movs	r7, r0
 8000a50:	432f      	orrs	r7, r5
 8000a52:	e5ef      	b.n	8000634 <__aeabi_dadd+0x18c>
 8000a54:	08d2      	lsrs	r2, r2, #3
 8000a56:	075f      	lsls	r7, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	e687      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a60:	1a17      	subs	r7, r2, r0
 8000a62:	42ba      	cmp	r2, r7
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	1b9e      	subs	r6, r3, r6
 8000a68:	4252      	negs	r2, r2
 8000a6a:	1ab6      	subs	r6, r6, r2
 8000a6c:	0233      	lsls	r3, r6, #8
 8000a6e:	d4c1      	bmi.n	80009f4 <__aeabi_dadd+0x54c>
 8000a70:	0773      	lsls	r3, r6, #29
 8000a72:	08ff      	lsrs	r7, r7, #3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	08f0      	lsrs	r0, r6, #3
 8000a7c:	e64b      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d07b      	beq.n	8000b7a <__aeabi_dadd+0x6d2>
 8000a82:	4665      	mov	r5, ip
 8000a84:	001e      	movs	r6, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	e63f      	b.n	800070a <__aeabi_dadd+0x262>
 8000a8a:	1a81      	subs	r1, r0, r2
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	45c1      	cmp	r9, r8
 8000a90:	41a4      	sbcs	r4, r4
 8000a92:	1af1      	subs	r1, r6, r3
 8000a94:	4264      	negs	r4, r4
 8000a96:	1b09      	subs	r1, r1, r4
 8000a98:	2480      	movs	r4, #128	@ 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4221      	tst	r1, r4
 8000a9e:	d077      	beq.n	8000b90 <__aeabi_dadd+0x6e8>
 8000aa0:	1a10      	subs	r0, r2, r0
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	0007      	movs	r7, r0
 8000aa8:	1b9e      	subs	r6, r3, r6
 8000aaa:	4252      	negs	r2, r2
 8000aac:	1ab6      	subs	r6, r6, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x60c>
 8000ab2:	e0a0      	b.n	8000bf6 <__aeabi_dadd+0x74e>
 8000ab4:	4665      	mov	r5, ip
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e63e      	b.n	800073a <__aeabi_dadd+0x292>
 8000abc:	075f      	lsls	r7, r3, #29
 8000abe:	08d2      	lsrs	r2, r2, #3
 8000ac0:	4665      	mov	r5, ip
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	08d8      	lsrs	r0, r3, #3
 8000ac6:	e653      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000ac8:	1881      	adds	r1, r0, r2
 8000aca:	4291      	cmp	r1, r2
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	18f0      	adds	r0, r6, r3
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	1880      	adds	r0, r0, r2
 8000ad4:	0203      	lsls	r3, r0, #8
 8000ad6:	d500      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000ad8:	e768      	b.n	80009ac <__aeabi_dadd+0x504>
 8000ada:	0747      	lsls	r7, r0, #29
 8000adc:	08c9      	lsrs	r1, r1, #3
 8000ade:	430f      	orrs	r7, r1
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	e617      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000ae6:	08d2      	lsrs	r2, r2, #3
 8000ae8:	075f      	lsls	r7, r3, #29
 8000aea:	4317      	orrs	r7, r2
 8000aec:	08d8      	lsrs	r0, r3, #3
 8000aee:	e63f      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000af0:	000c      	movs	r4, r1
 8000af2:	2600      	movs	r6, #0
 8000af4:	2700      	movs	r7, #0
 8000af6:	e620      	b.n	800073a <__aeabi_dadd+0x292>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d156      	bne.n	8000baa <__aeabi_dadd+0x702>
 8000afc:	075f      	lsls	r7, r3, #29
 8000afe:	08d2      	lsrs	r2, r2, #3
 8000b00:	4317      	orrs	r7, r2
 8000b02:	08d8      	lsrs	r0, r3, #3
 8000b04:	e634      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b06:	000c      	movs	r4, r1
 8000b08:	001e      	movs	r6, r3
 8000b0a:	08d0      	lsrs	r0, r2, #3
 8000b0c:	e629      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000b0e:	08c1      	lsrs	r1, r0, #3
 8000b10:	0770      	lsls	r0, r6, #29
 8000b12:	4301      	orrs	r1, r0
 8000b14:	08f0      	lsrs	r0, r6, #3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d062      	beq.n	8000be0 <__aeabi_dadd+0x738>
 8000b1a:	2480      	movs	r4, #128	@ 0x80
 8000b1c:	0324      	lsls	r4, r4, #12
 8000b1e:	4220      	tst	r0, r4
 8000b20:	d007      	beq.n	8000b32 <__aeabi_dadd+0x68a>
 8000b22:	08de      	lsrs	r6, r3, #3
 8000b24:	4226      	tst	r6, r4
 8000b26:	d104      	bne.n	8000b32 <__aeabi_dadd+0x68a>
 8000b28:	4665      	mov	r5, ip
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	08d1      	lsrs	r1, r2, #3
 8000b2e:	075b      	lsls	r3, r3, #29
 8000b30:	4319      	orrs	r1, r3
 8000b32:	0f4f      	lsrs	r7, r1, #29
 8000b34:	00c9      	lsls	r1, r1, #3
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	077f      	lsls	r7, r7, #29
 8000b3a:	430f      	orrs	r7, r1
 8000b3c:	e618      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	0030      	movs	r0, r6
 8000b42:	3c20      	subs	r4, #32
 8000b44:	40e0      	lsrs	r0, r4
 8000b46:	4684      	mov	ip, r0
 8000b48:	2920      	cmp	r1, #32
 8000b4a:	d005      	beq.n	8000b58 <__aeabi_dadd+0x6b0>
 8000b4c:	2440      	movs	r4, #64	@ 0x40
 8000b4e:	1a61      	subs	r1, r4, r1
 8000b50:	408e      	lsls	r6, r1
 8000b52:	4649      	mov	r1, r9
 8000b54:	4331      	orrs	r1, r6
 8000b56:	4689      	mov	r9, r1
 8000b58:	4648      	mov	r0, r9
 8000b5a:	1e41      	subs	r1, r0, #1
 8000b5c:	4188      	sbcs	r0, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	0007      	movs	r7, r0
 8000b62:	430f      	orrs	r7, r1
 8000b64:	e630      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000b66:	2120      	movs	r1, #32
 8000b68:	2700      	movs	r7, #0
 8000b6a:	1a09      	subs	r1, r1, r0
 8000b6c:	e50e      	b.n	800058c <__aeabi_dadd+0xe4>
 8000b6e:	001e      	movs	r6, r3
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dadd+0x6ce>
 8000b74:	e522      	b.n	80005bc <__aeabi_dadd+0x114>
 8000b76:	2400      	movs	r4, #0
 8000b78:	e758      	b.n	8000a2c <__aeabi_dadd+0x584>
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	2600      	movs	r6, #0
 8000b80:	e5db      	b.n	800073a <__aeabi_dadd+0x292>
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	000007fe 	.word	0x000007fe
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	ff7fffff 	.word	0xff7fffff
 8000b90:	4647      	mov	r7, r8
 8000b92:	430f      	orrs	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x6f0>
 8000b96:	e747      	b.n	8000a28 <__aeabi_dadd+0x580>
 8000b98:	000e      	movs	r6, r1
 8000b9a:	46c1      	mov	r9, r8
 8000b9c:	e5b5      	b.n	800070a <__aeabi_dadd+0x262>
 8000b9e:	08df      	lsrs	r7, r3, #3
 8000ba0:	0764      	lsls	r4, r4, #29
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4327      	orrs	r7, r4
 8000ba6:	0900      	lsrs	r0, r0, #4
 8000ba8:	e5b5      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000baa:	0019      	movs	r1, r3
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	0777      	lsls	r7, r6, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	08f0      	lsrs	r0, r6, #3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x714>
 8000bba:	e5d9      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0309      	lsls	r1, r1, #12
 8000bc0:	4208      	tst	r0, r1
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bc4:	08dc      	lsrs	r4, r3, #3
 8000bc6:	420c      	tst	r4, r1
 8000bc8:	d104      	bne.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0017      	movs	r7, r2
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	0f7b      	lsrs	r3, r7, #29
 8000bd6:	00ff      	lsls	r7, r7, #3
 8000bd8:	08ff      	lsrs	r7, r7, #3
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	431f      	orrs	r7, r3
 8000bde:	e5c7      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be0:	000f      	movs	r7, r1
 8000be2:	e5c5      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	4033      	ands	r3, r6
 8000bea:	075f      	lsls	r7, r3, #29
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	2401      	movs	r4, #1
 8000bf0:	4317      	orrs	r7, r2
 8000bf2:	0b1e      	lsrs	r6, r3, #12
 8000bf4:	e5a1      	b.n	800073a <__aeabi_dadd+0x292>
 8000bf6:	4226      	tst	r6, r4
 8000bf8:	d012      	beq.n	8000c20 <__aeabi_dadd+0x778>
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0002      	movs	r2, r0
 8000c00:	2401      	movs	r4, #1
 8000c02:	401e      	ands	r6, r3
 8000c04:	e4e6      	b.n	80005d4 <__aeabi_dadd+0x12c>
 8000c06:	0021      	movs	r1, r4
 8000c08:	e585      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c0a:	0017      	movs	r7, r2
 8000c0c:	e5a8      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000c0e:	003a      	movs	r2, r7
 8000c10:	e4d4      	b.n	80005bc <__aeabi_dadd+0x114>
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	0764      	lsls	r4, r4, #29
 8000c16:	431c      	orrs	r4, r3
 8000c18:	0027      	movs	r7, r4
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	0900      	lsrs	r0, r0, #4
 8000c1e:	e57a      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c20:	08c0      	lsrs	r0, r0, #3
 8000c22:	0777      	lsls	r7, r6, #29
 8000c24:	4307      	orrs	r7, r0
 8000c26:	4665      	mov	r5, ip
 8000c28:	2100      	movs	r1, #0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e573      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	ff7fffff 	.word	0xff7fffff

<<<<<<< HEAD
080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 fa75 	bl	8001a14 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f002 f960 	bl	80027f4 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 fa6c 	bl	8001a14 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fd2e 	bl	8001fa4 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f002 f91b 	bl	8002798 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 fa55 	bl	8001a14 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f002 f940 	bl	80027f4 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 faa4 	bl	8000ac4 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0244      	lsls	r4, r0, #9
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0047      	lsls	r7, r0, #1
 8000592:	1c0e      	adds	r6, r1, #0
 8000594:	0a64      	lsrs	r4, r4, #9
 8000596:	0e3f      	lsrs	r7, r7, #24
 8000598:	0fc5      	lsrs	r5, r0, #31
 800059a:	2f00      	cmp	r7, #0
 800059c:	d03c      	beq.n	8000618 <__aeabi_fdiv+0x94>
 800059e:	2fff      	cmp	r7, #255	@ 0xff
 80005a0:	d042      	beq.n	8000628 <__aeabi_fdiv+0xa4>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04d2      	lsls	r2, r2, #19
 80005ae:	4314      	orrs	r4, r2
 80005b0:	3f7f      	subs	r7, #127	@ 0x7f
 80005b2:	0273      	lsls	r3, r6, #9
 80005b4:	0a5b      	lsrs	r3, r3, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	0073      	lsls	r3, r6, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0ff6      	lsrs	r6, r6, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d01b      	beq.n	80005fa <__aeabi_fdiv+0x76>
 80005c2:	2bff      	cmp	r3, #255	@ 0xff
 80005c4:	d013      	beq.n	80005ee <__aeabi_fdiv+0x6a>
 80005c6:	4642      	mov	r2, r8
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	04c9      	lsls	r1, r1, #19
 80005ce:	4311      	orrs	r1, r2
 80005d0:	4688      	mov	r8, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	3b7f      	subs	r3, #127	@ 0x7f
 80005d6:	0029      	movs	r1, r5
 80005d8:	1aff      	subs	r7, r7, r3
 80005da:	464b      	mov	r3, r9
 80005dc:	4071      	eors	r1, r6
 80005de:	b2c9      	uxtb	r1, r1
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x62>
 80005e4:	e0b5      	b.n	8000752 <__aeabi_fdiv+0x1ce>
 80005e6:	4a74      	ldr	r2, [pc, #464]	@ (80007b8 <__aeabi_fdiv+0x234>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58d3      	ldr	r3, [r2, r3]
 80005ec:	469f      	mov	pc, r3
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d13f      	bne.n	8000674 <__aeabi_fdiv+0xf0>
 80005f4:	3fff      	subs	r7, #255	@ 0xff
 80005f6:	3302      	adds	r3, #2
 80005f8:	e003      	b.n	8000602 <__aeabi_fdiv+0x7e>
 80005fa:	4643      	mov	r3, r8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d12d      	bne.n	800065c <__aeabi_fdiv+0xd8>
 8000600:	2301      	movs	r3, #1
 8000602:	0029      	movs	r1, r5
 8000604:	464a      	mov	r2, r9
 8000606:	4071      	eors	r1, r6
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	2a0e      	cmp	r2, #14
 800060e:	d838      	bhi.n	8000682 <__aeabi_fdiv+0xfe>
 8000610:	486a      	ldr	r0, [pc, #424]	@ (80007bc <__aeabi_fdiv+0x238>)
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	5882      	ldr	r2, [r0, r2]
 8000616:	4697      	mov	pc, r2
 8000618:	2c00      	cmp	r4, #0
 800061a:	d113      	bne.n	8000644 <__aeabi_fdiv+0xc0>
 800061c:	2304      	movs	r3, #4
 800061e:	4699      	mov	r9, r3
 8000620:	3b03      	subs	r3, #3
 8000622:	2700      	movs	r7, #0
 8000624:	469a      	mov	sl, r3
 8000626:	e7c4      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000628:	2c00      	cmp	r4, #0
 800062a:	d105      	bne.n	8000638 <__aeabi_fdiv+0xb4>
 800062c:	2308      	movs	r3, #8
 800062e:	4699      	mov	r9, r3
 8000630:	3b06      	subs	r3, #6
 8000632:	27ff      	movs	r7, #255	@ 0xff
 8000634:	469a      	mov	sl, r3
 8000636:	e7bc      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000638:	230c      	movs	r3, #12
 800063a:	4699      	mov	r9, r3
 800063c:	3b09      	subs	r3, #9
 800063e:	27ff      	movs	r7, #255	@ 0xff
 8000640:	469a      	mov	sl, r3
 8000642:	e7b6      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 8000644:	0020      	movs	r0, r4
 8000646:	f002 f941 	bl	80028cc <__clzsi2>
 800064a:	2776      	movs	r7, #118	@ 0x76
 800064c:	1f43      	subs	r3, r0, #5
 800064e:	409c      	lsls	r4, r3
 8000650:	2300      	movs	r3, #0
 8000652:	427f      	negs	r7, r7
 8000654:	4699      	mov	r9, r3
 8000656:	469a      	mov	sl, r3
 8000658:	1a3f      	subs	r7, r7, r0
 800065a:	e7aa      	b.n	80005b2 <__aeabi_fdiv+0x2e>
 800065c:	4640      	mov	r0, r8
 800065e:	f002 f935 	bl	80028cc <__clzsi2>
 8000662:	4642      	mov	r2, r8
 8000664:	1f43      	subs	r3, r0, #5
 8000666:	409a      	lsls	r2, r3
 8000668:	2376      	movs	r3, #118	@ 0x76
 800066a:	425b      	negs	r3, r3
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	4690      	mov	r8, r2
 8000670:	2000      	movs	r0, #0
 8000672:	e7b0      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000674:	2303      	movs	r3, #3
 8000676:	464a      	mov	r2, r9
 8000678:	431a      	orrs	r2, r3
 800067a:	4691      	mov	r9, r2
 800067c:	2003      	movs	r0, #3
 800067e:	33fc      	adds	r3, #252	@ 0xfc
 8000680:	e7a9      	b.n	80005d6 <__aeabi_fdiv+0x52>
 8000682:	000d      	movs	r5, r1
 8000684:	20ff      	movs	r0, #255	@ 0xff
 8000686:	2200      	movs	r2, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	07ed      	lsls	r5, r5, #31
 800068c:	4310      	orrs	r0, r2
 800068e:	4328      	orrs	r0, r5
 8000690:	bce0      	pop	{r5, r6, r7}
 8000692:	46ba      	mov	sl, r7
 8000694:	46b1      	mov	r9, r6
 8000696:	46a8      	mov	r8, r5
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	000d      	movs	r5, r1
 800069c:	2000      	movs	r0, #0
 800069e:	2200      	movs	r2, #0
 80006a0:	e7f2      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006a2:	4653      	mov	r3, sl
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d0ed      	beq.n	8000684 <__aeabi_fdiv+0x100>
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d033      	beq.n	8000714 <__aeabi_fdiv+0x190>
 80006ac:	46a0      	mov	r8, r4
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d105      	bne.n	80006be <__aeabi_fdiv+0x13a>
 80006b2:	2000      	movs	r0, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	e7e7      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006b8:	0035      	movs	r5, r6
 80006ba:	2803      	cmp	r0, #3
 80006bc:	d07a      	beq.n	80007b4 <__aeabi_fdiv+0x230>
 80006be:	003b      	movs	r3, r7
 80006c0:	337f      	adds	r3, #127	@ 0x7f
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd2d      	ble.n	8000722 <__aeabi_fdiv+0x19e>
 80006c6:	4642      	mov	r2, r8
 80006c8:	0752      	lsls	r2, r2, #29
 80006ca:	d007      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006cc:	220f      	movs	r2, #15
 80006ce:	4641      	mov	r1, r8
 80006d0:	400a      	ands	r2, r1
 80006d2:	2a04      	cmp	r2, #4
 80006d4:	d002      	beq.n	80006dc <__aeabi_fdiv+0x158>
 80006d6:	2204      	movs	r2, #4
 80006d8:	4694      	mov	ip, r2
 80006da:	44e0      	add	r8, ip
 80006dc:	4642      	mov	r2, r8
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	d505      	bpl.n	80006ee <__aeabi_fdiv+0x16a>
 80006e2:	4642      	mov	r2, r8
 80006e4:	4b36      	ldr	r3, [pc, #216]	@ (80007c0 <__aeabi_fdiv+0x23c>)
 80006e6:	401a      	ands	r2, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	4690      	mov	r8, r2
 80006ec:	3380      	adds	r3, #128	@ 0x80
 80006ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80006f0:	dcc8      	bgt.n	8000684 <__aeabi_fdiv+0x100>
 80006f2:	4642      	mov	r2, r8
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	0a52      	lsrs	r2, r2, #9
 80006f8:	b2d8      	uxtb	r0, r3
 80006fa:	e7c5      	b.n	8000688 <__aeabi_fdiv+0x104>
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	2500      	movs	r5, #0
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	03d2      	lsls	r2, r2, #15
 8000704:	e7c0      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4214      	tst	r4, r2
 800070c:	d002      	beq.n	8000714 <__aeabi_fdiv+0x190>
 800070e:	4643      	mov	r3, r8
 8000710:	4213      	tst	r3, r2
 8000712:	d049      	beq.n	80007a8 <__aeabi_fdiv+0x224>
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	03d2      	lsls	r2, r2, #15
 8000718:	4322      	orrs	r2, r4
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	20ff      	movs	r0, #255	@ 0xff
 800071e:	0a52      	lsrs	r2, r2, #9
 8000720:	e7b2      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000722:	2201      	movs	r2, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	2b1b      	cmp	r3, #27
 8000728:	dcc3      	bgt.n	80006b2 <__aeabi_fdiv+0x12e>
 800072a:	4642      	mov	r2, r8
 800072c:	40da      	lsrs	r2, r3
 800072e:	4643      	mov	r3, r8
 8000730:	379e      	adds	r7, #158	@ 0x9e
 8000732:	40bb      	lsls	r3, r7
 8000734:	1e59      	subs	r1, r3, #1
 8000736:	418b      	sbcs	r3, r1
 8000738:	431a      	orrs	r2, r3
 800073a:	0753      	lsls	r3, r2, #29
 800073c:	d004      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 800073e:	230f      	movs	r3, #15
 8000740:	4013      	ands	r3, r2
 8000742:	2b04      	cmp	r3, #4
 8000744:	d000      	beq.n	8000748 <__aeabi_fdiv+0x1c4>
 8000746:	3204      	adds	r2, #4
 8000748:	0153      	lsls	r3, r2, #5
 800074a:	d529      	bpl.n	80007a0 <__aeabi_fdiv+0x21c>
 800074c:	2001      	movs	r0, #1
 800074e:	2200      	movs	r2, #0
 8000750:	e79a      	b.n	8000688 <__aeabi_fdiv+0x104>
 8000752:	4642      	mov	r2, r8
 8000754:	0163      	lsls	r3, r4, #5
 8000756:	0155      	lsls	r5, r2, #5
 8000758:	42ab      	cmp	r3, r5
 800075a:	d215      	bcs.n	8000788 <__aeabi_fdiv+0x204>
 800075c:	201b      	movs	r0, #27
 800075e:	2200      	movs	r2, #0
 8000760:	3f01      	subs	r7, #1
 8000762:	2601      	movs	r6, #1
 8000764:	001c      	movs	r4, r3
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2c00      	cmp	r4, #0
 800076c:	db01      	blt.n	8000772 <__aeabi_fdiv+0x1ee>
 800076e:	429d      	cmp	r5, r3
 8000770:	d801      	bhi.n	8000776 <__aeabi_fdiv+0x1f2>
 8000772:	1b5b      	subs	r3, r3, r5
 8000774:	4332      	orrs	r2, r6
 8000776:	3801      	subs	r0, #1
 8000778:	2800      	cmp	r0, #0
 800077a:	d1f3      	bne.n	8000764 <__aeabi_fdiv+0x1e0>
 800077c:	1e58      	subs	r0, r3, #1
 800077e:	4183      	sbcs	r3, r0
 8000780:	4313      	orrs	r3, r2
 8000782:	4698      	mov	r8, r3
 8000784:	000d      	movs	r5, r1
 8000786:	e79a      	b.n	80006be <__aeabi_fdiv+0x13a>
 8000788:	201a      	movs	r0, #26
 800078a:	2201      	movs	r2, #1
 800078c:	1b5b      	subs	r3, r3, r5
 800078e:	e7e8      	b.n	8000762 <__aeabi_fdiv+0x1de>
 8000790:	3b02      	subs	r3, #2
 8000792:	425a      	negs	r2, r3
 8000794:	4153      	adcs	r3, r2
 8000796:	425b      	negs	r3, r3
 8000798:	0035      	movs	r5, r6
 800079a:	2200      	movs	r2, #0
 800079c:	b2d8      	uxtb	r0, r3
 800079e:	e773      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a0:	0192      	lsls	r2, r2, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	0a52      	lsrs	r2, r2, #9
 80007a6:	e76f      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007a8:	431a      	orrs	r2, r3
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	0035      	movs	r5, r6
 80007ae:	20ff      	movs	r0, #255	@ 0xff
 80007b0:	0a52      	lsrs	r2, r2, #9
 80007b2:	e769      	b.n	8000688 <__aeabi_fdiv+0x104>
 80007b4:	4644      	mov	r4, r8
 80007b6:	e7ad      	b.n	8000714 <__aeabi_fdiv+0x190>
 80007b8:	08016784 	.word	0x08016784
 80007bc:	080167c4 	.word	0x080167c4
 80007c0:	f7ffffff 	.word	0xf7ffffff

080007c4 <__aeabi_fmul>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	4646      	mov	r6, r8
 80007ca:	46d6      	mov	lr, sl
 80007cc:	0243      	lsls	r3, r0, #9
 80007ce:	0a5b      	lsrs	r3, r3, #9
 80007d0:	0045      	lsls	r5, r0, #1
 80007d2:	b5c0      	push	{r6, r7, lr}
 80007d4:	4699      	mov	r9, r3
 80007d6:	1c0f      	adds	r7, r1, #0
 80007d8:	0e2d      	lsrs	r5, r5, #24
 80007da:	0fc6      	lsrs	r6, r0, #31
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fmul+0x1e>
 80007e0:	e088      	b.n	80008f4 <__aeabi_fmul+0x130>
 80007e2:	2dff      	cmp	r5, #255	@ 0xff
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fmul+0x24>
 80007e6:	e08d      	b.n	8000904 <__aeabi_fmul+0x140>
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	04d2      	lsls	r2, r2, #19
 80007ee:	431a      	orrs	r2, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	4691      	mov	r9, r2
 80007f4:	4698      	mov	r8, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	3d7f      	subs	r5, #127	@ 0x7f
 80007fa:	027c      	lsls	r4, r7, #9
 80007fc:	007b      	lsls	r3, r7, #1
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	0e1b      	lsrs	r3, r3, #24
 8000802:	0fff      	lsrs	r7, r7, #31
 8000804:	2b00      	cmp	r3, #0
 8000806:	d068      	beq.n	80008da <__aeabi_fmul+0x116>
 8000808:	2bff      	cmp	r3, #255	@ 0xff
 800080a:	d021      	beq.n	8000850 <__aeabi_fmul+0x8c>
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4314      	orrs	r4, r2
 8000814:	4642      	mov	r2, r8
 8000816:	3b7f      	subs	r3, #127	@ 0x7f
 8000818:	195b      	adds	r3, r3, r5
 800081a:	2100      	movs	r1, #0
 800081c:	1c5d      	adds	r5, r3, #1
 800081e:	2a0a      	cmp	r2, #10
 8000820:	dc2e      	bgt.n	8000880 <__aeabi_fmul+0xbc>
 8000822:	407e      	eors	r6, r7
 8000824:	4642      	mov	r2, r8
 8000826:	2a02      	cmp	r2, #2
 8000828:	dc23      	bgt.n	8000872 <__aeabi_fmul+0xae>
 800082a:	3a01      	subs	r2, #1
 800082c:	2a01      	cmp	r2, #1
 800082e:	d900      	bls.n	8000832 <__aeabi_fmul+0x6e>
 8000830:	e0bd      	b.n	80009ae <__aeabi_fmul+0x1ea>
 8000832:	2902      	cmp	r1, #2
 8000834:	d06e      	beq.n	8000914 <__aeabi_fmul+0x150>
 8000836:	2901      	cmp	r1, #1
 8000838:	d12c      	bne.n	8000894 <__aeabi_fmul+0xd0>
 800083a:	2000      	movs	r0, #0
 800083c:	2200      	movs	r2, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	07f6      	lsls	r6, r6, #31
 8000842:	4310      	orrs	r0, r2
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	002b      	movs	r3, r5
 8000852:	33ff      	adds	r3, #255	@ 0xff
 8000854:	2c00      	cmp	r4, #0
 8000856:	d065      	beq.n	8000924 <__aeabi_fmul+0x160>
 8000858:	2203      	movs	r2, #3
 800085a:	4641      	mov	r1, r8
 800085c:	4311      	orrs	r1, r2
 800085e:	0032      	movs	r2, r6
 8000860:	3501      	adds	r5, #1
 8000862:	4688      	mov	r8, r1
 8000864:	407a      	eors	r2, r7
 8000866:	35ff      	adds	r5, #255	@ 0xff
 8000868:	290a      	cmp	r1, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0xaa>
 800086c:	e0d8      	b.n	8000a20 <__aeabi_fmul+0x25c>
 800086e:	0016      	movs	r6, r2
 8000870:	2103      	movs	r1, #3
 8000872:	4640      	mov	r0, r8
 8000874:	2201      	movs	r2, #1
 8000876:	4082      	lsls	r2, r0
 8000878:	20a6      	movs	r0, #166	@ 0xa6
 800087a:	00c0      	lsls	r0, r0, #3
 800087c:	4202      	tst	r2, r0
 800087e:	d020      	beq.n	80008c2 <__aeabi_fmul+0xfe>
 8000880:	4653      	mov	r3, sl
 8000882:	2b02      	cmp	r3, #2
 8000884:	d046      	beq.n	8000914 <__aeabi_fmul+0x150>
 8000886:	2b03      	cmp	r3, #3
 8000888:	d100      	bne.n	800088c <__aeabi_fmul+0xc8>
 800088a:	e0bb      	b.n	8000a04 <__aeabi_fmul+0x240>
 800088c:	4651      	mov	r1, sl
 800088e:	464c      	mov	r4, r9
 8000890:	2901      	cmp	r1, #1
 8000892:	d0d2      	beq.n	800083a <__aeabi_fmul+0x76>
 8000894:	002b      	movs	r3, r5
 8000896:	337f      	adds	r3, #127	@ 0x7f
 8000898:	2b00      	cmp	r3, #0
 800089a:	dd70      	ble.n	800097e <__aeabi_fmul+0x1ba>
 800089c:	0762      	lsls	r2, r4, #29
 800089e:	d004      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008a0:	220f      	movs	r2, #15
 80008a2:	4022      	ands	r2, r4
 80008a4:	2a04      	cmp	r2, #4
 80008a6:	d000      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008a8:	3404      	adds	r4, #4
 80008aa:	0122      	lsls	r2, r4, #4
 80008ac:	d503      	bpl.n	80008b6 <__aeabi_fmul+0xf2>
 80008ae:	4b63      	ldr	r3, [pc, #396]	@ (8000a3c <__aeabi_fmul+0x278>)
 80008b0:	401c      	ands	r4, r3
 80008b2:	002b      	movs	r3, r5
 80008b4:	3380      	adds	r3, #128	@ 0x80
 80008b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008b8:	dc2c      	bgt.n	8000914 <__aeabi_fmul+0x150>
 80008ba:	01a2      	lsls	r2, r4, #6
 80008bc:	0a52      	lsrs	r2, r2, #9
 80008be:	b2d8      	uxtb	r0, r3
 80008c0:	e7bd      	b.n	800083e <__aeabi_fmul+0x7a>
 80008c2:	2090      	movs	r0, #144	@ 0x90
 80008c4:	0080      	lsls	r0, r0, #2
 80008c6:	4202      	tst	r2, r0
 80008c8:	d127      	bne.n	800091a <__aeabi_fmul+0x156>
 80008ca:	38b9      	subs	r0, #185	@ 0xb9
 80008cc:	38ff      	subs	r0, #255	@ 0xff
 80008ce:	4210      	tst	r0, r2
 80008d0:	d06d      	beq.n	80009ae <__aeabi_fmul+0x1ea>
 80008d2:	003e      	movs	r6, r7
 80008d4:	46a1      	mov	r9, r4
 80008d6:	468a      	mov	sl, r1
 80008d8:	e7d2      	b.n	8000880 <__aeabi_fmul+0xbc>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d141      	bne.n	8000962 <__aeabi_fmul+0x19e>
 80008de:	2301      	movs	r3, #1
 80008e0:	4642      	mov	r2, r8
 80008e2:	431a      	orrs	r2, r3
 80008e4:	4690      	mov	r8, r2
 80008e6:	002b      	movs	r3, r5
 80008e8:	4642      	mov	r2, r8
 80008ea:	2101      	movs	r1, #1
 80008ec:	1c5d      	adds	r5, r3, #1
 80008ee:	2a0a      	cmp	r2, #10
 80008f0:	dd97      	ble.n	8000822 <__aeabi_fmul+0x5e>
 80008f2:	e7c5      	b.n	8000880 <__aeabi_fmul+0xbc>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d126      	bne.n	8000946 <__aeabi_fmul+0x182>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4698      	mov	r8, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2500      	movs	r5, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e77a      	b.n	80007fa <__aeabi_fmul+0x36>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d118      	bne.n	800093a <__aeabi_fmul+0x176>
 8000908:	2308      	movs	r3, #8
 800090a:	4698      	mov	r8, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	25ff      	movs	r5, #255	@ 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e772      	b.n	80007fa <__aeabi_fmul+0x36>
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	2200      	movs	r2, #0
 8000918:	e791      	b.n	800083e <__aeabi_fmul+0x7a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	2600      	movs	r6, #0
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	03d2      	lsls	r2, r2, #15
 8000922:	e78c      	b.n	800083e <__aeabi_fmul+0x7a>
 8000924:	4641      	mov	r1, r8
 8000926:	2202      	movs	r2, #2
 8000928:	3501      	adds	r5, #1
 800092a:	4311      	orrs	r1, r2
 800092c:	4688      	mov	r8, r1
 800092e:	35ff      	adds	r5, #255	@ 0xff
 8000930:	290a      	cmp	r1, #10
 8000932:	dca5      	bgt.n	8000880 <__aeabi_fmul+0xbc>
 8000934:	2102      	movs	r1, #2
 8000936:	407e      	eors	r6, r7
 8000938:	e774      	b.n	8000824 <__aeabi_fmul+0x60>
 800093a:	230c      	movs	r3, #12
 800093c:	4698      	mov	r8, r3
 800093e:	3b09      	subs	r3, #9
 8000940:	25ff      	movs	r5, #255	@ 0xff
 8000942:	469a      	mov	sl, r3
 8000944:	e759      	b.n	80007fa <__aeabi_fmul+0x36>
 8000946:	0018      	movs	r0, r3
 8000948:	f001 ffc0 	bl	80028cc <__clzsi2>
 800094c:	464a      	mov	r2, r9
 800094e:	1f43      	subs	r3, r0, #5
 8000950:	2576      	movs	r5, #118	@ 0x76
 8000952:	409a      	lsls	r2, r3
 8000954:	2300      	movs	r3, #0
 8000956:	426d      	negs	r5, r5
 8000958:	4691      	mov	r9, r2
 800095a:	4698      	mov	r8, r3
 800095c:	469a      	mov	sl, r3
 800095e:	1a2d      	subs	r5, r5, r0
 8000960:	e74b      	b.n	80007fa <__aeabi_fmul+0x36>
 8000962:	0020      	movs	r0, r4
 8000964:	f001 ffb2 	bl	80028cc <__clzsi2>
 8000968:	4642      	mov	r2, r8
 800096a:	1f43      	subs	r3, r0, #5
 800096c:	409c      	lsls	r4, r3
 800096e:	1a2b      	subs	r3, r5, r0
 8000970:	3b76      	subs	r3, #118	@ 0x76
 8000972:	2100      	movs	r1, #0
 8000974:	1c5d      	adds	r5, r3, #1
 8000976:	2a0a      	cmp	r2, #10
 8000978:	dc00      	bgt.n	800097c <__aeabi_fmul+0x1b8>
 800097a:	e752      	b.n	8000822 <__aeabi_fmul+0x5e>
 800097c:	e780      	b.n	8000880 <__aeabi_fmul+0xbc>
 800097e:	2201      	movs	r2, #1
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b1b      	cmp	r3, #27
 8000984:	dd00      	ble.n	8000988 <__aeabi_fmul+0x1c4>
 8000986:	e758      	b.n	800083a <__aeabi_fmul+0x76>
 8000988:	359e      	adds	r5, #158	@ 0x9e
 800098a:	0022      	movs	r2, r4
 800098c:	40ac      	lsls	r4, r5
 800098e:	40da      	lsrs	r2, r3
 8000990:	1e63      	subs	r3, r4, #1
 8000992:	419c      	sbcs	r4, r3
 8000994:	4322      	orrs	r2, r4
 8000996:	0753      	lsls	r3, r2, #29
 8000998:	d004      	beq.n	80009a4 <__aeabi_fmul+0x1e0>
 800099a:	230f      	movs	r3, #15
 800099c:	4013      	ands	r3, r2
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fmul+0x1e0>
 80009a2:	3204      	adds	r2, #4
 80009a4:	0153      	lsls	r3, r2, #5
 80009a6:	d537      	bpl.n	8000a18 <__aeabi_fmul+0x254>
 80009a8:	2001      	movs	r0, #1
 80009aa:	2200      	movs	r2, #0
 80009ac:	e747      	b.n	800083e <__aeabi_fmul+0x7a>
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	464a      	mov	r2, r9
 80009b2:	0424      	lsls	r4, r4, #16
 80009b4:	0c24      	lsrs	r4, r4, #16
 80009b6:	0027      	movs	r7, r4
 80009b8:	0c10      	lsrs	r0, r2, #16
 80009ba:	0412      	lsls	r2, r2, #16
 80009bc:	0c12      	lsrs	r2, r2, #16
 80009be:	4344      	muls	r4, r0
 80009c0:	4357      	muls	r7, r2
 80009c2:	4348      	muls	r0, r1
 80009c4:	4351      	muls	r1, r2
 80009c6:	0c3a      	lsrs	r2, r7, #16
 80009c8:	1909      	adds	r1, r1, r4
 80009ca:	1852      	adds	r2, r2, r1
 80009cc:	4294      	cmp	r4, r2
 80009ce:	d903      	bls.n	80009d8 <__aeabi_fmul+0x214>
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0249      	lsls	r1, r1, #9
 80009d4:	468c      	mov	ip, r1
 80009d6:	4460      	add	r0, ip
 80009d8:	043f      	lsls	r7, r7, #16
 80009da:	0411      	lsls	r1, r2, #16
 80009dc:	0c3f      	lsrs	r7, r7, #16
 80009de:	19c9      	adds	r1, r1, r7
 80009e0:	018c      	lsls	r4, r1, #6
 80009e2:	1e67      	subs	r7, r4, #1
 80009e4:	41bc      	sbcs	r4, r7
 80009e6:	0c12      	lsrs	r2, r2, #16
 80009e8:	0e89      	lsrs	r1, r1, #26
 80009ea:	1812      	adds	r2, r2, r0
 80009ec:	430c      	orrs	r4, r1
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	4314      	orrs	r4, r2
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	d50e      	bpl.n	8000a14 <__aeabi_fmul+0x250>
 80009f6:	2301      	movs	r3, #1
 80009f8:	0862      	lsrs	r2, r4, #1
 80009fa:	401c      	ands	r4, r3
 80009fc:	4314      	orrs	r4, r2
 80009fe:	e749      	b.n	8000894 <__aeabi_fmul+0xd0>
 8000a00:	003e      	movs	r6, r7
 8000a02:	46a1      	mov	r9, r4
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	464b      	mov	r3, r9
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	0252      	lsls	r2, r2, #9
 8000a0e:	20ff      	movs	r0, #255	@ 0xff
 8000a10:	0a52      	lsrs	r2, r2, #9
 8000a12:	e714      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a14:	001d      	movs	r5, r3
 8000a16:	e73d      	b.n	8000894 <__aeabi_fmul+0xd0>
 8000a18:	0192      	lsls	r2, r2, #6
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	0a52      	lsrs	r2, r2, #9
 8000a1e:	e70e      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a20:	290f      	cmp	r1, #15
 8000a22:	d1ed      	bne.n	8000a00 <__aeabi_fmul+0x23c>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	464b      	mov	r3, r9
 8000a28:	03d2      	lsls	r2, r2, #15
 8000a2a:	4213      	tst	r3, r2
 8000a2c:	d0ea      	beq.n	8000a04 <__aeabi_fmul+0x240>
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d1e8      	bne.n	8000a04 <__aeabi_fmul+0x240>
 8000a32:	003e      	movs	r6, r7
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	4322      	orrs	r2, r4
 8000a38:	e701      	b.n	800083e <__aeabi_fmul+0x7a>
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	f7ffffff 	.word	0xf7ffffff

08000a40 <__aeabi_ui2f>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	1e04      	subs	r4, r0, #0
 8000a44:	d00e      	beq.n	8000a64 <__aeabi_ui2f+0x24>
 8000a46:	f001 ff41 	bl	80028cc <__clzsi2>
 8000a4a:	239e      	movs	r3, #158	@ 0x9e
 8000a4c:	0001      	movs	r1, r0
 8000a4e:	1a1b      	subs	r3, r3, r0
 8000a50:	2b96      	cmp	r3, #150	@ 0x96
 8000a52:	dc0c      	bgt.n	8000a6e <__aeabi_ui2f+0x2e>
 8000a54:	2808      	cmp	r0, #8
 8000a56:	d02f      	beq.n	8000ab8 <__aeabi_ui2f+0x78>
 8000a58:	3908      	subs	r1, #8
 8000a5a:	408c      	lsls	r4, r1
 8000a5c:	0264      	lsls	r4, r4, #9
 8000a5e:	0a64      	lsrs	r4, r4, #9
 8000a60:	b2d8      	uxtb	r0, r3
 8000a62:	e001      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000a64:	2000      	movs	r0, #0
 8000a66:	2400      	movs	r4, #0
 8000a68:	05c0      	lsls	r0, r0, #23
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	2b99      	cmp	r3, #153	@ 0x99
 8000a70:	dc16      	bgt.n	8000aa0 <__aeabi_ui2f+0x60>
 8000a72:	1f42      	subs	r2, r0, #5
 8000a74:	2805      	cmp	r0, #5
 8000a76:	d000      	beq.n	8000a7a <__aeabi_ui2f+0x3a>
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	0022      	movs	r2, r4
 8000a7c:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <__aeabi_ui2f+0x80>)
 8000a7e:	4002      	ands	r2, r0
 8000a80:	0765      	lsls	r5, r4, #29
 8000a82:	d009      	beq.n	8000a98 <__aeabi_ui2f+0x58>
 8000a84:	250f      	movs	r5, #15
 8000a86:	402c      	ands	r4, r5
 8000a88:	2c04      	cmp	r4, #4
 8000a8a:	d005      	beq.n	8000a98 <__aeabi_ui2f+0x58>
 8000a8c:	3204      	adds	r2, #4
 8000a8e:	0154      	lsls	r4, r2, #5
 8000a90:	d502      	bpl.n	8000a98 <__aeabi_ui2f+0x58>
 8000a92:	239f      	movs	r3, #159	@ 0x9f
 8000a94:	4002      	ands	r2, r0
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	0192      	lsls	r2, r2, #6
 8000a9a:	0a54      	lsrs	r4, r2, #9
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	e7e3      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	0020      	movs	r0, r4
 8000aa4:	321b      	adds	r2, #27
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	1e50      	subs	r0, r2, #1
 8000aac:	4182      	sbcs	r2, r0
 8000aae:	2005      	movs	r0, #5
 8000ab0:	1a40      	subs	r0, r0, r1
 8000ab2:	40c4      	lsrs	r4, r0
 8000ab4:	4314      	orrs	r4, r2
 8000ab6:	e7e0      	b.n	8000a7a <__aeabi_ui2f+0x3a>
 8000ab8:	0264      	lsls	r4, r4, #9
 8000aba:	2096      	movs	r0, #150	@ 0x96
 8000abc:	0a64      	lsrs	r4, r4, #9
 8000abe:	e7d3      	b.n	8000a68 <__aeabi_ui2f+0x28>
 8000ac0:	fbffffff 	.word	0xfbffffff

08000ac4 <__aeabi_dadd>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	464e      	mov	r6, r9
 8000aca:	4645      	mov	r5, r8
 8000acc:	46de      	mov	lr, fp
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	9000      	str	r0, [sp, #0]
 8000ad4:	9101      	str	r1, [sp, #4]
 8000ad6:	030c      	lsls	r4, r1, #12
 8000ad8:	004f      	lsls	r7, r1, #1
 8000ada:	0fce      	lsrs	r6, r1, #31
 8000adc:	0a61      	lsrs	r1, r4, #9
 8000ade:	9c00      	ldr	r4, [sp, #0]
 8000ae0:	031d      	lsls	r5, r3, #12
 8000ae2:	0f64      	lsrs	r4, r4, #29
 8000ae4:	430c      	orrs	r4, r1
 8000ae6:	9900      	ldr	r1, [sp, #0]
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	00c8      	lsls	r0, r1, #3
 8000aee:	0059      	lsls	r1, r3, #1
 8000af0:	0d4b      	lsrs	r3, r1, #21
 8000af2:	4699      	mov	r9, r3
 8000af4:	9a00      	ldr	r2, [sp, #0]
 8000af6:	9b01      	ldr	r3, [sp, #4]
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0fd9      	lsrs	r1, r3, #31
 8000afc:	0f53      	lsrs	r3, r2, #29
 8000afe:	432b      	orrs	r3, r5
 8000b00:	469a      	mov	sl, r3
 8000b02:	9b00      	ldr	r3, [sp, #0]
 8000b04:	0d7f      	lsrs	r7, r7, #21
 8000b06:	00da      	lsls	r2, r3, #3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	464a      	mov	r2, r9
 8000b0c:	46b0      	mov	r8, r6
 8000b0e:	1aba      	subs	r2, r7, r2
 8000b10:	428e      	cmp	r6, r1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x52>
 8000b14:	e0b0      	b.n	8000c78 <__aeabi_dadd+0x1b4>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_dadd+0x58>
 8000b1a:	e078      	b.n	8000c0e <__aeabi_dadd+0x14a>
 8000b1c:	4649      	mov	r1, r9
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x60>
 8000b22:	e0e9      	b.n	8000cf8 <__aeabi_dadd+0x234>
 8000b24:	49c9      	ldr	r1, [pc, #804]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000b26:	428f      	cmp	r7, r1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x68>
 8000b2a:	e195      	b.n	8000e58 <__aeabi_dadd+0x394>
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	2a38      	cmp	r2, #56	@ 0x38
 8000b30:	dc16      	bgt.n	8000b60 <__aeabi_dadd+0x9c>
 8000b32:	2180      	movs	r1, #128	@ 0x80
 8000b34:	4653      	mov	r3, sl
 8000b36:	0409      	lsls	r1, r1, #16
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	2a1f      	cmp	r2, #31
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_dadd+0x7e>
 8000b40:	e1e7      	b.n	8000f12 <__aeabi_dadd+0x44e>
 8000b42:	2120      	movs	r1, #32
 8000b44:	4655      	mov	r5, sl
 8000b46:	1a8b      	subs	r3, r1, r2
 8000b48:	4661      	mov	r1, ip
 8000b4a:	409d      	lsls	r5, r3
 8000b4c:	40d1      	lsrs	r1, r2
 8000b4e:	430d      	orrs	r5, r1
 8000b50:	4661      	mov	r1, ip
 8000b52:	4099      	lsls	r1, r3
 8000b54:	1e4b      	subs	r3, r1, #1
 8000b56:	4199      	sbcs	r1, r3
 8000b58:	4653      	mov	r3, sl
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	430d      	orrs	r5, r1
 8000b5e:	1ae4      	subs	r4, r4, r3
 8000b60:	1b45      	subs	r5, r0, r5
 8000b62:	42a8      	cmp	r0, r5
 8000b64:	4180      	sbcs	r0, r0
 8000b66:	4240      	negs	r0, r0
 8000b68:	1a24      	subs	r4, r4, r0
 8000b6a:	0223      	lsls	r3, r4, #8
 8000b6c:	d400      	bmi.n	8000b70 <__aeabi_dadd+0xac>
 8000b6e:	e10f      	b.n	8000d90 <__aeabi_dadd+0x2cc>
 8000b70:	0264      	lsls	r4, r4, #9
 8000b72:	0a64      	lsrs	r4, r4, #9
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0xb6>
 8000b78:	e139      	b.n	8000dee <__aeabi_dadd+0x32a>
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f001 fea6 	bl	80028cc <__clzsi2>
 8000b80:	0003      	movs	r3, r0
 8000b82:	3b08      	subs	r3, #8
 8000b84:	2120      	movs	r1, #32
 8000b86:	0028      	movs	r0, r5
 8000b88:	1aca      	subs	r2, r1, r3
 8000b8a:	40d0      	lsrs	r0, r2
 8000b8c:	409c      	lsls	r4, r3
 8000b8e:	0002      	movs	r2, r0
 8000b90:	409d      	lsls	r5, r3
 8000b92:	4322      	orrs	r2, r4
 8000b94:	429f      	cmp	r7, r3
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_dadd+0xd6>
 8000b98:	e173      	b.n	8000e82 <__aeabi_dadd+0x3be>
 8000b9a:	1bd8      	subs	r0, r3, r7
 8000b9c:	3001      	adds	r0, #1
 8000b9e:	1a09      	subs	r1, r1, r0
 8000ba0:	002c      	movs	r4, r5
 8000ba2:	408d      	lsls	r5, r1
 8000ba4:	40c4      	lsrs	r4, r0
 8000ba6:	1e6b      	subs	r3, r5, #1
 8000ba8:	419d      	sbcs	r5, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	40c2      	lsrs	r2, r0
 8000bae:	408b      	lsls	r3, r1
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	0014      	movs	r4, r2
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	076b      	lsls	r3, r5, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_dadd+0x10c>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	402b      	ands	r3, r5
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_dadd+0x10c>
 8000bc4:	1d2b      	adds	r3, r5, #4
 8000bc6:	42ab      	cmp	r3, r5
 8000bc8:	41ad      	sbcs	r5, r5
 8000bca:	426d      	negs	r5, r5
 8000bcc:	1964      	adds	r4, r4, r5
 8000bce:	001d      	movs	r5, r3
 8000bd0:	0223      	lsls	r3, r4, #8
 8000bd2:	d400      	bmi.n	8000bd6 <__aeabi_dadd+0x112>
 8000bd4:	e12d      	b.n	8000e32 <__aeabi_dadd+0x36e>
 8000bd6:	4a9d      	ldr	r2, [pc, #628]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000bd8:	3701      	adds	r7, #1
 8000bda:	4297      	cmp	r7, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x11c>
 8000bde:	e0d3      	b.n	8000d88 <__aeabi_dadd+0x2c4>
 8000be0:	4646      	mov	r6, r8
 8000be2:	499b      	ldr	r1, [pc, #620]	@ (8000e50 <__aeabi_dadd+0x38c>)
 8000be4:	08ed      	lsrs	r5, r5, #3
 8000be6:	4021      	ands	r1, r4
 8000be8:	074a      	lsls	r2, r1, #29
 8000bea:	432a      	orrs	r2, r5
 8000bec:	057c      	lsls	r4, r7, #21
 8000bee:	024d      	lsls	r5, r1, #9
 8000bf0:	0b2d      	lsrs	r5, r5, #12
 8000bf2:	0d64      	lsrs	r4, r4, #21
 8000bf4:	0524      	lsls	r4, r4, #20
 8000bf6:	432c      	orrs	r4, r5
 8000bf8:	07f6      	lsls	r6, r6, #31
 8000bfa:	4334      	orrs	r4, r6
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	0021      	movs	r1, r4
 8000c00:	b003      	add	sp, #12
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	46bb      	mov	fp, r7
 8000c06:	46b2      	mov	sl, r6
 8000c08:	46a9      	mov	r9, r5
 8000c0a:	46a0      	mov	r8, r4
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x150>
 8000c12:	e084      	b.n	8000d1e <__aeabi_dadd+0x25a>
 8000c14:	464a      	mov	r2, r9
 8000c16:	1bd2      	subs	r2, r2, r7
 8000c18:	2f00      	cmp	r7, #0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_dadd+0x15a>
 8000c1c:	e16d      	b.n	8000efa <__aeabi_dadd+0x436>
 8000c1e:	0025      	movs	r5, r4
 8000c20:	4305      	orrs	r5, r0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x162>
 8000c24:	e127      	b.n	8000e76 <__aeabi_dadd+0x3b2>
 8000c26:	1e56      	subs	r6, r2, #1
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x16a>
 8000c2c:	e23b      	b.n	80010a6 <__aeabi_dadd+0x5e2>
 8000c2e:	4d87      	ldr	r5, [pc, #540]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000c30:	42aa      	cmp	r2, r5
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x172>
 8000c34:	e26a      	b.n	800110c <__aeabi_dadd+0x648>
 8000c36:	2501      	movs	r5, #1
 8000c38:	2e38      	cmp	r6, #56	@ 0x38
 8000c3a:	dc12      	bgt.n	8000c62 <__aeabi_dadd+0x19e>
 8000c3c:	0032      	movs	r2, r6
 8000c3e:	2a1f      	cmp	r2, #31
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_dadd+0x180>
 8000c42:	e1f8      	b.n	8001036 <__aeabi_dadd+0x572>
 8000c44:	2620      	movs	r6, #32
 8000c46:	0025      	movs	r5, r4
 8000c48:	1ab6      	subs	r6, r6, r2
 8000c4a:	0007      	movs	r7, r0
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	40b0      	lsls	r0, r6
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	40b5      	lsls	r5, r6
 8000c54:	40d7      	lsrs	r7, r2
 8000c56:	1e46      	subs	r6, r0, #1
 8000c58:	41b0      	sbcs	r0, r6
 8000c5a:	1b1b      	subs	r3, r3, r4
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	433d      	orrs	r5, r7
 8000c60:	4305      	orrs	r5, r0
 8000c62:	4662      	mov	r2, ip
 8000c64:	1b55      	subs	r5, r2, r5
 8000c66:	45ac      	cmp	ip, r5
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4653      	mov	r3, sl
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	000e      	movs	r6, r1
 8000c70:	464f      	mov	r7, r9
 8000c72:	4688      	mov	r8, r1
 8000c74:	1a9c      	subs	r4, r3, r2
 8000c76:	e778      	b.n	8000b6a <__aeabi_dadd+0xa6>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dadd+0x1ba>
 8000c7c:	e08e      	b.n	8000d9c <__aeabi_dadd+0x2d8>
 8000c7e:	4649      	mov	r1, r9
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d175      	bne.n	8000d70 <__aeabi_dadd+0x2ac>
 8000c84:	4661      	mov	r1, ip
 8000c86:	4653      	mov	r3, sl
 8000c88:	4319      	orrs	r1, r3
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x1ca>
 8000c8c:	e0f6      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 8000c8e:	1e51      	subs	r1, r2, #1
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x1d2>
 8000c94:	e191      	b.n	8000fba <__aeabi_dadd+0x4f6>
 8000c96:	4d6d      	ldr	r5, [pc, #436]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000c98:	42aa      	cmp	r2, r5
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x1da>
 8000c9c:	e0dc      	b.n	8000e58 <__aeabi_dadd+0x394>
 8000c9e:	2501      	movs	r5, #1
 8000ca0:	2938      	cmp	r1, #56	@ 0x38
 8000ca2:	dc14      	bgt.n	8000cce <__aeabi_dadd+0x20a>
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	2a1f      	cmp	r2, #31
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_dadd+0x1e8>
 8000caa:	e1a2      	b.n	8000ff2 <__aeabi_dadd+0x52e>
 8000cac:	2120      	movs	r1, #32
 8000cae:	4653      	mov	r3, sl
 8000cb0:	1a89      	subs	r1, r1, r2
 8000cb2:	408b      	lsls	r3, r1
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	40d3      	lsrs	r3, r2
 8000cba:	431d      	orrs	r5, r3
 8000cbc:	4663      	mov	r3, ip
 8000cbe:	408b      	lsls	r3, r1
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	1e4b      	subs	r3, r1, #1
 8000cc4:	4199      	sbcs	r1, r3
 8000cc6:	4653      	mov	r3, sl
 8000cc8:	40d3      	lsrs	r3, r2
 8000cca:	430d      	orrs	r5, r1
 8000ccc:	18e4      	adds	r4, r4, r3
 8000cce:	182d      	adds	r5, r5, r0
 8000cd0:	4285      	cmp	r5, r0
 8000cd2:	4180      	sbcs	r0, r0
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	1824      	adds	r4, r4, r0
 8000cd8:	0223      	lsls	r3, r4, #8
 8000cda:	d559      	bpl.n	8000d90 <__aeabi_dadd+0x2cc>
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000cde:	3701      	adds	r7, #1
 8000ce0:	429f      	cmp	r7, r3
 8000ce2:	d051      	beq.n	8000d88 <__aeabi_dadd+0x2c4>
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <__aeabi_dadd+0x38c>)
 8000ce8:	086a      	lsrs	r2, r5, #1
 8000cea:	401c      	ands	r4, r3
 8000cec:	4029      	ands	r1, r5
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	07e5      	lsls	r5, r4, #31
 8000cf2:	4315      	orrs	r5, r2
 8000cf4:	0864      	lsrs	r4, r4, #1
 8000cf6:	e75f      	b.n	8000bb8 <__aeabi_dadd+0xf4>
 8000cf8:	4661      	mov	r1, ip
 8000cfa:	4653      	mov	r3, sl
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dadd+0x23e>
 8000d00:	e0bc      	b.n	8000e7c <__aeabi_dadd+0x3b8>
 8000d02:	1e51      	subs	r1, r2, #1
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x246>
 8000d08:	e164      	b.n	8000fd4 <__aeabi_dadd+0x510>
 8000d0a:	4d50      	ldr	r5, [pc, #320]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000d0c:	42aa      	cmp	r2, r5
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x24e>
 8000d10:	e16a      	b.n	8000fe8 <__aeabi_dadd+0x524>
 8000d12:	2501      	movs	r5, #1
 8000d14:	2938      	cmp	r1, #56	@ 0x38
 8000d16:	dd00      	ble.n	8000d1a <__aeabi_dadd+0x256>
 8000d18:	e722      	b.n	8000b60 <__aeabi_dadd+0x9c>
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	e70e      	b.n	8000b3c <__aeabi_dadd+0x78>
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8000e54 <__aeabi_dadd+0x390>)
 8000d20:	1c7d      	adds	r5, r7, #1
 8000d22:	4215      	tst	r5, r2
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dadd+0x264>
 8000d26:	e0d0      	b.n	8000eca <__aeabi_dadd+0x406>
 8000d28:	0025      	movs	r5, r4
 8000d2a:	4662      	mov	r2, ip
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	4305      	orrs	r5, r0
 8000d30:	431a      	orrs	r2, r3
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d000      	beq.n	8000d38 <__aeabi_dadd+0x274>
 8000d36:	e137      	b.n	8000fa8 <__aeabi_dadd+0x4e4>
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x27a>
 8000d3c:	e1a8      	b.n	8001090 <__aeabi_dadd+0x5cc>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x280>
 8000d42:	e16a      	b.n	800101a <__aeabi_dadd+0x556>
 8000d44:	4663      	mov	r3, ip
 8000d46:	1ac5      	subs	r5, r0, r3
 8000d48:	4653      	mov	r3, sl
 8000d4a:	1ae2      	subs	r2, r4, r3
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	419b      	sbcs	r3, r3
 8000d50:	425b      	negs	r3, r3
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	021a      	lsls	r2, r3, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x296>
 8000d58:	e203      	b.n	8001162 <__aeabi_dadd+0x69e>
 8000d5a:	4663      	mov	r3, ip
 8000d5c:	1a1d      	subs	r5, r3, r0
 8000d5e:	45ac      	cmp	ip, r5
 8000d60:	4192      	sbcs	r2, r2
 8000d62:	4653      	mov	r3, sl
 8000d64:	4252      	negs	r2, r2
 8000d66:	1b1c      	subs	r4, r3, r4
 8000d68:	000e      	movs	r6, r1
 8000d6a:	4688      	mov	r8, r1
 8000d6c:	1aa4      	subs	r4, r4, r2
 8000d6e:	e723      	b.n	8000bb8 <__aeabi_dadd+0xf4>
 8000d70:	4936      	ldr	r1, [pc, #216]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000d72:	428f      	cmp	r7, r1
 8000d74:	d070      	beq.n	8000e58 <__aeabi_dadd+0x394>
 8000d76:	2501      	movs	r5, #1
 8000d78:	2a38      	cmp	r2, #56	@ 0x38
 8000d7a:	dca8      	bgt.n	8000cce <__aeabi_dadd+0x20a>
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	4653      	mov	r3, sl
 8000d80:	0409      	lsls	r1, r1, #16
 8000d82:	430b      	orrs	r3, r1
 8000d84:	469a      	mov	sl, r3
 8000d86:	e78e      	b.n	8000ca6 <__aeabi_dadd+0x1e2>
 8000d88:	003c      	movs	r4, r7
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e731      	b.n	8000bf4 <__aeabi_dadd+0x130>
 8000d90:	2307      	movs	r3, #7
 8000d92:	402b      	ands	r3, r5
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_dadd+0x2d6>
 8000d98:	e710      	b.n	8000bbc <__aeabi_dadd+0xf8>
 8000d9a:	e093      	b.n	8000ec4 <__aeabi_dadd+0x400>
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d074      	beq.n	8000e8a <__aeabi_dadd+0x3c6>
 8000da0:	464a      	mov	r2, r9
 8000da2:	1bd2      	subs	r2, r2, r7
 8000da4:	2f00      	cmp	r7, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2e6>
 8000da8:	e0c7      	b.n	8000f3a <__aeabi_dadd+0x476>
 8000daa:	4928      	ldr	r1, [pc, #160]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000dac:	4589      	cmp	r9, r1
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x2ee>
 8000db0:	e185      	b.n	80010be <__aeabi_dadd+0x5fa>
 8000db2:	2501      	movs	r5, #1
 8000db4:	2a38      	cmp	r2, #56	@ 0x38
 8000db6:	dc12      	bgt.n	8000dde <__aeabi_dadd+0x31a>
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0409      	lsls	r1, r1, #16
 8000dbc:	430c      	orrs	r4, r1
 8000dbe:	2a1f      	cmp	r2, #31
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dadd+0x300>
 8000dc2:	e1ab      	b.n	800111c <__aeabi_dadd+0x658>
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	0025      	movs	r5, r4
 8000dc8:	1a89      	subs	r1, r1, r2
 8000dca:	0007      	movs	r7, r0
 8000dcc:	4088      	lsls	r0, r1
 8000dce:	408d      	lsls	r5, r1
 8000dd0:	40d7      	lsrs	r7, r2
 8000dd2:	1e41      	subs	r1, r0, #1
 8000dd4:	4188      	sbcs	r0, r1
 8000dd6:	40d4      	lsrs	r4, r2
 8000dd8:	433d      	orrs	r5, r7
 8000dda:	4305      	orrs	r5, r0
 8000ddc:	44a2      	add	sl, r4
 8000dde:	4465      	add	r5, ip
 8000de0:	4565      	cmp	r5, ip
 8000de2:	4192      	sbcs	r2, r2
 8000de4:	4252      	negs	r2, r2
 8000de6:	4452      	add	r2, sl
 8000de8:	0014      	movs	r4, r2
 8000dea:	464f      	mov	r7, r9
 8000dec:	e774      	b.n	8000cd8 <__aeabi_dadd+0x214>
 8000dee:	0028      	movs	r0, r5
 8000df0:	f001 fd6c 	bl	80028cc <__clzsi2>
 8000df4:	0003      	movs	r3, r0
 8000df6:	3318      	adds	r3, #24
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	dc00      	bgt.n	8000dfe <__aeabi_dadd+0x33a>
 8000dfc:	e6c2      	b.n	8000b84 <__aeabi_dadd+0xc0>
 8000dfe:	002a      	movs	r2, r5
 8000e00:	3808      	subs	r0, #8
 8000e02:	4082      	lsls	r2, r0
 8000e04:	429f      	cmp	r7, r3
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x346>
 8000e08:	e0a9      	b.n	8000f5e <__aeabi_dadd+0x49a>
 8000e0a:	1bdb      	subs	r3, r3, r7
 8000e0c:	1c58      	adds	r0, r3, #1
 8000e0e:	281f      	cmp	r0, #31
 8000e10:	dc00      	bgt.n	8000e14 <__aeabi_dadd+0x350>
 8000e12:	e1ac      	b.n	800116e <__aeabi_dadd+0x6aa>
 8000e14:	0015      	movs	r5, r2
 8000e16:	3b1f      	subs	r3, #31
 8000e18:	40dd      	lsrs	r5, r3
 8000e1a:	2820      	cmp	r0, #32
 8000e1c:	d005      	beq.n	8000e2a <__aeabi_dadd+0x366>
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	1a1b      	subs	r3, r3, r0
 8000e22:	409a      	lsls	r2, r3
 8000e24:	1e53      	subs	r3, r2, #1
 8000e26:	419a      	sbcs	r2, r3
 8000e28:	4315      	orrs	r5, r2
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	2700      	movs	r7, #0
 8000e2e:	402b      	ands	r3, r5
 8000e30:	e7b0      	b.n	8000d94 <__aeabi_dadd+0x2d0>
 8000e32:	08ed      	lsrs	r5, r5, #3
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <__aeabi_dadd+0x388>)
 8000e36:	0762      	lsls	r2, r4, #29
 8000e38:	432a      	orrs	r2, r5
 8000e3a:	08e4      	lsrs	r4, r4, #3
 8000e3c:	429f      	cmp	r7, r3
 8000e3e:	d00f      	beq.n	8000e60 <__aeabi_dadd+0x39c>
=======
08000c34 <__aeabi_ddiv>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	46de      	mov	lr, fp
 8000c38:	4645      	mov	r5, r8
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	030b      	lsls	r3, r1, #12
 8000c48:	0b1b      	lsrs	r3, r3, #12
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	0fca      	lsrs	r2, r1, #31
 8000c4e:	004b      	lsls	r3, r1, #1
 8000c50:	0004      	movs	r4, r0
 8000c52:	4680      	mov	r8, r0
 8000c54:	0d5b      	lsrs	r3, r3, #21
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x28>
 8000c5a:	e098      	b.n	8000d8e <__aeabi_ddiv+0x15a>
 8000c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <__aeabi_ddiv+0x9e>
 8000c62:	4659      	mov	r1, fp
 8000c64:	0f42      	lsrs	r2, r0, #29
 8000c66:	00c9      	lsls	r1, r1, #3
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	00c2      	lsls	r2, r0, #3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4a77      	ldr	r2, [pc, #476]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000c76:	4689      	mov	r9, r1
 8000c78:	4692      	mov	sl, r2
 8000c7a:	449a      	add	sl, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2400      	movs	r4, #0
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	9e00      	ldr	r6, [sp, #0]
 8000c84:	9f01      	ldr	r7, [sp, #4]
 8000c86:	033b      	lsls	r3, r7, #12
 8000c88:	0b1b      	lsrs	r3, r3, #12
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	007b      	lsls	r3, r7, #1
 8000c8e:	0030      	movs	r0, r6
 8000c90:	0d5b      	lsrs	r3, r3, #21
 8000c92:	0ffd      	lsrs	r5, r7, #31
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d059      	beq.n	8000d4c <__aeabi_ddiv+0x118>
 8000c98:	4a6d      	ldr	r2, [pc, #436]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d048      	beq.n	8000d30 <__aeabi_ddiv+0xfc>
 8000c9e:	4659      	mov	r1, fp
 8000ca0:	0f72      	lsrs	r2, r6, #29
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	4311      	orrs	r1, r2
 8000cac:	468b      	mov	fp, r1
 8000cae:	4969      	ldr	r1, [pc, #420]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000cb0:	00f2      	lsls	r2, r6, #3
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	469a      	mov	sl, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	9e02      	ldr	r6, [sp, #8]
 8000cc0:	406e      	eors	r6, r5
 8000cc2:	b2f6      	uxtb	r6, r6
 8000cc4:	2c0f      	cmp	r4, #15
 8000cc6:	d900      	bls.n	8000cca <__aeabi_ddiv+0x96>
 8000cc8:	e0ce      	b.n	8000e68 <__aeabi_ddiv+0x234>
 8000cca:	4b63      	ldr	r3, [pc, #396]	@ (8000e58 <__aeabi_ddiv+0x224>)
 8000ccc:	00a4      	lsls	r4, r4, #2
 8000cce:	591b      	ldr	r3, [r3, r4]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_ddiv+0xa8>
 8000cda:	e090      	b.n	8000dfe <__aeabi_ddiv+0x1ca>
 8000cdc:	469a      	mov	sl, r3
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2408      	movs	r4, #8
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	e7cc      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000ce8:	46cb      	mov	fp, r9
 8000cea:	4642      	mov	r2, r8
 8000cec:	9d02      	ldr	r5, [sp, #8]
 8000cee:	9903      	ldr	r1, [sp, #12]
 8000cf0:	2902      	cmp	r1, #2
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xc2>
 8000cf4:	e1de      	b.n	80010b4 <__aeabi_ddiv+0x480>
 8000cf6:	2903      	cmp	r1, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0xc8>
 8000cfa:	e08d      	b.n	8000e18 <__aeabi_ddiv+0x1e4>
 8000cfc:	2901      	cmp	r1, #1
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_ddiv+0xce>
 8000d00:	e179      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 8000d02:	002e      	movs	r6, r5
 8000d04:	2200      	movs	r2, #0
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	07f6      	lsls	r6, r6, #31
 8000d12:	4333      	orrs	r3, r6
 8000d14:	4640      	mov	r0, r8
 8000d16:	0019      	movs	r1, r3
 8000d18:	b007      	add	sp, #28
 8000d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1c:	46bb      	mov	fp, r7
 8000d1e:	46b2      	mov	sl, r6
 8000d20:	46a9      	mov	r9, r5
 8000d22:	46a0      	mov	r8, r4
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000d30:	465a      	mov	r2, fp
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4b49      	ldr	r3, [pc, #292]	@ (8000e5c <__aeabi_ddiv+0x228>)
 8000d38:	469c      	mov	ip, r3
 8000d3a:	44e2      	add	sl, ip
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d159      	bne.n	8000df4 <__aeabi_ddiv+0x1c0>
 8000d40:	2302      	movs	r3, #2
 8000d42:	431c      	orrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e7b8      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d4c:	465a      	mov	r2, fp
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	d049      	beq.n	8000de8 <__aeabi_ddiv+0x1b4>
 8000d54:	465b      	mov	r3, fp
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x128>
 8000d5a:	e19c      	b.n	8001096 <__aeabi_ddiv+0x462>
 8000d5c:	4658      	mov	r0, fp
 8000d5e:	f001 fb43 	bl	80023e8 <__clzsi2>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0003      	movs	r3, r0
 8000d66:	3a0b      	subs	r2, #11
 8000d68:	271d      	movs	r7, #29
 8000d6a:	9e00      	ldr	r6, [sp, #0]
 8000d6c:	1aba      	subs	r2, r7, r2
 8000d6e:	0019      	movs	r1, r3
 8000d70:	4658      	mov	r0, fp
 8000d72:	40d6      	lsrs	r6, r2
 8000d74:	3908      	subs	r1, #8
 8000d76:	4088      	lsls	r0, r1
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4302      	orrs	r2, r0
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	9a00      	ldr	r2, [sp, #0]
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4937      	ldr	r1, [pc, #220]	@ (8000e60 <__aeabi_ddiv+0x22c>)
 8000d84:	4453      	add	r3, sl
 8000d86:	468a      	mov	sl, r1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	449a      	add	sl, r3
 8000d8c:	e797      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d8e:	465b      	mov	r3, fp
 8000d90:	4303      	orrs	r3, r0
 8000d92:	4699      	mov	r9, r3
 8000d94:	d021      	beq.n	8000dda <__aeabi_ddiv+0x1a6>
 8000d96:	465b      	mov	r3, fp
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x16a>
 8000d9c:	e169      	b.n	8001072 <__aeabi_ddiv+0x43e>
 8000d9e:	4658      	mov	r0, fp
 8000da0:	f001 fb22 	bl	80023e8 <__clzsi2>
 8000da4:	230b      	movs	r3, #11
 8000da6:	425b      	negs	r3, r3
 8000da8:	469c      	mov	ip, r3
 8000daa:	0002      	movs	r2, r0
 8000dac:	4484      	add	ip, r0
 8000dae:	4666      	mov	r6, ip
 8000db0:	231d      	movs	r3, #29
 8000db2:	1b9b      	subs	r3, r3, r6
 8000db4:	0026      	movs	r6, r4
 8000db6:	0011      	movs	r1, r2
 8000db8:	4658      	mov	r0, fp
 8000dba:	40de      	lsrs	r6, r3
 8000dbc:	3908      	subs	r1, #8
 8000dbe:	4088      	lsls	r0, r1
 8000dc0:	0033      	movs	r3, r6
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0023      	movs	r3, r4
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <__aeabi_ddiv+0x230>)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	e753      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	4698      	mov	r8, r3
 8000dde:	469a      	mov	sl, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	2404      	movs	r4, #4
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	e74c      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000de8:	2301      	movs	r3, #1
 8000dea:	431c      	orrs	r4, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	469b      	mov	fp, r3
 8000df2:	e764      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000df4:	2303      	movs	r3, #3
 8000df6:	0032      	movs	r2, r6
 8000df8:	2103      	movs	r1, #3
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000dfe:	469a      	mov	sl, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	46d9      	mov	r9, fp
 8000e04:	240c      	movs	r4, #12
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	e73b      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2480      	movs	r4, #128	@ 0x80
 8000e0e:	4698      	mov	r8, r3
 8000e10:	2600      	movs	r6, #0
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	e779      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e18:	2480      	movs	r4, #128	@ 0x80
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	002e      	movs	r6, r5
 8000e24:	4690      	mov	r8, r2
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	e76f      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e2c:	2480      	movs	r4, #128	@ 0x80
 8000e2e:	464b      	mov	r3, r9
 8000e30:	0324      	lsls	r4, r4, #12
 8000e32:	4223      	tst	r3, r4
 8000e34:	d002      	beq.n	8000e3c <__aeabi_ddiv+0x208>
 8000e36:	465b      	mov	r3, fp
 8000e38:	4223      	tst	r3, r4
 8000e3a:	d0f0      	beq.n	8000e1e <__aeabi_ddiv+0x1ea>
 8000e3c:	2480      	movs	r4, #128	@ 0x80
 8000e3e:	464b      	mov	r3, r9
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	9e02      	ldr	r6, [sp, #8]
 8000e48:	4b01      	ldr	r3, [pc, #4]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	e75e      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff
 8000e54:	fffffc01 	.word	0xfffffc01
 8000e58:	0801521c 	.word	0x0801521c
 8000e5c:	fffff801 	.word	0xfffff801
 8000e60:	000003f3 	.word	0x000003f3
 8000e64:	fffffc0d 	.word	0xfffffc0d
 8000e68:	45cb      	cmp	fp, r9
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0x23a>
 8000e6c:	e0f8      	b.n	8001060 <__aeabi_ddiv+0x42c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x23e>
 8000e70:	e0f3      	b.n	800105a <__aeabi_ddiv+0x426>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	4644      	mov	r4, r8
 8000e7a:	4648      	mov	r0, r9
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e2      	add	sl, ip
 8000e80:	465b      	mov	r3, fp
 8000e82:	0e17      	lsrs	r7, r2, #24
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c19      	lsrs	r1, r3, #16
 8000e8a:	043b      	lsls	r3, r7, #16
 8000e8c:	0212      	lsls	r2, r2, #8
 8000e8e:	9700      	str	r7, [sp, #0]
 8000e90:	0c1f      	lsrs	r7, r3, #16
 8000e92:	4691      	mov	r9, r2
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9703      	str	r7, [sp, #12]
 8000e98:	f7ff f9d8 	bl	800024c <__aeabi_uidivmod>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	437a      	muls	r2, r7
 8000ea0:	040b      	lsls	r3, r1, #16
 8000ea2:	0c21      	lsrs	r1, r4, #16
 8000ea4:	4680      	mov	r8, r0
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d909      	bls.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000eac:	9f00      	ldr	r7, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	46bc      	mov	ip, r7
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	4461      	add	r1, ip
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	44e0      	add	r8, ip
 8000eba:	428f      	cmp	r7, r1
 8000ebc:	d800      	bhi.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000ebe:	e15c      	b.n	800117a <__aeabi_ddiv+0x546>
 8000ec0:	1a88      	subs	r0, r1, r2
 8000ec2:	9902      	ldr	r1, [sp, #8]
 8000ec4:	f7ff f9c2 	bl	800024c <__aeabi_uidivmod>
 8000ec8:	9a03      	ldr	r2, [sp, #12]
 8000eca:	0424      	lsls	r4, r4, #16
 8000ecc:	4342      	muls	r2, r0
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	0c24      	lsrs	r4, r4, #16
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	430c      	orrs	r4, r1
 8000ed6:	42a2      	cmp	r2, r4
 8000ed8:	d906      	bls.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000eda:	9900      	ldr	r1, [sp, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4464      	add	r4, ip
 8000ee2:	42a1      	cmp	r1, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000ee6:	e142      	b.n	800116e <__aeabi_ddiv+0x53a>
 8000ee8:	1aa0      	subs	r0, r4, r2
 8000eea:	4642      	mov	r2, r8
 8000eec:	0412      	lsls	r2, r2, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4693      	mov	fp, r2
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	4659      	mov	r1, fp
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	001f      	movs	r7, r3
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	040b      	lsls	r3, r1, #16
 8000efe:	4649      	mov	r1, r9
 8000f00:	0409      	lsls	r1, r1, #16
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	000c      	movs	r4, r1
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435c      	muls	r4, r3
 8000f0a:	0c12      	lsrs	r2, r2, #16
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	4351      	muls	r1, r2
 8000f12:	437a      	muls	r2, r7
 8000f14:	0c27      	lsrs	r7, r4, #16
 8000f16:	46bc      	mov	ip, r7
 8000f18:	185b      	adds	r3, r3, r1
 8000f1a:	4463      	add	r3, ip
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_ddiv+0x2f4>
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	468c      	mov	ip, r1
 8000f26:	4462      	add	r2, ip
 8000f28:	0c19      	lsrs	r1, r3, #16
 8000f2a:	0424      	lsls	r4, r4, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c24      	lsrs	r4, r4, #16
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	191c      	adds	r4, r3, r4
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d302      	bcc.n	8000f3e <__aeabi_ddiv+0x30a>
 8000f38:	d116      	bne.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3a:	42a5      	cmp	r5, r4
 8000f3c:	d214      	bcs.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3e:	465b      	mov	r3, fp
 8000f40:	9f00      	ldr	r7, [sp, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	444d      	add	r5, r9
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	454d      	cmp	r5, r9
 8000f4a:	419b      	sbcs	r3, r3
 8000f4c:	46bc      	mov	ip, r7
 8000f4e:	425b      	negs	r3, r3
 8000f50:	4463      	add	r3, ip
 8000f52:	18c0      	adds	r0, r0, r3
 8000f54:	4287      	cmp	r7, r0
 8000f56:	d300      	bcc.n	8000f5a <__aeabi_ddiv+0x326>
 8000f58:	e102      	b.n	8001160 <__aeabi_ddiv+0x52c>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x32c>
 8000f5e:	e129      	b.n	80011b4 <__aeabi_ddiv+0x580>
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x330>
 8000f62:	e124      	b.n	80011ae <__aeabi_ddiv+0x57a>
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	469b      	mov	fp, r3
 8000f68:	1b2c      	subs	r4, r5, r4
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	41ad      	sbcs	r5, r5
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	1a80      	subs	r0, r0, r2
 8000f72:	426d      	negs	r5, r5
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x348>
 8000f7a:	e10f      	b.n	800119c <__aeabi_ddiv+0x568>
 8000f7c:	9902      	ldr	r1, [sp, #8]
 8000f7e:	f7ff f965 	bl	800024c <__aeabi_uidivmod>
 8000f82:	9a03      	ldr	r2, [sp, #12]
 8000f84:	040b      	lsls	r3, r1, #16
 8000f86:	4342      	muls	r2, r0
 8000f88:	0c21      	lsrs	r1, r4, #16
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x360>
 8000f92:	e0cb      	b.n	800112c <__aeabi_ddiv+0x4f8>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f958 	bl	800024c <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_ddiv+0x37c>
 8000fae:	e0ca      	b.n	8001146 <__aeabi_ddiv+0x512>
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	1aa4      	subs	r4, r4, r2
 8000fb4:	042a      	lsls	r2, r5, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	9f04      	ldr	r7, [sp, #16]
 8000fba:	0413      	lsls	r3, r2, #16
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	4359      	muls	r1, r3
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	437b      	muls	r3, r7
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	0c15      	lsrs	r5, r2, #16
 8000fc8:	4368      	muls	r0, r5
 8000fca:	0c0b      	lsrs	r3, r1, #16
 8000fcc:	4484      	add	ip, r0
 8000fce:	4463      	add	r3, ip
 8000fd0:	437d      	muls	r5, r7
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d903      	bls.n	8000fde <__aeabi_ddiv+0x3aa>
 8000fd6:	2080      	movs	r0, #128	@ 0x80
 8000fd8:	0240      	lsls	r0, r0, #9
 8000fda:	4684      	mov	ip, r0
 8000fdc:	4465      	add	r5, ip
 8000fde:	0c18      	lsrs	r0, r3, #16
 8000fe0:	0409      	lsls	r1, r1, #16
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	0c09      	lsrs	r1, r1, #16
 8000fe6:	1940      	adds	r0, r0, r5
 8000fe8:	185b      	adds	r3, r3, r1
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d327      	bcc.n	800103e <__aeabi_ddiv+0x40a>
 8000fee:	d023      	beq.n	8001038 <__aeabi_ddiv+0x404>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	0035      	movs	r5, r6
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	4b94      	ldr	r3, [pc, #592]	@ (8001248 <__aeabi_ddiv+0x614>)
 8000ff8:	4453      	add	r3, sl
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dd60      	ble.n	80010c0 <__aeabi_ddiv+0x48c>
 8000ffe:	0751      	lsls	r1, r2, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_ddiv+0x3d0>
 8001002:	e086      	b.n	8001112 <__aeabi_ddiv+0x4de>
 8001004:	002e      	movs	r6, r5
 8001006:	08d1      	lsrs	r1, r2, #3
 8001008:	465a      	mov	r2, fp
 800100a:	01d2      	lsls	r2, r2, #7
 800100c:	d506      	bpl.n	800101c <__aeabi_ddiv+0x3e8>
 800100e:	465a      	mov	r2, fp
 8001010:	4b8e      	ldr	r3, [pc, #568]	@ (800124c <__aeabi_ddiv+0x618>)
 8001012:	401a      	ands	r2, r3
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	4693      	mov	fp, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4453      	add	r3, sl
 800101c:	4a8c      	ldr	r2, [pc, #560]	@ (8001250 <__aeabi_ddiv+0x61c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	dd00      	ble.n	8001024 <__aeabi_ddiv+0x3f0>
 8001022:	e680      	b.n	8000d26 <__aeabi_ddiv+0xf2>
 8001024:	465a      	mov	r2, fp
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	430a      	orrs	r2, r1
 800102a:	4690      	mov	r8, r2
 800102c:	465a      	mov	r2, fp
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0254      	lsls	r4, r2, #9
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	e669      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001038:	0035      	movs	r5, r6
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0db      	beq.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800103e:	9d00      	ldr	r5, [sp, #0]
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	46ac      	mov	ip, r5
 8001044:	4464      	add	r4, ip
 8001046:	42ac      	cmp	r4, r5
 8001048:	d200      	bcs.n	800104c <__aeabi_ddiv+0x418>
 800104a:	e09e      	b.n	800118a <__aeabi_ddiv+0x556>
 800104c:	4284      	cmp	r4, r0
 800104e:	d200      	bcs.n	8001052 <__aeabi_ddiv+0x41e>
 8001050:	e0e1      	b.n	8001216 <__aeabi_ddiv+0x5e2>
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x422>
 8001054:	e0ee      	b.n	8001234 <__aeabi_ddiv+0x600>
 8001056:	000a      	movs	r2, r1
 8001058:	e7ca      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 800105a:	4542      	cmp	r2, r8
 800105c:	d900      	bls.n	8001060 <__aeabi_ddiv+0x42c>
 800105e:	e708      	b.n	8000e72 <__aeabi_ddiv+0x23e>
 8001060:	464b      	mov	r3, r9
 8001062:	07dc      	lsls	r4, r3, #31
 8001064:	0858      	lsrs	r0, r3, #1
 8001066:	4643      	mov	r3, r8
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	431c      	orrs	r4, r3
 800106c:	4643      	mov	r3, r8
 800106e:	07dd      	lsls	r5, r3, #31
 8001070:	e706      	b.n	8000e80 <__aeabi_ddiv+0x24c>
 8001072:	f001 f9b9 	bl	80023e8 <__clzsi2>
 8001076:	2315      	movs	r3, #21
 8001078:	469c      	mov	ip, r3
 800107a:	4484      	add	ip, r0
 800107c:	0002      	movs	r2, r0
 800107e:	4663      	mov	r3, ip
 8001080:	3220      	adds	r2, #32
 8001082:	2b1c      	cmp	r3, #28
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x454>
 8001086:	e692      	b.n	8000dae <__aeabi_ddiv+0x17a>
 8001088:	0023      	movs	r3, r4
 800108a:	3808      	subs	r0, #8
 800108c:	4083      	lsls	r3, r0
 800108e:	4699      	mov	r9, r3
 8001090:	2300      	movs	r3, #0
 8001092:	4698      	mov	r8, r3
 8001094:	e69a      	b.n	8000dcc <__aeabi_ddiv+0x198>
 8001096:	f001 f9a7 	bl	80023e8 <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	0003      	movs	r3, r0
 800109e:	3215      	adds	r2, #21
 80010a0:	3320      	adds	r3, #32
 80010a2:	2a1c      	cmp	r2, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x474>
 80010a6:	e65f      	b.n	8000d68 <__aeabi_ddiv+0x134>
 80010a8:	9900      	ldr	r1, [sp, #0]
 80010aa:	3808      	subs	r0, #8
 80010ac:	4081      	lsls	r1, r0
 80010ae:	2200      	movs	r2, #0
 80010b0:	468b      	mov	fp, r1
 80010b2:	e666      	b.n	8000d82 <__aeabi_ddiv+0x14e>
 80010b4:	2200      	movs	r2, #0
 80010b6:	002e      	movs	r6, r5
 80010b8:	2400      	movs	r4, #0
 80010ba:	4690      	mov	r8, r2
 80010bc:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <__aeabi_ddiv+0x620>)
 80010be:	e625      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 80010c0:	002e      	movs	r6, r5
 80010c2:	2101      	movs	r1, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	2938      	cmp	r1, #56	@ 0x38
 80010c8:	dd00      	ble.n	80010cc <__aeabi_ddiv+0x498>
 80010ca:	e61b      	b.n	8000d04 <__aeabi_ddiv+0xd0>
 80010cc:	291f      	cmp	r1, #31
 80010ce:	dc7e      	bgt.n	80011ce <__aeabi_ddiv+0x59a>
 80010d0:	4861      	ldr	r0, [pc, #388]	@ (8001258 <__aeabi_ddiv+0x624>)
 80010d2:	0014      	movs	r4, r2
 80010d4:	4450      	add	r0, sl
 80010d6:	465b      	mov	r3, fp
 80010d8:	4082      	lsls	r2, r0
 80010da:	4083      	lsls	r3, r0
 80010dc:	40cc      	lsrs	r4, r1
 80010de:	1e50      	subs	r0, r2, #1
 80010e0:	4182      	sbcs	r2, r0
 80010e2:	4323      	orrs	r3, r4
 80010e4:	431a      	orrs	r2, r3
 80010e6:	465b      	mov	r3, fp
 80010e8:	40cb      	lsrs	r3, r1
 80010ea:	0751      	lsls	r1, r2, #29
 80010ec:	d009      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d005      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x4d4>
 8001106:	e09b      	b.n	8001240 <__aeabi_ddiv+0x60c>
 8001108:	2200      	movs	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	2400      	movs	r4, #0
 800110e:	4690      	mov	r8, r2
 8001110:	e5fc      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x4e8>
 800111a:	e773      	b.n	8001004 <__aeabi_ddiv+0x3d0>
 800111c:	1d11      	adds	r1, r2, #4
 800111e:	4291      	cmp	r1, r2
 8001120:	4192      	sbcs	r2, r2
 8001122:	4252      	negs	r2, r2
 8001124:	002e      	movs	r6, r5
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	4493      	add	fp, r2
 800112a:	e76d      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	3d01      	subs	r5, #1
 8001130:	469c      	mov	ip, r3
 8001132:	4461      	add	r1, ip
 8001134:	428b      	cmp	r3, r1
 8001136:	d900      	bls.n	800113a <__aeabi_ddiv+0x506>
 8001138:	e72c      	b.n	8000f94 <__aeabi_ddiv+0x360>
 800113a:	428a      	cmp	r2, r1
 800113c:	d800      	bhi.n	8001140 <__aeabi_ddiv+0x50c>
 800113e:	e729      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001140:	1e85      	subs	r5, r0, #2
 8001142:	4461      	add	r1, ip
 8001144:	e726      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	468c      	mov	ip, r1
 800114c:	4464      	add	r4, ip
 800114e:	42a1      	cmp	r1, r4
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x520>
 8001152:	e72d      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001154:	42a2      	cmp	r2, r4
 8001156:	d800      	bhi.n	800115a <__aeabi_ddiv+0x526>
 8001158:	e72a      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 800115a:	1e83      	subs	r3, r0, #2
 800115c:	4464      	add	r4, ip
 800115e:	e727      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001160:	4287      	cmp	r7, r0
 8001162:	d000      	beq.n	8001166 <__aeabi_ddiv+0x532>
 8001164:	e6fe      	b.n	8000f64 <__aeabi_ddiv+0x330>
 8001166:	45a9      	cmp	r9, r5
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x538>
 800116a:	e6fb      	b.n	8000f64 <__aeabi_ddiv+0x330>
 800116c:	e6f5      	b.n	8000f5a <__aeabi_ddiv+0x326>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x540>
 8001172:	e6b9      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	4464      	add	r4, ip
 8001178:	e6b6      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x54c>
 800117e:	e69f      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 8001180:	46bc      	mov	ip, r7
 8001182:	1e83      	subs	r3, r0, #2
 8001184:	4698      	mov	r8, r3
 8001186:	4461      	add	r1, ip
 8001188:	e69a      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 800118a:	000a      	movs	r2, r1
 800118c:	4284      	cmp	r4, r0
 800118e:	d000      	beq.n	8001192 <__aeabi_ddiv+0x55e>
 8001190:	e72e      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001192:	454b      	cmp	r3, r9
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x564>
 8001196:	e72b      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001198:	0035      	movs	r5, r6
 800119a:	e72c      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <__aeabi_ddiv+0x614>)
 800119e:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <__aeabi_ddiv+0x628>)
 80011a0:	4453      	add	r3, sl
 80011a2:	4592      	cmp	sl, r2
 80011a4:	db43      	blt.n	800122e <__aeabi_ddiv+0x5fa>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2100      	movs	r1, #0
 80011aa:	4493      	add	fp, r2
 80011ac:	e72c      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 80011ae:	42ac      	cmp	r4, r5
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x580>
 80011b2:	e6d7      	b.n	8000f64 <__aeabi_ddiv+0x330>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9900      	ldr	r1, [sp, #0]
 80011bc:	444d      	add	r5, r9
 80011be:	454d      	cmp	r5, r9
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	44e3      	add	fp, ip
 80011c4:	468c      	mov	ip, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	4463      	add	r3, ip
 80011ca:	18c0      	adds	r0, r0, r3
 80011cc:	e6cc      	b.n	8000f68 <__aeabi_ddiv+0x334>
 80011ce:	201f      	movs	r0, #31
 80011d0:	4240      	negs	r0, r0
 80011d2:	1ac3      	subs	r3, r0, r3
 80011d4:	4658      	mov	r0, fp
 80011d6:	40d8      	lsrs	r0, r3
 80011d8:	2920      	cmp	r1, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_ddiv+0x5b2>
 80011dc:	4659      	mov	r1, fp
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <__aeabi_ddiv+0x62c>)
 80011e0:	4453      	add	r3, sl
 80011e2:	4099      	lsls	r1, r3
 80011e4:	430a      	orrs	r2, r1
 80011e6:	1e53      	subs	r3, r2, #1
 80011e8:	419a      	sbcs	r2, r3
 80011ea:	2307      	movs	r3, #7
 80011ec:	0019      	movs	r1, r3
 80011ee:	4302      	orrs	r2, r0
 80011f0:	2400      	movs	r4, #0
 80011f2:	4011      	ands	r1, r2
 80011f4:	4213      	tst	r3, r2
 80011f6:	d009      	beq.n	800120c <__aeabi_ddiv+0x5d8>
 80011f8:	3308      	adds	r3, #8
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d01d      	beq.n	800123c <__aeabi_ddiv+0x608>
 8001200:	1d13      	adds	r3, r2, #4
 8001202:	4293      	cmp	r3, r2
 8001204:	4189      	sbcs	r1, r1
 8001206:	001a      	movs	r2, r3
 8001208:	4249      	negs	r1, r1
 800120a:	0749      	lsls	r1, r1, #29
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	430a      	orrs	r2, r1
 8001210:	4690      	mov	r8, r2
 8001212:	2300      	movs	r3, #0
 8001214:	e57a      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001216:	4649      	mov	r1, r9
 8001218:	9f00      	ldr	r7, [sp, #0]
 800121a:	004d      	lsls	r5, r1, #1
 800121c:	454d      	cmp	r5, r9
 800121e:	4189      	sbcs	r1, r1
 8001220:	46bc      	mov	ip, r7
 8001222:	4249      	negs	r1, r1
 8001224:	4461      	add	r1, ip
 8001226:	46a9      	mov	r9, r5
 8001228:	3a02      	subs	r2, #2
 800122a:	1864      	adds	r4, r4, r1
 800122c:	e7ae      	b.n	800118c <__aeabi_ddiv+0x558>
 800122e:	2201      	movs	r2, #1
 8001230:	4252      	negs	r2, r2
 8001232:	e746      	b.n	80010c2 <__aeabi_ddiv+0x48e>
 8001234:	4599      	cmp	r9, r3
 8001236:	d3ee      	bcc.n	8001216 <__aeabi_ddiv+0x5e2>
 8001238:	000a      	movs	r2, r1
 800123a:	e7aa      	b.n	8001192 <__aeabi_ddiv+0x55e>
 800123c:	2100      	movs	r1, #0
 800123e:	e7e5      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001240:	0759      	lsls	r1, r3, #29
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0b1c      	lsrs	r4, r3, #12
 8001246:	e7e1      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001248:	000003ff 	.word	0x000003ff
 800124c:	feffffff 	.word	0xfeffffff
 8001250:	000007fe 	.word	0x000007fe
 8001254:	000007ff 	.word	0x000007ff
 8001258:	0000041e 	.word	0x0000041e
 800125c:	fffffc02 	.word	0xfffffc02
 8001260:	0000043e 	.word	0x0000043e

08001264 <__eqdf2>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	46de      	mov	lr, fp
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	000d      	movs	r5, r1
 8001272:	0004      	movs	r4, r0
 8001274:	0fe8      	lsrs	r0, r5, #31
 8001276:	4683      	mov	fp, r0
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	0fd8      	lsrs	r0, r3, #31
 800127c:	0b09      	lsrs	r1, r1, #12
 800127e:	4682      	mov	sl, r0
 8001280:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <__eqdf2+0x84>)
 8001282:	468c      	mov	ip, r1
 8001284:	031f      	lsls	r7, r3, #12
 8001286:	0069      	lsls	r1, r5, #1
 8001288:	005e      	lsls	r6, r3, #1
 800128a:	0d49      	lsrs	r1, r1, #21
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d76      	lsrs	r6, r6, #21
 8001290:	4281      	cmp	r1, r0
 8001292:	d018      	beq.n	80012c6 <__eqdf2+0x62>
 8001294:	4286      	cmp	r6, r0
 8001296:	d00f      	beq.n	80012b8 <__eqdf2+0x54>
 8001298:	2001      	movs	r0, #1
 800129a:	42b1      	cmp	r1, r6
 800129c:	d10d      	bne.n	80012ba <__eqdf2+0x56>
 800129e:	45bc      	cmp	ip, r7
 80012a0:	d10b      	bne.n	80012ba <__eqdf2+0x56>
 80012a2:	4294      	cmp	r4, r2
 80012a4:	d109      	bne.n	80012ba <__eqdf2+0x56>
 80012a6:	45d3      	cmp	fp, sl
 80012a8:	d01c      	beq.n	80012e4 <__eqdf2+0x80>
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d105      	bne.n	80012ba <__eqdf2+0x56>
 80012ae:	4660      	mov	r0, ip
 80012b0:	4320      	orrs	r0, r4
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	e000      	b.n	80012ba <__eqdf2+0x56>
 80012b8:	2001      	movs	r0, #1
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	46bb      	mov	fp, r7
 80012be:	46b2      	mov	sl, r6
 80012c0:	46a9      	mov	r9, r5
 80012c2:	46a0      	mov	r8, r4
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	2001      	movs	r0, #1
 80012c8:	428e      	cmp	r6, r1
 80012ca:	d1f6      	bne.n	80012ba <__eqdf2+0x56>
 80012cc:	4661      	mov	r1, ip
 80012ce:	4339      	orrs	r1, r7
 80012d0:	000f      	movs	r7, r1
 80012d2:	4317      	orrs	r7, r2
 80012d4:	4327      	orrs	r7, r4
 80012d6:	d1f0      	bne.n	80012ba <__eqdf2+0x56>
 80012d8:	465b      	mov	r3, fp
 80012da:	4652      	mov	r2, sl
 80012dc:	1a98      	subs	r0, r3, r2
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4198      	sbcs	r0, r3
 80012e2:	e7ea      	b.n	80012ba <__eqdf2+0x56>
 80012e4:	2000      	movs	r0, #0
 80012e6:	e7e8      	b.n	80012ba <__eqdf2+0x56>
 80012e8:	000007ff 	.word	0x000007ff

080012ec <__gedf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	4657      	mov	r7, sl
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	46de      	mov	lr, fp
 80012f6:	b5e0      	push	{r5, r6, r7, lr}
 80012f8:	000d      	movs	r5, r1
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	0d49      	lsrs	r1, r1, #21
 8001300:	468a      	mov	sl, r1
 8001302:	0fdf      	lsrs	r7, r3, #31
 8001304:	0fe9      	lsrs	r1, r5, #31
 8001306:	46bc      	mov	ip, r7
 8001308:	b083      	sub	sp, #12
 800130a:	4f2f      	ldr	r7, [pc, #188]	@ (80013c8 <__gedf2+0xdc>)
 800130c:	0004      	movs	r4, r0
 800130e:	4680      	mov	r8, r0
 8001310:	9101      	str	r1, [sp, #4]
 8001312:	0058      	lsls	r0, r3, #1
 8001314:	0319      	lsls	r1, r3, #12
 8001316:	4691      	mov	r9, r2
 8001318:	0b36      	lsrs	r6, r6, #12
 800131a:	0b09      	lsrs	r1, r1, #12
 800131c:	0d40      	lsrs	r0, r0, #21
 800131e:	45ba      	cmp	sl, r7
 8001320:	d01d      	beq.n	800135e <__gedf2+0x72>
 8001322:	42b8      	cmp	r0, r7
 8001324:	d00d      	beq.n	8001342 <__gedf2+0x56>
 8001326:	4657      	mov	r7, sl
 8001328:	2f00      	cmp	r7, #0
 800132a:	d12a      	bne.n	8001382 <__gedf2+0x96>
 800132c:	4334      	orrs	r4, r6
 800132e:	2800      	cmp	r0, #0
 8001330:	d124      	bne.n	800137c <__gedf2+0x90>
 8001332:	430a      	orrs	r2, r1
 8001334:	d036      	beq.n	80013a4 <__gedf2+0xb8>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d141      	bne.n	80013be <__gedf2+0xd2>
 800133a:	4663      	mov	r3, ip
 800133c:	0058      	lsls	r0, r3, #1
 800133e:	3801      	subs	r0, #1
 8001340:	e015      	b.n	800136e <__gedf2+0x82>
 8001342:	4311      	orrs	r1, r2
 8001344:	d138      	bne.n	80013b8 <__gedf2+0xcc>
 8001346:	4653      	mov	r3, sl
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <__gedf2+0x64>
 800134c:	4326      	orrs	r6, r4
 800134e:	d0f4      	beq.n	800133a <__gedf2+0x4e>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	4563      	cmp	r3, ip
 8001354:	d107      	bne.n	8001366 <__gedf2+0x7a>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	0058      	lsls	r0, r3, #1
 800135a:	3801      	subs	r0, #1
 800135c:	e007      	b.n	800136e <__gedf2+0x82>
 800135e:	4326      	orrs	r6, r4
 8001360:	d12a      	bne.n	80013b8 <__gedf2+0xcc>
 8001362:	4550      	cmp	r0, sl
 8001364:	d021      	beq.n	80013aa <__gedf2+0xbe>
 8001366:	2001      	movs	r0, #1
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	425f      	negs	r7, r3
 800136c:	4338      	orrs	r0, r7
 800136e:	b003      	add	sp, #12
 8001370:	bcf0      	pop	{r4, r5, r6, r7}
 8001372:	46bb      	mov	fp, r7
 8001374:	46b2      	mov	sl, r6
 8001376:	46a9      	mov	r9, r5
 8001378:	46a0      	mov	r8, r4
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	2c00      	cmp	r4, #0
 800137e:	d0dc      	beq.n	800133a <__gedf2+0x4e>
 8001380:	e7e6      	b.n	8001350 <__gedf2+0x64>
 8001382:	2800      	cmp	r0, #0
 8001384:	d0ef      	beq.n	8001366 <__gedf2+0x7a>
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	4563      	cmp	r3, ip
 800138a:	d1ec      	bne.n	8001366 <__gedf2+0x7a>
 800138c:	4582      	cmp	sl, r0
 800138e:	dcea      	bgt.n	8001366 <__gedf2+0x7a>
 8001390:	dbe1      	blt.n	8001356 <__gedf2+0x6a>
 8001392:	428e      	cmp	r6, r1
 8001394:	d8e7      	bhi.n	8001366 <__gedf2+0x7a>
 8001396:	d1de      	bne.n	8001356 <__gedf2+0x6a>
 8001398:	45c8      	cmp	r8, r9
 800139a:	d8e4      	bhi.n	8001366 <__gedf2+0x7a>
 800139c:	2000      	movs	r0, #0
 800139e:	45c8      	cmp	r8, r9
 80013a0:	d2e5      	bcs.n	800136e <__gedf2+0x82>
 80013a2:	e7d8      	b.n	8001356 <__gedf2+0x6a>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e2      	beq.n	800136e <__gedf2+0x82>
 80013a8:	e7dd      	b.n	8001366 <__gedf2+0x7a>
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d104      	bne.n	80013b8 <__gedf2+0xcc>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	4563      	cmp	r3, ip
 80013b2:	d1d8      	bne.n	8001366 <__gedf2+0x7a>
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7da      	b.n	800136e <__gedf2+0x82>
 80013b8:	2002      	movs	r0, #2
 80013ba:	4240      	negs	r0, r0
 80013bc:	e7d7      	b.n	800136e <__gedf2+0x82>
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	4563      	cmp	r3, ip
 80013c2:	d0e6      	beq.n	8001392 <__gedf2+0xa6>
 80013c4:	e7cf      	b.n	8001366 <__gedf2+0x7a>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff

080013cc <__ledf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	464e      	mov	r6, r9
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	0d49      	lsrs	r1, r1, #21
 80013e0:	468a      	mov	sl, r1
 80013e2:	0fdf      	lsrs	r7, r3, #31
 80013e4:	0fe9      	lsrs	r1, r5, #31
 80013e6:	46bc      	mov	ip, r7
 80013e8:	b083      	sub	sp, #12
 80013ea:	4f2e      	ldr	r7, [pc, #184]	@ (80014a4 <__ledf2+0xd8>)
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0319      	lsls	r1, r3, #12
 80013f6:	4691      	mov	r9, r2
 80013f8:	0b36      	lsrs	r6, r6, #12
 80013fa:	0b09      	lsrs	r1, r1, #12
 80013fc:	0d40      	lsrs	r0, r0, #21
 80013fe:	45ba      	cmp	sl, r7
 8001400:	d01e      	beq.n	8001440 <__ledf2+0x74>
 8001402:	42b8      	cmp	r0, r7
 8001404:	d00d      	beq.n	8001422 <__ledf2+0x56>
 8001406:	4657      	mov	r7, sl
 8001408:	2f00      	cmp	r7, #0
 800140a:	d127      	bne.n	800145c <__ledf2+0x90>
 800140c:	4334      	orrs	r4, r6
 800140e:	2800      	cmp	r0, #0
 8001410:	d133      	bne.n	800147a <__ledf2+0xae>
 8001412:	430a      	orrs	r2, r1
 8001414:	d034      	beq.n	8001480 <__ledf2+0xb4>
 8001416:	2c00      	cmp	r4, #0
 8001418:	d140      	bne.n	800149c <__ledf2+0xd0>
 800141a:	4663      	mov	r3, ip
 800141c:	0058      	lsls	r0, r3, #1
 800141e:	3801      	subs	r0, #1
 8001420:	e015      	b.n	800144e <__ledf2+0x82>
 8001422:	4311      	orrs	r1, r2
 8001424:	d112      	bne.n	800144c <__ledf2+0x80>
 8001426:	4653      	mov	r3, sl
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <__ledf2+0x64>
 800142c:	4326      	orrs	r6, r4
 800142e:	d0f4      	beq.n	800141a <__ledf2+0x4e>
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	4563      	cmp	r3, ip
 8001434:	d01d      	beq.n	8001472 <__ledf2+0xa6>
 8001436:	2001      	movs	r0, #1
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	425f      	negs	r7, r3
 800143c:	4338      	orrs	r0, r7
 800143e:	e006      	b.n	800144e <__ledf2+0x82>
 8001440:	4326      	orrs	r6, r4
 8001442:	d103      	bne.n	800144c <__ledf2+0x80>
 8001444:	4550      	cmp	r0, sl
 8001446:	d1f6      	bne.n	8001436 <__ledf2+0x6a>
 8001448:	4311      	orrs	r1, r2
 800144a:	d01c      	beq.n	8001486 <__ledf2+0xba>
 800144c:	2002      	movs	r0, #2
 800144e:	b003      	add	sp, #12
 8001450:	bcf0      	pop	{r4, r5, r6, r7}
 8001452:	46bb      	mov	fp, r7
 8001454:	46b2      	mov	sl, r6
 8001456:	46a9      	mov	r9, r5
 8001458:	46a0      	mov	r8, r4
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	2800      	cmp	r0, #0
 800145e:	d0ea      	beq.n	8001436 <__ledf2+0x6a>
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	4563      	cmp	r3, ip
 8001464:	d1e7      	bne.n	8001436 <__ledf2+0x6a>
 8001466:	4582      	cmp	sl, r0
 8001468:	dce5      	bgt.n	8001436 <__ledf2+0x6a>
 800146a:	db02      	blt.n	8001472 <__ledf2+0xa6>
 800146c:	428e      	cmp	r6, r1
 800146e:	d8e2      	bhi.n	8001436 <__ledf2+0x6a>
 8001470:	d00e      	beq.n	8001490 <__ledf2+0xc4>
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	0058      	lsls	r0, r3, #1
 8001476:	3801      	subs	r0, #1
 8001478:	e7e9      	b.n	800144e <__ledf2+0x82>
 800147a:	2c00      	cmp	r4, #0
 800147c:	d0cd      	beq.n	800141a <__ledf2+0x4e>
 800147e:	e7d7      	b.n	8001430 <__ledf2+0x64>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e4      	beq.n	800144e <__ledf2+0x82>
 8001484:	e7d7      	b.n	8001436 <__ledf2+0x6a>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	2000      	movs	r0, #0
 800148a:	4563      	cmp	r3, ip
 800148c:	d0df      	beq.n	800144e <__ledf2+0x82>
 800148e:	e7d2      	b.n	8001436 <__ledf2+0x6a>
 8001490:	45c8      	cmp	r8, r9
 8001492:	d8d0      	bhi.n	8001436 <__ledf2+0x6a>
 8001494:	2000      	movs	r0, #0
 8001496:	45c8      	cmp	r8, r9
 8001498:	d2d9      	bcs.n	800144e <__ledf2+0x82>
 800149a:	e7ea      	b.n	8001472 <__ledf2+0xa6>
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	4563      	cmp	r3, ip
 80014a0:	d0e4      	beq.n	800146c <__ledf2+0xa0>
 80014a2:	e7c8      	b.n	8001436 <__ledf2+0x6a>
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__aeabi_dmul>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	46de      	mov	lr, fp
 80014b0:	4645      	mov	r5, r8
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	001f      	movs	r7, r3
 80014b6:	030b      	lsls	r3, r1, #12
 80014b8:	0b1b      	lsrs	r3, r3, #12
 80014ba:	0016      	movs	r6, r2
 80014bc:	469a      	mov	sl, r3
 80014be:	0fca      	lsrs	r2, r1, #31
 80014c0:	004b      	lsls	r3, r1, #1
 80014c2:	0004      	movs	r4, r0
 80014c4:	4691      	mov	r9, r2
 80014c6:	b085      	sub	sp, #20
 80014c8:	0d5b      	lsrs	r3, r3, #21
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0x26>
 80014cc:	e1cf      	b.n	800186e <__aeabi_dmul+0x3c6>
 80014ce:	4acd      	ldr	r2, [pc, #820]	@ (8001804 <__aeabi_dmul+0x35c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d055      	beq.n	8001580 <__aeabi_dmul+0xd8>
 80014d4:	4651      	mov	r1, sl
 80014d6:	0f42      	lsrs	r2, r0, #29
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0409      	lsls	r1, r1, #16
 80014e0:	4311      	orrs	r1, r2
 80014e2:	00c2      	lsls	r2, r0, #3
 80014e4:	4690      	mov	r8, r2
<<<<<<< HEAD
 80014e6:	2408      	movs	r4, #8
 80014e8:	9303      	str	r3, [sp, #12]
 80014ea:	e677      	b.n	80011dc <__aeabi_ddiv+0x50>
 80014ec:	465a      	mov	r2, fp
 80014ee:	9b00      	ldr	r3, [sp, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <__aeabi_ddiv+0x39c>)
 80014f4:	469c      	mov	ip, r3
 80014f6:	44e2      	add	sl, ip
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	d117      	bne.n	800152c <__aeabi_ddiv+0x3a0>
 80014fc:	2302      	movs	r3, #2
 80014fe:	431c      	orrs	r4, r3
 8001500:	2300      	movs	r3, #0
 8001502:	469b      	mov	fp, r3
 8001504:	3302      	adds	r3, #2
 8001506:	e689      	b.n	800121c <__aeabi_ddiv+0x90>
 8001508:	000007ff 	.word	0x000007ff
 800150c:	fffffc01 	.word	0xfffffc01
 8001510:	08016800 	.word	0x08016800
 8001514:	000003ff 	.word	0x000003ff
 8001518:	feffffff 	.word	0xfeffffff
 800151c:	000007fe 	.word	0x000007fe
 8001520:	000003f3 	.word	0x000003f3
 8001524:	fffffc0d 	.word	0xfffffc0d
 8001528:	fffff801 	.word	0xfffff801
 800152c:	2303      	movs	r3, #3
 800152e:	0032      	movs	r2, r6
 8001530:	431c      	orrs	r4, r3
 8001532:	e673      	b.n	800121c <__aeabi_ddiv+0x90>
 8001534:	469a      	mov	sl, r3
 8001536:	2303      	movs	r3, #3
 8001538:	46d9      	mov	r9, fp
 800153a:	240c      	movs	r4, #12
 800153c:	9303      	str	r3, [sp, #12]
 800153e:	e64d      	b.n	80011dc <__aeabi_ddiv+0x50>
 8001540:	2300      	movs	r3, #0
 8001542:	4698      	mov	r8, r3
 8001544:	469a      	mov	sl, r3
 8001546:	3301      	adds	r3, #1
 8001548:	2404      	movs	r4, #4
 800154a:	9303      	str	r3, [sp, #12]
 800154c:	e646      	b.n	80011dc <__aeabi_ddiv+0x50>
 800154e:	2301      	movs	r3, #1
 8001550:	431c      	orrs	r4, r3
 8001552:	2300      	movs	r3, #0
 8001554:	469b      	mov	fp, r3
 8001556:	3301      	adds	r3, #1
 8001558:	e660      	b.n	800121c <__aeabi_ddiv+0x90>
=======
 80014e6:	4ac8      	ldr	r2, [pc, #800]	@ (8001808 <__aeabi_dmul+0x360>)
 80014e8:	468a      	mov	sl, r1
 80014ea:	4693      	mov	fp, r2
 80014ec:	449b      	add	fp, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	033c      	lsls	r4, r7, #12
 80014f6:	007b      	lsls	r3, r7, #1
 80014f8:	0ffa      	lsrs	r2, r7, #31
 80014fa:	9601      	str	r6, [sp, #4]
 80014fc:	0b24      	lsrs	r4, r4, #12
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x5e>
 8001504:	e188      	b.n	8001818 <__aeabi_dmul+0x370>
 8001506:	4abf      	ldr	r2, [pc, #764]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x66>
 800150c:	e092      	b.n	8001634 <__aeabi_dmul+0x18c>
 800150e:	4abe      	ldr	r2, [pc, #760]	@ (8001808 <__aeabi_dmul+0x360>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	449b      	add	fp, r3
 8001516:	2d0a      	cmp	r5, #10
 8001518:	dc42      	bgt.n	80015a0 <__aeabi_dmul+0xf8>
 800151a:	00e4      	lsls	r4, r4, #3
 800151c:	0f73      	lsrs	r3, r6, #29
 800151e:	4323      	orrs	r3, r4
 8001520:	2480      	movs	r4, #128	@ 0x80
 8001522:	4649      	mov	r1, r9
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	431c      	orrs	r4, r3
 8001528:	00f3      	lsls	r3, r6, #3
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	9b00      	ldr	r3, [sp, #0]
 800152e:	2000      	movs	r0, #0
 8001530:	4059      	eors	r1, r3
 8001532:	b2cb      	uxtb	r3, r1
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	2d02      	cmp	r5, #2
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x94>
 800153a:	e094      	b.n	8001666 <__aeabi_dmul+0x1be>
 800153c:	2301      	movs	r3, #1
 800153e:	40ab      	lsls	r3, r5
 8001540:	001d      	movs	r5, r3
 8001542:	23a6      	movs	r3, #166	@ 0xa6
 8001544:	002a      	movs	r2, r5
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	401a      	ands	r2, r3
 800154a:	421d      	tst	r5, r3
 800154c:	d000      	beq.n	8001550 <__aeabi_dmul+0xa8>
 800154e:	e229      	b.n	80019a4 <__aeabi_dmul+0x4fc>
 8001550:	2390      	movs	r3, #144	@ 0x90
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	421d      	tst	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0xb2>
 8001558:	e24d      	b.n	80019f6 <__aeabi_dmul+0x54e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4699      	mov	r9, r3
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	4ba8      	ldr	r3, [pc, #672]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001564:	0010      	movs	r0, r2
 8001566:	464a      	mov	r2, r9
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4323      	orrs	r3, r4
 800156c:	07d2      	lsls	r2, r2, #31
 800156e:	4313      	orrs	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	b005      	add	sp, #20
 8001574:	bcf0      	pop	{r4, r5, r6, r7}
 8001576:	46bb      	mov	fp, r7
 8001578:	46b2      	mov	sl, r6
 800157a:	46a9      	mov	r9, r5
 800157c:	46a0      	mov	r8, r4
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	4652      	mov	r2, sl
 8001582:	4302      	orrs	r2, r0
 8001584:	4690      	mov	r8, r2
 8001586:	d000      	beq.n	800158a <__aeabi_dmul+0xe2>
 8001588:	e1ac      	b.n	80018e4 <__aeabi_dmul+0x43c>
 800158a:	469b      	mov	fp, r3
 800158c:	2302      	movs	r3, #2
 800158e:	4692      	mov	sl, r2
 8001590:	2508      	movs	r5, #8
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	e7ae      	b.n	80014f4 <__aeabi_dmul+0x4c>
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	46a2      	mov	sl, r4
 800159a:	4699      	mov	r9, r3
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4698      	mov	r8, r3
 80015a0:	9b02      	ldr	r3, [sp, #8]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x100>
 80015a6:	e1ca      	b.n	800193e <__aeabi_dmul+0x496>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0x106>
 80015ac:	e192      	b.n	80018d4 <__aeabi_dmul+0x42c>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <__aeabi_dmul+0x12c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	e7d4      	b.n	8001564 <__aeabi_dmul+0xbc>
 80015ba:	2201      	movs	r2, #1
 80015bc:	087b      	lsrs	r3, r7, #1
 80015be:	403a      	ands	r2, r7
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	07d2      	lsls	r2, r2, #31
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	4653      	mov	r3, sl
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	469a      	mov	sl, r3
 80015d0:	9b03      	ldr	r3, [sp, #12]
 80015d2:	4699      	mov	r9, r3
 80015d4:	465b      	mov	r3, fp
 80015d6:	1c58      	adds	r0, r3, #1
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	445b      	add	r3, fp
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc00      	bgt.n	80015e4 <__aeabi_dmul+0x13c>
 80015e2:	e1b1      	b.n	8001948 <__aeabi_dmul+0x4a0>
 80015e4:	4642      	mov	r2, r8
 80015e6:	0752      	lsls	r2, r2, #29
 80015e8:	d00b      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015ea:	220f      	movs	r2, #15
 80015ec:	4641      	mov	r1, r8
 80015ee:	400a      	ands	r2, r1
 80015f0:	2a04      	cmp	r2, #4
 80015f2:	d006      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015f4:	4642      	mov	r2, r8
 80015f6:	1d11      	adds	r1, r2, #4
 80015f8:	4541      	cmp	r1, r8
 80015fa:	4192      	sbcs	r2, r2
 80015fc:	4688      	mov	r8, r1
 80015fe:	4252      	negs	r2, r2
 8001600:	4492      	add	sl, r2
 8001602:	4652      	mov	r2, sl
 8001604:	01d2      	lsls	r2, r2, #7
 8001606:	d506      	bpl.n	8001616 <__aeabi_dmul+0x16e>
 8001608:	4652      	mov	r2, sl
 800160a:	4b80      	ldr	r3, [pc, #512]	@ (800180c <__aeabi_dmul+0x364>)
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	4692      	mov	sl, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	18c3      	adds	r3, r0, r3
 8001616:	4a7e      	ldr	r2, [pc, #504]	@ (8001810 <__aeabi_dmul+0x368>)
 8001618:	4293      	cmp	r3, r2
 800161a:	dd00      	ble.n	800161e <__aeabi_dmul+0x176>
 800161c:	e18f      	b.n	800193e <__aeabi_dmul+0x496>
 800161e:	4642      	mov	r2, r8
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	4652      	mov	r2, sl
 8001624:	0752      	lsls	r2, r2, #29
 8001626:	430a      	orrs	r2, r1
 8001628:	4651      	mov	r1, sl
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	024c      	lsls	r4, r1, #9
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	e797      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001634:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001636:	4326      	orrs	r6, r4
 8001638:	469c      	mov	ip, r3
 800163a:	44e3      	add	fp, ip
 800163c:	2e00      	cmp	r6, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x19a>
 8001640:	e16f      	b.n	8001922 <__aeabi_dmul+0x47a>
 8001642:	2303      	movs	r3, #3
 8001644:	4649      	mov	r1, r9
 8001646:	431d      	orrs	r5, r3
 8001648:	9b00      	ldr	r3, [sp, #0]
 800164a:	4059      	eors	r1, r3
 800164c:	b2cb      	uxtb	r3, r1
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	2d0a      	cmp	r5, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x1ae>
 8001654:	e133      	b.n	80018be <__aeabi_dmul+0x416>
 8001656:	2301      	movs	r3, #1
 8001658:	40ab      	lsls	r3, r5
 800165a:	001d      	movs	r5, r3
 800165c:	2303      	movs	r3, #3
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	422a      	tst	r2, r5
 8001664:	d197      	bne.n	8001596 <__aeabi_dmul+0xee>
 8001666:	4642      	mov	r2, r8
 8001668:	4643      	mov	r3, r8
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	0016      	movs	r6, r2
 8001670:	9801      	ldr	r0, [sp, #4]
 8001672:	0c1d      	lsrs	r5, r3, #16
 8001674:	0c03      	lsrs	r3, r0, #16
 8001676:	0400      	lsls	r0, r0, #16
 8001678:	0c00      	lsrs	r0, r0, #16
 800167a:	4346      	muls	r6, r0
 800167c:	46b4      	mov	ip, r6
 800167e:	001e      	movs	r6, r3
 8001680:	436e      	muls	r6, r5
 8001682:	9600      	str	r6, [sp, #0]
 8001684:	0016      	movs	r6, r2
 8001686:	0007      	movs	r7, r0
 8001688:	435e      	muls	r6, r3
 800168a:	4661      	mov	r1, ip
 800168c:	46b0      	mov	r8, r6
 800168e:	436f      	muls	r7, r5
 8001690:	0c0e      	lsrs	r6, r1, #16
 8001692:	44b8      	add	r8, r7
 8001694:	4446      	add	r6, r8
 8001696:	42b7      	cmp	r7, r6
 8001698:	d905      	bls.n	80016a6 <__aeabi_dmul+0x1fe>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	4688      	mov	r8, r1
 80016a0:	9f00      	ldr	r7, [sp, #0]
 80016a2:	4447      	add	r7, r8
 80016a4:	9700      	str	r7, [sp, #0]
 80016a6:	4661      	mov	r1, ip
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	0c09      	lsrs	r1, r1, #16
 80016ac:	0c37      	lsrs	r7, r6, #16
 80016ae:	0436      	lsls	r6, r6, #16
 80016b0:	468c      	mov	ip, r1
 80016b2:	0031      	movs	r1, r6
 80016b4:	4461      	add	r1, ip
 80016b6:	9101      	str	r1, [sp, #4]
 80016b8:	0011      	movs	r1, r2
 80016ba:	0c26      	lsrs	r6, r4, #16
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	0c24      	lsrs	r4, r4, #16
 80016c0:	4361      	muls	r1, r4
 80016c2:	468c      	mov	ip, r1
 80016c4:	0021      	movs	r1, r4
 80016c6:	4369      	muls	r1, r5
 80016c8:	4689      	mov	r9, r1
 80016ca:	4661      	mov	r1, ip
 80016cc:	0c09      	lsrs	r1, r1, #16
 80016ce:	4688      	mov	r8, r1
 80016d0:	4372      	muls	r2, r6
 80016d2:	444a      	add	r2, r9
 80016d4:	4442      	add	r2, r8
 80016d6:	4375      	muls	r5, r6
 80016d8:	4591      	cmp	r9, r2
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x23c>
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0249      	lsls	r1, r1, #9
 80016e0:	4688      	mov	r8, r1
 80016e2:	4445      	add	r5, r8
 80016e4:	0c11      	lsrs	r1, r2, #16
 80016e6:	4688      	mov	r8, r1
 80016e8:	4661      	mov	r1, ip
 80016ea:	0409      	lsls	r1, r1, #16
 80016ec:	0c09      	lsrs	r1, r1, #16
 80016ee:	468c      	mov	ip, r1
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4462      	add	r2, ip
 80016f4:	18b9      	adds	r1, r7, r2
 80016f6:	9102      	str	r1, [sp, #8]
 80016f8:	4651      	mov	r1, sl
 80016fa:	0c09      	lsrs	r1, r1, #16
 80016fc:	468c      	mov	ip, r1
 80016fe:	4651      	mov	r1, sl
 8001700:	040f      	lsls	r7, r1, #16
 8001702:	0c3f      	lsrs	r7, r7, #16
 8001704:	0039      	movs	r1, r7
 8001706:	4341      	muls	r1, r0
 8001708:	4445      	add	r5, r8
 800170a:	4688      	mov	r8, r1
 800170c:	4661      	mov	r1, ip
 800170e:	4341      	muls	r1, r0
 8001710:	468a      	mov	sl, r1
 8001712:	4641      	mov	r1, r8
 8001714:	4660      	mov	r0, ip
 8001716:	0c09      	lsrs	r1, r1, #16
 8001718:	4689      	mov	r9, r1
 800171a:	4358      	muls	r0, r3
 800171c:	437b      	muls	r3, r7
 800171e:	4453      	add	r3, sl
 8001720:	444b      	add	r3, r9
 8001722:	459a      	cmp	sl, r3
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x286>
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	4689      	mov	r9, r1
 800172c:	4448      	add	r0, r9
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	4689      	mov	r9, r1
 8001732:	4641      	mov	r1, r8
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0039      	movs	r1, r7
 800173c:	4361      	muls	r1, r4
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4443      	add	r3, r8
 8001742:	4688      	mov	r8, r1
 8001744:	4661      	mov	r1, ip
 8001746:	434c      	muls	r4, r1
 8001748:	4371      	muls	r1, r6
 800174a:	468c      	mov	ip, r1
 800174c:	4641      	mov	r1, r8
 800174e:	4377      	muls	r7, r6
 8001750:	0c0e      	lsrs	r6, r1, #16
 8001752:	193f      	adds	r7, r7, r4
 8001754:	19f6      	adds	r6, r6, r7
 8001756:	4448      	add	r0, r9
 8001758:	42b4      	cmp	r4, r6
 800175a:	d903      	bls.n	8001764 <__aeabi_dmul+0x2bc>
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0249      	lsls	r1, r1, #9
 8001760:	4689      	mov	r9, r1
 8001762:	44cc      	add	ip, r9
 8001764:	9902      	ldr	r1, [sp, #8]
 8001766:	9f00      	ldr	r7, [sp, #0]
 8001768:	4689      	mov	r9, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	444f      	add	r7, r9
 800176e:	4689      	mov	r9, r1
 8001770:	4641      	mov	r1, r8
 8001772:	4297      	cmp	r7, r2
 8001774:	4192      	sbcs	r2, r2
 8001776:	040c      	lsls	r4, r1, #16
 8001778:	0c24      	lsrs	r4, r4, #16
 800177a:	444c      	add	r4, r9
 800177c:	18ff      	adds	r7, r7, r3
 800177e:	4252      	negs	r2, r2
 8001780:	1964      	adds	r4, r4, r5
 8001782:	18a1      	adds	r1, r4, r2
 8001784:	429f      	cmp	r7, r3
 8001786:	419b      	sbcs	r3, r3
 8001788:	4688      	mov	r8, r1
 800178a:	4682      	mov	sl, r0
 800178c:	425b      	negs	r3, r3
 800178e:	4699      	mov	r9, r3
 8001790:	4590      	cmp	r8, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	42ac      	cmp	r4, r5
 8001796:	41a4      	sbcs	r4, r4
 8001798:	44c2      	add	sl, r8
 800179a:	44d1      	add	r9, sl
 800179c:	4252      	negs	r2, r2
 800179e:	4264      	negs	r4, r4
 80017a0:	4314      	orrs	r4, r2
 80017a2:	4599      	cmp	r9, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	4582      	cmp	sl, r0
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	425b      	negs	r3, r3
 80017ac:	4252      	negs	r2, r2
 80017ae:	4313      	orrs	r3, r2
 80017b0:	464a      	mov	r2, r9
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	19a4      	adds	r4, r4, r6
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	4463      	add	r3, ip
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	0dd2      	lsrs	r2, r2, #23
 80017be:	431a      	orrs	r2, r3
 80017c0:	9901      	ldr	r1, [sp, #4]
 80017c2:	4692      	mov	sl, r2
 80017c4:	027a      	lsls	r2, r7, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	0dff      	lsrs	r7, r7, #23
 80017ce:	4317      	orrs	r7, r2
 80017d0:	464a      	mov	r2, r9
 80017d2:	0252      	lsls	r2, r2, #9
 80017d4:	4317      	orrs	r7, r2
 80017d6:	46b8      	mov	r8, r7
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	d500      	bpl.n	80017de <__aeabi_dmul+0x336>
 80017dc:	e6ed      	b.n	80015ba <__aeabi_dmul+0x112>
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <__aeabi_dmul+0x36c>)
 80017e0:	9a03      	ldr	r2, [sp, #12]
 80017e2:	445b      	add	r3, fp
 80017e4:	4691      	mov	r9, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dmul+0x344>
 80017ea:	e0ac      	b.n	8001946 <__aeabi_dmul+0x49e>
 80017ec:	003a      	movs	r2, r7
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x34c>
 80017f2:	e710      	b.n	8001616 <__aeabi_dmul+0x16e>
 80017f4:	220f      	movs	r2, #15
 80017f6:	4658      	mov	r0, fp
 80017f8:	403a      	ands	r2, r7
 80017fa:	2a04      	cmp	r2, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0x358>
 80017fe:	e6f9      	b.n	80015f4 <__aeabi_dmul+0x14c>
 8001800:	e709      	b.n	8001616 <__aeabi_dmul+0x16e>
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	feffffff 	.word	0xfeffffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	000003ff 	.word	0x000003ff
 8001818:	0022      	movs	r2, r4
 800181a:	4332      	orrs	r2, r6
 800181c:	d06f      	beq.n	80018fe <__aeabi_dmul+0x456>
 800181e:	2c00      	cmp	r4, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_dmul+0x37c>
 8001822:	e0c2      	b.n	80019aa <__aeabi_dmul+0x502>
 8001824:	0020      	movs	r0, r4
 8001826:	f000 fddf 	bl	80023e8 <__clzsi2>
 800182a:	0002      	movs	r2, r0
 800182c:	0003      	movs	r3, r0
 800182e:	3a0b      	subs	r2, #11
 8001830:	201d      	movs	r0, #29
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	0030      	movs	r0, r6
 8001836:	0019      	movs	r1, r3
 8001838:	40d0      	lsrs	r0, r2
 800183a:	3908      	subs	r1, #8
 800183c:	408c      	lsls	r4, r1
 800183e:	0002      	movs	r2, r0
 8001840:	4322      	orrs	r2, r4
 8001842:	0034      	movs	r4, r6
 8001844:	408c      	lsls	r4, r1
 8001846:	4659      	mov	r1, fp
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4986      	ldr	r1, [pc, #536]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 800184c:	468b      	mov	fp, r1
 800184e:	449b      	add	fp, r3
 8001850:	2d0a      	cmp	r5, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0x3ae>
 8001854:	e6a4      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001856:	4649      	mov	r1, r9
 8001858:	9b00      	ldr	r3, [sp, #0]
 800185a:	9401      	str	r4, [sp, #4]
 800185c:	4059      	eors	r1, r3
 800185e:	b2cb      	uxtb	r3, r1
 8001860:	0014      	movs	r4, r2
 8001862:	2000      	movs	r0, #0
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	2d02      	cmp	r5, #2
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0x3c4>
 800186a:	e667      	b.n	800153c <__aeabi_dmul+0x94>
 800186c:	e6fb      	b.n	8001666 <__aeabi_dmul+0x1be>
 800186e:	4653      	mov	r3, sl
 8001870:	4303      	orrs	r3, r0
 8001872:	4698      	mov	r8, r3
 8001874:	d03c      	beq.n	80018f0 <__aeabi_dmul+0x448>
 8001876:	4653      	mov	r3, sl
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x3d6>
 800187c:	e0a3      	b.n	80019c6 <__aeabi_dmul+0x51e>
 800187e:	4650      	mov	r0, sl
 8001880:	f000 fdb2 	bl	80023e8 <__clzsi2>
 8001884:	230b      	movs	r3, #11
 8001886:	425b      	negs	r3, r3
 8001888:	469c      	mov	ip, r3
 800188a:	0002      	movs	r2, r0
 800188c:	4484      	add	ip, r0
 800188e:	0011      	movs	r1, r2
 8001890:	4650      	mov	r0, sl
 8001892:	3908      	subs	r1, #8
 8001894:	4088      	lsls	r0, r1
 8001896:	231d      	movs	r3, #29
 8001898:	4680      	mov	r8, r0
 800189a:	4660      	mov	r0, ip
 800189c:	1a1b      	subs	r3, r3, r0
 800189e:	0020      	movs	r0, r4
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	0003      	movs	r3, r0
 80018a4:	4640      	mov	r0, r8
 80018a6:	4303      	orrs	r3, r0
 80018a8:	469a      	mov	sl, r3
 80018aa:	0023      	movs	r3, r4
 80018ac:	408b      	lsls	r3, r1
 80018ae:	4698      	mov	r8, r3
 80018b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 80018b2:	2500      	movs	r5, #0
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	469b      	mov	fp, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	e61a      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018be:	2d0f      	cmp	r5, #15
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0x41c>
 80018c2:	e0c9      	b.n	8001a58 <__aeabi_dmul+0x5b0>
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	4652      	mov	r2, sl
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	421a      	tst	r2, r3
 80018cc:	d002      	beq.n	80018d4 <__aeabi_dmul+0x42c>
 80018ce:	421c      	tst	r4, r3
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dmul+0x42c>
 80018d2:	e092      	b.n	80019fa <__aeabi_dmul+0x552>
 80018d4:	2480      	movs	r4, #128	@ 0x80
 80018d6:	4653      	mov	r3, sl
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	431c      	orrs	r4, r3
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4642      	mov	r2, r8
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e63e      	b.n	8001562 <__aeabi_dmul+0xba>
 80018e4:	469b      	mov	fp, r3
 80018e6:	2303      	movs	r3, #3
 80018e8:	4680      	mov	r8, r0
 80018ea:	250c      	movs	r5, #12
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	e601      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018f0:	2300      	movs	r3, #0
 80018f2:	469a      	mov	sl, r3
 80018f4:	469b      	mov	fp, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	2504      	movs	r5, #4
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	e5fa      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018fe:	2101      	movs	r1, #1
 8001900:	430d      	orrs	r5, r1
 8001902:	2d0a      	cmp	r5, #10
 8001904:	dd00      	ble.n	8001908 <__aeabi_dmul+0x460>
 8001906:	e64b      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001908:	4649      	mov	r1, r9
 800190a:	9800      	ldr	r0, [sp, #0]
 800190c:	4041      	eors	r1, r0
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	2d02      	cmp	r5, #2
 8001914:	dc00      	bgt.n	8001918 <__aeabi_dmul+0x470>
 8001916:	e096      	b.n	8001a46 <__aeabi_dmul+0x59e>
 8001918:	2300      	movs	r3, #0
 800191a:	2400      	movs	r4, #0
 800191c:	2001      	movs	r0, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	e60c      	b.n	800153c <__aeabi_dmul+0x94>
 8001922:	4649      	mov	r1, r9
 8001924:	2302      	movs	r3, #2
 8001926:	9a00      	ldr	r2, [sp, #0]
 8001928:	432b      	orrs	r3, r5
 800192a:	4051      	eors	r1, r2
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	9203      	str	r2, [sp, #12]
 8001930:	2b0a      	cmp	r3, #10
 8001932:	dd00      	ble.n	8001936 <__aeabi_dmul+0x48e>
 8001934:	e634      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001936:	2d00      	cmp	r5, #0
 8001938:	d157      	bne.n	80019ea <__aeabi_dmul+0x542>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	4699      	mov	r9, r3
 800193e:	2400      	movs	r4, #0
 8001940:	2200      	movs	r2, #0
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_dmul+0x5c0>)
 8001944:	e60e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001946:	4658      	mov	r0, fp
 8001948:	2101      	movs	r1, #1
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	2938      	cmp	r1, #56	@ 0x38
 800194e:	dd00      	ble.n	8001952 <__aeabi_dmul+0x4aa>
 8001950:	e62f      	b.n	80015b2 <__aeabi_dmul+0x10a>
 8001952:	291f      	cmp	r1, #31
 8001954:	dd56      	ble.n	8001a04 <__aeabi_dmul+0x55c>
 8001956:	221f      	movs	r2, #31
 8001958:	4654      	mov	r4, sl
 800195a:	4252      	negs	r2, r2
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	40dc      	lsrs	r4, r3
 8001960:	2920      	cmp	r1, #32
 8001962:	d007      	beq.n	8001974 <__aeabi_dmul+0x4cc>
 8001964:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <__aeabi_dmul+0x5c4>)
 8001966:	4642      	mov	r2, r8
 8001968:	469c      	mov	ip, r3
 800196a:	4653      	mov	r3, sl
 800196c:	4460      	add	r0, ip
 800196e:	4083      	lsls	r3, r0
 8001970:	431a      	orrs	r2, r3
 8001972:	4690      	mov	r8, r2
 8001974:	4642      	mov	r2, r8
 8001976:	2107      	movs	r1, #7
 8001978:	1e53      	subs	r3, r2, #1
 800197a:	419a      	sbcs	r2, r3
 800197c:	000b      	movs	r3, r1
 800197e:	4322      	orrs	r2, r4
 8001980:	4013      	ands	r3, r2
 8001982:	2400      	movs	r4, #0
 8001984:	4211      	tst	r1, r2
 8001986:	d009      	beq.n	800199c <__aeabi_dmul+0x4f4>
 8001988:	230f      	movs	r3, #15
 800198a:	4013      	ands	r3, r2
 800198c:	2b04      	cmp	r3, #4
 800198e:	d05d      	beq.n	8001a4c <__aeabi_dmul+0x5a4>
 8001990:	1d11      	adds	r1, r2, #4
 8001992:	4291      	cmp	r1, r2
 8001994:	419b      	sbcs	r3, r3
 8001996:	000a      	movs	r2, r1
 8001998:	425b      	negs	r3, r3
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	431a      	orrs	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	e5df      	b.n	8001564 <__aeabi_dmul+0xbc>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	4699      	mov	r9, r3
 80019a8:	e5fa      	b.n	80015a0 <__aeabi_dmul+0xf8>
 80019aa:	9801      	ldr	r0, [sp, #4]
 80019ac:	f000 fd1c 	bl	80023e8 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	0003      	movs	r3, r0
 80019b4:	3215      	adds	r2, #21
 80019b6:	3320      	adds	r3, #32
 80019b8:	2a1c      	cmp	r2, #28
 80019ba:	dc00      	bgt.n	80019be <__aeabi_dmul+0x516>
 80019bc:	e738      	b.n	8001830 <__aeabi_dmul+0x388>
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	3808      	subs	r0, #8
 80019c2:	4082      	lsls	r2, r0
 80019c4:	e73f      	b.n	8001846 <__aeabi_dmul+0x39e>
 80019c6:	f000 fd0f 	bl	80023e8 <__clzsi2>
 80019ca:	2315      	movs	r3, #21
 80019cc:	469c      	mov	ip, r3
 80019ce:	4484      	add	ip, r0
 80019d0:	0002      	movs	r2, r0
 80019d2:	4663      	mov	r3, ip
 80019d4:	3220      	adds	r2, #32
 80019d6:	2b1c      	cmp	r3, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x534>
 80019da:	e758      	b.n	800188e <__aeabi_dmul+0x3e6>
 80019dc:	2300      	movs	r3, #0
 80019de:	4698      	mov	r8, r3
 80019e0:	0023      	movs	r3, r4
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	e762      	b.n	80018b0 <__aeabi_dmul+0x408>
 80019ea:	001d      	movs	r5, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2002      	movs	r0, #2
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e5a2      	b.n	800153c <__aeabi_dmul+0x94>
 80019f6:	9002      	str	r0, [sp, #8]
 80019f8:	e632      	b.n	8001660 <__aeabi_dmul+0x1b8>
 80019fa:	431c      	orrs	r4, r3
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	9a01      	ldr	r2, [sp, #4]
 8001a00:	4699      	mov	r9, r3
 8001a02:	e5ae      	b.n	8001562 <__aeabi_dmul+0xba>
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <__aeabi_dmul+0x5c8>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	18c3      	adds	r3, r0, r3
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	40c8      	lsrs	r0, r1
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4640      	mov	r0, r8
 8001a14:	4098      	lsls	r0, r3
 8001a16:	0003      	movs	r3, r0
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	4183      	sbcs	r3, r0
 8001a1c:	4654      	mov	r4, sl
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	40cc      	lsrs	r4, r1
 8001a22:	0753      	lsls	r3, r2, #29
 8001a24:	d009      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a26:	230f      	movs	r3, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d005      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a2e:	1d13      	adds	r3, r2, #4
 8001a30:	4293      	cmp	r3, r2
 8001a32:	4192      	sbcs	r2, r2
 8001a34:	4252      	negs	r2, r2
 8001a36:	18a4      	adds	r4, r4, r2
 8001a38:	001a      	movs	r2, r3
 8001a3a:	0223      	lsls	r3, r4, #8
 8001a3c:	d508      	bpl.n	8001a50 <__aeabi_dmul+0x5a8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e58e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a46:	4689      	mov	r9, r1
 8001a48:	2400      	movs	r4, #0
 8001a4a:	e58b      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e7a5      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a50:	0763      	lsls	r3, r4, #29
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0b24      	lsrs	r4, r4, #12
 8001a56:	e7a1      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	4698      	mov	r8, r3
 8001a62:	e737      	b.n	80018d4 <__aeabi_dmul+0x42c>
 8001a64:	fffffc0d 	.word	0xfffffc0d
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	0000043e 	.word	0x0000043e
 8001a70:	0000041e 	.word	0x0000041e

08001a74 <__aeabi_dsub>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4657      	mov	r7, sl
 8001a78:	464e      	mov	r6, r9
 8001a7a:	4645      	mov	r5, r8
 8001a7c:	46de      	mov	lr, fp
 8001a7e:	b5e0      	push	{r5, r6, r7, lr}
 8001a80:	b083      	sub	sp, #12
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	030c      	lsls	r4, r1, #12
 8001a88:	004d      	lsls	r5, r1, #1
 8001a8a:	0fce      	lsrs	r6, r1, #31
 8001a8c:	0a61      	lsrs	r1, r4, #9
 8001a8e:	9c00      	ldr	r4, [sp, #0]
 8001a90:	005f      	lsls	r7, r3, #1
 8001a92:	0f64      	lsrs	r4, r4, #29
 8001a94:	430c      	orrs	r4, r1
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	00c8      	lsls	r0, r1, #3
 8001a9e:	0319      	lsls	r1, r3, #12
 8001aa0:	0d7b      	lsrs	r3, r7, #21
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001aa8:	0fdb      	lsrs	r3, r3, #31
 8001aaa:	469c      	mov	ip, r3
 8001aac:	0a4b      	lsrs	r3, r1, #9
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	0f49      	lsrs	r1, r1, #29
 8001ab4:	4319      	orrs	r1, r3
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	468b      	mov	fp, r1
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4692      	mov	sl, r2
 8001abe:	0d6d      	lsrs	r5, r5, #21
 8001ac0:	45b9      	cmp	r9, r7
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x52>
 8001ac4:	e0bf      	b.n	8001c46 <__aeabi_dsub+0x1d2>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4661      	mov	r1, ip
 8001aca:	4059      	eors	r1, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	468c      	mov	ip, r1
 8001ad0:	1aeb      	subs	r3, r5, r3
 8001ad2:	428e      	cmp	r6, r1
 8001ad4:	d075      	beq.n	8001bc2 <__aeabi_dsub+0x14e>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x68>
 8001ada:	e2a3      	b.n	8002024 <__aeabi_dsub+0x5b0>
 8001adc:	4649      	mov	r1, r9
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x70>
 8001ae2:	e0ce      	b.n	8001c82 <__aeabi_dsub+0x20e>
 8001ae4:	42bd      	cmp	r5, r7
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x76>
 8001ae8:	e200      	b.n	8001eec <__aeabi_dsub+0x478>
 8001aea:	2701      	movs	r7, #1
 8001aec:	2b38      	cmp	r3, #56	@ 0x38
 8001aee:	dc19      	bgt.n	8001b24 <__aeabi_dsub+0xb0>
 8001af0:	2780      	movs	r7, #128	@ 0x80
 8001af2:	4659      	mov	r1, fp
 8001af4:	043f      	lsls	r7, r7, #16
 8001af6:	4339      	orrs	r1, r7
 8001af8:	468b      	mov	fp, r1
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x8c>
 8001afe:	e1fa      	b.n	8001ef6 <__aeabi_dsub+0x482>
 8001b00:	2720      	movs	r7, #32
 8001b02:	1af9      	subs	r1, r7, r3
 8001b04:	468c      	mov	ip, r1
 8001b06:	4659      	mov	r1, fp
 8001b08:	4667      	mov	r7, ip
 8001b0a:	40b9      	lsls	r1, r7
 8001b0c:	000f      	movs	r7, r1
 8001b0e:	0011      	movs	r1, r2
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	430f      	orrs	r7, r1
 8001b14:	4661      	mov	r1, ip
 8001b16:	408a      	lsls	r2, r1
 8001b18:	1e51      	subs	r1, r2, #1
 8001b1a:	418a      	sbcs	r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	40d9      	lsrs	r1, r3
 8001b20:	4317      	orrs	r7, r2
 8001b22:	1a64      	subs	r4, r4, r1
 8001b24:	1bc7      	subs	r7, r0, r7
 8001b26:	42b8      	cmp	r0, r7
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a24      	subs	r4, r4, r0
 8001b2e:	0223      	lsls	r3, r4, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0xc0>
 8001b32:	e140      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001b34:	0264      	lsls	r4, r4, #9
 8001b36:	0a64      	lsrs	r4, r4, #9
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0xca>
 8001b3c:	e154      	b.n	8001de8 <__aeabi_dsub+0x374>
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f000 fc52 	bl	80023e8 <__clzsi2>
 8001b44:	0003      	movs	r3, r0
 8001b46:	3b08      	subs	r3, #8
 8001b48:	2120      	movs	r1, #32
 8001b4a:	0038      	movs	r0, r7
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	40d0      	lsrs	r0, r2
 8001b50:	409c      	lsls	r4, r3
 8001b52:	0002      	movs	r2, r0
 8001b54:	409f      	lsls	r7, r3
 8001b56:	4322      	orrs	r2, r4
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dsub+0xea>
 8001b5c:	e1a6      	b.n	8001eac <__aeabi_dsub+0x438>
 8001b5e:	1b58      	subs	r0, r3, r5
 8001b60:	3001      	adds	r0, #1
 8001b62:	1a09      	subs	r1, r1, r0
 8001b64:	003c      	movs	r4, r7
 8001b66:	408f      	lsls	r7, r1
 8001b68:	40c4      	lsrs	r4, r0
 8001b6a:	1e7b      	subs	r3, r7, #1
 8001b6c:	419f      	sbcs	r7, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	408b      	lsls	r3, r1
 8001b72:	4327      	orrs	r7, r4
 8001b74:	431f      	orrs	r7, r3
 8001b76:	40c2      	lsrs	r2, r0
 8001b78:	003b      	movs	r3, r7
 8001b7a:	0014      	movs	r4, r2
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x110>
 8001b82:	e1f7      	b.n	8001f74 <__aeabi_dsub+0x500>
 8001b84:	077b      	lsls	r3, r7, #29
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x116>
 8001b88:	e377      	b.n	800227a <__aeabi_dsub+0x806>
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	0038      	movs	r0, r7
 8001b8e:	403b      	ands	r3, r7
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d004      	beq.n	8001b9e <__aeabi_dsub+0x12a>
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	41bf      	sbcs	r7, r7
 8001b9a:	427f      	negs	r7, r7
 8001b9c:	19e4      	adds	r4, r4, r7
 8001b9e:	0223      	lsls	r3, r4, #8
 8001ba0:	d400      	bmi.n	8001ba4 <__aeabi_dsub+0x130>
 8001ba2:	e368      	b.n	8002276 <__aeabi_dsub+0x802>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x13a>
 8001bac:	e0f4      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001bb0:	056d      	lsls	r5, r5, #21
 8001bb2:	401c      	ands	r4, r3
 8001bb4:	0d6d      	lsrs	r5, r5, #21
 8001bb6:	0767      	lsls	r7, r4, #29
 8001bb8:	08c0      	lsrs	r0, r0, #3
 8001bba:	0264      	lsls	r4, r4, #9
 8001bbc:	4307      	orrs	r7, r0
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	e0ec      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x154>
 8001bc6:	e329      	b.n	800221c <__aeabi_dsub+0x7a8>
 8001bc8:	4649      	mov	r1, r9
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x15c>
 8001bce:	e0d6      	b.n	8001d7e <__aeabi_dsub+0x30a>
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x164>
 8001bd6:	e12e      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x16c>
 8001bde:	e1e6      	b.n	8001fae <__aeabi_dsub+0x53a>
 8001be0:	42bb      	cmp	r3, r7
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x172>
 8001be4:	e182      	b.n	8001eec <__aeabi_dsub+0x478>
 8001be6:	2701      	movs	r7, #1
 8001be8:	000b      	movs	r3, r1
 8001bea:	2938      	cmp	r1, #56	@ 0x38
 8001bec:	dc14      	bgt.n	8001c18 <__aeabi_dsub+0x1a4>
 8001bee:	2b1f      	cmp	r3, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x180>
 8001bf2:	e23c      	b.n	800206e <__aeabi_dsub+0x5fa>
 8001bf4:	2720      	movs	r7, #32
 8001bf6:	1af9      	subs	r1, r7, r3
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	4667      	mov	r7, ip
 8001bfe:	40b9      	lsls	r1, r7
 8001c00:	000f      	movs	r7, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	40d9      	lsrs	r1, r3
 8001c06:	430f      	orrs	r7, r1
 8001c08:	4661      	mov	r1, ip
 8001c0a:	408a      	lsls	r2, r1
 8001c0c:	1e51      	subs	r1, r2, #1
 8001c0e:	418a      	sbcs	r2, r1
 8001c10:	4659      	mov	r1, fp
 8001c12:	40d9      	lsrs	r1, r3
 8001c14:	4317      	orrs	r7, r2
 8001c16:	1864      	adds	r4, r4, r1
 8001c18:	183f      	adds	r7, r7, r0
 8001c1a:	4287      	cmp	r7, r0
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	4240      	negs	r0, r0
 8001c20:	1824      	adds	r4, r4, r0
 8001c22:	0223      	lsls	r3, r4, #8
 8001c24:	d400      	bmi.n	8001c28 <__aeabi_dsub+0x1b4>
 8001c26:	e0c6      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1be>
 8001c30:	e0b2      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001c32:	2101      	movs	r1, #1
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001c36:	087a      	lsrs	r2, r7, #1
 8001c38:	401c      	ands	r4, r3
 8001c3a:	4039      	ands	r1, r7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	07e7      	lsls	r7, r4, #31
 8001c40:	4317      	orrs	r7, r2
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	e79e      	b.n	8001b84 <__aeabi_dsub+0x110>
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <__aeabi_dsub+0x36c>)
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	468a      	mov	sl, r1
 8001c4c:	18eb      	adds	r3, r5, r3
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d028      	beq.n	8001ca4 <__aeabi_dsub+0x230>
 8001c52:	4566      	cmp	r6, ip
 8001c54:	d02c      	beq.n	8001cb0 <__aeabi_dsub+0x23c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d05b      	beq.n	8001d12 <__aeabi_dsub+0x29e>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1ec>
 8001c5e:	e12c      	b.n	8001eba <__aeabi_dsub+0x446>
 8001c60:	465b      	mov	r3, fp
 8001c62:	4666      	mov	r6, ip
 8001c64:	075f      	lsls	r7, r3, #29
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	08dd      	lsrs	r5, r3, #3
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	432b      	orrs	r3, r5
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x200>
 8001c72:	e0e2      	b.n	8001e3a <__aeabi_dsub+0x3c6>
 8001c74:	2480      	movs	r4, #128	@ 0x80
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	432c      	orrs	r4, r5
 8001c7a:	0324      	lsls	r4, r4, #12
 8001c7c:	4d56      	ldr	r5, [pc, #344]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c7e:	0b24      	lsrs	r4, r4, #12
 8001c80:	e08c      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001c82:	4659      	mov	r1, fp
 8001c84:	4311      	orrs	r1, r2
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x216>
 8001c88:	e0d5      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x21e>
 8001c90:	e1b9      	b.n	8002006 <__aeabi_dsub+0x592>
 8001c92:	42bb      	cmp	r3, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x224>
 8001c96:	e1b1      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001c98:	2701      	movs	r7, #1
 8001c9a:	000b      	movs	r3, r1
 8001c9c:	2938      	cmp	r1, #56	@ 0x38
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x22e>
 8001ca0:	e740      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001ca2:	e72a      	b.n	8001afa <__aeabi_dsub+0x86>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	2701      	movs	r7, #1
 8001ca8:	4079      	eors	r1, r7
 8001caa:	468c      	mov	ip, r1
 8001cac:	4566      	cmp	r6, ip
 8001cae:	d1d2      	bne.n	8001c56 <__aeabi_dsub+0x1e2>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x242>
 8001cb4:	e0c5      	b.n	8001e42 <__aeabi_dsub+0x3ce>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x248>
 8001cba:	e155      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	0025      	movs	r5, r4
 8001cc0:	4305      	orrs	r5, r0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x252>
 8001cc4:	e212      	b.n	80020ec <__aeabi_dsub+0x678>
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	468c      	mov	ip, r1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x25c>
 8001cce:	e249      	b.n	8002164 <__aeabi_dsub+0x6f0>
 8001cd0:	4d41      	ldr	r5, [pc, #260]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001cd2:	42ab      	cmp	r3, r5
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x264>
 8001cd6:	e28f      	b.n	80021f8 <__aeabi_dsub+0x784>
 8001cd8:	2701      	movs	r7, #1
 8001cda:	2938      	cmp	r1, #56	@ 0x38
 8001cdc:	dc11      	bgt.n	8001d02 <__aeabi_dsub+0x28e>
 8001cde:	4663      	mov	r3, ip
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x272>
 8001ce4:	e25b      	b.n	800219e <__aeabi_dsub+0x72a>
 8001ce6:	4661      	mov	r1, ip
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0027      	movs	r7, r4
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	0005      	movs	r5, r0
 8001cf0:	4098      	lsls	r0, r3
 8001cf2:	409f      	lsls	r7, r3
 8001cf4:	40cd      	lsrs	r5, r1
 8001cf6:	1e43      	subs	r3, r0, #1
 8001cf8:	4198      	sbcs	r0, r3
 8001cfa:	40cc      	lsrs	r4, r1
 8001cfc:	432f      	orrs	r7, r5
 8001cfe:	4307      	orrs	r7, r0
 8001d00:	44a3      	add	fp, r4
 8001d02:	18bf      	adds	r7, r7, r2
 8001d04:	4297      	cmp	r7, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	445a      	add	r2, fp
 8001d0c:	0014      	movs	r4, r2
 8001d0e:	464d      	mov	r5, r9
 8001d10:	e787      	b.n	8001c22 <__aeabi_dsub+0x1ae>
 8001d12:	4f34      	ldr	r7, [pc, #208]	@ (8001de4 <__aeabi_dsub+0x370>)
 8001d14:	1c6b      	adds	r3, r5, #1
 8001d16:	423b      	tst	r3, r7
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2a8>
 8001d1a:	e0b6      	b.n	8001e8a <__aeabi_dsub+0x416>
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	0023      	movs	r3, r4
 8001d20:	4311      	orrs	r1, r2
 8001d22:	000f      	movs	r7, r1
 8001d24:	4303      	orrs	r3, r0
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dsub+0x2b8>
 8001d2a:	e126      	b.n	8001f7a <__aeabi_dsub+0x506>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x2be>
 8001d30:	e1c0      	b.n	80020b4 <__aeabi_dsub+0x640>
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x2c4>
 8001d36:	e0a1      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001d38:	1a83      	subs	r3, r0, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4540      	cmp	r0, r8
 8001d40:	41ad      	sbcs	r5, r5
 8001d42:	1ae3      	subs	r3, r4, r3
 8001d44:	426d      	negs	r5, r5
 8001d46:	1b5b      	subs	r3, r3, r5
 8001d48:	2580      	movs	r5, #128	@ 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	422b      	tst	r3, r5
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2de>
 8001d50:	e14b      	b.n	8001fea <__aeabi_dsub+0x576>
 8001d52:	465b      	mov	r3, fp
 8001d54:	1a10      	subs	r0, r2, r0
 8001d56:	4282      	cmp	r2, r0
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b1c      	subs	r4, r3, r4
 8001d5c:	0007      	movs	r7, r0
 8001d5e:	2601      	movs	r6, #1
 8001d60:	4663      	mov	r3, ip
 8001d62:	4252      	negs	r2, r2
 8001d64:	1aa4      	subs	r4, r4, r2
 8001d66:	4327      	orrs	r7, r4
 8001d68:	401e      	ands	r6, r3
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x2fc>
 8001d6e:	e142      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001d70:	422c      	tst	r4, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x302>
 8001d74:	e26d      	b.n	8002252 <__aeabi_dsub+0x7de>
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001d78:	2501      	movs	r5, #1
 8001d7a:	401c      	ands	r4, r3
 8001d7c:	e71b      	b.n	8001bb6 <__aeabi_dsub+0x142>
 8001d7e:	42bd      	cmp	r5, r7
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x310>
 8001d82:	e13b      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001d84:	2701      	movs	r7, #1
 8001d86:	2b38      	cmp	r3, #56	@ 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x318>
 8001d8a:	e745      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8001d8c:	2780      	movs	r7, #128	@ 0x80
 8001d8e:	4659      	mov	r1, fp
 8001d90:	043f      	lsls	r7, r7, #16
 8001d92:	4339      	orrs	r1, r7
 8001d94:	468b      	mov	fp, r1
 8001d96:	e72a      	b.n	8001bee <__aeabi_dsub+0x17a>
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2700      	movs	r7, #0
 8001d9c:	052d      	lsls	r5, r5, #20
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	07f6      	lsls	r6, r6, #31
 8001da2:	4335      	orrs	r5, r6
 8001da4:	0038      	movs	r0, r7
 8001da6:	0029      	movs	r1, r5
 8001da8:	b003      	add	sp, #12
 8001daa:	bcf0      	pop	{r4, r5, r6, r7}
 8001dac:	46bb      	mov	fp, r7
 8001dae:	46b2      	mov	sl, r6
 8001db0:	46a9      	mov	r9, r5
 8001db2:	46a0      	mov	r8, r4
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db6:	077b      	lsls	r3, r7, #29
 8001db8:	d004      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dba:	230f      	movs	r3, #15
 8001dbc:	403b      	ands	r3, r7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dc2:	e6e7      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001dc4:	002b      	movs	r3, r5
 8001dc6:	08f8      	lsrs	r0, r7, #3
 8001dc8:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001dca:	0767      	lsls	r7, r4, #29
 8001dcc:	4307      	orrs	r7, r0
 8001dce:	08e5      	lsrs	r5, r4, #3
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x362>
 8001dd4:	e74a      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001dd6:	e0a5      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	ff7fffff 	.word	0xff7fffff
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	0038      	movs	r0, r7
 8001dea:	f000 fafd 	bl	80023e8 <__clzsi2>
 8001dee:	0003      	movs	r3, r0
 8001df0:	3318      	adds	r3, #24
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dsub+0x384>
 8001df6:	e6a7      	b.n	8001b48 <__aeabi_dsub+0xd4>
 8001df8:	003a      	movs	r2, r7
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	4082      	lsls	r2, r0
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dsub+0x390>
 8001e02:	e08a      	b.n	8001f1a <__aeabi_dsub+0x4a6>
 8001e04:	1b5b      	subs	r3, r3, r5
 8001e06:	1c58      	adds	r0, r3, #1
 8001e08:	281f      	cmp	r0, #31
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dsub+0x39a>
 8001e0c:	e1d8      	b.n	80021c0 <__aeabi_dsub+0x74c>
 8001e0e:	0017      	movs	r7, r2
 8001e10:	3b1f      	subs	r3, #31
 8001e12:	40df      	lsrs	r7, r3
 8001e14:	2820      	cmp	r0, #32
 8001e16:	d005      	beq.n	8001e24 <__aeabi_dsub+0x3b0>
 8001e18:	2340      	movs	r3, #64	@ 0x40
 8001e1a:	1a1b      	subs	r3, r3, r0
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	1e53      	subs	r3, r2, #1
 8001e20:	419a      	sbcs	r2, r3
 8001e22:	4317      	orrs	r7, r2
 8001e24:	2500      	movs	r5, #0
 8001e26:	2f00      	cmp	r7, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x3b8>
 8001e2a:	e0e5      	b.n	8001ff8 <__aeabi_dsub+0x584>
 8001e2c:	077b      	lsls	r3, r7, #29
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dsub+0x3be>
 8001e30:	e6ab      	b.n	8001b8a <__aeabi_dsub+0x116>
 8001e32:	002c      	movs	r4, r5
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001e36:	08c0      	lsrs	r0, r0, #3
 8001e38:	e7c6      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001e3a:	2700      	movs	r7, #0
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	4dd1      	ldr	r5, [pc, #836]	@ (8002184 <__aeabi_dsub+0x710>)
 8001e40:	e7ac      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001e42:	4fd1      	ldr	r7, [pc, #836]	@ (8002188 <__aeabi_dsub+0x714>)
 8001e44:	1c6b      	adds	r3, r5, #1
 8001e46:	423b      	tst	r3, r7
 8001e48:	d171      	bne.n	8001f2e <__aeabi_dsub+0x4ba>
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x3e0>
 8001e52:	e14e      	b.n	80020f2 <__aeabi_dsub+0x67e>
 8001e54:	4657      	mov	r7, sl
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x3e8>
 8001e5a:	e1b5      	b.n	80021c8 <__aeabi_dsub+0x754>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d00d      	beq.n	8001e7c <__aeabi_dsub+0x408>
 8001e60:	1883      	adds	r3, r0, r2
 8001e62:	4283      	cmp	r3, r0
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	445c      	add	r4, fp
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0222      	lsls	r2, r4, #8
 8001e6e:	d500      	bpl.n	8001e72 <__aeabi_dsub+0x3fe>
 8001e70:	e1c8      	b.n	8002204 <__aeabi_dsub+0x790>
 8001e72:	001f      	movs	r7, r3
 8001e74:	4698      	mov	r8, r3
 8001e76:	4327      	orrs	r7, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x408>
 8001e7a:	e0bc      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0767      	lsls	r7, r4, #29
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	431f      	orrs	r7, r3
 8001e84:	08e5      	lsrs	r5, r4, #3
 8001e86:	2300      	movs	r3, #0
 8001e88:	e04c      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001e8a:	1a83      	subs	r3, r0, r2
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	465b      	mov	r3, fp
 8001e90:	4540      	cmp	r0, r8
 8001e92:	41bf      	sbcs	r7, r7
 8001e94:	1ae3      	subs	r3, r4, r3
 8001e96:	427f      	negs	r7, r7
 8001e98:	1bdb      	subs	r3, r3, r7
 8001e9a:	021f      	lsls	r7, r3, #8
 8001e9c:	d47c      	bmi.n	8001f98 <__aeabi_dsub+0x524>
 8001e9e:	4647      	mov	r7, r8
 8001ea0:	431f      	orrs	r7, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x432>
 8001ea4:	e0a6      	b.n	8001ff4 <__aeabi_dsub+0x580>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	4647      	mov	r7, r8
 8001eaa:	e645      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001eac:	4cb7      	ldr	r4, [pc, #732]	@ (800218c <__aeabi_dsub+0x718>)
 8001eae:	1aed      	subs	r5, r5, r3
 8001eb0:	4014      	ands	r4, r2
 8001eb2:	077b      	lsls	r3, r7, #29
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x444>
 8001eb6:	e780      	b.n	8001dba <__aeabi_dsub+0x346>
 8001eb8:	e784      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001eba:	464b      	mov	r3, r9
 8001ebc:	0025      	movs	r5, r4
 8001ebe:	4305      	orrs	r5, r0
 8001ec0:	d066      	beq.n	8001f90 <__aeabi_dsub+0x51c>
 8001ec2:	1e5f      	subs	r7, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x456>
 8001ec8:	e0fc      	b.n	80020c4 <__aeabi_dsub+0x650>
 8001eca:	4dae      	ldr	r5, [pc, #696]	@ (8002184 <__aeabi_dsub+0x710>)
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x45e>
 8001ed0:	e15e      	b.n	8002190 <__aeabi_dsub+0x71c>
 8001ed2:	4666      	mov	r6, ip
 8001ed4:	2f38      	cmp	r7, #56	@ 0x38
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dsub+0x466>
 8001ed8:	e0b4      	b.n	8002044 <__aeabi_dsub+0x5d0>
 8001eda:	2001      	movs	r0, #1
 8001edc:	1a17      	subs	r7, r2, r0
 8001ede:	42ba      	cmp	r2, r7
 8001ee0:	4192      	sbcs	r2, r2
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	1a9c      	subs	r4, r3, r2
 8001eea:	e620      	b.n	8001b2e <__aeabi_dsub+0xba>
 8001eec:	0767      	lsls	r7, r4, #29
 8001eee:	08c0      	lsrs	r0, r0, #3
 8001ef0:	4307      	orrs	r7, r0
 8001ef2:	08e5      	lsrs	r5, r4, #3
 8001ef4:	e6ba      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001ef6:	001f      	movs	r7, r3
 8001ef8:	4659      	mov	r1, fp
 8001efa:	3f20      	subs	r7, #32
 8001efc:	40f9      	lsrs	r1, r7
 8001efe:	000f      	movs	r7, r1
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d005      	beq.n	8001f10 <__aeabi_dsub+0x49c>
 8001f04:	2140      	movs	r1, #64	@ 0x40
 8001f06:	1acb      	subs	r3, r1, r3
 8001f08:	4659      	mov	r1, fp
 8001f0a:	4099      	lsls	r1, r3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	4653      	mov	r3, sl
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	4193      	sbcs	r3, r2
 8001f16:	431f      	orrs	r7, r3
 8001f18:	e604      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001f1a:	1aeb      	subs	r3, r5, r3
 8001f1c:	4d9b      	ldr	r5, [pc, #620]	@ (800218c <__aeabi_dsub+0x718>)
 8001f1e:	4015      	ands	r5, r2
 8001f20:	076f      	lsls	r7, r5, #29
 8001f22:	08ed      	lsrs	r5, r5, #3
 8001f24:	032c      	lsls	r4, r5, #12
 8001f26:	055d      	lsls	r5, r3, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d6d      	lsrs	r5, r5, #21
 8001f2c:	e736      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f2e:	4d95      	ldr	r5, [pc, #596]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x4c2>
 8001f34:	e0d6      	b.n	80020e4 <__aeabi_dsub+0x670>
 8001f36:	1882      	adds	r2, r0, r2
 8001f38:	0021      	movs	r1, r4
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	4180      	sbcs	r0, r0
 8001f3e:	4459      	add	r1, fp
 8001f40:	4240      	negs	r0, r0
 8001f42:	1808      	adds	r0, r1, r0
 8001f44:	07c7      	lsls	r7, r0, #31
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	4317      	orrs	r7, r2
 8001f4a:	0844      	lsrs	r4, r0, #1
 8001f4c:	0752      	lsls	r2, r2, #29
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x4de>
 8001f50:	e185      	b.n	800225e <__aeabi_dsub+0x7ea>
 8001f52:	220f      	movs	r2, #15
 8001f54:	001d      	movs	r5, r3
 8001f56:	403a      	ands	r2, r7
 8001f58:	2a04      	cmp	r2, #4
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x4ea>
 8001f5c:	e61a      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001f5e:	08ff      	lsrs	r7, r7, #3
 8001f60:	0764      	lsls	r4, r4, #29
 8001f62:	4327      	orrs	r7, r4
 8001f64:	0905      	lsrs	r5, r0, #4
 8001f66:	e7dd      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001f68:	465b      	mov	r3, fp
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08dd      	lsrs	r5, r3, #3
 8001f72:	e67b      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001f74:	2700      	movs	r7, #0
 8001f76:	2400      	movs	r4, #0
 8001f78:	e710      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x50c>
 8001f7e:	e0d6      	b.n	800212e <__aeabi_dsub+0x6ba>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x512>
 8001f84:	e12f      	b.n	80021e6 <__aeabi_dsub+0x772>
 8001f86:	2480      	movs	r4, #128	@ 0x80
 8001f88:	2600      	movs	r6, #0
 8001f8a:	4d7e      	ldr	r5, [pc, #504]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	e705      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f90:	4666      	mov	r6, ip
 8001f92:	465c      	mov	r4, fp
 8001f94:	08d0      	lsrs	r0, r2, #3
 8001f96:	e717      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001f98:	465b      	mov	r3, fp
 8001f9a:	1a17      	subs	r7, r2, r0
 8001f9c:	42ba      	cmp	r2, r7
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1b1c      	subs	r4, r3, r4
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1aa4      	subs	r4, r4, r2
 8001faa:	401e      	ands	r6, r3
 8001fac:	e5c4      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001fae:	1883      	adds	r3, r0, r2
 8001fb0:	4283      	cmp	r3, r0
 8001fb2:	4180      	sbcs	r0, r0
 8001fb4:	445c      	add	r4, fp
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	1825      	adds	r5, r4, r0
 8001fba:	022a      	lsls	r2, r5, #8
 8001fbc:	d400      	bmi.n	8001fc0 <__aeabi_dsub+0x54c>
 8001fbe:	e0da      	b.n	8002176 <__aeabi_dsub+0x702>
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <__aeabi_dsub+0x718>)
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4015      	ands	r5, r2
 8001fc6:	07ea      	lsls	r2, r5, #31
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	0869      	lsrs	r1, r5, #1
 8001fcc:	075b      	lsls	r3, r3, #29
 8001fce:	d400      	bmi.n	8001fd2 <__aeabi_dsub+0x55e>
 8001fd0:	e14a      	b.n	8002268 <__aeabi_dsub+0x7f4>
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x568>
 8001fda:	e0fc      	b.n	80021d6 <__aeabi_dsub+0x762>
 8001fdc:	1d17      	adds	r7, r2, #4
 8001fde:	4297      	cmp	r7, r2
 8001fe0:	41a4      	sbcs	r4, r4
 8001fe2:	4264      	negs	r4, r4
 8001fe4:	2502      	movs	r5, #2
 8001fe6:	1864      	adds	r4, r4, r1
 8001fe8:	e6ec      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001fea:	4647      	mov	r7, r8
 8001fec:	001c      	movs	r4, r3
 8001fee:	431f      	orrs	r7, r3
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 8001ff2:	e743      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	e6cf      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001ffc:	08c0      	lsrs	r0, r0, #3
 8001ffe:	0767      	lsls	r7, r4, #29
 8002000:	4307      	orrs	r7, r0
 8002002:	08e5      	lsrs	r5, r4, #3
 8002004:	e632      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002006:	1a87      	subs	r7, r0, r2
 8002008:	465b      	mov	r3, fp
 800200a:	42b8      	cmp	r0, r7
 800200c:	4180      	sbcs	r0, r0
 800200e:	1ae4      	subs	r4, r4, r3
 8002010:	4240      	negs	r0, r0
 8002012:	1a24      	subs	r4, r4, r0
 8002014:	0223      	lsls	r3, r4, #8
 8002016:	d428      	bmi.n	800206a <__aeabi_dsub+0x5f6>
 8002018:	0763      	lsls	r3, r4, #29
 800201a:	08ff      	lsrs	r7, r7, #3
 800201c:	431f      	orrs	r7, r3
 800201e:	08e5      	lsrs	r5, r4, #3
 8002020:	2301      	movs	r3, #1
 8002022:	e77f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5b6>
 8002028:	e673      	b.n	8001d12 <__aeabi_dsub+0x29e>
 800202a:	464b      	mov	r3, r9
 800202c:	1b5f      	subs	r7, r3, r5
 800202e:	003b      	movs	r3, r7
 8002030:	2d00      	cmp	r5, #0
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5c2>
 8002034:	e742      	b.n	8001ebc <__aeabi_dsub+0x448>
 8002036:	2f38      	cmp	r7, #56	@ 0x38
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0x5c8>
 800203a:	e0ec      	b.n	8002216 <__aeabi_dsub+0x7a2>
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	000e      	movs	r6, r1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431c      	orrs	r4, r3
 8002044:	2f1f      	cmp	r7, #31
 8002046:	dc25      	bgt.n	8002094 <__aeabi_dsub+0x620>
 8002048:	2520      	movs	r5, #32
 800204a:	0023      	movs	r3, r4
 800204c:	1bed      	subs	r5, r5, r7
 800204e:	0001      	movs	r1, r0
 8002050:	40a8      	lsls	r0, r5
 8002052:	40ab      	lsls	r3, r5
 8002054:	40f9      	lsrs	r1, r7
 8002056:	1e45      	subs	r5, r0, #1
 8002058:	41a8      	sbcs	r0, r5
 800205a:	430b      	orrs	r3, r1
 800205c:	40fc      	lsrs	r4, r7
 800205e:	4318      	orrs	r0, r3
 8002060:	465b      	mov	r3, fp
 8002062:	1b1b      	subs	r3, r3, r4
 8002064:	469b      	mov	fp, r3
 8002066:	e739      	b.n	8001edc <__aeabi_dsub+0x468>
 8002068:	4666      	mov	r6, ip
 800206a:	2501      	movs	r5, #1
 800206c:	e562      	b.n	8001b34 <__aeabi_dsub+0xc0>
 800206e:	001f      	movs	r7, r3
 8002070:	4659      	mov	r1, fp
 8002072:	3f20      	subs	r7, #32
 8002074:	40f9      	lsrs	r1, r7
 8002076:	468c      	mov	ip, r1
 8002078:	2b20      	cmp	r3, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x614>
 800207c:	2740      	movs	r7, #64	@ 0x40
 800207e:	4659      	mov	r1, fp
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4099      	lsls	r1, r3
 8002084:	430a      	orrs	r2, r1
 8002086:	4692      	mov	sl, r2
 8002088:	4657      	mov	r7, sl
 800208a:	1e7b      	subs	r3, r7, #1
 800208c:	419f      	sbcs	r7, r3
 800208e:	4663      	mov	r3, ip
 8002090:	431f      	orrs	r7, r3
 8002092:	e5c1      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8002094:	003b      	movs	r3, r7
 8002096:	0025      	movs	r5, r4
 8002098:	3b20      	subs	r3, #32
 800209a:	40dd      	lsrs	r5, r3
 800209c:	2f20      	cmp	r7, #32
 800209e:	d004      	beq.n	80020aa <__aeabi_dsub+0x636>
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	1bdb      	subs	r3, r3, r7
 80020a4:	409c      	lsls	r4, r3
 80020a6:	4320      	orrs	r0, r4
 80020a8:	4680      	mov	r8, r0
 80020aa:	4640      	mov	r0, r8
 80020ac:	1e43      	subs	r3, r0, #1
 80020ae:	4198      	sbcs	r0, r3
 80020b0:	4328      	orrs	r0, r5
 80020b2:	e713      	b.n	8001edc <__aeabi_dsub+0x468>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d09d      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 80020b8:	2601      	movs	r6, #1
 80020ba:	4663      	mov	r3, ip
 80020bc:	465c      	mov	r4, fp
 80020be:	4690      	mov	r8, r2
 80020c0:	401e      	ands	r6, r3
 80020c2:	e6db      	b.n	8001e7c <__aeabi_dsub+0x408>
 80020c4:	1a17      	subs	r7, r2, r0
 80020c6:	465b      	mov	r3, fp
 80020c8:	42ba      	cmp	r2, r7
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	1b1c      	subs	r4, r3, r4
 80020ce:	4252      	negs	r2, r2
 80020d0:	1aa4      	subs	r4, r4, r2
 80020d2:	0223      	lsls	r3, r4, #8
 80020d4:	d4c8      	bmi.n	8002068 <__aeabi_dsub+0x5f4>
 80020d6:	0763      	lsls	r3, r4, #29
 80020d8:	08ff      	lsrs	r7, r7, #3
 80020da:	431f      	orrs	r7, r3
 80020dc:	4666      	mov	r6, ip
 80020de:	2301      	movs	r3, #1
 80020e0:	08e5      	lsrs	r5, r4, #3
 80020e2:	e71f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80020e4:	001d      	movs	r5, r3
 80020e6:	2400      	movs	r4, #0
 80020e8:	2700      	movs	r7, #0
 80020ea:	e657      	b.n	8001d9c <__aeabi_dsub+0x328>
 80020ec:	465c      	mov	r4, fp
 80020ee:	08d0      	lsrs	r0, r2, #3
 80020f0:	e66a      	b.n	8001dc8 <__aeabi_dsub+0x354>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x684>
 80020f6:	e737      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 80020f8:	4653      	mov	r3, sl
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0767      	lsls	r7, r4, #29
 80020fe:	4307      	orrs	r7, r0
 8002100:	08e5      	lsrs	r5, r4, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x694>
 8002106:	e5b1      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	421d      	tst	r5, r3
 800210e:	d008      	beq.n	8002122 <__aeabi_dsub+0x6ae>
 8002110:	4659      	mov	r1, fp
 8002112:	08c8      	lsrs	r0, r1, #3
 8002114:	4218      	tst	r0, r3
 8002116:	d104      	bne.n	8002122 <__aeabi_dsub+0x6ae>
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	0749      	lsls	r1, r1, #29
 800211c:	430a      	orrs	r2, r1
 800211e:	0017      	movs	r7, r2
 8002120:	0005      	movs	r5, r0
 8002122:	0f7b      	lsrs	r3, r7, #29
 8002124:	00ff      	lsls	r7, r7, #3
 8002126:	08ff      	lsrs	r7, r7, #3
 8002128:	075b      	lsls	r3, r3, #29
 800212a:	431f      	orrs	r7, r3
 800212c:	e59e      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	0763      	lsls	r3, r4, #29
 8002132:	4318      	orrs	r0, r3
 8002134:	08e5      	lsrs	r5, r4, #3
 8002136:	2900      	cmp	r1, #0
 8002138:	d053      	beq.n	80021e2 <__aeabi_dsub+0x76e>
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	421d      	tst	r5, r3
 8002140:	d00a      	beq.n	8002158 <__aeabi_dsub+0x6e4>
 8002142:	4659      	mov	r1, fp
 8002144:	08cc      	lsrs	r4, r1, #3
 8002146:	421c      	tst	r4, r3
 8002148:	d106      	bne.n	8002158 <__aeabi_dsub+0x6e4>
 800214a:	2601      	movs	r6, #1
 800214c:	4663      	mov	r3, ip
 800214e:	0025      	movs	r5, r4
 8002150:	08d0      	lsrs	r0, r2, #3
 8002152:	0749      	lsls	r1, r1, #29
 8002154:	4308      	orrs	r0, r1
 8002156:	401e      	ands	r6, r3
 8002158:	0f47      	lsrs	r7, r0, #29
 800215a:	00c0      	lsls	r0, r0, #3
 800215c:	08c0      	lsrs	r0, r0, #3
 800215e:	077f      	lsls	r7, r7, #29
 8002160:	4307      	orrs	r7, r0
 8002162:	e583      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002164:	1883      	adds	r3, r0, r2
 8002166:	4293      	cmp	r3, r2
 8002168:	4192      	sbcs	r2, r2
 800216a:	445c      	add	r4, fp
 800216c:	4252      	negs	r2, r2
 800216e:	18a5      	adds	r5, r4, r2
 8002170:	022a      	lsls	r2, r5, #8
 8002172:	d500      	bpl.n	8002176 <__aeabi_dsub+0x702>
 8002174:	e724      	b.n	8001fc0 <__aeabi_dsub+0x54c>
 8002176:	076f      	lsls	r7, r5, #29
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	431f      	orrs	r7, r3
 800217c:	08ed      	lsrs	r5, r5, #3
 800217e:	2301      	movs	r3, #1
 8002180:	e6d0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff
 8002188:	000007fe 	.word	0x000007fe
 800218c:	ff7fffff 	.word	0xff7fffff
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4666      	mov	r6, ip
 8002198:	4317      	orrs	r7, r2
 800219a:	08dd      	lsrs	r5, r3, #3
 800219c:	e566      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800219e:	0025      	movs	r5, r4
 80021a0:	3b20      	subs	r3, #32
 80021a2:	40dd      	lsrs	r5, r3
 80021a4:	4663      	mov	r3, ip
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d005      	beq.n	80021b6 <__aeabi_dsub+0x742>
 80021aa:	2340      	movs	r3, #64	@ 0x40
 80021ac:	4661      	mov	r1, ip
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	409c      	lsls	r4, r3
 80021b2:	4320      	orrs	r0, r4
 80021b4:	4680      	mov	r8, r0
 80021b6:	4647      	mov	r7, r8
 80021b8:	1e7b      	subs	r3, r7, #1
 80021ba:	419f      	sbcs	r7, r3
 80021bc:	432f      	orrs	r7, r5
 80021be:	e5a0      	b.n	8001d02 <__aeabi_dsub+0x28e>
 80021c0:	2120      	movs	r1, #32
 80021c2:	2700      	movs	r7, #0
 80021c4:	1a09      	subs	r1, r1, r0
 80021c6:	e4d2      	b.n	8001b6e <__aeabi_dsub+0xfa>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x75a>
 80021cc:	e713      	b.n	8001ff6 <__aeabi_dsub+0x582>
 80021ce:	465c      	mov	r4, fp
 80021d0:	0017      	movs	r7, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	e5f6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 80021d6:	08d7      	lsrs	r7, r2, #3
 80021d8:	0749      	lsls	r1, r1, #29
 80021da:	2302      	movs	r3, #2
 80021dc:	430f      	orrs	r7, r1
 80021de:	092d      	lsrs	r5, r5, #4
 80021e0:	e6a0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80021e2:	0007      	movs	r7, r0
 80021e4:	e542      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021e6:	465b      	mov	r3, fp
 80021e8:	2601      	movs	r6, #1
 80021ea:	075f      	lsls	r7, r3, #29
 80021ec:	08dd      	lsrs	r5, r3, #3
 80021ee:	4663      	mov	r3, ip
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	4317      	orrs	r7, r2
 80021f4:	401e      	ands	r6, r3
 80021f6:	e539      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021f8:	465b      	mov	r3, fp
 80021fa:	08d2      	lsrs	r2, r2, #3
 80021fc:	075f      	lsls	r7, r3, #29
 80021fe:	4317      	orrs	r7, r2
 8002200:	08dd      	lsrs	r5, r3, #3
 8002202:	e533      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <__aeabi_dsub+0x80c>)
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	4022      	ands	r2, r4
 800220a:	0757      	lsls	r7, r2, #29
 800220c:	0252      	lsls	r2, r2, #9
 800220e:	2501      	movs	r5, #1
 8002210:	431f      	orrs	r7, r3
 8002212:	0b14      	lsrs	r4, r2, #12
 8002214:	e5c2      	b.n	8001d9c <__aeabi_dsub+0x328>
 8002216:	000e      	movs	r6, r1
 8002218:	2001      	movs	r0, #1
 800221a:	e65f      	b.n	8001edc <__aeabi_dsub+0x468>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <__aeabi_dsub+0x7c8>
 8002220:	464b      	mov	r3, r9
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	469c      	mov	ip, r3
 8002226:	2d00      	cmp	r5, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x7b8>
 800222a:	e548      	b.n	8001cbe <__aeabi_dsub+0x24a>
 800222c:	2701      	movs	r7, #1
 800222e:	2b38      	cmp	r3, #56	@ 0x38
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x7c0>
 8002232:	e566      	b.n	8001d02 <__aeabi_dsub+0x28e>
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	431c      	orrs	r4, r3
 800223a:	e550      	b.n	8001cde <__aeabi_dsub+0x26a>
 800223c:	1c6b      	adds	r3, r5, #1
 800223e:	4d11      	ldr	r5, [pc, #68]	@ (8002284 <__aeabi_dsub+0x810>)
 8002240:	422b      	tst	r3, r5
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x7d2>
 8002244:	e673      	b.n	8001f2e <__aeabi_dsub+0x4ba>
 8002246:	4659      	mov	r1, fp
 8002248:	0023      	movs	r3, r4
 800224a:	4311      	orrs	r1, r2
 800224c:	468a      	mov	sl, r1
 800224e:	4303      	orrs	r3, r0
 8002250:	e600      	b.n	8001e54 <__aeabi_dsub+0x3e0>
 8002252:	0767      	lsls	r7, r4, #29
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	2300      	movs	r3, #0
 8002258:	4307      	orrs	r7, r0
 800225a:	08e5      	lsrs	r5, r4, #3
 800225c:	e662      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 800225e:	0764      	lsls	r4, r4, #29
 8002260:	08ff      	lsrs	r7, r7, #3
 8002262:	4327      	orrs	r7, r4
 8002264:	0905      	lsrs	r5, r0, #4
 8002266:	e65d      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	0749      	lsls	r1, r1, #29
 800226c:	4311      	orrs	r1, r2
 800226e:	000f      	movs	r7, r1
 8002270:	2302      	movs	r3, #2
 8002272:	092d      	lsrs	r5, r5, #4
 8002274:	e656      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002276:	0007      	movs	r7, r0
 8002278:	e5a4      	b.n	8001dc4 <__aeabi_dsub+0x350>
 800227a:	0038      	movs	r0, r7
 800227c:	e48f      	b.n	8001b9e <__aeabi_dsub+0x12a>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	000007fe 	.word	0x000007fe

08002288 <__aeabi_dcmpun>:
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	46c6      	mov	lr, r8
 800228c:	031e      	lsls	r6, r3, #12
 800228e:	0b36      	lsrs	r6, r6, #12
 8002290:	46b0      	mov	r8, r6
 8002292:	4e0d      	ldr	r6, [pc, #52]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 8002294:	030c      	lsls	r4, r1, #12
 8002296:	004d      	lsls	r5, r1, #1
 8002298:	005f      	lsls	r7, r3, #1
 800229a:	b500      	push	{lr}
 800229c:	0b24      	lsrs	r4, r4, #12
 800229e:	0d6d      	lsrs	r5, r5, #21
 80022a0:	0d7f      	lsrs	r7, r7, #21
 80022a2:	42b5      	cmp	r5, r6
 80022a4:	d00b      	beq.n	80022be <__aeabi_dcmpun+0x36>
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	428f      	cmp	r7, r1
 80022ac:	d104      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022ae:	4646      	mov	r6, r8
 80022b0:	4316      	orrs	r6, r2
 80022b2:	0030      	movs	r0, r6
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	4198      	sbcs	r0, r3
 80022b8:	bc80      	pop	{r7}
 80022ba:	46b8      	mov	r8, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	4304      	orrs	r4, r0
 80022c0:	2001      	movs	r0, #1
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1f8      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022c6:	e7ee      	b.n	80022a6 <__aeabi_dcmpun+0x1e>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__aeabi_d2iz>:
 80022cc:	000b      	movs	r3, r1
 80022ce:	0002      	movs	r2, r0
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d16      	ldr	r5, [pc, #88]	@ (800232c <__aeabi_d2iz+0x60>)
 80022d4:	030c      	lsls	r4, r1, #12
 80022d6:	b082      	sub	sp, #8
 80022d8:	0049      	lsls	r1, r1, #1
 80022da:	2000      	movs	r0, #0
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	0b24      	lsrs	r4, r4, #12
 80022e2:	0d49      	lsrs	r1, r1, #21
 80022e4:	0fde      	lsrs	r6, r3, #31
 80022e6:	42a9      	cmp	r1, r5
 80022e8:	dd04      	ble.n	80022f4 <__aeabi_d2iz+0x28>
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <__aeabi_d2iz+0x64>)
 80022ec:	4281      	cmp	r1, r0
 80022ee:	dd03      	ble.n	80022f8 <__aeabi_d2iz+0x2c>
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <__aeabi_d2iz+0x68>)
 80022f2:	18f0      	adds	r0, r6, r3
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	2080      	movs	r0, #128	@ 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4320      	orrs	r0, r4
 80022fe:	4c0e      	ldr	r4, [pc, #56]	@ (8002338 <__aeabi_d2iz+0x6c>)
 8002300:	1a64      	subs	r4, r4, r1
 8002302:	2c1f      	cmp	r4, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x4c>
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <__aeabi_d2iz+0x70>)
 8002308:	1a5b      	subs	r3, r3, r1
 800230a:	40d8      	lsrs	r0, r3
 800230c:	0003      	movs	r3, r0
 800230e:	4258      	negs	r0, r3
 8002310:	2e00      	cmp	r6, #0
 8002312:	d1ef      	bne.n	80022f4 <__aeabi_d2iz+0x28>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ed      	b.n	80022f4 <__aeabi_d2iz+0x28>
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <__aeabi_d2iz+0x74>)
 800231a:	9a00      	ldr	r2, [sp, #0]
 800231c:	469c      	mov	ip, r3
 800231e:	0003      	movs	r3, r0
 8002320:	4461      	add	r1, ip
 8002322:	408b      	lsls	r3, r1
 8002324:	40e2      	lsrs	r2, r4
 8002326:	4313      	orrs	r3, r2
 8002328:	e7f1      	b.n	800230e <__aeabi_d2iz+0x42>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	000003fe 	.word	0x000003fe
 8002330:	0000041d 	.word	0x0000041d
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	00000433 	.word	0x00000433
 800233c:	00000413 	.word	0x00000413
 8002340:	fffffbed 	.word	0xfffffbed

08002344 <__aeabi_i2d>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2800      	cmp	r0, #0
 8002348:	d016      	beq.n	8002378 <__aeabi_i2d+0x34>
 800234a:	17c3      	asrs	r3, r0, #31
 800234c:	18c5      	adds	r5, r0, r3
 800234e:	405d      	eors	r5, r3
 8002350:	0fc4      	lsrs	r4, r0, #31
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f848 	bl	80023e8 <__clzsi2>
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <__aeabi_i2d+0x58>)
 800235a:	1a1b      	subs	r3, r3, r0
 800235c:	055b      	lsls	r3, r3, #21
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	280a      	cmp	r0, #10
 8002362:	dc14      	bgt.n	800238e <__aeabi_i2d+0x4a>
 8002364:	0002      	movs	r2, r0
 8002366:	002e      	movs	r6, r5
 8002368:	3215      	adds	r2, #21
 800236a:	4096      	lsls	r6, r2
 800236c:	220b      	movs	r2, #11
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	40d5      	lsrs	r5, r2
 8002372:	032d      	lsls	r5, r5, #12
 8002374:	0b2d      	lsrs	r5, r5, #12
 8002376:	e003      	b.n	8002380 <__aeabi_i2d+0x3c>
 8002378:	2400      	movs	r4, #0
 800237a:	2300      	movs	r3, #0
 800237c:	2500      	movs	r5, #0
 800237e:	2600      	movs	r6, #0
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	432b      	orrs	r3, r5
 8002384:	07e4      	lsls	r4, r4, #31
 8002386:	4323      	orrs	r3, r4
 8002388:	0030      	movs	r0, r6
 800238a:	0019      	movs	r1, r3
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	380b      	subs	r0, #11
 8002390:	4085      	lsls	r5, r0
 8002392:	032d      	lsls	r5, r5, #12
 8002394:	2600      	movs	r6, #0
 8002396:	0b2d      	lsrs	r5, r5, #12
 8002398:	e7f2      	b.n	8002380 <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f81f 	bl	80023e8 <__clzsi2>
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <__aeabi_ui2d+0x44>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	280a      	cmp	r0, #10
 80023b4:	dc0f      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b6:	220b      	movs	r2, #11
 80023b8:	0021      	movs	r1, r4
 80023ba:	1a12      	subs	r2, r2, r0
 80023bc:	40d1      	lsrs	r1, r2
 80023be:	3015      	adds	r0, #21
 80023c0:	030a      	lsls	r2, r1, #12
 80023c2:	4084      	lsls	r4, r0
 80023c4:	0b12      	lsrs	r2, r2, #12
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	0312      	lsls	r2, r2, #12
 80023de:	2400      	movs	r4, #0
 80023e0:	0b12      	lsrs	r2, r2, #12
 80023e2:	e7f3      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e4:	0000041e 	.word	0x0000041e

080023e8 <__clzsi2>:
 80023e8:	211c      	movs	r1, #28
 80023ea:	2301      	movs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0xe>
 80023f2:	0c00      	lsrs	r0, r0, #16
 80023f4:	3910      	subs	r1, #16
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <__clzsi2+0x18>
 80023fc:	0a00      	lsrs	r0, r0, #8
 80023fe:	3908      	subs	r1, #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0x22>
 8002406:	0900      	lsrs	r0, r0, #4
 8002408:	3904      	subs	r1, #4
 800240a:	a202      	add	r2, pc, #8	@ (adr r2, 8002414 <__clzsi2+0x2c>)
 800240c:	5c10      	ldrb	r0, [r2, r0]
 800240e:	1840      	adds	r0, r0, r1
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	02020304 	.word	0x02020304
 8002418:	01010101 	.word	0x01010101
	...

<<<<<<< HEAD
08002908 <display_info>:
uint8_t total_screens;

uint32_t last_disp_tag_tick = 0;
  
void display_info()
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b093      	sub	sp, #76	@ 0x4c
 800290c:	af02      	add	r7, sp, #8
    UG_FillFrame(146, 20, 210, 56, C_BLACK);
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2338      	movs	r3, #56	@ 0x38
 8002914:	22d2      	movs	r2, #210	@ 0xd2
 8002916:	2114      	movs	r1, #20
 8002918:	2092      	movs	r0, #146	@ 0x92
 800291a:	f00c fdf9 	bl	800f510 <UG_FillFrame>
    uint16_t raw_volt_adc;
    char volt_msg[10];
    float battery_percentage;

    HAL_ADC_Start(&hadc);
 800291e:	4b4c      	ldr	r3, [pc, #304]	@ (8002a50 <display_info+0x148>)
 8002920:	0018      	movs	r0, r3
 8002922:	f001 fed5 	bl	80046d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002926:	2301      	movs	r3, #1
 8002928:	425a      	negs	r2, r3
 800292a:	4b49      	ldr	r3, [pc, #292]	@ (8002a50 <display_info+0x148>)
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f001 ff22 	bl	8004778 <HAL_ADC_PollForConversion>
    raw_volt_adc = HAL_ADC_GetValue(&hadc);
 8002934:	4b46      	ldr	r3, [pc, #280]	@ (8002a50 <display_info+0x148>)
 8002936:	0018      	movs	r0, r3
 8002938:	f001 ffb6 	bl	80048a8 <HAL_ADC_GetValue>
 800293c:	0002      	movs	r2, r0
 800293e:	213c      	movs	r1, #60	@ 0x3c
 8002940:	187b      	adds	r3, r7, r1
 8002942:	801a      	strh	r2, [r3, #0]

    // Convert ADC value to battery percentage (example calculation)
    battery_percentage = ((float)raw_volt_adc / 2730.0f) * 100.0f;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f7fe f879 	bl	8000a40 <__aeabi_ui2f>
 800294e:	1c03      	adds	r3, r0, #0
 8002950:	4940      	ldr	r1, [pc, #256]	@ (8002a54 <display_info+0x14c>)
 8002952:	1c18      	adds	r0, r3, #0
 8002954:	f7fd fe16 	bl	8000584 <__aeabi_fdiv>
 8002958:	1c03      	adds	r3, r0, #0
 800295a:	493f      	ldr	r1, [pc, #252]	@ (8002a58 <display_info+0x150>)
 800295c:	1c18      	adds	r0, r3, #0
 800295e:	f7fd ff31 	bl	80007c4 <__aeabi_fmul>
 8002962:	1c03      	adds	r3, r0, #0
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Format the battery percentage into a string
    sprintf(volt_msg, "BATT: %.0f%%", battery_percentage);
 8002966:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002968:	f7ff ff68 	bl	800283c <__aeabi_f2d>
 800296c:	0002      	movs	r2, r0
 800296e:	000b      	movs	r3, r1
 8002970:	493a      	ldr	r1, [pc, #232]	@ (8002a5c <display_info+0x154>)
 8002972:	242c      	movs	r4, #44	@ 0x2c
 8002974:	1938      	adds	r0, r7, r4
 8002976:	f011 fb33 	bl	8013fe0 <siprintf>

    // Display the battery percentage on the LCD
    LCD_PutStr(50, 20, volt_msg, FONT_16X26, C_WHITE, C_BLACK);
 800297a:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <display_info+0x158>)
 800297c:	193a      	adds	r2, r7, r4
 800297e:	2100      	movs	r1, #0
 8002980:	9101      	str	r1, [sp, #4]
 8002982:	4938      	ldr	r1, [pc, #224]	@ (8002a64 <display_info+0x15c>)
 8002984:	9100      	str	r1, [sp, #0]
 8002986:	2114      	movs	r1, #20
 8002988:	2032      	movs	r0, #50	@ 0x32
 800298a:	f00c fc0c 	bl	800f1a6 <LCD_PutStr>

    // Print the anchor ID (1-indexed)
    char anchor_id_msg[20];
    sprintf(anchor_id_msg, "ANCHOR ID: %d", ANCHOR_IDX + 1);
 800298e:	4936      	ldr	r1, [pc, #216]	@ (8002a68 <display_info+0x160>)
 8002990:	2418      	movs	r4, #24
 8002992:	193b      	adds	r3, r7, r4
 8002994:	2205      	movs	r2, #5
 8002996:	0018      	movs	r0, r3
 8002998:	f011 fb22 	bl	8013fe0 <siprintf>
    LCD_PutStr(50, 70, anchor_id_msg, FONT_16X26, C_WHITE, C_BLACK);
 800299c:	4b30      	ldr	r3, [pc, #192]	@ (8002a60 <display_info+0x158>)
 800299e:	193a      	adds	r2, r7, r4
 80029a0:	2100      	movs	r1, #0
 80029a2:	9101      	str	r1, [sp, #4]
 80029a4:	492f      	ldr	r1, [pc, #188]	@ (8002a64 <display_info+0x15c>)
 80029a6:	9100      	str	r1, [sp, #0]
 80029a8:	2146      	movs	r1, #70	@ 0x46
 80029aa:	2032      	movs	r0, #50	@ 0x32
 80029ac:	f00c fbfb 	bl	800f1a6 <LCD_PutStr>

    // Count the number of active tags
    uint8_t active_tags = 0;
 80029b0:	233f      	movs	r3, #63	@ 0x3f
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < total_tags; i++) {
 80029b8:	233e      	movs	r3, #62	@ 0x3e
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e01f      	b.n	8002a02 <display_info+0xfa>
        if (tags_last_heard[i] != 0 && HAL_GetTick() - tags_last_heard[i] <= TAG_ACTIVITY_TIMEOUT) {
 80029c2:	243e      	movs	r4, #62	@ 0x3e
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <display_info+0x164>)
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	58d3      	ldr	r3, [r2, r3]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d011      	beq.n	80029f6 <display_info+0xee>
 80029d2:	f001 fd0f 	bl	80043f4 <HAL_GetTick>
 80029d6:	0001      	movs	r1, r0
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <display_info+0x164>)
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	58d3      	ldr	r3, [r2, r3]
 80029e2:	1acb      	subs	r3, r1, r3
 80029e4:	4a22      	ldr	r2, [pc, #136]	@ (8002a70 <display_info+0x168>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d805      	bhi.n	80029f6 <display_info+0xee>
            active_tags++;
 80029ea:	213f      	movs	r1, #63	@ 0x3f
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	3201      	adds	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < total_tags; i++) {
 80029f6:	213e      	movs	r1, #62	@ 0x3e
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	3201      	adds	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <display_info+0x16c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	223e      	movs	r2, #62	@ 0x3e
 8002a08:	18ba      	adds	r2, r7, r2
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3d8      	bcc.n	80029c2 <display_info+0xba>
        }
    }

    UG_FillFrame(256, 120, 288, 146, C_BLACK);
 8002a10:	2390      	movs	r3, #144	@ 0x90
 8002a12:	005a      	lsls	r2, r3, #1
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	0058      	lsls	r0, r3, #1
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2392      	movs	r3, #146	@ 0x92
 8002a1e:	2178      	movs	r1, #120	@ 0x78
 8002a20:	f00c fd76 	bl	800f510 <UG_FillFrame>

    // Print the number of active tags
    char active_tags_msg[20];
    sprintf(active_tags_msg, "ACTIVE TAGS: %d", active_tags);
 8002a24:	233f      	movs	r3, #63	@ 0x3f
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	4913      	ldr	r1, [pc, #76]	@ (8002a78 <display_info+0x170>)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f011 fad6 	bl	8013fe0 <siprintf>
    LCD_PutStr(50, 120, active_tags_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <display_info+0x158>)
 8002a36:	1d3a      	adds	r2, r7, #4
 8002a38:	2100      	movs	r1, #0
 8002a3a:	9101      	str	r1, [sp, #4]
 8002a3c:	4909      	ldr	r1, [pc, #36]	@ (8002a64 <display_info+0x15c>)
 8002a3e:	9100      	str	r1, [sp, #0]
 8002a40:	2178      	movs	r1, #120	@ 0x78
 8002a42:	2032      	movs	r0, #50	@ 0x32
 8002a44:	f00c fbaf 	bl	800f1a6 <LCD_PutStr>

}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b011      	add	sp, #68	@ 0x44
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	20000528 	.word	0x20000528
 8002a54:	452aa000 	.word	0x452aa000
 8002a58:	42c80000 	.word	0x42c80000
 8002a5c:	080165f0 	.word	0x080165f0
 8002a60:	08016924 	.word	0x08016924
 8002a64:	0000ffff 	.word	0x0000ffff
 8002a68:	08016600 	.word	0x08016600
 8002a6c:	20000410 	.word	0x20000410
 8002a70:	00002710 	.word	0x00002710
 8002a74:	2000000a 	.word	0x2000000a
 8002a78:	08016610 	.word	0x08016610

08002a7c <display_tag>:

void display_tag(uint8_t tag_id)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b096      	sub	sp, #88	@ 0x58
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	0002      	movs	r2, r0
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	701a      	strb	r2, [r3, #0]

    if (HAL_GetTick() - last_disp_tag_tick >= 100)
 8002a88:	f001 fcb4 	bl	80043f4 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ba4 <display_tag+0x128>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b63      	cmp	r3, #99	@ 0x63
 8002a96:	d800      	bhi.n	8002a9a <display_tag+0x1e>
 8002a98:	e081      	b.n	8002b9e <display_tag+0x122>
    {
        if (HAL_GetTick() - tags_last_heard[tag_id - 1] > TAG_ACTIVITY_TIMEOUT) {
 8002a9a:	f001 fcab 	bl	80043f4 <HAL_GetTick>
 8002a9e:	0001      	movs	r1, r0
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <display_tag+0x12c>)
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	58d3      	ldr	r3, [r2, r3]
 8002aac:	1acb      	subs	r3, r1, r3
 8002aae:	4a3f      	ldr	r2, [pc, #252]	@ (8002bac <display_tag+0x130>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d920      	bls.n	8002af6 <display_tag+0x7a>
            UG_FillFrame(152, 50, 300, 92, C_BLACK);
 8002ab4:	2396      	movs	r3, #150	@ 0x96
 8002ab6:	005a      	lsls	r2, r3, #1
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	235c      	movs	r3, #92	@ 0x5c
 8002abe:	2132      	movs	r1, #50	@ 0x32
 8002ac0:	2098      	movs	r0, #152	@ 0x98
 8002ac2:	f00c fd25 	bl	800f510 <UG_FillFrame>
            char inactive_msg[20];
            sprintf(inactive_msg, "TAG %d: INACTIVE", tag_id);
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4939      	ldr	r1, [pc, #228]	@ (8002bb0 <display_tag+0x134>)
 8002acc:	240c      	movs	r4, #12
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f011 fa85 	bl	8013fe0 <siprintf>
            LCD_PutStr(50, 50, inactive_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <display_tag+0x138>)
 8002ad8:	193a      	adds	r2, r7, r4
 8002ada:	2100      	movs	r1, #0
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	@ (8002bb8 <display_tag+0x13c>)
 8002ae0:	9100      	str	r1, [sp, #0]
 8002ae2:	2132      	movs	r1, #50	@ 0x32
 8002ae4:	2032      	movs	r0, #50	@ 0x32
 8002ae6:	f00c fb5e 	bl	800f1a6 <LCD_PutStr>
            last_disp_tag_tick = HAL_GetTick();
 8002aea:	f001 fc83 	bl	80043f4 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba4 <display_tag+0x128>)
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e053      	b.n	8002b9e <display_tag+0x122>
            return;
        }
        UG_FillFrame(152, 50, 300, 92, C_BLACK);
 8002af6:	2396      	movs	r3, #150	@ 0x96
 8002af8:	005a      	lsls	r2, r3, #1
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	235c      	movs	r3, #92	@ 0x5c
 8002b00:	2132      	movs	r1, #50	@ 0x32
 8002b02:	2098      	movs	r0, #152	@ 0x98
 8002b04:	f00c fd04 	bl	800f510 <UG_FillFrame>
        char tag_msg[20];
        sprintf(tag_msg, "TAG %d: %.3f m", tag_id, tag_distances[tag_id - 1]);
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	781c      	ldrb	r4, [r3, #0]
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <display_tag+0x140>)
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	18d3      	adds	r3, r2, r3
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4928      	ldr	r1, [pc, #160]	@ (8002bc0 <display_tag+0x144>)
 8002b1e:	2534      	movs	r5, #52	@ 0x34
 8002b20:	1978      	adds	r0, r7, r5
 8002b22:	9200      	str	r2, [sp, #0]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	0022      	movs	r2, r4
 8002b28:	f011 fa5a 	bl	8013fe0 <siprintf>
        LCD_PutStr(50, 50, tag_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002b2c:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <display_tag+0x138>)
 8002b2e:	197a      	adds	r2, r7, r5
 8002b30:	2100      	movs	r1, #0
 8002b32:	9101      	str	r1, [sp, #4]
 8002b34:	4920      	ldr	r1, [pc, #128]	@ (8002bb8 <display_tag+0x13c>)
 8002b36:	9100      	str	r1, [sp, #0]
 8002b38:	2132      	movs	r1, #50	@ 0x32
 8002b3a:	2032      	movs	r0, #50	@ 0x32
 8002b3c:	f00c fb33 	bl	800f1a6 <LCD_PutStr>

        // Calculate the standard deviation (square root of variance)
        double tag_stdev = sqrt(tags_variance[tag_id - 1]);
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <display_tag+0x148>)
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	18d3      	adds	r3, r2, r3
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0010      	movs	r0, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	f013 fc30 	bl	80163b8 <sqrt>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // Print the standard deviation of the tag
        UG_FillFrame(152, 100, 300, 142, C_BLACK);
 8002b60:	2396      	movs	r3, #150	@ 0x96
 8002b62:	005a      	lsls	r2, r3, #1
 8002b64:	2300      	movs	r3, #0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	238e      	movs	r3, #142	@ 0x8e
 8002b6a:	2164      	movs	r1, #100	@ 0x64
 8002b6c:	2098      	movs	r0, #152	@ 0x98
 8002b6e:	f00c fccf 	bl	800f510 <UG_FillFrame>
        char stdev_msg[20];
        sprintf(stdev_msg, "STDEV: %.3f m", tag_stdev);
 8002b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b76:	4914      	ldr	r1, [pc, #80]	@ (8002bc8 <display_tag+0x14c>)
 8002b78:	2420      	movs	r4, #32
 8002b7a:	1938      	adds	r0, r7, r4
 8002b7c:	f011 fa30 	bl	8013fe0 <siprintf>
        LCD_PutStr(50, 100, stdev_msg, FONT_16X26, C_WHITE, C_BLACK);
 8002b80:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <display_tag+0x138>)
 8002b82:	193a      	adds	r2, r7, r4
 8002b84:	2100      	movs	r1, #0
 8002b86:	9101      	str	r1, [sp, #4]
 8002b88:	490b      	ldr	r1, [pc, #44]	@ (8002bb8 <display_tag+0x13c>)
 8002b8a:	9100      	str	r1, [sp, #0]
 8002b8c:	2164      	movs	r1, #100	@ 0x64
 8002b8e:	2032      	movs	r0, #50	@ 0x32
 8002b90:	f00c fb09 	bl	800f1a6 <LCD_PutStr>

        last_disp_tag_tick = HAL_GetTick();
 8002b94:	f001 fc2e 	bl	80043f4 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	4b02      	ldr	r3, [pc, #8]	@ (8002ba4 <display_tag+0x128>)
 8002b9c:	601a      	str	r2, [r3, #0]
    }

}
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b014      	add	sp, #80	@ 0x50
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	2000045c 	.word	0x2000045c
 8002ba8:	20000410 	.word	0x20000410
 8002bac:	00002710 	.word	0x00002710
 8002bb0:	08016620 	.word	0x08016620
 8002bb4:	08016924 	.word	0x08016924
 8002bb8:	0000ffff 	.word	0x0000ffff
 8002bbc:	200003f8 	.word	0x200003f8
 8002bc0:	08016634 	.word	0x08016634
 8002bc4:	20000438 	.word	0x20000438
 8002bc8:	08016644 	.word	0x08016644

08002bcc <display_clear>:

void display_clear()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    UG_FillScreen(C_BLACK);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f00c fc77 	bl	800f4c4 <UG_FillScreen>
}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <handle_screens>:

void handle_screens()
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    if(current_screen == 0)
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <handle_screens+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <handle_screens+0x12>
    {
        display_info();
 8002be8:	f7ff fe8e 	bl	8002908 <display_info>
        return;
 8002bec:	e004      	b.n	8002bf8 <handle_screens+0x1c>
    }
    display_tag(current_screen);
 8002bee:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <handle_screens+0x20>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ff42 	bl	8002a7c <display_tag>
}
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000457 	.word	0x20000457

08002c00 <lcd_off>:

void lcd_off()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_RESET);
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <lcd_off+0x24>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2104      	movs	r1, #4
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f002 fcb1 	bl	8005572 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_RESET);
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <lcd_off+0x24>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	2102      	movs	r1, #2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f002 fcab 	bl	8005572 <HAL_GPIO_WritePin>
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	48000400 	.word	0x48000400

08002c28 <lcd_on>:

void lcd_on()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_SET);
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <lcd_on+0x28>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2104      	movs	r1, #4
 8002c32:	0018      	movs	r0, r3
 8002c34:	f002 fc9d 	bl	8005572 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_SET);
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <lcd_on+0x28>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 fc97 	bl	8005572 <HAL_GPIO_WritePin>
    
    LCD_init();
 8002c44:	f00c fb06 	bl	800f254 <LCD_init>
}
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	48000400 	.word	0x48000400

08002c54 <handle_btn>:

// Returns true when lcd should be on 
bool handle_btn()
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(BTN_DISP_GPIO_Port, BTN_DISP_Pin))
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d14 <handle_btn+0xc0>)
 8002c5e:	0019      	movs	r1, r3
 8002c60:	0010      	movs	r0, r2
 8002c62:	f002 fc69 	bl	8005538 <HAL_GPIO_ReadPin>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d022      	beq.n	8002cb0 <handle_btn+0x5c>
    {
        btn_press_tick = HAL_GetTick();
 8002c6a:	f001 fbc3 	bl	80043f4 <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	4b29      	ldr	r3, [pc, #164]	@ (8002d18 <handle_btn+0xc4>)
 8002c72:	601a      	str	r2, [r3, #0]

        // Rising edge btn
        if(!last_btn && disp_on)
 8002c74:	4b29      	ldr	r3, [pc, #164]	@ (8002d1c <handle_btn+0xc8>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4053      	eors	r3, r2
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d012      	beq.n	8002ca8 <handle_btn+0x54>
 8002c82:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <handle_btn+0xcc>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <handle_btn+0x54>
        {
            current_screen = (current_screen + 1) % total_screens;
 8002c8a:	4b26      	ldr	r3, [pc, #152]	@ (8002d24 <handle_btn+0xd0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <handle_btn+0xd4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f7fd fbc2 	bl	8000420 <__aeabi_idivmod>
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <handle_btn+0xd0>)
 8002ca2:	701a      	strb	r2, [r3, #0]
            display_clear();
 8002ca4:	f7ff ff92 	bl	8002bcc <display_clear>
        }

        last_btn = true;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d1c <handle_btn+0xc8>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e002      	b.n	8002cb6 <handle_btn+0x62>
    }
    else
    {
        last_btn = false;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <handle_btn+0xc8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
    }

    disp_on = HAL_GetTick() - btn_press_tick < SCREEN_SLEEP_TIMEOUT;
 8002cb6:	f001 fb9d 	bl	80043f4 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <handle_btn+0xc4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1ad2      	subs	r2, r2, r3
 8002cc2:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <handle_btn+0xd8>)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4291      	cmp	r1, r2
 8002cc8:	415b      	adcs	r3, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <handle_btn+0xcc>)
 8002cce:	701a      	strb	r2, [r3, #0]

    if(disp_on)
 8002cd0:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <handle_btn+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <handle_btn+0xa4>
    {
        // Rising edge lcd
        if(!last_lcd_on)
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <handle_btn+0xdc>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4053      	eors	r3, r2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <handle_btn+0x9a>
        {
            lcd_on();
 8002ce6:	f7ff ff9f 	bl	8002c28 <lcd_on>
            display_clear();
 8002cea:	f7ff ff6f 	bl	8002bcc <display_clear>
        }

        last_lcd_on = true;
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <handle_btn+0xdc>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
        return true;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e009      	b.n	8002d0c <handle_btn+0xb8>
    }

    // Falling edge
    if(last_lcd_on)
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <handle_btn+0xdc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <handle_btn+0xb0>
    {
        lcd_off();
 8002d00:	f7ff ff7e 	bl	8002c00 <lcd_off>
    }

    last_lcd_on = false;
 8002d04:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <handle_btn+0xdc>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    return false;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	48000400 	.word	0x48000400
 8002d18:	20000450 	.word	0x20000450
 8002d1c:	20000455 	.word	0x20000455
 8002d20:	20000456 	.word	0x20000456
 8002d24:	20000457 	.word	0x20000457
 8002d28:	20000458 	.word	0x20000458
 8002d2c:	0000270f 	.word	0x0000270f
 8002d30:	20000454 	.word	0x20000454

08002d34 <anchor_main>:
 * @param  none

 * @return none
 */
int anchor_main(void (*send_at_msg_ptr)(char *))
{
 8002d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d36:	b09f      	sub	sp, #124	@ 0x7c
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6178      	str	r0, [r7, #20]
    total_screens = total_tags + 1;
 8002d3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f30 <anchor_main+0x1fc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b7b      	ldr	r3, [pc, #492]	@ (8002f34 <anchor_main+0x200>)
 8002d46:	701a      	strb	r2, [r3, #0]

    memcpy((rx_poll_msg) + RX_POLL_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d48:	487b      	ldr	r0, [pc, #492]	@ (8002f38 <anchor_main+0x204>)
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f3c <anchor_main+0x208>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	0019      	movs	r1, r3
 8002d52:	f011 fa51 	bl	80141f8 <memcpy>
    memcpy((tx_resp_msg) + TX_RESP_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d56:	487a      	ldr	r0, [pc, #488]	@ (8002f40 <anchor_main+0x20c>)
 8002d58:	4b78      	ldr	r3, [pc, #480]	@ (8002f3c <anchor_main+0x208>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	f011 fa4a 	bl	80141f8 <memcpy>
    memcpy((rx_final_msg) + RX_FINAL_MSG_ANCHOR_ID_IDX, anchor_id, 2);
 8002d64:	4877      	ldr	r0, [pc, #476]	@ (8002f44 <anchor_main+0x210>)
 8002d66:	4b75      	ldr	r3, [pc, #468]	@ (8002f3c <anchor_main+0x208>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	f011 fa43 	bl	80141f8 <memcpy>
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002d72:	f010 fb3f 	bl	80133f4 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002d76:	f010 fba9 	bl	80134cc <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f00f f9c2 	bl	8012104 <dwt_initialise>
 8002d80:	0003      	movs	r3, r0
 8002d82:	3301      	adds	r3, #1
 8002d84:	d101      	bne.n	8002d8a <anchor_main+0x56>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	e7fd      	b.n	8002d86 <anchor_main+0x52>
        {
        };
    }
    port_set_dw1000_fastrate();
 8002d8a:	f010 fbad 	bl	80134e8 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f48 <anchor_main+0x214>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f00f fb2b 	bl	80123ec <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 8002d96:	4b6d      	ldr	r3, [pc, #436]	@ (8002f4c <anchor_main+0x218>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f00f fb11 	bl	80123c0 <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f00f ff52 	bl	8012c48 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002da4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <anchor_main+0x21c>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f00f fcc4 	bl	8012734 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002dac:	4b68      	ldr	r3, [pc, #416]	@ (8002f50 <anchor_main+0x21c>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f00f fcd4 	bl	801275c <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    // dwt_setpreambledetecttimeout(PRE_TIMEOUT);

    HAL_Delay(2000);
 8002db4:	23fa      	movs	r3, #250	@ 0xfa
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	0018      	movs	r0, r3
 8002dba:	f001 fb25 	bl	8004408 <HAL_Delay>
    (*send_at_msg_ptr)("AT+MODE=TEST\r\n");
 8002dbe:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <anchor_main+0x220>)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0010      	movs	r0, r2
 8002dc4:	4798      	blx	r3
    HAL_Delay(100);
 8002dc6:	2064      	movs	r0, #100	@ 0x64
 8002dc8:	f001 fb1e 	bl	8004408 <HAL_Delay>
    (*send_at_msg_ptr)("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
 8002dcc:	4a62      	ldr	r2, [pc, #392]	@ (8002f58 <anchor_main+0x224>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0010      	movs	r0, r2
 8002dd2:	4798      	blx	r3
    /* Loop forever responding to ranging requests. */
    while (1)
    {

        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f010 f93b 	bl	8013050 <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f010 f8f0 	bl	8012fc0 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002de0:	e005      	b.n	8002dee <anchor_main+0xba>
        // while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
        {

            if(handle_btn())
 8002de2:	f7ff ff37 	bl	8002c54 <handle_btn>
 8002de6:	1e03      	subs	r3, r0, #0
 8002de8:	d001      	beq.n	8002dee <anchor_main+0xba>
            {
                handle_screens();
 8002dea:	f7ff fef7 	bl	8002bdc <handle_screens>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002dee:	2100      	movs	r1, #0
 8002df0:	200f      	movs	r0, #15
 8002df2:	f00f fe03 	bl	80129fc <dwt_read32bitoffsetreg>
 8002df6:	0002      	movs	r2, r0
 8002df8:	4b58      	ldr	r3, [pc, #352]	@ (8002f5c <anchor_main+0x228>)
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <anchor_main+0x228>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a57      	ldr	r2, [pc, #348]	@ (8002f60 <anchor_main+0x22c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	d0ed      	beq.n	8002de2 <anchor_main+0xae>
        };

        //  uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        //         CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 8002e06:	4b55      	ldr	r3, [pc, #340]	@ (8002f5c <anchor_main+0x228>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	01db      	lsls	r3, r3, #7
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d100      	bne.n	8002e14 <anchor_main+0xe0>
 8002e12:	e26e      	b.n	80032f2 <anchor_main+0x5be>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	01db      	lsls	r3, r3, #7
 8002e18:	001a      	movs	r2, r3
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	200f      	movs	r0, #15
 8002e1e:	f00f fe7e 	bl	8012b1e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002e22:	2100      	movs	r1, #0
 8002e24:	2010      	movs	r0, #16
 8002e26:	f00f fde9 	bl	80129fc <dwt_read32bitoffsetreg>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	0d9b      	lsrs	r3, r3, #22
 8002e30:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (frame_len <= RX_BUFFER_LEN)
 8002e32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d806      	bhi.n	8002e4a <anchor_main+0x116>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <anchor_main+0x230>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	0018      	movs	r0, r3
 8002e46:	f00f fce7 	bl	8012818 <dwt_readrxdata>
            }

            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002e4a:	4b46      	ldr	r3, [pc, #280]	@ (8002f64 <anchor_main+0x230>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	709a      	strb	r2, [r3, #2]

            memcpy(tx_resp_msg + TX_RESP_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Save the incoming tag id into next message
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <anchor_main+0x234>)
 8002e52:	4946      	ldr	r1, [pc, #280]	@ (8002f6c <anchor_main+0x238>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	0018      	movs	r0, r3
 8002e58:	f011 f9ce 	bl	80141f8 <memcpy>
            memcpy(rx_final_msg + RX_FINAL_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Used for comparing tag id of poll with final
 8002e5c:	4b44      	ldr	r3, [pc, #272]	@ (8002f70 <anchor_main+0x23c>)
 8002e5e:	4943      	ldr	r1, [pc, #268]	@ (8002f6c <anchor_main+0x238>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f011 f9c8 	bl	80141f8 <memcpy>
            memcpy(rx_poll_msg + RX_POLL_MSG_TAG_ID_IDX, rx_buffer + RX_POLL_MSG_TAG_ID_IDX, 2);  // Respond to all tags
 8002e68:	4b42      	ldr	r3, [pc, #264]	@ (8002f74 <anchor_main+0x240>)
 8002e6a:	4940      	ldr	r1, [pc, #256]	@ (8002f6c <anchor_main+0x238>)
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f011 f9c2 	bl	80141f8 <memcpy>

            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002e74:	4940      	ldr	r1, [pc, #256]	@ (8002f78 <anchor_main+0x244>)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <anchor_main+0x230>)
 8002e78:	220a      	movs	r2, #10
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f011 f91c 	bl	80140b8 <memcmp>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d1a7      	bne.n	8002dd4 <anchor_main+0xa0>

                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 8002e84:	f000 faae 	bl	80033e4 <get_rx_timestamp_u64>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	493b      	ldr	r1, [pc, #236]	@ (8002f7c <anchor_main+0x248>)
 8002e8e:	600a      	str	r2, [r1, #0]
 8002e90:	604b      	str	r3, [r1, #4]

                //                 CDC_Transmit_FS((uint8*) &poll_rx_ts, sizeof(poll_rx_ts));

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	@ (8002f7c <anchor_main+0x248>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4839      	ldr	r0, [pc, #228]	@ (8002f80 <anchor_main+0x24c>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	1812      	adds	r2, r2, r0
 8002e9e:	414b      	adcs	r3, r1
 8002ea0:	0619      	lsls	r1, r3, #24
 8002ea2:	0a14      	lsrs	r4, r2, #8
 8002ea4:	430c      	orrs	r4, r1
 8002ea6:	0a1d      	lsrs	r5, r3, #8
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	667b      	str	r3, [r7, #100]	@ 0x64
                dwt_setdelayedtrxtime(resp_tx_time);
 8002eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f00f ffc7 	bl	8012e42 <dwt_setdelayedtrxtime>

                // CDC_Transmit_FS((uint8*)&resp_tx_time, sizeof(resp_tx_time));

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002eb4:	2064      	movs	r0, #100	@ 0x64
 8002eb6:	f00f fef9 	bl	8012cac <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8002eba:	23af      	movs	r3, #175	@ 0xaf
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f010 f8c6 	bl	8013050 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f84 <anchor_main+0x250>)
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <anchor_main+0x254>)
 8002eca:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <anchor_main+0x254>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	200f      	movs	r0, #15
 8002ed4:	f00f fc53 	bl	801277e <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2100      	movs	r1, #0
 8002edc:	200f      	movs	r0, #15
 8002ede:	f00f fc77 	bl	80127d0 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	f00f ffbc 	bl	8012e60 <dwt_starttx>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	663b      	str	r3, [r7, #96]	@ 0x60

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eee:	3301      	adds	r3, #1
 8002ef0:	d100      	bne.n	8002ef4 <anchor_main+0x1c0>
 8002ef2:	e207      	b.n	8003304 <anchor_main+0x5d0>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	200f      	movs	r0, #15
 8002efa:	f00f fd7f 	bl	80129fc <dwt_read32bitoffsetreg>
 8002efe:	0002      	movs	r2, r0
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <anchor_main+0x228>)
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <anchor_main+0x228>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <anchor_main+0x22c>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d0f3      	beq.n	8002ef6 <anchor_main+0x1c2>
                };
                // uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
                //                CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <anchor_main+0x250>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <anchor_main+0x250>)
 8002f18:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <anchor_main+0x228>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	01db      	lsls	r3, r3, #7
 8002f22:	4013      	ands	r3, r2
 8002f24:	d100      	bne.n	8002f28 <anchor_main+0x1f4>
 8002f26:	e1db      	b.n	80032e0 <anchor_main+0x5ac>
                {
                    int i;

                    for (i = 0; i < RX_BUF_LEN; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f2c:	e036      	b.n	8002f9c <anchor_main+0x268>
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	2000000a 	.word	0x2000000a
 8002f34:	20000458 	.word	0x20000458
 8002f38:	20000029 	.word	0x20000029
 8002f3c:	20000020 	.word	0x20000020
 8002f40:	20000037 	.word	0x20000037
 8002f44:	20000045 	.word	0x20000045
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	20000018 	.word	0x20000018
 8002f50:	00004031 	.word	0x00004031
 8002f54:	08016654 	.word	0x08016654
 8002f58:	08016664 	.word	0x08016664
 8002f5c:	2000047c 	.word	0x2000047c
 8002f60:	2427d000 	.word	0x2427d000
 8002f64:	20000464 	.word	0x20000464
 8002f68:	20000035 	.word	0x20000035
 8002f6c:	2000046b 	.word	0x2000046b
 8002f70:	20000047 	.word	0x20000047
 8002f74:	2000002b 	.word	0x2000002b
 8002f78:	20000024 	.word	0x20000024
 8002f7c:	20000480 	.word	0x20000480
 8002f80:	09c40000 	.word	0x09c40000
 8002f84:	20000460 	.word	0x20000460
 8002f88:	20000030 	.word	0x20000030
                    {
                        rx_buffer[i] = 0;
 8002f8c:	4adf      	ldr	r2, [pc, #892]	@ (800330c <anchor_main+0x5d8>)
 8002f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < RX_BUF_LEN; i++)
 8002f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f98:	3301      	adds	r3, #1
 8002f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f9e:	2b17      	cmp	r3, #23
 8002fa0:	ddf4      	ble.n	8002f8c <anchor_main+0x258>
                    }
                    //                	CDC_Transmit_FS((uint8 *) &status_reg, sizeof(error));
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002fa2:	2381      	movs	r3, #129	@ 0x81
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	2100      	movs	r1, #0
 8002faa:	200f      	movs	r0, #15
 8002fac:	f00f fdb7 	bl	8012b1e <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2010      	movs	r0, #16
 8002fb4:	f00f fd22 	bl	80129fc <dwt_read32bitoffsetreg>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	227f      	movs	r2, #127	@ 0x7f
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
                    if (frame_len <= RX_BUF_LEN)
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc2:	2b18      	cmp	r3, #24
 8002fc4:	d806      	bhi.n	8002fd4 <anchor_main+0x2a0>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc8:	b299      	uxth	r1, r3
 8002fca:	4bd0      	ldr	r3, [pc, #832]	@ (800330c <anchor_main+0x5d8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f00f fc22 	bl	8012818 <dwt_readrxdata>

                    //                    CDC_Transmit_FS(rx_buffer, sizeof(rx_final_msg));

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002fd4:	4bcd      	ldr	r3, [pc, #820]	@ (800330c <anchor_main+0x5d8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	709a      	strb	r2, [r3, #2]
                    //                    CDC_Transmit_FS(rx_buffer, ALL_MSG_COMMON_LEN);
                    //                    CDC_Transmit_FS(rx_final_msg, ALL_MSG_COMMON_LEN);

                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8002fda:	49cd      	ldr	r1, [pc, #820]	@ (8003310 <anchor_main+0x5dc>)
 8002fdc:	4bcb      	ldr	r3, [pc, #812]	@ (800330c <anchor_main+0x5d8>)
 8002fde:	220a      	movs	r2, #10
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f011 f869 	bl	80140b8 <memcmp>
 8002fe6:	1e03      	subs	r3, r0, #0
 8002fe8:	d000      	beq.n	8002fec <anchor_main+0x2b8>
 8002fea:	e6f3      	b.n	8002dd4 <anchor_main+0xa0>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8002fec:	f000 f9c0 	bl	8003370 <get_tx_timestamp_u64>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	49c7      	ldr	r1, [pc, #796]	@ (8003314 <anchor_main+0x5e0>)
 8002ff6:	600a      	str	r2, [r1, #0]
 8002ff8:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 8002ffa:	f000 f9f3 	bl	80033e4 <get_rx_timestamp_u64>
 8002ffe:	0002      	movs	r2, r0
 8003000:	000b      	movs	r3, r1
 8003002:	49c5      	ldr	r1, [pc, #788]	@ (8003318 <anchor_main+0x5e4>)
 8003004:	600a      	str	r2, [r1, #0]
 8003006:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003008:	2310      	movs	r3, #16
 800300a:	2610      	movs	r6, #16
 800300c:	199b      	adds	r3, r3, r6
 800300e:	19da      	adds	r2, r3, r7
 8003010:	4bc2      	ldr	r3, [pc, #776]	@ (800331c <anchor_main+0x5e8>)
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fa1f 	bl	8003458 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 800301a:	230c      	movs	r3, #12
 800301c:	199b      	adds	r3, r3, r6
 800301e:	19da      	adds	r2, r3, r7
 8003020:	4bbf      	ldr	r3, [pc, #764]	@ (8003320 <anchor_main+0x5ec>)
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fa17 	bl	8003458 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 800302a:	2308      	movs	r3, #8
 800302c:	199b      	adds	r3, r3, r6
 800302e:	19da      	adds	r2, r3, r7
 8003030:	4bbc      	ldr	r3, [pc, #752]	@ (8003324 <anchor_main+0x5f0>)
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f000 fa0f 	bl	8003458 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 800303a:	4bbb      	ldr	r3, [pc, #748]	@ (8003328 <anchor_main+0x5f4>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0013      	movs	r3, r2
 8003042:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 8003044:	4bb3      	ldr	r3, [pc, #716]	@ (8003314 <anchor_main+0x5e0>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0013      	movs	r3, r2
 800304c:	65bb      	str	r3, [r7, #88]	@ 0x58
                        final_rx_ts_32 = (uint32)final_rx_ts;
 800304e:	4bb2      	ldr	r3, [pc, #712]	@ (8003318 <anchor_main+0x5e4>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0013      	movs	r3, r2
 8003056:	657b      	str	r3, [r7, #84]	@ 0x54
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fbc8 	bl	80027f4 <__aeabi_ui2d>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	64ba      	str	r2, [r7, #72]	@ 0x48
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800306c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800306e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff fbbe 	bl	80027f4 <__aeabi_ui2d>
 8003078:	0002      	movs	r2, r0
 800307a:	000b      	movs	r3, r1
 800307c:	643a      	str	r2, [r7, #64]	@ 0x40
 800307e:	647b      	str	r3, [r7, #68]	@ 0x44
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	0018      	movs	r0, r3
 8003088:	f7ff fbb4 	bl	80027f4 <__aeabi_ui2d>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8003094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff fbaa 	bl	80027f4 <__aeabi_ui2d>
 80030a0:	0002      	movs	r2, r0
 80030a2:	000b      	movs	r3, r1
 80030a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80030a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80030ae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030b0:	f7fe fcb0 	bl	8001a14 <__aeabi_dmul>
 80030b4:	0002      	movs	r2, r0
 80030b6:	000b      	movs	r3, r1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030c4:	f7fe fca6 	bl	8001a14 <__aeabi_dmul>
 80030c8:	0002      	movs	r2, r0
 80030ca:	000b      	movs	r3, r1
 80030cc:	68b8      	ldr	r0, [r7, #8]
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	f7fe ff68 	bl	8001fa4 <__aeabi_dsub>
 80030d4:	0002      	movs	r2, r0
 80030d6:	000b      	movs	r3, r1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80030e2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030e4:	f7fd fcee 	bl	8000ac4 <__aeabi_dadd>
 80030e8:	0002      	movs	r2, r0
 80030ea:	000b      	movs	r3, r1
 80030ec:	0010      	movs	r0, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f4:	f7fd fce6 	bl	8000ac4 <__aeabi_dadd>
 80030f8:	0002      	movs	r2, r0
 80030fa:	000b      	movs	r3, r1
 80030fc:	0010      	movs	r0, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003104:	f7fd fcde 	bl	8000ac4 <__aeabi_dadd>
 8003108:	0002      	movs	r2, r0
 800310a:	000b      	movs	r3, r1
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	f7fe f83c 	bl	800118c <__aeabi_ddiv>
 8003114:	0002      	movs	r2, r0
 8003116:	000b      	movs	r3, r1
 8003118:	0010      	movs	r0, r2
 800311a:	0019      	movs	r1, r3
 800311c:	f7fd f9e2 	bl	80004e4 <__aeabi_d2lz>
 8003120:	0002      	movs	r2, r0
 8003122:	000b      	movs	r3, r1
 8003124:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        tof = tof_dtu * DWT_TIME_UNITS;
 8003128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800312a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800312c:	f7fd fa14 	bl	8000558 <__aeabi_l2d>
 8003130:	4a7e      	ldr	r2, [pc, #504]	@ (800332c <anchor_main+0x5f8>)
 8003132:	4b7f      	ldr	r3, [pc, #508]	@ (8003330 <anchor_main+0x5fc>)
 8003134:	f7fe fc6e 	bl	8001a14 <__aeabi_dmul>
 8003138:	0002      	movs	r2, r0
 800313a:	000b      	movs	r3, r1
 800313c:	497d      	ldr	r1, [pc, #500]	@ (8003334 <anchor_main+0x600>)
 800313e:	600a      	str	r2, [r1, #0]
 8003140:	604b      	str	r3, [r1, #4]

                        distance = tof * SPEED_OF_LIGHT;
 8003142:	4b7c      	ldr	r3, [pc, #496]	@ (8003334 <anchor_main+0x600>)
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	2298      	movs	r2, #152	@ 0x98
 800314a:	0552      	lsls	r2, r2, #21
 800314c:	4b7a      	ldr	r3, [pc, #488]	@ (8003338 <anchor_main+0x604>)
 800314e:	f7fe fc61 	bl	8001a14 <__aeabi_dmul>
 8003152:	0002      	movs	r2, r0
 8003154:	000b      	movs	r3, r1
 8003156:	4979      	ldr	r1, [pc, #484]	@ (800333c <anchor_main+0x608>)
 8003158:	600a      	str	r2, [r1, #0]
 800315a:	604b      	str	r3, [r1, #4]

                        if(distance < 0)
 800315c:	4b77      	ldr	r3, [pc, #476]	@ (800333c <anchor_main+0x608>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	2300      	movs	r3, #0
 8003166:	f7fd f977 	bl	8000458 <__aeabi_dcmplt>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d000      	beq.n	8003170 <anchor_main+0x43c>
 800316e:	e0cb      	b.n	8003308 <anchor_main+0x5d4>
                        {
                            continue;
                        }

                        uint8 tag_index = rx_final_msg[RX_FINAL_MSG_TAG_ID_IDX + 1] - '0' - 1; // Convert char to uint8
 8003170:	4b67      	ldr	r3, [pc, #412]	@ (8003310 <anchor_main+0x5dc>)
 8003172:	7a1a      	ldrb	r2, [r3, #8]
 8003174:	2617      	movs	r6, #23
 8003176:	2110      	movs	r1, #16
 8003178:	1873      	adds	r3, r6, r1
 800317a:	19db      	adds	r3, r3, r7
 800317c:	3a31      	subs	r2, #49	@ 0x31
 800317e:	701a      	strb	r2, [r3, #0]
                        if (tag_index < total_tags) // Ensure tag ID is within bounds
 8003180:	4b6f      	ldr	r3, [pc, #444]	@ (8003340 <anchor_main+0x60c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	1872      	adds	r2, r6, r1
 8003186:	19d2      	adds	r2, r2, r7
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d300      	bcc.n	8003190 <anchor_main+0x45c>
 800318e:	e08f      	b.n	80032b0 <anchor_main+0x57c>
                        {
                            tags_last_heard[tag_index] = HAL_GetTick();
 8003190:	1872      	adds	r2, r6, r1
 8003192:	19d3      	adds	r3, r2, r7
 8003194:	781e      	ldrb	r6, [r3, #0]
 8003196:	f001 f92d 	bl	80043f4 <HAL_GetTick>
 800319a:	0001      	movs	r1, r0
 800319c:	4b69      	ldr	r3, [pc, #420]	@ (8003344 <anchor_main+0x610>)
 800319e:	00b2      	lsls	r2, r6, #2
 80031a0:	50d1      	str	r1, [r2, r3]
                            tag_distances[tag_index] = distance; // Update the distance for the tag
 80031a2:	2617      	movs	r6, #23
 80031a4:	2310      	movs	r3, #16
 80031a6:	18f2      	adds	r2, r6, r3
 80031a8:	19d3      	adds	r3, r2, r7
 80031aa:	7819      	ldrb	r1, [r3, #0]
 80031ac:	4b63      	ldr	r3, [pc, #396]	@ (800333c <anchor_main+0x608>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4865      	ldr	r0, [pc, #404]	@ (8003348 <anchor_main+0x614>)
 80031b4:	00c9      	lsls	r1, r1, #3
 80031b6:	1841      	adds	r1, r0, r1
 80031b8:	600a      	str	r2, [r1, #0]
 80031ba:	604b      	str	r3, [r1, #4]

                            // Update tag mean and variance
                            tags_variance[tag_index] = (SLIDING_WINDOW_VARIANCE_RHO_INV * tags_variance[tag_index]) + (SLIDING_WINDOW_VARIANCE_RHO * (distance - tags_mean[tag_index]) * (distance - tags_mean[tag_index]));
 80031bc:	2310      	movs	r3, #16
 80031be:	18f2      	adds	r2, r6, r3
 80031c0:	19d3      	adds	r3, r2, r7
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4a61      	ldr	r2, [pc, #388]	@ (800334c <anchor_main+0x618>)
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	4a60      	ldr	r2, [pc, #384]	@ (8003350 <anchor_main+0x61c>)
 80031d0:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <anchor_main+0x620>)
 80031d2:	f7fe fc1f 	bl	8001a14 <__aeabi_dmul>
 80031d6:	0002      	movs	r2, r0
 80031d8:	000b      	movs	r3, r1
 80031da:	60ba      	str	r2, [r7, #8]
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b57      	ldr	r3, [pc, #348]	@ (800333c <anchor_main+0x608>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	2310      	movs	r3, #16
 80031e6:	18f2      	adds	r2, r6, r3
 80031e8:	19d3      	adds	r3, r2, r7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003358 <anchor_main+0x624>)
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f7fe fed5 	bl	8001fa4 <__aeabi_dsub>
 80031fa:	0002      	movs	r2, r0
 80031fc:	000b      	movs	r3, r1
 80031fe:	0010      	movs	r0, r2
 8003200:	0019      	movs	r1, r3
 8003202:	4a53      	ldr	r2, [pc, #332]	@ (8003350 <anchor_main+0x61c>)
 8003204:	4b55      	ldr	r3, [pc, #340]	@ (800335c <anchor_main+0x628>)
 8003206:	f7fe fc05 	bl	8001a14 <__aeabi_dmul>
 800320a:	0002      	movs	r2, r0
 800320c:	000b      	movs	r3, r1
 800320e:	603a      	str	r2, [r7, #0]
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b4a      	ldr	r3, [pc, #296]	@ (800333c <anchor_main+0x608>)
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	2310      	movs	r3, #16
 800321a:	18f2      	adds	r2, r6, r3
 800321c:	19d3      	adds	r3, r2, r7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4a4d      	ldr	r2, [pc, #308]	@ (8003358 <anchor_main+0x624>)
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f7fe febb 	bl	8001fa4 <__aeabi_dsub>
 800322e:	0002      	movs	r2, r0
 8003230:	000b      	movs	r3, r1
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	f7fe fbed 	bl	8001a14 <__aeabi_dmul>
 800323a:	0002      	movs	r2, r0
 800323c:	000b      	movs	r3, r1
 800323e:	2110      	movs	r1, #16
 8003240:	1870      	adds	r0, r6, r1
 8003242:	19c1      	adds	r1, r0, r7
 8003244:	780e      	ldrb	r6, [r1, #0]
 8003246:	68b8      	ldr	r0, [r7, #8]
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	f7fd fc3b 	bl	8000ac4 <__aeabi_dadd>
 800324e:	0002      	movs	r2, r0
 8003250:	000b      	movs	r3, r1
 8003252:	483e      	ldr	r0, [pc, #248]	@ (800334c <anchor_main+0x618>)
 8003254:	00f1      	lsls	r1, r6, #3
 8003256:	1841      	adds	r1, r0, r1
 8003258:	600a      	str	r2, [r1, #0]
 800325a:	604b      	str	r3, [r1, #4]
                            tags_mean[tag_index] = (SLIDING_WINDOW_VARIANCE_RHO_INV * tags_mean[tag_index]) + (SLIDING_WINDOW_VARIANCE_RHO * distance);
 800325c:	2617      	movs	r6, #23
 800325e:	2110      	movs	r1, #16
 8003260:	1873      	adds	r3, r6, r1
 8003262:	19db      	adds	r3, r3, r7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	4a3c      	ldr	r2, [pc, #240]	@ (8003358 <anchor_main+0x624>)
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	18d3      	adds	r3, r2, r3
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <anchor_main+0x61c>)
 8003272:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <anchor_main+0x620>)
 8003274:	f7fe fbce 	bl	8001a14 <__aeabi_dmul>
 8003278:	0002      	movs	r2, r0
 800327a:	000b      	movs	r3, r1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	4b2e      	ldr	r3, [pc, #184]	@ (800333c <anchor_main+0x608>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <anchor_main+0x61c>)
 8003288:	4b34      	ldr	r3, [pc, #208]	@ (800335c <anchor_main+0x628>)
 800328a:	f7fe fbc3 	bl	8001a14 <__aeabi_dmul>
 800328e:	0002      	movs	r2, r0
 8003290:	000b      	movs	r3, r1
 8003292:	2110      	movs	r1, #16
 8003294:	1871      	adds	r1, r6, r1
 8003296:	19c9      	adds	r1, r1, r7
 8003298:	780e      	ldrb	r6, [r1, #0]
 800329a:	68b8      	ldr	r0, [r7, #8]
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	f7fd fc11 	bl	8000ac4 <__aeabi_dadd>
 80032a2:	0002      	movs	r2, r0
 80032a4:	000b      	movs	r3, r1
 80032a6:	482c      	ldr	r0, [pc, #176]	@ (8003358 <anchor_main+0x624>)
 80032a8:	00f1      	lsls	r1, r6, #3
 80032aa:	1841      	adds	r1, r0, r1
 80032ac:	600a      	str	r2, [r1, #0]
 80032ae:	604b      	str	r3, [r1, #4]
                        }

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "AT+TEST=TXLRSTR, \"%c,%c,%3.2f\"\r\n", anchor_id[1], rx_final_msg[RX_FINAL_MSG_TAG_ID_IDX + 1], distance);
 80032b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <anchor_main+0x62c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	001e      	movs	r6, r3
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <anchor_main+0x5dc>)
 80032bc:	7a1b      	ldrb	r3, [r3, #8]
 80032be:	469c      	mov	ip, r3
 80032c0:	4b1e      	ldr	r3, [pc, #120]	@ (800333c <anchor_main+0x608>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4927      	ldr	r1, [pc, #156]	@ (8003364 <anchor_main+0x630>)
 80032c8:	4827      	ldr	r0, [pc, #156]	@ (8003368 <anchor_main+0x634>)
 80032ca:	9200      	str	r2, [sp, #0]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	4663      	mov	r3, ip
 80032d0:	0032      	movs	r2, r6
 80032d2:	f010 fe85 	bl	8013fe0 <siprintf>

                        // CDC_Transmit_FS((uint8_t *)dist_str, sizeof(dist_str));
                        (*send_at_msg_ptr)(dist_str);
 80032d6:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <anchor_main+0x634>)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	0010      	movs	r0, r2
 80032dc:	4798      	blx	r3
 80032de:	e579      	b.n	8002dd4 <anchor_main+0xa0>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80032e0:	4b22      	ldr	r3, [pc, #136]	@ (800336c <anchor_main+0x638>)
 80032e2:	001a      	movs	r2, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	200f      	movs	r0, #15
 80032e8:	f00f fc19 	bl	8012b1e <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 80032ec:	f00f ff00 	bl	80130f0 <dwt_rxreset>
 80032f0:	e570      	b.n	8002dd4 <anchor_main+0xa0>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <anchor_main+0x638>)
 80032f4:	001a      	movs	r2, r3
 80032f6:	2100      	movs	r1, #0
 80032f8:	200f      	movs	r0, #15
 80032fa:	f00f fc10 	bl	8012b1e <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80032fe:	f00f fef7 	bl	80130f0 <dwt_rxreset>
 8003302:	e567      	b.n	8002dd4 <anchor_main+0xa0>
                    continue;
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	e565      	b.n	8002dd4 <anchor_main+0xa0>
                            continue;
 8003308:	46c0      	nop			@ (mov r8, r8)
        dwt_setrxtimeout(0);
 800330a:	e563      	b.n	8002dd4 <anchor_main+0xa0>
 800330c:	20000464 	.word	0x20000464
 8003310:	20000040 	.word	0x20000040
 8003314:	20000488 	.word	0x20000488
 8003318:	20000490 	.word	0x20000490
 800331c:	2000046e 	.word	0x2000046e
 8003320:	20000472 	.word	0x20000472
 8003324:	20000476 	.word	0x20000476
 8003328:	20000480 	.word	0x20000480
 800332c:	3bce48fa 	.word	0x3bce48fa
 8003330:	3db13518 	.word	0x3db13518
 8003334:	20000498 	.word	0x20000498
 8003338:	41b1dd19 	.word	0x41b1dd19
 800333c:	200004a0 	.word	0x200004a0
 8003340:	2000000a 	.word	0x2000000a
 8003344:	20000410 	.word	0x20000410
 8003348:	200003f8 	.word	0x200003f8
 800334c:	20000438 	.word	0x20000438
 8003350:	33333333 	.word	0x33333333
 8003354:	3feb3333 	.word	0x3feb3333
 8003358:	20000420 	.word	0x20000420
 800335c:	3fc33333 	.word	0x3fc33333
 8003360:	20000020 	.word	0x20000020
 8003364:	08016694 	.word	0x08016694
 8003368:	200004a8 	.word	0x200004a8
 800336c:	24279000 	.word	0x24279000

08003370 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8003376:	2200      	movs	r2, #0
 8003378:	2300      	movs	r3, #0
 800337a:	623a      	str	r2, [r7, #32]
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 800337e:	2314      	movs	r3, #20
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	0018      	movs	r0, r3
 8003384:	f00f fa61 	bl	801284a <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003388:	2304      	movs	r3, #4
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e020      	b.n	80033d0 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0e1b      	lsrs	r3, r3, #24
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	0215      	lsls	r5, r2, #8
 8003396:	431d      	orrs	r5, r3
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	021c      	lsls	r4, r3, #8
 800339c:	623c      	str	r4, [r7, #32]
 800339e:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80033a0:	2314      	movs	r3, #20
 80033a2:	18fa      	adds	r2, r7, r3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	18d3      	adds	r3, r2, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	0008      	movs	r0, r1
 80033b8:	4318      	orrs	r0, r3
 80033ba:	6038      	str	r0, [r7, #0]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	431a      	orrs	r2, r3
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	623a      	str	r2, [r7, #32]
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	dadb      	bge.n	800338e <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033da:	0010      	movs	r0, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b00a      	add	sp, #40	@ 0x28
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}

080033e4 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80033ea:	2200      	movs	r2, #0
 80033ec:	2300      	movs	r3, #0
 80033ee:	623a      	str	r2, [r7, #32]
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80033f2:	2314      	movs	r3, #20
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	0018      	movs	r0, r3
 80033f8:	f00f fa35 	bl	8012866 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80033fc:	2304      	movs	r3, #4
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e020      	b.n	8003444 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003408:	0215      	lsls	r5, r2, #8
 800340a:	431d      	orrs	r5, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	021c      	lsls	r4, r3, #8
 8003410:	623c      	str	r4, [r7, #32]
 8003412:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8003414:	2314      	movs	r3, #20
 8003416:	18fa      	adds	r2, r7, r3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	18d3      	adds	r3, r2, r3
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	0008      	movs	r0, r1
 800342c:	4318      	orrs	r0, r3
 800342e:	6038      	str	r0, [r7, #0]
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	431a      	orrs	r2, r3
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	623a      	str	r2, [r7, #32]
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b01      	subs	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	dadb      	bge.n	8003402 <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800344e:	0010      	movs	r0, r2
 8003450:	0019      	movs	r1, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b00a      	add	sp, #40	@ 0x28
 8003456:	bdb0      	pop	{r4, r5, r7, pc}

08003458 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e010      	b.n	8003490 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	188a      	adds	r2, r1, r2
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	0011      	movs	r1, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	00d2      	lsls	r2, r2, #3
 8003480:	4091      	lsls	r1, r2
 8003482:	000a      	movs	r2, r1
 8003484:	189a      	adds	r2, r3, r2
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b03      	cmp	r3, #3
 8003494:	ddeb      	ble.n	800346e <final_msg_get_ts+0x16>
    }
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}

080034a0 <send_at_msg>:
=======
08002424 <send_at_msg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void send_at_msg(char *msg)
{
<<<<<<< HEAD
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)msg, strlen(msg));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fc fe2c 	bl	8000108 <strlen>
 80034b0:	0003      	movs	r3, r0
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4b04      	ldr	r3, [pc, #16]	@ (80034c8 <send_at_msg+0x28>)
 80034b8:	0018      	movs	r0, r3
 80034ba:	f006 f9c7 	bl	800984c <HAL_UART_Transmit_IT>
}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	200006bc 	.word	0x200006bc

080034cc <main>:
=======
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)msg, strlen(msg));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f7fd fe6a 	bl	8000108 <strlen>
 8002434:	0003      	movs	r3, r0
 8002436:	b29a      	uxth	r2, r3
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <send_at_msg+0x28>)
 800243c:	0018      	movs	r0, r3
 800243e:	f006 faa1 	bl	8008984 <HAL_UART_Transmit_IT>
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	20000580 	.word	0x20000580

08002450 <main>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  send_at_msg_ptr = &send_at_msg;
 80034d2:	4b40      	ldr	r3, [pc, #256]	@ (80035d4 <main+0x108>)
 80034d4:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <main+0x10c>)
 80034d6:	601a      	str	r2, [r3, #0]
=======
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  send_at_msg_ptr = &send_at_msg;
 8002456:	4b3f      	ldr	r3, [pc, #252]	@ (8002554 <main+0x104>)
 8002458:	4a3f      	ldr	r2, [pc, #252]	@ (8002558 <main+0x108>)
 800245a:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80034d8:	f000 ff32 	bl	8004340 <HAL_Init>
=======
 800245c:	f001 f988 	bl	8003770 <HAL_Init>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80034dc:	f000 f890 	bl	8003600 <SystemClock_Config>
=======
 8002460:	f000 f88e 	bl	8002580 <SystemClock_Config>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80034e0:	f000 fa86 	bl	80039f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80034e4:	f000 fa5e 	bl	80039a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034e8:	f000 fa28 	bl	800393c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80034ec:	f000 f954 	bl	8003798 <MX_SPI1_Init>
  MX_ADC_Init();
 80034f0:	f000 f8f6 	bl	80036e0 <MX_ADC_Init>
  MX_SPI2_Init();
 80034f4:	f000 f98e 	bl	8003814 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80034f8:	f00e f8c6 	bl	8011688 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80034fc:	f000 f9c8 	bl	8003890 <MX_TIM3_Init>
=======
 8002464:	f000 fa84 	bl	8002970 <MX_GPIO_Init>
  MX_DMA_Init();
 8002468:	f000 fa5c 	bl	8002924 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800246c:	f000 fa26 	bl	80028bc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002470:	f000 f952 	bl	8002718 <MX_SPI1_Init>
  MX_ADC_Init();
 8002474:	f000 f8f4 	bl	8002660 <MX_ADC_Init>
  MX_SPI2_Init();
 8002478:	f000 f98c 	bl	8002794 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800247c:	f00e f9a2 	bl	80107c4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002480:	f000 f9c6 	bl	8002810 <MX_TIM3_Init>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN 2 */

  // Power to screen
  HAL_GPIO_WritePin(SCREEN_EN_GPIO_Port, SCREEN_EN_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8003500:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <main+0x110>)
 8003502:	2201      	movs	r2, #1
 8003504:	2104      	movs	r1, #4
 8003506:	0018      	movs	r0, r3
 8003508:	f002 f833 	bl	8005572 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_SET);
 800350c:	4b33      	ldr	r3, [pc, #204]	@ (80035dc <main+0x110>)
 800350e:	2201      	movs	r2, #1
 8003510:	2102      	movs	r1, #2
 8003512:	0018      	movs	r0, r3
 8003514:	f002 f82d 	bl	8005572 <HAL_GPIO_WritePin>

  LCD_init();
 8003518:	f00b fe9c 	bl	800f254 <LCD_init>

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 800351c:	2390      	movs	r3, #144	@ 0x90
 800351e:	05db      	lsls	r3, r3, #23
 8003520:	2201      	movs	r2, #1
 8003522:	2101      	movs	r1, #1
 8003524:	0018      	movs	r0, r3
 8003526:	f002 f824 	bl	8005572 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800352a:	23fa      	movs	r3, #250	@ 0xfa
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	0018      	movs	r0, r3
 8003530:	f000 ff6a 	bl	8004408 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8003534:	2390      	movs	r3, #144	@ 0x90
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2200      	movs	r2, #0
 800353a:	2101      	movs	r1, #1
 800353c:	0018      	movs	r0, r3
 800353e:	f002 f818 	bl	8005572 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003542:	2064      	movs	r0, #100	@ 0x64
 8003544:	f000 ff60 	bl	8004408 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8003548:	2390      	movs	r3, #144	@ 0x90
 800354a:	05db      	lsls	r3, r3, #23
 800354c:	2201      	movs	r2, #1
 800354e:	2101      	movs	r1, #1
 8003550:	0018      	movs	r0, r3
 8003552:	f002 f80e 	bl	8005572 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003556:	2064      	movs	r0, #100	@ 0x64
 8003558:	f000 ff56 	bl	8004408 <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	00da      	lsls	r2, r3, #3
 8003560:	491f      	ldr	r1, [pc, #124]	@ (80035e0 <main+0x114>)
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <main+0x118>)
 8003564:	0018      	movs	r0, r3
 8003566:	f007 fbd0 	bl	800ad0a <HAL_UARTEx_ReceiveToIdle_DMA>
=======
 8002484:	4b35      	ldr	r3, [pc, #212]	@ (800255c <main+0x10c>)
 8002486:	2201      	movs	r2, #1
 8002488:	2104      	movs	r1, #4
 800248a:	0018      	movs	r0, r3
 800248c:	f002 f90d 	bl	80046aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCREEN_EN_AUX_GPIO_Port, SCREEN_EN_AUX_Pin, GPIO_PIN_SET);
 8002490:	4b32      	ldr	r3, [pc, #200]	@ (800255c <main+0x10c>)
 8002492:	2201      	movs	r2, #1
 8002494:	2102      	movs	r1, #2
 8002496:	0018      	movs	r0, r3
 8002498:	f002 f907 	bl	80046aa <HAL_GPIO_WritePin>

  LCD_init();
 800249c:	f00b ff78 	bl	800e390 <LCD_init>

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 80024a0:	2390      	movs	r3, #144	@ 0x90
 80024a2:	05db      	lsls	r3, r3, #23
 80024a4:	2201      	movs	r2, #1
 80024a6:	2101      	movs	r1, #1
 80024a8:	0018      	movs	r0, r3
 80024aa:	f002 f8fe 	bl	80046aa <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80024ae:	23fa      	movs	r3, #250	@ 0xfa
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	0018      	movs	r0, r3
 80024b4:	f001 f9c0 	bl	8003838 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 80024b8:	2390      	movs	r3, #144	@ 0x90
 80024ba:	05db      	lsls	r3, r3, #23
 80024bc:	2200      	movs	r2, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	0018      	movs	r0, r3
 80024c2:	f002 f8f2 	bl	80046aa <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80024c6:	2064      	movs	r0, #100	@ 0x64
 80024c8:	f001 f9b6 	bl	8003838 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 80024cc:	2390      	movs	r3, #144	@ 0x90
 80024ce:	05db      	lsls	r3, r3, #23
 80024d0:	2201      	movs	r2, #1
 80024d2:	2101      	movs	r1, #1
 80024d4:	0018      	movs	r0, r3
 80024d6:	f002 f8e8 	bl	80046aa <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80024da:	2064      	movs	r0, #100	@ 0x64
 80024dc:	f001 f9ac 	bl	8003838 <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	00da      	lsls	r2, r3, #3
 80024e4:	491e      	ldr	r1, [pc, #120]	@ (8002560 <main+0x110>)
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <main+0x114>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f007 fcaa 	bl	8009e42 <HAL_UARTEx_ReceiveToIdle_DMA>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  // Startup lcd text

  UG_FontSetTransparency(1);
<<<<<<< HEAD
 800356a:	2001      	movs	r0, #1
 800356c:	f00c fae4 	bl	800fb38 <UG_FontSetTransparency>
  UG_FillScreen(C_BLACK);
 8003570:	2000      	movs	r0, #0
 8003572:	f00b ffa7 	bl	800f4c4 <UG_FillScreen>

  LCD_PutStr(50, 20, "NEAR ANCHOR", FONT_16X26, C_WHITE, C_BLACK);
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <main+0x11c>)
 8003578:	4a1c      	ldr	r2, [pc, #112]	@ (80035ec <main+0x120>)
 800357a:	2100      	movs	r1, #0
 800357c:	9101      	str	r1, [sp, #4]
 800357e:	491c      	ldr	r1, [pc, #112]	@ (80035f0 <main+0x124>)
 8003580:	9100      	str	r1, [sp, #0]
 8003582:	2114      	movs	r1, #20
 8003584:	2032      	movs	r0, #50	@ 0x32
 8003586:	f00b fe0e 	bl	800f1a6 <LCD_PutStr>
  LCD_PutStr(50, 50, "DESIGNED BY:", FONT_16X26, C_WHITE, C_BLACK);
 800358a:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <main+0x11c>)
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <main+0x128>)
 800358e:	2100      	movs	r1, #0
 8003590:	9101      	str	r1, [sp, #4]
 8003592:	4917      	ldr	r1, [pc, #92]	@ (80035f0 <main+0x124>)
 8003594:	9100      	str	r1, [sp, #0]
 8003596:	2132      	movs	r1, #50	@ 0x32
 8003598:	2032      	movs	r0, #50	@ 0x32
 800359a:	f00b fe04 	bl	800f1a6 <LCD_PutStr>
  LCD_PutStr(50, 80, "TERRY TAO", FONT_16X26, C_WHITE, C_BLACK);
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <main+0x11c>)
 80035a0:	4a15      	ldr	r2, [pc, #84]	@ (80035f8 <main+0x12c>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	9101      	str	r1, [sp, #4]
 80035a6:	4912      	ldr	r1, [pc, #72]	@ (80035f0 <main+0x124>)
 80035a8:	9100      	str	r1, [sp, #0]
 80035aa:	2150      	movs	r1, #80	@ 0x50
 80035ac:	2032      	movs	r0, #50	@ 0x32
 80035ae:	f00b fdfa 	bl	800f1a6 <LCD_PutStr>
  LCD_PutStr(50, 110, "THOR HELGESON", FONT_16X26, C_WHITE, C_BLACK);
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <main+0x11c>)
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <main+0x130>)
 80035b6:	2100      	movs	r1, #0
 80035b8:	9101      	str	r1, [sp, #4]
 80035ba:	490d      	ldr	r1, [pc, #52]	@ (80035f0 <main+0x124>)
 80035bc:	9100      	str	r1, [sp, #0]
 80035be:	216e      	movs	r1, #110	@ 0x6e
 80035c0:	2032      	movs	r0, #50	@ 0x32
 80035c2:	f00b fdf0 	bl	800f1a6 <LCD_PutStr>
#ifdef FLASH_TAG
  tag_main();
#endif

#ifdef FLASH_ANCHOR
  anchor_main(send_at_msg_ptr);
 80035c6:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <main+0x108>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7ff fbb2 	bl	8002d34 <anchor_main>
=======
 80024ee:	2001      	movs	r0, #1
 80024f0:	f00c fbc0 	bl	800ec74 <UG_FontSetTransparency>
  UG_FillScreen(C_BLACK);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f00c f883 	bl	800e600 <UG_FillScreen>

  LCD_PutStr(50, 20, "NEAR ANCHOR", FONT_16X26, C_WHITE, C_BLACK);
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <main+0x118>)
 80024fc:	4a1b      	ldr	r2, [pc, #108]	@ (800256c <main+0x11c>)
 80024fe:	2100      	movs	r1, #0
 8002500:	9101      	str	r1, [sp, #4]
 8002502:	491b      	ldr	r1, [pc, #108]	@ (8002570 <main+0x120>)
 8002504:	9100      	str	r1, [sp, #0]
 8002506:	2114      	movs	r1, #20
 8002508:	2032      	movs	r0, #50	@ 0x32
 800250a:	f00b feea 	bl	800e2e2 <LCD_PutStr>
  LCD_PutStr(50, 50, "DESIGNED BY:", FONT_16X26, C_WHITE, C_BLACK);
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <main+0x118>)
 8002510:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <main+0x124>)
 8002512:	2100      	movs	r1, #0
 8002514:	9101      	str	r1, [sp, #4]
 8002516:	4916      	ldr	r1, [pc, #88]	@ (8002570 <main+0x120>)
 8002518:	9100      	str	r1, [sp, #0]
 800251a:	2132      	movs	r1, #50	@ 0x32
 800251c:	2032      	movs	r0, #50	@ 0x32
 800251e:	f00b fee0 	bl	800e2e2 <LCD_PutStr>
  LCD_PutStr(50, 80, "TERRY TAO", FONT_16X26, C_WHITE, C_BLACK);
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <main+0x118>)
 8002524:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <main+0x128>)
 8002526:	2100      	movs	r1, #0
 8002528:	9101      	str	r1, [sp, #4]
 800252a:	4911      	ldr	r1, [pc, #68]	@ (8002570 <main+0x120>)
 800252c:	9100      	str	r1, [sp, #0]
 800252e:	2150      	movs	r1, #80	@ 0x50
 8002530:	2032      	movs	r0, #50	@ 0x32
 8002532:	f00b fed6 	bl	800e2e2 <LCD_PutStr>
  LCD_PutStr(50, 110, "THOR HELGESON", FONT_16X26, C_WHITE, C_BLACK);
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <main+0x118>)
 8002538:	4a10      	ldr	r2, [pc, #64]	@ (800257c <main+0x12c>)
 800253a:	2100      	movs	r1, #0
 800253c:	9101      	str	r1, [sp, #4]
 800253e:	490c      	ldr	r1, [pc, #48]	@ (8002570 <main+0x120>)
 8002540:	9100      	str	r1, [sp, #0]
 8002542:	216e      	movs	r1, #110	@ 0x6e
 8002544:	2032      	movs	r0, #50	@ 0x32
 8002546:	f00b fecc 	bl	800e2e2 <LCD_PutStr>
  //  }

  //  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);

#ifdef FLASH_TAG
  tag_main();
 800254a:	f000 fea1 	bl	8003290 <tag_main>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
<<<<<<< HEAD
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	e7fd      	b.n	80035d0 <main+0x104>
 80035d4:	200007b8 	.word	0x200007b8
 80035d8:	080034a1 	.word	0x080034a1
 80035dc:	48000400 	.word	0x48000400
 80035e0:	200007bc 	.word	0x200007bc
 80035e4:	200006bc 	.word	0x200006bc
 80035e8:	08016924 	.word	0x08016924
 80035ec:	080166f8 	.word	0x080166f8
 80035f0:	0000ffff 	.word	0x0000ffff
 80035f4:	08016704 	.word	0x08016704
 80035f8:	08016714 	.word	0x08016714
 80035fc:	08016720 	.word	0x08016720

08003600 <SystemClock_Config>:
=======
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	e7fd      	b.n	800254e <main+0xfe>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	2000067c 	.word	0x2000067c
 8002558:	08002425 	.word	0x08002425
 800255c:	48000400 	.word	0x48000400
 8002560:	20000680 	.word	0x20000680
 8002564:	20000580 	.word	0x20000580
 8002568:	08015340 	.word	0x08015340
 800256c:	08015190 	.word	0x08015190
 8002570:	0000ffff 	.word	0x0000ffff
 8002574:	0801519c 	.word	0x0801519c
 8002578:	080151ac 	.word	0x080151ac
 800257c:	080151b8 	.word	0x080151b8

08002580 <SystemClock_Config>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b099      	sub	sp, #100	@ 0x64
 8003604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003606:	242c      	movs	r4, #44	@ 0x2c
 8003608:	193b      	adds	r3, r7, r4
 800360a:	0018      	movs	r0, r3
 800360c:	2334      	movs	r3, #52	@ 0x34
 800360e:	001a      	movs	r2, r3
 8003610:	2100      	movs	r1, #0
 8003612:	f010 fd5f 	bl	80140d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003616:	231c      	movs	r3, #28
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	0018      	movs	r0, r3
 800361c:	2310      	movs	r3, #16
 800361e:	001a      	movs	r2, r3
 8003620:	2100      	movs	r1, #0
 8003622:	f010 fd57 	bl	80140d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003626:	003b      	movs	r3, r7
 8003628:	0018      	movs	r0, r3
 800362a:	231c      	movs	r3, #28
 800362c:	001a      	movs	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	f010 fd50 	bl	80140d4 <memset>
=======
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b099      	sub	sp, #100	@ 0x64
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	242c      	movs	r4, #44	@ 0x2c
 8002588:	193b      	adds	r3, r7, r4
 800258a:	0018      	movs	r0, r3
 800258c:	2334      	movs	r3, #52	@ 0x34
 800258e:	001a      	movs	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	f010 fe1b 	bl	80131cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002596:	231c      	movs	r3, #28
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	0018      	movs	r0, r3
 800259c:	2310      	movs	r3, #16
 800259e:	001a      	movs	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f010 fe13 	bl	80131cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025a6:	003b      	movs	r3, r7
 80025a8:	0018      	movs	r0, r3
 80025aa:	231c      	movs	r3, #28
 80025ac:	001a      	movs	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	f010 fe0c 	bl	80131cc <memset>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
<<<<<<< HEAD
 8003634:	0021      	movs	r1, r4
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2232      	movs	r2, #50	@ 0x32
 800363a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2201      	movs	r2, #1
 8003640:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003642:	187b      	adds	r3, r7, r1
 8003644:	2201      	movs	r2, #1
 8003646:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003648:	187b      	adds	r3, r7, r1
 800364a:	2201      	movs	r2, #1
 800364c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800364e:	187b      	adds	r3, r7, r1
 8003650:	2210      	movs	r2, #16
 8003652:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2210      	movs	r2, #16
 8003658:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365a:	187b      	adds	r3, r7, r1
 800365c:	2202      	movs	r2, #2
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003660:	187b      	adds	r3, r7, r1
 8003662:	2280      	movs	r2, #128	@ 0x80
 8003664:	0212      	lsls	r2, r2, #8
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003668:	187b      	adds	r3, r7, r1
 800366a:	22e0      	movs	r2, #224	@ 0xe0
 800366c:	0352      	lsls	r2, r2, #13
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2201      	movs	r2, #1
 8003674:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003676:	187b      	adds	r3, r7, r1
 8003678:	0018      	movs	r0, r3
 800367a:	f003 fdf5 	bl	8007268 <HAL_RCC_OscConfig>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d001      	beq.n	8003686 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003682:	f000 fb1b 	bl	8003cbc <Error_Handler>
=======
 80025b4:	0021      	movs	r1, r4
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2232      	movs	r2, #50	@ 0x32
 80025ba:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2201      	movs	r2, #1
 80025c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2201      	movs	r2, #1
 80025c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2210      	movs	r2, #16
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2210      	movs	r2, #16
 80025d8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2202      	movs	r2, #2
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	0212      	lsls	r2, r2, #8
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	22e0      	movs	r2, #224	@ 0xe0
 80025ec:	0352      	lsls	r2, r2, #13
 80025ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2201      	movs	r2, #1
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	0018      	movs	r0, r3
 80025fa:	f003 fed1 	bl	80063a0 <HAL_RCC_OscConfig>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002602:	f000 fb1b 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8003686:	211c      	movs	r1, #28
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2207      	movs	r2, #7
 800368c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2202      	movs	r2, #2
 8003692:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2101      	movs	r1, #1
 80036a4:	0018      	movs	r0, r3
 80036a6:	f004 f965 	bl	8007974 <HAL_RCC_ClockConfig>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d001      	beq.n	80036b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80036ae:	f000 fb05 	bl	8003cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80036b2:	003b      	movs	r3, r7
 80036b4:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <SystemClock_Config+0xdc>)
 80036b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036b8:	003b      	movs	r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036be:	003b      	movs	r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c4:	003b      	movs	r3, r7
 80036c6:	0018      	movs	r0, r3
 80036c8:	f004 fac0 	bl	8007c4c <HAL_RCCEx_PeriphCLKConfig>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80036d0:	f000 faf4 	bl	8003cbc <Error_Handler>
  }
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b019      	add	sp, #100	@ 0x64
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	00020001 	.word	0x00020001

080036e0 <MX_ADC_Init>:
=======
 8002606:	211c      	movs	r1, #28
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2207      	movs	r2, #7
 800260c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2202      	movs	r2, #2
 8002612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2101      	movs	r1, #1
 8002624:	0018      	movs	r0, r3
 8002626:	f004 fa41 	bl	8006aac <HAL_RCC_ClockConfig>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800262e:	f000 fb05 	bl	8002c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002632:	003b      	movs	r3, r7
 8002634:	4a09      	ldr	r2, [pc, #36]	@ (800265c <SystemClock_Config+0xdc>)
 8002636:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002638:	003b      	movs	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800263e:	003b      	movs	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002644:	003b      	movs	r3, r7
 8002646:	0018      	movs	r0, r3
 8002648:	f004 fb9c 	bl	8006d84 <HAL_RCCEx_PeriphCLKConfig>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d001      	beq.n	8002654 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002650:	f000 faf4 	bl	8002c3c <Error_Handler>
  }
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b019      	add	sp, #100	@ 0x64
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	00020001 	.word	0x00020001

08002660 <MX_ADC_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
<<<<<<< HEAD
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
=======
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	0018      	movs	r0, r3
 80036ea:	230c      	movs	r3, #12
 80036ec:	001a      	movs	r2, r3
 80036ee:	2100      	movs	r1, #0
 80036f0:	f010 fcf0 	bl	80140d4 <memset>
=======
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	0018      	movs	r0, r3
 800266a:	230c      	movs	r3, #12
 800266c:	001a      	movs	r2, r3
 800266e:	2100      	movs	r1, #0
 8002670:	f010 fdac 	bl	80131cc <memset>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
<<<<<<< HEAD
 80036f4:	4b26      	ldr	r3, [pc, #152]	@ (8003790 <MX_ADC_Init+0xb0>)
 80036f6:	4a27      	ldr	r2, [pc, #156]	@ (8003794 <MX_ADC_Init+0xb4>)
 80036f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036fa:	4b25      	ldr	r3, [pc, #148]	@ (8003790 <MX_ADC_Init+0xb0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003700:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003706:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <MX_ADC_Init+0xb0>)
 800370e:	2201      	movs	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003712:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003714:	2208      	movs	r2, #8
 8003716:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003718:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <MX_ADC_Init+0xb0>)
 800371a:	2200      	movs	r2, #0
 800371c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003720:	2200      	movs	r2, #0
 8003722:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003724:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003726:	2200      	movs	r2, #0
 8003728:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <MX_ADC_Init+0xb0>)
 800372c:	2200      	movs	r2, #0
 800372e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003730:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003732:	22c2      	movs	r2, #194	@ 0xc2
 8003734:	32ff      	adds	r2, #255	@ 0xff
 8003736:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <MX_ADC_Init+0xb0>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800373e:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003740:	2224      	movs	r2, #36	@ 0x24
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003748:	2201      	movs	r2, #1
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <MX_ADC_Init+0xb0>)
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fe7e 	bl	8004450 <HAL_ADC_Init>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003758:	f000 fab0 	bl	8003cbc <Error_Handler>
=======
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <MX_ADC_Init+0xb0>)
 8002676:	4a27      	ldr	r2, [pc, #156]	@ (8002714 <MX_ADC_Init+0xb4>)
 8002678:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800267a:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <MX_ADC_Init+0xb0>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <MX_ADC_Init+0xb0>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002686:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <MX_ADC_Init+0xb0>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <MX_ADC_Init+0xb0>)
 800268e:	2201      	movs	r2, #1
 8002690:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002692:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <MX_ADC_Init+0xb0>)
 8002694:	2208      	movs	r2, #8
 8002696:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <MX_ADC_Init+0xb0>)
 800269a:	2200      	movs	r2, #0
 800269c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026b2:	22c2      	movs	r2, #194	@ 0xc2
 80026b4:	32ff      	adds	r2, #255	@ 0xff
 80026b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026b8:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80026be:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026c0:	2224      	movs	r2, #36	@ 0x24
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 f8d6 	bl	8003880 <HAL_ADC_Init>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80026d8:	f000 fab0 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< HEAD
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	2208      	movs	r2, #8
 8003760:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	2280      	movs	r2, #128	@ 0x80
 8003766:	0152      	lsls	r2, r2, #5
 8003768:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	2280      	movs	r2, #128	@ 0x80
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <MX_ADC_Init+0xb0>)
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f001 f8a1 	bl	80048c0 <HAL_ADC_ConfigChannel>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003782:	f000 fa9b 	bl	8003cbc <Error_Handler>
=======
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2208      	movs	r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2280      	movs	r2, #128	@ 0x80
 80026e6:	0152      	lsls	r2, r2, #5
 80026e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	0552      	lsls	r2, r2, #21
 80026f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <MX_ADC_Init+0xb0>)
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f001 fa01 	bl	8003b00 <HAL_ADC_ConfigChannel>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002702:	f000 fa9b 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
<<<<<<< HEAD
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	20000528 	.word	0x20000528
 8003794:	40012400 	.word	0x40012400

08003798 <MX_SPI1_Init>:
=======
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	200003ec 	.word	0x200003ec
 8002714:	40012400 	.word	0x40012400

08002718 <MX_SPI1_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
=======
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <MX_SPI1_Init+0x74>)
 800379e:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <MX_SPI1_Init+0x78>)
 80037a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037a2:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <MX_SPI1_Init+0x74>)
 80037a4:	2282      	movs	r2, #130	@ 0x82
 80037a6:	0052      	lsls	r2, r2, #1
 80037a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <MX_SPI1_Init+0x74>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b0:	4b16      	ldr	r3, [pc, #88]	@ (800380c <MX_SPI1_Init+0x74>)
 80037b2:	22e0      	movs	r2, #224	@ 0xe0
 80037b4:	00d2      	lsls	r2, r2, #3
 80037b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <MX_SPI1_Init+0x74>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037be:	4b13      	ldr	r3, [pc, #76]	@ (800380c <MX_SPI1_Init+0x74>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <MX_SPI1_Init+0x74>)
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	0092      	lsls	r2, r2, #2
 80037ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <MX_SPI1_Init+0x74>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <MX_SPI1_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <MX_SPI1_Init+0x74>)
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <MX_SPI1_Init+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <MX_SPI1_Init+0x74>)
 80037e6:	2207      	movs	r2, #7
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <MX_SPI1_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037f0:	4b06      	ldr	r3, [pc, #24]	@ (800380c <MX_SPI1_Init+0x74>)
 80037f2:	2208      	movs	r2, #8
 80037f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <MX_SPI1_Init+0x74>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f004 fb25 	bl	8007e48 <HAL_SPI_Init>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003802:	f000 fa5b 	bl	8003cbc <Error_Handler>
=======
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MX_SPI1_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <MX_SPI1_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <MX_SPI1_Init+0x74>)
 8002724:	2282      	movs	r2, #130	@ 0x82
 8002726:	0052      	lsls	r2, r2, #1
 8002728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <MX_SPI1_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <MX_SPI1_Init+0x74>)
 8002732:	22e0      	movs	r2, #224	@ 0xe0
 8002734:	00d2      	lsls	r2, r2, #3
 8002736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <MX_SPI1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <MX_SPI1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <MX_SPI1_Init+0x74>)
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <MX_SPI1_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <MX_SPI1_Init+0x74>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <MX_SPI1_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <MX_SPI1_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MX_SPI1_Init+0x74>)
 8002766:	2207      	movs	r2, #7
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <MX_SPI1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <MX_SPI1_Init+0x74>)
 8002772:	2208      	movs	r2, #8
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <MX_SPI1_Init+0x74>)
 8002778:	0018      	movs	r0, r3
 800277a:	f004 fc01 	bl	8006f80 <HAL_SPI_Init>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 fa5b 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000568 	.word	0x20000568
 8003810:	40013000 	.word	0x40013000

08003814 <MX_SPI2_Init>:
=======
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000042c 	.word	0x2000042c
 8002790:	40013000 	.word	0x40013000

08002794 <MX_SPI2_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
<<<<<<< HEAD
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
=======
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
<<<<<<< HEAD
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <MX_SPI2_Init+0x74>)
 800381a:	4a1c      	ldr	r2, [pc, #112]	@ (800388c <MX_SPI2_Init+0x78>)
 800381c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800381e:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003820:	2282      	movs	r2, #130	@ 0x82
 8003822:	0052      	lsls	r2, r2, #1
 8003824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003826:	4b18      	ldr	r3, [pc, #96]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800382c:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <MX_SPI2_Init+0x74>)
 800382e:	22e0      	movs	r2, #224	@ 0xe0
 8003830:	00d2      	lsls	r2, r2, #3
 8003832:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <MX_SPI2_Init+0x74>)
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003842:	2280      	movs	r2, #128	@ 0x80
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <MX_SPI2_Init+0x74>)
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003854:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <MX_SPI2_Init+0x74>)
 800385c:	2200      	movs	r2, #0
 800385e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003862:	2207      	movs	r2, #7
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003866:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <MX_SPI2_Init+0x74>)
 800386e:	2208      	movs	r2, #8
 8003870:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <MX_SPI2_Init+0x74>)
 8003874:	0018      	movs	r0, r3
 8003876:	f004 fae7 	bl	8007e48 <HAL_SPI_Init>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d001      	beq.n	8003882 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800387e:	f000 fa1d 	bl	8003cbc <Error_Handler>
=======
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_SPI2_Init+0x74>)
 800279a:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <MX_SPI2_Init+0x78>)
 800279c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027a0:	2282      	movs	r2, #130	@ 0x82
 80027a2:	0052      	lsls	r2, r2, #1
 80027a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027ae:	22e0      	movs	r2, #224	@ 0xe0
 80027b0:	00d2      	lsls	r2, r2, #3
 80027b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ba:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027e2:	2207      	movs	r2, #7
 80027e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027ee:	2208      	movs	r2, #8
 80027f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <MX_SPI2_Init+0x74>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f004 fbc3 	bl	8006f80 <HAL_SPI_Init>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027fe:	f000 fa1d 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< HEAD
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200005cc 	.word	0x200005cc
 800388c:	40003800 	.word	0x40003800

08003890 <MX_TIM3_Init>:
=======
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000490 	.word	0x20000490
 800280c:	40003800 	.word	0x40003800

08002810 <MX_TIM3_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
=======
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8003896:	2308      	movs	r3, #8
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	0018      	movs	r0, r3
 800389c:	2310      	movs	r3, #16
 800389e:	001a      	movs	r2, r3
 80038a0:	2100      	movs	r1, #0
 80038a2:	f010 fc17 	bl	80140d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a6:	003b      	movs	r3, r7
 80038a8:	0018      	movs	r0, r3
 80038aa:	2308      	movs	r3, #8
 80038ac:	001a      	movs	r2, r3
 80038ae:	2100      	movs	r1, #0
 80038b0:	f010 fc10 	bl	80140d4 <memset>
=======
 8002816:	2308      	movs	r3, #8
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	0018      	movs	r0, r3
 800281c:	2310      	movs	r3, #16
 800281e:	001a      	movs	r2, r3
 8002820:	2100      	movs	r1, #0
 8002822:	f010 fcd3 	bl	80131cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002826:	003b      	movs	r3, r7
 8002828:	0018      	movs	r0, r3
 800282a:	2308      	movs	r3, #8
 800282c:	001a      	movs	r2, r3
 800282e:	2100      	movs	r1, #0
 8002830:	f010 fccc 	bl	80131cc <memset>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 80038b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038b6:	4a20      	ldr	r2, [pc, #128]	@ (8003938 <MX_TIM3_Init+0xa8>)
 80038b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038bc:	22f4      	movs	r2, #244	@ 0xf4
 80038be:	32ff      	adds	r2, #255	@ 0xff
 80038c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 80038c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038ca:	2268      	movs	r2, #104	@ 0x68
 80038cc:	32ff      	adds	r2, #255	@ 0xff
 80038ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d0:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d6:	4b17      	ldr	r3, [pc, #92]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038de:	0018      	movs	r0, r3
 80038e0:	f005 fb7e 	bl	8008fe0 <HAL_TIM_Base_Init>
 80038e4:	1e03      	subs	r3, r0, #0
 80038e6:	d001      	beq.n	80038ec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80038e8:	f000 f9e8 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ec:	2108      	movs	r1, #8
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2280      	movs	r2, #128	@ 0x80
 80038f2:	0152      	lsls	r2, r2, #5
 80038f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038f6:	187a      	adds	r2, r7, r1
 80038f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <MX_TIM3_Init+0xa4>)
 80038fa:	0011      	movs	r1, r2
 80038fc:	0018      	movs	r0, r3
 80038fe:	f005 fcad 	bl	800925c <HAL_TIM_ConfigClockSource>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d001      	beq.n	800390a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003906:	f000 f9d9 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390a:	003b      	movs	r3, r7
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003910:	003b      	movs	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003916:	003a      	movs	r2, r7
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <MX_TIM3_Init+0xa4>)
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f005 fec1 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d001      	beq.n	800392a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003926:	f000 f9c9 	bl	8003cbc <Error_Handler>
=======
 8002834:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 8002836:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <MX_TIM3_Init+0xa8>)
 8002838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 800283c:	22f4      	movs	r2, #244	@ 0xf4
 800283e:	32ff      	adds	r2, #255	@ 0xff
 8002840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 800284a:	2268      	movs	r2, #104	@ 0x68
 800284c:	32ff      	adds	r2, #255	@ 0xff
 800284e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002856:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800285c:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 800285e:	0018      	movs	r0, r3
 8002860:	f005 fc5a 	bl	8008118 <HAL_TIM_Base_Init>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002868:	f000 f9e8 	bl	8002c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286c:	2108      	movs	r1, #8
 800286e:	187b      	adds	r3, r7, r1
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	0152      	lsls	r2, r2, #5
 8002874:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002876:	187a      	adds	r2, r7, r1
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f005 fd89 	bl	8008394 <HAL_TIM_ConfigClockSource>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002886:	f000 f9d9 	bl	8002c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288a:	003b      	movs	r3, r7
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	003b      	movs	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002896:	003a      	movs	r2, r7
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <MX_TIM3_Init+0xa4>)
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f005 ff9d 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80028a6:	f000 f9c9 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	20000674 	.word	0x20000674
 8003938:	40000400 	.word	0x40000400

0800393c <MX_USART1_UART_Init>:
=======
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b006      	add	sp, #24
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	20000538 	.word	0x20000538
 80028b8:	40000400 	.word	0x40000400

080028bc <MX_USART1_UART_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
=======
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003942:	4a17      	ldr	r2, [pc, #92]	@ (80039a0 <MX_USART1_UART_Init+0x64>)
 8003944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003946:	4b15      	ldr	r3, [pc, #84]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003948:	2296      	movs	r2, #150	@ 0x96
 800394a:	0192      	lsls	r2, r2, #6
 800394c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <MX_USART1_UART_Init+0x60>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003960:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003962:	220c      	movs	r2, #12
 8003964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <MX_USART1_UART_Init+0x60>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003972:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003978:	4b08      	ldr	r3, [pc, #32]	@ (800399c <MX_USART1_UART_Init+0x60>)
 800397a:	2210      	movs	r2, #16
 800397c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003980:	2280      	movs	r2, #128	@ 0x80
 8003982:	0152      	lsls	r2, r2, #5
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <MX_USART1_UART_Init+0x60>)
 8003988:	0018      	movs	r0, r3
 800398a:	f005 fef9 	bl	8009780 <HAL_UART_Init>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d001      	beq.n	8003996 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003992:	f000 f993 	bl	8003cbc <Error_Handler>
=======
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028c2:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <MX_USART1_UART_Init+0x64>)
 80028c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028c8:	2296      	movs	r2, #150	@ 0x96
 80028ca:	0192      	lsls	r2, r2, #6
 80028cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ce:	4b13      	ldr	r3, [pc, #76]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e0:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028e2:	220c      	movs	r2, #12
 80028e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <MX_USART1_UART_Init+0x60>)
 80028fa:	2210      	movs	r2, #16
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <MX_USART1_UART_Init+0x60>)
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	0152      	lsls	r2, r2, #5
 8002904:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <MX_USART1_UART_Init+0x60>)
 8002908:	0018      	movs	r0, r3
 800290a:	f005 ffd5 	bl	80088b8 <HAL_UART_Init>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d001      	beq.n	8002916 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002912:	f000 f993 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200006bc 	.word	0x200006bc
 80039a0:	40013800 	.word	0x40013800

080039a4 <MX_DMA_Init>:
=======
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000580 	.word	0x20000580
 8002920:	40013800 	.word	0x40013800

08002924 <MX_DMA_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039aa:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <MX_DMA_Init+0x48>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <MX_DMA_Init+0x48>)
 80039b0:	2101      	movs	r1, #1
 80039b2:	430a      	orrs	r2, r1
 80039b4:	615a      	str	r2, [r3, #20]
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <MX_DMA_Init+0x48>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	4013      	ands	r3, r2
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
=======
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <MX_DMA_Init+0x48>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <MX_DMA_Init+0x48>)
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	615a      	str	r2, [r3, #20]
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <MX_DMA_Init+0x48>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
<<<<<<< HEAD
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	200a      	movs	r0, #10
 80039c8:	f001 f9da 	bl	8004d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80039cc:	200a      	movs	r0, #10
 80039ce:	f001 f9ec 	bl	8004daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	200b      	movs	r0, #11
 80039d8:	f001 f9d2 	bl	8004d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80039dc:	200b      	movs	r0, #11
 80039de:	f001 f9e4 	bl	8004daa <HAL_NVIC_EnableIRQ>

}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	40021000 	.word	0x40021000

080039f0 <MX_GPIO_Init>:
=======
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	200a      	movs	r0, #10
 8002948:	f001 fab6 	bl	8003eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800294c:	200a      	movs	r0, #10
 800294e:	f001 fac8 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	200b      	movs	r0, #11
 8002958:	f001 faae 	bl	8003eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800295c:	200b      	movs	r0, #11
 800295e:	f001 fac0 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	40021000 	.word	0x40021000

08002970 <MX_GPIO_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f6:	240c      	movs	r4, #12
 80039f8:	193b      	adds	r3, r7, r4
 80039fa:	0018      	movs	r0, r3
 80039fc:	2314      	movs	r3, #20
 80039fe:	001a      	movs	r2, r3
 8003a00:	2100      	movs	r1, #0
 8003a02:	f010 fb67 	bl	80140d4 <memset>
=======
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b089      	sub	sp, #36	@ 0x24
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	240c      	movs	r4, #12
 8002978:	193b      	adds	r3, r7, r4
 800297a:	0018      	movs	r0, r3
 800297c:	2314      	movs	r3, #20
 800297e:	001a      	movs	r2, r3
 8002980:	2100      	movs	r1, #0
 8002982:	f010 fc23 	bl	80131cc <memset>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
<<<<<<< HEAD
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	4b73      	ldr	r3, [pc, #460]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a0c:	2180      	movs	r1, #128	@ 0x80
 8003a0e:	03c9      	lsls	r1, r1, #15
 8003a10:	430a      	orrs	r2, r1
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	4b70      	ldr	r3, [pc, #448]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	03db      	lsls	r3, r3, #15
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a22:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a28:	2180      	movs	r1, #128	@ 0x80
 8003a2a:	0289      	lsls	r1, r1, #10
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	615a      	str	r2, [r3, #20]
 8003a30:	4b69      	ldr	r3, [pc, #420]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	2380      	movs	r3, #128	@ 0x80
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	4013      	ands	r3, r2
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a3e:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	4b65      	ldr	r3, [pc, #404]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	02c9      	lsls	r1, r1, #11
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	4b62      	ldr	r3, [pc, #392]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	02db      	lsls	r3, r3, #11
 8003a54:	4013      	ands	r3, r2
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8003a5a:	2390      	movs	r3, #144	@ 0x90
 8003a5c:	05db      	lsls	r3, r3, #23
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2111      	movs	r1, #17
 8003a62:	0018      	movs	r0, r3
 8003a64:	f001 fd85 	bl	8005572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin, GPIO_PIN_RESET);
 8003a68:	495c      	ldr	r1, [pc, #368]	@ (8003bdc <MX_GPIO_Init+0x1ec>)
 8003a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f001 fd7f 	bl	8005572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 8003a74:	2398      	movs	r3, #152	@ 0x98
 8003a76:	015b      	lsls	r3, r3, #5
 8003a78:	4859      	ldr	r0, [pc, #356]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	f001 fd78 	bl	8005572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	2390      	movs	r3, #144	@ 0x90
 8003a9e:	05db      	lsls	r3, r3, #23
 8003aa0:	0011      	movs	r1, r2
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f001 fbd0 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	2204      	movs	r2, #4
 8003aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	2288      	movs	r2, #136	@ 0x88
 8003ab2:	0352      	lsls	r2, r2, #13
 8003ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003abc:	193a      	adds	r2, r7, r4
 8003abe:	2390      	movs	r3, #144	@ 0x90
 8003ac0:	05db      	lsls	r3, r3, #23
 8003ac2:	0011      	movs	r1, r2
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f001 fbbf 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	2210      	movs	r2, #16
 8003ace:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2203      	movs	r2, #3
 8003ae0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	193a      	adds	r2, r7, r4
 8003ae4:	2390      	movs	r3, #144	@ 0x90
 8003ae6:	05db      	lsls	r3, r3, #23
 8003ae8:	0011      	movs	r1, r2
 8003aea:	0018      	movs	r0, r3
 8003aec:	f001 fbac 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_AUX_Pin SCREEN_EN_Pin WAKE_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|WAKE_Pin;
 8003af0:	193b      	adds	r3, r7, r4
 8003af2:	2246      	movs	r2, #70	@ 0x46
 8003af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	2201      	movs	r2, #1
 8003afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	193b      	adds	r3, r7, r4
 8003b0a:	4a35      	ldr	r2, [pc, #212]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	0010      	movs	r0, r2
 8003b10:	f001 fb9a 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TFT_DC_Pin;
 8003b14:	0021      	movs	r1, r4
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	2290      	movs	r2, #144	@ 0x90
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	000c      	movs	r4, r1
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	2201      	movs	r2, #1
 8003b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	193b      	adds	r3, r7, r4
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	2203      	movs	r2, #3
 8003b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f001 fb85 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin;
 8003b3e:	0021      	movs	r1, r4
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2290      	movs	r2, #144	@ 0x90
 8003b44:	0152      	lsls	r2, r2, #5
 8003b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b48:	000c      	movs	r4, r1
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	2201      	movs	r2, #1
 8003b54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	2203      	movs	r2, #3
 8003b5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003b60:	0019      	movs	r1, r3
 8003b62:	0010      	movs	r0, r2
 8003b64:	f001 fb70 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8003b68:	0021      	movs	r1, r4
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2280      	movs	r2, #128	@ 0x80
 8003b6e:	0192      	lsls	r2, r2, #6
 8003b70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b72:	000c      	movs	r4, r1
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	2200      	movs	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003b84:	0019      	movs	r1, r3
 8003b86:	0010      	movs	r0, r2
 8003b88:	f001 fb5e 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8003b8c:	0021      	movs	r1, r4
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2220      	movs	r2, #32
 8003b92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2288      	movs	r2, #136	@ 0x88
 8003b98:	0352      	lsls	r2, r2, #13
 8003b9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8003be0 <MX_GPIO_Init+0x1f0>)
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	0010      	movs	r0, r2
 8003baa:	f001 fb4d 	bl	8005248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2006      	movs	r0, #6
 8003bb4:	f001 f8e4 	bl	8004d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003bb8:	2006      	movs	r0, #6
 8003bba:	f001 f8f6 	bl	8004daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2007      	movs	r0, #7
 8003bc4:	f001 f8dc 	bl	8004d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003bc8:	2007      	movs	r0, #7
 8003bca:	f001 f8ee 	bl	8004daa <HAL_NVIC_EnableIRQ>
=======
 8002986:	4b74      	ldr	r3, [pc, #464]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	4b73      	ldr	r3, [pc, #460]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	03c9      	lsls	r1, r1, #15
 8002990:	430a      	orrs	r2, r1
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	03db      	lsls	r3, r3, #15
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	0289      	lsls	r1, r1, #10
 80029ac:	430a      	orrs	r2, r1
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	4b69      	ldr	r3, [pc, #420]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	4013      	ands	r3, r2
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	02c9      	lsls	r1, r1, #11
 80029c8:	430a      	orrs	r2, r1
 80029ca:	615a      	str	r2, [r3, #20]
 80029cc:	4b62      	ldr	r3, [pc, #392]	@ (8002b58 <MX_GPIO_Init+0x1e8>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	02db      	lsls	r3, r3, #11
 80029d4:	4013      	ands	r3, r2
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 80029da:	2390      	movs	r3, #144	@ 0x90
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	2200      	movs	r2, #0
 80029e0:	2111      	movs	r1, #17
 80029e2:	0018      	movs	r0, r3
 80029e4:	f001 fe61 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin, GPIO_PIN_RESET);
 80029e8:	495c      	ldr	r1, [pc, #368]	@ (8002b5c <MX_GPIO_Init+0x1ec>)
 80029ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 fe5b 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 80029f4:	2398      	movs	r3, #152	@ 0x98
 80029f6:	015b      	lsls	r3, r3, #5
 80029f8:	4859      	ldr	r0, [pc, #356]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	0019      	movs	r1, r3
 80029fe:	f001 fe54 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002a1a:	193a      	adds	r2, r7, r4
 8002a1c:	2390      	movs	r3, #144	@ 0x90
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 fcac 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2288      	movs	r2, #136	@ 0x88
 8002a32:	0352      	lsls	r2, r2, #13
 8002a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	193a      	adds	r2, r7, r4
 8002a3e:	2390      	movs	r3, #144	@ 0x90
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f001 fc9b 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	2201      	movs	r2, #1
 8002a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	2203      	movs	r2, #3
 8002a60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002a62:	193a      	adds	r2, r7, r4
 8002a64:	2390      	movs	r3, #144	@ 0x90
 8002a66:	05db      	lsls	r3, r3, #23
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f001 fc88 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_AUX_Pin SCREEN_EN_Pin WAKE_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_AUX_Pin|SCREEN_EN_Pin|WAKE_Pin;
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	2246      	movs	r2, #70	@ 0x46
 8002a74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	2201      	movs	r2, #1
 8002a7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	4a35      	ldr	r2, [pc, #212]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	0010      	movs	r0, r2
 8002a90:	f001 fc76 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TFT_DC_Pin;
 8002a94:	0021      	movs	r1, r4
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2290      	movs	r2, #144	@ 0x90
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	000c      	movs	r4, r1
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2203      	movs	r2, #3
 8002ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f001 fc61 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin;
 8002abe:	0021      	movs	r1, r4
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2290      	movs	r2, #144	@ 0x90
 8002ac4:	0152      	lsls	r2, r2, #5
 8002ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac8:	000c      	movs	r4, r1
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	2201      	movs	r2, #1
 8002ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	2203      	movs	r2, #3
 8002ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	4a20      	ldr	r2, [pc, #128]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f001 fc4c 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002ae8:	0021      	movs	r1, r4
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	0192      	lsls	r2, r2, #6
 8002af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af2:	000c      	movs	r4, r1
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2202      	movs	r2, #2
 8002afe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 8002b04:	0019      	movs	r1, r3
 8002b06:	0010      	movs	r0, r2
 8002b08:	f001 fc3a 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002b0c:	0021      	movs	r1, r4
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2220      	movs	r2, #32
 8002b12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2288      	movs	r2, #136	@ 0x88
 8002b18:	0352      	lsls	r2, r2, #13
 8002b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2202      	movs	r2, #2
 8002b20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	4a0e      	ldr	r2, [pc, #56]	@ (8002b60 <MX_GPIO_Init+0x1f0>)
 8002b26:	0019      	movs	r1, r3
 8002b28:	0010      	movs	r0, r2
 8002b2a:	f001 fc29 	bl	8004380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2006      	movs	r0, #6
 8002b34:	f001 f9c0 	bl	8003eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002b38:	2006      	movs	r0, #6
 8002b3a:	f001 f9d2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2007      	movs	r0, #7
 8002b44:	f001 f9b8 	bl	8003eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002b48:	2007      	movs	r0, #7
 8002b4a:	f001 f9ca 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b009      	add	sp, #36	@ 0x24
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	00000846 	.word	0x00000846
 8003be0:	48000400 	.word	0x48000400

08003be4 <HAL_UARTEx_RxEventCallback>:
=======
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b009      	add	sp, #36	@ 0x24
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	00000846 	.word	0x00000846
 8002b60:	48000400 	.word	0x48000400

08002b64 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
<<<<<<< HEAD
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	000a      	movs	r2, r1
 8003bee:	1cbb      	adds	r3, r7, #2
 8003bf0:	801a      	strh	r2, [r3, #0]
=======
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	000a      	movs	r2, r1
 8002b6e:	1cbb      	adds	r3, r7, #2
 8002b70:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  static uint16_t last_offset = 0;

  // Ignore if called twice (which will happen on every half buffer)
  if (offset != last_offset)
<<<<<<< HEAD
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	1cba      	adds	r2, r7, #2
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d050      	beq.n	8003ca0 <HAL_UARTEx_RxEventCallback+0xbc>
=======
 8002b72:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	1cba      	adds	r2, r7, #2
 8002b78:	8812      	ldrh	r2, [r2, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d050      	beq.n	8002c20 <HAL_UARTEx_RxEventCallback+0xbc>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {

    // If wrap around reset last_size
    if (offset < last_offset)
<<<<<<< HEAD
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	1cba      	adds	r2, r7, #2
 8003c04:	8812      	ldrh	r2, [r2, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d202      	bcs.n	8003c10 <HAL_UARTEx_RxEventCallback+0x2c>
      last_offset = 0;
 8003c0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8003c10:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	001a      	movs	r2, r3
 8003c16:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c18:	18d0      	adds	r0, r2, r3
 8003c1a:	1cbb      	adds	r3, r7, #2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	f00d fdb3 	bl	8011790 <CDC_Transmit_FS>
=======
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	1cba      	adds	r2, r7, #2
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d202      	bcs.n	8002b90 <HAL_UARTEx_RxEventCallback+0x2c>
      last_offset = 0;
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002b90:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	001a      	movs	r2, r3
 8002b96:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <HAL_UARTEx_RxEventCallback+0xc8>)
 8002b98:	18d0      	adds	r0, r2, r3
 8002b9a:	1cbb      	adds	r3, r7, #2
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002ba0:	8812      	ldrh	r2, [r2, #0]
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	f00d fe91 	bl	80108cc <CDC_Transmit_FS>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    static uint16_t response_offset = 0;

    for (uint16_t i = last_offset; i < offset; i++)
<<<<<<< HEAD
 8003c2a:	230e      	movs	r3, #14
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c30:	8812      	ldrh	r2, [r2, #0]
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	e029      	b.n	8003c8a <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if (uart_rx_buf[i] == '+')
 8003c36:	210e      	movs	r1, #14
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c42:	d11c      	bne.n	8003c7e <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c46:	187a      	adds	r2, r7, r1
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	1cba      	adds	r2, r7, #2
 8003c52:	8812      	ldrh	r2, [r2, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d202      	bcs.n	8003c5e <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	801a      	strh	r2, [r3, #0]
        if (memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8003c5e:	4b14      	ldr	r3, [pc, #80]	@ (8003cb0 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	001a      	movs	r2, r3
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_UARTEx_RxEventCallback+0xc8>)
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	4912      	ldr	r1, [pc, #72]	@ (8003cb4 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003c6a:	2215      	movs	r2, #21
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f010 fa23 	bl	80140b8 <memcmp>
 8003c72:	1e03      	subs	r3, r0, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_UARTEx_RxEventCallback+0xd4>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
          break;
 8003c7c:	e00c      	b.n	8003c98 <HAL_UARTEx_RxEventCallback+0xb4>
    for (uint16_t i = last_offset; i < offset; i++)
 8003c7e:	210e      	movs	r1, #14
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	3201      	adds	r2, #1
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	230e      	movs	r3, #14
 8003c8c:	18fa      	adds	r2, r7, r3
 8003c8e:	1cbb      	adds	r3, r7, #2
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3ce      	bcc.n	8003c36 <HAL_UARTEx_RxEventCallback+0x52>
=======
 8002baa:	230e      	movs	r3, #14
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002bb0:	8812      	ldrh	r2, [r2, #0]
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	e029      	b.n	8002c0a <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if (uart_rx_buf[i] == '+')
 8002bb6:	210e      	movs	r1, #14
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_UARTEx_RxEventCallback+0xc8>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	2b2b      	cmp	r3, #43	@ 0x2b
 8002bc2:	d11c      	bne.n	8002bfe <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002bc6:	187a      	adds	r2, r7, r1
 8002bc8:	8812      	ldrh	r2, [r2, #0]
 8002bca:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	1cba      	adds	r2, r7, #2
 8002bd2:	8812      	ldrh	r2, [r2, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d202      	bcs.n	8002bde <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8002bd8:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]
        if (memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	001a      	movs	r2, r3
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_UARTEx_RxEventCallback+0xc8>)
 8002be6:	18d3      	adds	r3, r2, r3
 8002be8:	4912      	ldr	r1, [pc, #72]	@ (8002c34 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002bea:	2215      	movs	r2, #21
 8002bec:	0018      	movs	r0, r3
 8002bee:	f010 fadf 	bl	80131b0 <memcmp>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
          break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_UARTEx_RxEventCallback+0xb4>
    for (uint16_t i = last_offset; i < offset; i++)
 8002bfe:	210e      	movs	r1, #14
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	3201      	adds	r2, #1
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	18fa      	adds	r2, r7, r3
 8002c0e:	1cbb      	adds	r3, r7, #2
 8002c10:	8812      	ldrh	r2, [r2, #0]
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3ce      	bcc.n	8002bb6 <HAL_UARTEx_RxEventCallback+0x52>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }

    last_offset = offset;
<<<<<<< HEAD
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003c9a:	1cba      	adds	r2, r7, #2
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	801a      	strh	r2, [r3, #0]
  }
}
 8003ca0:	46c0      	nop			@ (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b004      	add	sp, #16
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000bbe 	.word	0x20000bbe
 8003cac:	200007bc 	.word	0x200007bc
 8003cb0:	20000bc0 	.word	0x20000bc0
 8003cb4:	20000058 	.word	0x20000058
 8003cb8:	20000bbc 	.word	0x20000bbc

08003cbc <Error_Handler>:
=======
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002c1a:	1cba      	adds	r2, r7, #2
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	801a      	strh	r2, [r3, #0]
  }
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000a82 	.word	0x20000a82
 8002c2c:	20000680 	.word	0x20000680
 8002c30:	20000a84 	.word	0x20000a84
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000a80 	.word	0x20000a80

08002c3c <Error_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
=======
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
=======
 8002c40:	b672      	cpsid	i
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	e7fd      	b.n	8003cc4 <Error_Handler+0x8>

08003cc8 <HAL_MspInit>:
=======
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	e7fd      	b.n	8002c44 <Error_Handler+0x8>

08002c48 <HAL_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
=======
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8003cce:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <HAL_MspInit+0x54>)
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <HAL_MspInit+0x54>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_MspInit+0x54>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <HAL_MspInit+0x54>)
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <HAL_MspInit+0x54>)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0549      	lsls	r1, r1, #21
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
 8003cf4:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_MspInit+0x54>)
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	055b      	lsls	r3, r3, #21
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
=======
 8002c4e:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c6c:	2180      	movs	r1, #128	@ 0x80
 8002c6e:	0549      	lsls	r1, r1, #21
 8002c70:	430a      	orrs	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_MspInit+0x54>)
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	055b      	lsls	r3, r3, #21
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
<<<<<<< HEAD
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	2004      	movs	r0, #4
 8003d08:	f001 f83a 	bl	8004d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8003d0c:	2004      	movs	r0, #4
 8003d0e:	f001 f84c 	bl	8004daa <HAL_NVIC_EnableIRQ>
=======
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2004      	movs	r0, #4
 8002c88:	f001 f916 	bl	8003eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002c8c:	2004      	movs	r0, #4
 8002c8e:	f001 f928 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_ADC_MspInit>:
=======
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_ADC_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b08b      	sub	sp, #44	@ 0x2c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	2414      	movs	r4, #20
 8003d2a:	193b      	adds	r3, r7, r4
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	2314      	movs	r3, #20
 8003d30:	001a      	movs	r2, r3
 8003d32:	2100      	movs	r1, #0
 8003d34:	f010 f9ce 	bl	80140d4 <memset>
  if(hadc->Instance==ADC1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_ADC_MspInit+0x80>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d12a      	bne.n	8003d98 <HAL_ADC_MspInit+0x78>
=======
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08b      	sub	sp, #44	@ 0x2c
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	2414      	movs	r4, #20
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	0018      	movs	r0, r3
 8002cae:	2314      	movs	r3, #20
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f010 fa8a 	bl	80131cc <memset>
  if(hadc->Instance==ADC1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <HAL_ADC_MspInit+0x80>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12a      	bne.n	8002d18 <HAL_ADC_MspInit+0x78>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d48:	2180      	movs	r1, #128	@ 0x80
 8003d4a:	0089      	lsls	r1, r1, #2
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	619a      	str	r2, [r3, #24]
 8003d50:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5e:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d64:	2180      	movs	r1, #128	@ 0x80
 8003d66:	02c9      	lsls	r1, r1, #11
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	615a      	str	r2, [r3, #20]
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_ADC_MspInit+0x84>)
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	02db      	lsls	r3, r3, #11
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
=======
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002cc8:	2180      	movs	r1, #128	@ 0x80
 8002cca:	0089      	lsls	r1, r1, #2
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	619a      	str	r2, [r3, #24]
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	02c9      	lsls	r1, r1, #11
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_ADC_MspInit+0x84>)
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	02db      	lsls	r3, r3, #11
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
<<<<<<< HEAD
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d80:	193b      	adds	r3, r7, r4
 8003d82:	2203      	movs	r2, #3
 8003d84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	4a06      	ldr	r2, [pc, #24]	@ (8003da8 <HAL_ADC_MspInit+0x88>)
 8003d90:	0019      	movs	r1, r3
 8003d92:	0010      	movs	r0, r2
 8003d94:	f001 fa58 	bl	8005248 <HAL_GPIO_Init>
=======
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2203      	movs	r2, #3
 8002d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <HAL_ADC_MspInit+0x88>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f001 fb34 	bl	8004380 <HAL_GPIO_Init>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END ADC1_MspInit 1 */

  }

}
<<<<<<< HEAD
 8003d98:	46c0      	nop			@ (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b00b      	add	sp, #44	@ 0x2c
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	40012400 	.word	0x40012400
 8003da4:	40021000 	.word	0x40021000
 8003da8:	48000400 	.word	0x48000400

08003dac <HAL_SPI_MspInit>:
=======
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b00b      	add	sp, #44	@ 0x2c
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	40012400 	.word	0x40012400
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_SPI_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b08d      	sub	sp, #52	@ 0x34
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	241c      	movs	r4, #28
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	0018      	movs	r0, r3
 8003dba:	2314      	movs	r3, #20
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f010 f988 	bl	80140d4 <memset>
  if(hspi->Instance==SPI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a58      	ldr	r2, [pc, #352]	@ (8003f2c <HAL_SPI_MspInit+0x180>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d133      	bne.n	8003e36 <HAL_SPI_MspInit+0x8a>
=======
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b08d      	sub	sp, #52	@ 0x34
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	241c      	movs	r4, #28
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	0018      	movs	r0, r3
 8002d3a:	2314      	movs	r3, #20
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f010 fa44 	bl	80131cc <memset>
  if(hspi->Instance==SPI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a58      	ldr	r2, [pc, #352]	@ (8002eac <HAL_SPI_MspInit+0x180>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d133      	bne.n	8002db6 <HAL_SPI_MspInit+0x8a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8003dce:	4b58      	ldr	r3, [pc, #352]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	4b57      	ldr	r3, [pc, #348]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	0149      	lsls	r1, r1, #5
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	619a      	str	r2, [r3, #24]
 8003ddc:	4b54      	ldr	r3, [pc, #336]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	015b      	lsls	r3, r3, #5
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dea:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003df0:	2180      	movs	r1, #128	@ 0x80
 8003df2:	0289      	lsls	r1, r1, #10
 8003df4:	430a      	orrs	r2, r1
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
=======
 8002d4e:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	4b57      	ldr	r3, [pc, #348]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0149      	lsls	r1, r1, #5
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	4b54      	ldr	r3, [pc, #336]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b51      	ldr	r3, [pc, #324]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	4b50      	ldr	r3, [pc, #320]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	0289      	lsls	r1, r1, #10
 8002d74:	430a      	orrs	r2, r1
 8002d76:	615a      	str	r2, [r3, #20]
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
<<<<<<< HEAD
 8003e06:	0021      	movs	r1, r4
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	22e0      	movs	r2, #224	@ 0xe0
 8003e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2202      	movs	r2, #2
 8003e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	187a      	adds	r2, r7, r1
 8003e28:	2390      	movs	r3, #144	@ 0x90
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f001 fa0a 	bl	8005248 <HAL_GPIO_Init>
=======
 8002d86:	0021      	movs	r1, r4
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	22e0      	movs	r2, #224	@ 0xe0
 8002d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2202      	movs	r2, #2
 8002d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	187a      	adds	r2, r7, r1
 8002da8:	2390      	movs	r3, #144	@ 0x90
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	0011      	movs	r1, r2
 8002dae:	0018      	movs	r0, r3
 8002db0:	f001 fae6 	bl	8004380 <HAL_GPIO_Init>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8003e34:	e075      	b.n	8003f22 <HAL_SPI_MspInit+0x176>
  else if(hspi->Instance==SPI2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <HAL_SPI_MspInit+0x188>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d170      	bne.n	8003f22 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	4b3a      	ldr	r3, [pc, #232]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	01c9      	lsls	r1, r1, #7
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
 8003e4e:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	01db      	lsls	r3, r3, #7
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5c:	4b34      	ldr	r3, [pc, #208]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	02c9      	lsls	r1, r1, #11
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]
 8003e6a:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <HAL_SPI_MspInit+0x184>)
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	02db      	lsls	r3, r3, #11
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e78:	211c      	movs	r1, #28
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2280      	movs	r2, #128	@ 0x80
 8003e7e:	00d2      	lsls	r2, r2, #3
 8003e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	000c      	movs	r4, r1
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	2202      	movs	r2, #2
 8003e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	2203      	movs	r2, #3
 8003e94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2205      	movs	r2, #5
 8003e9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <HAL_SPI_MspInit+0x18c>)
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	0010      	movs	r0, r2
 8003ea4:	f001 f9d0 	bl	8005248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003ea8:	0021      	movs	r1, r4
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	22c0      	movs	r2, #192	@ 0xc0
 8003eae:	0212      	lsls	r2, r2, #8
 8003eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f38 <HAL_SPI_MspInit+0x18c>)
 8003ece:	0019      	movs	r1, r3
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	f001 f9b9 	bl	8005248 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003ed6:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003ed8:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <HAL_SPI_MspInit+0x194>)
 8003eda:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003edc:	4b17      	ldr	r3, [pc, #92]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003ede:	2210      	movs	r2, #16
 8003ee0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee8:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003eea:	2280      	movs	r2, #128	@ 0x80
 8003eec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f00:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 ff7b 	bl	8004e04 <HAL_DMA_Init>
 8003f0e:	1e03      	subs	r3, r0, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8003f12:	f7ff fed3 	bl	8003cbc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <HAL_SPI_MspInit+0x190>)
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b00d      	add	sp, #52	@ 0x34
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	40013000 	.word	0x40013000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40003800 	.word	0x40003800
 8003f38:	48000400 	.word	0x48000400
 8003f3c:	20000630 	.word	0x20000630
 8003f40:	40020058 	.word	0x40020058

08003f44 <HAL_TIM_Base_MspInit>:
=======
 8002db4:	e075      	b.n	8002ea2 <HAL_SPI_MspInit+0x176>
  else if(hspi->Instance==SPI2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <HAL_SPI_MspInit+0x188>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d170      	bne.n	8002ea2 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002dc6:	2180      	movs	r1, #128	@ 0x80
 8002dc8:	01c9      	lsls	r1, r1, #7
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	61da      	str	r2, [r3, #28]
 8002dce:	4b38      	ldr	r3, [pc, #224]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	01db      	lsls	r3, r3, #7
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002de2:	2180      	movs	r1, #128	@ 0x80
 8002de4:	02c9      	lsls	r1, r1, #11
 8002de6:	430a      	orrs	r2, r1
 8002de8:	615a      	str	r2, [r3, #20]
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_SPI_MspInit+0x184>)
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	02db      	lsls	r3, r3, #11
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002df8:	211c      	movs	r1, #28
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	00d2      	lsls	r2, r2, #3
 8002e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	000c      	movs	r4, r1
 8002e04:	193b      	adds	r3, r7, r4
 8002e06:	2202      	movs	r2, #2
 8002e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	2203      	movs	r2, #3
 8002e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	2205      	movs	r2, #5
 8002e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1c:	193b      	adds	r3, r7, r4
 8002e1e:	4a26      	ldr	r2, [pc, #152]	@ (8002eb8 <HAL_SPI_MspInit+0x18c>)
 8002e20:	0019      	movs	r1, r3
 8002e22:	0010      	movs	r0, r2
 8002e24:	f001 faac 	bl	8004380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e28:	0021      	movs	r1, r4
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	22c0      	movs	r2, #192	@ 0xc0
 8002e2e:	0212      	lsls	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2202      	movs	r2, #2
 8002e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2203      	movs	r2, #3
 8002e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <HAL_SPI_MspInit+0x18c>)
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f001 fa95 	bl	8004380 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_SPI_MspInit+0x194>)
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e5e:	2210      	movs	r2, #16
 8002e60:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f001 f857 	bl	8003f3c <HAL_DMA_Init>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8002e92:	f7ff fed3 	bl	8002c3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <HAL_SPI_MspInit+0x190>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b00d      	add	sp, #52	@ 0x34
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	40013000 	.word	0x40013000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40003800 	.word	0x40003800
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	200004f4 	.word	0x200004f4
 8002ec0:	40020058 	.word	0x40020058

08002ec4 <HAL_TIM_Base_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <HAL_TIM_Base_MspInit+0x44>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <HAL_TIM_Base_MspInit+0x3a>
=======
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <HAL_TIM_Base_MspInit+0x44>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d113      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <HAL_TIM_Base_MspInit+0x48>)
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <HAL_TIM_Base_MspInit+0x48>)
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_TIM_Base_MspInit+0x48>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2100      	movs	r1, #0
 8003f72:	2010      	movs	r0, #16
 8003f74:	f000 ff04 	bl	8004d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f78:	2010      	movs	r0, #16
 8003f7a:	f000 ff16 	bl	8004daa <HAL_NVIC_EnableIRQ>
=======
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002edc:	2102      	movs	r1, #2
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_TIM_Base_MspInit+0x48>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2010      	movs	r0, #16
 8002ef4:	f000 ffe0 	bl	8003eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ef8:	2010      	movs	r0, #16
 8002efa:	f000 fff2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END TIM3_MspInit 1 */

  }

}
<<<<<<< HEAD
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b004      	add	sp, #16
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40021000 	.word	0x40021000

08003f90 <HAL_UART_MspInit>:
=======
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b004      	add	sp, #16
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_UART_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b08b      	sub	sp, #44	@ 0x2c
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f98:	2414      	movs	r4, #20
 8003f9a:	193b      	adds	r3, r7, r4
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f010 f896 	bl	80140d4 <memset>
  if(huart->Instance==USART1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a34      	ldr	r2, [pc, #208]	@ (8004080 <HAL_UART_MspInit+0xf0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d161      	bne.n	8004076 <HAL_UART_MspInit+0xe6>
=======
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	@ 0x2c
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	2414      	movs	r4, #20
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	2314      	movs	r3, #20
 8002f20:	001a      	movs	r2, r3
 8002f22:	2100      	movs	r1, #0
 8002f24:	f010 f952 	bl	80131cc <memset>
  if(huart->Instance==USART1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a34      	ldr	r2, [pc, #208]	@ (8003000 <HAL_UART_MspInit+0xf0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d161      	bne.n	8002ff6 <HAL_UART_MspInit+0xe6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	4b33      	ldr	r3, [pc, #204]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fb8:	2180      	movs	r1, #128	@ 0x80
 8003fba:	01c9      	lsls	r1, r1, #7
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]
 8003fc0:	4b30      	ldr	r3, [pc, #192]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	01db      	lsls	r3, r3, #7
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fce:	4b2d      	ldr	r3, [pc, #180]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	0289      	lsls	r1, r1, #10
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	615a      	str	r2, [r3, #20]
 8003fdc:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <HAL_UART_MspInit+0xf4>)
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
=======
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	4b33      	ldr	r3, [pc, #204]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	01c9      	lsls	r1, r1, #7
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	4b30      	ldr	r3, [pc, #192]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	01db      	lsls	r3, r3, #7
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	4b2c      	ldr	r3, [pc, #176]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f54:	2180      	movs	r1, #128	@ 0x80
 8002f56:	0289      	lsls	r1, r1, #10
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	615a      	str	r2, [r3, #20]
 8002f5c:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <HAL_UART_MspInit+0xf4>)
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	22c0      	movs	r2, #192	@ 0xc0
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	0021      	movs	r1, r4
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2203      	movs	r2, #3
 8004004:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2201      	movs	r2, #1
 800400a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400c:	187a      	adds	r2, r7, r1
 800400e:	2390      	movs	r3, #144	@ 0x90
 8004010:	05db      	lsls	r3, r3, #23
 8004012:	0011      	movs	r1, r2
 8004014:	0018      	movs	r0, r3
 8004016:	f001 f917 	bl	8005248 <HAL_GPIO_Init>
=======
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	22c0      	movs	r2, #192	@ 0xc0
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	0021      	movs	r1, r4
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2202      	movs	r2, #2
 8002f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	2203      	movs	r2, #3
 8002f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	2201      	movs	r2, #1
 8002f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	187a      	adds	r2, r7, r1
 8002f8e:	2390      	movs	r3, #144	@ 0x90
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f001 f9f3 	bl	8004380 <HAL_GPIO_Init>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
<<<<<<< HEAD
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_UART_MspInit+0xfc>)
 800401e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004020:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004022:	2200      	movs	r2, #0
 8004024:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004026:	4b18      	ldr	r3, [pc, #96]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800402c:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 800402e:	2280      	movs	r2, #128	@ 0x80
 8004030:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004040:	2220      	movs	r2, #32
 8004042:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004044:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800404a:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 800404c:	0018      	movs	r0, r3
 800404e:	f000 fed9 	bl	8004e04 <HAL_DMA_Init>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004056:	f7ff fe31 	bl	8003cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 800405e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_UART_MspInit+0xf8>)
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	201b      	movs	r0, #27
 800406c:	f000 fe88 	bl	8004d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004070:	201b      	movs	r0, #27
 8004072:	f000 fe9a 	bl	8004daa <HAL_NVIC_EnableIRQ>
=======
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <HAL_UART_MspInit+0xfc>)
 8002f9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa0:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fae:	2280      	movs	r2, #128	@ 0x80
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002fbe:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fca:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 ffb5 	bl	8003f3c <HAL_DMA_Init>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002fd6:	f7ff fe31 	bl	8002c3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fde:	675a      	str	r2, [r3, #116]	@ 0x74
 8002fe0:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <HAL_UART_MspInit+0xf8>)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	201b      	movs	r0, #27
 8002fec:	f000 ff64 	bl	8003eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ff0:	201b      	movs	r0, #27
 8002ff2:	f000 ff76 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END USART1_MspInit 1 */

  }

}
<<<<<<< HEAD
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b00b      	add	sp, #44	@ 0x2c
 800407c:	bd90      	pop	{r4, r7, pc}
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	40013800 	.word	0x40013800
 8004084:	40021000 	.word	0x40021000
 8004088:	20000774 	.word	0x20000774
 800408c:	40020030 	.word	0x40020030

08004090 <NMI_Handler>:
=======
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b00b      	add	sp, #44	@ 0x2c
 8002ffc:	bd90      	pop	{r4, r7, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	40013800 	.word	0x40013800
 8003004:	40021000 	.word	0x40021000
 8003008:	20000638 	.word	0x20000638
 800300c:	40020030 	.word	0x40020030

08003010 <NMI_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
=======
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	e7fd      	b.n	8004094 <NMI_Handler+0x4>

08004098 <HardFault_Handler>:
=======
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	e7fd      	b.n	8003014 <NMI_Handler+0x4>

08003018 <HardFault_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
=======
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800409c:	46c0      	nop			@ (mov r8, r8)
 800409e:	e7fd      	b.n	800409c <HardFault_Handler+0x4>

080040a0 <SVC_Handler>:
=======
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	e7fd      	b.n	800301c <HardFault_Handler+0x4>

08003020 <SVC_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
=======
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
<<<<<<< HEAD
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <PendSV_Handler>:
=======
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <PendSV_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80040aa:	b580      	push	{r7, lr}
 80040ac:	af00      	add	r7, sp, #0
=======
 800302a:	b580      	push	{r7, lr}
 800302c:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <SysTick_Handler>:
=======
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <SysTick_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
=======
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80040b8:	f000 f98a 	bl	80043d0 <HAL_IncTick>
=======
 8003038:	f000 fbe2 	bl	8003800 <HAL_IncTick>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <RCC_CRS_IRQHandler>:
=======
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <RCC_CRS_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
<<<<<<< HEAD
 80040c2:	b580      	push	{r7, lr}
 80040c4:	af00      	add	r7, sp, #0
=======
 8003042:	b580      	push	{r7, lr}
 8003044:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
<<<<<<< HEAD
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <EXTI2_3_IRQHandler>:
=======
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <EXTI2_3_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
<<<<<<< HEAD
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
=======
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
<<<<<<< HEAD
 80040d0:	2004      	movs	r0, #4
 80040d2:	f001 fa6b 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
=======
 8003050:	2004      	movs	r0, #4
 8003052:	f001 fb47 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
<<<<<<< HEAD
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <EXTI4_15_IRQHandler>:
=======
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <EXTI4_15_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
<<<<<<< HEAD
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
=======
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
<<<<<<< HEAD
 80040e0:	2020      	movs	r0, #32
 80040e2:	f001 fa63 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
=======
 8003060:	2020      	movs	r0, #32
 8003062:	f001 fb3f 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
<<<<<<< HEAD
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <DMA1_Channel2_3_IRQHandler>:
=======
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <DMA1_Channel2_3_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
<<<<<<< HEAD
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
=======
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< HEAD
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <DMA1_Channel2_3_IRQHandler+0x14>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 ffb1 	bl	800505a <HAL_DMA_IRQHandler>
=======
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003072:	0018      	movs	r0, r3
 8003074:	f001 f88d 	bl	8004192 <HAL_DMA_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
<<<<<<< HEAD
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	20000774 	.word	0x20000774

08004104 <DMA1_Channel4_5_6_7_IRQHandler>:
=======
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	20000638 	.word	0x20000638

08003084 <DMA1_Channel4_5_6_7_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
<<<<<<< HEAD
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
=======
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
<<<<<<< HEAD
 8004108:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800410a:	0018      	movs	r0, r3
 800410c:	f000 ffa5 	bl	800505a <HAL_DMA_IRQHandler>
=======
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800308a:	0018      	movs	r0, r3
 800308c:	f001 f881 	bl	8004192 <HAL_DMA_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
<<<<<<< HEAD
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	20000630 	.word	0x20000630

0800411c <TIM3_IRQHandler>:
=======
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	200004f4 	.word	0x200004f4

0800309c <TIM3_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
=======
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8004120:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <TIM3_IRQHandler+0x14>)
 8004122:	0018      	movs	r0, r3
 8004124:	f004 ffac 	bl	8009080 <HAL_TIM_IRQHandler>
=======
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <TIM3_IRQHandler+0x14>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f005 f888 	bl	80081b8 <HAL_TIM_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	20000674 	.word	0x20000674

08004134 <USART1_IRQHandler>:
=======
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000538 	.word	0x20000538

080030b4 <USART1_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
=======
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <USART1_IRQHandler+0x14>)
 800413a:	0018      	movs	r0, r3
 800413c:	f005 fbf6 	bl	800992c <HAL_UART_IRQHandler>
=======
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <USART1_IRQHandler+0x14>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f005 fcd2 	bl	8008a64 <HAL_UART_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	200006bc 	.word	0x200006bc

0800414c <USB_IRQHandler>:
=======
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	20000580 	.word	0x20000580

080030cc <USB_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
<<<<<<< HEAD
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
=======
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< HEAD
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <USB_IRQHandler+0x14>)
 8004152:	0018      	movs	r0, r3
 8004154:	f001 fb60 	bl	8005818 <HAL_PCD_IRQHandler>
=======
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <USB_IRQHandler+0x14>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f001 fc3c 	bl	8004950 <HAL_PCD_IRQHandler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
<<<<<<< HEAD
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	20001924 	.word	0x20001924

08004164 <_getpid>:
=======
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	2000181c 	.word	0x2000181c

080030e4 <_getpid>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  return 1;
 8004168:	2301      	movs	r3, #1
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_kill>:

int _kill(int pid, int sig)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800417a:	f010 f805 	bl	8014188 <__errno>
 800417e:	0003      	movs	r3, r0
 8004180:	2216      	movs	r2, #22
 8004182:	601a      	str	r2, [r3, #0]
  return -1;
 8004184:	2301      	movs	r3, #1
 8004186:	425b      	negs	r3, r3
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <_exit>:

void _exit (int status)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004198:	2301      	movs	r3, #1
 800419a:	425a      	negs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7ff ffe5 	bl	8004170 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	e7fd      	b.n	80041a6 <_exit+0x16>

080041aa <_read>:
=======
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  return 1;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_kill>:

int _kill(int pid, int sig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fa:	f010 f8c1 	bl	8013280 <__errno>
 80030fe:	0003      	movs	r3, r0
 8003100:	2216      	movs	r2, #22
 8003102:	601a      	str	r2, [r3, #0]
  return -1;
 8003104:	2301      	movs	r3, #1
 8003106:	425b      	negs	r3, r3
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <_exit>:

void _exit (int status)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003118:	2301      	movs	r3, #1
 800311a:	425a      	negs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff ffe5 	bl	80030f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	e7fd      	b.n	8003126 <_exit+0x16>

0800312a <_read>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
=======
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e00a      	b.n	80041d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041bc:	e000      	b.n	80041c0 <_read+0x16>
 80041be:	bf00      	nop
 80041c0:	0001      	movs	r1, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	60ba      	str	r2, [r7, #8]
 80041c8:	b2ca      	uxtb	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3301      	adds	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dbf0      	blt.n	80041bc <_read+0x12>
  }

  return len;
 80041da:	687b      	ldr	r3, [r7, #4]
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b006      	add	sp, #24
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
=======
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00a      	b.n	8003152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313c:	e000      	b.n	8003140 <_read+0x16>
 800313e:	bf00      	nop
 8003140:	0001      	movs	r1, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf0      	blt.n	800313c <_read+0x12>
  }

  return len;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}

08003164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e009      	b.n	800420a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	60ba      	str	r2, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	0018      	movs	r0, r3
 8004200:	e000      	b.n	8004204 <_write+0x20>
 8004202:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	dbf1      	blt.n	80041f6 <_write+0x12>
  }
  return len;
 8004212:	687b      	ldr	r3, [r7, #4]
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b006      	add	sp, #24
 800421a:	bd80      	pop	{r7, pc}

0800421c <_close>:

int _close(int file)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004224:	2301      	movs	r3, #1
 8004226:	425b      	negs	r3, r3
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <_fstat>:
=======
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e009      	b.n	800318a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0018      	movs	r0, r3
 8003180:	e000      	b.n	8003184 <_write+0x20>
 8003182:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbf1      	blt.n	8003176 <_write+0x12>
  }
  return len;
 8003192:	687b      	ldr	r3, [r7, #4]
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}

0800319c <_close>:

int _close(int file)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	425b      	negs	r3, r3
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_fstat>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	0192      	lsls	r2, r2, #6
 8004240:	605a      	str	r2, [r3, #4]
  return 0;
 8004242:	2300      	movs	r3, #0
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <_isatty>:

int _isatty(int file)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004254:	2301      	movs	r3, #1
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}

0800425e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
=======
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2280      	movs	r2, #128	@ 0x80
 80031be:	0192      	lsls	r2, r2, #6
 80031c0:	605a      	str	r2, [r3, #4]
  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_isatty>:

int _isatty(int file)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}

080031de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 800426a:	2300      	movs	r3, #0
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b004      	add	sp, #16
 8004272:	bd80      	pop	{r7, pc}

08004274 <_sbrk>:
=======
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_sbrk>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
=======
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 800427c:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <_sbrk+0x5c>)
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <_sbrk+0x60>)
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	613b      	str	r3, [r7, #16]
=======
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <_sbrk+0x5c>)
 80031fe:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <_sbrk+0x60>)
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004290:	4b11      	ldr	r3, [pc, #68]	@ (80042d8 <_sbrk+0x64>)
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <_sbrk+0x68>)
 8004294:	601a      	str	r2, [r3, #0]
=======
 8003208:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003210:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <_sbrk+0x64>)
 8003212:	4a12      	ldr	r2, [pc, #72]	@ (800325c <_sbrk+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8004296:	4b10      	ldr	r3, [pc, #64]	@ (80042d8 <_sbrk+0x64>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d207      	bcs.n	80042b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042a4:	f00f ff70 	bl	8014188 <__errno>
 80042a8:	0003      	movs	r3, r0
 80042aa:	220c      	movs	r2, #12
 80042ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	425b      	negs	r3, r3
 80042b2:	e009      	b.n	80042c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042b4:	4b08      	ldr	r3, [pc, #32]	@ (80042d8 <_sbrk+0x64>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ba:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <_sbrk+0x64>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	18d2      	adds	r2, r2, r3
 80042c2:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <_sbrk+0x64>)
 80042c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b006      	add	sp, #24
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20004000 	.word	0x20004000
 80042d4:	00000400 	.word	0x00000400
 80042d8:	20000bc4 	.word	0x20000bc4
 80042dc:	20001fa8 	.word	0x20001fa8

080042e0 <SystemInit>:
=======
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <_sbrk+0x64>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003224:	f010 f82c 	bl	8013280 <__errno>
 8003228:	0003      	movs	r3, r0
 800322a:	220c      	movs	r2, #12
 800322c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800322e:	2301      	movs	r3, #1
 8003230:	425b      	negs	r3, r3
 8003232:	e009      	b.n	8003248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003234:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	18d2      	adds	r2, r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <_sbrk+0x64>)
 8003244:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20004000 	.word	0x20004000
 8003254:	00000400 	.word	0x00000400
 8003258:	20000a88 	.word	0x20000a88
 800325c:	20001ea0 	.word	0x20001ea0

08003260 <SystemInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
=======
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
<<<<<<< HEAD
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <Reset_Handler>:
=======
 8003264:	46c0      	nop			@ (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <get_anchor_id>:

uint8_t total_anchors = sizeof(anchor_addresses) / 2; // How many anchors in environment
uint8_t total_tags = sizeof(tag_addresses) / 2;       // How many tags in environment

uint8_t * get_anchor_id(uint8_t idx)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	0002      	movs	r2, r0
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	701a      	strb	r2, [r3, #0]
    return anchor_addresses + (idx * 2);
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	001a      	movs	r2, r3
 8003280:	4b02      	ldr	r3, [pc, #8]	@ (800328c <get_anchor_id+0x20>)
 8003282:	18d3      	adds	r3, r2, r3
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000001c 	.word	0x2000001c

08003290 <tag_main>:
 * @return none
 */

int tag_main(void)

{
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b08b      	sub	sp, #44	@ 0x2c
 8003294:	af00      	add	r7, sp, #0

    memcpy((tx_poll_msg) + TX_POLL_MSG_TAG_ID_IDX, tag_id, 2);
 8003296:	48b9      	ldr	r0, [pc, #740]	@ (800357c <tag_main+0x2ec>)
 8003298:	4bb9      	ldr	r3, [pc, #740]	@ (8003580 <tag_main+0x2f0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	0019      	movs	r1, r3
 80032a0:	f010 f826 	bl	80132f0 <memcpy>
    memcpy((rx_resp_msg) + RX_RESP_MSG_TAG_ID_IDX, tag_id, 2);
 80032a4:	48b7      	ldr	r0, [pc, #732]	@ (8003584 <tag_main+0x2f4>)
 80032a6:	4bb6      	ldr	r3, [pc, #728]	@ (8003580 <tag_main+0x2f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2202      	movs	r2, #2
 80032ac:	0019      	movs	r1, r3
 80032ae:	f010 f81f 	bl	80132f0 <memcpy>
    memcpy((tx_final_msg) + TX_FINAL_MSG_TAG_ID_IDX, tag_id, 2);
 80032b2:	48b5      	ldr	r0, [pc, #724]	@ (8003588 <tag_main+0x2f8>)
 80032b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003580 <tag_main+0x2f0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2202      	movs	r2, #2
 80032ba:	0019      	movs	r1, r3
 80032bc:	f010 f818 	bl	80132f0 <memcpy>
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80032c0:	f00f f936 	bl	8012530 <reset_DW1000>
    port_set_dw1000_slowrate();
 80032c4:	f00f f9a0 	bl	8012608 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80032c8:	2001      	movs	r0, #1
 80032ca:	f00d ffb9 	bl	8011240 <dwt_initialise>
 80032ce:	0003      	movs	r3, r0
 80032d0:	3301      	adds	r3, #1
 80032d2:	d101      	bne.n	80032d8 <tag_main+0x48>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	e7fd      	b.n	80032d4 <tag_main+0x44>
        {
        };
    }
    port_set_dw1000_fastrate();
 80032d8:	f00f f9a4 	bl	8012624 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 80032dc:	4bab      	ldr	r3, [pc, #684]	@ (800358c <tag_main+0x2fc>)
 80032de:	0018      	movs	r0, r3
 80032e0:	f00e f922 	bl	8011528 <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 80032e4:	4baa      	ldr	r3, [pc, #680]	@ (8003590 <tag_main+0x300>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f00e f908 	bl	80114fc <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f00e fd49 	bl	8011d84 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 80032f2:	4ba8      	ldr	r3, [pc, #672]	@ (8003594 <tag_main+0x304>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f00e fabb 	bl	8011870 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 80032fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003594 <tag_main+0x304>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f00e facb 	bl	8011898 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8003302:	2396      	movs	r3, #150	@ 0x96
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	0018      	movs	r0, r3
 8003308:	f00e fd6e 	bl	8011de8 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800330c:	23af      	movs	r3, #175	@ 0xaf
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	0018      	movs	r0, r3
 8003312:	f00e ff3b 	bl	801218c <dwt_setrxtimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8003316:	4ea0      	ldr	r6, [pc, #640]	@ (8003598 <tag_main+0x308>)
 8003318:	4ba0      	ldr	r3, [pc, #640]	@ (800359c <tag_main+0x30c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ffa5 	bl	800326c <get_anchor_id>
 8003322:	0003      	movs	r3, r0
 8003324:	2202      	movs	r2, #2
 8003326:	0019      	movs	r1, r3
 8003328:	0030      	movs	r0, r6
 800332a:	f00f ffe1 	bl	80132f0 <memcpy>
        memcpy(rx_resp_msg + RX_RESP_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 800332e:	4e9c      	ldr	r6, [pc, #624]	@ (80035a0 <tag_main+0x310>)
 8003330:	4b9a      	ldr	r3, [pc, #616]	@ (800359c <tag_main+0x30c>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff ff99 	bl	800326c <get_anchor_id>
 800333a:	0003      	movs	r3, r0
 800333c:	2202      	movs	r2, #2
 800333e:	0019      	movs	r1, r3
 8003340:	0030      	movs	r0, r6
 8003342:	f00f ffd5 	bl	80132f0 <memcpy>
        memcpy(tx_final_msg + TX_FINAL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8003346:	4e97      	ldr	r6, [pc, #604]	@ (80035a4 <tag_main+0x314>)
 8003348:	4b94      	ldr	r3, [pc, #592]	@ (800359c <tag_main+0x30c>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff ff8d 	bl	800326c <get_anchor_id>
 8003352:	0003      	movs	r3, r0
 8003354:	2202      	movs	r2, #2
 8003356:	0019      	movs	r1, r3
 8003358:	0030      	movs	r0, r6
 800335a:	f00f ffc9 	bl	80132f0 <memcpy>

        current_anchor = (current_anchor + 1) % total_anchors;
 800335e:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <tag_main+0x30c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	4b90      	ldr	r3, [pc, #576]	@ (80035a8 <tag_main+0x318>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	0019      	movs	r1, r3
 800336a:	0010      	movs	r0, r2
 800336c:	f7fd f858 	bl	8000420 <__aeabi_idivmod>
 8003370:	000b      	movs	r3, r1
 8003372:	b2da      	uxtb	r2, r3
 8003374:	4b89      	ldr	r3, [pc, #548]	@ (800359c <tag_main+0x30c>)
 8003376:	701a      	strb	r2, [r3, #0]

        /* Don't send if another interaction is happening */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8003378:	2000      	movs	r0, #0
 800337a:	f00e febf 	bl	80120fc <dwt_rxenable>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	2100      	movs	r1, #0
 8003382:	200f      	movs	r0, #15
 8003384:	f00e fbd8 	bl	8011b38 <dwt_read32bitoffsetreg>
 8003388:	0002      	movs	r2, r0
 800338a:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <tag_main+0x31c>)
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	4b87      	ldr	r3, [pc, #540]	@ (80035ac <tag_main+0x31c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a87      	ldr	r2, [pc, #540]	@ (80035b0 <tag_main+0x320>)
 8003394:	4013      	ands	r3, r2
 8003396:	d0f3      	beq.n	8003380 <tag_main+0xf0>
        {}

        if (status_reg & SYS_STATUS_RXFCG)
 8003398:	4b84      	ldr	r3, [pc, #528]	@ (80035ac <tag_main+0x31c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	01db      	lsls	r3, r3, #7
 80033a0:	4013      	ands	r3, r2
 80033a2:	d000      	beq.n	80033a6 <tag_main+0x116>
 80033a4:	e0e7      	b.n	8003576 <tag_main+0x2e6>
//        	Sleep(50);
        	continue;
        }
        else
        {
        	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80033a6:	4b83      	ldr	r3, [pc, #524]	@ (80035b4 <tag_main+0x324>)
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	200f      	movs	r0, #15
 80033ae:	f00e fc54 	bl	8011c5a <dwt_write32bitoffsetreg>
        	dwt_rxreset();
 80033b2:	f00e ff3b 	bl	801222c <dwt_rxreset>
        }


        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80033b6:	4b80      	ldr	r3, [pc, #512]	@ (80035b8 <tag_main+0x328>)
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	4b80      	ldr	r3, [pc, #512]	@ (80035bc <tag_main+0x32c>)
 80033bc:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 80033be:	4b7f      	ldr	r3, [pc, #508]	@ (80035bc <tag_main+0x32c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	0019      	movs	r1, r3
 80033c4:	200c      	movs	r0, #12
 80033c6:	f00e fa78 	bl	80118ba <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 80033ca:	2201      	movs	r2, #1
 80033cc:	2100      	movs	r1, #0
 80033ce:	200c      	movs	r0, #12
 80033d0:	f00e fa9c 	bl	801190c <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 80033d4:	2002      	movs	r0, #2
 80033d6:	f00e fde1 	bl	8011f9c <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	2100      	movs	r1, #0
 80033de:	200f      	movs	r0, #15
 80033e0:	f00e fbaa 	bl	8011b38 <dwt_read32bitoffsetreg>
 80033e4:	0002      	movs	r2, r0
 80033e6:	4b71      	ldr	r3, [pc, #452]	@ (80035ac <tag_main+0x31c>)
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4b70      	ldr	r3, [pc, #448]	@ (80035ac <tag_main+0x31c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a70      	ldr	r2, [pc, #448]	@ (80035b0 <tag_main+0x320>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	d0f3      	beq.n	80033dc <tag_main+0x14c>

        // uint32_t status_reg_error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        // CDC_Transmit_FS((uint8_t*) status_reg_error, sizeof(status_reg_error));

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 80033f4:	4b70      	ldr	r3, [pc, #448]	@ (80035b8 <tag_main+0x328>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b6e      	ldr	r3, [pc, #440]	@ (80035b8 <tag_main+0x328>)
 80033fe:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8003400:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <tag_main+0x31c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	01db      	lsls	r3, r3, #7
 8003408:	4013      	ands	r3, r2
 800340a:	d100      	bne.n	800340e <tag_main+0x17e>
 800340c:	e0a7      	b.n	800355e <tag_main+0x2ce>
        {
            uint32 frame_len;

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 800340e:	2100      	movs	r1, #0
 8003410:	2010      	movs	r0, #16
 8003412:	f00e fb91 	bl	8011b38 <dwt_read32bitoffsetreg>
 8003416:	0003      	movs	r3, r0
 8003418:	227f      	movs	r2, #127	@ 0x7f
 800341a:	4013      	ands	r3, r2
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
            if (frame_len <= RX_BUF_LEN)
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	2b14      	cmp	r3, #20
 8003422:	d806      	bhi.n	8003432 <tag_main+0x1a2>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	b299      	uxth	r1, r3
 8003428:	4b65      	ldr	r3, [pc, #404]	@ (80035c0 <tag_main+0x330>)
 800342a:	2200      	movs	r2, #0
 800342c:	0018      	movs	r0, r3
 800342e:	f00e fa91 	bl	8011954 <dwt_readrxdata>
            }

            CDC_Transmit_FS(rx_buffer, sizeof(rx_buffer));
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <tag_main+0x330>)
 8003434:	2114      	movs	r1, #20
 8003436:	0018      	movs	r0, r3
 8003438:	f00d fa48 	bl	80108cc <CDC_Transmit_FS>

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 800343c:	2381      	movs	r3, #129	@ 0x81
 800343e:	01db      	lsls	r3, r3, #7
 8003440:	001a      	movs	r2, r3
 8003442:	2100      	movs	r1, #0
 8003444:	200f      	movs	r0, #15
 8003446:	f00e fc08 	bl	8011c5a <dwt_write32bitoffsetreg>

            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 800344a:	4b5d      	ldr	r3, [pc, #372]	@ (80035c0 <tag_main+0x330>)
 800344c:	2200      	movs	r2, #0
 800344e:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8003450:	495c      	ldr	r1, [pc, #368]	@ (80035c4 <tag_main+0x334>)
 8003452:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <tag_main+0x330>)
 8003454:	220a      	movs	r2, #10
 8003456:	0018      	movs	r0, r3
 8003458:	f00f feaa 	bl	80131b0 <memcmp>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d000      	beq.n	8003462 <tag_main+0x1d2>
 8003460:	e085      	b.n	800356e <tag_main+0x2de>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 8003462:	f000 f8c1 	bl	80035e8 <get_tx_timestamp_u64>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	4957      	ldr	r1, [pc, #348]	@ (80035c8 <tag_main+0x338>)
 800346c:	600a      	str	r2, [r1, #0]
 800346e:	604b      	str	r3, [r1, #4]
                resp_rx_ts = get_rx_timestamp_u64();
 8003470:	f000 f8f4 	bl	800365c <get_rx_timestamp_u64>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	4954      	ldr	r1, [pc, #336]	@ (80035cc <tag_main+0x33c>)
 800347a:	600a      	str	r2, [r1, #0]
 800347c:	604b      	str	r3, [r1, #4]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 800347e:	4b53      	ldr	r3, [pc, #332]	@ (80035cc <tag_main+0x33c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4852      	ldr	r0, [pc, #328]	@ (80035d0 <tag_main+0x340>)
 8003486:	2100      	movs	r1, #0
 8003488:	1812      	adds	r2, r2, r0
 800348a:	414b      	adcs	r3, r1
 800348c:	0619      	lsls	r1, r3, #24
 800348e:	0a14      	lsrs	r4, r2, #8
 8003490:	430c      	orrs	r4, r1
 8003492:	0a1d      	lsrs	r5, r3, #8
 8003494:	0023      	movs	r3, r4
 8003496:	623b      	str	r3, [r7, #32]
                dwt_setdelayedtrxtime(final_tx_time);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	0018      	movs	r0, r3
 800349c:	f00e fd6f 	bl	8011f7e <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0011      	movs	r1, r2
 80034ae:	0e09      	lsrs	r1, r1, #24
 80034b0:	60f9      	str	r1, [r7, #12]
 80034b2:	0013      	movs	r3, r2
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	000b      	movs	r3, r1
 80034be:	0a5b      	lsrs	r3, r3, #9
 80034c0:	025b      	lsls	r3, r3, #9
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	23ff      	movs	r3, #255	@ 0xff
 80034c6:	401a      	ands	r2, r3
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	4a32      	ldr	r2, [pc, #200]	@ (8003594 <tag_main+0x304>)
 80034cc:	2300      	movs	r3, #0
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	1812      	adds	r2, r2, r0
 80034d4:	414b      	adcs	r3, r1
 80034d6:	493f      	ldr	r1, [pc, #252]	@ (80035d4 <tag_main+0x344>)
 80034d8:	600a      	str	r2, [r1, #0]
 80034da:	604b      	str	r3, [r1, #4]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <tag_main+0x338>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	493d      	ldr	r1, [pc, #244]	@ (80035d8 <tag_main+0x348>)
 80034e4:	0008      	movs	r0, r1
 80034e6:	f000 f8f3 	bl	80036d0 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 80034ea:	4b38      	ldr	r3, [pc, #224]	@ (80035cc <tag_main+0x33c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	493a      	ldr	r1, [pc, #232]	@ (80035dc <tag_main+0x34c>)
 80034f2:	0008      	movs	r0, r1
 80034f4:	f000 f8ec 	bl	80036d0 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 80034f8:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <tag_main+0x344>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4938      	ldr	r1, [pc, #224]	@ (80035e0 <tag_main+0x350>)
 8003500:	0008      	movs	r0, r1
 8003502:	f000 f8e5 	bl	80036d0 <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003506:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <tag_main+0x328>)
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <tag_main+0x354>)
 800350c:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 800350e:	4b35      	ldr	r3, [pc, #212]	@ (80035e4 <tag_main+0x354>)
 8003510:	2200      	movs	r2, #0
 8003512:	0019      	movs	r1, r3
 8003514:	2018      	movs	r0, #24
 8003516:	f00e f9d0 	bl	80118ba <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1);           /* Zero offset in TX buffer, ranging. */
 800351a:	2201      	movs	r2, #1
 800351c:	2100      	movs	r1, #0
 800351e:	2018      	movs	r0, #24
 8003520:	f00e f9f4 	bl	801190c <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 8003524:	2001      	movs	r0, #1
 8003526:	f00e fd39 	bl	8011f9c <dwt_starttx>
 800352a:	0003      	movs	r3, r0
 800352c:	61fb      	str	r3, [r7, #28]

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11c      	bne.n	800356e <tag_main+0x2de>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8003534:	46c0      	nop			@ (mov r8, r8)
 8003536:	2100      	movs	r1, #0
 8003538:	200f      	movs	r0, #15
 800353a:	f00e fafd 	bl	8011b38 <dwt_read32bitoffsetreg>
 800353e:	0003      	movs	r3, r0
 8003540:	2280      	movs	r2, #128	@ 0x80
 8003542:	4013      	ands	r3, r2
 8003544:	d0f7      	beq.n	8003536 <tag_main+0x2a6>
                    {
                    };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	2100      	movs	r1, #0
 800354a:	200f      	movs	r0, #15
 800354c:	f00e fb85 	bl	8011c5a <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 8003550:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <tag_main+0x328>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <tag_main+0x328>)
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e007      	b.n	800356e <tag_main+0x2de>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800355e:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <tag_main+0x324>)
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	200f      	movs	r0, #15
 8003566:	f00e fb78 	bl	8011c5a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 800356a:	f00e fe5f 	bl	801222c <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 800356e:	2001      	movs	r0, #1
 8003570:	f00e ffb7 	bl	80124e2 <Sleep>
 8003574:	e6cf      	b.n	8003316 <tag_main+0x86>
        	continue;
 8003576:	46c0      	nop			@ (mov r8, r8)
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8003578:	e6cd      	b.n	8003316 <tag_main+0x86>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	2000004f 	.word	0x2000004f
 8003580:	20000044 	.word	0x20000044
 8003584:	20000059 	.word	0x20000059
 8003588:	2000006b 	.word	0x2000006b
 800358c:	20000030 	.word	0x20000030
 8003590:	2000003c 	.word	0x2000003c
 8003594:	00004031 	.word	0x00004031
 8003598:	2000004d 	.word	0x2000004d
 800359c:	20000a8c 	.word	0x20000a8c
 80035a0:	2000005b 	.word	0x2000005b
 80035a4:	20000069 	.word	0x20000069
 80035a8:	2000002e 	.word	0x2000002e
 80035ac:	20000aa4 	.word	0x20000aa4
 80035b0:	2427d000 	.word	0x2427d000
 80035b4:	24279000 	.word	0x24279000
 80035b8:	20000a8d 	.word	0x20000a8d
 80035bc:	20000048 	.word	0x20000048
 80035c0:	20000a90 	.word	0x20000a90
 80035c4:	20000054 	.word	0x20000054
 80035c8:	20000aa8 	.word	0x20000aa8
 80035cc:	20000ab0 	.word	0x20000ab0
 80035d0:	09c40000 	.word	0x09c40000
 80035d4:	20000ab8 	.word	0x20000ab8
 80035d8:	2000006e 	.word	0x2000006e
 80035dc:	20000072 	.word	0x20000072
 80035e0:	20000076 	.word	0x20000076
 80035e4:	20000064 	.word	0x20000064

080035e8 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80035ee:	2200      	movs	r2, #0
 80035f0:	2300      	movs	r3, #0
 80035f2:	623a      	str	r2, [r7, #32]
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 80035f6:	2314      	movs	r3, #20
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	0018      	movs	r0, r3
 80035fc:	f00e f9c3 	bl	8011986 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003600:	2304      	movs	r3, #4
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e020      	b.n	8003648 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	0e1b      	lsrs	r3, r3, #24
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	0215      	lsls	r5, r2, #8
 800360e:	431d      	orrs	r5, r3
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	021c      	lsls	r4, r3, #8
 8003614:	623c      	str	r4, [r7, #32]
 8003616:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8003618:	2314      	movs	r3, #20
 800361a:	18fa      	adds	r2, r7, r3
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	18d3      	adds	r3, r2, r3
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	0008      	movs	r0, r1
 8003630:	4318      	orrs	r0, r3
 8003632:	6038      	str	r0, [r7, #0]
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	431a      	orrs	r2, r3
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	623a      	str	r2, [r7, #32]
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b01      	subs	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	dadb      	bge.n	8003606 <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003652:	0010      	movs	r0, r2
 8003654:	0019      	movs	r1, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b00a      	add	sp, #40	@ 0x28
 800365a:	bdb0      	pop	{r4, r5, r7, pc}

0800365c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8003662:	2200      	movs	r2, #0
 8003664:	2300      	movs	r3, #0
 8003666:	623a      	str	r2, [r7, #32]
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 800366a:	2314      	movs	r3, #20
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f00e f997 	bl	80119a2 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8003674:	2304      	movs	r3, #4
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e020      	b.n	80036bc <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003680:	0215      	lsls	r5, r2, #8
 8003682:	431d      	orrs	r5, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	021c      	lsls	r4, r3, #8
 8003688:	623c      	str	r4, [r7, #32]
 800368a:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 800368c:	2314      	movs	r3, #20
 800368e:	18fa      	adds	r2, r7, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	0008      	movs	r0, r1
 80036a4:	4318      	orrs	r0, r3
 80036a6:	6038      	str	r0, [r7, #0]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	623a      	str	r2, [r7, #32]
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	dadb      	bge.n	800367a <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b00a      	add	sp, #40	@ 0x28
 80036ce:	bdb0      	pop	{r4, r5, r7, pc}

080036d0 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	603a      	str	r2, [r7, #0]
 80036da:	607b      	str	r3, [r7, #4]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e013      	b.n	800370a <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8)ts;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	18d1      	adds	r1, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1c13      	adds	r3, r2, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	700b      	strb	r3, [r1, #0]
        ts >>= 8;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	0a14      	lsrs	r4, r2, #8
 80036fa:	431c      	orrs	r4, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0a1d      	lsrs	r5, r3, #8
 8003700:	603c      	str	r4, [r7, #0]
 8003702:	607d      	str	r5, [r7, #4]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b03      	cmp	r3, #3
 800370e:	dde8      	ble.n	80036e2 <final_msg_set_ts+0x12>
    }
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b006      	add	sp, #24
 8003718:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800371c <Reset_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< HEAD
 80042ec:	480d      	ldr	r0, [pc, #52]	@ (8004324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042f0:	f7ff fff6 	bl	80042e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042f4:	480c      	ldr	r0, [pc, #48]	@ (8004328 <LoopForever+0x6>)
  ldr r1, =_edata
 80042f6:	490d      	ldr	r1, [pc, #52]	@ (800432c <LoopForever+0xa>)
  ldr r2, =_sidata
 80042f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <LoopForever+0xe>)
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042fc:	e002      	b.n	8004304 <LoopCopyDataInit>

080042fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004302:	3304      	adds	r3, #4

08004304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004308:	d3f9      	bcc.n	80042fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430a:	4a0a      	ldr	r2, [pc, #40]	@ (8004334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800430c:	4c0a      	ldr	r4, [pc, #40]	@ (8004338 <LoopForever+0x16>)
  movs r3, #0
 800430e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004310:	e001      	b.n	8004316 <LoopFillZerobss>

08004312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004314:	3204      	adds	r2, #4

08004316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004318:	d3fb      	bcc.n	8004312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800431a:	f00f ff3b 	bl	8014194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800431e:	f7ff f8d5 	bl	80034cc <main>

08004322 <LoopForever>:

LoopForever:
    b LoopForever
 8004322:	e7fe      	b.n	8004322 <LoopForever>
  ldr   r0, =_estack
 8004324:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800432c:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 8004330:	0801a2e0 	.word	0x0801a2e0
  ldr r2, =_sbss
 8004334:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8004338:	20001fa8 	.word	0x20001fa8

0800433c <ADC1_COMP_IRQHandler>:
=======
 800371c:	480d      	ldr	r0, [pc, #52]	@ (8003754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800371e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003720:	f7ff fd9e 	bl	8003260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003724:	480c      	ldr	r0, [pc, #48]	@ (8003758 <LoopForever+0x6>)
  ldr r1, =_edata
 8003726:	490d      	ldr	r1, [pc, #52]	@ (800375c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003728:	4a0d      	ldr	r2, [pc, #52]	@ (8003760 <LoopForever+0xe>)
  movs r3, #0
 800372a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800372c:	e002      	b.n	8003734 <LoopCopyDataInit>

0800372e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800372e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003732:	3304      	adds	r3, #4

08003734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003738:	d3f9      	bcc.n	800372e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800373c:	4c0a      	ldr	r4, [pc, #40]	@ (8003768 <LoopForever+0x16>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003740:	e001      	b.n	8003746 <LoopFillZerobss>

08003742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003744:	3204      	adds	r2, #4

08003746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003748:	d3fb      	bcc.n	8003742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800374a:	f00f fd9f 	bl	801328c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800374e:	f7fe fe7f 	bl	8002450 <main>

08003752 <LoopForever>:

LoopForever:
    b LoopForever
 8003752:	e7fe      	b.n	8003752 <LoopForever>
  ldr   r0, =_estack
 8003754:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800375c:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8003760:	08018cfc 	.word	0x08018cfc
  ldr r2, =_sbss
 8003764:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8003768:	20001ea0 	.word	0x20001ea0

0800376c <ADC1_COMP_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 800433c:	e7fe      	b.n	800433c <ADC1_COMP_IRQHandler>
	...

08004340 <HAL_Init>:
=======
 800376c:	e7fe      	b.n	800376c <ADC1_COMP_IRQHandler>
	...

08003770 <HAL_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004344:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <HAL_Init+0x24>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_Init+0x24>)
 800434a:	2110      	movs	r1, #16
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
=======
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003774:	4b07      	ldr	r3, [pc, #28]	@ (8003794 <HAL_Init+0x24>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_Init+0x24>)
 800377a:	2110      	movs	r1, #16
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
<<<<<<< HEAD
 8004350:	2003      	movs	r0, #3
 8004352:	f000 f809 	bl	8004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004356:	f7ff fcb7 	bl	8003cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	40022000 	.word	0x40022000

08004368 <HAL_InitTick>:
=======
 8003780:	2003      	movs	r0, #3
 8003782:	f000 f809 	bl	8003798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003786:	f7ff fa5f 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	40022000 	.word	0x40022000

08003798 <HAL_InitTick>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004370:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <HAL_InitTick+0x5c>)
 8004372:	681c      	ldr	r4, [r3, #0]
 8004374:	4b14      	ldr	r3, [pc, #80]	@ (80043c8 <HAL_InitTick+0x60>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	0019      	movs	r1, r3
 800437a:	23fa      	movs	r3, #250	@ 0xfa
 800437c:	0098      	lsls	r0, r3, #2
 800437e:	f7fb fedf 	bl	8000140 <__udivsi3>
 8004382:	0003      	movs	r3, r0
 8004384:	0019      	movs	r1, r3
 8004386:	0020      	movs	r0, r4
 8004388:	f7fb feda 	bl	8000140 <__udivsi3>
 800438c:	0003      	movs	r3, r0
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fd2b 	bl	8004dea <HAL_SYSTICK_Config>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d001      	beq.n	800439c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e00f      	b.n	80043bc <HAL_InitTick+0x54>
=======
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a0:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <HAL_InitTick+0x5c>)
 80037a2:	681c      	ldr	r4, [r3, #0]
 80037a4:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <HAL_InitTick+0x60>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	0019      	movs	r1, r3
 80037aa:	23fa      	movs	r3, #250	@ 0xfa
 80037ac:	0098      	lsls	r0, r3, #2
 80037ae:	f7fc fcc7 	bl	8000140 <__udivsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	0019      	movs	r1, r3
 80037b6:	0020      	movs	r0, r4
 80037b8:	f7fc fcc2 	bl	8000140 <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fbaf 	bl	8003f22 <HAL_SYSTICK_Config>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e00f      	b.n	80037ec <HAL_InitTick+0x54>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d80b      	bhi.n	80043ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	2301      	movs	r3, #1
 80043a6:	425b      	negs	r3, r3
 80043a8:	2200      	movs	r2, #0
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 fce8 	bl	8004d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <HAL_InitTick+0x64>)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
=======
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d80b      	bhi.n	80037ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 fb6c 	bl	8003eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_InitTick+0x64>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b003      	add	sp, #12
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	20000070 	.word	0x20000070
 80043c8:	20000078 	.word	0x20000078
 80043cc:	20000074 	.word	0x20000074

080043d0 <HAL_IncTick>:
=======
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b003      	add	sp, #12
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	20000018 	.word	0x20000018
 80037f8:	20000080 	.word	0x20000080
 80037fc:	2000007c 	.word	0x2000007c

08003800 <HAL_IncTick>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_IncTick+0x1c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	001a      	movs	r2, r3
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_IncTick+0x20>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	18d2      	adds	r2, r2, r3
 80043e0:	4b03      	ldr	r3, [pc, #12]	@ (80043f0 <HAL_IncTick+0x20>)
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	20000078 	.word	0x20000078
 80043f0:	20000bc8 	.word	0x20000bc8

080043f4 <HAL_GetTick>:
=======
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_IncTick+0x1c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	001a      	movs	r2, r3
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_IncTick+0x20>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	18d2      	adds	r2, r2, r3
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_IncTick+0x20>)
 8003812:	601a      	str	r2, [r3, #0]
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	20000080 	.word	0x20000080
 8003820:	20000ac0 	.word	0x20000ac0

08003824 <HAL_GetTick>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  return uwTick;
 80043f8:	4b02      	ldr	r3, [pc, #8]	@ (8004404 <HAL_GetTick+0x10>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	20000bc8 	.word	0x20000bc8

08004408 <HAL_Delay>:
=======
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  return uwTick;
 8003828:	4b02      	ldr	r3, [pc, #8]	@ (8003834 <HAL_GetTick+0x10>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000ac0 	.word	0x20000ac0

08003838 <HAL_Delay>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff fff0 	bl	80043f4 <HAL_GetTick>
 8004414:	0003      	movs	r3, r0
 8004416:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	d005      	beq.n	800442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004422:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <HAL_Delay+0x44>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	001a      	movs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	189b      	adds	r3, r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	f7ff ffe0 	bl	80043f4 <HAL_GetTick>
 8004434:	0002      	movs	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d8f7      	bhi.n	8004430 <HAL_Delay+0x28>
  {
  }
}
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b004      	add	sp, #16
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	20000078 	.word	0x20000078

08004450 <HAL_ADC_Init>:
=======
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7ff fff0 	bl	8003824 <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
 8003846:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3301      	adds	r3, #1
 8003850:	d005      	beq.n	800385e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <HAL_Delay+0x44>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	001a      	movs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	189b      	adds	r3, r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	f7ff ffe0 	bl	8003824 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d8f7      	bhi.n	8003860 <HAL_Delay+0x28>
  {
  }
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	20000080 	.word	0x20000080

08003880 <HAL_ADC_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004458:	230f      	movs	r3, #15
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e125      	b.n	80046ba <HAL_ADC_Init+0x26a>
=======
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e125      	b.n	8003aea <HAL_ADC_Init+0x26a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2234      	movs	r2, #52	@ 0x34
 8004480:	2100      	movs	r1, #0
 8004482:	5499      	strb	r1, [r3, r2]
=======
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2234      	movs	r2, #52	@ 0x34
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f7ff fc4a 	bl	8003d20 <HAL_ADC_MspInit>
=======
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff f9f2 	bl	8002ca0 <HAL_ADC_MspInit>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	2210      	movs	r2, #16
 8004492:	4013      	ands	r3, r2
 8004494:	d000      	beq.n	8004498 <HAL_ADC_Init+0x48>
 8004496:	e103      	b.n	80046a0 <HAL_ADC_Init+0x250>
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d000      	beq.n	80044a4 <HAL_ADC_Init+0x54>
 80044a2:	e0fd      	b.n	80046a0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80044ae:	d000      	beq.n	80044b2 <HAL_ADC_Init+0x62>
 80044b0:	e0f6      	b.n	80046a0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	4a83      	ldr	r2, [pc, #524]	@ (80046c4 <HAL_ADC_Init+0x274>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	2202      	movs	r2, #2
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	2210      	movs	r2, #16
 80038c2:	4013      	ands	r3, r2
 80038c4:	d000      	beq.n	80038c8 <HAL_ADC_Init+0x48>
 80038c6:	e103      	b.n	8003ad0 <HAL_ADC_Init+0x250>
 80038c8:	230f      	movs	r3, #15
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d000      	beq.n	80038d4 <HAL_ADC_Init+0x54>
 80038d2:	e0fd      	b.n	8003ad0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80038de:	d000      	beq.n	80038e2 <HAL_ADC_Init+0x62>
 80038e0:	e0f6      	b.n	8003ad0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	4a83      	ldr	r2, [pc, #524]	@ (8003af4 <HAL_ADC_Init+0x274>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	2202      	movs	r2, #2
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
<<<<<<< HEAD
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d112      	bne.n	80044f6 <HAL_ADC_Init+0xa6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d009      	beq.n	80044f2 <HAL_ADC_Init+0xa2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	401a      	ands	r2, r3
 80044ea:	2380      	movs	r3, #128	@ 0x80
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0xa6>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_ADC_Init+0xa8>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d116      	bne.n	800452a <HAL_ADC_Init+0xda>
=======
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d112      	bne.n	8003926 <HAL_ADC_Init+0xa6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	4013      	ands	r3, r2
 800390a:	2b01      	cmp	r3, #1
 800390c:	d009      	beq.n	8003922 <HAL_ADC_Init+0xa2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	401a      	ands	r2, r3
 800391a:	2380      	movs	r3, #128	@ 0x80
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	429a      	cmp	r2, r3
 8003920:	d101      	bne.n	8003926 <HAL_ADC_Init+0xa6>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_ADC_Init+0xa8>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d116      	bne.n	800395a <HAL_ADC_Init+0xda>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
<<<<<<< HEAD
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2218      	movs	r2, #24
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]
=======
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2218      	movs	r2, #24
 8003934:	4393      	bics	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
<<<<<<< HEAD
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	0899      	lsrs	r1, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	611a      	str	r2, [r3, #16]
=======
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	0899      	lsrs	r1, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	611a      	str	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
<<<<<<< HEAD
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4964      	ldr	r1, [pc, #400]	@ (80046c8 <HAL_ADC_Init+0x278>)
 8004536:	400a      	ands	r2, r1
 8004538:	60da      	str	r2, [r3, #12]
=======
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4964      	ldr	r1, [pc, #400]	@ (8003af8 <HAL_ADC_Init+0x278>)
 8003966:	400a      	ands	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7e1b      	ldrb	r3, [r3, #24]
 800453e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7e5b      	ldrb	r3, [r3, #25]
 8004544:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004546:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	7e9b      	ldrb	r3, [r3, #26]
 800454c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800454e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	2b01      	cmp	r3, #1
 8004556:	d002      	beq.n	800455e <HAL_ADC_Init+0x10e>
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	015b      	lsls	r3, r3, #5
 800455c:	e000      	b.n	8004560 <HAL_ADC_Init+0x110>
 800455e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004560:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004566:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d101      	bne.n	8004574 <HAL_ADC_Init+0x124>
 8004570:	2304      	movs	r3, #4
 8004572:	e000      	b.n	8004576 <HAL_ADC_Init+0x126>
 8004574:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004576:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2124      	movs	r1, #36	@ 0x24
 800457c:	5c5b      	ldrb	r3, [r3, r1]
 800457e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004580:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7edb      	ldrb	r3, [r3, #27]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d115      	bne.n	80045bc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7e9b      	ldrb	r3, [r3, #26]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	0252      	lsls	r2, r2, #9
 800459e:	4313      	orrs	r3, r2
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	e00b      	b.n	80045bc <HAL_ADC_Init+0x16c>
=======
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7e1b      	ldrb	r3, [r3, #24]
 800396e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e5b      	ldrb	r3, [r3, #25]
 8003974:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003976:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7e9b      	ldrb	r3, [r3, #26]
 800397c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800397e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	2b01      	cmp	r3, #1
 8003986:	d002      	beq.n	800398e <HAL_ADC_Init+0x10e>
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	015b      	lsls	r3, r3, #5
 800398c:	e000      	b.n	8003990 <HAL_ADC_Init+0x110>
 800398e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003990:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003996:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_Init+0x124>
 80039a0:	2304      	movs	r3, #4
 80039a2:	e000      	b.n	80039a6 <HAL_ADC_Init+0x126>
 80039a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80039a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2124      	movs	r1, #36	@ 0x24
 80039ac:	5c5b      	ldrb	r3, [r3, r1]
 80039ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80039b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7edb      	ldrb	r3, [r3, #27]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d115      	bne.n	80039ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7e9b      	ldrb	r3, [r3, #26]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	0252      	lsls	r2, r2, #9
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	e00b      	b.n	80039ec <HAL_ADC_Init+0x16c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	2220      	movs	r2, #32
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	2201      	movs	r2, #1
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d8:	2220      	movs	r2, #32
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	2201      	movs	r2, #1
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	23c2      	movs	r3, #194	@ 0xc2
 80045c2:	33ff      	adds	r3, #255	@ 0xff
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d007      	beq.n	80045d8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045d0:	4313      	orrs	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
=======
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	23c2      	movs	r3, #194	@ 0xc2
 80039f2:	33ff      	adds	r3, #255	@ 0xff
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d007      	beq.n	8003a08 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a00:	4313      	orrs	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
<<<<<<< HEAD
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68d9      	ldr	r1, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]
=======
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68d9      	ldr	r1, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
<<<<<<< HEAD
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	055b      	lsls	r3, r3, #21
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d01b      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d017      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	2b02      	cmp	r3, #2
 8004602:	d013      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	2b03      	cmp	r3, #3
 800460a:	d00f      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	2b04      	cmp	r3, #4
 8004612:	d00b      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	2b05      	cmp	r3, #5
 800461a:	d007      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	2b06      	cmp	r3, #6
 8004622:	d003      	beq.n	800462c <HAL_ADC_Init+0x1dc>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	2b07      	cmp	r3, #7
 800462a:	d112      	bne.n	8004652 <HAL_ADC_Init+0x202>
=======
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	055b      	lsls	r3, r3, #21
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d01b      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d017      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d013      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d00f      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d00b      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d007      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d003      	beq.n	8003a5c <HAL_ADC_Init+0x1dc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	2b07      	cmp	r3, #7
 8003a5a:	d112      	bne.n	8003a82 <HAL_ADC_Init+0x202>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
<<<<<<< HEAD
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2107      	movs	r1, #7
 8004638:	438a      	bics	r2, r1
 800463a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6959      	ldr	r1, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	2207      	movs	r2, #7
 8004648:	401a      	ands	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	615a      	str	r2, [r3, #20]
=======
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2107      	movs	r1, #7
 8003a68:	438a      	bics	r2, r1
 8003a6a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6959      	ldr	r1, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	2207      	movs	r2, #7
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
<<<<<<< HEAD
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <HAL_ADC_Init+0x27c>)
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d10b      	bne.n	800467a <HAL_ADC_Init+0x22a>
=======
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_ADC_Init+0x27c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d10b      	bne.n	8003aaa <HAL_ADC_Init+0x22a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	2203      	movs	r2, #3
 800466e:	4393      	bics	r3, r2
 8004670:	2201      	movs	r2, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004678:	e01c      	b.n	80046b4 <HAL_ADC_Init+0x264>
=======
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003aa8:	e01c      	b.n	8003ae4 <HAL_ADC_Init+0x264>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	2212      	movs	r2, #18
 8004680:	4393      	bics	r3, r2
 8004682:	2210      	movs	r2, #16
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aae:	2212      	movs	r2, #18
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	2201      	movs	r2, #1
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004696:	230f      	movs	r3, #15
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800469e:	e009      	b.n	80046b4 <HAL_ADC_Init+0x264>
=======
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003ac6:	230f      	movs	r3, #15
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ace:	e009      	b.n	8003ae4 <HAL_ADC_Init+0x264>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	2210      	movs	r2, #16
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
=======
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003adc:	230f      	movs	r3, #15
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80046b4:	230f      	movs	r3, #15
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b004      	add	sp, #16
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	fffffefd 	.word	0xfffffefd
 80046c8:	fffe0219 	.word	0xfffe0219
 80046cc:	833fffe7 	.word	0x833fffe7

080046d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d8:	230f      	movs	r3, #15
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d138      	bne.n	800475e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2234      	movs	r2, #52	@ 0x34
 80046f0:	5c9b      	ldrb	r3, [r3, r2]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_Start+0x2a>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e038      	b.n	800476c <HAL_ADC_Start+0x9c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2234      	movs	r2, #52	@ 0x34
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7e5b      	ldrb	r3, [r3, #25]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d007      	beq.n	800471a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800470a:	230f      	movs	r3, #15
 800470c:	18fc      	adds	r4, r7, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f9e3 	bl	8004adc <ADC_Enable>
 8004716:	0003      	movs	r3, r0
 8004718:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800471a:	230f      	movs	r3, #15
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d120      	bne.n	8004766 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <HAL_ADC_Start+0xa4>)
 800472a:	4013      	ands	r3, r2
 800472c:	2280      	movs	r2, #128	@ 0x80
 800472e:	0052      	lsls	r2, r2, #1
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2234      	movs	r2, #52	@ 0x34
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	221c      	movs	r2, #28
 800474a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2104      	movs	r1, #4
 8004758:	430a      	orrs	r2, r1
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	e003      	b.n	8004766 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800475e:	230f      	movs	r3, #15
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2202      	movs	r2, #2
 8004764:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004766:	230f      	movs	r3, #15
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b005      	add	sp, #20
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	fffff0fe 	.word	0xfffff0fe

08004778 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d102      	bne.n	8004790 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800478a:	2308      	movs	r3, #8
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e014      	b.n	80047ba <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	4013      	ands	r3, r2
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10b      	bne.n	80047b6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	2220      	movs	r2, #32
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2234      	movs	r2, #52	@ 0x34
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e071      	b.n	800489a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80047b6:	230c      	movs	r3, #12
 80047b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80047ba:	f7ff fe1b 	bl	80043f4 <HAL_GetTick>
 80047be:	0003      	movs	r3, r0
 80047c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047c2:	e01f      	b.n	8004804 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	d01c      	beq.n	8004804 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_ADC_PollForConversion+0x68>
 80047d0:	f7ff fe10 	bl	80043f4 <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d211      	bcs.n	8004804 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4013      	ands	r3, r2
 80047ea:	d10b      	bne.n	8004804 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	2204      	movs	r2, #4
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2234      	movs	r2, #52	@ 0x34
 80047fc:	2100      	movs	r1, #0
 80047fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e04a      	b.n	800489a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4013      	ands	r3, r2
 800480e:	d0d9      	beq.n	80047c4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	23c0      	movs	r3, #192	@ 0xc0
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d12d      	bne.n	8004888 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004830:	2b00      	cmp	r3, #0
 8004832:	d129      	bne.n	8004888 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2208      	movs	r2, #8
 800483c:	4013      	ands	r3, r2
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2204      	movs	r2, #4
 800484a:	4013      	ands	r3, r2
 800484c:	d110      	bne.n	8004870 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	210c      	movs	r1, #12
 800485a:	438a      	bics	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	4a10      	ldr	r2, [pc, #64]	@ (80048a4 <HAL_ADC_PollForConversion+0x12c>)
 8004864:	4013      	ands	r3, r2
 8004866:	2201      	movs	r2, #1
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38
 800486e:	e00b      	b.n	8004888 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	2220      	movs	r2, #32
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004880:	2201      	movs	r2, #1
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7e1b      	ldrb	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	220c      	movs	r2, #12
 8004896:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	fffffefe 	.word	0xfffffefe

080048a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_ADC_ConfigChannel>:
=======
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	fffffefd 	.word	0xfffffefd
 8003af8:	fffe0219 	.word	0xfffe0219
 8003afc:	833fffe7 	.word	0x833fffe7

08003b00 <HAL_ADC_ConfigChannel>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ca:	230f      	movs	r3, #15
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
=======
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
<<<<<<< HEAD
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	055b      	lsls	r3, r3, #21
 80048de:	429a      	cmp	r2, r3
 80048e0:	d011      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x46>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d00d      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x46>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d009      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x46>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d005      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x46>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d001      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x46>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
=======
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	055b      	lsls	r3, r3, #21
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d011      	beq.n	8003b46 <HAL_ADC_ConfigChannel+0x46>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00d      	beq.n	8003b46 <HAL_ADC_ConfigChannel+0x46>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d009      	beq.n	8003b46 <HAL_ADC_ConfigChannel+0x46>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d005      	beq.n	8003b46 <HAL_ADC_ConfigChannel+0x46>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d001      	beq.n	8003b46 <HAL_ADC_ConfigChannel+0x46>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2234      	movs	r2, #52	@ 0x34
 800490a:	5c9b      	ldrb	r3, [r3, r2]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x54>
 8004910:	2302      	movs	r3, #2
 8004912:	e0d0      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x1f6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2234      	movs	r2, #52	@ 0x34
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]
=======
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2234      	movs	r2, #52	@ 0x34
 8003b4a:	5c9b      	ldrb	r3, [r3, r2]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x54>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0d0      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x1f6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2234      	movs	r2, #52	@ 0x34
 8003b58:	2101      	movs	r1, #1
 8003b5a:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
<<<<<<< HEAD
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2204      	movs	r2, #4
 8004924:	4013      	ands	r3, r2
 8004926:	d000      	beq.n	800492a <HAL_ADC_ConfigChannel+0x6a>
 8004928:	e0b4      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x1d4>
=======
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2204      	movs	r2, #4
 8003b64:	4013      	ands	r3, r2
 8003b66:	d000      	beq.n	8003b6a <HAL_ADC_ConfigChannel+0x6a>
 8003b68:	e0b4      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
<<<<<<< HEAD
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a64      	ldr	r2, [pc, #400]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x200>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d100      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x76>
 8004934:	e082      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x17c>
=======
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a64      	ldr	r2, [pc, #400]	@ (8003d00 <HAL_ADC_ConfigChannel+0x200>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x76>
 8003b74:	e082      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x17c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
<<<<<<< HEAD
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	409a      	lsls	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
<<<<<<< HEAD
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	055b      	lsls	r3, r3, #21
 8004954:	429a      	cmp	r2, r3
 8004956:	d037      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d033      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	2b02      	cmp	r3, #2
 8004966:	d02f      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	2b03      	cmp	r3, #3
 800496e:	d02b      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	2b04      	cmp	r3, #4
 8004976:	d027      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	2b05      	cmp	r3, #5
 800497e:	d023      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	2b06      	cmp	r3, #6
 8004986:	d01f      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	2b07      	cmp	r3, #7
 800498e:	d01b      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
=======
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	055b      	lsls	r3, r3, #21
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d037      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d033      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d02f      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d02b      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d027      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d023      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d01f      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	d01b      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
<<<<<<< HEAD
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2107      	movs	r1, #7
 800499c:	400b      	ands	r3, r1
 800499e:	429a      	cmp	r2, r3
 80049a0:	d012      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x108>
=======
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2107      	movs	r1, #7
 8003bdc:	400b      	ands	r3, r1
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d012      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x108>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
<<<<<<< HEAD
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2107      	movs	r1, #7
 80049ae:	438a      	bics	r2, r1
 80049b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6959      	ldr	r1, [r3, #20]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2207      	movs	r2, #7
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	615a      	str	r2, [r3, #20]
=======
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2107      	movs	r1, #7
 8003bee:	438a      	bics	r2, r1
 8003bf0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6959      	ldr	r1, [r3, #20]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d007      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x120>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b11      	cmp	r3, #17
 80049d6:	d003      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x120>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b12      	cmp	r3, #18
 80049de:	d163      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x1e8>
=======
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d007      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x120>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b11      	cmp	r3, #17
 8003c16:	d003      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x120>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b12      	cmp	r3, #18
 8003c1e:	d163      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1e8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
<<<<<<< HEAD
 80049e0:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x204>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d009      	beq.n	8004a00 <HAL_ADC_ConfigChannel+0x140>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b11      	cmp	r3, #17
 80049f2:	d102      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x13a>
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	03db      	lsls	r3, r3, #15
 80049f8:	e004      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x144>
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	045b      	lsls	r3, r3, #17
 80049fe:	e001      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x144>
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x204>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d14a      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x1e8>
=======
 8003c20:	4b38      	ldr	r3, [pc, #224]	@ (8003d04 <HAL_ADC_ConfigChannel+0x204>)
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d009      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x140>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b11      	cmp	r3, #17
 8003c32:	d102      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x13a>
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	03db      	lsls	r3, r3, #15
 8003c38:	e004      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x144>
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	045b      	lsls	r3, r3, #17
 8003c3e:	e001      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x144>
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <HAL_ADC_ConfigChannel+0x204>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d14a      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1e8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x208>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	492d      	ldr	r1, [pc, #180]	@ (8004acc <HAL_ADC_ConfigChannel+0x20c>)
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7fb fb91 	bl	8000140 <__udivsi3>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	001a      	movs	r2, r3
 8004a22:	0013      	movs	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a2c:	e002      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f9      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x16e>
 8004a3a:	e035      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x1e8>
=======
 8003c52:	4b2d      	ldr	r3, [pc, #180]	@ (8003d08 <HAL_ADC_ConfigChannel+0x208>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	492d      	ldr	r1, [pc, #180]	@ (8003d0c <HAL_ADC_ConfigChannel+0x20c>)
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7fc fa71 	bl	8000140 <__udivsi3>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	001a      	movs	r2, r3
 8003c62:	0013      	movs	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c6c:	e002      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f9      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x16e>
 8003c7a:	e035      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x1e8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
<<<<<<< HEAD
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2101      	movs	r1, #1
 8004a48:	4099      	lsls	r1, r3
 8004a4a:	000b      	movs	r3, r1
 8004a4c:	43d9      	mvns	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	400a      	ands	r2, r1
 8004a54:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	4099      	lsls	r1, r3
 8003c8a:	000b      	movs	r3, r1
 8003c8c:	43d9      	mvns	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	400a      	ands	r2, r1
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d007      	beq.n	8004a6e <HAL_ADC_ConfigChannel+0x1ae>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b11      	cmp	r3, #17
 8004a64:	d003      	beq.n	8004a6e <HAL_ADC_ConfigChannel+0x1ae>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b12      	cmp	r3, #18
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x1e8>
=======
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d007      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x1ae>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b11      	cmp	r3, #17
 8003ca4:	d003      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x1ae>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b12      	cmp	r3, #18
 8003cac:	d11c      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1e8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
<<<<<<< HEAD
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x204>)
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d007      	beq.n	8004a8a <HAL_ADC_ConfigChannel+0x1ca>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b11      	cmp	r3, #17
 8004a80:	d101      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x1c6>
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x210>)
 8004a84:	e002      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
 8004a86:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x214>)
 8004a88:	e000      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
 8004a8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x218>)
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x204>)
 8004a8e:	400b      	ands	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e009      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x1e8>
=======
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <HAL_ADC_ConfigChannel+0x204>)
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d007      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x1ca>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b11      	cmp	r3, #17
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x1c6>
 8003cc2:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_ADC_ConfigChannel+0x210>)
 8003cc4:	e002      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x1cc>
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_ADC_ConfigChannel+0x214>)
 8003cc8:	e000      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x1cc>
 8003cca:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <HAL_ADC_ConfigChannel+0x218>)
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <HAL_ADC_ConfigChannel+0x204>)
 8003cce:	400b      	ands	r3, r1
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e009      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x1e8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	2220      	movs	r2, #32
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
=======
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	2220      	movs	r2, #32
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2234      	movs	r2, #52	@ 0x34
 8004aac:	2100      	movs	r1, #0
 8004aae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004ab0:	230f      	movs	r3, #15
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	781b      	ldrb	r3, [r3, #0]
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	00001001 	.word	0x00001001
 8004ac4:	40012708 	.word	0x40012708
 8004ac8:	20000070 	.word	0x20000070
 8004acc:	000f4240 	.word	0x000f4240
 8004ad0:	ffbfffff 	.word	0xffbfffff
 8004ad4:	feffffff 	.word	0xfeffffff
 8004ad8:	ff7fffff 	.word	0xff7fffff

08004adc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2203      	movs	r2, #3
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d112      	bne.n	8004b20 <ADC_Enable+0x44>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d009      	beq.n	8004b1c <ADC_Enable+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	401a      	ands	r2, r3
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d101      	bne.n	8004b20 <ADC_Enable+0x44>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <ADC_Enable+0x46>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d152      	bne.n	8004bcc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <ADC_Enable+0xfc>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d00d      	beq.n	8004b4e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	2210      	movs	r2, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	2201      	movs	r2, #1
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e03f      	b.n	8004bce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bdc <ADC_Enable+0x100>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	491f      	ldr	r1, [pc, #124]	@ (8004be0 <ADC_Enable+0x104>)
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fb faeb 	bl	8000140 <__udivsi3>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b6e:	e002      	b.n	8004b76 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f9      	bne.n	8004b70 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b7c:	f7ff fc3a 	bl	80043f4 <HAL_GetTick>
 8004b80:	0003      	movs	r3, r0
 8004b82:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b84:	e01b      	b.n	8004bbe <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b86:	f7ff fc35 	bl	80043f4 <HAL_GetTick>
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d914      	bls.n	8004bbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d00d      	beq.n	8004bbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e007      	b.n	8004bce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d1dc      	bne.n	8004b86 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	80000017 	.word	0x80000017
 8004bdc:	20000070 	.word	0x20000070
 8004be0:	000f4240 	.word	0x000f4240

08004be4 <__NVIC_EnableIRQ>:
=======
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2234      	movs	r2, #52	@ 0x34
 8003cec:	2100      	movs	r1, #0
 8003cee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	781b      	ldrb	r3, [r3, #0]
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	00001001 	.word	0x00001001
 8003d04:	40012708 	.word	0x40012708
 8003d08:	20000018 	.word	0x20000018
 8003d0c:	000f4240 	.word	0x000f4240
 8003d10:	ffbfffff 	.word	0xffbfffff
 8003d14:	feffffff 	.word	0xfeffffff
 8003d18:	ff7fffff 	.word	0xff7fffff

08003d1c <__NVIC_EnableIRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	0002      	movs	r2, r0
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	1dfb      	adds	r3, r7, #7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bf6:	d809      	bhi.n	8004c0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	231f      	movs	r3, #31
 8004c00:	401a      	ands	r2, r3
 8004c02:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <__NVIC_EnableIRQ+0x30>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	4091      	lsls	r1, r2
 8004c08:	000a      	movs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
  }
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_DisableIRQ>:
=======
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	0002      	movs	r2, r0
 8003d24:	1dfb      	adds	r3, r7, #7
 8003d26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2e:	d809      	bhi.n	8003d44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d30:	1dfb      	adds	r3, r7, #7
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	001a      	movs	r2, r3
 8003d36:	231f      	movs	r3, #31
 8003d38:	401a      	ands	r2, r3
 8003d3a:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <__NVIC_EnableIRQ+0x30>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4091      	lsls	r1, r2
 8003d40:	000a      	movs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
  }
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	e000e100 	.word	0xe000e100

08003d50 <__NVIC_DisableIRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	0002      	movs	r2, r0
 8004c20:	1dfb      	adds	r3, r7, #7
 8004c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	1dfb      	adds	r3, r7, #7
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c2a:	d810      	bhi.n	8004c4e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	001a      	movs	r2, r3
 8004c32:	231f      	movs	r3, #31
 8004c34:	4013      	ands	r3, r2
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <__NVIC_DisableIRQ+0x40>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	508b      	str	r3, [r1, r2]
=======
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	0002      	movs	r2, r0
 8003d58:	1dfb      	adds	r3, r7, #7
 8003d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d62:	d810      	bhi.n	8003d86 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	001a      	movs	r2, r3
 8003d6a:	231f      	movs	r3, #31
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	4908      	ldr	r1, [pc, #32]	@ (8003d90 <__NVIC_DisableIRQ+0x40>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	508b      	str	r3, [r1, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
<<<<<<< HEAD
 8004c42:	f3bf 8f4f 	dsb	sy
}
 8004c46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004c48:	f3bf 8f6f 	isb	sy
}
 8004c4c:	46c0      	nop			@ (mov r8, r8)
=======
 8003d7a:	f3bf 8f4f 	dsb	sy
}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003d80:	f3bf 8f6f 	isb	sy
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    __DSB();
    __ISB();
  }
}
<<<<<<< HEAD
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b002      	add	sp, #8
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	e000e100 	.word	0xe000e100

08004c5c <__NVIC_SetPriority>:
=======
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	0002      	movs	r2, r0
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c70:	d828      	bhi.n	8004cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c72:	4a2f      	ldr	r2, [pc, #188]	@ (8004d30 <__NVIC_SetPriority+0xd4>)
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	33c0      	adds	r3, #192	@ 0xc0
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	589b      	ldr	r3, [r3, r2]
 8004c82:	1dfa      	adds	r2, r7, #7
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	0011      	movs	r1, r2
 8004c88:	2203      	movs	r2, #3
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	00d2      	lsls	r2, r2, #3
 8004c8e:	21ff      	movs	r1, #255	@ 0xff
 8004c90:	4091      	lsls	r1, r2
 8004c92:	000a      	movs	r2, r1
 8004c94:	43d2      	mvns	r2, r2
 8004c96:	401a      	ands	r2, r3
 8004c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	22ff      	movs	r2, #255	@ 0xff
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	2303      	movs	r3, #3
 8004caa:	4003      	ands	r3, r0
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cb0:	481f      	ldr	r0, [pc, #124]	@ (8004d30 <__NVIC_SetPriority+0xd4>)
 8004cb2:	1dfb      	adds	r3, r7, #7
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	33c0      	adds	r3, #192	@ 0xc0
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	501a      	str	r2, [r3, r0]
=======
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	1dfb      	adds	r3, r7, #7
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da8:	d828      	bhi.n	8003dfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003daa:	4a2f      	ldr	r2, [pc, #188]	@ (8003e68 <__NVIC_SetPriority+0xd4>)
 8003dac:	1dfb      	adds	r3, r7, #7
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	33c0      	adds	r3, #192	@ 0xc0
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	589b      	ldr	r3, [r3, r2]
 8003dba:	1dfa      	adds	r2, r7, #7
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	00d2      	lsls	r2, r2, #3
 8003dc6:	21ff      	movs	r1, #255	@ 0xff
 8003dc8:	4091      	lsls	r1, r2
 8003dca:	000a      	movs	r2, r1
 8003dcc:	43d2      	mvns	r2, r2
 8003dce:	401a      	ands	r2, r3
 8003dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	22ff      	movs	r2, #255	@ 0xff
 8003dd8:	401a      	ands	r2, r3
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	0018      	movs	r0, r3
 8003de0:	2303      	movs	r3, #3
 8003de2:	4003      	ands	r3, r0
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003de8:	481f      	ldr	r0, [pc, #124]	@ (8003e68 <__NVIC_SetPriority+0xd4>)
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	430a      	orrs	r2, r1
 8003df4:	33c0      	adds	r3, #192	@ 0xc0
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	501a      	str	r2, [r3, r0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
<<<<<<< HEAD
 8004cc2:	e031      	b.n	8004d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <__NVIC_SetPriority+0xd8>)
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	0019      	movs	r1, r3
 8004ccc:	230f      	movs	r3, #15
 8004cce:	400b      	ands	r3, r1
 8004cd0:	3b08      	subs	r3, #8
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3306      	adds	r3, #6
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	18d3      	adds	r3, r2, r3
 8004cda:	3304      	adds	r3, #4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1dfa      	adds	r2, r7, #7
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	00d2      	lsls	r2, r2, #3
 8004cea:	21ff      	movs	r1, #255	@ 0xff
 8004cec:	4091      	lsls	r1, r2
 8004cee:	000a      	movs	r2, r1
 8004cf0:	43d2      	mvns	r2, r2
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	22ff      	movs	r2, #255	@ 0xff
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	0018      	movs	r0, r3
 8004d04:	2303      	movs	r3, #3
 8004d06:	4003      	ands	r3, r0
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d0c:	4809      	ldr	r0, [pc, #36]	@ (8004d34 <__NVIC_SetPriority+0xd8>)
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	001c      	movs	r4, r3
 8004d14:	230f      	movs	r3, #15
 8004d16:	4023      	ands	r3, r4
 8004d18:	3b08      	subs	r3, #8
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	3306      	adds	r3, #6
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18c3      	adds	r3, r0, r3
 8004d24:	3304      	adds	r3, #4
 8004d26:	601a      	str	r2, [r3, #0]
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b003      	add	sp, #12
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	e000e100 	.word	0xe000e100
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <SysTick_Config>:
=======
 8003dfa:	e031      	b.n	8003e60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <__NVIC_SetPriority+0xd8>)
 8003dfe:	1dfb      	adds	r3, r7, #7
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	0019      	movs	r1, r3
 8003e04:	230f      	movs	r3, #15
 8003e06:	400b      	ands	r3, r1
 8003e08:	3b08      	subs	r3, #8
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	3304      	adds	r3, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1dfa      	adds	r2, r7, #7
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	400a      	ands	r2, r1
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	21ff      	movs	r1, #255	@ 0xff
 8003e24:	4091      	lsls	r1, r2
 8003e26:	000a      	movs	r2, r1
 8003e28:	43d2      	mvns	r2, r2
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	22ff      	movs	r2, #255	@ 0xff
 8003e34:	401a      	ands	r2, r3
 8003e36:	1dfb      	adds	r3, r7, #7
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	4003      	ands	r3, r0
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e44:	4809      	ldr	r0, [pc, #36]	@ (8003e6c <__NVIC_SetPriority+0xd8>)
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	001c      	movs	r4, r3
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	4023      	ands	r3, r4
 8003e50:	3b08      	subs	r3, #8
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	430a      	orrs	r2, r1
 8003e56:	3306      	adds	r3, #6
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	18c3      	adds	r3, r0, r3
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b003      	add	sp, #12
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <SysTick_Config>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	045b      	lsls	r3, r3, #17
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d301      	bcc.n	8004d50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e010      	b.n	8004d72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d50:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <SysTick_Config+0x44>)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	3a01      	subs	r2, #1
 8004d56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	2103      	movs	r1, #3
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff ff7c 	bl	8004c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <SysTick_Config+0x44>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d6a:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <SysTick_Config+0x44>)
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	e000e010 	.word	0xe000e010

08004d80 <HAL_NVIC_SetPriority>:
=======
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	045b      	lsls	r3, r3, #17
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d301      	bcc.n	8003e88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e84:	2301      	movs	r3, #1
 8003e86:	e010      	b.n	8003eaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <SysTick_Config+0x44>)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e90:	2301      	movs	r3, #1
 8003e92:	425b      	negs	r3, r3
 8003e94:	2103      	movs	r1, #3
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7ff ff7c 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <SysTick_Config+0x44>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <SysTick_Config+0x44>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriority>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	210f      	movs	r1, #15
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	1c02      	adds	r2, r0, #0
 8004d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7ff ff5d 	bl	8004c5c <__NVIC_SetPriority>
=======
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	210f      	movs	r1, #15
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	1c02      	adds	r2, r0, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
<<<<<<< HEAD
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b004      	add	sp, #16
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_NVIC_EnableIRQ>:
=======
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	0002      	movs	r2, r0
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	701a      	strb	r2, [r3, #0]
=======
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	0002      	movs	r2, r0
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8004db6:	1dfb      	adds	r3, r7, #7
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff ff11 	bl	8004be4 <__NVIC_EnableIRQ>
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_NVIC_DisableIRQ>:
=======
 8003eee:	1dfb      	adds	r3, r7, #7
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff ff11 	bl	8003d1c <__NVIC_EnableIRQ>
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b002      	add	sp, #8
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_NVIC_DisableIRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	701a      	strb	r2, [r3, #0]
=======
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	0002      	movs	r2, r0
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
<<<<<<< HEAD
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff ff1b 	bl	8004c18 <__NVIC_DisableIRQ>
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_SYSTICK_Config>:
=======
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff1b 	bl	8003d50 <__NVIC_DisableIRQ>
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff9f 	bl	8004d38 <SysTick_Config>
 8004dfa:	0003      	movs	r3, r0
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_DMA_Init>:
=======
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff ff9f 	bl	8003e70 <SysTick_Config>
 8003f32:	0003      	movs	r3, r0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_DMA_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e036      	b.n	8004e88 <HAL_DMA_Init+0x84>
=======
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e036      	b.n	8003fc0 <HAL_DMA_Init+0x84>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2221      	movs	r2, #33	@ 0x21
 8004e1e:	2102      	movs	r1, #2
 8004e20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <HAL_DMA_Init+0x8c>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
=======
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2221      	movs	r2, #33	@ 0x21
 8003f56:	2102      	movs	r1, #2
 8003f58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_DMA_Init+0x8c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]
=======
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 f9d0 	bl	8005210 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2221      	movs	r2, #33	@ 0x21
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b004      	add	sp, #16
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	ffffc00f 	.word	0xffffc00f

08004e94 <HAL_DMA_Start_IT>:
=======
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 f9d0 	bl	8004348 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2221      	movs	r2, #33	@ 0x21
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b004      	add	sp, #16
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	ffffc00f 	.word	0xffffc00f

08003fcc <HAL_DMA_Start_IT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2317      	movs	r3, #23
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
=======
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2317      	movs	r3, #23
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	5c9b      	ldrb	r3, [r3, r2]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_DMA_Start_IT+0x24>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e04f      	b.n	8004f58 <HAL_DMA_Start_IT+0xc4>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2221      	movs	r2, #33	@ 0x21
 8004ec4:	5c9b      	ldrb	r3, [r3, r2]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d13a      	bne.n	8004f42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	@ 0x21
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f960 	bl	80051b6 <DMA_SetConfig>
=======
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMA_Start_IT+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e04f      	b.n	8004090 <HAL_DMA_Start_IT+0xc4>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2221      	movs	r2, #33	@ 0x21
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d13a      	bne.n	800407a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2221      	movs	r2, #33	@ 0x21
 8004008:	2102      	movs	r1, #2
 800400a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	438a      	bics	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f960 	bl	80042ee <DMA_SetConfig>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	210e      	movs	r1, #14
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e00f      	b.n	8004f30 <HAL_DMA_Start_IT+0x9c>
=======
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	210e      	movs	r1, #14
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e00f      	b.n	8004068 <HAL_DMA_Start_IT+0x9c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
<<<<<<< HEAD
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	210a      	movs	r1, #10
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
=======
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	210a      	movs	r1, #10
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2104      	movs	r1, #4
 8004064:	438a      	bics	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
<<<<<<< HEAD
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e007      	b.n	8004f52 <HAL_DMA_Start_IT+0xbe>
=======
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e007      	b.n	800408a <HAL_DMA_Start_IT+0xbe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f4a:	2317      	movs	r3, #23
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2202      	movs	r2, #2
 8004f50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004f52:	2317      	movs	r3, #23
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	781b      	ldrb	r3, [r3, #0]
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b006      	add	sp, #24
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_DMA_Abort>:
=======
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800408a:	2317      	movs	r3, #23
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b006      	add	sp, #24
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2221      	movs	r2, #33	@ 0x21
 8004f6c:	5c9b      	ldrb	r3, [r3, r2]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d008      	beq.n	8004f86 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	2100      	movs	r1, #0
 8004f80:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e020      	b.n	8004fc8 <HAL_DMA_Abort+0x68>
=======
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2221      	movs	r2, #33	@ 0x21
 80040a4:	5c9b      	ldrb	r3, [r3, r2]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2204      	movs	r2, #4
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e020      	b.n	8004100 <HAL_DMA_Abort+0x68>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< HEAD
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	210e      	movs	r1, #14
 8004f92:	438a      	bics	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4091      	lsls	r1, r2
 8004fb2:	000a      	movs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2221      	movs	r2, #33	@ 0x21
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_DMA_Abort_IT>:
=======
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	210e      	movs	r1, #14
 80040ca:	438a      	bics	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	438a      	bics	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e6:	2101      	movs	r1, #1
 80040e8:	4091      	lsls	r1, r2
 80040ea:	000a      	movs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2221      	movs	r2, #33	@ 0x21
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	2100      	movs	r1, #0
 80040fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_DMA_Abort_IT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd8:	210f      	movs	r1, #15
 8004fda:	187b      	adds	r3, r7, r1
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2221      	movs	r2, #33	@ 0x21
 8004fe4:	5c9b      	ldrb	r3, [r3, r2]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d006      	beq.n	8004ffa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e028      	b.n	800504c <HAL_DMA_Abort_IT+0x7c>
=======
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	210f      	movs	r1, #15
 8004112:	187b      	adds	r3, r7, r1
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2221      	movs	r2, #33	@ 0x21
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d006      	beq.n	8004132 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2204      	movs	r2, #4
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800412a:	187b      	adds	r3, r7, r1
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e028      	b.n	8004184 <HAL_DMA_Abort_IT+0x7c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< HEAD
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	210e      	movs	r1, #14
 8005006:	438a      	bics	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	438a      	bics	r2, r1
 8005018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	2101      	movs	r1, #1
 8005024:	4091      	lsls	r1, r2
 8005026:	000a      	movs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2221      	movs	r2, #33	@ 0x21
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	0010      	movs	r0, r2
 800504a:	4798      	blx	r3
    }
  }
  return status;
 800504c:	230f      	movs	r3, #15
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_DMA_IRQHandler>:
=======
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	210e      	movs	r1, #14
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	2101      	movs	r1, #1
 800415c:	4091      	lsls	r1, r2
 800415e:	000a      	movs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2221      	movs	r2, #33	@ 0x21
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	0010      	movs	r0, r2
 8004182:	4798      	blx	r3
    }
  }
  return status;
 8004184:	230f      	movs	r3, #15
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	781b      	ldrb	r3, [r3, #0]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_DMA_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	2204      	movs	r2, #4
 8005078:	409a      	lsls	r2, r3
 800507a:	0013      	movs	r3, r2
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4013      	ands	r3, r2
 8005080:	d024      	beq.n	80050cc <HAL_DMA_IRQHandler+0x72>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2204      	movs	r2, #4
 8005086:	4013      	ands	r3, r2
 8005088:	d020      	beq.n	80050cc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2220      	movs	r2, #32
 8005092:	4013      	ands	r3, r2
 8005094:	d107      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2104      	movs	r1, #4
 80050a2:	438a      	bics	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
=======
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2204      	movs	r2, #4
 80041b0:	409a      	lsls	r2, r3
 80041b2:	0013      	movs	r3, r2
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	d024      	beq.n	8004204 <HAL_DMA_IRQHandler+0x72>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2204      	movs	r2, #4
 80041be:	4013      	ands	r3, r2
 80041c0:	d020      	beq.n	8004204 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2220      	movs	r2, #32
 80041ca:	4013      	ands	r3, r2
 80041cc:	d107      	bne.n	80041de <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2104      	movs	r1, #4
 80041da:	438a      	bics	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
<<<<<<< HEAD
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	2104      	movs	r1, #4
 80050b0:	4091      	lsls	r1, r2
 80050b2:	000a      	movs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
=======
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	2104      	movs	r1, #4
 80041e8:	4091      	lsls	r1, r2
 80041ea:	000a      	movs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d100      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x66>
 80050be:	e06a      	b.n	8005196 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	0010      	movs	r0, r2
 80050c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050ca:	e064      	b.n	8005196 <HAL_DMA_IRQHandler+0x13c>
=======
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d100      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x66>
 80041f6:	e06a      	b.n	80042ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	0010      	movs	r0, r2
 8004200:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004202:	e064      	b.n	80042ce <HAL_DMA_IRQHandler+0x13c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
<<<<<<< HEAD
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	2202      	movs	r2, #2
 80050d2:	409a      	lsls	r2, r3
 80050d4:	0013      	movs	r3, r2
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4013      	ands	r3, r2
 80050da:	d02b      	beq.n	8005134 <HAL_DMA_IRQHandler+0xda>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	d027      	beq.n	8005134 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2220      	movs	r2, #32
 80050ec:	4013      	ands	r3, r2
 80050ee:	d10b      	bne.n	8005108 <HAL_DMA_IRQHandler+0xae>
=======
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	2202      	movs	r2, #2
 800420a:	409a      	lsls	r2, r3
 800420c:	0013      	movs	r3, r2
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	d02b      	beq.n	800426c <HAL_DMA_IRQHandler+0xda>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	d027      	beq.n	800426c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2220      	movs	r2, #32
 8004224:	4013      	ands	r3, r2
 8004226:	d10b      	bne.n	8004240 <HAL_DMA_IRQHandler+0xae>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
<<<<<<< HEAD
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	210a      	movs	r1, #10
 80050fc:	438a      	bics	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2221      	movs	r2, #33	@ 0x21
 8005104:	2101      	movs	r1, #1
 8005106:	5499      	strb	r1, [r3, r2]
=======
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	210a      	movs	r1, #10
 8004234:	438a      	bics	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2221      	movs	r2, #33	@ 0x21
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
<<<<<<< HEAD
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	2102      	movs	r1, #2
 8005112:	4091      	lsls	r1, r2
 8005114:	000a      	movs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d036      	beq.n	8005196 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	0010      	movs	r0, r2
 8005130:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005132:	e030      	b.n	8005196 <HAL_DMA_IRQHandler+0x13c>
=======
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004248:	2102      	movs	r1, #2
 800424a:	4091      	lsls	r1, r2
 800424c:	000a      	movs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d036      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	0010      	movs	r0, r2
 8004268:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800426a:	e030      	b.n	80042ce <HAL_DMA_IRQHandler+0x13c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
<<<<<<< HEAD
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	2208      	movs	r2, #8
 800513a:	409a      	lsls	r2, r3
 800513c:	0013      	movs	r3, r2
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4013      	ands	r3, r2
 8005142:	d028      	beq.n	8005196 <HAL_DMA_IRQHandler+0x13c>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2208      	movs	r2, #8
 8005148:	4013      	ands	r3, r2
 800514a:	d024      	beq.n	8005196 <HAL_DMA_IRQHandler+0x13c>
=======
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2208      	movs	r2, #8
 8004272:	409a      	lsls	r2, r3
 8004274:	0013      	movs	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4013      	ands	r3, r2
 800427a:	d028      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13c>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2208      	movs	r2, #8
 8004280:	4013      	ands	r3, r2
 8004282:	d024      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
<<<<<<< HEAD
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	210e      	movs	r1, #14
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	2101      	movs	r1, #1
 8005166:	4091      	lsls	r1, r2
 8005168:	000a      	movs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2221      	movs	r2, #33	@ 0x21
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	2100      	movs	r1, #0
 8005180:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	0010      	movs	r0, r2
 8005192:	4798      	blx	r3
    }
  }
}
 8005194:	e7ff      	b.n	8005196 <HAL_DMA_IRQHandler+0x13c>
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	b004      	add	sp, #16
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_DMA_GetState>:
=======
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	210e      	movs	r1, #14
 8004290:	438a      	bics	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2101      	movs	r1, #1
 800429e:	4091      	lsls	r1, r2
 80042a0:	000a      	movs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2221      	movs	r2, #33	@ 0x21
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	2100      	movs	r1, #0
 80042b8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	0010      	movs	r0, r2
 80042ca:	4798      	blx	r3
    }
  }
}
 80042cc:	e7ff      	b.n	80042ce <HAL_DMA_IRQHandler+0x13c>
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_DMA_GetState>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2221      	movs	r2, #33	@ 0x21
 80051aa:	5c9b      	ldrb	r3, [r3, r2]
 80051ac:	b2db      	uxtb	r3, r3
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b002      	add	sp, #8
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <DMA_SetConfig>:
=======
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2221      	movs	r2, #33	@ 0x21
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	b2db      	uxtb	r3, r3
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b002      	add	sp, #8
 80042ec:	bd80      	pop	{r7, pc}

080042ee <DMA_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	2101      	movs	r1, #1
 80051ce:	4091      	lsls	r1, r2
 80051d0:	000a      	movs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d108      	bne.n	80051f6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	60da      	str	r2, [r3, #12]
=======
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	2101      	movs	r1, #1
 8004306:	4091      	lsls	r1, r2
 8004308:	000a      	movs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b10      	cmp	r3, #16
 800431a:	d108      	bne.n	800432e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 80051f4:	e007      	b.n	8005206 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <DMA_CalcBaseAndBitshift>:
=======
 800432c:	e007      	b.n	800433e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]
}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <DMA_CalcBaseAndBitshift>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
=======
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
<<<<<<< HEAD
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a08      	ldr	r2, [pc, #32]	@ (8005240 <DMA_CalcBaseAndBitshift+0x30>)
 800521e:	4694      	mov	ip, r2
 8005220:	4463      	add	r3, ip
 8005222:	2114      	movs	r1, #20
 8005224:	0018      	movs	r0, r3
 8005226:	f7fa ff8b 	bl	8000140 <__udivsi3>
 800522a:	0003      	movs	r3, r0
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a03      	ldr	r2, [pc, #12]	@ (8005244 <DMA_CalcBaseAndBitshift+0x34>)
 8005236:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b002      	add	sp, #8
 800523e:	bd80      	pop	{r7, pc}
 8005240:	bffdfff8 	.word	0xbffdfff8
 8005244:	40020000 	.word	0x40020000

08005248 <HAL_GPIO_Init>:
=======
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <DMA_CalcBaseAndBitshift+0x30>)
 8004356:	4694      	mov	ip, r2
 8004358:	4463      	add	r3, ip
 800435a:	2114      	movs	r1, #20
 800435c:	0018      	movs	r0, r3
 800435e:	f7fb feef 	bl	8000140 <__udivsi3>
 8004362:	0003      	movs	r3, r0
 8004364:	009a      	lsls	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a03      	ldr	r2, [pc, #12]	@ (800437c <DMA_CalcBaseAndBitshift+0x34>)
 800436e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	bffdfff8 	.word	0xbffdfff8
 800437c:	40020000 	.word	0x40020000

08004380 <HAL_GPIO_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
=======
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8005256:	e155      	b.n	8005504 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4091      	lsls	r1, r2
 8005262:	000a      	movs	r2, r1
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d100      	bne.n	8005270 <HAL_GPIO_Init+0x28>
 800526e:	e146      	b.n	80054fe <HAL_GPIO_Init+0x2b6>
=======
 800438e:	e155      	b.n	800463c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4091      	lsls	r1, r2
 800439a:	000a      	movs	r2, r1
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d100      	bne.n	80043a8 <HAL_GPIO_Init+0x28>
 80043a6:	e146      	b.n	8004636 <HAL_GPIO_Init+0x2b6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< HEAD
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2203      	movs	r2, #3
 8005276:	4013      	ands	r3, r2
 8005278:	2b01      	cmp	r3, #1
 800527a:	d005      	beq.n	8005288 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2203      	movs	r2, #3
 8005282:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005284:	2b02      	cmp	r3, #2
 8005286:	d130      	bne.n	80052ea <HAL_GPIO_Init+0xa2>
=======
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2203      	movs	r2, #3
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d005      	beq.n	80043c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d130      	bne.n	8004422 <HAL_GPIO_Init+0xa2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	2203      	movs	r2, #3
 8005294:	409a      	lsls	r2, r3
 8005296:	0013      	movs	r3, r2
 8005298:	43da      	mvns	r2, r3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	409a      	lsls	r2, r3
 80052aa:	0013      	movs	r3, r2
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052be:	2201      	movs	r2, #1
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	409a      	lsls	r2, r3
 80052c4:	0013      	movs	r3, r2
 80052c6:	43da      	mvns	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	2201      	movs	r2, #1
 80052d6:	401a      	ands	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	409a      	lsls	r2, r3
 80052dc:	0013      	movs	r3, r2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2203      	movs	r2, #3
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d017      	beq.n	8005326 <HAL_GPIO_Init+0xde>
=======
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	2203      	movs	r2, #3
 80043cc:	409a      	lsls	r2, r3
 80043ce:	0013      	movs	r3, r2
 80043d0:	43da      	mvns	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	409a      	lsls	r2, r3
 80043e2:	0013      	movs	r3, r2
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f6:	2201      	movs	r2, #1
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	409a      	lsls	r2, r3
 80043fc:	0013      	movs	r3, r2
 80043fe:	43da      	mvns	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4013      	ands	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	2201      	movs	r2, #1
 800440e:	401a      	ands	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	409a      	lsls	r2, r3
 8004414:	0013      	movs	r3, r2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2203      	movs	r2, #3
 8004428:	4013      	ands	r3, r2
 800442a:	2b03      	cmp	r3, #3
 800442c:	d017      	beq.n	800445e <HAL_GPIO_Init+0xde>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	2203      	movs	r2, #3
 8005302:	409a      	lsls	r2, r3
 8005304:	0013      	movs	r3, r2
 8005306:	43da      	mvns	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	409a      	lsls	r2, r3
 8005318:	0013      	movs	r3, r2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	60da      	str	r2, [r3, #12]
=======
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	409a      	lsls	r2, r3
 800443c:	0013      	movs	r3, r2
 800443e:	43da      	mvns	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	4013      	ands	r3, r2
 800532e:	2b02      	cmp	r3, #2
 8005330:	d123      	bne.n	800537a <HAL_GPIO_Init+0x132>
=======
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2203      	movs	r2, #3
 8004464:	4013      	ands	r3, r2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d123      	bne.n	80044b2 <HAL_GPIO_Init+0x132>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	08da      	lsrs	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3208      	adds	r2, #8
 800533a:	0092      	lsls	r2, r2, #2
 800533c:	58d3      	ldr	r3, [r2, r3]
 800533e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2207      	movs	r2, #7
 8005344:	4013      	ands	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	220f      	movs	r2, #15
 800534a:	409a      	lsls	r2, r3
 800534c:	0013      	movs	r3, r2
 800534e:	43da      	mvns	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4013      	ands	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2107      	movs	r1, #7
 800535e:	400b      	ands	r3, r1
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	409a      	lsls	r2, r3
 8005364:	0013      	movs	r3, r2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	08da      	lsrs	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3208      	adds	r2, #8
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	50d1      	str	r1, [r2, r3]
=======
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	08da      	lsrs	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3208      	adds	r2, #8
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	58d3      	ldr	r3, [r2, r3]
 8004476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2207      	movs	r2, #7
 800447c:	4013      	ands	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	409a      	lsls	r2, r3
 8004484:	0013      	movs	r3, r2
 8004486:	43da      	mvns	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2107      	movs	r1, #7
 8004496:	400b      	ands	r3, r1
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	409a      	lsls	r2, r3
 800449c:	0013      	movs	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	08da      	lsrs	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3208      	adds	r2, #8
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	50d1      	str	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	2203      	movs	r2, #3
 8005386:	409a      	lsls	r2, r3
 8005388:	0013      	movs	r3, r2
 800538a:	43da      	mvns	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2203      	movs	r2, #3
 8005398:	401a      	ands	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	0013      	movs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	601a      	str	r2, [r3, #0]
=======
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	43da      	mvns	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2203      	movs	r2, #3
 80044d0:	401a      	ands	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	23c0      	movs	r3, #192	@ 0xc0
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	4013      	ands	r3, r2
 80053b8:	d100      	bne.n	80053bc <HAL_GPIO_Init+0x174>
 80053ba:	e0a0      	b.n	80054fe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053bc:	4b57      	ldr	r3, [pc, #348]	@ (800551c <HAL_GPIO_Init+0x2d4>)
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	4b56      	ldr	r3, [pc, #344]	@ (800551c <HAL_GPIO_Init+0x2d4>)
 80053c2:	2101      	movs	r1, #1
 80053c4:	430a      	orrs	r2, r1
 80053c6:	619a      	str	r2, [r3, #24]
 80053c8:	4b54      	ldr	r3, [pc, #336]	@ (800551c <HAL_GPIO_Init+0x2d4>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2201      	movs	r2, #1
 80053ce:	4013      	ands	r3, r2
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053d4:	4a52      	ldr	r2, [pc, #328]	@ (8005520 <HAL_GPIO_Init+0x2d8>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	3302      	adds	r3, #2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	589b      	ldr	r3, [r3, r2]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2203      	movs	r2, #3
 80053e6:	4013      	ands	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	220f      	movs	r2, #15
 80053ec:	409a      	lsls	r2, r3
 80053ee:	0013      	movs	r3, r2
 80053f0:	43da      	mvns	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4013      	ands	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	2390      	movs	r3, #144	@ 0x90
 80053fc:	05db      	lsls	r3, r3, #23
 80053fe:	429a      	cmp	r2, r3
 8005400:	d019      	beq.n	8005436 <HAL_GPIO_Init+0x1ee>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a47      	ldr	r2, [pc, #284]	@ (8005524 <HAL_GPIO_Init+0x2dc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_GPIO_Init+0x1ea>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a46      	ldr	r2, [pc, #280]	@ (8005528 <HAL_GPIO_Init+0x2e0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00d      	beq.n	800542e <HAL_GPIO_Init+0x1e6>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a45      	ldr	r2, [pc, #276]	@ (800552c <HAL_GPIO_Init+0x2e4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <HAL_GPIO_Init+0x1e2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a44      	ldr	r2, [pc, #272]	@ (8005530 <HAL_GPIO_Init+0x2e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_GPIO_Init+0x1de>
 8005422:	2304      	movs	r3, #4
 8005424:	e008      	b.n	8005438 <HAL_GPIO_Init+0x1f0>
 8005426:	2305      	movs	r3, #5
 8005428:	e006      	b.n	8005438 <HAL_GPIO_Init+0x1f0>
 800542a:	2303      	movs	r3, #3
 800542c:	e004      	b.n	8005438 <HAL_GPIO_Init+0x1f0>
 800542e:	2302      	movs	r3, #2
 8005430:	e002      	b.n	8005438 <HAL_GPIO_Init+0x1f0>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_GPIO_Init+0x1f0>
 8005436:	2300      	movs	r3, #0
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	2103      	movs	r1, #3
 800543c:	400a      	ands	r2, r1
 800543e:	0092      	lsls	r2, r2, #2
 8005440:	4093      	lsls	r3, r2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005448:	4935      	ldr	r1, [pc, #212]	@ (8005520 <HAL_GPIO_Init+0x2d8>)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	3302      	adds	r3, #2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005456:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	43da      	mvns	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4013      	ands	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	2380      	movs	r3, #128	@ 0x80
 800546c:	035b      	lsls	r3, r3, #13
 800546e:	4013      	ands	r3, r2
 8005470:	d003      	beq.n	800547a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800547a:	4b2e      	ldr	r3, [pc, #184]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005480:	4b2c      	ldr	r3, [pc, #176]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	43da      	mvns	r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	039b      	lsls	r3, r3, #14
 8005498:	4013      	ands	r3, r2
 800549a:	d003      	beq.n	80054a4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054a4:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80054aa:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	43da      	mvns	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	4013      	ands	r3, r2
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054ce:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80054d4:	4b17      	ldr	r3, [pc, #92]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43da      	mvns	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	025b      	lsls	r3, r3, #9
 80054ec:	4013      	ands	r3, r2
 80054ee:	d003      	beq.n	80054f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	601a      	str	r2, [r3, #0]
=======
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	23c0      	movs	r3, #192	@ 0xc0
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	4013      	ands	r3, r2
 80044f0:	d100      	bne.n	80044f4 <HAL_GPIO_Init+0x174>
 80044f2:	e0a0      	b.n	8004636 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f4:	4b57      	ldr	r3, [pc, #348]	@ (8004654 <HAL_GPIO_Init+0x2d4>)
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	4b56      	ldr	r3, [pc, #344]	@ (8004654 <HAL_GPIO_Init+0x2d4>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]
 8004500:	4b54      	ldr	r3, [pc, #336]	@ (8004654 <HAL_GPIO_Init+0x2d4>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2201      	movs	r2, #1
 8004506:	4013      	ands	r3, r2
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800450c:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_GPIO_Init+0x2d8>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	589b      	ldr	r3, [r3, r2]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2203      	movs	r2, #3
 800451e:	4013      	ands	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	220f      	movs	r2, #15
 8004524:	409a      	lsls	r2, r3
 8004526:	0013      	movs	r3, r2
 8004528:	43da      	mvns	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	2390      	movs	r3, #144	@ 0x90
 8004534:	05db      	lsls	r3, r3, #23
 8004536:	429a      	cmp	r2, r3
 8004538:	d019      	beq.n	800456e <HAL_GPIO_Init+0x1ee>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a47      	ldr	r2, [pc, #284]	@ (800465c <HAL_GPIO_Init+0x2dc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0x1ea>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a46      	ldr	r2, [pc, #280]	@ (8004660 <HAL_GPIO_Init+0x2e0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00d      	beq.n	8004566 <HAL_GPIO_Init+0x1e6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a45      	ldr	r2, [pc, #276]	@ (8004664 <HAL_GPIO_Init+0x2e4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <HAL_GPIO_Init+0x1e2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a44      	ldr	r2, [pc, #272]	@ (8004668 <HAL_GPIO_Init+0x2e8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_GPIO_Init+0x1de>
 800455a:	2304      	movs	r3, #4
 800455c:	e008      	b.n	8004570 <HAL_GPIO_Init+0x1f0>
 800455e:	2305      	movs	r3, #5
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x1f0>
 8004562:	2303      	movs	r3, #3
 8004564:	e004      	b.n	8004570 <HAL_GPIO_Init+0x1f0>
 8004566:	2302      	movs	r3, #2
 8004568:	e002      	b.n	8004570 <HAL_GPIO_Init+0x1f0>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x1f0>
 800456e:	2300      	movs	r3, #0
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	2103      	movs	r1, #3
 8004574:	400a      	ands	r2, r1
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	4093      	lsls	r3, r2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004580:	4935      	ldr	r1, [pc, #212]	@ (8004658 <HAL_GPIO_Init+0x2d8>)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	3302      	adds	r3, #2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458e:	4b37      	ldr	r3, [pc, #220]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	43da      	mvns	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	2380      	movs	r3, #128	@ 0x80
 80045a4:	035b      	lsls	r3, r3, #13
 80045a6:	4013      	ands	r3, r2
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045b2:	4b2e      	ldr	r3, [pc, #184]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80045b8:	4b2c      	ldr	r3, [pc, #176]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	039b      	lsls	r3, r3, #14
 80045d0:	4013      	ands	r3, r2
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045dc:	4b23      	ldr	r3, [pc, #140]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	4013      	ands	r3, r2
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800460c:	4b17      	ldr	r3, [pc, #92]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	43da      	mvns	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	025b      	lsls	r3, r3, #9
 8004624:	4013      	ands	r3, r2
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004630:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_GPIO_Init+0x2ec>)
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }

    position++;
<<<<<<< HEAD
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	40da      	lsrs	r2, r3
 800550c:	1e13      	subs	r3, r2, #0
 800550e:	d000      	beq.n	8005512 <HAL_GPIO_Init+0x2ca>
 8005510:	e6a2      	b.n	8005258 <HAL_GPIO_Init+0x10>
  } 
}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b006      	add	sp, #24
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	40010000 	.word	0x40010000
 8005524:	48000400 	.word	0x48000400
 8005528:	48000800 	.word	0x48000800
 800552c:	48000c00 	.word	0x48000c00
 8005530:	48001000 	.word	0x48001000
 8005534:	40010400 	.word	0x40010400

08005538 <HAL_GPIO_ReadPin>:
=======
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	3301      	adds	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	40da      	lsrs	r2, r3
 8004644:	1e13      	subs	r3, r2, #0
 8004646:	d000      	beq.n	800464a <HAL_GPIO_Init+0x2ca>
 8004648:	e6a2      	b.n	8004390 <HAL_GPIO_Init+0x10>
  } 
}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b006      	add	sp, #24
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40010000 	.word	0x40010000
 800465c:	48000400 	.word	0x48000400
 8004660:	48000800 	.word	0x48000800
 8004664:	48000c00 	.word	0x48000c00
 8004668:	48001000 	.word	0x48001000
 800466c:	40010400 	.word	0x40010400

08004670 <HAL_GPIO_ReadPin>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	000a      	movs	r2, r1
 8005542:	1cbb      	adds	r3, r7, #2
 8005544:	801a      	strh	r2, [r3, #0]
=======
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	000a      	movs	r2, r1
 800467a:	1cbb      	adds	r3, r7, #2
 800467c:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	1cba      	adds	r2, r7, #2
 800554c:	8812      	ldrh	r2, [r2, #0]
 800554e:	4013      	ands	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005552:	230f      	movs	r3, #15
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e003      	b.n	8005564 <HAL_GPIO_ReadPin+0x2c>
=======
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	1cba      	adds	r2, r7, #2
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	4013      	ands	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e003      	b.n	800469c <HAL_GPIO_ReadPin+0x2c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800555c:	230f      	movs	r3, #15
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005564:	230f      	movs	r3, #15
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	781b      	ldrb	r3, [r3, #0]
  }
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b004      	add	sp, #16
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_GPIO_WritePin>:
=======
 8004694:	230f      	movs	r3, #15
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	781b      	ldrb	r3, [r3, #0]
  }
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_GPIO_WritePin>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	0008      	movs	r0, r1
 800557c:	0011      	movs	r1, r2
 800557e:	1cbb      	adds	r3, r7, #2
 8005580:	1c02      	adds	r2, r0, #0
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	1c7b      	adds	r3, r7, #1
 8005586:	1c0a      	adds	r2, r1, #0
 8005588:	701a      	strb	r2, [r3, #0]
=======
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	0008      	movs	r0, r1
 80046b4:	0011      	movs	r1, r2
 80046b6:	1cbb      	adds	r3, r7, #2
 80046b8:	1c02      	adds	r2, r0, #0
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	1c7b      	adds	r3, r7, #1
 80046be:	1c0a      	adds	r2, r1, #0
 80046c0:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800558a:	1c7b      	adds	r3, r7, #1
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005592:	1cbb      	adds	r3, r7, #2
 8005594:	881a      	ldrh	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	619a      	str	r2, [r3, #24]
=======
 80046c2:	1c7b      	adds	r3, r7, #1
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ca:	1cbb      	adds	r3, r7, #2
 80046cc:	881a      	ldrh	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 800559a:	e003      	b.n	80055a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800559c:	1cbb      	adds	r3, r7, #2
 800559e:	881a      	ldrh	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_GPIO_EXTI_IRQHandler>:
=======
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046d4:	1cbb      	adds	r3, r7, #2
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	0002      	movs	r2, r0
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055b8:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	1dba      	adds	r2, r7, #6
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	4013      	ands	r3, r2
 80055c2:	d008      	beq.n	80055d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c4:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80055c6:	1dba      	adds	r2, r7, #6
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055cc:	1dbb      	adds	r3, r7, #6
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f00d ff97 	bl	8013504 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b002      	add	sp, #8
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	40010400 	.word	0x40010400

080055e4 <HAL_PCD_Init>:
=======
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	0002      	movs	r2, r0
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046f0:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	1dba      	adds	r2, r7, #6
 80046f6:	8812      	ldrh	r2, [r2, #0]
 80046f8:	4013      	ands	r3, r2
 80046fa:	d008      	beq.n	800470e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046fe:	1dba      	adds	r2, r7, #6
 8004700:	8812      	ldrh	r2, [r2, #0]
 8004702:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004704:	1dbb      	adds	r3, r7, #6
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	0018      	movs	r0, r3
 800470a:	f00d ff99 	bl	8012640 <HAL_GPIO_EXTI_Callback>
  }
}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	40010400 	.word	0x40010400

0800471c <HAL_PCD_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
=======
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e0e4      	b.n	80057c0 <HAL_PCD_Init+0x1dc>
=======
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0e4      	b.n	80048f8 <HAL_PCD_Init+0x1dc>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a73      	ldr	r2, [pc, #460]	@ (80057c8 <HAL_PCD_Init+0x1e4>)
 80055fa:	5c9b      	ldrb	r3, [r3, r2]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d108      	bne.n	8005614 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	23a4      	movs	r3, #164	@ 0xa4
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	2100      	movs	r1, #0
 800560a:	54d1      	strb	r1, [r2, r3]
=======
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a73      	ldr	r2, [pc, #460]	@ (8004900 <HAL_PCD_Init+0x1e4>)
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	23a4      	movs	r3, #164	@ 0xa4
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	2100      	movs	r1, #0
 8004742:	54d1      	strb	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f00c fa1c 	bl	8011a4c <HAL_PCD_MspInit>
=======
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f00c fa1e 	bl	8010b88 <HAL_PCD_MspInit>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a6c      	ldr	r2, [pc, #432]	@ (80057c8 <HAL_PCD_Init+0x1e4>)
 8005618:	2103      	movs	r1, #3
 800561a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0018      	movs	r0, r3
 8005622:	f005 fbf1 	bl	800ae08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005626:	230f      	movs	r3, #15
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e047      	b.n	80056c0 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005630:	200f      	movs	r0, #15
 8005632:	183b      	adds	r3, r7, r0
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	0013      	movs	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	189b      	adds	r3, r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	18cb      	adds	r3, r1, r3
 8005642:	3311      	adds	r3, #17
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005648:	183b      	adds	r3, r7, r0
 800564a:	781a      	ldrb	r2, [r3, #0]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	0013      	movs	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	189b      	adds	r3, r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	18cb      	adds	r3, r1, r3
 8005658:	3310      	adds	r3, #16
 800565a:	183a      	adds	r2, r7, r0
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005660:	183b      	adds	r3, r7, r0
 8005662:	781a      	ldrb	r2, [r3, #0]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	0013      	movs	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	189b      	adds	r3, r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	18cb      	adds	r3, r1, r3
 8005670:	3313      	adds	r3, #19
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005676:	183b      	adds	r3, r7, r0
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	0013      	movs	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	189b      	adds	r3, r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	18cb      	adds	r3, r1, r3
 8005686:	3320      	adds	r3, #32
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800568c:	183b      	adds	r3, r7, r0
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	0013      	movs	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	189b      	adds	r3, r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	18cb      	adds	r3, r1, r3
 800569c:	3324      	adds	r3, #36	@ 0x24
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	0013      	movs	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	2200      	movs	r2, #0
 80056b4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b6:	183b      	adds	r3, r7, r0
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	183b      	adds	r3, r7, r0
 80056bc:	3201      	adds	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	791b      	ldrb	r3, [r3, #4]
 80056c4:	210f      	movs	r1, #15
 80056c6:	187a      	adds	r2, r7, r1
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3b0      	bcc.n	8005630 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e056      	b.n	8005784 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056d6:	240f      	movs	r4, #15
 80056d8:	193b      	adds	r3, r7, r4
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	2352      	movs	r3, #82	@ 0x52
 80056e0:	33ff      	adds	r3, #255	@ 0xff
 80056e2:	0019      	movs	r1, r3
 80056e4:	0013      	movs	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	18c3      	adds	r3, r0, r3
 80056ee:	185b      	adds	r3, r3, r1
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056f4:	193b      	adds	r3, r7, r4
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	23a8      	movs	r3, #168	@ 0xa8
 80056fc:	0059      	lsls	r1, r3, #1
 80056fe:	0013      	movs	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	189b      	adds	r3, r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	18c3      	adds	r3, r0, r3
 8005708:	185b      	adds	r3, r3, r1
 800570a:	193a      	adds	r2, r7, r4
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005710:	193b      	adds	r3, r7, r4
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	2354      	movs	r3, #84	@ 0x54
 8005718:	33ff      	adds	r3, #255	@ 0xff
 800571a:	0019      	movs	r1, r3
 800571c:	0013      	movs	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	189b      	adds	r3, r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	18c3      	adds	r3, r0, r3
 8005726:	185b      	adds	r3, r3, r1
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800572c:	193b      	adds	r3, r7, r4
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	23b0      	movs	r3, #176	@ 0xb0
 8005734:	0059      	lsls	r1, r3, #1
 8005736:	0013      	movs	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	189b      	adds	r3, r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	18c3      	adds	r3, r0, r3
 8005740:	185b      	adds	r3, r3, r1
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005746:	193b      	adds	r3, r7, r4
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	23b2      	movs	r3, #178	@ 0xb2
 800574e:	0059      	lsls	r1, r3, #1
 8005750:	0013      	movs	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	189b      	adds	r3, r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	18c3      	adds	r3, r0, r3
 800575a:	185b      	adds	r3, r3, r1
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005760:	193b      	adds	r3, r7, r4
 8005762:	781a      	ldrb	r2, [r3, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	23b4      	movs	r3, #180	@ 0xb4
 8005768:	0059      	lsls	r1, r3, #1
 800576a:	0013      	movs	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	189b      	adds	r3, r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	18c3      	adds	r3, r0, r3
 8005774:	185b      	adds	r3, r3, r1
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800577a:	193b      	adds	r3, r7, r4
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	193b      	adds	r3, r7, r4
 8005780:	3201      	adds	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	220f      	movs	r2, #15
 800578a:	18ba      	adds	r2, r7, r2
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3a1      	bcc.n	80056d6 <HAL_PCD_Init+0xf2>
=======
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a6c      	ldr	r2, [pc, #432]	@ (8004900 <HAL_PCD_Init+0x1e4>)
 8004750:	2103      	movs	r1, #3
 8004752:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0018      	movs	r0, r3
 800475a:	f005 fbf1 	bl	8009f40 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475e:	230f      	movs	r3, #15
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e047      	b.n	80047f8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004768:	200f      	movs	r0, #15
 800476a:	183b      	adds	r3, r7, r0
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	0013      	movs	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	189b      	adds	r3, r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	18cb      	adds	r3, r1, r3
 800477a:	3311      	adds	r3, #17
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004780:	183b      	adds	r3, r7, r0
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	0013      	movs	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	189b      	adds	r3, r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	18cb      	adds	r3, r1, r3
 8004790:	3310      	adds	r3, #16
 8004792:	183a      	adds	r2, r7, r0
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004798:	183b      	adds	r3, r7, r0
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	0013      	movs	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	18cb      	adds	r3, r1, r3
 80047a8:	3313      	adds	r3, #19
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	0013      	movs	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	18cb      	adds	r3, r1, r3
 80047be:	3320      	adds	r3, #32
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047c4:	183b      	adds	r3, r7, r0
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	0013      	movs	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	18cb      	adds	r3, r1, r3
 80047d4:	3324      	adds	r3, #36	@ 0x24
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047da:	183b      	adds	r3, r7, r0
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	0013      	movs	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	2200      	movs	r2, #0
 80047ec:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ee:	183b      	adds	r3, r7, r0
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	183b      	adds	r3, r7, r0
 80047f4:	3201      	adds	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	210f      	movs	r1, #15
 80047fe:	187a      	adds	r2, r7, r1
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3b0      	bcc.n	8004768 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004806:	187b      	adds	r3, r7, r1
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e056      	b.n	80048bc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800480e:	240f      	movs	r4, #15
 8004810:	193b      	adds	r3, r7, r4
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	2352      	movs	r3, #82	@ 0x52
 8004818:	33ff      	adds	r3, #255	@ 0xff
 800481a:	0019      	movs	r1, r3
 800481c:	0013      	movs	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	189b      	adds	r3, r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	18c3      	adds	r3, r0, r3
 8004826:	185b      	adds	r3, r3, r1
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800482c:	193b      	adds	r3, r7, r4
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	23a8      	movs	r3, #168	@ 0xa8
 8004834:	0059      	lsls	r1, r3, #1
 8004836:	0013      	movs	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	189b      	adds	r3, r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	18c3      	adds	r3, r0, r3
 8004840:	185b      	adds	r3, r3, r1
 8004842:	193a      	adds	r2, r7, r4
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004848:	193b      	adds	r3, r7, r4
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	2354      	movs	r3, #84	@ 0x54
 8004850:	33ff      	adds	r3, #255	@ 0xff
 8004852:	0019      	movs	r1, r3
 8004854:	0013      	movs	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	189b      	adds	r3, r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	18c3      	adds	r3, r0, r3
 800485e:	185b      	adds	r3, r3, r1
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004864:	193b      	adds	r3, r7, r4
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	23b0      	movs	r3, #176	@ 0xb0
 800486c:	0059      	lsls	r1, r3, #1
 800486e:	0013      	movs	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	189b      	adds	r3, r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	18c3      	adds	r3, r0, r3
 8004878:	185b      	adds	r3, r3, r1
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800487e:	193b      	adds	r3, r7, r4
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	23b2      	movs	r3, #178	@ 0xb2
 8004886:	0059      	lsls	r1, r3, #1
 8004888:	0013      	movs	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	189b      	adds	r3, r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	18c3      	adds	r3, r0, r3
 8004892:	185b      	adds	r3, r3, r1
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004898:	193b      	adds	r3, r7, r4
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	23b4      	movs	r3, #180	@ 0xb4
 80048a0:	0059      	lsls	r1, r3, #1
 80048a2:	0013      	movs	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	18c3      	adds	r3, r0, r3
 80048ac:	185b      	adds	r3, r3, r1
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b2:	193b      	adds	r3, r7, r4
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	193b      	adds	r3, r7, r4
 80048b8:	3201      	adds	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	791b      	ldrb	r3, [r3, #4]
 80048c0:	220f      	movs	r2, #15
 80048c2:	18ba      	adds	r2, r7, r2
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3a1      	bcc.n	800480e <HAL_PCD_Init+0xf2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< HEAD
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6859      	ldr	r1, [r3, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	f005 fb4e 	bl	800ae3c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a07      	ldr	r2, [pc, #28]	@ (80057c8 <HAL_PCD_Init+0x1e4>)
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7a9b      	ldrb	r3, [r3, #10]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d103      	bne.n	80057be <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f001 fd1f 	bl	80071fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b005      	add	sp, #20
 80057c6:	bd90      	pop	{r4, r7, pc}
 80057c8:	00000291 	.word	0x00000291

080057cc <HAL_PCD_Start>:
=======
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	f005 fb4e 	bl	8009f74 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <HAL_PCD_Init+0x1e4>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7a9b      	ldrb	r3, [r3, #10]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d103      	bne.n	80048f6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f001 fd1f 	bl	8006334 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b005      	add	sp, #20
 80048fe:	bd90      	pop	{r4, r7, pc}
 8004900:	00000291 	.word	0x00000291

08004904 <HAL_PCD_Start>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	23a4      	movs	r3, #164	@ 0xa4
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_PCD_Start+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e014      	b.n	800580e <HAL_PCD_Start+0x42>
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	23a4      	movs	r3, #164	@ 0xa4
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	2101      	movs	r1, #1
 80057ec:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f005 faf2 	bl	800addc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f007 fae7 	bl	800cdd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	23a4      	movs	r3, #164	@ 0xa4
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	2100      	movs	r1, #0
 800580a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_PCD_IRQHandler>:
=======
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	23a4      	movs	r3, #164	@ 0xa4
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_PCD_Start+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e014      	b.n	8004946 <HAL_PCD_Start+0x42>
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	23a4      	movs	r3, #164	@ 0xa4
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	2101      	movs	r1, #1
 8004924:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0018      	movs	r0, r3
 800492c:	f005 faf2 	bl	8009f14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0018      	movs	r0, r3
 8004936:	f007 fae7 	bl	800bf08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	23a4      	movs	r3, #164	@ 0xa4
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	2100      	movs	r1, #0
 8004942:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_PCD_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	0018      	movs	r0, r3
 8005826:	f007 fae9 	bl	800cdfc <USB_ReadInterrupts>
 800582a:	0003      	movs	r3, r0
 800582c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	2380      	movs	r3, #128	@ 0x80
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4013      	ands	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_PCD_IRQHandler+0x2a>
=======
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0018      	movs	r0, r3
 800495e:	f007 fae9 	bl	800bf34 <USB_ReadInterrupts>
 8004962:	0003      	movs	r3, r0
 8004964:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	4013      	ands	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_PCD_IRQHandler+0x2a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< HEAD
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	0018      	movs	r0, r3
 800583c:	f000 fb60 	bl	8005f00 <PCD_EP_ISR_Handler>

    return;
 8005840:	e11d      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	2380      	movs	r3, #128	@ 0x80
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4013      	ands	r3, r2
 800584a:	d015      	beq.n	8005878 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2244      	movs	r2, #68	@ 0x44
 8005852:	5a9b      	ldrh	r3, [r3, r2]
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	498a      	ldr	r1, [pc, #552]	@ (8005a84 <HAL_PCD_IRQHandler+0x26c>)
 800585c:	400a      	ands	r2, r1
 800585e:	b291      	uxth	r1, r2
 8005860:	2244      	movs	r2, #68	@ 0x44
 8005862:	5299      	strh	r1, [r3, r2]
=======
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	0018      	movs	r0, r3
 8004974:	f000 fb60 	bl	8005038 <PCD_EP_ISR_Handler>

    return;
 8004978:	e11d      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4013      	ands	r3, r2
 8004982:	d015      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2244      	movs	r2, #68	@ 0x44
 800498a:	5a9b      	ldrh	r3, [r3, r2]
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	498a      	ldr	r1, [pc, #552]	@ (8004bbc <HAL_PCD_IRQHandler+0x26c>)
 8004994:	400a      	ands	r2, r1
 8004996:	b291      	uxth	r1, r2
 8004998:	2244      	movs	r2, #68	@ 0x44
 800499a:	5299      	strh	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f00c f97b 	bl	8011b62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2100      	movs	r1, #0
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f915 	bl	8005aa0 <HAL_PCD_SetAddress>

    return;
 8005876:	e102      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	01db      	lsls	r3, r3, #7
 800587e:	4013      	ands	r3, r2
 8005880:	d00c      	beq.n	800589c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2244      	movs	r2, #68	@ 0x44
 8005888:	5a9b      	ldrh	r3, [r3, r2]
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	497d      	ldr	r1, [pc, #500]	@ (8005a88 <HAL_PCD_IRQHandler+0x270>)
 8005892:	400a      	ands	r2, r1
 8005894:	b291      	uxth	r1, r2
 8005896:	2244      	movs	r2, #68	@ 0x44
 8005898:	5299      	strh	r1, [r3, r2]

    return;
 800589a:	e0f0      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	4013      	ands	r3, r2
 80058a4:	d00c      	beq.n	80058c0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2244      	movs	r2, #68	@ 0x44
 80058ac:	5a9b      	ldrh	r3, [r3, r2]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4975      	ldr	r1, [pc, #468]	@ (8005a8c <HAL_PCD_IRQHandler+0x274>)
 80058b6:	400a      	ands	r2, r1
 80058b8:	b291      	uxth	r1, r2
 80058ba:	2244      	movs	r2, #68	@ 0x44
 80058bc:	5299      	strh	r1, [r3, r2]

    return;
 80058be:	e0de      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	015b      	lsls	r3, r3, #5
 80058c6:	4013      	ands	r3, r2
 80058c8:	d038      	beq.n	800593c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2240      	movs	r2, #64	@ 0x40
 80058d0:	5a9b      	ldrh	r3, [r3, r2]
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2104      	movs	r1, #4
 80058da:	438a      	bics	r2, r1
 80058dc:	b291      	uxth	r1, r2
 80058de:	2240      	movs	r2, #64	@ 0x40
 80058e0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2240      	movs	r2, #64	@ 0x40
 80058e8:	5a9b      	ldrh	r3, [r3, r2]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2108      	movs	r1, #8
 80058f2:	438a      	bics	r2, r1
 80058f4:	b291      	uxth	r1, r2
 80058f6:	2240      	movs	r2, #64	@ 0x40
 80058f8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	23b2      	movs	r3, #178	@ 0xb2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	5cd3      	ldrb	r3, [r2, r3]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d109      	bne.n	800591a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	23b2      	movs	r3, #178	@ 0xb2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	2100      	movs	r1, #0
 800590e:	54d1      	strb	r1, [r2, r3]
=======
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f00c f97d 	bl	8010c9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2100      	movs	r1, #0
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f915 	bl	8004bd8 <HAL_PCD_SetAddress>

    return;
 80049ae:	e102      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4013      	ands	r3, r2
 80049b8:	d00c      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2244      	movs	r2, #68	@ 0x44
 80049c0:	5a9b      	ldrh	r3, [r3, r2]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	497d      	ldr	r1, [pc, #500]	@ (8004bc0 <HAL_PCD_IRQHandler+0x270>)
 80049ca:	400a      	ands	r2, r1
 80049cc:	b291      	uxth	r1, r2
 80049ce:	2244      	movs	r2, #68	@ 0x44
 80049d0:	5299      	strh	r1, [r3, r2]

    return;
 80049d2:	e0f0      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	4013      	ands	r3, r2
 80049dc:	d00c      	beq.n	80049f8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2244      	movs	r2, #68	@ 0x44
 80049e4:	5a9b      	ldrh	r3, [r3, r2]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4975      	ldr	r1, [pc, #468]	@ (8004bc4 <HAL_PCD_IRQHandler+0x274>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	b291      	uxth	r1, r2
 80049f2:	2244      	movs	r2, #68	@ 0x44
 80049f4:	5299      	strh	r1, [r3, r2]

    return;
 80049f6:	e0de      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	015b      	lsls	r3, r3, #5
 80049fe:	4013      	ands	r3, r2
 8004a00:	d038      	beq.n	8004a74 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2240      	movs	r2, #64	@ 0x40
 8004a08:	5a9b      	ldrh	r3, [r3, r2]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2104      	movs	r1, #4
 8004a12:	438a      	bics	r2, r1
 8004a14:	b291      	uxth	r1, r2
 8004a16:	2240      	movs	r2, #64	@ 0x40
 8004a18:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2240      	movs	r2, #64	@ 0x40
 8004a20:	5a9b      	ldrh	r3, [r3, r2]
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2108      	movs	r1, #8
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	b291      	uxth	r1, r2
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	23b2      	movs	r3, #178	@ 0xb2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	5cd3      	ldrb	r3, [r2, r3]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d109      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	23b2      	movs	r3, #178	@ 0xb2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	2100      	movs	r1, #0
 8004a46:	54d1      	strb	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< HEAD
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2100      	movs	r1, #0
 8005914:	0018      	movs	r0, r3
 8005916:	f001 fc9b 	bl	8007250 <HAL_PCDEx_LPM_Callback>
=======
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f001 fc9b 	bl	8006388 <HAL_PCDEx_LPM_Callback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	0018      	movs	r0, r3
 800591e:	f00c f961 	bl	8011be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2244      	movs	r2, #68	@ 0x44
 8005928:	5a9b      	ldrh	r3, [r3, r2]
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4957      	ldr	r1, [pc, #348]	@ (8005a90 <HAL_PCD_IRQHandler+0x278>)
 8005932:	400a      	ands	r2, r1
 8005934:	b291      	uxth	r1, r2
 8005936:	2244      	movs	r2, #68	@ 0x44
 8005938:	5299      	strh	r1, [r3, r2]

    return;
 800593a:	e0a0      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	4013      	ands	r3, r2
 8005944:	d028      	beq.n	8005998 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2240      	movs	r2, #64	@ 0x40
 800594c:	5a9b      	ldrh	r3, [r3, r2]
 800594e:	b29a      	uxth	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2108      	movs	r1, #8
 8005956:	430a      	orrs	r2, r1
 8005958:	b291      	uxth	r1, r2
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2244      	movs	r2, #68	@ 0x44
 8005964:	5a9b      	ldrh	r3, [r3, r2]
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4949      	ldr	r1, [pc, #292]	@ (8005a94 <HAL_PCD_IRQHandler+0x27c>)
 800596e:	400a      	ands	r2, r1
 8005970:	b291      	uxth	r1, r2
 8005972:	2244      	movs	r2, #68	@ 0x44
 8005974:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2240      	movs	r2, #64	@ 0x40
 800597c:	5a9b      	ldrh	r3, [r3, r2]
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2104      	movs	r1, #4
 8005986:	430a      	orrs	r2, r1
 8005988:	b291      	uxth	r1, r2
 800598a:	2240      	movs	r2, #64	@ 0x40
 800598c:	5299      	strh	r1, [r3, r2]
=======
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f00c f963 	bl	8010d20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2244      	movs	r2, #68	@ 0x44
 8004a60:	5a9b      	ldrh	r3, [r3, r2]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4957      	ldr	r1, [pc, #348]	@ (8004bc8 <HAL_PCD_IRQHandler+0x278>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	b291      	uxth	r1, r2
 8004a6e:	2244      	movs	r2, #68	@ 0x44
 8004a70:	5299      	strh	r1, [r3, r2]

    return;
 8004a72:	e0a0      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d028      	beq.n	8004ad0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2240      	movs	r2, #64	@ 0x40
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	b291      	uxth	r1, r2
 8004a92:	2240      	movs	r2, #64	@ 0x40
 8004a94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2244      	movs	r2, #68	@ 0x44
 8004a9c:	5a9b      	ldrh	r3, [r3, r2]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4949      	ldr	r1, [pc, #292]	@ (8004bcc <HAL_PCD_IRQHandler+0x27c>)
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	b291      	uxth	r1, r2
 8004aaa:	2244      	movs	r2, #68	@ 0x44
 8004aac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2240      	movs	r2, #64	@ 0x40
 8004ab4:	5a9b      	ldrh	r3, [r3, r2]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2104      	movs	r1, #4
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	b291      	uxth	r1, r2
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	5299      	strh	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0018      	movs	r0, r3
 8005992:	f00c f90b 	bl	8011bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005996:	e072      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
=======
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f00c f90d 	bl	8010ce8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ace:	e072      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
<<<<<<< HEAD
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2280      	movs	r2, #128	@ 0x80
 800599c:	4013      	ands	r3, r2
 800599e:	d046      	beq.n	8005a2e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2244      	movs	r2, #68	@ 0x44
 80059a6:	5a9b      	ldrh	r3, [r3, r2]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	438a      	bics	r2, r1
 80059b2:	b291      	uxth	r1, r2
 80059b4:	2244      	movs	r2, #68	@ 0x44
 80059b6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	23b2      	movs	r3, #178	@ 0xb2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	5cd3      	ldrb	r3, [r2, r3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d12f      	bne.n	8005a24 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2240      	movs	r2, #64	@ 0x40
 80059ca:	5a9b      	ldrh	r3, [r3, r2]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2104      	movs	r1, #4
 80059d4:	430a      	orrs	r2, r1
 80059d6:	b291      	uxth	r1, r2
 80059d8:	2240      	movs	r2, #64	@ 0x40
 80059da:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2240      	movs	r2, #64	@ 0x40
 80059e2:	5a9b      	ldrh	r3, [r3, r2]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2108      	movs	r1, #8
 80059ec:	430a      	orrs	r2, r1
 80059ee:	b291      	uxth	r1, r2
 80059f0:	2240      	movs	r2, #64	@ 0x40
 80059f2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	23b2      	movs	r3, #178	@ 0xb2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	2101      	movs	r1, #1
 80059fc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2254      	movs	r2, #84	@ 0x54
 8005a04:	5a9b      	ldrh	r3, [r3, r2]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	223c      	movs	r2, #60	@ 0x3c
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	23b3      	movs	r3, #179	@ 0xb3
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	50d1      	str	r1, [r2, r3]
=======
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d046      	beq.n	8004b66 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2244      	movs	r2, #68	@ 0x44
 8004ade:	5a9b      	ldrh	r3, [r3, r2]
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	438a      	bics	r2, r1
 8004aea:	b291      	uxth	r1, r2
 8004aec:	2244      	movs	r2, #68	@ 0x44
 8004aee:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	23b2      	movs	r3, #178	@ 0xb2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	5cd3      	ldrb	r3, [r2, r3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d12f      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2240      	movs	r2, #64	@ 0x40
 8004b02:	5a9b      	ldrh	r3, [r3, r2]
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	b291      	uxth	r1, r2
 8004b10:	2240      	movs	r2, #64	@ 0x40
 8004b12:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2240      	movs	r2, #64	@ 0x40
 8004b1a:	5a9b      	ldrh	r3, [r3, r2]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2108      	movs	r1, #8
 8004b24:	430a      	orrs	r2, r1
 8004b26:	b291      	uxth	r1, r2
 8004b28:	2240      	movs	r2, #64	@ 0x40
 8004b2a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	23b2      	movs	r3, #178	@ 0xb2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	2101      	movs	r1, #1
 8004b34:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2254      	movs	r2, #84	@ 0x54
 8004b3c:	5a9b      	ldrh	r3, [r3, r2]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	223c      	movs	r2, #60	@ 0x3c
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	23b3      	movs	r3, #179	@ 0xb3
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	50d1      	str	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
<<<<<<< HEAD
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f001 fc17 	bl	8007250 <HAL_PCDEx_LPM_Callback>
=======
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2101      	movs	r1, #1
 8004b54:	0018      	movs	r0, r3
 8004b56:	f001 fc17 	bl	8006388 <HAL_PCDEx_LPM_Callback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
<<<<<<< HEAD
 8005a22:	e02c      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f00c f8c0 	bl	8011bac <HAL_PCD_SuspendCallback>
    return;
 8005a2c:	e027      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	d010      	beq.n	8005a5a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2244      	movs	r2, #68	@ 0x44
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4914      	ldr	r1, [pc, #80]	@ (8005a98 <HAL_PCD_IRQHandler+0x280>)
 8005a48:	400a      	ands	r2, r1
 8005a4a:	b291      	uxth	r1, r2
 8005a4c:	2244      	movs	r2, #68	@ 0x44
 8005a4e:	5299      	strh	r1, [r3, r2]
=======
 8004b5a:	e02c      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f00c f8c2 	bl	8010ce8 <HAL_PCD_SuspendCallback>
    return;
 8004b64:	e027      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	2380      	movs	r3, #128	@ 0x80
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d010      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2244      	movs	r2, #68	@ 0x44
 8004b76:	5a9b      	ldrh	r3, [r3, r2]
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4914      	ldr	r1, [pc, #80]	@ (8004bd0 <HAL_PCD_IRQHandler+0x280>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	b291      	uxth	r1, r2
 8004b84:	2244      	movs	r2, #68	@ 0x44
 8004b86:	5299      	strh	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f00c f876 	bl	8011b44 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a58:	e011      	b.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	2380      	movs	r3, #128	@ 0x80
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00c      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2244      	movs	r2, #68	@ 0x44
 8005a6a:	5a9b      	ldrh	r3, [r3, r2]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	490a      	ldr	r1, [pc, #40]	@ (8005a9c <HAL_PCD_IRQHandler+0x284>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	b291      	uxth	r1, r2
 8005a78:	2244      	movs	r2, #68	@ 0x44
 8005a7a:	5299      	strh	r1, [r3, r2]

    return;
 8005a7c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b004      	add	sp, #16
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	fffffbff 	.word	0xfffffbff
 8005a88:	ffffbfff 	.word	0xffffbfff
 8005a8c:	ffffdfff 	.word	0xffffdfff
 8005a90:	ffffefff 	.word	0xffffefff
 8005a94:	fffff7ff 	.word	0xfffff7ff
 8005a98:	fffffdff 	.word	0xfffffdff
 8005a9c:	fffffeff 	.word	0xfffffeff

08005aa0 <HAL_PCD_SetAddress>:
=======
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f00c f878 	bl	8010c80 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b90:	e011      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2244      	movs	r2, #68	@ 0x44
 8004ba2:	5a9b      	ldrh	r3, [r3, r2]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	490a      	ldr	r1, [pc, #40]	@ (8004bd4 <HAL_PCD_IRQHandler+0x284>)
 8004bac:	400a      	ands	r2, r1
 8004bae:	b291      	uxth	r1, r2
 8004bb0:	2244      	movs	r2, #68	@ 0x44
 8004bb2:	5299      	strh	r1, [r3, r2]

    return;
 8004bb4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b004      	add	sp, #16
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	fffffbff 	.word	0xfffffbff
 8004bc0:	ffffbfff 	.word	0xffffbfff
 8004bc4:	ffffdfff 	.word	0xffffdfff
 8004bc8:	ffffefff 	.word	0xffffefff
 8004bcc:	fffff7ff 	.word	0xfffff7ff
 8004bd0:	fffffdff 	.word	0xfffffdff
 8004bd4:	fffffeff 	.word	0xfffffeff

08004bd8 <HAL_PCD_SetAddress>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	000a      	movs	r2, r1
 8005aaa:	1cfb      	adds	r3, r7, #3
 8005aac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	23a4      	movs	r3, #164	@ 0xa4
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_PCD_SetAddress+0x1e>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e016      	b.n	8005aec <HAL_PCD_SetAddress+0x4c>
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	23a4      	movs	r3, #164	@ 0xa4
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1cfa      	adds	r2, r7, #3
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	1cfb      	adds	r3, r7, #3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	0019      	movs	r1, r3
 8005ada:	0010      	movs	r0, r2
 8005adc:	f007 f964 	bl	800cda8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	23a4      	movs	r3, #164	@ 0xa4
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_Open>:
=======
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	000a      	movs	r2, r1
 8004be2:	1cfb      	adds	r3, r7, #3
 8004be4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	23a4      	movs	r3, #164	@ 0xa4
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	5cd3      	ldrb	r3, [r2, r3]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_SetAddress+0x1e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e016      	b.n	8004c24 <HAL_PCD_SetAddress+0x4c>
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	23a4      	movs	r3, #164	@ 0xa4
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1cfa      	adds	r2, r7, #3
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	1cfb      	adds	r3, r7, #3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	0019      	movs	r1, r3
 8004c12:	0010      	movs	r0, r2
 8004c14:	f007 f964 	bl	800bee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	23a4      	movs	r3, #164	@ 0xa4
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	2100      	movs	r1, #0
 8004c20:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_PCD_EP_Open>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	000c      	movs	r4, r1
 8005afe:	0010      	movs	r0, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	1cfb      	adds	r3, r7, #3
 8005b04:	1c22      	adds	r2, r4, #0
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	003b      	movs	r3, r7
 8005b0a:	1c02      	adds	r2, r0, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	1cbb      	adds	r3, r7, #2
 8005b10:	1c0a      	adds	r2, r1, #0
 8005b12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b14:	230b      	movs	r3, #11
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b1c:	1cfb      	adds	r3, r7, #3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b25b      	sxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da0f      	bge.n	8005b46 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b26:	1cfb      	adds	r3, r7, #3
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	401a      	ands	r2, r3
 8005b2e:	0013      	movs	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3310      	adds	r3, #16
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	18d3      	adds	r3, r2, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	705a      	strb	r2, [r3, #1]
 8005b44:	e00f      	b.n	8005b66 <HAL_PCD_EP_Open+0x72>
=======
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	000c      	movs	r4, r1
 8004c36:	0010      	movs	r0, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	1cfb      	adds	r3, r7, #3
 8004c3c:	1c22      	adds	r2, r4, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	003b      	movs	r3, r7
 8004c42:	1c02      	adds	r2, r0, #0
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	1cbb      	adds	r3, r7, #2
 8004c48:	1c0a      	adds	r2, r1, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c4c:	230b      	movs	r3, #11
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c54:	1cfb      	adds	r3, r7, #3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da0f      	bge.n	8004c7e <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c5e:	1cfb      	adds	r3, r7, #3
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2207      	movs	r2, #7
 8004c64:	401a      	ands	r2, r3
 8004c66:	0013      	movs	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	3310      	adds	r3, #16
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	705a      	strb	r2, [r3, #1]
 8004c7c:	e00f      	b.n	8004c9e <HAL_PCD_EP_Open+0x72>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8005b46:	1cfb      	adds	r3, r7, #3
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	0013      	movs	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	3351      	adds	r3, #81	@ 0x51
 8005b58:	33ff      	adds	r3, #255	@ 0xff
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b66:	1cfb      	adds	r3, r7, #3
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b74:	003b      	movs	r3, r7
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1cba      	adds	r2, r7, #2
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b84:	1cbb      	adds	r3, r7, #2
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d102      	bne.n	8005b92 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	23a4      	movs	r3, #164	@ 0xa4
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	5cd3      	ldrb	r3, [r2, r3]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_PCD_EP_Open+0xae>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e013      	b.n	8005bca <HAL_PCD_EP_Open+0xd6>
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	23a4      	movs	r3, #164	@ 0xa4
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	2101      	movs	r1, #1
 8005baa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f005 f95d 	bl	800ae74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	23a4      	movs	r3, #164	@ 0xa4
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8005bc4:	230b      	movs	r3, #11
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	781b      	ldrb	r3, [r3, #0]
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b005      	add	sp, #20
 8005bd0:	bd90      	pop	{r4, r7, pc}

08005bd2 <HAL_PCD_EP_Close>:
=======
 8004c7e:	1cfb      	adds	r3, r7, #3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2207      	movs	r2, #7
 8004c84:	401a      	ands	r2, r3
 8004c86:	0013      	movs	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	3351      	adds	r3, #81	@ 0x51
 8004c90:	33ff      	adds	r3, #255	@ 0xff
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	18d3      	adds	r3, r2, r3
 8004c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9e:	1cfb      	adds	r3, r7, #3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cac:	003b      	movs	r3, r7
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1cba      	adds	r2, r7, #2
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cbc:	1cbb      	adds	r3, r7, #2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d102      	bne.n	8004cca <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	23a4      	movs	r3, #164	@ 0xa4
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	5cd3      	ldrb	r3, [r2, r3]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_PCD_EP_Open+0xae>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e013      	b.n	8004d02 <HAL_PCD_EP_Open+0xd6>
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	23a4      	movs	r3, #164	@ 0xa4
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f005 f95d 	bl	8009fac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	23a4      	movs	r3, #164	@ 0xa4
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004cfc:	230b      	movs	r3, #11
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b005      	add	sp, #20
 8004d08:	bd90      	pop	{r4, r7, pc}

08004d0a <HAL_PCD_EP_Close>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	000a      	movs	r2, r1
 8005bdc:	1cfb      	adds	r3, r7, #3
 8005bde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005be0:	1cfb      	adds	r3, r7, #3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da0f      	bge.n	8005c0a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bea:	1cfb      	adds	r3, r7, #3
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2207      	movs	r2, #7
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	0013      	movs	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	3310      	adds	r3, #16
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	705a      	strb	r2, [r3, #1]
 8005c08:	e00f      	b.n	8005c2a <HAL_PCD_EP_Close+0x58>
=======
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	000a      	movs	r2, r1
 8004d14:	1cfb      	adds	r3, r7, #3
 8004d16:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d18:	1cfb      	adds	r3, r7, #3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da0f      	bge.n	8004d42 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	1cfb      	adds	r3, r7, #3
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2207      	movs	r2, #7
 8004d28:	401a      	ands	r2, r3
 8004d2a:	0013      	movs	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	3310      	adds	r3, #16
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	705a      	strb	r2, [r3, #1]
 8004d40:	e00f      	b.n	8004d62 <HAL_PCD_EP_Close+0x58>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8005c0a:	1cfb      	adds	r3, r7, #3
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2207      	movs	r2, #7
 8005c10:	401a      	ands	r2, r3
 8005c12:	0013      	movs	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	3351      	adds	r3, #81	@ 0x51
 8005c1c:	33ff      	adds	r3, #255	@ 0xff
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	18d3      	adds	r3, r2, r3
 8005c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c2a:	1cfb      	adds	r3, r7, #3
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2207      	movs	r2, #7
 8005c30:	4013      	ands	r3, r2
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	23a4      	movs	r3, #164	@ 0xa4
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_PCD_EP_Close+0x76>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e011      	b.n	8005c6c <HAL_PCD_EP_Close+0x9a>
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	23a4      	movs	r3, #164	@ 0xa4
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	2101      	movs	r1, #1
 8005c50:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	0011      	movs	r1, r2
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f005 fcb2 	bl	800b5c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	23a4      	movs	r3, #164	@ 0xa4
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	2100      	movs	r1, #0
 8005c68:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b004      	add	sp, #16
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_PCD_EP_Receive>:
=======
 8004d42:	1cfb      	adds	r3, r7, #3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2207      	movs	r2, #7
 8004d48:	401a      	ands	r2, r3
 8004d4a:	0013      	movs	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	189b      	adds	r3, r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	3351      	adds	r3, #81	@ 0x51
 8004d54:	33ff      	adds	r3, #255	@ 0xff
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d62:	1cfb      	adds	r3, r7, #3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2207      	movs	r2, #7
 8004d68:	4013      	ands	r3, r2
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	23a4      	movs	r3, #164	@ 0xa4
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	5cd3      	ldrb	r3, [r2, r3]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_PCD_EP_Close+0x76>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e011      	b.n	8004da4 <HAL_PCD_EP_Close+0x9a>
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	23a4      	movs	r3, #164	@ 0xa4
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	2101      	movs	r1, #1
 8004d88:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f005 fcb2 	bl	800a6fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	23a4      	movs	r3, #164	@ 0xa4
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	2100      	movs	r1, #0
 8004da0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b004      	add	sp, #16
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_PCD_EP_Receive>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	200b      	movs	r0, #11
 8005c82:	183b      	adds	r3, r7, r0
 8005c84:	1c0a      	adds	r2, r1, #0
 8005c86:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c88:	0001      	movs	r1, r0
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2207      	movs	r2, #7
 8005c90:	401a      	ands	r2, r3
 8005c92:	0013      	movs	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	3351      	adds	r3, #81	@ 0x51
 8005c9c:	33ff      	adds	r3, #255	@ 0xff
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	18d3      	adds	r3, r2, r3
 8005ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2207      	movs	r2, #7
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f005 fe36 	bl	800b944 <USB_EPStartXfer>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	0018      	movs	r0, r3
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b006      	add	sp, #24
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_PCD_EP_GetRxCount>:
=======
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	200b      	movs	r0, #11
 8004dba:	183b      	adds	r3, r7, r0
 8004dbc:	1c0a      	adds	r2, r1, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	0001      	movs	r1, r0
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	401a      	ands	r2, r3
 8004dca:	0013      	movs	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	3351      	adds	r3, #81	@ 0x51
 8004dd4:	33ff      	adds	r3, #255	@ 0xff
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2207      	movs	r2, #7
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	0011      	movs	r1, r2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f005 fe36 	bl	800aa7c <USB_EPStartXfer>

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_PCD_EP_GetRxCount>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	000a      	movs	r2, r1
 8005cec:	1cfb      	adds	r3, r7, #3
 8005cee:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cf0:	1cfb      	adds	r3, r7, #3
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2207      	movs	r2, #7
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	23b6      	movs	r3, #182	@ 0xb6
 8005cfc:	0059      	lsls	r1, r3, #1
 8005cfe:	0013      	movs	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	18c3      	adds	r3, r0, r3
 8005d08:	185b      	adds	r3, r3, r1
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_PCD_EP_Transmit>:
=======
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	000a      	movs	r2, r1
 8004e24:	1cfb      	adds	r3, r7, #3
 8004e26:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e28:	1cfb      	adds	r3, r7, #3
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2207      	movs	r2, #7
 8004e2e:	401a      	ands	r2, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	23b6      	movs	r3, #182	@ 0xb6
 8004e34:	0059      	lsls	r1, r3, #1
 8004e36:	0013      	movs	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	18c3      	adds	r3, r0, r3
 8004e40:	185b      	adds	r3, r3, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_PCD_EP_Transmit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	200b      	movs	r0, #11
 8005d22:	183b      	adds	r3, r7, r0
 8005d24:	1c0a      	adds	r2, r1, #0
 8005d26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d28:	183b      	adds	r3, r7, r0
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	401a      	ands	r2, r3
 8005d30:	0013      	movs	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	189b      	adds	r3, r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3310      	adds	r3, #16
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2224      	movs	r2, #36	@ 0x24
 8005d50:	2101      	movs	r1, #1
 8005d52:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2201      	movs	r2, #1
 8005d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d66:	183b      	adds	r3, r7, r0
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2207      	movs	r2, #7
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f005 fde1 	bl	800b944 <USB_EPStartXfer>

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b006      	add	sp, #24
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_PCD_EP_SetStall>:
=======
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	200b      	movs	r0, #11
 8004e5a:	183b      	adds	r3, r7, r0
 8004e5c:	1c0a      	adds	r2, r1, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2207      	movs	r2, #7
 8004e66:	401a      	ands	r2, r3
 8004e68:	0013      	movs	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	3310      	adds	r3, #16
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	18d3      	adds	r3, r2, r3
 8004e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2224      	movs	r2, #36	@ 0x24
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f005 fde1 	bl	800aa7c <USB_EPStartXfer>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b006      	add	sp, #24
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_PCD_EP_SetStall>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	000a      	movs	r2, r1
 8005d96:	1cfb      	adds	r3, r7, #3
 8005d98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d9a:	1cfb      	adds	r3, r7, #3
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2207      	movs	r2, #7
 8005da0:	4013      	ands	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	7912      	ldrb	r2, [r2, #4]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e046      	b.n	8005e3c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dae:	1cfb      	adds	r3, r7, #3
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da0f      	bge.n	8005dd8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db8:	1cfb      	adds	r3, r7, #3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2207      	movs	r2, #7
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	0013      	movs	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	189b      	adds	r3, r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	3310      	adds	r3, #16
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	705a      	strb	r2, [r3, #1]
 8005dd6:	e00d      	b.n	8005df4 <HAL_PCD_EP_SetStall+0x68>
=======
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	000a      	movs	r2, r1
 8004ece:	1cfb      	adds	r3, r7, #3
 8004ed0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ed2:	1cfb      	adds	r3, r7, #3
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	7912      	ldrb	r2, [r2, #4]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e046      	b.n	8004f74 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ee6:	1cfb      	adds	r3, r7, #3
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da0f      	bge.n	8004f10 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ef0:	1cfb      	adds	r3, r7, #3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2207      	movs	r2, #7
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	0013      	movs	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	189b      	adds	r3, r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	3310      	adds	r3, #16
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	18d3      	adds	r3, r2, r3
 8004f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	705a      	strb	r2, [r3, #1]
 8004f0e:	e00d      	b.n	8004f2c <HAL_PCD_EP_SetStall+0x68>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8005dd8:	1cfb      	adds	r3, r7, #3
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	0013      	movs	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3351      	adds	r3, #81	@ 0x51
 8005de6:	33ff      	adds	r3, #255	@ 0xff
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dfa:	1cfb      	adds	r3, r7, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2207      	movs	r2, #7
 8005e00:	4013      	ands	r3, r2
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	23a4      	movs	r3, #164	@ 0xa4
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	5cd3      	ldrb	r3, [r2, r3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_PCD_EP_SetStall+0x8c>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e011      	b.n	8005e3c <HAL_PCD_EP_SetStall+0xb0>
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	23a4      	movs	r3, #164	@ 0xa4
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	2101      	movs	r1, #1
 8005e20:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	0011      	movs	r1, r2
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f006 feba 	bl	800cba4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	23a4      	movs	r3, #164	@ 0xa4
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	2100      	movs	r1, #0
 8005e38:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b004      	add	sp, #16
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_PCD_EP_ClrStall>:
=======
 8004f10:	1cfb      	adds	r3, r7, #3
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	0013      	movs	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	3351      	adds	r3, #81	@ 0x51
 8004f1e:	33ff      	adds	r3, #255	@ 0xff
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	18d3      	adds	r3, r2, r3
 8004f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f32:	1cfb      	adds	r3, r7, #3
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2207      	movs	r2, #7
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	23a4      	movs	r3, #164	@ 0xa4
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_PCD_EP_SetStall+0x8c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e011      	b.n	8004f74 <HAL_PCD_EP_SetStall+0xb0>
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	23a4      	movs	r3, #164	@ 0xa4
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	2101      	movs	r1, #1
 8004f58:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f006 feba 	bl	800bcdc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	23a4      	movs	r3, #164	@ 0xa4
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	2100      	movs	r1, #0
 8004f70:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b004      	add	sp, #16
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_PCD_EP_ClrStall>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	000a      	movs	r2, r1
 8005e4e:	1cfb      	adds	r3, r7, #3
 8005e50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e52:	1cfb      	adds	r3, r7, #3
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	220f      	movs	r2, #15
 8005e58:	4013      	ands	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	7912      	ldrb	r2, [r2, #4]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e048      	b.n	8005ef8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e66:	1cfb      	adds	r3, r7, #3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	da0f      	bge.n	8005e90 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e70:	1cfb      	adds	r3, r7, #3
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2207      	movs	r2, #7
 8005e76:	401a      	ands	r2, r3
 8005e78:	0013      	movs	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	189b      	adds	r3, r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	3310      	adds	r3, #16
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	705a      	strb	r2, [r3, #1]
 8005e8e:	e00f      	b.n	8005eb0 <HAL_PCD_EP_ClrStall+0x6c>
=======
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	000a      	movs	r2, r1
 8004f86:	1cfb      	adds	r3, r7, #3
 8004f88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f8a:	1cfb      	adds	r3, r7, #3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	220f      	movs	r2, #15
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	7912      	ldrb	r2, [r2, #4]
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e048      	b.n	8005030 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f9e:	1cfb      	adds	r3, r7, #3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0f      	bge.n	8004fc8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa8:	1cfb      	adds	r3, r7, #3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2207      	movs	r2, #7
 8004fae:	401a      	ands	r2, r3
 8004fb0:	0013      	movs	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	3310      	adds	r3, #16
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	705a      	strb	r2, [r3, #1]
 8004fc6:	e00f      	b.n	8004fe8 <HAL_PCD_EP_ClrStall+0x6c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8005e90:	1cfb      	adds	r3, r7, #3
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2207      	movs	r2, #7
 8005e96:	401a      	ands	r2, r3
 8005e98:	0013      	movs	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	189b      	adds	r3, r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3351      	adds	r3, #81	@ 0x51
 8005ea2:	33ff      	adds	r3, #255	@ 0xff
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb6:	1cfb      	adds	r3, r7, #3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2207      	movs	r2, #7
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	23a4      	movs	r3, #164	@ 0xa4
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_PCD_EP_ClrStall+0x90>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e011      	b.n	8005ef8 <HAL_PCD_EP_ClrStall+0xb4>
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	23a4      	movs	r3, #164	@ 0xa4
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	2101      	movs	r1, #1
 8005edc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f006 feac 	bl	800cc44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	23a4      	movs	r3, #164	@ 0xa4
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <PCD_EP_ISR_Handler>:
=======
 8004fc8:	1cfb      	adds	r3, r7, #3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2207      	movs	r2, #7
 8004fce:	401a      	ands	r2, r3
 8004fd0:	0013      	movs	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	3351      	adds	r3, #81	@ 0x51
 8004fda:	33ff      	adds	r3, #255	@ 0xff
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	18d3      	adds	r3, r2, r3
 8004fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fee:	1cfb      	adds	r3, r7, #3
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2207      	movs	r2, #7
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	23a4      	movs	r3, #164	@ 0xa4
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_PCD_EP_ClrStall+0x90>
 8005008:	2302      	movs	r3, #2
 800500a:	e011      	b.n	8005030 <HAL_PCD_EP_ClrStall+0xb4>
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	23a4      	movs	r3, #164	@ 0xa4
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	2101      	movs	r1, #1
 8005014:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f006 feac 	bl	800bd7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	23a4      	movs	r3, #164	@ 0xa4
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	2100      	movs	r1, #0
 800502c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b004      	add	sp, #16
 8005036:	bd80      	pop	{r7, pc}

08005038 <PCD_EP_ISR_Handler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8005f00:	b5b0      	push	{r4, r5, r7, lr}
 8005f02:	b096      	sub	sp, #88	@ 0x58
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
=======
 8005038:	b5b0      	push	{r4, r5, r7, lr}
 800503a:	b096      	sub	sp, #88	@ 0x58
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< HEAD
 8005f08:	f000 fbea 	bl	80066e0 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2048      	movs	r0, #72	@ 0x48
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	2144      	movs	r1, #68	@ 0x44
 8005f16:	5a52      	ldrh	r2, [r2, r1]
 8005f18:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	244f      	movs	r4, #79	@ 0x4f
 8005f22:	193b      	adds	r3, r7, r4
 8005f24:	210f      	movs	r1, #15
 8005f26:	400a      	ands	r2, r1
 8005f28:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8005f2a:	193b      	adds	r3, r7, r4
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d000      	beq.n	8005f34 <PCD_EP_ISR_Handler+0x34>
 8005f32:	e18d      	b.n	8006250 <PCD_EP_ISR_Handler+0x350>
=======
 8005040:	f000 fbea 	bl	8005818 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	2048      	movs	r0, #72	@ 0x48
 800504a:	183b      	adds	r3, r7, r0
 800504c:	2144      	movs	r1, #68	@ 0x44
 800504e:	5a52      	ldrh	r2, [r2, r1]
 8005050:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005052:	183b      	adds	r3, r7, r0
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	244f      	movs	r4, #79	@ 0x4f
 800505a:	193b      	adds	r3, r7, r4
 800505c:	210f      	movs	r1, #15
 800505e:	400a      	ands	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8005062:	193b      	adds	r3, r7, r4
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d000      	beq.n	800506c <PCD_EP_ISR_Handler+0x34>
 800506a:	e18d      	b.n	8005388 <PCD_EP_ISR_Handler+0x350>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< HEAD
 8005f34:	183b      	adds	r3, r7, r0
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d152      	bne.n	8005fe4 <PCD_EP_ISR_Handler+0xe4>
=======
 800506c:	183b      	adds	r3, r7, r0
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	2210      	movs	r2, #16
 8005072:	4013      	ands	r3, r2
 8005074:	d152      	bne.n	800511c <PCD_EP_ISR_Handler+0xe4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	200e      	movs	r0, #14
 8005f48:	183b      	adds	r3, r7, r0
 8005f4a:	49ba      	ldr	r1, [pc, #744]	@ (8006234 <PCD_EP_ISR_Handler+0x334>)
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	183a      	adds	r2, r7, r0
 8005f56:	8812      	ldrh	r2, [r2, #0]
 8005f58:	49b7      	ldr	r1, [pc, #732]	@ (8006238 <PCD_EP_ISR_Handler+0x338>)
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3310      	adds	r3, #16
 8005f64:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2250      	movs	r2, #80	@ 0x50
 8005f6c:	5a9b      	ldrh	r3, [r3, r2]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	001a      	movs	r2, r3
 8005f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	18d2      	adds	r2, r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	18d3      	adds	r3, r2, r3
 8005f80:	4aae      	ldr	r2, [pc, #696]	@ (800623c <PCD_EP_ISR_Handler+0x33c>)
 8005f82:	4694      	mov	ip, r2
 8005f84:	4463      	add	r3, ip
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	059b      	lsls	r3, r3, #22
 8005f8a:	0d9a      	lsrs	r2, r3, #22
 8005f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	18d2      	adds	r2, r2, r3
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9c:	615a      	str	r2, [r3, #20]
=======
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29a      	uxth	r2, r3
 800507e:	200e      	movs	r0, #14
 8005080:	183b      	adds	r3, r7, r0
 8005082:	49ba      	ldr	r1, [pc, #744]	@ (800536c <PCD_EP_ISR_Handler+0x334>)
 8005084:	400a      	ands	r2, r1
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	183a      	adds	r2, r7, r0
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	49b7      	ldr	r1, [pc, #732]	@ (8005370 <PCD_EP_ISR_Handler+0x338>)
 8005092:	430a      	orrs	r2, r1
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3310      	adds	r3, #16
 800509c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2250      	movs	r2, #80	@ 0x50
 80050a4:	5a9b      	ldrh	r3, [r3, r2]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	001a      	movs	r2, r3
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	18d2      	adds	r2, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	4aae      	ldr	r2, [pc, #696]	@ (8005374 <PCD_EP_ISR_Handler+0x33c>)
 80050ba:	4694      	mov	ip, r2
 80050bc:	4463      	add	r3, ip
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	059b      	lsls	r3, r3, #22
 80050c2:	0d9a      	lsrs	r2, r3, #22
 80050c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80050c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	18d2      	adds	r2, r2, r3
 80050d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d4:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f00b fdb0 	bl	8011b08 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <PCD_EP_ISR_Handler+0xb6>
 8005fb2:	f000 fb95 	bl	80066e0 <PCD_EP_ISR_Handler+0x7e0>
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <PCD_EP_ISR_Handler+0xc2>
 8005fbe:	f000 fb8f 	bl	80066e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7b1b      	ldrb	r3, [r3, #12]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2280      	movs	r2, #128	@ 0x80
 8005fca:	4252      	negs	r2, r2
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0011      	movs	r1, r2
 8005fd6:	224c      	movs	r2, #76	@ 0x4c
 8005fd8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	731a      	strb	r2, [r3, #12]
 8005fe0:	f000 fb7e 	bl	80066e0 <PCD_EP_ISR_Handler+0x7e0>
=======
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2100      	movs	r1, #0
 80050da:	0018      	movs	r0, r3
 80050dc:	f00b fdb2 	bl	8010c44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7b1b      	ldrb	r3, [r3, #12]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <PCD_EP_ISR_Handler+0xb6>
 80050ea:	f000 fb95 	bl	8005818 <PCD_EP_ISR_Handler+0x7e0>
 80050ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <PCD_EP_ISR_Handler+0xc2>
 80050f6:	f000 fb8f 	bl	8005818 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7b1b      	ldrb	r3, [r3, #12]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2280      	movs	r2, #128	@ 0x80
 8005102:	4252      	negs	r2, r2
 8005104:	4313      	orrs	r3, r2
 8005106:	b2da      	uxtb	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0011      	movs	r1, r2
 800510e:	224c      	movs	r2, #76	@ 0x4c
 8005110:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	731a      	strb	r2, [r3, #12]
 8005118:	f000 fb7e 	bl	8005818 <PCD_EP_ISR_Handler+0x7e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< HEAD
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3351      	adds	r3, #81	@ 0x51
 8005fe8:	33ff      	adds	r3, #255	@ 0xff
 8005fea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	214c      	movs	r1, #76	@ 0x4c
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	8812      	ldrh	r2, [r2, #0]
 8005ff6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ff8:	187b      	adds	r3, r7, r1
 8005ffa:	881a      	ldrh	r2, [r3, #0]
 8005ffc:	2380      	movs	r3, #128	@ 0x80
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4013      	ands	r3, r2
 8006002:	d037      	beq.n	8006074 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2250      	movs	r2, #80	@ 0x50
 800600a:	5a9b      	ldrh	r3, [r3, r2]
 800600c:	b29b      	uxth	r3, r3
 800600e:	001a      	movs	r2, r3
 8006010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	18d2      	adds	r2, r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	18d3      	adds	r3, r2, r3
 800601e:	4a88      	ldr	r2, [pc, #544]	@ (8006240 <PCD_EP_ISR_Handler+0x340>)
 8006020:	4694      	mov	ip, r2
 8006022:	4463      	add	r3, ip
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	059b      	lsls	r3, r3, #22
 8006028:	0d9a      	lsrs	r2, r3, #22
 800602a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800602c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	22a6      	movs	r2, #166	@ 0xa6
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	1899      	adds	r1, r3, r2
 800603a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800603c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800603e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006040:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006042:	b29b      	uxth	r3, r3
 8006044:	f006 ff31 	bl	800ceaa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29a      	uxth	r2, r3
 8006050:	2010      	movs	r0, #16
 8006052:	183b      	adds	r3, r7, r0
 8006054:	497b      	ldr	r1, [pc, #492]	@ (8006244 <PCD_EP_ISR_Handler+0x344>)
 8006056:	400a      	ands	r2, r1
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	183a      	adds	r2, r7, r0
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	2180      	movs	r1, #128	@ 0x80
 8006064:	430a      	orrs	r2, r1
 8006066:	b292      	uxth	r2, r2
 8006068:	801a      	strh	r2, [r3, #0]
=======
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3351      	adds	r3, #81	@ 0x51
 8005120:	33ff      	adds	r3, #255	@ 0xff
 8005122:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	214c      	movs	r1, #76	@ 0x4c
 800512a:	187b      	adds	r3, r7, r1
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005130:	187b      	adds	r3, r7, r1
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	@ 0x80
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4013      	ands	r3, r2
 800513a:	d037      	beq.n	80051ac <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2250      	movs	r2, #80	@ 0x50
 8005142:	5a9b      	ldrh	r3, [r3, r2]
 8005144:	b29b      	uxth	r3, r3
 8005146:	001a      	movs	r2, r3
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	18d2      	adds	r2, r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	18d3      	adds	r3, r2, r3
 8005156:	4a88      	ldr	r2, [pc, #544]	@ (8005378 <PCD_EP_ISR_Handler+0x340>)
 8005158:	4694      	mov	ip, r2
 800515a:	4463      	add	r3, ip
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	059b      	lsls	r3, r3, #22
 8005160:	0d9a      	lsrs	r2, r3, #22
 8005162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005164:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	22a6      	movs	r2, #166	@ 0xa6
 800516e:	0092      	lsls	r2, r2, #2
 8005170:	1899      	adds	r1, r3, r2
 8005172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005174:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005178:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800517a:	b29b      	uxth	r3, r3
 800517c:	f006 ff32 	bl	800bfe4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29a      	uxth	r2, r3
 8005188:	2010      	movs	r0, #16
 800518a:	183b      	adds	r3, r7, r0
 800518c:	497b      	ldr	r1, [pc, #492]	@ (800537c <PCD_EP_ISR_Handler+0x344>)
 800518e:	400a      	ands	r2, r1
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	183a      	adds	r2, r7, r0
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	2180      	movs	r1, #128	@ 0x80
 800519c:	430a      	orrs	r2, r1
 800519e:	b292      	uxth	r2, r2
 80051a0:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f00b fd15 	bl	8011a9c <HAL_PCD_SetupStageCallback>
 8006072:	e335      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006074:	234c      	movs	r3, #76	@ 0x4c
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2200      	movs	r2, #0
 800607a:	5e9b      	ldrsh	r3, [r3, r2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	db00      	blt.n	8006082 <PCD_EP_ISR_Handler+0x182>
 8006080:	e32e      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29a      	uxth	r2, r3
 800608a:	201e      	movs	r0, #30
 800608c:	183b      	adds	r3, r7, r0
 800608e:	496d      	ldr	r1, [pc, #436]	@ (8006244 <PCD_EP_ISR_Handler+0x344>)
 8006090:	400a      	ands	r2, r1
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	183a      	adds	r2, r7, r0
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	2180      	movs	r1, #128	@ 0x80
 800609e:	430a      	orrs	r2, r1
 80060a0:	b292      	uxth	r2, r2
 80060a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2250      	movs	r2, #80	@ 0x50
 80060aa:	5a9b      	ldrh	r3, [r3, r2]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	001a      	movs	r2, r3
 80060b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	18d2      	adds	r2, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	18d3      	adds	r3, r2, r3
 80060be:	4a60      	ldr	r2, [pc, #384]	@ (8006240 <PCD_EP_ISR_Handler+0x340>)
 80060c0:	4694      	mov	ip, r2
 80060c2:	4463      	add	r3, ip
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	059b      	lsls	r3, r3, #22
 80060c8:	0d9a      	lsrs	r2, r3, #22
 80060ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80060ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01a      	beq.n	800610c <PCD_EP_ISR_Handler+0x20c>
 80060d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	6959      	ldr	r1, [r3, #20]
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f006 fedb 	bl	800ceaa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80060f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	18d2      	adds	r2, r2, r3
 80060fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006100:	615a      	str	r2, [r3, #20]
=======
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f00b fd17 	bl	8010bd8 <HAL_PCD_SetupStageCallback>
 80051aa:	e335      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051ac:	234c      	movs	r3, #76	@ 0x4c
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	5e9b      	ldrsh	r3, [r3, r2]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db00      	blt.n	80051ba <PCD_EP_ISR_Handler+0x182>
 80051b8:	e32e      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	201e      	movs	r0, #30
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	496d      	ldr	r1, [pc, #436]	@ (800537c <PCD_EP_ISR_Handler+0x344>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	183a      	adds	r2, r7, r0
 80051d2:	8812      	ldrh	r2, [r2, #0]
 80051d4:	2180      	movs	r1, #128	@ 0x80
 80051d6:	430a      	orrs	r2, r1
 80051d8:	b292      	uxth	r2, r2
 80051da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2250      	movs	r2, #80	@ 0x50
 80051e2:	5a9b      	ldrh	r3, [r3, r2]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	001a      	movs	r2, r3
 80051e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	18d2      	adds	r2, r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	4a60      	ldr	r2, [pc, #384]	@ (8005378 <PCD_EP_ISR_Handler+0x340>)
 80051f8:	4694      	mov	ip, r2
 80051fa:	4463      	add	r3, ip
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	059b      	lsls	r3, r3, #22
 8005200:	0d9a      	lsrs	r2, r3, #22
 8005202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005204:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01a      	beq.n	8005244 <PCD_EP_ISR_Handler+0x20c>
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521c:	6959      	ldr	r1, [r3, #20]
 800521e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005220:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005224:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005226:	b29b      	uxth	r3, r3
 8005228:	f006 fedc 	bl	800bfe4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800522c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	18d2      	adds	r2, r2, r3
 8005236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005238:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2100      	movs	r1, #0
 8006106:	0018      	movs	r0, r3
 8006108:	f00b fcdd 	bl	8011ac6 <HAL_PCD_DataOutStageCallback>
=======
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2100      	movs	r1, #0
 800523e:	0018      	movs	r0, r3
 8005240:	f00b fcdf 	bl	8010c02 <HAL_PCD_DataOutStageCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	214c      	movs	r1, #76	@ 0x4c
 8006112:	187b      	adds	r3, r7, r1
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006118:	187b      	adds	r3, r7, r1
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4013      	ands	r3, r2
 8006122:	d000      	beq.n	8006126 <PCD_EP_ISR_Handler+0x226>
 8006124:	e2dc      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
 8006126:	187b      	adds	r3, r7, r1
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	23c0      	movs	r3, #192	@ 0xc0
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	401a      	ands	r2, r3
 8006130:	23c0      	movs	r3, #192	@ 0xc0
 8006132:	019b      	lsls	r3, r3, #6
 8006134:	429a      	cmp	r2, r3
 8006136:	d100      	bne.n	800613a <PCD_EP_ISR_Handler+0x23a>
 8006138:	e2d2      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2250      	movs	r2, #80	@ 0x50
 8006146:	5a9b      	ldrh	r3, [r3, r2]
 8006148:	b29b      	uxth	r3, r3
 800614a:	001a      	movs	r2, r3
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	189b      	adds	r3, r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4a3a      	ldr	r2, [pc, #232]	@ (8006240 <PCD_EP_ISR_Handler+0x340>)
 8006156:	4694      	mov	ip, r2
 8006158:	4463      	add	r3, ip
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	059b      	lsls	r3, r3, #22
 8006164:	0d9b      	lsrs	r3, r3, #22
 8006166:	b29a      	uxth	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d108      	bne.n	8006186 <PCD_EP_ISR_Handler+0x286>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	4a2f      	ldr	r2, [pc, #188]	@ (8006238 <PCD_EP_ISR_Handler+0x338>)
 800617c:	4313      	orrs	r3, r2
 800617e:	b29a      	uxth	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e035      	b.n	80061f2 <PCD_EP_ISR_Handler+0x2f2>
 8006186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b3e      	cmp	r3, #62	@ 0x3e
 800618c:	d817      	bhi.n	80061be <PCD_EP_ISR_Handler+0x2be>
 800618e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	647b      	str	r3, [r7, #68]	@ 0x44
 8006196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2201      	movs	r2, #1
 800619c:	4013      	ands	r3, r2
 800619e:	d002      	beq.n	80061a6 <PCD_EP_ISR_Handler+0x2a6>
 80061a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a2:	3301      	adds	r3, #1
 80061a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e019      	b.n	80061f2 <PCD_EP_ISR_Handler+0x2f2>
 80061be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	221f      	movs	r2, #31
 80061cc:	4013      	ands	r3, r2
 80061ce:	d102      	bne.n	80061d6 <PCD_EP_ISR_Handler+0x2d6>
 80061d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061d2:	3b01      	subs	r3, #1
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4a13      	ldr	r2, [pc, #76]	@ (8006238 <PCD_EP_ISR_Handler+0x338>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	2012      	movs	r0, #18
 80061fc:	183b      	adds	r3, r7, r0
 80061fe:	4912      	ldr	r1, [pc, #72]	@ (8006248 <PCD_EP_ISR_Handler+0x348>)
 8006200:	400a      	ands	r2, r1
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	183b      	adds	r3, r7, r0
 8006206:	183a      	adds	r2, r7, r0
 8006208:	8812      	ldrh	r2, [r2, #0]
 800620a:	2180      	movs	r1, #128	@ 0x80
 800620c:	0149      	lsls	r1, r1, #5
 800620e:	404a      	eors	r2, r1
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	183b      	adds	r3, r7, r0
 8006214:	183a      	adds	r2, r7, r0
 8006216:	8812      	ldrh	r2, [r2, #0]
 8006218:	2180      	movs	r1, #128	@ 0x80
 800621a:	0189      	lsls	r1, r1, #6
 800621c:	404a      	eors	r2, r1
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	183a      	adds	r2, r7, r0
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	4908      	ldr	r1, [pc, #32]	@ (800624c <PCD_EP_ISR_Handler+0x34c>)
 800622a:	430a      	orrs	r2, r1
 800622c:	b292      	uxth	r2, r2
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e256      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	ffff8f0f 	.word	0xffff8f0f
 8006238:	ffff8000 	.word	0xffff8000
 800623c:	00000402 	.word	0x00000402
 8006240:	00000406 	.word	0x00000406
 8006244:	00000f8f 	.word	0x00000f8f
 8006248:	ffffbf8f 	.word	0xffffbf8f
 800624c:	ffff8080 	.word	0xffff8080
=======
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	214c      	movs	r1, #76	@ 0x4c
 800524a:	187b      	adds	r3, r7, r1
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005250:	187b      	adds	r3, r7, r1
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	4013      	ands	r3, r2
 800525a:	d000      	beq.n	800525e <PCD_EP_ISR_Handler+0x226>
 800525c:	e2dc      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
 800525e:	187b      	adds	r3, r7, r1
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	23c0      	movs	r3, #192	@ 0xc0
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	401a      	ands	r2, r3
 8005268:	23c0      	movs	r3, #192	@ 0xc0
 800526a:	019b      	lsls	r3, r3, #6
 800526c:	429a      	cmp	r2, r3
 800526e:	d100      	bne.n	8005272 <PCD_EP_ISR_Handler+0x23a>
 8005270:	e2d2      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2250      	movs	r2, #80	@ 0x50
 800527e:	5a9b      	ldrh	r3, [r3, r2]
 8005280:	b29b      	uxth	r3, r3
 8005282:	001a      	movs	r2, r3
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	189b      	adds	r3, r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	4a3a      	ldr	r2, [pc, #232]	@ (8005378 <PCD_EP_ISR_Handler+0x340>)
 800528e:	4694      	mov	ip, r2
 8005290:	4463      	add	r3, ip
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	059b      	lsls	r3, r3, #22
 800529c:	0d9b      	lsrs	r3, r3, #22
 800529e:	b29a      	uxth	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <PCD_EP_ISR_Handler+0x286>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005370 <PCD_EP_ISR_Handler+0x338>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e035      	b.n	800532a <PCD_EP_ISR_Handler+0x2f2>
 80052be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80052c4:	d817      	bhi.n	80052f6 <PCD_EP_ISR_Handler+0x2be>
 80052c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4013      	ands	r3, r2
 80052d6:	d002      	beq.n	80052de <PCD_EP_ISR_Handler+0x2a6>
 80052d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052da:	3301      	adds	r3, #1
 80052dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e019      	b.n	800532a <PCD_EP_ISR_Handler+0x2f2>
 80052f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	221f      	movs	r2, #31
 8005304:	4013      	ands	r3, r2
 8005306:	d102      	bne.n	800530e <PCD_EP_ISR_Handler+0x2d6>
 8005308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530a:	3b01      	subs	r3, #1
 800530c:	647b      	str	r3, [r7, #68]	@ 0x44
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29a      	uxth	r2, r3
 8005314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	4a13      	ldr	r2, [pc, #76]	@ (8005370 <PCD_EP_ISR_Handler+0x338>)
 8005322:	4313      	orrs	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	2012      	movs	r0, #18
 8005334:	183b      	adds	r3, r7, r0
 8005336:	4912      	ldr	r1, [pc, #72]	@ (8005380 <PCD_EP_ISR_Handler+0x348>)
 8005338:	400a      	ands	r2, r1
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	183b      	adds	r3, r7, r0
 800533e:	183a      	adds	r2, r7, r0
 8005340:	8812      	ldrh	r2, [r2, #0]
 8005342:	2180      	movs	r1, #128	@ 0x80
 8005344:	0149      	lsls	r1, r1, #5
 8005346:	404a      	eors	r2, r1
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	183b      	adds	r3, r7, r0
 800534c:	183a      	adds	r2, r7, r0
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	2180      	movs	r1, #128	@ 0x80
 8005352:	0189      	lsls	r1, r1, #6
 8005354:	404a      	eors	r2, r1
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	183a      	adds	r2, r7, r0
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	4908      	ldr	r1, [pc, #32]	@ (8005384 <PCD_EP_ISR_Handler+0x34c>)
 8005362:	430a      	orrs	r2, r1
 8005364:	b292      	uxth	r2, r2
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e256      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	ffff8f0f 	.word	0xffff8f0f
 8005370:	ffff8000 	.word	0xffff8000
 8005374:	00000402 	.word	0x00000402
 8005378:	00000406 	.word	0x00000406
 800537c:	00000f8f 	.word	0x00000f8f
 8005380:	ffffbf8f 	.word	0xffffbf8f
 8005384:	ffff8080 	.word	0xffff8080
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< HEAD
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	001a      	movs	r2, r3
 8006256:	204f      	movs	r0, #79	@ 0x4f
 8006258:	183b      	adds	r3, r7, r0
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	18d2      	adds	r2, r2, r3
 8006260:	214c      	movs	r1, #76	@ 0x4c
 8006262:	187b      	adds	r3, r7, r1
 8006264:	8812      	ldrh	r2, [r2, #0]
 8006266:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006268:	187b      	adds	r3, r7, r1
 800626a:	2200      	movs	r2, #0
 800626c:	5e9b      	ldrsh	r3, [r3, r2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	db00      	blt.n	8006274 <PCD_EP_ISR_Handler+0x374>
 8006272:	e0fa      	b.n	800646a <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	001a      	movs	r2, r3
 800627a:	183b      	adds	r3, r7, r0
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29a      	uxth	r2, r3
 8006286:	244a      	movs	r4, #74	@ 0x4a
 8006288:	193b      	adds	r3, r7, r4
 800628a:	49d1      	ldr	r1, [pc, #836]	@ (80065d0 <PCD_EP_ISR_Handler+0x6d0>)
 800628c:	400a      	ands	r2, r1
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	001a      	movs	r2, r3
 8006296:	183b      	adds	r3, r7, r0
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	18d3      	adds	r3, r2, r3
 800629e:	193a      	adds	r2, r7, r4
 80062a0:	8812      	ldrh	r2, [r2, #0]
 80062a2:	2180      	movs	r1, #128	@ 0x80
 80062a4:	430a      	orrs	r2, r1
 80062a6:	b292      	uxth	r2, r2
 80062a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80062aa:	183b      	adds	r3, r7, r0
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	0013      	movs	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	3351      	adds	r3, #81	@ 0x51
 80062b8:	33ff      	adds	r3, #255	@ 0xff
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	18d3      	adds	r3, r2, r3
 80062be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80062c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c2:	7b1b      	ldrb	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d125      	bne.n	8006314 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2250      	movs	r2, #80	@ 0x50
 80062ce:	5a9b      	ldrh	r3, [r3, r2]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	001a      	movs	r2, r3
 80062d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	18d2      	adds	r2, r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	18d3      	adds	r3, r2, r3
 80062e2:	4abc      	ldr	r2, [pc, #752]	@ (80065d4 <PCD_EP_ISR_Handler+0x6d4>)
 80062e4:	4694      	mov	ip, r2
 80062e6:	4463      	add	r3, ip
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	2450      	movs	r4, #80	@ 0x50
 80062ec:	193b      	adds	r3, r7, r4
 80062ee:	0592      	lsls	r2, r2, #22
 80062f0:	0d92      	lsrs	r2, r2, #22
 80062f2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d100      	bne.n	80062fe <PCD_EP_ISR_Handler+0x3fe>
 80062fc:	e08d      	b.n	800641a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006304:	6959      	ldr	r1, [r3, #20]
 8006306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006308:	88da      	ldrh	r2, [r3, #6]
 800630a:	193b      	adds	r3, r7, r4
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	f006 fdcc 	bl	800ceaa <USB_ReadPMA>
 8006312:	e082      	b.n	800641a <PCD_EP_ISR_Handler+0x51a>
=======
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	001a      	movs	r2, r3
 800538e:	204f      	movs	r0, #79	@ 0x4f
 8005390:	183b      	adds	r3, r7, r0
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	18d2      	adds	r2, r2, r3
 8005398:	214c      	movs	r1, #76	@ 0x4c
 800539a:	187b      	adds	r3, r7, r1
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	2200      	movs	r2, #0
 80053a4:	5e9b      	ldrsh	r3, [r3, r2]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	db00      	blt.n	80053ac <PCD_EP_ISR_Handler+0x374>
 80053aa:	e0fa      	b.n	80055a2 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	001a      	movs	r2, r3
 80053b2:	183b      	adds	r3, r7, r0
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	244a      	movs	r4, #74	@ 0x4a
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	49d1      	ldr	r1, [pc, #836]	@ (8005708 <PCD_EP_ISR_Handler+0x6d0>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	001a      	movs	r2, r3
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	18d3      	adds	r3, r2, r3
 80053d6:	193a      	adds	r2, r7, r4
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	2180      	movs	r1, #128	@ 0x80
 80053dc:	430a      	orrs	r2, r1
 80053de:	b292      	uxth	r2, r2
 80053e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	781a      	ldrb	r2, [r3, #0]
 80053e6:	0013      	movs	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	3351      	adds	r3, #81	@ 0x51
 80053f0:	33ff      	adds	r3, #255	@ 0xff
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fa:	7b1b      	ldrb	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d125      	bne.n	800544c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2250      	movs	r2, #80	@ 0x50
 8005406:	5a9b      	ldrh	r3, [r3, r2]
 8005408:	b29b      	uxth	r3, r3
 800540a:	001a      	movs	r2, r3
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	18d2      	adds	r2, r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	4abc      	ldr	r2, [pc, #752]	@ (800570c <PCD_EP_ISR_Handler+0x6d4>)
 800541c:	4694      	mov	ip, r2
 800541e:	4463      	add	r3, ip
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	2450      	movs	r4, #80	@ 0x50
 8005424:	193b      	adds	r3, r7, r4
 8005426:	0592      	lsls	r2, r2, #22
 8005428:	0d92      	lsrs	r2, r2, #22
 800542a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800542c:	193b      	adds	r3, r7, r4
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d100      	bne.n	8005436 <PCD_EP_ISR_Handler+0x3fe>
 8005434:	e08d      	b.n	8005552 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543c:	6959      	ldr	r1, [r3, #20]
 800543e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005440:	88da      	ldrh	r2, [r3, #6]
 8005442:	193b      	adds	r3, r7, r4
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	f006 fdcd 	bl	800bfe4 <USB_ReadPMA>
 800544a:	e082      	b.n	8005552 <PCD_EP_ISR_Handler+0x51a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8006314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006316:	78db      	ldrb	r3, [r3, #3]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d10c      	bne.n	8006336 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800631c:	2350      	movs	r3, #80	@ 0x50
 800631e:	18fc      	adds	r4, r7, r3
 8006320:	234c      	movs	r3, #76	@ 0x4c
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	0018      	movs	r0, r3
 800632c:	f000 f9ec 	bl	8006708 <HAL_PCD_EP_DB_Receive>
 8006330:	0003      	movs	r3, r0
 8006332:	8023      	strh	r3, [r4, #0]
 8006334:	e071      	b.n	800641a <PCD_EP_ISR_Handler+0x51a>
=======
 800544c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544e:	78db      	ldrb	r3, [r3, #3]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d10c      	bne.n	800546e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005454:	2350      	movs	r3, #80	@ 0x50
 8005456:	18fc      	adds	r4, r7, r3
 8005458:	234c      	movs	r3, #76	@ 0x4c
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f9ec 	bl	8005840 <HAL_PCD_EP_DB_Receive>
 8005468:	0003      	movs	r3, r0
 800546a:	8023      	strh	r3, [r4, #0]
 800546c:	e071      	b.n	8005552 <PCD_EP_ISR_Handler+0x51a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
<<<<<<< HEAD
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	001a      	movs	r2, r3
 800633c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	18d3      	adds	r3, r2, r3
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29a      	uxth	r2, r3
 8006348:	2052      	movs	r0, #82	@ 0x52
 800634a:	183b      	adds	r3, r7, r0
 800634c:	49a2      	ldr	r1, [pc, #648]	@ (80065d8 <PCD_EP_ISR_Handler+0x6d8>)
 800634e:	400a      	ands	r2, r1
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	001a      	movs	r2, r3
 8006358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	183a      	adds	r2, r7, r0
 8006362:	8812      	ldrh	r2, [r2, #0]
 8006364:	499d      	ldr	r1, [pc, #628]	@ (80065dc <PCD_EP_ISR_Handler+0x6dc>)
 8006366:	430a      	orrs	r2, r1
 8006368:	b292      	uxth	r2, r2
 800636a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	001a      	movs	r2, r3
 8006372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	001a      	movs	r2, r3
 8006380:	2380      	movs	r3, #128	@ 0x80
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	4013      	ands	r3, r2
 8006386:	d024      	beq.n	80063d2 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2250      	movs	r2, #80	@ 0x50
 800638e:	5a9b      	ldrh	r3, [r3, r2]
 8006390:	b29b      	uxth	r3, r3
 8006392:	001a      	movs	r2, r3
 8006394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	18d2      	adds	r2, r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	18d3      	adds	r3, r2, r3
 80063a2:	4a8f      	ldr	r2, [pc, #572]	@ (80065e0 <PCD_EP_ISR_Handler+0x6e0>)
 80063a4:	4694      	mov	ip, r2
 80063a6:	4463      	add	r3, ip
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	2450      	movs	r4, #80	@ 0x50
 80063ac:	193b      	adds	r3, r7, r4
 80063ae:	0592      	lsls	r2, r2, #22
 80063b0:	0d92      	lsrs	r2, r2, #22
 80063b2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80063b4:	193b      	adds	r3, r7, r4
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d02e      	beq.n	800641a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c6:	891a      	ldrh	r2, [r3, #8]
 80063c8:	193b      	adds	r3, r7, r4
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	f006 fd6d 	bl	800ceaa <USB_ReadPMA>
 80063d0:	e023      	b.n	800641a <PCD_EP_ISR_Handler+0x51a>
=======
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	001a      	movs	r2, r3
 8005474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	18d3      	adds	r3, r2, r3
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29a      	uxth	r2, r3
 8005480:	2052      	movs	r0, #82	@ 0x52
 8005482:	183b      	adds	r3, r7, r0
 8005484:	49a2      	ldr	r1, [pc, #648]	@ (8005710 <PCD_EP_ISR_Handler+0x6d8>)
 8005486:	400a      	ands	r2, r1
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	001a      	movs	r2, r3
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	18d3      	adds	r3, r2, r3
 8005498:	183a      	adds	r2, r7, r0
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	499d      	ldr	r1, [pc, #628]	@ (8005714 <PCD_EP_ISR_Handler+0x6dc>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	b292      	uxth	r2, r2
 80054a2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	001a      	movs	r2, r3
 80054aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	001a      	movs	r2, r3
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	4013      	ands	r3, r2
 80054be:	d024      	beq.n	800550a <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2250      	movs	r2, #80	@ 0x50
 80054c6:	5a9b      	ldrh	r3, [r3, r2]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	001a      	movs	r2, r3
 80054cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	18d2      	adds	r2, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	4a8f      	ldr	r2, [pc, #572]	@ (8005718 <PCD_EP_ISR_Handler+0x6e0>)
 80054dc:	4694      	mov	ip, r2
 80054de:	4463      	add	r3, ip
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	2450      	movs	r4, #80	@ 0x50
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	0592      	lsls	r2, r2, #22
 80054e8:	0d92      	lsrs	r2, r2, #22
 80054ea:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80054ec:	193b      	adds	r3, r7, r4
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02e      	beq.n	8005552 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fa:	6959      	ldr	r1, [r3, #20]
 80054fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fe:	891a      	ldrh	r2, [r3, #8]
 8005500:	193b      	adds	r3, r7, r4
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	f006 fd6e 	bl	800bfe4 <USB_ReadPMA>
 8005508:	e023      	b.n	8005552 <PCD_EP_ISR_Handler+0x51a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2250      	movs	r2, #80	@ 0x50
 80063d8:	5a9b      	ldrh	r3, [r3, r2]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	001a      	movs	r2, r3
 80063de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	18d2      	adds	r2, r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	18d3      	adds	r3, r2, r3
 80063ec:	4a79      	ldr	r2, [pc, #484]	@ (80065d4 <PCD_EP_ISR_Handler+0x6d4>)
 80063ee:	4694      	mov	ip, r2
 80063f0:	4463      	add	r3, ip
 80063f2:	881a      	ldrh	r2, [r3, #0]
 80063f4:	2450      	movs	r4, #80	@ 0x50
 80063f6:	193b      	adds	r3, r7, r4
 80063f8:	0592      	lsls	r2, r2, #22
 80063fa:	0d92      	lsrs	r2, r2, #22
 80063fc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80063fe:	193b      	adds	r3, r7, r4
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640c:	6959      	ldr	r1, [r3, #20]
 800640e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006410:	895a      	ldrh	r2, [r3, #10]
 8006412:	193b      	adds	r3, r7, r4
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	f006 fd48 	bl	800ceaa <USB_ReadPMA>
=======
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2250      	movs	r2, #80	@ 0x50
 8005510:	5a9b      	ldrh	r3, [r3, r2]
 8005512:	b29b      	uxth	r3, r3
 8005514:	001a      	movs	r2, r3
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	18d2      	adds	r2, r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	18d3      	adds	r3, r2, r3
 8005524:	4a79      	ldr	r2, [pc, #484]	@ (800570c <PCD_EP_ISR_Handler+0x6d4>)
 8005526:	4694      	mov	ip, r2
 8005528:	4463      	add	r3, ip
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	2450      	movs	r4, #80	@ 0x50
 800552e:	193b      	adds	r3, r7, r4
 8005530:	0592      	lsls	r2, r2, #22
 8005532:	0d92      	lsrs	r2, r2, #22
 8005534:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005536:	193b      	adds	r3, r7, r4
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005548:	895a      	ldrh	r2, [r3, #10]
 800554a:	193b      	adds	r3, r7, r4
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	f006 fd49 	bl	800bfe4 <USB_ReadPMA>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< HEAD
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	69da      	ldr	r2, [r3, #28]
 800641e:	2150      	movs	r1, #80	@ 0x50
 8006420:	187b      	adds	r3, r7, r1
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	18d2      	adds	r2, r2, r3
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800642a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	187b      	adds	r3, r7, r1
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	18d2      	adds	r2, r2, r3
 8006434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006436:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <PCD_EP_ISR_Handler+0x54c>
 8006440:	187b      	adds	r3, r7, r1
 8006442:	881a      	ldrh	r2, [r3, #0]
 8006444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d207      	bcs.n	800645c <PCD_EP_ISR_Handler+0x55c>
=======
 8005552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	2150      	movs	r1, #80	@ 0x50
 8005558:	187b      	adds	r3, r7, r1
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	18d2      	adds	r2, r2, r3
 800555e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005560:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	187b      	adds	r3, r7, r1
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	18d2      	adds	r2, r2, r3
 800556c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800556e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <PCD_EP_ISR_Handler+0x54c>
 8005578:	187b      	adds	r3, r7, r1
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	429a      	cmp	r2, r3
 8005582:	d207      	bcs.n	8005594 <PCD_EP_ISR_Handler+0x55c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 800644c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800644e:	781a      	ldrb	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0011      	movs	r1, r2
 8006454:	0018      	movs	r0, r3
 8006456:	f00b fb36 	bl	8011ac6 <HAL_PCD_DataOutStageCallback>
 800645a:	e006      	b.n	800646a <PCD_EP_ISR_Handler+0x56a>
=======
 8005584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0011      	movs	r1, r2
 800558c:	0018      	movs	r0, r3
 800558e:	f00b fb38 	bl	8010c02 <HAL_PCD_DataOutStageCallback>
 8005592:	e006      	b.n	80055a2 <PCD_EP_ISR_Handler+0x56a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006462:	0011      	movs	r1, r2
 8006464:	0018      	movs	r0, r3
 8006466:	f005 fa6d 	bl	800b944 <USB_EPStartXfer>
=======
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800559a:	0011      	movs	r1, r2
 800559c:	0018      	movs	r0, r3
 800559e:	f005 fa6d 	bl	800aa7c <USB_EPStartXfer>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< HEAD
 800646a:	244c      	movs	r4, #76	@ 0x4c
 800646c:	193b      	adds	r3, r7, r4
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	2280      	movs	r2, #128	@ 0x80
 8006472:	4013      	ands	r3, r2
 8006474:	d100      	bne.n	8006478 <PCD_EP_ISR_Handler+0x578>
 8006476:	e133      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8006478:	204f      	movs	r0, #79	@ 0x4f
 800647a:	183b      	adds	r3, r7, r0
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	0013      	movs	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	189b      	adds	r3, r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	3310      	adds	r3, #16
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	001a      	movs	r2, r3
 8006494:	183b      	adds	r3, r7, r0
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	18d3      	adds	r3, r2, r3
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	2542      	movs	r5, #66	@ 0x42
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	494f      	ldr	r1, [pc, #316]	@ (80065e4 <PCD_EP_ISR_Handler+0x6e4>)
 80064a6:	400a      	ands	r2, r1
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	001a      	movs	r2, r3
 80064b0:	183b      	adds	r3, r7, r0
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	18d3      	adds	r3, r2, r3
 80064b8:	197a      	adds	r2, r7, r5
 80064ba:	8812      	ldrh	r2, [r2, #0]
 80064bc:	494a      	ldr	r1, [pc, #296]	@ (80065e8 <PCD_EP_ISR_Handler+0x6e8>)
 80064be:	430a      	orrs	r2, r1
 80064c0:	b292      	uxth	r2, r2
 80064c2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80064c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d000      	beq.n	80064ce <PCD_EP_ISR_Handler+0x5ce>
 80064cc:	e0af      	b.n	800662e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80064ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d0:	2200      	movs	r2, #0
 80064d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80064d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d100      	bne.n	80064de <PCD_EP_ISR_Handler+0x5de>
 80064dc:	e09f      	b.n	800661e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064de:	193b      	adds	r3, r7, r4
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2240      	movs	r2, #64	@ 0x40
 80064e4:	4013      	ands	r3, r2
 80064e6:	d046      	beq.n	8006576 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d125      	bne.n	800653c <PCD_EP_ISR_Handler+0x63c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2250      	movs	r2, #80	@ 0x50
 80064fc:	5a9b      	ldrh	r3, [r3, r2]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	001a      	movs	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	189b      	adds	r3, r3, r2
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
 8006508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00da      	lsls	r2, r3, #3
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	4a33      	ldr	r2, [pc, #204]	@ (80065e0 <PCD_EP_ISR_Handler+0x6e0>)
 8006514:	4694      	mov	ip, r2
 8006516:	4463      	add	r3, ip
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	059b      	lsls	r3, r3, #22
 8006522:	0d9b      	lsrs	r3, r3, #22
 8006524:	b29a      	uxth	r2, r3
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	4a2d      	ldr	r2, [pc, #180]	@ (80065e8 <PCD_EP_ISR_Handler+0x6e8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e070      	b.n	800661e <PCD_EP_ISR_Handler+0x71e>
 800653c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d16c      	bne.n	800661e <PCD_EP_ISR_Handler+0x71e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2250      	movs	r2, #80	@ 0x50
 8006550:	5a9b      	ldrh	r3, [r3, r2]
 8006552:	b29b      	uxth	r3, r3
 8006554:	001a      	movs	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006558:	189b      	adds	r3, r3, r2
 800655a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	00da      	lsls	r2, r3, #3
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	18d3      	adds	r3, r2, r3
 8006566:	4a1e      	ldr	r2, [pc, #120]	@ (80065e0 <PCD_EP_ISR_Handler+0x6e0>)
 8006568:	4694      	mov	ip, r2
 800656a:	4463      	add	r3, ip
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	2200      	movs	r2, #0
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	e053      	b.n	800661e <PCD_EP_ISR_Handler+0x71e>
=======
 80055a2:	244c      	movs	r4, #76	@ 0x4c
 80055a4:	193b      	adds	r3, r7, r4
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	2280      	movs	r2, #128	@ 0x80
 80055aa:	4013      	ands	r3, r2
 80055ac:	d100      	bne.n	80055b0 <PCD_EP_ISR_Handler+0x578>
 80055ae:	e133      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80055b0:	204f      	movs	r0, #79	@ 0x4f
 80055b2:	183b      	adds	r3, r7, r0
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	0013      	movs	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	3310      	adds	r3, #16
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	001a      	movs	r2, r3
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	2542      	movs	r5, #66	@ 0x42
 80055da:	197b      	adds	r3, r7, r5
 80055dc:	494f      	ldr	r1, [pc, #316]	@ (800571c <PCD_EP_ISR_Handler+0x6e4>)
 80055de:	400a      	ands	r2, r1
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	001a      	movs	r2, r3
 80055e8:	183b      	adds	r3, r7, r0
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	18d3      	adds	r3, r2, r3
 80055f0:	197a      	adds	r2, r7, r5
 80055f2:	8812      	ldrh	r2, [r2, #0]
 80055f4:	494a      	ldr	r1, [pc, #296]	@ (8005720 <PCD_EP_ISR_Handler+0x6e8>)
 80055f6:	430a      	orrs	r2, r1
 80055f8:	b292      	uxth	r2, r2
 80055fa:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80055fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fe:	78db      	ldrb	r3, [r3, #3]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d000      	beq.n	8005606 <PCD_EP_ISR_Handler+0x5ce>
 8005604:	e0af      	b.n	8005766 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8005606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800560c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560e:	7b1b      	ldrb	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d100      	bne.n	8005616 <PCD_EP_ISR_Handler+0x5de>
 8005614:	e09f      	b.n	8005756 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005616:	193b      	adds	r3, r7, r4
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	4013      	ands	r3, r2
 800561e:	d046      	beq.n	80056ae <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d125      	bne.n	8005674 <PCD_EP_ISR_Handler+0x63c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2250      	movs	r2, #80	@ 0x50
 8005634:	5a9b      	ldrh	r3, [r3, r2]
 8005636:	b29b      	uxth	r3, r3
 8005638:	001a      	movs	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	189b      	adds	r3, r3, r2
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	00da      	lsls	r2, r3, #3
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	18d3      	adds	r3, r2, r3
 800564a:	4a33      	ldr	r2, [pc, #204]	@ (8005718 <PCD_EP_ISR_Handler+0x6e0>)
 800564c:	4694      	mov	ip, r2
 800564e:	4463      	add	r3, ip
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	059b      	lsls	r3, r3, #22
 800565a:	0d9b      	lsrs	r3, r3, #22
 800565c:	b29a      	uxth	r2, r3
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	4a2d      	ldr	r2, [pc, #180]	@ (8005720 <PCD_EP_ISR_Handler+0x6e8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e070      	b.n	8005756 <PCD_EP_ISR_Handler+0x71e>
 8005674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d16c      	bne.n	8005756 <PCD_EP_ISR_Handler+0x71e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2250      	movs	r2, #80	@ 0x50
 8005688:	5a9b      	ldrh	r3, [r3, r2]
 800568a:	b29b      	uxth	r3, r3
 800568c:	001a      	movs	r2, r3
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	189b      	adds	r3, r3, r2
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	00da      	lsls	r2, r3, #3
 800569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	4a1e      	ldr	r2, [pc, #120]	@ (8005718 <PCD_EP_ISR_Handler+0x6e0>)
 80056a0:	4694      	mov	ip, r2
 80056a2:	4463      	add	r3, ip
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	2200      	movs	r2, #0
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e053      	b.n	8005756 <PCD_EP_ISR_Handler+0x71e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
<<<<<<< HEAD
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d133      	bne.n	80065ec <PCD_EP_ISR_Handler+0x6ec>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2250      	movs	r2, #80	@ 0x50
 8006590:	5a9b      	ldrh	r3, [r3, r2]
 8006592:	b29b      	uxth	r3, r3
 8006594:	001a      	movs	r2, r3
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	189b      	adds	r3, r3, r2
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
 800659c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	00da      	lsls	r2, r3, #3
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	18d3      	adds	r3, r2, r3
 80065a6:	4a0b      	ldr	r2, [pc, #44]	@ (80065d4 <PCD_EP_ISR_Handler+0x6d4>)
 80065a8:	4694      	mov	ip, r2
 80065aa:	4463      	add	r3, ip
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	059b      	lsls	r3, r3, #22
 80065b6:	0d9b      	lsrs	r3, r3, #22
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4a08      	ldr	r2, [pc, #32]	@ (80065e8 <PCD_EP_ISR_Handler+0x6e8>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e026      	b.n	800661e <PCD_EP_ISR_Handler+0x71e>
 80065d0:	00000f8f 	.word	0x00000f8f
 80065d4:	00000406 	.word	0x00000406
 80065d8:	ffff8f8f 	.word	0xffff8f8f
 80065dc:	ffff80c0 	.word	0xffff80c0
 80065e0:	00000402 	.word	0x00000402
 80065e4:	ffff8f0f 	.word	0xffff8f0f
 80065e8:	ffff8000 	.word	0xffff8000
 80065ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d114      	bne.n	800661e <PCD_EP_ISR_Handler+0x71e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2250      	movs	r2, #80	@ 0x50
 80065fa:	5a9b      	ldrh	r3, [r3, r2]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	001a      	movs	r2, r3
 8006600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006602:	189b      	adds	r3, r3, r2
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	00da      	lsls	r2, r3, #3
 800660c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660e:	18d3      	adds	r3, r2, r3
 8006610:	4a3b      	ldr	r2, [pc, #236]	@ (8006700 <PCD_EP_ISR_Handler+0x800>)
 8006612:	4694      	mov	ip, r2
 8006614:	4463      	add	r3, ip
 8006616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	2200      	movs	r2, #0
 800661c:	801a      	strh	r2, [r3, #0]
=======
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d133      	bne.n	8005724 <PCD_EP_ISR_Handler+0x6ec>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2250      	movs	r2, #80	@ 0x50
 80056c8:	5a9b      	ldrh	r3, [r3, r2]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	001a      	movs	r2, r3
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	189b      	adds	r3, r3, r2
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	00da      	lsls	r2, r3, #3
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	18d3      	adds	r3, r2, r3
 80056de:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <PCD_EP_ISR_Handler+0x6d4>)
 80056e0:	4694      	mov	ip, r2
 80056e2:	4463      	add	r3, ip
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	059b      	lsls	r3, r3, #22
 80056ee:	0d9b      	lsrs	r3, r3, #22
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <PCD_EP_ISR_Handler+0x6e8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	b29a      	uxth	r2, r3
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	e026      	b.n	8005756 <PCD_EP_ISR_Handler+0x71e>
 8005708:	00000f8f 	.word	0x00000f8f
 800570c:	00000406 	.word	0x00000406
 8005710:	ffff8f8f 	.word	0xffff8f8f
 8005714:	ffff80c0 	.word	0xffff80c0
 8005718:	00000402 	.word	0x00000402
 800571c:	ffff8f0f 	.word	0xffff8f0f
 8005720:	ffff8000 	.word	0xffff8000
 8005724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d114      	bne.n	8005756 <PCD_EP_ISR_Handler+0x71e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2250      	movs	r2, #80	@ 0x50
 8005732:	5a9b      	ldrh	r3, [r3, r2]
 8005734:	b29b      	uxth	r3, r3
 8005736:	001a      	movs	r2, r3
 8005738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573a:	189b      	adds	r3, r3, r2
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00da      	lsls	r2, r3, #3
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	18d3      	adds	r3, r2, r3
 8005748:	4a3b      	ldr	r2, [pc, #236]	@ (8005838 <PCD_EP_ISR_Handler+0x800>)
 800574a:	4694      	mov	ip, r2
 800574c:	4463      	add	r3, ip
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	2200      	movs	r2, #0
 8005754:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 800661e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f00b fa6e 	bl	8011b08 <HAL_PCD_DataInStageCallback>
 800662c:	e058      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
=======
 8005756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0011      	movs	r1, r2
 800575e:	0018      	movs	r0, r3
 8005760:	f00b fa70 	bl	8010c44 <HAL_PCD_DataInStageCallback>
 8005764:	e058      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
<<<<<<< HEAD
 800662e:	234c      	movs	r3, #76	@ 0x4c
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4013      	ands	r3, r2
 800663a:	d149      	bne.n	80066d0 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2250      	movs	r2, #80	@ 0x50
 8006642:	5a9b      	ldrh	r3, [r3, r2]
 8006644:	b29b      	uxth	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	18d2      	adds	r2, r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	18d3      	adds	r3, r2, r3
 8006656:	4a2b      	ldr	r2, [pc, #172]	@ (8006704 <PCD_EP_ISR_Handler+0x804>)
 8006658:	4694      	mov	ip, r2
 800665a:	4463      	add	r3, ip
 800665c:	881a      	ldrh	r2, [r3, #0]
 800665e:	2140      	movs	r1, #64	@ 0x40
 8006660:	187b      	adds	r3, r7, r1
 8006662:	0592      	lsls	r2, r2, #22
 8006664:	0d92      	lsrs	r2, r2, #22
 8006666:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8006668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	187b      	adds	r3, r7, r1
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d907      	bls.n	8006684 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8006674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	187b      	adds	r3, r7, r1
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	1ad2      	subs	r2, r2, r3
 800667e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006680:	619a      	str	r2, [r3, #24]
 8006682:	e002      	b.n	800668a <PCD_EP_ISR_Handler+0x78a>
=======
 8005766:	234c      	movs	r3, #76	@ 0x4c
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	@ 0x80
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d149      	bne.n	8005808 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2250      	movs	r2, #80	@ 0x50
 800577a:	5a9b      	ldrh	r3, [r3, r2]
 800577c:	b29b      	uxth	r3, r3
 800577e:	001a      	movs	r2, r3
 8005780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	18d2      	adds	r2, r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	18d3      	adds	r3, r2, r3
 800578e:	4a2b      	ldr	r2, [pc, #172]	@ (800583c <PCD_EP_ISR_Handler+0x804>)
 8005790:	4694      	mov	ip, r2
 8005792:	4463      	add	r3, ip
 8005794:	881a      	ldrh	r2, [r3, #0]
 8005796:	2140      	movs	r1, #64	@ 0x40
 8005798:	187b      	adds	r3, r7, r1
 800579a:	0592      	lsls	r2, r2, #22
 800579c:	0d92      	lsrs	r2, r2, #22
 800579e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80057a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d907      	bls.n	80057bc <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80057ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b8:	619a      	str	r2, [r3, #24]
 80057ba:	e002      	b.n	80057c2 <PCD_EP_ISR_Handler+0x78a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
            else
            {
              ep->xfer_len = 0U;
<<<<<<< HEAD
 8006684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006686:	2200      	movs	r2, #0
 8006688:	619a      	str	r2, [r3, #24]
=======
 80057bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
<<<<<<< HEAD
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d107      	bne.n	80066a2 <PCD_EP_ISR_Handler+0x7a2>
=======
 80057c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <PCD_EP_ISR_Handler+0x7a2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8006692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0011      	movs	r1, r2
 800669a:	0018      	movs	r0, r3
 800669c:	f00b fa34 	bl	8011b08 <HAL_PCD_DataInStageCallback>
 80066a0:	e01e      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
=======
 80057ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0011      	movs	r1, r2
 80057d2:	0018      	movs	r0, r3
 80057d4:	f00b fa36 	bl	8010c44 <HAL_PCD_DataInStageCallback>
 80057d8:	e01e      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
<<<<<<< HEAD
 80066a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	2140      	movs	r1, #64	@ 0x40
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	18d2      	adds	r2, r2, r3
 80066ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80066b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	187b      	adds	r3, r7, r1
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	18d2      	adds	r2, r2, r3
 80066bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066c6:	0011      	movs	r1, r2
 80066c8:	0018      	movs	r0, r3
 80066ca:	f005 f93b 	bl	800b944 <USB_EPStartXfer>
 80066ce:	e007      	b.n	80066e0 <PCD_EP_ISR_Handler+0x7e0>
=======
 80057da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	2140      	movs	r1, #64	@ 0x40
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	18d2      	adds	r2, r2, r3
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80057ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	18d2      	adds	r2, r2, r3
 80057f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f005 f93b 	bl	800aa7c <USB_EPStartXfer>
 8005806:	e007      	b.n	8005818 <PCD_EP_ISR_Handler+0x7e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< HEAD
 80066d0:	234c      	movs	r3, #76	@ 0x4c
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 f930 	bl	8006940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2244      	movs	r2, #68	@ 0x44
 80066e6:	5a9b      	ldrh	r3, [r3, r2]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	b21b      	sxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da01      	bge.n	80066f4 <PCD_EP_ISR_Handler+0x7f4>
 80066f0:	f7ff fc0c 	bl	8005f0c <PCD_EP_ISR_Handler+0xc>
=======
 8005808:	234c      	movs	r3, #76	@ 0x4c
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f000 f930 	bl	8005a78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2244      	movs	r2, #68	@ 0x44
 800581e:	5a9b      	ldrh	r3, [r3, r2]
 8005820:	b29b      	uxth	r3, r3
 8005822:	b21b      	sxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	da01      	bge.n	800582c <PCD_EP_ISR_Handler+0x7f4>
 8005828:	f7ff fc0c 	bl	8005044 <PCD_EP_ISR_Handler+0xc>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b016      	add	sp, #88	@ 0x58
 80066fc:	bdb0      	pop	{r4, r5, r7, pc}
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	00000406 	.word	0x00000406
 8006704:	00000402 	.word	0x00000402

08006708 <HAL_PCD_EP_DB_Receive>:
=======
 800582c:	2300      	movs	r3, #0
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b016      	add	sp, #88	@ 0x58
 8005834:	bdb0      	pop	{r4, r5, r7, pc}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	00000406 	.word	0x00000406
 800583c:	00000402 	.word	0x00000402

08005840 <HAL_PCD_EP_DB_Receive>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b089      	sub	sp, #36	@ 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	1dbb      	adds	r3, r7, #6
 8006714:	801a      	strh	r2, [r3, #0]
=======
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b089      	sub	sp, #36	@ 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	1dbb      	adds	r3, r7, #6
 800584c:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8006716:	1dbb      	adds	r3, r7, #6
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	2380      	movs	r3, #128	@ 0x80
 800671c:	01db      	lsls	r3, r3, #7
 800671e:	4013      	ands	r3, r2
 8006720:	d100      	bne.n	8006724 <HAL_PCD_EP_DB_Receive+0x1c>
 8006722:	e07d      	b.n	8006820 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2250      	movs	r2, #80	@ 0x50
 800672a:	5a9b      	ldrh	r3, [r3, r2]
 800672c:	b29b      	uxth	r3, r3
 800672e:	001a      	movs	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	18d2      	adds	r2, r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	4a7a      	ldr	r2, [pc, #488]	@ (8006928 <HAL_PCD_EP_DB_Receive+0x220>)
 8006740:	4694      	mov	ip, r2
 8006742:	4463      	add	r3, ip
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	211a      	movs	r1, #26
 8006748:	187b      	adds	r3, r7, r1
 800674a:	0592      	lsls	r2, r2, #22
 800674c:	0d92      	lsrs	r2, r2, #22
 800674e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	187b      	adds	r3, r7, r1
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d307      	bcc.n	800676c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	187b      	adds	r3, r7, r1
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	1ad2      	subs	r2, r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	619a      	str	r2, [r3, #24]
 800676a:	e002      	b.n	8006772 <HAL_PCD_EP_DB_Receive+0x6a>
=======
 800584e:	1dbb      	adds	r3, r7, #6
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4013      	ands	r3, r2
 8005858:	d100      	bne.n	800585c <HAL_PCD_EP_DB_Receive+0x1c>
 800585a:	e07d      	b.n	8005958 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2250      	movs	r2, #80	@ 0x50
 8005862:	5a9b      	ldrh	r3, [r3, r2]
 8005864:	b29b      	uxth	r3, r3
 8005866:	001a      	movs	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	18d2      	adds	r2, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	18d3      	adds	r3, r2, r3
 8005876:	4a7a      	ldr	r2, [pc, #488]	@ (8005a60 <HAL_PCD_EP_DB_Receive+0x220>)
 8005878:	4694      	mov	ip, r2
 800587a:	4463      	add	r3, ip
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	211a      	movs	r1, #26
 8005880:	187b      	adds	r3, r7, r1
 8005882:	0592      	lsls	r2, r2, #22
 8005884:	0d92      	lsrs	r2, r2, #22
 8005886:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	187b      	adds	r3, r7, r1
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d307      	bcc.n	80058a4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	187b      	adds	r3, r7, r1
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	619a      	str	r2, [r3, #24]
 80058a2:	e002      	b.n	80058aa <HAL_PCD_EP_DB_Receive+0x6a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d121      	bne.n	80067be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	001a      	movs	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	18d3      	adds	r3, r2, r3
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29a      	uxth	r2, r3
 800678c:	2018      	movs	r0, #24
 800678e:	183b      	adds	r3, r7, r0
 8006790:	4966      	ldr	r1, [pc, #408]	@ (800692c <HAL_PCD_EP_DB_Receive+0x224>)
 8006792:	400a      	ands	r2, r1
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	183b      	adds	r3, r7, r0
 8006798:	183a      	adds	r2, r7, r0
 800679a:	8812      	ldrh	r2, [r2, #0]
 800679c:	2180      	movs	r1, #128	@ 0x80
 800679e:	0189      	lsls	r1, r1, #6
 80067a0:	404a      	eors	r2, r1
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	001a      	movs	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	18d3      	adds	r3, r2, r3
 80067b2:	183a      	adds	r2, r7, r0
 80067b4:	8812      	ldrh	r2, [r2, #0]
 80067b6:	495e      	ldr	r1, [pc, #376]	@ (8006930 <HAL_PCD_EP_DB_Receive+0x228>)
 80067b8:	430a      	orrs	r2, r1
 80067ba:	b292      	uxth	r2, r2
 80067bc:	801a      	strh	r2, [r3, #0]
=======
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	001a      	movs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	2018      	movs	r0, #24
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	4966      	ldr	r1, [pc, #408]	@ (8005a64 <HAL_PCD_EP_DB_Receive+0x224>)
 80058ca:	400a      	ands	r2, r1
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	183a      	adds	r2, r7, r0
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	2180      	movs	r1, #128	@ 0x80
 80058d6:	0189      	lsls	r1, r1, #6
 80058d8:	404a      	eors	r2, r1
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	001a      	movs	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	18d3      	adds	r3, r2, r3
 80058ea:	183a      	adds	r2, r7, r0
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	495e      	ldr	r1, [pc, #376]	@ (8005a68 <HAL_PCD_EP_DB_Receive+0x228>)
 80058f0:	430a      	orrs	r2, r1
 80058f2:	b292      	uxth	r2, r2
 80058f4:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 80067be:	1dbb      	adds	r3, r7, #6
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	2240      	movs	r2, #64	@ 0x40
 80067c4:	4013      	ands	r3, r2
 80067c6:	d01a      	beq.n	80067fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	001a      	movs	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	2016      	movs	r0, #22
 80067dc:	183b      	adds	r3, r7, r0
 80067de:	4955      	ldr	r1, [pc, #340]	@ (8006934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	001a      	movs	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	18d3      	adds	r3, r2, r3
 80067f2:	183a      	adds	r2, r7, r0
 80067f4:	8812      	ldrh	r2, [r2, #0]
 80067f6:	4950      	ldr	r1, [pc, #320]	@ (8006938 <HAL_PCD_EP_DB_Receive+0x230>)
 80067f8:	430a      	orrs	r2, r1
 80067fa:	b292      	uxth	r2, r2
 80067fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80067fe:	241a      	movs	r4, #26
 8006800:	193b      	adds	r3, r7, r4
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d100      	bne.n	800680a <HAL_PCD_EP_DB_Receive+0x102>
 8006808:	e086      	b.n	8006918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	891a      	ldrh	r2, [r3, #8]
 8006816:	193b      	adds	r3, r7, r4
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	f006 fb46 	bl	800ceaa <USB_ReadPMA>
 800681e:	e07b      	b.n	8006918 <HAL_PCD_EP_DB_Receive+0x210>
=======
 80058f6:	1dbb      	adds	r3, r7, #6
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	2240      	movs	r2, #64	@ 0x40
 80058fc:	4013      	ands	r3, r2
 80058fe:	d01a      	beq.n	8005936 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	001a      	movs	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	18d3      	adds	r3, r2, r3
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29a      	uxth	r2, r3
 8005912:	2016      	movs	r0, #22
 8005914:	183b      	adds	r3, r7, r0
 8005916:	4955      	ldr	r1, [pc, #340]	@ (8005a6c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005918:	400a      	ands	r2, r1
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	001a      	movs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	183a      	adds	r2, r7, r0
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	4950      	ldr	r1, [pc, #320]	@ (8005a70 <HAL_PCD_EP_DB_Receive+0x230>)
 8005930:	430a      	orrs	r2, r1
 8005932:	b292      	uxth	r2, r2
 8005934:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005936:	241a      	movs	r4, #26
 8005938:	193b      	adds	r3, r7, r4
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d100      	bne.n	8005942 <HAL_PCD_EP_DB_Receive+0x102>
 8005940:	e086      	b.n	8005a50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	891a      	ldrh	r2, [r3, #8]
 800594e:	193b      	adds	r3, r7, r4
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	f006 fb47 	bl	800bfe4 <USB_ReadPMA>
 8005956:	e07b      	b.n	8005a50 <HAL_PCD_EP_DB_Receive+0x210>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2250      	movs	r2, #80	@ 0x50
 8006826:	5a9b      	ldrh	r3, [r3, r2]
 8006828:	b29b      	uxth	r3, r3
 800682a:	001a      	movs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	18d2      	adds	r2, r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	18d3      	adds	r3, r2, r3
 800683a:	4a40      	ldr	r2, [pc, #256]	@ (800693c <HAL_PCD_EP_DB_Receive+0x234>)
 800683c:	4694      	mov	ip, r2
 800683e:	4463      	add	r3, ip
 8006840:	881a      	ldrh	r2, [r3, #0]
 8006842:	211a      	movs	r1, #26
 8006844:	187b      	adds	r3, r7, r1
 8006846:	0592      	lsls	r2, r2, #22
 8006848:	0d92      	lsrs	r2, r2, #22
 800684a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	699a      	ldr	r2, [r3, #24]
 8006850:	187b      	adds	r3, r7, r1
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d307      	bcc.n	8006868 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	187b      	adds	r3, r7, r1
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	1ad2      	subs	r2, r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	619a      	str	r2, [r3, #24]
 8006866:	e002      	b.n	800686e <HAL_PCD_EP_DB_Receive+0x166>
=======
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2250      	movs	r2, #80	@ 0x50
 800595e:	5a9b      	ldrh	r3, [r3, r2]
 8005960:	b29b      	uxth	r3, r3
 8005962:	001a      	movs	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	18d2      	adds	r2, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	18d3      	adds	r3, r2, r3
 8005972:	4a40      	ldr	r2, [pc, #256]	@ (8005a74 <HAL_PCD_EP_DB_Receive+0x234>)
 8005974:	4694      	mov	ip, r2
 8005976:	4463      	add	r3, ip
 8005978:	881a      	ldrh	r2, [r3, #0]
 800597a:	211a      	movs	r1, #26
 800597c:	187b      	adds	r3, r7, r1
 800597e:	0592      	lsls	r2, r2, #22
 8005980:	0d92      	lsrs	r2, r2, #22
 8005982:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	187b      	adds	r3, r7, r1
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d307      	bcc.n	80059a0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	187b      	adds	r3, r7, r1
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	1ad2      	subs	r2, r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	e002      	b.n	80059a6 <HAL_PCD_EP_DB_Receive+0x166>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d121      	bne.n	80068ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	001a      	movs	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	18d3      	adds	r3, r2, r3
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29a      	uxth	r2, r3
 8006888:	201e      	movs	r0, #30
 800688a:	183b      	adds	r3, r7, r0
 800688c:	4927      	ldr	r1, [pc, #156]	@ (800692c <HAL_PCD_EP_DB_Receive+0x224>)
 800688e:	400a      	ands	r2, r1
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	183b      	adds	r3, r7, r0
 8006894:	183a      	adds	r2, r7, r0
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	2180      	movs	r1, #128	@ 0x80
 800689a:	0189      	lsls	r1, r1, #6
 800689c:	404a      	eors	r2, r1
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	001a      	movs	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	18d3      	adds	r3, r2, r3
 80068ae:	183a      	adds	r2, r7, r0
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	491f      	ldr	r1, [pc, #124]	@ (8006930 <HAL_PCD_EP_DB_Receive+0x228>)
 80068b4:	430a      	orrs	r2, r1
 80068b6:	b292      	uxth	r2, r2
 80068b8:	801a      	strh	r2, [r3, #0]
=======
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d121      	bne.n	80059f2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	001a      	movs	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	18d3      	adds	r3, r2, r3
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	201e      	movs	r0, #30
 80059c2:	183b      	adds	r3, r7, r0
 80059c4:	4927      	ldr	r1, [pc, #156]	@ (8005a64 <HAL_PCD_EP_DB_Receive+0x224>)
 80059c6:	400a      	ands	r2, r1
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	183a      	adds	r2, r7, r0
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	2180      	movs	r1, #128	@ 0x80
 80059d2:	0189      	lsls	r1, r1, #6
 80059d4:	404a      	eors	r2, r1
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	001a      	movs	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	18d3      	adds	r3, r2, r3
 80059e6:	183a      	adds	r2, r7, r0
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	491f      	ldr	r1, [pc, #124]	@ (8005a68 <HAL_PCD_EP_DB_Receive+0x228>)
 80059ec:	430a      	orrs	r2, r1
 80059ee:	b292      	uxth	r2, r2
 80059f0:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< HEAD
 80068ba:	1dbb      	adds	r3, r7, #6
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	2240      	movs	r2, #64	@ 0x40
 80068c0:	4013      	ands	r3, r2
 80068c2:	d11a      	bne.n	80068fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	001a      	movs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	18d3      	adds	r3, r2, r3
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	201c      	movs	r0, #28
 80068d8:	183b      	adds	r3, r7, r0
 80068da:	4916      	ldr	r1, [pc, #88]	@ (8006934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80068dc:	400a      	ands	r2, r1
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	001a      	movs	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	18d3      	adds	r3, r2, r3
 80068ee:	183a      	adds	r2, r7, r0
 80068f0:	8812      	ldrh	r2, [r2, #0]
 80068f2:	4911      	ldr	r1, [pc, #68]	@ (8006938 <HAL_PCD_EP_DB_Receive+0x230>)
 80068f4:	430a      	orrs	r2, r1
 80068f6:	b292      	uxth	r2, r2
 80068f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80068fa:	241a      	movs	r4, #26
 80068fc:	193b      	adds	r3, r7, r4
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6959      	ldr	r1, [r3, #20]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	895a      	ldrh	r2, [r3, #10]
 8006910:	193b      	adds	r3, r7, r4
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	f006 fac9 	bl	800ceaa <USB_ReadPMA>
=======
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2240      	movs	r2, #64	@ 0x40
 80059f8:	4013      	ands	r3, r2
 80059fa:	d11a      	bne.n	8005a32 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	001a      	movs	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	18d3      	adds	r3, r2, r3
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	201c      	movs	r0, #28
 8005a10:	183b      	adds	r3, r7, r0
 8005a12:	4916      	ldr	r1, [pc, #88]	@ (8005a6c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	183a      	adds	r2, r7, r0
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	4911      	ldr	r1, [pc, #68]	@ (8005a70 <HAL_PCD_EP_DB_Receive+0x230>)
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005a32:	241a      	movs	r4, #26
 8005a34:	193b      	adds	r3, r7, r4
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6959      	ldr	r1, [r3, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	895a      	ldrh	r2, [r3, #10]
 8005a48:	193b      	adds	r3, r7, r4
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	f006 faca 	bl	800bfe4 <USB_ReadPMA>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return count;
<<<<<<< HEAD
 8006918:	231a      	movs	r3, #26
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	881b      	ldrh	r3, [r3, #0]
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b009      	add	sp, #36	@ 0x24
 8006924:	bd90      	pop	{r4, r7, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	00000402 	.word	0x00000402
 800692c:	ffffbf8f 	.word	0xffffbf8f
 8006930:	ffff8080 	.word	0xffff8080
 8006934:	ffff8f8f 	.word	0xffff8f8f
 8006938:	ffff80c0 	.word	0xffff80c0
 800693c:	00000406 	.word	0x00000406

08006940 <HAL_PCD_EP_DB_Transmit>:
=======
 8005a50:	231a      	movs	r3, #26
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	881b      	ldrh	r3, [r3, #0]
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b009      	add	sp, #36	@ 0x24
 8005a5c:	bd90      	pop	{r4, r7, pc}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	00000402 	.word	0x00000402
 8005a64:	ffffbf8f 	.word	0xffffbf8f
 8005a68:	ffff8080 	.word	0xffff8080
 8005a6c:	ffff8f8f 	.word	0xffff8f8f
 8005a70:	ffff80c0 	.word	0xffff80c0
 8005a74:	00000406 	.word	0x00000406

08005a78 <HAL_PCD_EP_DB_Transmit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8006940:	b580      	push	{r7, lr}
 8006942:	b0a4      	sub	sp, #144	@ 0x90
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	1dbb      	adds	r3, r7, #6
 800694c:	801a      	strh	r2, [r3, #0]
=======
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b0a4      	sub	sp, #144	@ 0x90
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	1dbb      	adds	r3, r7, #6
 8005a84:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 800694e:	1dbb      	adds	r3, r7, #6
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	4013      	ands	r3, r2
 8006956:	d100      	bne.n	800695a <HAL_PCD_EP_DB_Transmit+0x1a>
 8006958:	e1e4      	b.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2250      	movs	r2, #80	@ 0x50
 8006960:	5a9b      	ldrh	r3, [r3, r2]
 8006962:	b29b      	uxth	r3, r3
 8006964:	001a      	movs	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	18d2      	adds	r2, r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	18d3      	adds	r3, r2, r3
 8006974:	4ad0      	ldr	r2, [pc, #832]	@ (8006cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006976:	4694      	mov	ip, r2
 8006978:	4463      	add	r3, ip
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	2188      	movs	r1, #136	@ 0x88
 800697e:	187b      	adds	r3, r7, r1
 8006980:	0592      	lsls	r2, r2, #22
 8006982:	0d92      	lsrs	r2, r2, #22
 8006984:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	187b      	adds	r3, r7, r1
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d907      	bls.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	187b      	adds	r3, r7, r1
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	619a      	str	r2, [r3, #24]
 80069a0:	e002      	b.n	80069a8 <HAL_PCD_EP_DB_Transmit+0x68>
=======
 8005a86:	1dbb      	adds	r3, r7, #6
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2240      	movs	r2, #64	@ 0x40
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d100      	bne.n	8005a92 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005a90:	e1e4      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2250      	movs	r2, #80	@ 0x50
 8005a98:	5a9b      	ldrh	r3, [r3, r2]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	001a      	movs	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	18d2      	adds	r2, r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	18d3      	adds	r3, r2, r3
 8005aac:	4ad0      	ldr	r2, [pc, #832]	@ (8005df0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005aae:	4694      	mov	ip, r2
 8005ab0:	4463      	add	r3, ip
 8005ab2:	881a      	ldrh	r2, [r3, #0]
 8005ab4:	2188      	movs	r1, #136	@ 0x88
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	0592      	lsls	r2, r2, #22
 8005aba:	0d92      	lsrs	r2, r2, #22
 8005abc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d907      	bls.n	8005ada <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	619a      	str	r2, [r3, #24]
 8005ad8:	e002      	b.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x68>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	619a      	str	r2, [r3, #24]
=======
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	619a      	str	r2, [r3, #24]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d000      	beq.n	80069b2 <HAL_PCD_EP_DB_Transmit+0x72>
 80069b0:	e0b5      	b.n	8006b1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d125      	bne.n	8006a06 <HAL_PCD_EP_DB_Transmit+0xc6>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2250      	movs	r2, #80	@ 0x50
 80069c6:	5a9b      	ldrh	r3, [r3, r2]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	001a      	movs	r2, r3
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	189b      	adds	r3, r3, r2
 80069d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	00da      	lsls	r2, r3, #3
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069da:	18d3      	adds	r3, r2, r3
 80069dc:	4ab6      	ldr	r2, [pc, #728]	@ (8006cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80069de:	4694      	mov	ip, r2
 80069e0:	4463      	add	r3, ip
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	059b      	lsls	r3, r3, #22
 80069ec:	0d9b      	lsrs	r3, r3, #22
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4ab0      	ldr	r2, [pc, #704]	@ (8006cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e01b      	b.n	8006a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d117      	bne.n	8006a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2250      	movs	r2, #80	@ 0x50
 8006a1a:	5a9b      	ldrh	r3, [r3, r2]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	001a      	movs	r2, r3
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00da      	lsls	r2, r3, #3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	4aa1      	ldr	r2, [pc, #644]	@ (8006cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006a32:	4694      	mov	ip, r2
 8006a34:	4463      	add	r3, ip
 8006a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d125      	bne.n	8006a98 <HAL_PCD_EP_DB_Transmit+0x158>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2250      	movs	r2, #80	@ 0x50
 8006a58:	5a9b      	ldrh	r3, [r3, r2]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	189b      	adds	r3, r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	00da      	lsls	r2, r3, #3
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	18d3      	adds	r3, r2, r3
 8006a6e:	4a94      	ldr	r2, [pc, #592]	@ (8006cc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006a70:	4694      	mov	ip, r2
 8006a72:	4463      	add	r3, ip
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	0d9b      	lsrs	r3, r3, #22
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4a8b      	ldr	r2, [pc, #556]	@ (8006cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e018      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d114      	bne.n	8006aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2250      	movs	r2, #80	@ 0x50
 8006aa6:	5a9b      	ldrh	r3, [r3, r2]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	001a      	movs	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	00da      	lsls	r2, r3, #3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	18d3      	adds	r3, r2, r3
 8006abc:	4a80      	ldr	r2, [pc, #512]	@ (8006cc0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006abe:	4694      	mov	ip, r2
 8006ac0:	4463      	add	r3, ip
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	801a      	strh	r2, [r3, #0]
=======
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d000      	beq.n	8005aea <HAL_PCD_EP_DB_Transmit+0x72>
 8005ae8:	e0b5      	b.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d125      	bne.n	8005b3e <HAL_PCD_EP_DB_Transmit+0xc6>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2250      	movs	r2, #80	@ 0x50
 8005afe:	5a9b      	ldrh	r3, [r3, r2]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	001a      	movs	r2, r3
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	00da      	lsls	r2, r3, #3
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	18d3      	adds	r3, r2, r3
 8005b14:	4ab6      	ldr	r2, [pc, #728]	@ (8005df0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005b16:	4694      	mov	ip, r2
 8005b18:	4463      	add	r3, ip
 8005b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	059b      	lsls	r3, r3, #22
 8005b24:	0d9b      	lsrs	r3, r3, #22
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4ab0      	ldr	r2, [pc, #704]	@ (8005df4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e01b      	b.n	8005b76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d117      	bne.n	8005b76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2250      	movs	r2, #80	@ 0x50
 8005b52:	5a9b      	ldrh	r3, [r3, r2]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	001a      	movs	r2, r3
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	00da      	lsls	r2, r3, #3
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	18d3      	adds	r3, r2, r3
 8005b68:	4aa1      	ldr	r2, [pc, #644]	@ (8005df0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005b6a:	4694      	mov	ip, r2
 8005b6c:	4463      	add	r3, ip
 8005b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d125      	bne.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x158>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2250      	movs	r2, #80	@ 0x50
 8005b90:	5a9b      	ldrh	r3, [r3, r2]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	001a      	movs	r2, r3
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	00da      	lsls	r2, r3, #3
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	18d3      	adds	r3, r2, r3
 8005ba6:	4a94      	ldr	r2, [pc, #592]	@ (8005df8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005ba8:	4694      	mov	ip, r2
 8005baa:	4463      	add	r3, ip
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	059b      	lsls	r3, r3, #22
 8005bb6:	0d9b      	lsrs	r3, r3, #22
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4a8b      	ldr	r2, [pc, #556]	@ (8005df4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e018      	b.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d114      	bne.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2250      	movs	r2, #80	@ 0x50
 8005bde:	5a9b      	ldrh	r3, [r3, r2]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	001a      	movs	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	18d3      	adds	r3, r2, r3
 8005bf4:	4a80      	ldr	r2, [pc, #512]	@ (8005df8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005bf6:	4694      	mov	ip, r2
 8005bf8:	4463      	add	r3, ip
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	0011      	movs	r1, r2
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f00b f818 	bl	8011b08 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ad8:	1dbb      	adds	r3, r7, #6
 8006ada:	881a      	ldrh	r2, [r3, #0]
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	01db      	lsls	r3, r3, #7
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d100      	bne.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8006ae4:	e308      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	001a      	movs	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	2016      	movs	r0, #22
 8006afa:	183b      	adds	r3, r7, r0
 8006afc:	4971      	ldr	r1, [pc, #452]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8006afe:	400a      	ands	r2, r1
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	001a      	movs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	18d3      	adds	r3, r2, r3
 8006b10:	183a      	adds	r2, r7, r0
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	496c      	ldr	r1, [pc, #432]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006b16:	430a      	orrs	r2, r1
 8006b18:	b292      	uxth	r2, r2
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e2ec      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
=======
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	0011      	movs	r1, r2
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f00b f81a 	bl	8010c44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	01db      	lsls	r3, r3, #7
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005c1c:	e308      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	001a      	movs	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	2016      	movs	r0, #22
 8005c32:	183b      	adds	r3, r7, r0
 8005c34:	4971      	ldr	r1, [pc, #452]	@ (8005dfc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	183a      	adds	r2, r7, r0
 8005c4a:	8812      	ldrh	r2, [r2, #0]
 8005c4c:	496c      	ldr	r1, [pc, #432]	@ (8005e00 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	b292      	uxth	r2, r2
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e2ec      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8006b1e:	1dbb      	adds	r3, r7, #6
 8006b20:	881a      	ldrh	r2, [r3, #0]
 8006b22:	2380      	movs	r3, #128	@ 0x80
 8006b24:	01db      	lsls	r3, r3, #7
 8006b26:	4013      	ands	r3, r2
 8006b28:	d01a      	beq.n	8006b60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	001a      	movs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	18d3      	adds	r3, r2, r3
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	208a      	movs	r0, #138	@ 0x8a
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	4960      	ldr	r1, [pc, #384]	@ (8006cc4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	18d3      	adds	r3, r2, r3
 8006b54:	183a      	adds	r2, r7, r0
 8006b56:	8812      	ldrh	r2, [r2, #0]
 8006b58:	495b      	ldr	r1, [pc, #364]	@ (8006cc8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	801a      	strh	r2, [r3, #0]
=======
 8005c56:	1dbb      	adds	r3, r7, #6
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	2380      	movs	r3, #128	@ 0x80
 8005c5c:	01db      	lsls	r3, r3, #7
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d01a      	beq.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	001a      	movs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	18d3      	adds	r3, r2, r3
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	208a      	movs	r0, #138	@ 0x8a
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	4960      	ldr	r1, [pc, #384]	@ (8005dfc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	001a      	movs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	18d3      	adds	r3, r2, r3
 8005c8c:	183a      	adds	r2, r7, r0
 8005c8e:	8812      	ldrh	r2, [r2, #0]
 8005c90:	495b      	ldr	r1, [pc, #364]	@ (8005e00 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2224      	movs	r2, #36	@ 0x24
 8006b64:	5c9b      	ldrb	r3, [r3, r2]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d000      	beq.n	8006b6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8006b6a:	e2c5      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	2188      	movs	r1, #136	@ 0x88
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	18d2      	adds	r2, r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	187b      	adds	r3, r7, r1
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	18d2      	adds	r2, r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d30c      	bcc.n	8006bb0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	218c      	movs	r1, #140	@ 0x8c
 8006b9c:	187a      	adds	r2, r7, r1
 8006b9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	187b      	adds	r3, r7, r1
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	1ad2      	subs	r2, r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	621a      	str	r2, [r3, #32]
 8006bae:	e01a      	b.n	8006be6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006bb8:	2388      	movs	r3, #136	@ 0x88
 8006bba:	18fb      	adds	r3, r7, r3
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	228c      	movs	r2, #140	@ 0x8c
 8006bc0:	18ba      	adds	r2, r7, r2
 8006bc2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5499      	strb	r1, [r3, r2]
 8006bcc:	e00b      	b.n	8006be6 <HAL_PCD_EP_DB_Transmit+0x2a6>
=======
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2224      	movs	r2, #36	@ 0x24
 8005c9c:	5c9b      	ldrb	r3, [r3, r2]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d000      	beq.n	8005ca4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005ca2:	e2c5      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	2188      	movs	r1, #136	@ 0x88
 8005caa:	187b      	adds	r3, r7, r1
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	18d2      	adds	r2, r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	18d2      	adds	r2, r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d30c      	bcc.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	218c      	movs	r1, #140	@ 0x8c
 8005cd4:	187a      	adds	r2, r7, r1
 8005cd6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	621a      	str	r2, [r3, #32]
 8005ce6:	e01a      	b.n	8005d1e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005cf0:	2388      	movs	r3, #136	@ 0x88
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	228c      	movs	r2, #140	@ 0x8c
 8005cf8:	18ba      	adds	r2, r7, r2
 8005cfa:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2224      	movs	r2, #36	@ 0x24
 8005d00:	2100      	movs	r1, #0
 8005d02:	5499      	strb	r1, [r3, r2]
 8005d04:	e00b      	b.n	8005d1e <HAL_PCD_EP_DB_Transmit+0x2a6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< HEAD
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2224      	movs	r2, #36	@ 0x24
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	228c      	movs	r2, #140	@ 0x8c
 8006bdc:	18ba      	adds	r2, r7, r2
 8006bde:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2200      	movs	r2, #0
 8006be4:	621a      	str	r2, [r3, #32]
=======
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2224      	movs	r2, #36	@ 0x24
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	228c      	movs	r2, #140	@ 0x8c
 8005d14:	18ba      	adds	r2, r7, r2
 8005d16:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d000      	beq.n	8006bf0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8006bee:	e06d      	b.n	8006ccc <HAL_PCD_EP_DB_Transmit+0x38c>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2250      	movs	r2, #80	@ 0x50
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	001a      	movs	r2, r3
 8006c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00da      	lsls	r2, r3, #3
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c10:	18d3      	adds	r3, r2, r3
 8006c12:	4a29      	ldr	r2, [pc, #164]	@ (8006cb8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006c14:	4694      	mov	ip, r2
 8006c16:	4463      	add	r3, ip
 8006c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	0d9b      	lsrs	r3, r3, #22
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	238c      	movs	r3, #140	@ 0x8c
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d108      	bne.n	8006c46 <HAL_PCD_EP_DB_Transmit+0x306>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4a20      	ldr	r2, [pc, #128]	@ (8006cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	e061      	b.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006c46:	228c      	movs	r2, #140	@ 0x8c
 8006c48:	18bb      	adds	r3, r7, r2
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c4e:	d817      	bhi.n	8006c80 <HAL_PCD_EP_DB_Transmit+0x340>
 8006c50:	18bb      	adds	r3, r7, r2
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c58:	18bb      	adds	r3, r7, r2
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d002      	beq.n	8006c68 <HAL_PCD_EP_DB_Transmit+0x328>
 8006c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c64:	3301      	adds	r3, #1
 8006c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	029b      	lsls	r3, r3, #10
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e044      	b.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006c80:	228c      	movs	r2, #140	@ 0x8c
 8006c82:	18bb      	adds	r3, r7, r2
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8a:	18bb      	adds	r3, r7, r2
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	221f      	movs	r2, #31
 8006c90:	4013      	ands	r3, r2
 8006c92:	d102      	bne.n	8006c9a <HAL_PCD_EP_DB_Transmit+0x35a>
 8006c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c96:	3b01      	subs	r3, #1
 8006c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4a03      	ldr	r2, [pc, #12]	@ (8006cbc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	e028      	b.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006cb8:	00000402 	.word	0x00000402
 8006cbc:	ffff8000 	.word	0xffff8000
 8006cc0:	00000406 	.word	0x00000406
 8006cc4:	ffff8f8f 	.word	0xffff8f8f
 8006cc8:	ffffc080 	.word	0xffffc080
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d11a      	bne.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2250      	movs	r2, #80	@ 0x50
 8006ce0:	5a9b      	ldrh	r3, [r3, r2]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	00da      	lsls	r2, r3, #3
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf4:	18d3      	adds	r3, r2, r3
 8006cf6:	4ad9      	ldr	r2, [pc, #868]	@ (800705c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006cf8:	4694      	mov	ip, r2
 8006cfa:	4463      	add	r3, ip
 8006cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cfe:	238c      	movs	r3, #140	@ 0x8c
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6959      	ldr	r1, [r3, #20]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	891a      	ldrh	r2, [r3, #8]
 8006d16:	238c      	movs	r3, #140	@ 0x8c
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f006 f87b 	bl	800ce18 <USB_WritePMA>
 8006d22:	e1e9      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
=======
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d000      	beq.n	8005d28 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005d26:	e06d      	b.n	8005e04 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2250      	movs	r2, #80	@ 0x50
 8005d34:	5a9b      	ldrh	r3, [r3, r2]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	001a      	movs	r2, r3
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	00da      	lsls	r2, r3, #3
 8005d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d48:	18d3      	adds	r3, r2, r3
 8005d4a:	4a29      	ldr	r2, [pc, #164]	@ (8005df0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005d4c:	4694      	mov	ip, r2
 8005d4e:	4463      	add	r3, ip
 8005d50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	059b      	lsls	r3, r3, #22
 8005d5a:	0d9b      	lsrs	r3, r3, #22
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	238c      	movs	r3, #140	@ 0x8c
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x306>
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4a20      	ldr	r2, [pc, #128]	@ (8005df4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e061      	b.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d7e:	228c      	movs	r2, #140	@ 0x8c
 8005d80:	18bb      	adds	r3, r7, r2
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d86:	d817      	bhi.n	8005db8 <HAL_PCD_EP_DB_Transmit+0x340>
 8005d88:	18bb      	adds	r3, r7, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d90:	18bb      	adds	r3, r7, r2
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	4013      	ands	r3, r2
 8005d98:	d002      	beq.n	8005da0 <HAL_PCD_EP_DB_Transmit+0x328>
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e044      	b.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005db8:	228c      	movs	r2, #140	@ 0x8c
 8005dba:	18bb      	adds	r3, r7, r2
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc2:	18bb      	adds	r3, r7, r2
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	221f      	movs	r2, #31
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d102      	bne.n	8005dd2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4a03      	ldr	r2, [pc, #12]	@ (8005df4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	e028      	b.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005df0:	00000402 	.word	0x00000402
 8005df4:	ffff8000 	.word	0xffff8000
 8005df8:	00000406 	.word	0x00000406
 8005dfc:	ffff8f8f 	.word	0xffff8f8f
 8005e00:	ffffc080 	.word	0xffffc080
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d11a      	bne.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2250      	movs	r2, #80	@ 0x50
 8005e18:	5a9b      	ldrh	r3, [r3, r2]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e20:	189b      	adds	r3, r3, r2
 8005e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	00da      	lsls	r2, r3, #3
 8005e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e2c:	18d3      	adds	r3, r2, r3
 8005e2e:	4ad9      	ldr	r2, [pc, #868]	@ (8006194 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005e30:	4694      	mov	ip, r2
 8005e32:	4463      	add	r3, ip
 8005e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e36:	238c      	movs	r3, #140	@ 0x8c
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6959      	ldr	r1, [r3, #20]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	891a      	ldrh	r2, [r3, #8]
 8005e4e:	238c      	movs	r3, #140	@ 0x8c
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f006 f87b 	bl	800bf50 <USB_WritePMA>
 8005e5a:	e1e9      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2250      	movs	r2, #80	@ 0x50
 8006d2a:	5a9b      	ldrh	r3, [r3, r2]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	001a      	movs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	18d2      	adds	r2, r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	18d3      	adds	r3, r2, r3
 8006d3e:	4ac8      	ldr	r2, [pc, #800]	@ (8007060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006d40:	4694      	mov	ip, r2
 8006d42:	4463      	add	r3, ip
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	2188      	movs	r1, #136	@ 0x88
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	0592      	lsls	r2, r2, #22
 8006d4c:	0d92      	lsrs	r2, r2, #22
 8006d4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d307      	bcc.n	8006d6c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	619a      	str	r2, [r3, #24]
 8006d6a:	e002      	b.n	8006d72 <HAL_PCD_EP_DB_Transmit+0x432>
=======
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2250      	movs	r2, #80	@ 0x50
 8005e62:	5a9b      	ldrh	r3, [r3, r2]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	001a      	movs	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	18d2      	adds	r2, r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	18d3      	adds	r3, r2, r3
 8005e76:	4ac8      	ldr	r2, [pc, #800]	@ (8006198 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005e78:	4694      	mov	ip, r2
 8005e7a:	4463      	add	r3, ip
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	2188      	movs	r1, #136	@ 0x88
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	0592      	lsls	r2, r2, #22
 8005e84:	0d92      	lsrs	r2, r2, #22
 8005e86:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	187b      	adds	r3, r7, r1
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d307      	bcc.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	619a      	str	r2, [r3, #24]
 8005ea2:	e002      	b.n	8005eaa <HAL_PCD_EP_DB_Transmit+0x432>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	619a      	str	r2, [r3, #24]
=======
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	619a      	str	r2, [r3, #24]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d000      	beq.n	8006d7c <HAL_PCD_EP_DB_Transmit+0x43c>
 8006d7a:	e0bb      	b.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d125      	bne.n	8006dd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2250      	movs	r2, #80	@ 0x50
 8006d90:	5a9b      	ldrh	r3, [r3, r2]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	001a      	movs	r2, r3
 8006d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d98:	189b      	adds	r3, r3, r2
 8006d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	00da      	lsls	r2, r3, #3
 8006da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006da4:	18d3      	adds	r3, r2, r3
 8006da6:	4aad      	ldr	r2, [pc, #692]	@ (800705c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006da8:	4694      	mov	ip, r2
 8006daa:	4463      	add	r3, ip
 8006dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	059b      	lsls	r3, r3, #22
 8006db6:	0d9b      	lsrs	r3, r3, #22
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	4aa7      	ldr	r2, [pc, #668]	@ (8007064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e01b      	b.n	8006e08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d117      	bne.n	8006e08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2250      	movs	r2, #80	@ 0x50
 8006de4:	5a9b      	ldrh	r3, [r3, r2]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	001a      	movs	r2, r3
 8006dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	00da      	lsls	r2, r3, #3
 8006df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df8:	18d3      	adds	r3, r2, r3
 8006dfa:	4a98      	ldr	r2, [pc, #608]	@ (800705c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8006dfc:	4694      	mov	ip, r2
 8006dfe:	4463      	add	r3, ip
 8006e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e04:	2200      	movs	r2, #0
 8006e06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d12b      	bne.n	8006e6e <HAL_PCD_EP_DB_Transmit+0x52e>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2250      	movs	r2, #80	@ 0x50
 8006e22:	5a9b      	ldrh	r3, [r3, r2]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	001a      	movs	r2, r3
 8006e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	00da      	lsls	r2, r3, #3
 8006e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e36:	18d3      	adds	r3, r2, r3
 8006e38:	4a89      	ldr	r2, [pc, #548]	@ (8007060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006e3a:	4694      	mov	ip, r2
 8006e3c:	4463      	add	r3, ip
 8006e3e:	2184      	movs	r1, #132	@ 0x84
 8006e40:	187a      	adds	r2, r7, r1
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	059b      	lsls	r3, r3, #22
 8006e4e:	0d9b      	lsrs	r3, r3, #22
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	187b      	adds	r3, r7, r1
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4a80      	ldr	r2, [pc, #512]	@ (8007064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	187b      	adds	r3, r7, r1
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e018      	b.n	8006ea0 <HAL_PCD_EP_DB_Transmit+0x560>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d114      	bne.n	8006ea0 <HAL_PCD_EP_DB_Transmit+0x560>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2250      	movs	r2, #80	@ 0x50
 8006e7c:	5a9b      	ldrh	r3, [r3, r2]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	001a      	movs	r2, r3
 8006e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e84:	189b      	adds	r3, r3, r2
 8006e86:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	00da      	lsls	r2, r3, #3
 8006e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e90:	18d3      	adds	r3, r2, r3
 8006e92:	4a73      	ldr	r2, [pc, #460]	@ (8007060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006e94:	4694      	mov	ip, r2
 8006e96:	4463      	add	r3, ip
 8006e98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	801a      	strh	r2, [r3, #0]
=======
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d000      	beq.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005eb2:	e0bb      	b.n	800602c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d125      	bne.n	8005f08 <HAL_PCD_EP_DB_Transmit+0x490>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2250      	movs	r2, #80	@ 0x50
 8005ec8:	5a9b      	ldrh	r3, [r3, r2]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	001a      	movs	r2, r3
 8005ece:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ed0:	189b      	adds	r3, r3, r2
 8005ed2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005edc:	18d3      	adds	r3, r2, r3
 8005ede:	4aad      	ldr	r2, [pc, #692]	@ (8006194 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005ee0:	4694      	mov	ip, r2
 8005ee2:	4463      	add	r3, ip
 8005ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	0d9b      	lsrs	r3, r3, #22
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4aa7      	ldr	r2, [pc, #668]	@ (800619c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e01b      	b.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d117      	bne.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2250      	movs	r2, #80	@ 0x50
 8005f1c:	5a9b      	ldrh	r3, [r3, r2]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	001a      	movs	r2, r3
 8005f22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	00da      	lsls	r2, r3, #3
 8005f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	4a98      	ldr	r2, [pc, #608]	@ (8006194 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005f34:	4694      	mov	ip, r2
 8005f36:	4463      	add	r3, ip
 8005f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d12b      	bne.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x52e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2250      	movs	r2, #80	@ 0x50
 8005f5a:	5a9b      	ldrh	r3, [r3, r2]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	001a      	movs	r2, r3
 8005f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6e:	18d3      	adds	r3, r2, r3
 8005f70:	4a89      	ldr	r2, [pc, #548]	@ (8006198 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005f72:	4694      	mov	ip, r2
 8005f74:	4463      	add	r3, ip
 8005f76:	2184      	movs	r1, #132	@ 0x84
 8005f78:	187a      	adds	r2, r7, r1
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	187b      	adds	r3, r7, r1
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	059b      	lsls	r3, r3, #22
 8005f86:	0d9b      	lsrs	r3, r3, #22
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	187b      	adds	r3, r7, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4a80      	ldr	r2, [pc, #512]	@ (800619c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e018      	b.n	8005fd8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d114      	bne.n	8005fd8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2250      	movs	r2, #80	@ 0x50
 8005fb4:	5a9b      	ldrh	r3, [r3, r2]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	001a      	movs	r2, r3
 8005fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbc:	189b      	adds	r3, r3, r2
 8005fbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	00da      	lsls	r2, r3, #3
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	4a73      	ldr	r2, [pc, #460]	@ (8006198 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005fcc:	4694      	mov	ip, r2
 8005fce:	4463      	add	r3, ip
 8005fd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	0011      	movs	r1, r2
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f00a fe2d 	bl	8011b08 <HAL_PCD_DataInStageCallback>
=======
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0011      	movs	r1, r2
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f00a fe2f 	bl	8010c44 <HAL_PCD_DataInStageCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 8006eae:	1dbb      	adds	r3, r7, #6
 8006eb0:	881a      	ldrh	r2, [r3, #0]
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	01db      	lsls	r3, r3, #7
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d000      	beq.n	8006ebc <HAL_PCD_EP_DB_Transmit+0x57c>
 8006eba:	e11d      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	001a      	movs	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	18d3      	adds	r3, r2, r3
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	2082      	movs	r0, #130	@ 0x82
 8006ed0:	183b      	adds	r3, r7, r0
 8006ed2:	4965      	ldr	r1, [pc, #404]	@ (8007068 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006ed4:	400a      	ands	r2, r1
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	001a      	movs	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	18d3      	adds	r3, r2, r3
 8006ee6:	183a      	adds	r2, r7, r0
 8006ee8:	8812      	ldrh	r2, [r2, #0]
 8006eea:	4960      	ldr	r1, [pc, #384]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006eec:	430a      	orrs	r2, r1
 8006eee:	b292      	uxth	r2, r2
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e101      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
=======
 8005fe6:	1dbb      	adds	r3, r7, #6
 8005fe8:	881a      	ldrh	r2, [r3, #0]
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d000      	beq.n	8005ff4 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005ff2:	e11d      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29a      	uxth	r2, r3
 8006006:	2082      	movs	r0, #130	@ 0x82
 8006008:	183b      	adds	r3, r7, r0
 800600a:	4965      	ldr	r1, [pc, #404]	@ (80061a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800600c:	400a      	ands	r2, r1
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	001a      	movs	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	18d3      	adds	r3, r2, r3
 800601e:	183a      	adds	r2, r7, r0
 8006020:	8812      	ldrh	r2, [r2, #0]
 8006022:	4960      	ldr	r1, [pc, #384]	@ (80061a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006024:	430a      	orrs	r2, r1
 8006026:	b292      	uxth	r2, r2
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e101      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 8006ef4:	1dbb      	adds	r3, r7, #6
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	4013      	ands	r3, r2
 8006efe:	d11a      	bne.n	8006f36 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	001a      	movs	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	18d3      	adds	r3, r2, r3
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	204e      	movs	r0, #78	@ 0x4e
 8006f14:	183b      	adds	r3, r7, r0
 8006f16:	4954      	ldr	r1, [pc, #336]	@ (8007068 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006f18:	400a      	ands	r2, r1
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	001a      	movs	r2, r3
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	183a      	adds	r2, r7, r0
 8006f2c:	8812      	ldrh	r2, [r2, #0]
 8006f2e:	494f      	ldr	r1, [pc, #316]	@ (800706c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006f30:	430a      	orrs	r2, r1
 8006f32:	b292      	uxth	r2, r2
 8006f34:	801a      	strh	r2, [r3, #0]
=======
 800602c:	1dbb      	adds	r3, r7, #6
 800602e:	881a      	ldrh	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	4013      	ands	r3, r2
 8006036:	d11a      	bne.n	800606e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	001a      	movs	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29a      	uxth	r2, r3
 800604a:	204e      	movs	r0, #78	@ 0x4e
 800604c:	183b      	adds	r3, r7, r0
 800604e:	4954      	ldr	r1, [pc, #336]	@ (80061a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006050:	400a      	ands	r2, r1
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	001a      	movs	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	18d3      	adds	r3, r2, r3
 8006062:	183a      	adds	r2, r7, r0
 8006064:	8812      	ldrh	r2, [r2, #0]
 8006066:	494f      	ldr	r1, [pc, #316]	@ (80061a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006068:	430a      	orrs	r2, r1
 800606a:	b292      	uxth	r2, r2
 800606c:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2224      	movs	r2, #36	@ 0x24
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d000      	beq.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x602>
 8006f40:	e0da      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	2188      	movs	r1, #136	@ 0x88
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	18d2      	adds	r2, r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	69da      	ldr	r2, [r3, #28]
 8006f56:	187b      	adds	r3, r7, r1
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	18d2      	adds	r2, r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d30c      	bcc.n	8006f86 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	218c      	movs	r1, #140	@ 0x8c
 8006f72:	187a      	adds	r2, r7, r1
 8006f74:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	621a      	str	r2, [r3, #32]
 8006f84:	e01a      	b.n	8006fbc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8006f8e:	2388      	movs	r3, #136	@ 0x88
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	228c      	movs	r2, #140	@ 0x8c
 8006f96:	18ba      	adds	r2, r7, r2
 8006f98:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2224      	movs	r2, #36	@ 0x24
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	5499      	strb	r1, [r3, r2]
 8006fa2:	e00b      	b.n	8006fbc <HAL_PCD_EP_DB_Transmit+0x67c>
=======
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2224      	movs	r2, #36	@ 0x24
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d000      	beq.n	800607a <HAL_PCD_EP_DB_Transmit+0x602>
 8006078:	e0da      	b.n	8006230 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	2188      	movs	r1, #136	@ 0x88
 8006080:	187b      	adds	r3, r7, r1
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	18d2      	adds	r2, r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	187b      	adds	r3, r7, r1
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	18d2      	adds	r2, r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d30c      	bcc.n	80060be <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	218c      	movs	r1, #140	@ 0x8c
 80060aa:	187a      	adds	r2, r7, r1
 80060ac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	187b      	adds	r3, r7, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	621a      	str	r2, [r3, #32]
 80060bc:	e01a      	b.n	80060f4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80060c6:	2388      	movs	r3, #136	@ 0x88
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	228c      	movs	r2, #140	@ 0x8c
 80060ce:	18ba      	adds	r2, r7, r2
 80060d0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2224      	movs	r2, #36	@ 0x24
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]
 80060da:	e00b      	b.n	80060f4 <HAL_PCD_EP_DB_Transmit+0x67c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	228c      	movs	r2, #140	@ 0x8c
 8006faa:	18ba      	adds	r2, r7, r2
 8006fac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2224      	movs	r2, #36	@ 0x24
 8006fb8:	2100      	movs	r1, #0
 8006fba:	5499      	strb	r1, [r3, r2]
=======
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	228c      	movs	r2, #140	@ 0x8c
 80060e2:	18ba      	adds	r2, r7, r2
 80060e4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2224      	movs	r2, #36	@ 0x24
 80060f0:	2100      	movs	r1, #0
 80060f2:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d000      	beq.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x68c>
 8006fca:	e06d      	b.n	80070a8 <HAL_PCD_EP_DB_Transmit+0x768>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2250      	movs	r2, #80	@ 0x50
 8006fd8:	5a9b      	ldrh	r3, [r3, r2]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	001a      	movs	r2, r3
 8006fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe0:	189b      	adds	r3, r3, r2
 8006fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	00da      	lsls	r2, r3, #3
 8006fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fec:	18d3      	adds	r3, r2, r3
 8006fee:	4a1c      	ldr	r2, [pc, #112]	@ (8007060 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006ff0:	4694      	mov	ip, r2
 8006ff2:	4463      	add	r3, ip
 8006ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	059b      	lsls	r3, r3, #22
 8006ffe:	0d9b      	lsrs	r3, r3, #22
 8007000:	b29a      	uxth	r2, r3
 8007002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	238c      	movs	r3, #140	@ 0x8c
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8007010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	4a13      	ldr	r2, [pc, #76]	@ (8007064 <HAL_PCD_EP_DB_Transmit+0x724>)
 8007018:	4313      	orrs	r3, r2
 800701a:	b29a      	uxth	r2, r3
 800701c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e05e      	b.n	80070e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007022:	228c      	movs	r2, #140	@ 0x8c
 8007024:	18bb      	adds	r3, r7, r2
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b3e      	cmp	r3, #62	@ 0x3e
 800702a:	d821      	bhi.n	8007070 <HAL_PCD_EP_DB_Transmit+0x730>
 800702c:	18bb      	adds	r3, r7, r2
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007034:	18bb      	adds	r3, r7, r2
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2201      	movs	r2, #1
 800703a:	4013      	ands	r3, r2
 800703c:	d002      	beq.n	8007044 <HAL_PCD_EP_DB_Transmit+0x704>
 800703e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007040:	3301      	adds	r3, #1
 8007042:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29a      	uxth	r2, r3
 800704a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800704c:	b29b      	uxth	r3, r3
 800704e:	029b      	lsls	r3, r3, #10
 8007050:	b29b      	uxth	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b29a      	uxth	r2, r3
 8007056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	e041      	b.n	80070e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800705c:	00000402 	.word	0x00000402
 8007060:	00000406 	.word	0x00000406
 8007064:	ffff8000 	.word	0xffff8000
 8007068:	ffff8f8f 	.word	0xffff8f8f
 800706c:	ffffc080 	.word	0xffffc080
 8007070:	228c      	movs	r2, #140	@ 0x8c
 8007072:	18bb      	adds	r3, r7, r2
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800707a:	18bb      	adds	r3, r7, r2
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	221f      	movs	r2, #31
 8007080:	4013      	ands	r3, r2
 8007082:	d102      	bne.n	800708a <HAL_PCD_EP_DB_Transmit+0x74a>
 8007084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007086:	3b01      	subs	r3, #1
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29a      	uxth	r2, r3
 8007090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	4a2c      	ldr	r2, [pc, #176]	@ (8007150 <HAL_PCD_EP_DB_Transmit+0x810>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e01b      	b.n	80070e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d117      	bne.n	80070e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2250      	movs	r2, #80	@ 0x50
 80070b6:	5a9b      	ldrh	r3, [r3, r2]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	001a      	movs	r2, r3
 80070bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070be:	189b      	adds	r3, r3, r2
 80070c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	00da      	lsls	r2, r3, #3
 80070c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ca:	18d3      	adds	r3, r2, r3
 80070cc:	4a21      	ldr	r2, [pc, #132]	@ (8007154 <HAL_PCD_EP_DB_Transmit+0x814>)
 80070ce:	4694      	mov	ip, r2
 80070d0:	4463      	add	r3, ip
 80070d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070d4:	238c      	movs	r3, #140	@ 0x8c
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6959      	ldr	r1, [r3, #20]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	895a      	ldrh	r2, [r3, #10]
 80070ec:	238c      	movs	r3, #140	@ 0x8c
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f005 fe90 	bl	800ce18 <USB_WritePMA>
=======
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d000      	beq.n	8006104 <HAL_PCD_EP_DB_Transmit+0x68c>
 8006102:	e06d      	b.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x768>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2250      	movs	r2, #80	@ 0x50
 8006110:	5a9b      	ldrh	r3, [r3, r2]
 8006112:	b29b      	uxth	r3, r3
 8006114:	001a      	movs	r2, r3
 8006116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006118:	189b      	adds	r3, r3, r2
 800611a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	00da      	lsls	r2, r3, #3
 8006122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006124:	18d3      	adds	r3, r2, r3
 8006126:	4a1c      	ldr	r2, [pc, #112]	@ (8006198 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006128:	4694      	mov	ip, r2
 800612a:	4463      	add	r3, ip
 800612c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800612e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	0d9b      	lsrs	r3, r3, #22
 8006138:	b29a      	uxth	r2, r3
 800613a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	238c      	movs	r3, #140	@ 0x8c
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d108      	bne.n	800615a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8006148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	4a13      	ldr	r2, [pc, #76]	@ (800619c <HAL_PCD_EP_DB_Transmit+0x724>)
 8006150:	4313      	orrs	r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e05e      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800615a:	228c      	movs	r2, #140	@ 0x8c
 800615c:	18bb      	adds	r3, r7, r2
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b3e      	cmp	r3, #62	@ 0x3e
 8006162:	d821      	bhi.n	80061a8 <HAL_PCD_EP_DB_Transmit+0x730>
 8006164:	18bb      	adds	r3, r7, r2
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800616c:	18bb      	adds	r3, r7, r2
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	4013      	ands	r3, r2
 8006174:	d002      	beq.n	800617c <HAL_PCD_EP_DB_Transmit+0x704>
 8006176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006178:	3301      	adds	r3, #1
 800617a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800617c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e041      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006194:	00000402 	.word	0x00000402
 8006198:	00000406 	.word	0x00000406
 800619c:	ffff8000 	.word	0xffff8000
 80061a0:	ffff8f8f 	.word	0xffff8f8f
 80061a4:	ffffc080 	.word	0xffffc080
 80061a8:	228c      	movs	r2, #140	@ 0x8c
 80061aa:	18bb      	adds	r3, r7, r2
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b2:	18bb      	adds	r3, r7, r2
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	221f      	movs	r2, #31
 80061b8:	4013      	ands	r3, r2
 80061ba:	d102      	bne.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x74a>
 80061bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061be:	3b01      	subs	r3, #1
 80061c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	029b      	lsls	r3, r3, #10
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <HAL_PCD_EP_DB_Transmit+0x810>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e01b      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d117      	bne.n	8006218 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2250      	movs	r2, #80	@ 0x50
 80061ee:	5a9b      	ldrh	r3, [r3, r2]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	001a      	movs	r2, r3
 80061f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	00da      	lsls	r2, r3, #3
 8006200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	4a21      	ldr	r2, [pc, #132]	@ (800628c <HAL_PCD_EP_DB_Transmit+0x814>)
 8006206:	4694      	mov	ip, r2
 8006208:	4463      	add	r3, ip
 800620a:	653b      	str	r3, [r7, #80]	@ 0x50
 800620c:	238c      	movs	r3, #140	@ 0x8c
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006216:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6959      	ldr	r1, [r3, #20]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	895a      	ldrh	r2, [r3, #10]
 8006224:	238c      	movs	r3, #140	@ 0x8c
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f005 fe90 	bl	800bf50 <USB_WritePMA>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	001a      	movs	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	18d3      	adds	r3, r2, r3
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	2014      	movs	r0, #20
 800710c:	183b      	adds	r3, r7, r0
 800710e:	4912      	ldr	r1, [pc, #72]	@ (8007158 <HAL_PCD_EP_DB_Transmit+0x818>)
 8007110:	400a      	ands	r2, r1
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	183b      	adds	r3, r7, r0
 8007116:	183a      	adds	r2, r7, r0
 8007118:	8812      	ldrh	r2, [r2, #0]
 800711a:	2110      	movs	r1, #16
 800711c:	404a      	eors	r2, r1
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	183b      	adds	r3, r7, r0
 8007122:	183a      	adds	r2, r7, r0
 8007124:	8812      	ldrh	r2, [r2, #0]
 8007126:	2120      	movs	r1, #32
 8007128:	404a      	eors	r2, r1
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	001a      	movs	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	18d3      	adds	r3, r2, r3
 800713a:	183a      	adds	r2, r7, r0
 800713c:	8812      	ldrh	r2, [r2, #0]
 800713e:	4907      	ldr	r1, [pc, #28]	@ (800715c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8007140:	430a      	orrs	r2, r1
 8007142:	b292      	uxth	r2, r2
 8007144:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	0018      	movs	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	b024      	add	sp, #144	@ 0x90
 800714e:	bd80      	pop	{r7, pc}
 8007150:	ffff8000 	.word	0xffff8000
 8007154:	00000406 	.word	0x00000406
 8007158:	ffff8fbf 	.word	0xffff8fbf
 800715c:	ffff8080 	.word	0xffff8080

08007160 <HAL_PCDEx_PMAConfig>:
=======
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	001a      	movs	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	18d3      	adds	r3, r2, r3
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	2014      	movs	r0, #20
 8006244:	183b      	adds	r3, r7, r0
 8006246:	4912      	ldr	r1, [pc, #72]	@ (8006290 <HAL_PCD_EP_DB_Transmit+0x818>)
 8006248:	400a      	ands	r2, r1
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	183b      	adds	r3, r7, r0
 800624e:	183a      	adds	r2, r7, r0
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	2110      	movs	r1, #16
 8006254:	404a      	eors	r2, r1
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	183b      	adds	r3, r7, r0
 800625a:	183a      	adds	r2, r7, r0
 800625c:	8812      	ldrh	r2, [r2, #0]
 800625e:	2120      	movs	r1, #32
 8006260:	404a      	eors	r2, r1
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	001a      	movs	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	183a      	adds	r2, r7, r0
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	4907      	ldr	r1, [pc, #28]	@ (8006294 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8006278:	430a      	orrs	r2, r1
 800627a:	b292      	uxth	r2, r2
 800627c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b024      	add	sp, #144	@ 0x90
 8006286:	bd80      	pop	{r7, pc}
 8006288:	ffff8000 	.word	0xffff8000
 800628c:	00000406 	.word	0x00000406
 8006290:	ffff8fbf 	.word	0xffff8fbf
 8006294:	ffff8080 	.word	0xffff8080

08006298 <HAL_PCDEx_PMAConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< HEAD
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	0008      	movs	r0, r1
 800716a:	0011      	movs	r1, r2
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	240a      	movs	r4, #10
 8007170:	193b      	adds	r3, r7, r4
 8007172:	1c02      	adds	r2, r0, #0
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	2308      	movs	r3, #8
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	1c0a      	adds	r2, r1, #0
 800717c:	801a      	strh	r2, [r3, #0]
=======
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	0008      	movs	r0, r1
 80062a2:	0011      	movs	r1, r2
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	240a      	movs	r4, #10
 80062a8:	193b      	adds	r3, r7, r4
 80062aa:	1c02      	adds	r2, r0, #0
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	2308      	movs	r3, #8
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	1c0a      	adds	r2, r1, #0
 80062b4:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 800717e:	0021      	movs	r1, r4
 8007180:	187b      	adds	r3, r7, r1
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	2280      	movs	r2, #128	@ 0x80
 8007186:	4013      	ands	r3, r2
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718e:	187b      	adds	r3, r7, r1
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	2207      	movs	r2, #7
 8007194:	401a      	ands	r2, r3
 8007196:	0013      	movs	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	189b      	adds	r3, r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	3310      	adds	r3, #16
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	18d3      	adds	r3, r2, r3
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e00b      	b.n	80071c0 <HAL_PCDEx_PMAConfig+0x60>
=======
 80062b6:	0021      	movs	r1, r4
 80062b8:	187b      	adds	r3, r7, r1
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	2280      	movs	r2, #128	@ 0x80
 80062be:	4013      	ands	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c6:	187b      	adds	r3, r7, r1
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	2207      	movs	r2, #7
 80062cc:	401a      	ands	r2, r3
 80062ce:	0013      	movs	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	3310      	adds	r3, #16
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e00b      	b.n	80062f8 <HAL_PCDEx_PMAConfig+0x60>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 80071a8:	230a      	movs	r3, #10
 80071aa:	18fb      	adds	r3, r7, r3
 80071ac:	881a      	ldrh	r2, [r3, #0]
 80071ae:	0013      	movs	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	189b      	adds	r3, r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	3351      	adds	r3, #81	@ 0x51
 80071b8:	33ff      	adds	r3, #255	@ 0xff
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	18d3      	adds	r3, r2, r3
 80071be:	617b      	str	r3, [r7, #20]
=======
 80062e0:	230a      	movs	r3, #10
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	0013      	movs	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	3351      	adds	r3, #81	@ 0x51
 80062f0:	33ff      	adds	r3, #255	@ 0xff
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< HEAD
 80071c0:	2308      	movs	r3, #8
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	80da      	strh	r2, [r3, #6]
 80071d8:	e00b      	b.n	80071f2 <HAL_PCDEx_PMAConfig+0x92>
=======
 80062f8:	2308      	movs	r3, #8
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	b29a      	uxth	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	80da      	strh	r2, [r3, #6]
 8006310:	e00b      	b.n	800632a <HAL_PCDEx_PMAConfig+0x92>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< HEAD
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2201      	movs	r2, #1
 80071de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	815a      	strh	r2, [r3, #10]
=======
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2201      	movs	r2, #1
 8006316:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	b29a      	uxth	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	b29a      	uxth	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	815a      	strh	r2, [r3, #10]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b007      	add	sp, #28
 80071fa:	bd90      	pop	{r4, r7, pc}

080071fc <HAL_PCDEx_ActivateLPM>:
=======
 800632a:	2300      	movs	r3, #0
}
 800632c:	0018      	movs	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	b007      	add	sp, #28
 8006332:	bd90      	pop	{r4, r7, pc}

08006334 <HAL_PCDEx_ActivateLPM>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	23b4      	movs	r3, #180	@ 0xb4
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	2101      	movs	r1, #1
 8007212:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	23b2      	movs	r3, #178	@ 0xb2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	2100      	movs	r1, #0
 800721c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2254      	movs	r2, #84	@ 0x54
 8007222:	5a9b      	ldrh	r3, [r3, r2]
 8007224:	b29b      	uxth	r3, r3
 8007226:	2201      	movs	r2, #1
 8007228:	4313      	orrs	r3, r2
 800722a:	b299      	uxth	r1, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2254      	movs	r2, #84	@ 0x54
 8007230:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2254      	movs	r2, #84	@ 0x54
 8007236:	5a9b      	ldrh	r3, [r3, r2]
 8007238:	b29b      	uxth	r3, r3
 800723a:	2202      	movs	r2, #2
 800723c:	4313      	orrs	r3, r2
 800723e:	b299      	uxth	r1, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2254      	movs	r2, #84	@ 0x54
 8007244:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCDEx_LPM_Callback>:
=======
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	23b4      	movs	r3, #180	@ 0xb4
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	2101      	movs	r1, #1
 800634a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	23b2      	movs	r3, #178	@ 0xb2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	2100      	movs	r1, #0
 8006354:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2254      	movs	r2, #84	@ 0x54
 800635a:	5a9b      	ldrh	r3, [r3, r2]
 800635c:	b29b      	uxth	r3, r3
 800635e:	2201      	movs	r2, #1
 8006360:	4313      	orrs	r3, r2
 8006362:	b299      	uxth	r1, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2254      	movs	r2, #84	@ 0x54
 8006368:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2254      	movs	r2, #84	@ 0x54
 800636e:	5a9b      	ldrh	r3, [r3, r2]
 8006370:	b29b      	uxth	r3, r3
 8006372:	2202      	movs	r2, #2
 8006374:	4313      	orrs	r3, r2
 8006376:	b299      	uxth	r1, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2254      	movs	r2, #84	@ 0x54
 800637c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	0018      	movs	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	b004      	add	sp, #16
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_PCDEx_LPM_Callback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	000a      	movs	r2, r1
 800725a:	1cfb      	adds	r3, r7, #3
 800725c:	701a      	strb	r2, [r3, #0]
=======
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	000a      	movs	r2, r1
 8006392:	1cfb      	adds	r3, r7, #3
 8006394:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800725e:	46c0      	nop			@ (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	b002      	add	sp, #8
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <HAL_RCC_OscConfig>:
=======
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_RCC_OscConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
=======
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f000 fb76 	bl	8007968 <HAL_RCC_OscConfig+0x700>
=======
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f000 fb76 	bl	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2201      	movs	r2, #1
 8007282:	4013      	ands	r3, r2
 8007284:	d100      	bne.n	8007288 <HAL_RCC_OscConfig+0x20>
 8007286:	e08e      	b.n	80073a6 <HAL_RCC_OscConfig+0x13e>
=======
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	4013      	ands	r3, r2
 80063bc:	d100      	bne.n	80063c0 <HAL_RCC_OscConfig+0x20>
 80063be:	e08e      	b.n	80064de <HAL_RCC_OscConfig+0x13e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
<<<<<<< HEAD
 8007288:	4bc5      	ldr	r3, [pc, #788]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	220c      	movs	r2, #12
 800728e:	4013      	ands	r3, r2
 8007290:	2b04      	cmp	r3, #4
 8007292:	d00e      	beq.n	80072b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007294:	4bc2      	ldr	r3, [pc, #776]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	220c      	movs	r2, #12
 800729a:	4013      	ands	r3, r2
 800729c:	2b08      	cmp	r3, #8
 800729e:	d117      	bne.n	80072d0 <HAL_RCC_OscConfig+0x68>
 80072a0:	4bbf      	ldr	r3, [pc, #764]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	23c0      	movs	r3, #192	@ 0xc0
 80072a6:	025b      	lsls	r3, r3, #9
 80072a8:	401a      	ands	r2, r3
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	025b      	lsls	r3, r3, #9
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d10e      	bne.n	80072d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b2:	4bbb      	ldr	r3, [pc, #748]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	2380      	movs	r3, #128	@ 0x80
 80072b8:	029b      	lsls	r3, r3, #10
 80072ba:	4013      	ands	r3, r2
 80072bc:	d100      	bne.n	80072c0 <HAL_RCC_OscConfig+0x58>
 80072be:	e071      	b.n	80073a4 <HAL_RCC_OscConfig+0x13c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d000      	beq.n	80072ca <HAL_RCC_OscConfig+0x62>
 80072c8:	e06c      	b.n	80073a4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f000 fb4c 	bl	8007968 <HAL_RCC_OscConfig+0x700>
=======
 80063c0:	4bc5      	ldr	r3, [pc, #788]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	220c      	movs	r2, #12
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d00e      	beq.n	80063ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063cc:	4bc2      	ldr	r3, [pc, #776]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	220c      	movs	r2, #12
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d117      	bne.n	8006408 <HAL_RCC_OscConfig+0x68>
 80063d8:	4bbf      	ldr	r3, [pc, #764]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	23c0      	movs	r3, #192	@ 0xc0
 80063de:	025b      	lsls	r3, r3, #9
 80063e0:	401a      	ands	r2, r3
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	025b      	lsls	r3, r3, #9
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d10e      	bne.n	8006408 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ea:	4bbb      	ldr	r3, [pc, #748]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	4013      	ands	r3, r2
 80063f4:	d100      	bne.n	80063f8 <HAL_RCC_OscConfig+0x58>
 80063f6:	e071      	b.n	80064dc <HAL_RCC_OscConfig+0x13c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d000      	beq.n	8006402 <HAL_RCC_OscConfig+0x62>
 8006400:	e06c      	b.n	80064dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f000 fb4c 	bl	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d107      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80>
 80072d8:	4bb1      	ldr	r3, [pc, #708]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4bb0      	ldr	r3, [pc, #704]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072de:	2180      	movs	r1, #128	@ 0x80
 80072e0:	0249      	lsls	r1, r1, #9
 80072e2:	430a      	orrs	r2, r1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e02f      	b.n	8007348 <HAL_RCC_OscConfig+0xe0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10c      	bne.n	800730a <HAL_RCC_OscConfig+0xa2>
 80072f0:	4bab      	ldr	r3, [pc, #684]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4baa      	ldr	r3, [pc, #680]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072f6:	49ab      	ldr	r1, [pc, #684]	@ (80075a4 <HAL_RCC_OscConfig+0x33c>)
 80072f8:	400a      	ands	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	4ba8      	ldr	r3, [pc, #672]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4ba7      	ldr	r3, [pc, #668]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007302:	49a9      	ldr	r1, [pc, #676]	@ (80075a8 <HAL_RCC_OscConfig+0x340>)
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e01e      	b.n	8007348 <HAL_RCC_OscConfig+0xe0>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b05      	cmp	r3, #5
 8007310:	d10e      	bne.n	8007330 <HAL_RCC_OscConfig+0xc8>
 8007312:	4ba3      	ldr	r3, [pc, #652]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4ba2      	ldr	r3, [pc, #648]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007318:	2180      	movs	r1, #128	@ 0x80
 800731a:	02c9      	lsls	r1, r1, #11
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	4b9f      	ldr	r3, [pc, #636]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b9e      	ldr	r3, [pc, #632]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	0249      	lsls	r1, r1, #9
 800732a:	430a      	orrs	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e00b      	b.n	8007348 <HAL_RCC_OscConfig+0xe0>
 8007330:	4b9b      	ldr	r3, [pc, #620]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b9a      	ldr	r3, [pc, #616]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007336:	499b      	ldr	r1, [pc, #620]	@ (80075a4 <HAL_RCC_OscConfig+0x33c>)
 8007338:	400a      	ands	r2, r1
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	4b98      	ldr	r3, [pc, #608]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	4b97      	ldr	r3, [pc, #604]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007342:	4999      	ldr	r1, [pc, #612]	@ (80075a8 <HAL_RCC_OscConfig+0x340>)
 8007344:	400a      	ands	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
=======
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d107      	bne.n	8006420 <HAL_RCC_OscConfig+0x80>
 8006410:	4bb1      	ldr	r3, [pc, #708]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4bb0      	ldr	r3, [pc, #704]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006416:	2180      	movs	r1, #128	@ 0x80
 8006418:	0249      	lsls	r1, r1, #9
 800641a:	430a      	orrs	r2, r1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e02f      	b.n	8006480 <HAL_RCC_OscConfig+0xe0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10c      	bne.n	8006442 <HAL_RCC_OscConfig+0xa2>
 8006428:	4bab      	ldr	r3, [pc, #684]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4baa      	ldr	r3, [pc, #680]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800642e:	49ab      	ldr	r1, [pc, #684]	@ (80066dc <HAL_RCC_OscConfig+0x33c>)
 8006430:	400a      	ands	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	4ba8      	ldr	r3, [pc, #672]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4ba7      	ldr	r3, [pc, #668]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800643a:	49a9      	ldr	r1, [pc, #676]	@ (80066e0 <HAL_RCC_OscConfig+0x340>)
 800643c:	400a      	ands	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e01e      	b.n	8006480 <HAL_RCC_OscConfig+0xe0>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b05      	cmp	r3, #5
 8006448:	d10e      	bne.n	8006468 <HAL_RCC_OscConfig+0xc8>
 800644a:	4ba3      	ldr	r3, [pc, #652]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4ba2      	ldr	r3, [pc, #648]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006450:	2180      	movs	r1, #128	@ 0x80
 8006452:	02c9      	lsls	r1, r1, #11
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	4b9f      	ldr	r3, [pc, #636]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b9e      	ldr	r3, [pc, #632]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800645e:	2180      	movs	r1, #128	@ 0x80
 8006460:	0249      	lsls	r1, r1, #9
 8006462:	430a      	orrs	r2, r1
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e00b      	b.n	8006480 <HAL_RCC_OscConfig+0xe0>
 8006468:	4b9b      	ldr	r3, [pc, #620]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b9a      	ldr	r3, [pc, #616]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800646e:	499b      	ldr	r1, [pc, #620]	@ (80066dc <HAL_RCC_OscConfig+0x33c>)
 8006470:	400a      	ands	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	4b98      	ldr	r3, [pc, #608]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b97      	ldr	r3, [pc, #604]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800647a:	4999      	ldr	r1, [pc, #612]	@ (80066e0 <HAL_RCC_OscConfig+0x340>)
 800647c:	400a      	ands	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d014      	beq.n	800737a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007350:	f7fd f850 	bl	80043f4 <HAL_GetTick>
 8007354:	0003      	movs	r3, r0
 8007356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800735a:	f7fd f84b 	bl	80043f4 <HAL_GetTick>
 800735e:	0002      	movs	r2, r0
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b64      	cmp	r3, #100	@ 0x64
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e2fd      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800736c:	4b8c      	ldr	r3, [pc, #560]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	029b      	lsls	r3, r3, #10
 8007374:	4013      	ands	r3, r2
 8007376:	d0f0      	beq.n	800735a <HAL_RCC_OscConfig+0xf2>
 8007378:	e015      	b.n	80073a6 <HAL_RCC_OscConfig+0x13e>
=======
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d014      	beq.n	80064b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006488:	f7fd f9cc 	bl	8003824 <HAL_GetTick>
 800648c:	0003      	movs	r3, r0
 800648e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006492:	f7fd f9c7 	bl	8003824 <HAL_GetTick>
 8006496:	0002      	movs	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b64      	cmp	r3, #100	@ 0x64
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e2fd      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a4:	4b8c      	ldr	r3, [pc, #560]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	4013      	ands	r3, r2
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0xf2>
 80064b0:	e015      	b.n	80064de <HAL_RCC_OscConfig+0x13e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800737a:	f7fd f83b 	bl	80043f4 <HAL_GetTick>
 800737e:	0003      	movs	r3, r0
 8007380:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007384:	f7fd f836 	bl	80043f4 <HAL_GetTick>
 8007388:	0002      	movs	r2, r0
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b64      	cmp	r3, #100	@ 0x64
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e2e8      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007396:	4b82      	ldr	r3, [pc, #520]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	2380      	movs	r3, #128	@ 0x80
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	4013      	ands	r3, r2
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x11c>
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a4:	46c0      	nop			@ (mov r8, r8)
=======
 80064b2:	f7fd f9b7 	bl	8003824 <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064bc:	f7fd f9b2 	bl	8003824 <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b64      	cmp	r3, #100	@ 0x64
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e2e8      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ce:	4b82      	ldr	r3, [pc, #520]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	2380      	movs	r3, #128	@ 0x80
 80064d4:	029b      	lsls	r3, r3, #10
 80064d6:	4013      	ands	r3, r2
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x11c>
 80064da:	e000      	b.n	80064de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064dc:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2202      	movs	r2, #2
 80073ac:	4013      	ands	r3, r2
 80073ae:	d100      	bne.n	80073b2 <HAL_RCC_OscConfig+0x14a>
 80073b0:	e06c      	b.n	800748c <HAL_RCC_OscConfig+0x224>
=======
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	d100      	bne.n	80064ea <HAL_RCC_OscConfig+0x14a>
 80064e8:	e06c      	b.n	80065c4 <HAL_RCC_OscConfig+0x224>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
<<<<<<< HEAD
 80073b2:	4b7b      	ldr	r3, [pc, #492]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	220c      	movs	r2, #12
 80073b8:	4013      	ands	r3, r2
 80073ba:	d00e      	beq.n	80073da <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80073bc:	4b78      	ldr	r3, [pc, #480]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	220c      	movs	r2, #12
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d11f      	bne.n	8007408 <HAL_RCC_OscConfig+0x1a0>
 80073c8:	4b75      	ldr	r3, [pc, #468]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	23c0      	movs	r3, #192	@ 0xc0
 80073ce:	025b      	lsls	r3, r3, #9
 80073d0:	401a      	ands	r2, r3
 80073d2:	2380      	movs	r3, #128	@ 0x80
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d116      	bne.n	8007408 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073da:	4b71      	ldr	r3, [pc, #452]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2202      	movs	r2, #2
 80073e0:	4013      	ands	r3, r2
 80073e2:	d005      	beq.n	80073f0 <HAL_RCC_OscConfig+0x188>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e2bb      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
=======
 80064ea:	4b7b      	ldr	r3, [pc, #492]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	220c      	movs	r2, #12
 80064f0:	4013      	ands	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064f4:	4b78      	ldr	r3, [pc, #480]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	220c      	movs	r2, #12
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d11f      	bne.n	8006540 <HAL_RCC_OscConfig+0x1a0>
 8006500:	4b75      	ldr	r3, [pc, #468]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	23c0      	movs	r3, #192	@ 0xc0
 8006506:	025b      	lsls	r3, r3, #9
 8006508:	401a      	ands	r2, r3
 800650a:	2380      	movs	r3, #128	@ 0x80
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	429a      	cmp	r2, r3
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b71      	ldr	r3, [pc, #452]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2202      	movs	r2, #2
 8006518:	4013      	ands	r3, r2
 800651a:	d005      	beq.n	8006528 <HAL_RCC_OscConfig+0x188>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d001      	beq.n	8006528 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e2bb      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80073f0:	4b6b      	ldr	r3, [pc, #428]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	22f8      	movs	r2, #248	@ 0xf8
 80073f6:	4393      	bics	r3, r2
 80073f8:	0019      	movs	r1, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00da      	lsls	r2, r3, #3
 8007400:	4b67      	ldr	r3, [pc, #412]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007402:	430a      	orrs	r2, r1
 8007404:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	e041      	b.n	800748c <HAL_RCC_OscConfig+0x224>
=======
 8006528:	4b6b      	ldr	r3, [pc, #428]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	22f8      	movs	r2, #248	@ 0xf8
 800652e:	4393      	bics	r3, r2
 8006530:	0019      	movs	r1, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00da      	lsls	r2, r3, #3
 8006538:	4b67      	ldr	r3, [pc, #412]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e041      	b.n	80065c4 <HAL_RCC_OscConfig+0x224>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d024      	beq.n	800745a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007410:	4b63      	ldr	r3, [pc, #396]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b62      	ldr	r3, [pc, #392]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007416:	2101      	movs	r1, #1
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741c:	f7fc ffea 	bl	80043f4 <HAL_GetTick>
 8007420:	0003      	movs	r3, r0
 8007422:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007426:	f7fc ffe5 	bl	80043f4 <HAL_GetTick>
 800742a:	0002      	movs	r2, r0
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e297      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007438:	4b59      	ldr	r3, [pc, #356]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2202      	movs	r2, #2
 800743e:	4013      	ands	r3, r2
 8007440:	d0f1      	beq.n	8007426 <HAL_RCC_OscConfig+0x1be>
=======
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d024      	beq.n	8006592 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b63      	ldr	r3, [pc, #396]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b62      	ldr	r3, [pc, #392]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800654e:	2101      	movs	r1, #1
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fd f966 	bl	8003824 <HAL_GetTick>
 8006558:	0003      	movs	r3, r0
 800655a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655e:	f7fd f961 	bl	8003824 <HAL_GetTick>
 8006562:	0002      	movs	r2, r0
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e297      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006570:	4b59      	ldr	r3, [pc, #356]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2202      	movs	r2, #2
 8006576:	4013      	ands	r3, r2
 8006578:	d0f1      	beq.n	800655e <HAL_RCC_OscConfig+0x1be>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8007442:	4b57      	ldr	r3, [pc, #348]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	22f8      	movs	r2, #248	@ 0xf8
 8007448:	4393      	bics	r3, r2
 800744a:	0019      	movs	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	00da      	lsls	r2, r3, #3
 8007452:	4b53      	ldr	r3, [pc, #332]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007454:	430a      	orrs	r2, r1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e018      	b.n	800748c <HAL_RCC_OscConfig+0x224>
=======
 800657a:	4b57      	ldr	r3, [pc, #348]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	22f8      	movs	r2, #248	@ 0xf8
 8006580:	4393      	bics	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	00da      	lsls	r2, r3, #3
 800658a:	4b53      	ldr	r3, [pc, #332]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e018      	b.n	80065c4 <HAL_RCC_OscConfig+0x224>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800745a:	4b51      	ldr	r3, [pc, #324]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b50      	ldr	r3, [pc, #320]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007460:	2101      	movs	r1, #1
 8007462:	438a      	bics	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007466:	f7fc ffc5 	bl	80043f4 <HAL_GetTick>
 800746a:	0003      	movs	r3, r0
 800746c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007470:	f7fc ffc0 	bl	80043f4 <HAL_GetTick>
 8007474:	0002      	movs	r2, r0
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e272      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007482:	4b47      	ldr	r3, [pc, #284]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2202      	movs	r2, #2
 8007488:	4013      	ands	r3, r2
 800748a:	d1f1      	bne.n	8007470 <HAL_RCC_OscConfig+0x208>
=======
 8006592:	4b51      	ldr	r3, [pc, #324]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b50      	ldr	r3, [pc, #320]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006598:	2101      	movs	r1, #1
 800659a:	438a      	bics	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7fd f941 	bl	8003824 <HAL_GetTick>
 80065a2:	0003      	movs	r3, r0
 80065a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fd f93c 	bl	8003824 <HAL_GetTick>
 80065ac:	0002      	movs	r2, r0
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e272      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ba:	4b47      	ldr	r3, [pc, #284]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2202      	movs	r2, #2
 80065c0:	4013      	ands	r3, r2
 80065c2:	d1f1      	bne.n	80065a8 <HAL_RCC_OscConfig+0x208>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2208      	movs	r2, #8
 8007492:	4013      	ands	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_RCC_OscConfig+0x29c>
=======
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2208      	movs	r2, #8
 80065ca:	4013      	ands	r3, r2
 80065cc:	d036      	beq.n	800663c <HAL_RCC_OscConfig+0x29c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d019      	beq.n	80074d2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b40      	ldr	r3, [pc, #256]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074a2:	4b3f      	ldr	r3, [pc, #252]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074a4:	2101      	movs	r1, #1
 80074a6:	430a      	orrs	r2, r1
 80074a8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074aa:	f7fc ffa3 	bl	80043f4 <HAL_GetTick>
 80074ae:	0003      	movs	r3, r0
 80074b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074b4:	f7fc ff9e 	bl	80043f4 <HAL_GetTick>
 80074b8:	0002      	movs	r2, r0
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e250      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c6:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	2202      	movs	r2, #2
 80074cc:	4013      	ands	r3, r2
 80074ce:	d0f1      	beq.n	80074b4 <HAL_RCC_OscConfig+0x24c>
 80074d0:	e018      	b.n	8007504 <HAL_RCC_OscConfig+0x29c>
=======
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d019      	beq.n	800660a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d6:	4b40      	ldr	r3, [pc, #256]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80065d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065da:	4b3f      	ldr	r3, [pc, #252]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80065dc:	2101      	movs	r1, #1
 80065de:	430a      	orrs	r2, r1
 80065e0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e2:	f7fd f91f 	bl	8003824 <HAL_GetTick>
 80065e6:	0003      	movs	r3, r0
 80065e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ec:	f7fd f91a 	bl	8003824 <HAL_GetTick>
 80065f0:	0002      	movs	r2, r0
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e250      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fe:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	2202      	movs	r2, #2
 8006604:	4013      	ands	r3, r2
 8006606:	d0f1      	beq.n	80065ec <HAL_RCC_OscConfig+0x24c>
 8006608:	e018      	b.n	800663c <HAL_RCC_OscConfig+0x29c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80074d2:	4b33      	ldr	r3, [pc, #204]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074d6:	4b32      	ldr	r3, [pc, #200]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074d8:	2101      	movs	r1, #1
 80074da:	438a      	bics	r2, r1
 80074dc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074de:	f7fc ff89 	bl	80043f4 <HAL_GetTick>
 80074e2:	0003      	movs	r3, r0
 80074e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e8:	f7fc ff84 	bl	80043f4 <HAL_GetTick>
 80074ec:	0002      	movs	r2, r0
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e236      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fa:	4b29      	ldr	r3, [pc, #164]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 80074fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fe:	2202      	movs	r2, #2
 8007500:	4013      	ands	r3, r2
 8007502:	d1f1      	bne.n	80074e8 <HAL_RCC_OscConfig+0x280>
=======
 800660a:	4b33      	ldr	r3, [pc, #204]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800660c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800660e:	4b32      	ldr	r3, [pc, #200]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006610:	2101      	movs	r1, #1
 8006612:	438a      	bics	r2, r1
 8006614:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fd f905 	bl	8003824 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006620:	f7fd f900 	bl	8003824 <HAL_GetTick>
 8006624:	0002      	movs	r2, r0
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e236      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006632:	4b29      	ldr	r3, [pc, #164]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	2202      	movs	r2, #2
 8006638:	4013      	ands	r3, r2
 800663a:	d1f1      	bne.n	8006620 <HAL_RCC_OscConfig+0x280>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2204      	movs	r2, #4
 800750a:	4013      	ands	r3, r2
 800750c:	d100      	bne.n	8007510 <HAL_RCC_OscConfig+0x2a8>
 800750e:	e0b5      	b.n	800767c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007510:	201f      	movs	r0, #31
 8007512:	183b      	adds	r3, r7, r0
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
=======
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2204      	movs	r2, #4
 8006642:	4013      	ands	r3, r2
 8006644:	d100      	bne.n	8006648 <HAL_RCC_OscConfig+0x2a8>
 8006646:	e0b5      	b.n	80067b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006648:	201f      	movs	r0, #31
 800664a:	183b      	adds	r3, r7, r0
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8007518:	4b21      	ldr	r3, [pc, #132]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	2380      	movs	r3, #128	@ 0x80
 800751e:	055b      	lsls	r3, r3, #21
 8007520:	4013      	ands	r3, r2
 8007522:	d110      	bne.n	8007546 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007524:	4b1e      	ldr	r3, [pc, #120]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 800752a:	2180      	movs	r1, #128	@ 0x80
 800752c:	0549      	lsls	r1, r1, #21
 800752e:	430a      	orrs	r2, r1
 8007530:	61da      	str	r2, [r3, #28]
 8007532:	4b1b      	ldr	r3, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007534:	69da      	ldr	r2, [r3, #28]
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	055b      	lsls	r3, r3, #21
 800753a:	4013      	ands	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007540:	183b      	adds	r3, r7, r0
 8007542:	2201      	movs	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007546:	4b19      	ldr	r3, [pc, #100]	@ (80075ac <HAL_RCC_OscConfig+0x344>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	2380      	movs	r3, #128	@ 0x80
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4013      	ands	r3, r2
 8007550:	d11a      	bne.n	8007588 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007552:	4b16      	ldr	r3, [pc, #88]	@ (80075ac <HAL_RCC_OscConfig+0x344>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b15      	ldr	r3, [pc, #84]	@ (80075ac <HAL_RCC_OscConfig+0x344>)
 8007558:	2180      	movs	r1, #128	@ 0x80
 800755a:	0049      	lsls	r1, r1, #1
 800755c:	430a      	orrs	r2, r1
 800755e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007560:	f7fc ff48 	bl	80043f4 <HAL_GetTick>
 8007564:	0003      	movs	r3, r0
 8007566:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756a:	f7fc ff43 	bl	80043f4 <HAL_GetTick>
 800756e:	0002      	movs	r2, r0
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b64      	cmp	r3, #100	@ 0x64
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e1f5      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800757c:	4b0b      	ldr	r3, [pc, #44]	@ (80075ac <HAL_RCC_OscConfig+0x344>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	2380      	movs	r3, #128	@ 0x80
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	4013      	ands	r3, r2
 8007586:	d0f0      	beq.n	800756a <HAL_RCC_OscConfig+0x302>
=======
 8006650:	4b21      	ldr	r3, [pc, #132]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	2380      	movs	r3, #128	@ 0x80
 8006656:	055b      	lsls	r3, r3, #21
 8006658:	4013      	ands	r3, r2
 800665a:	d110      	bne.n	800667e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665c:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	4b1d      	ldr	r3, [pc, #116]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 8006662:	2180      	movs	r1, #128	@ 0x80
 8006664:	0549      	lsls	r1, r1, #21
 8006666:	430a      	orrs	r2, r1
 8006668:	61da      	str	r2, [r3, #28]
 800666a:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	055b      	lsls	r3, r3, #21
 8006672:	4013      	ands	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006678:	183b      	adds	r3, r7, r0
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667e:	4b19      	ldr	r3, [pc, #100]	@ (80066e4 <HAL_RCC_OscConfig+0x344>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	2380      	movs	r3, #128	@ 0x80
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4013      	ands	r3, r2
 8006688:	d11a      	bne.n	80066c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800668a:	4b16      	ldr	r3, [pc, #88]	@ (80066e4 <HAL_RCC_OscConfig+0x344>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <HAL_RCC_OscConfig+0x344>)
 8006690:	2180      	movs	r1, #128	@ 0x80
 8006692:	0049      	lsls	r1, r1, #1
 8006694:	430a      	orrs	r2, r1
 8006696:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006698:	f7fd f8c4 	bl	8003824 <HAL_GetTick>
 800669c:	0003      	movs	r3, r0
 800669e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a2:	f7fd f8bf 	bl	8003824 <HAL_GetTick>
 80066a6:	0002      	movs	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b64      	cmp	r3, #100	@ 0x64
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e1f5      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <HAL_RCC_OscConfig+0x344>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4013      	ands	r3, r2
 80066be:	d0f0      	beq.n	80066a2 <HAL_RCC_OscConfig+0x302>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d10f      	bne.n	80075b0 <HAL_RCC_OscConfig+0x348>
 8007590:	4b03      	ldr	r3, [pc, #12]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <HAL_RCC_OscConfig+0x338>)
 8007596:	2101      	movs	r1, #1
 8007598:	430a      	orrs	r2, r1
 800759a:	621a      	str	r2, [r3, #32]
 800759c:	e036      	b.n	800760c <HAL_RCC_OscConfig+0x3a4>
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	40021000 	.word	0x40021000
 80075a4:	fffeffff 	.word	0xfffeffff
 80075a8:	fffbffff 	.word	0xfffbffff
 80075ac:	40007000 	.word	0x40007000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10c      	bne.n	80075d2 <HAL_RCC_OscConfig+0x36a>
 80075b8:	4bca      	ldr	r3, [pc, #808]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	4bc9      	ldr	r3, [pc, #804]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075be:	2101      	movs	r1, #1
 80075c0:	438a      	bics	r2, r1
 80075c2:	621a      	str	r2, [r3, #32]
 80075c4:	4bc7      	ldr	r3, [pc, #796]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	4bc6      	ldr	r3, [pc, #792]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075ca:	2104      	movs	r1, #4
 80075cc:	438a      	bics	r2, r1
 80075ce:	621a      	str	r2, [r3, #32]
 80075d0:	e01c      	b.n	800760c <HAL_RCC_OscConfig+0x3a4>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d10c      	bne.n	80075f4 <HAL_RCC_OscConfig+0x38c>
 80075da:	4bc2      	ldr	r3, [pc, #776]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	4bc1      	ldr	r3, [pc, #772]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075e0:	2104      	movs	r1, #4
 80075e2:	430a      	orrs	r2, r1
 80075e4:	621a      	str	r2, [r3, #32]
 80075e6:	4bbf      	ldr	r3, [pc, #764]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	4bbe      	ldr	r3, [pc, #760]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075ec:	2101      	movs	r1, #1
 80075ee:	430a      	orrs	r2, r1
 80075f0:	621a      	str	r2, [r3, #32]
 80075f2:	e00b      	b.n	800760c <HAL_RCC_OscConfig+0x3a4>
 80075f4:	4bbb      	ldr	r3, [pc, #748]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	4bba      	ldr	r3, [pc, #744]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80075fa:	2101      	movs	r1, #1
 80075fc:	438a      	bics	r2, r1
 80075fe:	621a      	str	r2, [r3, #32]
 8007600:	4bb8      	ldr	r3, [pc, #736]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	4bb7      	ldr	r3, [pc, #732]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007606:	2104      	movs	r1, #4
 8007608:	438a      	bics	r2, r1
 800760a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d014      	beq.n	800763e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007614:	f7fc feee 	bl	80043f4 <HAL_GetTick>
 8007618:	0003      	movs	r3, r0
 800761a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761c:	e009      	b.n	8007632 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761e:	f7fc fee9 	bl	80043f4 <HAL_GetTick>
 8007622:	0002      	movs	r2, r0
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	4aaf      	ldr	r2, [pc, #700]	@ (80078e8 <HAL_RCC_OscConfig+0x680>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e19a      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007632:	4bac      	ldr	r3, [pc, #688]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	2202      	movs	r2, #2
 8007638:	4013      	ands	r3, r2
 800763a:	d0f0      	beq.n	800761e <HAL_RCC_OscConfig+0x3b6>
 800763c:	e013      	b.n	8007666 <HAL_RCC_OscConfig+0x3fe>
=======
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10f      	bne.n	80066e8 <HAL_RCC_OscConfig+0x348>
 80066c8:	4b03      	ldr	r3, [pc, #12]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	4b02      	ldr	r3, [pc, #8]	@ (80066d8 <HAL_RCC_OscConfig+0x338>)
 80066ce:	2101      	movs	r1, #1
 80066d0:	430a      	orrs	r2, r1
 80066d2:	621a      	str	r2, [r3, #32]
 80066d4:	e036      	b.n	8006744 <HAL_RCC_OscConfig+0x3a4>
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	40021000 	.word	0x40021000
 80066dc:	fffeffff 	.word	0xfffeffff
 80066e0:	fffbffff 	.word	0xfffbffff
 80066e4:	40007000 	.word	0x40007000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10c      	bne.n	800670a <HAL_RCC_OscConfig+0x36a>
 80066f0:	4bca      	ldr	r3, [pc, #808]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	4bc9      	ldr	r3, [pc, #804]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80066f6:	2101      	movs	r1, #1
 80066f8:	438a      	bics	r2, r1
 80066fa:	621a      	str	r2, [r3, #32]
 80066fc:	4bc7      	ldr	r3, [pc, #796]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80066fe:	6a1a      	ldr	r2, [r3, #32]
 8006700:	4bc6      	ldr	r3, [pc, #792]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006702:	2104      	movs	r1, #4
 8006704:	438a      	bics	r2, r1
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e01c      	b.n	8006744 <HAL_RCC_OscConfig+0x3a4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b05      	cmp	r3, #5
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x38c>
 8006712:	4bc2      	ldr	r3, [pc, #776]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	4bc1      	ldr	r3, [pc, #772]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006718:	2104      	movs	r1, #4
 800671a:	430a      	orrs	r2, r1
 800671c:	621a      	str	r2, [r3, #32]
 800671e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006720:	6a1a      	ldr	r2, [r3, #32]
 8006722:	4bbe      	ldr	r3, [pc, #760]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006724:	2101      	movs	r1, #1
 8006726:	430a      	orrs	r2, r1
 8006728:	621a      	str	r2, [r3, #32]
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0x3a4>
 800672c:	4bbb      	ldr	r3, [pc, #748]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	4bba      	ldr	r3, [pc, #744]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006732:	2101      	movs	r1, #1
 8006734:	438a      	bics	r2, r1
 8006736:	621a      	str	r2, [r3, #32]
 8006738:	4bb8      	ldr	r3, [pc, #736]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	4bb7      	ldr	r3, [pc, #732]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800673e:	2104      	movs	r1, #4
 8006740:	438a      	bics	r2, r1
 8006742:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d014      	beq.n	8006776 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674c:	f7fd f86a 	bl	8003824 <HAL_GetTick>
 8006750:	0003      	movs	r3, r0
 8006752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006754:	e009      	b.n	800676a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006756:	f7fd f865 	bl	8003824 <HAL_GetTick>
 800675a:	0002      	movs	r2, r0
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	4aaf      	ldr	r2, [pc, #700]	@ (8006a20 <HAL_RCC_OscConfig+0x680>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e19a      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	4bac      	ldr	r3, [pc, #688]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	2202      	movs	r2, #2
 8006770:	4013      	ands	r3, r2
 8006772:	d0f0      	beq.n	8006756 <HAL_RCC_OscConfig+0x3b6>
 8006774:	e013      	b.n	800679e <HAL_RCC_OscConfig+0x3fe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800763e:	f7fc fed9 	bl	80043f4 <HAL_GetTick>
 8007642:	0003      	movs	r3, r0
 8007644:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007646:	e009      	b.n	800765c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007648:	f7fc fed4 	bl	80043f4 <HAL_GetTick>
 800764c:	0002      	movs	r2, r0
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	4aa5      	ldr	r2, [pc, #660]	@ (80078e8 <HAL_RCC_OscConfig+0x680>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e185      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765c:	4ba1      	ldr	r3, [pc, #644]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	2202      	movs	r2, #2
 8007662:	4013      	ands	r3, r2
 8007664:	d1f0      	bne.n	8007648 <HAL_RCC_OscConfig+0x3e0>
=======
 8006776:	f7fd f855 	bl	8003824 <HAL_GetTick>
 800677a:	0003      	movs	r3, r0
 800677c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677e:	e009      	b.n	8006794 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006780:	f7fd f850 	bl	8003824 <HAL_GetTick>
 8006784:	0002      	movs	r2, r0
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	4aa5      	ldr	r2, [pc, #660]	@ (8006a20 <HAL_RCC_OscConfig+0x680>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e185      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006794:	4ba1      	ldr	r3, [pc, #644]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	2202      	movs	r2, #2
 800679a:	4013      	ands	r3, r2
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x3e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8007666:	231f      	movs	r3, #31
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d105      	bne.n	800767c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007670:	4b9c      	ldr	r3, [pc, #624]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	4b9b      	ldr	r3, [pc, #620]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007676:	499d      	ldr	r1, [pc, #628]	@ (80078ec <HAL_RCC_OscConfig+0x684>)
 8007678:	400a      	ands	r2, r1
 800767a:	61da      	str	r2, [r3, #28]
=======
 800679e:	231f      	movs	r3, #31
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d105      	bne.n	80067b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a8:	4b9c      	ldr	r3, [pc, #624]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	4b9b      	ldr	r3, [pc, #620]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067ae:	499d      	ldr	r1, [pc, #628]	@ (8006a24 <HAL_RCC_OscConfig+0x684>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	61da      	str	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
<<<<<<< HEAD
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2210      	movs	r2, #16
 8007682:	4013      	ands	r3, r2
 8007684:	d063      	beq.n	800774e <HAL_RCC_OscConfig+0x4e6>
=======
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2210      	movs	r2, #16
 80067ba:	4013      	ands	r3, r2
 80067bc:	d063      	beq.n	8006886 <HAL_RCC_OscConfig+0x4e6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
<<<<<<< HEAD
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d12a      	bne.n	80076e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800768e:	4b95      	ldr	r3, [pc, #596]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007692:	4b94      	ldr	r3, [pc, #592]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007694:	2104      	movs	r1, #4
 8007696:	430a      	orrs	r2, r1
 8007698:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800769a:	4b92      	ldr	r3, [pc, #584]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800769c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800769e:	4b91      	ldr	r3, [pc, #580]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076a0:	2101      	movs	r1, #1
 80076a2:	430a      	orrs	r2, r1
 80076a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076a6:	f7fc fea5 	bl	80043f4 <HAL_GetTick>
 80076aa:	0003      	movs	r3, r0
 80076ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80076b0:	f7fc fea0 	bl	80043f4 <HAL_GetTick>
 80076b4:	0002      	movs	r2, r0
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e152      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076c2:	4b88      	ldr	r3, [pc, #544]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c6:	2202      	movs	r2, #2
 80076c8:	4013      	ands	r3, r2
 80076ca:	d0f1      	beq.n	80076b0 <HAL_RCC_OscConfig+0x448>
=======
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d12a      	bne.n	800681c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80067c6:	4b95      	ldr	r3, [pc, #596]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ca:	4b94      	ldr	r3, [pc, #592]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067cc:	2104      	movs	r1, #4
 80067ce:	430a      	orrs	r2, r1
 80067d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80067d2:	4b92      	ldr	r3, [pc, #584]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d6:	4b91      	ldr	r3, [pc, #580]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067d8:	2101      	movs	r1, #1
 80067da:	430a      	orrs	r2, r1
 80067dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067de:	f7fd f821 	bl	8003824 <HAL_GetTick>
 80067e2:	0003      	movs	r3, r0
 80067e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80067e8:	f7fd f81c 	bl	8003824 <HAL_GetTick>
 80067ec:	0002      	movs	r2, r0
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e152      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80067fa:	4b88      	ldr	r3, [pc, #544]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	2202      	movs	r2, #2
 8006800:	4013      	ands	r3, r2
 8006802:	d0f1      	beq.n	80067e8 <HAL_RCC_OscConfig+0x448>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
<<<<<<< HEAD
 80076cc:	4b85      	ldr	r3, [pc, #532]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d0:	22f8      	movs	r2, #248	@ 0xf8
 80076d2:	4393      	bics	r3, r2
 80076d4:	0019      	movs	r1, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	00da      	lsls	r2, r3, #3
 80076dc:	4b81      	ldr	r3, [pc, #516]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076de:	430a      	orrs	r2, r1
 80076e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80076e2:	e034      	b.n	800774e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	3305      	adds	r3, #5
 80076ea:	d111      	bne.n	8007710 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80076ec:	4b7d      	ldr	r3, [pc, #500]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f0:	4b7c      	ldr	r3, [pc, #496]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076f2:	2104      	movs	r1, #4
 80076f4:	438a      	bics	r2, r1
 80076f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80076f8:	4b7a      	ldr	r3, [pc, #488]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80076fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fc:	22f8      	movs	r2, #248	@ 0xf8
 80076fe:	4393      	bics	r3, r2
 8007700:	0019      	movs	r1, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	00da      	lsls	r2, r3, #3
 8007708:	4b76      	ldr	r3, [pc, #472]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800770a:	430a      	orrs	r2, r1
 800770c:	635a      	str	r2, [r3, #52]	@ 0x34
 800770e:	e01e      	b.n	800774e <HAL_RCC_OscConfig+0x4e6>
=======
 8006804:	4b85      	ldr	r3, [pc, #532]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006808:	22f8      	movs	r2, #248	@ 0xf8
 800680a:	4393      	bics	r3, r2
 800680c:	0019      	movs	r1, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	00da      	lsls	r2, r3, #3
 8006814:	4b81      	ldr	r3, [pc, #516]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006816:	430a      	orrs	r2, r1
 8006818:	635a      	str	r2, [r3, #52]	@ 0x34
 800681a:	e034      	b.n	8006886 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	3305      	adds	r3, #5
 8006822:	d111      	bne.n	8006848 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006824:	4b7d      	ldr	r3, [pc, #500]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006828:	4b7c      	ldr	r3, [pc, #496]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800682a:	2104      	movs	r1, #4
 800682c:	438a      	bics	r2, r1
 800682e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006830:	4b7a      	ldr	r3, [pc, #488]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006834:	22f8      	movs	r2, #248	@ 0xf8
 8006836:	4393      	bics	r3, r2
 8006838:	0019      	movs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	00da      	lsls	r2, r3, #3
 8006840:	4b76      	ldr	r3, [pc, #472]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006842:	430a      	orrs	r2, r1
 8006844:	635a      	str	r2, [r3, #52]	@ 0x34
 8006846:	e01e      	b.n	8006886 <HAL_RCC_OscConfig+0x4e6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
<<<<<<< HEAD
 8007710:	4b74      	ldr	r3, [pc, #464]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007714:	4b73      	ldr	r3, [pc, #460]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007716:	2104      	movs	r1, #4
 8007718:	430a      	orrs	r2, r1
 800771a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800771c:	4b71      	ldr	r3, [pc, #452]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800771e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007720:	4b70      	ldr	r3, [pc, #448]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007722:	2101      	movs	r1, #1
 8007724:	438a      	bics	r2, r1
 8007726:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007728:	f7fc fe64 	bl	80043f4 <HAL_GetTick>
 800772c:	0003      	movs	r3, r0
 800772e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007732:	f7fc fe5f 	bl	80043f4 <HAL_GetTick>
 8007736:	0002      	movs	r2, r0
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e111      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007744:	4b67      	ldr	r3, [pc, #412]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007748:	2202      	movs	r2, #2
 800774a:	4013      	ands	r3, r2
 800774c:	d1f1      	bne.n	8007732 <HAL_RCC_OscConfig+0x4ca>
=======
 8006848:	4b74      	ldr	r3, [pc, #464]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800684a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800684c:	4b73      	ldr	r3, [pc, #460]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800684e:	2104      	movs	r1, #4
 8006850:	430a      	orrs	r2, r1
 8006852:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006854:	4b71      	ldr	r3, [pc, #452]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006858:	4b70      	ldr	r3, [pc, #448]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800685a:	2101      	movs	r1, #1
 800685c:	438a      	bics	r2, r1
 800685e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006860:	f7fc ffe0 	bl	8003824 <HAL_GetTick>
 8006864:	0003      	movs	r3, r0
 8006866:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800686a:	f7fc ffdb 	bl	8003824 <HAL_GetTick>
 800686e:	0002      	movs	r2, r0
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e111      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800687c:	4b67      	ldr	r3, [pc, #412]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	2202      	movs	r2, #2
 8006882:	4013      	ands	r3, r2
 8006884:	d1f1      	bne.n	800686a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2220      	movs	r2, #32
 8007754:	4013      	ands	r3, r2
 8007756:	d05c      	beq.n	8007812 <HAL_RCC_OscConfig+0x5aa>
=======
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2220      	movs	r2, #32
 800688c:	4013      	ands	r3, r2
 800688e:	d05c      	beq.n	800694a <HAL_RCC_OscConfig+0x5aa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
<<<<<<< HEAD
 8007758:	4b62      	ldr	r3, [pc, #392]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	220c      	movs	r2, #12
 800775e:	4013      	ands	r3, r2
 8007760:	2b0c      	cmp	r3, #12
 8007762:	d00e      	beq.n	8007782 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007764:	4b5f      	ldr	r3, [pc, #380]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	220c      	movs	r2, #12
 800776a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800776c:	2b08      	cmp	r3, #8
 800776e:	d114      	bne.n	800779a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007770:	4b5c      	ldr	r3, [pc, #368]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	23c0      	movs	r3, #192	@ 0xc0
 8007776:	025b      	lsls	r3, r3, #9
 8007778:	401a      	ands	r2, r3
 800777a:	23c0      	movs	r3, #192	@ 0xc0
 800777c:	025b      	lsls	r3, r3, #9
 800777e:	429a      	cmp	r2, r3
 8007780:	d10b      	bne.n	800779a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007782:	4b58      	ldr	r3, [pc, #352]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	4013      	ands	r3, r2
 800778c:	d040      	beq.n	8007810 <HAL_RCC_OscConfig+0x5a8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d03c      	beq.n	8007810 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e0e6      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
=======
 8006890:	4b62      	ldr	r3, [pc, #392]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	220c      	movs	r2, #12
 8006896:	4013      	ands	r3, r2
 8006898:	2b0c      	cmp	r3, #12
 800689a:	d00e      	beq.n	80068ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800689c:	4b5f      	ldr	r3, [pc, #380]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	220c      	movs	r2, #12
 80068a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d114      	bne.n	80068d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80068a8:	4b5c      	ldr	r3, [pc, #368]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	23c0      	movs	r3, #192	@ 0xc0
 80068ae:	025b      	lsls	r3, r3, #9
 80068b0:	401a      	ands	r2, r3
 80068b2:	23c0      	movs	r3, #192	@ 0xc0
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d10b      	bne.n	80068d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80068ba:	4b58      	ldr	r3, [pc, #352]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80068bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068be:	2380      	movs	r3, #128	@ 0x80
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	4013      	ands	r3, r2
 80068c4:	d040      	beq.n	8006948 <HAL_RCC_OscConfig+0x5a8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d03c      	beq.n	8006948 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0e6      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01b      	beq.n	80077da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80077a2:	4b50      	ldr	r3, [pc, #320]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80077a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a6:	4b4f      	ldr	r3, [pc, #316]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80077a8:	2180      	movs	r1, #128	@ 0x80
 80077aa:	0249      	lsls	r1, r1, #9
 80077ac:	430a      	orrs	r2, r1
 80077ae:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b0:	f7fc fe20 	bl	80043f4 <HAL_GetTick>
 80077b4:	0003      	movs	r3, r0
 80077b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80077b8:	e008      	b.n	80077cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ba:	f7fc fe1b 	bl	80043f4 <HAL_GetTick>
 80077be:	0002      	movs	r2, r0
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e0cd      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80077cc:	4b45      	ldr	r3, [pc, #276]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80077ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d0:	2380      	movs	r3, #128	@ 0x80
 80077d2:	029b      	lsls	r3, r3, #10
 80077d4:	4013      	ands	r3, r2
 80077d6:	d0f0      	beq.n	80077ba <HAL_RCC_OscConfig+0x552>
 80077d8:	e01b      	b.n	8007812 <HAL_RCC_OscConfig+0x5aa>
=======
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80068da:	4b50      	ldr	r3, [pc, #320]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80068dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068de:	4b4f      	ldr	r3, [pc, #316]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80068e0:	2180      	movs	r1, #128	@ 0x80
 80068e2:	0249      	lsls	r1, r1, #9
 80068e4:	430a      	orrs	r2, r1
 80068e6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e8:	f7fc ff9c 	bl	8003824 <HAL_GetTick>
 80068ec:	0003      	movs	r3, r0
 80068ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068f2:	f7fc ff97 	bl	8003824 <HAL_GetTick>
 80068f6:	0002      	movs	r2, r0
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e0cd      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006904:	4b45      	ldr	r3, [pc, #276]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	029b      	lsls	r3, r3, #10
 800690c:	4013      	ands	r3, r2
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x552>
 8006910:	e01b      	b.n	800694a <HAL_RCC_OscConfig+0x5aa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 80077da:	4b42      	ldr	r3, [pc, #264]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80077dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077de:	4b41      	ldr	r3, [pc, #260]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80077e0:	4943      	ldr	r1, [pc, #268]	@ (80078f0 <HAL_RCC_OscConfig+0x688>)
 80077e2:	400a      	ands	r2, r1
 80077e4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fc fe05 	bl	80043f4 <HAL_GetTick>
 80077ea:	0003      	movs	r3, r0
 80077ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077f0:	f7fc fe00 	bl	80043f4 <HAL_GetTick>
 80077f4:	0002      	movs	r2, r0
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e0b2      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007802:	4b38      	ldr	r3, [pc, #224]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007806:	2380      	movs	r3, #128	@ 0x80
 8007808:	029b      	lsls	r3, r3, #10
 800780a:	4013      	ands	r3, r2
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0x588>
 800780e:	e000      	b.n	8007812 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007810:	46c0      	nop			@ (mov r8, r8)
=======
 8006912:	4b42      	ldr	r3, [pc, #264]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006916:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006918:	4943      	ldr	r1, [pc, #268]	@ (8006a28 <HAL_RCC_OscConfig+0x688>)
 800691a:	400a      	ands	r2, r1
 800691c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691e:	f7fc ff81 	bl	8003824 <HAL_GetTick>
 8006922:	0003      	movs	r3, r0
 8006924:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006928:	f7fc ff7c 	bl	8003824 <HAL_GetTick>
 800692c:	0002      	movs	r2, r0
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e0b2      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800693a:	4b38      	ldr	r3, [pc, #224]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800693c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800693e:	2380      	movs	r3, #128	@ 0x80
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	4013      	ands	r3, r2
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x588>
 8006946:	e000      	b.n	800694a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006948:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d100      	bne.n	800781c <HAL_RCC_OscConfig+0x5b4>
 800781a:	e0a4      	b.n	8007966 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800781c:	4b31      	ldr	r3, [pc, #196]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	220c      	movs	r2, #12
 8007822:	4013      	ands	r3, r2
 8007824:	2b08      	cmp	r3, #8
 8007826:	d100      	bne.n	800782a <HAL_RCC_OscConfig+0x5c2>
 8007828:	e078      	b.n	800791c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	2b02      	cmp	r3, #2
 8007830:	d14c      	bne.n	80078cc <HAL_RCC_OscConfig+0x664>
=======
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	d100      	bne.n	8006954 <HAL_RCC_OscConfig+0x5b4>
 8006952:	e0a4      	b.n	8006a9e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006954:	4b31      	ldr	r3, [pc, #196]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	220c      	movs	r2, #12
 800695a:	4013      	ands	r3, r2
 800695c:	2b08      	cmp	r3, #8
 800695e:	d100      	bne.n	8006962 <HAL_RCC_OscConfig+0x5c2>
 8006960:	e078      	b.n	8006a54 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	2b02      	cmp	r3, #2
 8006968:	d14c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x664>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8007832:	4b2c      	ldr	r3, [pc, #176]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b2b      	ldr	r3, [pc, #172]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007838:	492e      	ldr	r1, [pc, #184]	@ (80078f4 <HAL_RCC_OscConfig+0x68c>)
 800783a:	400a      	ands	r2, r1
 800783c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783e:	f7fc fdd9 	bl	80043f4 <HAL_GetTick>
 8007842:	0003      	movs	r3, r0
 8007844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007848:	f7fc fdd4 	bl	80043f4 <HAL_GetTick>
 800784c:	0002      	movs	r2, r0
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e086      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800785a:	4b22      	ldr	r3, [pc, #136]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	2380      	movs	r3, #128	@ 0x80
 8007860:	049b      	lsls	r3, r3, #18
 8007862:	4013      	ands	r3, r2
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x5e0>
=======
 800696a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006970:	492e      	ldr	r1, [pc, #184]	@ (8006a2c <HAL_RCC_OscConfig+0x68c>)
 8006972:	400a      	ands	r2, r1
 8006974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006976:	f7fc ff55 	bl	8003824 <HAL_GetTick>
 800697a:	0003      	movs	r3, r0
 800697c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006980:	f7fc ff50 	bl	8003824 <HAL_GetTick>
 8006984:	0002      	movs	r2, r0
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e086      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006992:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	049b      	lsls	r3, r3, #18
 800699a:	4013      	ands	r3, r2
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x5e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8007866:	4b1f      	ldr	r3, [pc, #124]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	220f      	movs	r2, #15
 800786c:	4393      	bics	r3, r2
 800786e:	0019      	movs	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007874:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007876:	430a      	orrs	r2, r1
 8007878:	62da      	str	r2, [r3, #44]	@ 0x2c
 800787a:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4a1e      	ldr	r2, [pc, #120]	@ (80078f8 <HAL_RCC_OscConfig+0x690>)
 8007880:	4013      	ands	r3, r2
 8007882:	0019      	movs	r1, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788c:	431a      	orrs	r2, r3
 800788e:	4b15      	ldr	r3, [pc, #84]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007890:	430a      	orrs	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
=======
 800699e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	220f      	movs	r2, #15
 80069a4:	4393      	bics	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069ae:	430a      	orrs	r2, r1
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069b2:	4b1a      	ldr	r3, [pc, #104]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a30 <HAL_RCC_OscConfig+0x690>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	431a      	orrs	r2, r3
 80069c6:	4b15      	ldr	r3, [pc, #84]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8007894:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4b12      	ldr	r3, [pc, #72]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 800789a:	2180      	movs	r1, #128	@ 0x80
 800789c:	0449      	lsls	r1, r1, #17
 800789e:	430a      	orrs	r2, r1
 80078a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a2:	f7fc fda7 	bl	80043f4 <HAL_GetTick>
 80078a6:	0003      	movs	r3, r0
 80078a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fc fda2 	bl	80043f4 <HAL_GetTick>
 80078b0:	0002      	movs	r2, r0
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e054      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078be:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	049b      	lsls	r3, r3, #18
 80078c6:	4013      	ands	r3, r2
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x644>
 80078ca:	e04c      	b.n	8007966 <HAL_RCC_OscConfig+0x6fe>
=======
 80069cc:	4b13      	ldr	r3, [pc, #76]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b12      	ldr	r3, [pc, #72]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069d2:	2180      	movs	r1, #128	@ 0x80
 80069d4:	0449      	lsls	r1, r1, #17
 80069d6:	430a      	orrs	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069da:	f7fc ff23 	bl	8003824 <HAL_GetTick>
 80069de:	0003      	movs	r3, r0
 80069e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fc ff1e 	bl	8003824 <HAL_GetTick>
 80069e8:	0002      	movs	r2, r0
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e054      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069f6:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	049b      	lsls	r3, r3, #18
 80069fe:	4013      	ands	r3, r2
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x644>
 8006a02:	e04c      	b.n	8006a9e <HAL_RCC_OscConfig+0x6fe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <HAL_RCC_OscConfig+0x67c>)
 80078d2:	4908      	ldr	r1, [pc, #32]	@ (80078f4 <HAL_RCC_OscConfig+0x68c>)
 80078d4:	400a      	ands	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fc fd8c 	bl	80043f4 <HAL_GetTick>
 80078dc:	0003      	movs	r3, r0
 80078de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078e0:	e015      	b.n	800790e <HAL_RCC_OscConfig+0x6a6>
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	40021000 	.word	0x40021000
 80078e8:	00001388 	.word	0x00001388
 80078ec:	efffffff 	.word	0xefffffff
 80078f0:	fffeffff 	.word	0xfffeffff
 80078f4:	feffffff 	.word	0xfeffffff
 80078f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fc fd7a 	bl	80043f4 <HAL_GetTick>
 8007900:	0002      	movs	r2, r0
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e02c      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800790e:	4b18      	ldr	r3, [pc, #96]	@ (8007970 <HAL_RCC_OscConfig+0x708>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	2380      	movs	r3, #128	@ 0x80
 8007914:	049b      	lsls	r3, r3, #18
 8007916:	4013      	ands	r3, r2
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x694>
 800791a:	e024      	b.n	8007966 <HAL_RCC_OscConfig+0x6fe>
=======
 8006a04:	4b05      	ldr	r3, [pc, #20]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <HAL_RCC_OscConfig+0x67c>)
 8006a0a:	4908      	ldr	r1, [pc, #32]	@ (8006a2c <HAL_RCC_OscConfig+0x68c>)
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a10:	f7fc ff08 	bl	8003824 <HAL_GetTick>
 8006a14:	0003      	movs	r3, r0
 8006a16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a18:	e015      	b.n	8006a46 <HAL_RCC_OscConfig+0x6a6>
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	00001388 	.word	0x00001388
 8006a24:	efffffff 	.word	0xefffffff
 8006a28:	fffeffff 	.word	0xfffeffff
 8006a2c:	feffffff 	.word	0xfeffffff
 8006a30:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fc fef6 	bl	8003824 <HAL_GetTick>
 8006a38:	0002      	movs	r2, r0
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e02c      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a46:	4b18      	ldr	r3, [pc, #96]	@ (8006aa8 <HAL_RCC_OscConfig+0x708>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	2380      	movs	r3, #128	@ 0x80
 8006a4c:	049b      	lsls	r3, r3, #18
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x694>
 8006a52:	e024      	b.n	8006a9e <HAL_RCC_OscConfig+0x6fe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e01f      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
=======
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e01f      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
<<<<<<< HEAD
 8007928:	4b11      	ldr	r3, [pc, #68]	@ (8007970 <HAL_RCC_OscConfig+0x708>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800792e:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <HAL_RCC_OscConfig+0x708>)
 8007930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007932:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	23c0      	movs	r3, #192	@ 0xc0
 8007938:	025b      	lsls	r3, r3, #9
 800793a:	401a      	ands	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007940:	429a      	cmp	r2, r3
 8007942:	d10e      	bne.n	8007962 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	220f      	movs	r2, #15
 8007948:	401a      	ands	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800794e:	429a      	cmp	r2, r3
 8007950:	d107      	bne.n	8007962 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	23f0      	movs	r3, #240	@ 0xf0
 8007956:	039b      	lsls	r3, r3, #14
 8007958:	401a      	ands	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800795e:	429a      	cmp	r2, r3
 8007960:	d001      	beq.n	8007966 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_RCC_OscConfig+0x700>
=======
 8006a60:	4b11      	ldr	r3, [pc, #68]	@ (8006aa8 <HAL_RCC_OscConfig+0x708>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006a66:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCC_OscConfig+0x708>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	23c0      	movs	r3, #192	@ 0xc0
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	401a      	ands	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d10e      	bne.n	8006a9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	220f      	movs	r2, #15
 8006a80:	401a      	ands	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	23f0      	movs	r3, #240	@ 0xf0
 8006a8e:	039b      	lsls	r3, r3, #14
 8006a90:	401a      	ands	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCC_OscConfig+0x700>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8007966:	2300      	movs	r3, #0
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b008      	add	sp, #32
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40021000 	.word	0x40021000

08007974 <HAL_RCC_ClockConfig>:
=======
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b008      	add	sp, #32
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000

08006aac <HAL_RCC_ClockConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
=======
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0bf      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0bf      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8007988:	4b61      	ldr	r3, [pc, #388]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2201      	movs	r2, #1
 800798e:	4013      	ands	r3, r2
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d911      	bls.n	80079ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b5e      	ldr	r3, [pc, #376]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	4393      	bics	r3, r2
 800799e:	0019      	movs	r1, r3
 80079a0:	4b5b      	ldr	r3, [pc, #364]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]
=======
 8006ac0:	4b61      	ldr	r3, [pc, #388]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d911      	bls.n	8006af2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b5e      	ldr	r3, [pc, #376]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4393      	bics	r3, r2
 8006ad6:	0019      	movs	r1, r3
 8006ad8:	4b5b      	ldr	r3, [pc, #364]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80079a8:	4b59      	ldr	r3, [pc, #356]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2201      	movs	r2, #1
 80079ae:	4013      	ands	r3, r2
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e0a6      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006ae0:	4b59      	ldr	r3, [pc, #356]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d001      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0a6      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2202      	movs	r2, #2
 80079c0:	4013      	ands	r3, r2
 80079c2:	d015      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x7c>
=======
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2202      	movs	r2, #2
 8006af8:	4013      	ands	r3, r2
 8006afa:	d015      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x7c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2204      	movs	r2, #4
 80079ca:	4013      	ands	r3, r2
 80079cc:	d006      	beq.n	80079dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80079ce:	4b51      	ldr	r3, [pc, #324]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	4b50      	ldr	r3, [pc, #320]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 80079d4:	21e0      	movs	r1, #224	@ 0xe0
 80079d6:	00c9      	lsls	r1, r1, #3
 80079d8:	430a      	orrs	r2, r1
 80079da:	605a      	str	r2, [r3, #4]
=======
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2204      	movs	r2, #4
 8006b02:	4013      	ands	r3, r2
 8006b04:	d006      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b06:	4b51      	ldr	r3, [pc, #324]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	4b50      	ldr	r3, [pc, #320]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b0c:	21e0      	movs	r1, #224	@ 0xe0
 8006b0e:	00c9      	lsls	r1, r1, #3
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80079dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	22f0      	movs	r2, #240	@ 0xf0
 80079e2:	4393      	bics	r3, r2
 80079e4:	0019      	movs	r1, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]
=======
 8006b14:	4b4d      	ldr	r3, [pc, #308]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	22f0      	movs	r2, #240	@ 0xf0
 8006b1a:	4393      	bics	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	4b4a      	ldr	r3, [pc, #296]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b24:	430a      	orrs	r2, r1
 8006b26:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	4013      	ands	r3, r2
 80079f8:	d04c      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x120>
=======
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d04c      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x120>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d107      	bne.n	8007a12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a02:	4b44      	ldr	r3, [pc, #272]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	2380      	movs	r3, #128	@ 0x80
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	d120      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e07a      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b44      	ldr	r3, [pc, #272]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	2380      	movs	r3, #128	@ 0x80
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	4013      	ands	r3, r2
 8006b44:	d120      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07a      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d107      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	2380      	movs	r3, #128	@ 0x80
 8007a20:	049b      	lsls	r3, r3, #18
 8007a22:	4013      	ands	r3, r2
 8007a24:	d114      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e06e      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b3e      	ldr	r3, [pc, #248]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	2380      	movs	r3, #128	@ 0x80
 8006b58:	049b      	lsls	r3, r3, #18
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d114      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e06e      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
<<<<<<< HEAD
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d107      	bne.n	8007a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007a32:	4b38      	ldr	r3, [pc, #224]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a36:	2380      	movs	r3, #128	@ 0x80
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d108      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e062      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d107      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006b6a:	4b38      	ldr	r3, [pc, #224]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b6e:	2380      	movs	r3, #128	@ 0x80
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	4013      	ands	r3, r2
 8006b74:	d108      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e062      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8007a42:	4b34      	ldr	r3, [pc, #208]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2202      	movs	r2, #2
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d101      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e05b      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a50:	4b30      	ldr	r3, [pc, #192]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2203      	movs	r2, #3
 8007a56:	4393      	bics	r3, r2
 8007a58:	0019      	movs	r1, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a64:	f7fc fcc6 	bl	80043f4 <HAL_GetTick>
 8007a68:	0003      	movs	r3, r0
 8007a6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6c:	e009      	b.n	8007a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a6e:	f7fc fcc1 	bl	80043f4 <HAL_GetTick>
 8007a72:	0002      	movs	r2, r0
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	4a27      	ldr	r2, [pc, #156]	@ (8007b18 <HAL_RCC_ClockConfig+0x1a4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e042      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a82:	4b24      	ldr	r3, [pc, #144]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	220c      	movs	r2, #12
 8007a88:	401a      	ands	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d1ec      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xfa>
=======
 8006b7a:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4013      	ands	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e05b      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b88:	4b30      	ldr	r3, [pc, #192]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4393      	bics	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b2d      	ldr	r3, [pc, #180]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b9c:	f7fc fe42 	bl	8003824 <HAL_GetTick>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba4:	e009      	b.n	8006bba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba6:	f7fc fe3d 	bl	8003824 <HAL_GetTick>
 8006baa:	0002      	movs	r2, r0
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	4a27      	ldr	r2, [pc, #156]	@ (8006c50 <HAL_RCC_ClockConfig+0x1a4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e042      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bba:	4b24      	ldr	r3, [pc, #144]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	220c      	movs	r2, #12
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d1ec      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8007a94:	4b1e      	ldr	r3, [pc, #120]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d211      	bcs.n	8007ac6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4393      	bics	r3, r2
 8007aaa:	0019      	movs	r1, r3
 8007aac:	4b18      	ldr	r3, [pc, #96]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	601a      	str	r2, [r3, #0]
=======
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d211      	bcs.n	8006bfe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b1b      	ldr	r3, [pc, #108]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2201      	movs	r2, #1
 8006be0:	4393      	bics	r3, r2
 8006be2:	0019      	movs	r1, r3
 8006be4:	4b18      	ldr	r3, [pc, #96]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8007ab4:	4b16      	ldr	r3, [pc, #88]	@ (8007b10 <HAL_RCC_ClockConfig+0x19c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4013      	ands	r3, r2
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e020      	b.n	8007b08 <HAL_RCC_ClockConfig+0x194>
=======
 8006bec:	4b16      	ldr	r3, [pc, #88]	@ (8006c48 <HAL_RCC_ClockConfig+0x19c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e020      	b.n	8006c40 <HAL_RCC_ClockConfig+0x194>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2204      	movs	r2, #4
 8007acc:	4013      	ands	r3, r2
 8007ace:	d009      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad0:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	4a11      	ldr	r2, [pc, #68]	@ (8007b1c <HAL_RCC_ClockConfig+0x1a8>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	0019      	movs	r1, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
=======
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2204      	movs	r2, #4
 8006c04:	4013      	ands	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006c08:	4b10      	ldr	r3, [pc, #64]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a11      	ldr	r2, [pc, #68]	@ (8006c54 <HAL_RCC_ClockConfig+0x1a8>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	0019      	movs	r1, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
<<<<<<< HEAD
 8007ae4:	f000 f820 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 8007ae8:	0001      	movs	r1, r0
 8007aea:	4b0a      	ldr	r3, [pc, #40]	@ (8007b14 <HAL_RCC_ClockConfig+0x1a0>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	220f      	movs	r2, #15
 8007af2:	4013      	ands	r3, r2
 8007af4:	4a0a      	ldr	r2, [pc, #40]	@ (8007b20 <HAL_RCC_ClockConfig+0x1ac>)
 8007af6:	5cd3      	ldrb	r3, [r2, r3]
 8007af8:	000a      	movs	r2, r1
 8007afa:	40da      	lsrs	r2, r3
 8007afc:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <HAL_RCC_ClockConfig+0x1b0>)
 8007afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007b00:	2003      	movs	r0, #3
 8007b02:	f7fc fc31 	bl	8004368 <HAL_InitTick>
  
  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	0018      	movs	r0, r3
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b004      	add	sp, #16
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40022000 	.word	0x40022000
 8007b14:	40021000 	.word	0x40021000
 8007b18:	00001388 	.word	0x00001388
 8007b1c:	fffff8ff 	.word	0xfffff8ff
 8007b20:	08016840 	.word	0x08016840
 8007b24:	20000070 	.word	0x20000070

08007b28 <HAL_RCC_GetSysClockFreq>:
=======
 8006c1c:	f000 f820 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006c20:	0001      	movs	r1, r0
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <HAL_RCC_ClockConfig+0x1a0>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	091b      	lsrs	r3, r3, #4
 8006c28:	220f      	movs	r2, #15
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ac>)
 8006c2e:	5cd3      	ldrb	r3, [r2, r3]
 8006c30:	000a      	movs	r2, r1
 8006c32:	40da      	lsrs	r2, r3
 8006c34:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <HAL_RCC_ClockConfig+0x1b0>)
 8006c36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c38:	2003      	movs	r0, #3
 8006c3a:	f7fc fdad 	bl	8003798 <HAL_InitTick>
  
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40022000 	.word	0x40022000
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	00001388 	.word	0x00001388
 8006c54:	fffff8ff 	.word	0xfffff8ff
 8006c58:	0801525c 	.word	0x0801525c
 8006c5c:	20000018 	.word	0x20000018

08006c60 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
=======
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007b42:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	220c      	movs	r2, #12
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	2b0c      	cmp	r3, #12
 8007b50:	d046      	beq.n	8007be0 <HAL_RCC_GetSysClockFreq+0xb8>
 8007b52:	d848      	bhi.n	8007be6 <HAL_RCC_GetSysClockFreq+0xbe>
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d002      	beq.n	8007b5e <HAL_RCC_GetSysClockFreq+0x36>
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d003      	beq.n	8007b64 <HAL_RCC_GetSysClockFreq+0x3c>
 8007b5c:	e043      	b.n	8007be6 <HAL_RCC_GetSysClockFreq+0xbe>
=======
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	2300      	movs	r3, #0
 8006c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	220c      	movs	r2, #12
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d046      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xb8>
 8006c8a:	d848      	bhi.n	8006d1e <HAL_RCC_GetSysClockFreq+0xbe>
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d002      	beq.n	8006c96 <HAL_RCC_GetSysClockFreq+0x36>
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d003      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x3c>
 8006c94:	e043      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0xbe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8007b5e:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8007b60:	613b      	str	r3, [r7, #16]
      break;
 8007b62:	e043      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0xc4>
=======
 8006c96:	4b27      	ldr	r3, [pc, #156]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c98:	613b      	str	r3, [r7, #16]
      break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xc4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
<<<<<<< HEAD
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0c9b      	lsrs	r3, r3, #18
 8007b68:	220f      	movs	r2, #15
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	4a24      	ldr	r2, [pc, #144]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007b6e:	5cd3      	ldrb	r3, [r2, r3]
 8007b70:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007b72:	4b21      	ldr	r3, [pc, #132]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	220f      	movs	r2, #15
 8007b78:	4013      	ands	r3, r2
 8007b7a:	4a22      	ldr	r2, [pc, #136]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0xdc>)
 8007b7c:	5cd3      	ldrb	r3, [r2, r3]
 8007b7e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	23c0      	movs	r3, #192	@ 0xc0
 8007b84:	025b      	lsls	r3, r3, #9
 8007b86:	401a      	ands	r2, r3
 8007b88:	2380      	movs	r3, #128	@ 0x80
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	481a      	ldr	r0, [pc, #104]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8007b94:	f7f8 fad4 	bl	8000140 <__udivsi3>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	001a      	movs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4353      	muls	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e01a      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	23c0      	movs	r3, #192	@ 0xc0
 8007ba8:	025b      	lsls	r3, r3, #9
 8007baa:	401a      	ands	r2, r3
 8007bac:	23c0      	movs	r3, #192	@ 0xc0
 8007bae:	025b      	lsls	r3, r3, #9
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d109      	bne.n	8007bc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4814      	ldr	r0, [pc, #80]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007bb8:	f7f8 fac2 	bl	8000140 <__udivsi3>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4353      	muls	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xb2>
=======
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	0c9b      	lsrs	r3, r3, #18
 8006ca0:	220f      	movs	r2, #15
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
 8006ca8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006caa:	4b21      	ldr	r3, [pc, #132]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	220f      	movs	r2, #15
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	4a22      	ldr	r2, [pc, #136]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xdc>)
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
 8006cb6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	23c0      	movs	r3, #192	@ 0xc0
 8006cbc:	025b      	lsls	r3, r3, #9
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	2380      	movs	r3, #128	@ 0x80
 8006cc2:	025b      	lsls	r3, r3, #9
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d109      	bne.n	8006cdc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	481a      	ldr	r0, [pc, #104]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ccc:	f7f9 fa38 	bl	8000140 <__udivsi3>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4353      	muls	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e01a      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	23c0      	movs	r3, #192	@ 0xc0
 8006ce0:	025b      	lsls	r3, r3, #9
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	23c0      	movs	r3, #192	@ 0xc0
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d109      	bne.n	8006d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4814      	ldr	r0, [pc, #80]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006cf0:	f7f9 fa26 	bl	8000140 <__udivsi3>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4353      	muls	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0xb2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
<<<<<<< HEAD
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	480c      	ldr	r0, [pc, #48]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8007bcc:	f7f8 fab8 	bl	8000140 <__udivsi3>
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4353      	muls	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
=======
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	480c      	ldr	r0, [pc, #48]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d04:	f7f9 fa1c 	bl	8000140 <__udivsi3>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4353      	muls	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
<<<<<<< HEAD
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	613b      	str	r3, [r7, #16]
      break;
 8007bde:	e005      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0xc4>
=======
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	613b      	str	r3, [r7, #16]
      break;
 8006d16:	e005      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xc4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
<<<<<<< HEAD
 8007be0:	4b09      	ldr	r3, [pc, #36]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007be2:	613b      	str	r3, [r7, #16]
      break;
 8007be4:	e002      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0xc4>
=======
 8006d18:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006d1a:	613b      	str	r3, [r7, #16]
      break;
 8006d1c:	e002      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xc4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8007be6:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8007be8:	613b      	str	r3, [r7, #16]
      break;
 8007bea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007bec:	693b      	ldr	r3, [r7, #16]
}
 8007bee:	0018      	movs	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b006      	add	sp, #24
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	40021000 	.word	0x40021000
 8007bfc:	007a1200 	.word	0x007a1200
 8007c00:	08016858 	.word	0x08016858
 8007c04:	08016868 	.word	0x08016868
 8007c08:	02dc6c00 	.word	0x02dc6c00

08007c0c <HAL_RCC_GetHCLKFreq>:
=======
 8006d1e:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d20:	613b      	str	r3, [r7, #16]
      break;
 8006d22:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006d24:	693b      	ldr	r3, [r7, #16]
}
 8006d26:	0018      	movs	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b006      	add	sp, #24
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	40021000 	.word	0x40021000
 8006d34:	007a1200 	.word	0x007a1200
 8006d38:	08015274 	.word	0x08015274
 8006d3c:	08015284 	.word	0x08015284
 8006d40:	02dc6c00 	.word	0x02dc6c00

08006d44 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c10:	4b02      	ldr	r3, [pc, #8]	@ (8007c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8007c12:	681b      	ldr	r3, [r3, #0]
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	20000070 	.word	0x20000070

08007c20 <HAL_RCC_GetPCLK1Freq>:
=======
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d48:	4b02      	ldr	r3, [pc, #8]	@ (8006d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	20000018 	.word	0x20000018

08006d58 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007c24:	f7ff fff2 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 8007c28:	0001      	movs	r1, r0
 8007c2a:	4b06      	ldr	r3, [pc, #24]	@ (8007c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	2207      	movs	r2, #7
 8007c32:	4013      	ands	r3, r2
 8007c34:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c36:	5cd3      	ldrb	r3, [r2, r3]
 8007c38:	40d9      	lsrs	r1, r3
 8007c3a:	000b      	movs	r3, r1
}    
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	40021000 	.word	0x40021000
 8007c48:	08016850 	.word	0x08016850

08007c4c <HAL_RCCEx_PeriphCLKConfig>:
=======
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006d5c:	f7ff fff2 	bl	8006d44 <HAL_RCC_GetHCLKFreq>
 8006d60:	0001      	movs	r1, r0
 8006d62:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	2207      	movs	r2, #7
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	4a04      	ldr	r2, [pc, #16]	@ (8006d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	40d9      	lsrs	r1, r3
 8006d72:	000b      	movs	r3, r1
}    
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	0801526c 	.word	0x0801526c

08006d84 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
=======
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	2380      	movs	r3, #128	@ 0x80
 8007c62:	025b      	lsls	r3, r3, #9
 8007c64:	4013      	ands	r3, r2
 8007c66:	d100      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007c68:	e08e      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	2380      	movs	r3, #128	@ 0x80
 8006d9a:	025b      	lsls	r3, r3, #9
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006da0:	e08e      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 8007c6a:	2017      	movs	r0, #23
 8007c6c:	183b      	adds	r3, r7, r0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
=======
 8006da2:	2017      	movs	r0, #23
 8006da4:	183b      	adds	r3, r7, r0
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8007c72:	4b6e      	ldr	r3, [pc, #440]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c74:	69da      	ldr	r2, [r3, #28]
 8007c76:	2380      	movs	r3, #128	@ 0x80
 8007c78:	055b      	lsls	r3, r3, #21
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d110      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c80:	69da      	ldr	r2, [r3, #28]
 8007c82:	4b6a      	ldr	r3, [pc, #424]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c84:	2180      	movs	r1, #128	@ 0x80
 8007c86:	0549      	lsls	r1, r1, #21
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	61da      	str	r2, [r3, #28]
 8007c8c:	4b67      	ldr	r3, [pc, #412]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	2380      	movs	r3, #128	@ 0x80
 8007c92:	055b      	lsls	r3, r3, #21
 8007c94:	4013      	ands	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c9a:	183b      	adds	r3, r7, r0
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca0:	4b63      	ldr	r3, [pc, #396]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	2380      	movs	r3, #128	@ 0x80
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d11a      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cac:	4b60      	ldr	r3, [pc, #384]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	4b5f      	ldr	r3, [pc, #380]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cb2:	2180      	movs	r1, #128	@ 0x80
 8007cb4:	0049      	lsls	r1, r1, #1
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cba:	f7fc fb9b 	bl	80043f4 <HAL_GetTick>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc4:	f7fc fb96 	bl	80043f4 <HAL_GetTick>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	@ 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e0a6      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd6:	4b56      	ldr	r3, [pc, #344]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	2380      	movs	r3, #128	@ 0x80
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
=======
 8006daa:	4b6e      	ldr	r3, [pc, #440]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	2380      	movs	r3, #128	@ 0x80
 8006db0:	055b      	lsls	r3, r3, #21
 8006db2:	4013      	ands	r3, r2
 8006db4:	d110      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006db6:	4b6b      	ldr	r3, [pc, #428]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006db8:	69da      	ldr	r2, [r3, #28]
 8006dba:	4b6a      	ldr	r3, [pc, #424]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dbc:	2180      	movs	r1, #128	@ 0x80
 8006dbe:	0549      	lsls	r1, r1, #21
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	61da      	str	r2, [r3, #28]
 8006dc4:	4b67      	ldr	r3, [pc, #412]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	2380      	movs	r3, #128	@ 0x80
 8006dca:	055b      	lsls	r3, r3, #21
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dd2:	183b      	adds	r3, r7, r0
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd8:	4b63      	ldr	r3, [pc, #396]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	@ 0x80
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	4013      	ands	r3, r2
 8006de2:	d11a      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006de4:	4b60      	ldr	r3, [pc, #384]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b5f      	ldr	r3, [pc, #380]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006dea:	2180      	movs	r1, #128	@ 0x80
 8006dec:	0049      	lsls	r1, r1, #1
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df2:	f7fc fd17 	bl	8003824 <HAL_GetTick>
 8006df6:	0003      	movs	r3, r0
 8006df8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfa:	e008      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfc:	f7fc fd12 	bl	8003824 <HAL_GetTick>
 8006e00:	0002      	movs	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b64      	cmp	r3, #100	@ 0x64
 8006e08:	d901      	bls.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e0a6      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0e:	4b56      	ldr	r3, [pc, #344]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	2380      	movs	r3, #128	@ 0x80
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4013      	ands	r3, r2
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x78>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8007ce2:	4b52      	ldr	r3, [pc, #328]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	23c0      	movs	r3, #192	@ 0xc0
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d034      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	23c0      	movs	r3, #192	@ 0xc0
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d02c      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d04:	4b49      	ldr	r3, [pc, #292]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	4a4a      	ldr	r2, [pc, #296]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d0e:	4b47      	ldr	r3, [pc, #284]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d10:	6a1a      	ldr	r2, [r3, #32]
 8007d12:	4b46      	ldr	r3, [pc, #280]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d14:	2180      	movs	r1, #128	@ 0x80
 8007d16:	0249      	lsls	r1, r1, #9
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d1c:	4b43      	ldr	r3, [pc, #268]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	4b42      	ldr	r3, [pc, #264]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d22:	4945      	ldr	r1, [pc, #276]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007d24:	400a      	ands	r2, r1
 8007d26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d28:	4b40      	ldr	r3, [pc, #256]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	4013      	ands	r3, r2
 8007d34:	d013      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d36:	f7fc fb5d 	bl	80043f4 <HAL_GetTick>
 8007d3a:	0003      	movs	r3, r0
 8007d3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3e:	e009      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d40:	f7fc fb58 	bl	80043f4 <HAL_GetTick>
 8007d44:	0002      	movs	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e067      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d54:	4b35      	ldr	r3, [pc, #212]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d0f0      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 8006e1a:	4b52      	ldr	r3, [pc, #328]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	23c0      	movs	r3, #192	@ 0xc0
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4013      	ands	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d034      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	23c0      	movs	r3, #192	@ 0xc0
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4013      	ands	r3, r2
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d02c      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e3c:	4b49      	ldr	r3, [pc, #292]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	4a4a      	ldr	r2, [pc, #296]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e46:	4b47      	ldr	r3, [pc, #284]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	4b46      	ldr	r3, [pc, #280]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e4c:	2180      	movs	r1, #128	@ 0x80
 8006e4e:	0249      	lsls	r1, r1, #9
 8006e50:	430a      	orrs	r2, r1
 8006e52:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e54:	4b43      	ldr	r3, [pc, #268]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	4b42      	ldr	r3, [pc, #264]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e5a:	4945      	ldr	r1, [pc, #276]	@ (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e60:	4b40      	ldr	r3, [pc, #256]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6e:	f7fc fcd9 	bl	8003824 <HAL_GetTick>
 8006e72:	0003      	movs	r3, r0
 8006e74:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e76:	e009      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e78:	f7fc fcd4 	bl	8003824 <HAL_GetTick>
 8006e7c:	0002      	movs	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	4a3c      	ldr	r2, [pc, #240]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e067      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e8c:	4b35      	ldr	r3, [pc, #212]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	2202      	movs	r2, #2
 8006e92:	4013      	ands	r3, r2
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8007d5e:	4b33      	ldr	r3, [pc, #204]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	4a34      	ldr	r2, [pc, #208]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	0019      	movs	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d72:	2317      	movs	r3, #23
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d105      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	4b2a      	ldr	r3, [pc, #168]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d82:	492f      	ldr	r1, [pc, #188]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007d84:	400a      	ands	r2, r1
 8007d86:	61da      	str	r2, [r3, #28]
=======
 8006e96:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	4a34      	ldr	r2, [pc, #208]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006eaa:	2317      	movs	r3, #23
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eba:	492f      	ldr	r1, [pc, #188]	@ (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	61da      	str	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d009      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
=======
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x15a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d96:	2203      	movs	r2, #3
 8007d98:	4393      	bics	r3, r2
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	4b22      	ldr	r3, [pc, #136]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007da2:	430a      	orrs	r2, r1
 8007da4:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006eca:	4b26      	ldr	r3, [pc, #152]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ece:	2203      	movs	r2, #3
 8006ed0:	4393      	bics	r3, r2
 8006ed2:	0019      	movs	r1, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	4b22      	ldr	r3, [pc, #136]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eda:	430a      	orrs	r2, r1
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2202      	movs	r2, #2
 8007dac:	4013      	ands	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
=======
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d009      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x178>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8007db0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	4a23      	ldr	r2, [pc, #140]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	0019      	movs	r1, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eec:	4a23      	ldr	r2, [pc, #140]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x196>
=======
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2220      	movs	r2, #32
 8006f02:	4013      	ands	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x196>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8007dce:	4b17      	ldr	r3, [pc, #92]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	2210      	movs	r2, #16
 8007dd4:	4393      	bics	r3, r2
 8007dd6:	0019      	movs	r1, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dde:	430a      	orrs	r2, r1
 8007de0:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006f06:	4b17      	ldr	r3, [pc, #92]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	4393      	bics	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f16:	430a      	orrs	r2, r1
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	2380      	movs	r3, #128	@ 0x80
 8007de8:	029b      	lsls	r3, r3, #10
 8007dea:	4013      	ands	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
=======
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	2380      	movs	r3, #128	@ 0x80
 8006f20:	029b      	lsls	r3, r3, #10
 8006f22:	4013      	ands	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 8007dee:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	2280      	movs	r2, #128	@ 0x80
 8007df4:	4393      	bics	r3, r2
 8007df6:	0019      	movs	r1, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006f26:	4b0f      	ldr	r3, [pc, #60]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2a:	2280      	movs	r2, #128	@ 0x80
 8006f2c:	4393      	bics	r3, r2
 8006f2e:	0019      	movs	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f36:	430a      	orrs	r2, r1
 8006f38:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d009      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	2380      	movs	r3, #128	@ 0x80
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4013      	ands	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 8007e0e:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	2240      	movs	r2, #64	@ 0x40
 8007e14:	4393      	bics	r3, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695a      	ldr	r2, [r3, #20]
 8007e1c:	4b03      	ldr	r3, [pc, #12]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006f46:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	2240      	movs	r2, #64	@ 0x40
 8006f4c:	4393      	bics	r3, r2
 8006f4e:	0019      	movs	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	4b03      	ldr	r3, [pc, #12]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f56:	430a      	orrs	r2, r1
 8006f58:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
<<<<<<< HEAD
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	0018      	movs	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b006      	add	sp, #24
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40007000 	.word	0x40007000
 8007e34:	fffffcff 	.word	0xfffffcff
 8007e38:	fffeffff 	.word	0xfffeffff
 8007e3c:	00001388 	.word	0x00001388
 8007e40:	efffffff 	.word	0xefffffff
 8007e44:	fffcffff 	.word	0xfffcffff

08007e48 <HAL_SPI_Init>:
=======
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b006      	add	sp, #24
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40021000 	.word	0x40021000
 8006f68:	40007000 	.word	0x40007000
 8006f6c:	fffffcff 	.word	0xfffffcff
 8006f70:	fffeffff 	.word	0xfffeffff
 8006f74:	00001388 	.word	0x00001388
 8006f78:	efffffff 	.word	0xefffffff
 8006f7c:	fffcffff 	.word	0xfffcffff

08006f80 <HAL_SPI_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
=======
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e0a8      	b.n	8007fac <HAL_SPI_Init+0x164>
=======
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e0a8      	b.n	80070e4 <HAL_SPI_Init+0x164>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <HAL_SPI_Init+0x2e>
=======
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HAL_SPI_Init+0x2e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	2382      	movs	r3, #130	@ 0x82
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d009      	beq.n	8007e82 <HAL_SPI_Init+0x3a>
=======
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	2382      	movs	r3, #130	@ 0x82
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d009      	beq.n	8006fba <HAL_SPI_Init+0x3a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	61da      	str	r2, [r3, #28]
 8007e74:	e005      	b.n	8007e82 <HAL_SPI_Init+0x3a>
=======
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	61da      	str	r2, [r3, #28]
 8006fac:	e005      	b.n	8006fba <HAL_SPI_Init+0x3a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	615a      	str	r2, [r3, #20]
=======
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	225d      	movs	r2, #93	@ 0x5d
 8007e8c:	5c9b      	ldrb	r3, [r3, r2]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	225c      	movs	r2, #92	@ 0x5c
 8007e98:	2100      	movs	r1, #0
 8007e9a:	5499      	strb	r1, [r3, r2]
=======
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	225d      	movs	r2, #93	@ 0x5d
 8006fc4:	5c9b      	ldrb	r3, [r3, r2]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d107      	bne.n	8006fdc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	225c      	movs	r2, #92	@ 0x5c
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7fb ff84 	bl	8003dac <HAL_SPI_MspInit>
=======
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7fb fea8 	bl	8002d2c <HAL_SPI_MspInit>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	225d      	movs	r2, #93	@ 0x5d
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2140      	movs	r1, #64	@ 0x40
 8007eb8:	438a      	bics	r2, r1
 8007eba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	23e0      	movs	r3, #224	@ 0xe0
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d902      	bls.n	8007ece <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e002      	b.n	8007ed4 <HAL_SPI_Init+0x8c>
=======
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	225d      	movs	r2, #93	@ 0x5d
 8006fe0:	2102      	movs	r1, #2
 8006fe2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2140      	movs	r1, #64	@ 0x40
 8006ff0:	438a      	bics	r2, r1
 8006ff2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	23e0      	movs	r3, #224	@ 0xe0
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d902      	bls.n	8007006 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e002      	b.n	800700c <HAL_SPI_Init+0x8c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< HEAD
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	015b      	lsls	r3, r3, #5
 8007ed2:	60fb      	str	r3, [r7, #12]
=======
 8007006:	2380      	movs	r3, #128	@ 0x80
 8007008:	015b      	lsls	r3, r3, #5
 800700a:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< HEAD
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	23f0      	movs	r3, #240	@ 0xf0
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d008      	beq.n	8007ef2 <HAL_SPI_Init+0xaa>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	23e0      	movs	r3, #224	@ 0xe0
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d002      	beq.n	8007ef2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	23f0      	movs	r3, #240	@ 0xf0
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	429a      	cmp	r2, r3
 8007016:	d008      	beq.n	800702a <HAL_SPI_Init+0xaa>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	23e0      	movs	r3, #224	@ 0xe0
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	429a      	cmp	r2, r3
 8007022:	d002      	beq.n	800702a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	2382      	movs	r3, #130	@ 0x82
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	401a      	ands	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6899      	ldr	r1, [r3, #8]
 8007f00:	2384      	movs	r3, #132	@ 0x84
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	400b      	ands	r3, r1
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	400b      	ands	r3, r1
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2101      	movs	r1, #1
 8007f18:	400b      	ands	r3, r1
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6999      	ldr	r1, [r3, #24]
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	400b      	ands	r3, r1
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	2138      	movs	r1, #56	@ 0x38
 8007f2e:	400b      	ands	r3, r1
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	2180      	movs	r1, #128	@ 0x80
 8007f38:	400b      	ands	r3, r1
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	0011      	movs	r1, r2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f42:	2380      	movs	r3, #128	@ 0x80
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	401a      	ands	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	601a      	str	r2, [r3, #0]
=======
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	2382      	movs	r3, #130	@ 0x82
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	401a      	ands	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6899      	ldr	r1, [r3, #8]
 8007038:	2384      	movs	r3, #132	@ 0x84
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	400b      	ands	r3, r1
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2102      	movs	r1, #2
 8007046:	400b      	ands	r3, r1
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2101      	movs	r1, #1
 8007050:	400b      	ands	r3, r1
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6999      	ldr	r1, [r3, #24]
 8007058:	2380      	movs	r3, #128	@ 0x80
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	400b      	ands	r3, r1
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	2138      	movs	r1, #56	@ 0x38
 8007066:	400b      	ands	r3, r1
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	2180      	movs	r1, #128	@ 0x80
 8007070:	400b      	ands	r3, r1
 8007072:	431a      	orrs	r2, r3
 8007074:	0011      	movs	r1, r2
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	019b      	lsls	r3, r3, #6
 800707e:	401a      	ands	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< HEAD
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	0c1b      	lsrs	r3, r3, #16
 8007f56:	2204      	movs	r2, #4
 8007f58:	401a      	ands	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5e:	2110      	movs	r1, #16
 8007f60:	400b      	ands	r3, r1
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f68:	2108      	movs	r1, #8
 8007f6a:	400b      	ands	r3, r1
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68d9      	ldr	r1, [r3, #12]
 8007f72:	23f0      	movs	r3, #240	@ 0xf0
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	400b      	ands	r3, r1
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	2380      	movs	r3, #128	@ 0x80
 8007f80:	015b      	lsls	r3, r3, #5
 8007f82:	401a      	ands	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
=======
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	2204      	movs	r2, #4
 8007090:	401a      	ands	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	2110      	movs	r1, #16
 8007098:	400b      	ands	r3, r1
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a0:	2108      	movs	r1, #8
 80070a2:	400b      	ands	r3, r1
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	23f0      	movs	r3, #240	@ 0xf0
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	400b      	ands	r3, r1
 80070b0:	431a      	orrs	r2, r3
 80070b2:	0011      	movs	r1, r2
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	2380      	movs	r3, #128	@ 0x80
 80070b8:	015b      	lsls	r3, r3, #5
 80070ba:	401a      	ands	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4907      	ldr	r1, [pc, #28]	@ (8007fb4 <HAL_SPI_Init+0x16c>)
 8007f98:	400a      	ands	r2, r1
 8007f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	225d      	movs	r2, #93	@ 0x5d
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b004      	add	sp, #16
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	fffff7ff 	.word	0xfffff7ff

08007fb8 <HAL_SPI_Transmit>:
=======
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4907      	ldr	r1, [pc, #28]	@ (80070ec <HAL_SPI_Init+0x16c>)
 80070d0:	400a      	ands	r2, r1
 80070d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	225d      	movs	r2, #93	@ 0x5d
 80070de:	2101      	movs	r1, #1
 80070e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b004      	add	sp, #16
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	fffff7ff 	.word	0xfffff7ff

080070f0 <HAL_SPI_Transmit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	1dbb      	adds	r3, r7, #6
 8007fc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fc8:	231f      	movs	r3, #31
 8007fca:	18fb      	adds	r3, r7, r3
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
=======
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	1dbb      	adds	r3, r7, #6
 80070fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007100:	231f      	movs	r3, #31
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	225c      	movs	r2, #92	@ 0x5c
 8007fd4:	5c9b      	ldrb	r3, [r3, r2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_SPI_Transmit+0x26>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e147      	b.n	800826e <HAL_SPI_Transmit+0x2b6>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	225c      	movs	r2, #92	@ 0x5c
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe6:	f7fc fa05 	bl	80043f4 <HAL_GetTick>
 8007fea:	0003      	movs	r3, r0
 8007fec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007fee:	2316      	movs	r3, #22
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	1dba      	adds	r2, r7, #6
 8007ff4:	8812      	ldrh	r2, [r2, #0]
 8007ff6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	225d      	movs	r2, #93	@ 0x5d
 8007ffc:	5c9b      	ldrb	r3, [r3, r2]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	d004      	beq.n	800800e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008004:	231f      	movs	r3, #31
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	2202      	movs	r2, #2
 800800a:	701a      	strb	r2, [r3, #0]
    goto error;
 800800c:	e128      	b.n	8008260 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_SPI_Transmit+0x64>
 8008014:	1dbb      	adds	r3, r7, #6
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800801c:	231f      	movs	r3, #31
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	2201      	movs	r2, #1
 8008022:	701a      	strb	r2, [r3, #0]
    goto error;
 8008024:	e11c      	b.n	8008260 <HAL_SPI_Transmit+0x2a8>
=======
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225c      	movs	r2, #92	@ 0x5c
 800710c:	5c9b      	ldrb	r3, [r3, r2]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_SPI_Transmit+0x26>
 8007112:	2302      	movs	r3, #2
 8007114:	e147      	b.n	80073a6 <HAL_SPI_Transmit+0x2b6>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	225c      	movs	r2, #92	@ 0x5c
 800711a:	2101      	movs	r1, #1
 800711c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800711e:	f7fc fb81 	bl	8003824 <HAL_GetTick>
 8007122:	0003      	movs	r3, r0
 8007124:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007126:	2316      	movs	r3, #22
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	1dba      	adds	r2, r7, #6
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	225d      	movs	r2, #93	@ 0x5d
 8007134:	5c9b      	ldrb	r3, [r3, r2]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d004      	beq.n	8007146 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800713c:	231f      	movs	r3, #31
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	2202      	movs	r2, #2
 8007142:	701a      	strb	r2, [r3, #0]
    goto error;
 8007144:	e128      	b.n	8007398 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_SPI_Transmit+0x64>
 800714c:	1dbb      	adds	r3, r7, #6
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007154:	231f      	movs	r3, #31
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	2201      	movs	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]
    goto error;
 800715c:	e11c      	b.n	8007398 <HAL_SPI_Transmit+0x2a8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	225d      	movs	r2, #93	@ 0x5d
 800802a:	2103      	movs	r1, #3
 800802c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1dba      	adds	r2, r7, #6
 800803e:	8812      	ldrh	r2, [r2, #0]
 8008040:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1dba      	adds	r2, r7, #6
 8008046:	8812      	ldrh	r2, [r2, #0]
 8008048:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2244      	movs	r2, #68	@ 0x44
 8008054:	2100      	movs	r1, #0
 8008056:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2246      	movs	r2, #70	@ 0x46
 800805c:	2100      	movs	r1, #0
 800805e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	429a      	cmp	r2, r3
 8008076:	d110      	bne.n	800809a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2140      	movs	r1, #64	@ 0x40
 8008084:	438a      	bics	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2180      	movs	r1, #128	@ 0x80
 8008094:	01c9      	lsls	r1, r1, #7
 8008096:	430a      	orrs	r2, r1
 8008098:	601a      	str	r2, [r3, #0]
=======
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	225d      	movs	r2, #93	@ 0x5d
 8007162:	2103      	movs	r1, #3
 8007164:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1dba      	adds	r2, r7, #6
 8007176:	8812      	ldrh	r2, [r2, #0]
 8007178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1dba      	adds	r2, r7, #6
 800717e:	8812      	ldrh	r2, [r2, #0]
 8007180:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2244      	movs	r2, #68	@ 0x44
 800718c:	2100      	movs	r1, #0
 800718e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2246      	movs	r2, #70	@ 0x46
 8007194:	2100      	movs	r1, #0
 8007196:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	2380      	movs	r3, #128	@ 0x80
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d110      	bne.n	80071d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2140      	movs	r1, #64	@ 0x40
 80071bc:	438a      	bics	r2, r1
 80071be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2180      	movs	r1, #128	@ 0x80
 80071cc:	01c9      	lsls	r1, r1, #7
 80071ce:	430a      	orrs	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2240      	movs	r2, #64	@ 0x40
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d007      	beq.n	80080b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2140      	movs	r1, #64	@ 0x40
 80080b4:	430a      	orrs	r2, r1
 80080b6:	601a      	str	r2, [r3, #0]
=======
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2240      	movs	r2, #64	@ 0x40
 80071da:	4013      	ands	r3, r2
 80071dc:	2b40      	cmp	r3, #64	@ 0x40
 80071de:	d007      	beq.n	80071f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2140      	movs	r1, #64	@ 0x40
 80071ec:	430a      	orrs	r2, r1
 80071ee:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	23e0      	movs	r3, #224	@ 0xe0
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d952      	bls.n	800816a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <HAL_SPI_Transmit+0x11e>
 80080cc:	2316      	movs	r3, #22
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d143      	bne.n	800815e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080da:	881a      	ldrh	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	1c9a      	adds	r2, r3, #2
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080fa:	e030      	b.n	800815e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2202      	movs	r2, #2
 8008104:	4013      	ands	r3, r2
 8008106:	2b02      	cmp	r3, #2
 8008108:	d112      	bne.n	8008130 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	881a      	ldrh	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	1c9a      	adds	r2, r3, #2
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800812e:	e016      	b.n	800815e <HAL_SPI_Transmit+0x1a6>
=======
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	23e0      	movs	r3, #224	@ 0xe0
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d952      	bls.n	80072a2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <HAL_SPI_Transmit+0x11e>
 8007204:	2316      	movs	r3, #22
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d143      	bne.n	8007296 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721e:	1c9a      	adds	r2, r3, #2
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007232:	e030      	b.n	8007296 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2202      	movs	r2, #2
 800723c:	4013      	ands	r3, r2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d112      	bne.n	8007268 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	881a      	ldrh	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	1c9a      	adds	r2, r3, #2
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007266:	e016      	b.n	8007296 <HAL_SPI_Transmit+0x1a6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8008130:	f7fc f960 	bl	80043f4 <HAL_GetTick>
 8008134:	0002      	movs	r2, r0
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d802      	bhi.n	8008146 <HAL_SPI_Transmit+0x18e>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	d102      	bne.n	800814c <HAL_SPI_Transmit+0x194>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d108      	bne.n	800815e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800814c:	231f      	movs	r3, #31
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	2203      	movs	r2, #3
 8008152:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	225d      	movs	r2, #93	@ 0x5d
 8008158:	2101      	movs	r1, #1
 800815a:	5499      	strb	r1, [r3, r2]
          goto error;
 800815c:	e080      	b.n	8008260 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008162:	b29b      	uxth	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1c9      	bne.n	80080fc <HAL_SPI_Transmit+0x144>
 8008168:	e053      	b.n	8008212 <HAL_SPI_Transmit+0x25a>
=======
 8007268:	f7fc fadc 	bl	8003824 <HAL_GetTick>
 800726c:	0002      	movs	r2, r0
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d802      	bhi.n	800727e <HAL_SPI_Transmit+0x18e>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	3301      	adds	r3, #1
 800727c:	d102      	bne.n	8007284 <HAL_SPI_Transmit+0x194>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d108      	bne.n	8007296 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007284:	231f      	movs	r3, #31
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	2203      	movs	r2, #3
 800728a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	225d      	movs	r2, #93	@ 0x5d
 8007290:	2101      	movs	r1, #1
 8007292:	5499      	strb	r1, [r3, r2]
          goto error;
 8007294:	e080      	b.n	8007398 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1c9      	bne.n	8007234 <HAL_SPI_Transmit+0x144>
 80072a0:	e053      	b.n	800734a <HAL_SPI_Transmit+0x25a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <HAL_SPI_Transmit+0x1c4>
 8008172:	2316      	movs	r3, #22
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d145      	bne.n	8008208 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	7812      	ldrb	r2, [r2, #0]
 8008188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80081a2:	e031      	b.n	8008208 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2202      	movs	r2, #2
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d113      	bne.n	80081da <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081d8:	e016      	b.n	8008208 <HAL_SPI_Transmit+0x250>
=======
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <HAL_SPI_Transmit+0x1c4>
 80072aa:	2316      	movs	r3, #22
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d145      	bne.n	8007340 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80072da:	e031      	b.n	8007340 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2202      	movs	r2, #2
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d113      	bne.n	8007312 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007310:	e016      	b.n	8007340 <HAL_SPI_Transmit+0x250>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80081da:	f7fc f90b 	bl	80043f4 <HAL_GetTick>
 80081de:	0002      	movs	r2, r0
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d802      	bhi.n	80081f0 <HAL_SPI_Transmit+0x238>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	d102      	bne.n	80081f6 <HAL_SPI_Transmit+0x23e>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d108      	bne.n	8008208 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80081f6:	231f      	movs	r3, #31
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	2203      	movs	r2, #3
 80081fc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	225d      	movs	r2, #93	@ 0x5d
 8008202:	2101      	movs	r1, #1
 8008204:	5499      	strb	r1, [r3, r2]
          goto error;
 8008206:	e02b      	b.n	8008260 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1c8      	bne.n	80081a4 <HAL_SPI_Transmit+0x1ec>
=======
 8007312:	f7fc fa87 	bl	8003824 <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d802      	bhi.n	8007328 <HAL_SPI_Transmit+0x238>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_SPI_Transmit+0x23e>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800732e:	231f      	movs	r3, #31
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	2203      	movs	r2, #3
 8007334:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	225d      	movs	r2, #93	@ 0x5d
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
          goto error;
 800733e:	e02b      	b.n	8007398 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1c8      	bne.n	80072dc <HAL_SPI_Transmit+0x1ec>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	0018      	movs	r0, r3
 800821a:	f000 fe9b 	bl	8008f54 <SPI_EndRxTxTransaction>
 800821e:	1e03      	subs	r3, r0, #0
 8008220:	d002      	beq.n	8008228 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	0018      	movs	r0, r3
 8007352:	f000 fe9b 	bl	800808c <SPI_EndRxTxTransaction>
 8007356:	1e03      	subs	r3, r0, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800824e:	231f      	movs	r3, #31
 8008250:	18fb      	adds	r3, r7, r3
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e003      	b.n	8008260 <HAL_SPI_Transmit+0x2a8>
=======
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007386:	231f      	movs	r3, #31
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e003      	b.n	8007398 <HAL_SPI_Transmit+0x2a8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	225d      	movs	r2, #93	@ 0x5d
 800825c:	2101      	movs	r1, #1
 800825e:	5499      	strb	r1, [r3, r2]
=======
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	225d      	movs	r2, #93	@ 0x5d
 8007394:	2101      	movs	r1, #1
 8007396:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	225c      	movs	r2, #92	@ 0x5c
 8008264:	2100      	movs	r1, #0
 8008266:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008268:	231f      	movs	r3, #31
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	781b      	ldrb	r3, [r3, #0]
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b008      	add	sp, #32
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <HAL_SPI_Receive>:
=======
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	225c      	movs	r2, #92	@ 0x5c
 800739c:	2100      	movs	r1, #0
 800739e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073a0:	231f      	movs	r3, #31
 80073a2:	18fb      	adds	r3, r7, r3
 80073a4:	781b      	ldrb	r3, [r3, #0]
}
 80073a6:	0018      	movs	r0, r3
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b008      	add	sp, #32
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <HAL_SPI_Receive>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b089      	sub	sp, #36	@ 0x24
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	801a      	strh	r2, [r3, #0]
=======
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b089      	sub	sp, #36	@ 0x24
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	1dbb      	adds	r3, r7, #6
 80073be:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< HEAD
 8008288:	2117      	movs	r1, #23
 800828a:	187b      	adds	r3, r7, r1
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	225d      	movs	r2, #93	@ 0x5d
 8008294:	5c9b      	ldrb	r3, [r3, r2]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d003      	beq.n	80082a4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800829c:	187b      	adds	r3, r7, r1
 800829e:	2202      	movs	r2, #2
 80082a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80082a2:	e12b      	b.n	80084fc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	2382      	movs	r3, #130	@ 0x82
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d113      	bne.n	80082d8 <HAL_SPI_Receive+0x60>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10f      	bne.n	80082d8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	225d      	movs	r2, #93	@ 0x5d
 80082bc:	2104      	movs	r1, #4
 80082be:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082c0:	1dbb      	adds	r3, r7, #6
 80082c2:	881c      	ldrh	r4, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	0023      	movs	r3, r4
 80082d0:	f000 f924 	bl	800851c <HAL_SPI_TransmitReceive>
 80082d4:	0003      	movs	r3, r0
 80082d6:	e118      	b.n	800850a <HAL_SPI_Receive+0x292>
=======
 80073c0:	2117      	movs	r1, #23
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	225d      	movs	r2, #93	@ 0x5d
 80073cc:	5c9b      	ldrb	r3, [r3, r2]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d003      	beq.n	80073dc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80073da:	e12b      	b.n	8007634 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	2382      	movs	r3, #130	@ 0x82
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d113      	bne.n	8007410 <HAL_SPI_Receive+0x60>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10f      	bne.n	8007410 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	225d      	movs	r2, #93	@ 0x5d
 80073f4:	2104      	movs	r1, #4
 80073f6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073f8:	1dbb      	adds	r3, r7, #6
 80073fa:	881c      	ldrh	r4, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	0023      	movs	r3, r4
 8007408:	f000 f924 	bl	8007654 <HAL_SPI_TransmitReceive>
 800740c:	0003      	movs	r3, r0
 800740e:	e118      	b.n	8007642 <HAL_SPI_Receive+0x292>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	225c      	movs	r2, #92	@ 0x5c
 80082dc:	5c9b      	ldrb	r3, [r3, r2]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <HAL_SPI_Receive+0x6e>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e111      	b.n	800850a <HAL_SPI_Receive+0x292>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	225c      	movs	r2, #92	@ 0x5c
 80082ea:	2101      	movs	r1, #1
 80082ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ee:	f7fc f881 	bl	80043f4 <HAL_GetTick>
 80082f2:	0003      	movs	r3, r0
 80082f4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_SPI_Receive+0x8c>
 80082fc:	1dbb      	adds	r3, r7, #6
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008304:	2317      	movs	r3, #23
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	2201      	movs	r2, #1
 800830a:	701a      	strb	r2, [r3, #0]
    goto error;
 800830c:	e0f6      	b.n	80084fc <HAL_SPI_Receive+0x284>
=======
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	225c      	movs	r2, #92	@ 0x5c
 8007414:	5c9b      	ldrb	r3, [r3, r2]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_SPI_Receive+0x6e>
 800741a:	2302      	movs	r3, #2
 800741c:	e111      	b.n	8007642 <HAL_SPI_Receive+0x292>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	225c      	movs	r2, #92	@ 0x5c
 8007422:	2101      	movs	r1, #1
 8007424:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007426:	f7fc f9fd 	bl	8003824 <HAL_GetTick>
 800742a:	0003      	movs	r3, r0
 800742c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_SPI_Receive+0x8c>
 8007434:	1dbb      	adds	r3, r7, #6
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800743c:	2317      	movs	r3, #23
 800743e:	18fb      	adds	r3, r7, r3
 8007440:	2201      	movs	r2, #1
 8007442:	701a      	strb	r2, [r3, #0]
    goto error;
 8007444:	e0f6      	b.n	8007634 <HAL_SPI_Receive+0x284>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	225d      	movs	r2, #93	@ 0x5d
 8008312:	2104      	movs	r1, #4
 8008314:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1dba      	adds	r2, r7, #6
 8008326:	2144      	movs	r1, #68	@ 0x44
 8008328:	8812      	ldrh	r2, [r2, #0]
 800832a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	1dba      	adds	r2, r7, #6
 8008330:	2146      	movs	r1, #70	@ 0x46
 8008332:	8812      	ldrh	r2, [r2, #0]
 8008334:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	225d      	movs	r2, #93	@ 0x5d
 800744a:	2104      	movs	r1, #4
 800744c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1dba      	adds	r2, r7, #6
 800745e:	2144      	movs	r1, #68	@ 0x44
 8007460:	8812      	ldrh	r2, [r2, #0]
 8007462:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	1dba      	adds	r2, r7, #6
 8007468:	2146      	movs	r1, #70	@ 0x46
 800746a:	8812      	ldrh	r2, [r2, #0]
 800746c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	23e0      	movs	r3, #224	@ 0xe0
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	429a      	cmp	r2, r3
 800835e:	d908      	bls.n	8008372 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	496a      	ldr	r1, [pc, #424]	@ (8008514 <HAL_SPI_Receive+0x29c>)
 800836c:	400a      	ands	r2, r1
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	e008      	b.n	8008384 <HAL_SPI_Receive+0x10c>
=======
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	23e0      	movs	r3, #224	@ 0xe0
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	429a      	cmp	r2, r3
 8007496:	d908      	bls.n	80074aa <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	496a      	ldr	r1, [pc, #424]	@ (800764c <HAL_SPI_Receive+0x29c>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	e008      	b.n	80074bc <HAL_SPI_Receive+0x10c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< HEAD
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2180      	movs	r1, #128	@ 0x80
 800837e:	0149      	lsls	r1, r1, #5
 8008380:	430a      	orrs	r2, r1
 8008382:	605a      	str	r2, [r3, #4]
=======
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2180      	movs	r1, #128	@ 0x80
 80074b6:	0149      	lsls	r1, r1, #5
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	2380      	movs	r3, #128	@ 0x80
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	429a      	cmp	r2, r3
 800838e:	d10f      	bne.n	80083b0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2140      	movs	r1, #64	@ 0x40
 800839c:	438a      	bics	r2, r1
 800839e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	495b      	ldr	r1, [pc, #364]	@ (8008518 <HAL_SPI_Receive+0x2a0>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]
=======
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	2380      	movs	r3, #128	@ 0x80
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d10f      	bne.n	80074e8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2140      	movs	r1, #64	@ 0x40
 80074d4:	438a      	bics	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	495b      	ldr	r1, [pc, #364]	@ (8007650 <HAL_SPI_Receive+0x2a0>)
 80074e4:	400a      	ands	r2, r1
 80074e6:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2240      	movs	r2, #64	@ 0x40
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b40      	cmp	r3, #64	@ 0x40
 80083bc:	d007      	beq.n	80083ce <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2140      	movs	r1, #64	@ 0x40
 80083ca:	430a      	orrs	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
=======
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2240      	movs	r2, #64	@ 0x40
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b40      	cmp	r3, #64	@ 0x40
 80074f4:	d007      	beq.n	8007506 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2140      	movs	r1, #64	@ 0x40
 8007502:	430a      	orrs	r2, r1
 8007504:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	23e0      	movs	r3, #224	@ 0xe0
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d900      	bls.n	80083dc <HAL_SPI_Receive+0x164>
 80083da:	e071      	b.n	80084c0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083dc:	e035      	b.n	800844a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2201      	movs	r2, #1
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d117      	bne.n	800841c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	001a      	movs	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	7812      	ldrb	r2, [r2, #0]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2246      	movs	r2, #70	@ 0x46
 800840c:	5a9b      	ldrh	r3, [r3, r2]
 800840e:	b29b      	uxth	r3, r3
 8008410:	3b01      	subs	r3, #1
 8008412:	b299      	uxth	r1, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2246      	movs	r2, #70	@ 0x46
 8008418:	5299      	strh	r1, [r3, r2]
 800841a:	e016      	b.n	800844a <HAL_SPI_Receive+0x1d2>
=======
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	23e0      	movs	r3, #224	@ 0xe0
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	429a      	cmp	r2, r3
 8007510:	d900      	bls.n	8007514 <HAL_SPI_Receive+0x164>
 8007512:	e071      	b.n	80075f8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007514:	e035      	b.n	8007582 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2201      	movs	r2, #1
 800751e:	4013      	ands	r3, r2
 8007520:	2b01      	cmp	r3, #1
 8007522:	d117      	bne.n	8007554 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	001a      	movs	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2246      	movs	r2, #70	@ 0x46
 8007544:	5a9b      	ldrh	r3, [r3, r2]
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b299      	uxth	r1, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2246      	movs	r2, #70	@ 0x46
 8007550:	5299      	strh	r1, [r3, r2]
 8007552:	e016      	b.n	8007582 <HAL_SPI_Receive+0x1d2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 800841c:	f7fb ffea 	bl	80043f4 <HAL_GetTick>
 8008420:	0002      	movs	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d802      	bhi.n	8008432 <HAL_SPI_Receive+0x1ba>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	d102      	bne.n	8008438 <HAL_SPI_Receive+0x1c0>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d108      	bne.n	800844a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008438:	2317      	movs	r3, #23
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	2203      	movs	r2, #3
 800843e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	225d      	movs	r2, #93	@ 0x5d
 8008444:	2101      	movs	r1, #1
 8008446:	5499      	strb	r1, [r3, r2]
          goto error;
 8008448:	e058      	b.n	80084fc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2246      	movs	r2, #70	@ 0x46
 800844e:	5a9b      	ldrh	r3, [r3, r2]
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1c3      	bne.n	80083de <HAL_SPI_Receive+0x166>
 8008456:	e039      	b.n	80084cc <HAL_SPI_Receive+0x254>
=======
 8007554:	f7fc f966 	bl	8003824 <HAL_GetTick>
 8007558:	0002      	movs	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d802      	bhi.n	800756a <HAL_SPI_Receive+0x1ba>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	d102      	bne.n	8007570 <HAL_SPI_Receive+0x1c0>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007570:	2317      	movs	r3, #23
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	2203      	movs	r2, #3
 8007576:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	225d      	movs	r2, #93	@ 0x5d
 800757c:	2101      	movs	r1, #1
 800757e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007580:	e058      	b.n	8007634 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2246      	movs	r2, #70	@ 0x46
 8007586:	5a9b      	ldrh	r3, [r3, r2]
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1c3      	bne.n	8007516 <HAL_SPI_Receive+0x166>
 800758e:	e039      	b.n	8007604 <HAL_SPI_Receive+0x254>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2201      	movs	r2, #1
 8008460:	4013      	ands	r3, r2
 8008462:	2b01      	cmp	r3, #1
 8008464:	d115      	bne.n	8008492 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	b292      	uxth	r2, r2
 8008472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008478:	1c9a      	adds	r2, r3, #2
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2246      	movs	r2, #70	@ 0x46
 8008482:	5a9b      	ldrh	r3, [r3, r2]
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b299      	uxth	r1, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2246      	movs	r2, #70	@ 0x46
 800848e:	5299      	strh	r1, [r3, r2]
 8008490:	e016      	b.n	80084c0 <HAL_SPI_Receive+0x248>
=======
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	4013      	ands	r3, r2
 800759a:	2b01      	cmp	r3, #1
 800759c:	d115      	bne.n	80075ca <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a8:	b292      	uxth	r2, r2
 80075aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2246      	movs	r2, #70	@ 0x46
 80075ba:	5a9b      	ldrh	r3, [r3, r2]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b299      	uxth	r1, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2246      	movs	r2, #70	@ 0x46
 80075c6:	5299      	strh	r1, [r3, r2]
 80075c8:	e016      	b.n	80075f8 <HAL_SPI_Receive+0x248>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8008492:	f7fb ffaf 	bl	80043f4 <HAL_GetTick>
 8008496:	0002      	movs	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d802      	bhi.n	80084a8 <HAL_SPI_Receive+0x230>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	d102      	bne.n	80084ae <HAL_SPI_Receive+0x236>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d108      	bne.n	80084c0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80084ae:	2317      	movs	r3, #23
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	2203      	movs	r2, #3
 80084b4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	225d      	movs	r2, #93	@ 0x5d
 80084ba:	2101      	movs	r1, #1
 80084bc:	5499      	strb	r1, [r3, r2]
          goto error;
 80084be:	e01d      	b.n	80084fc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2246      	movs	r2, #70	@ 0x46
 80084c4:	5a9b      	ldrh	r3, [r3, r2]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1c5      	bne.n	8008458 <HAL_SPI_Receive+0x1e0>
=======
 80075ca:	f7fc f92b 	bl	8003824 <HAL_GetTick>
 80075ce:	0002      	movs	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d802      	bhi.n	80075e0 <HAL_SPI_Receive+0x230>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	d102      	bne.n	80075e6 <HAL_SPI_Receive+0x236>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80075e6:	2317      	movs	r3, #23
 80075e8:	18fb      	adds	r3, r7, r3
 80075ea:	2203      	movs	r2, #3
 80075ec:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	225d      	movs	r2, #93	@ 0x5d
 80075f2:	2101      	movs	r1, #1
 80075f4:	5499      	strb	r1, [r3, r2]
          goto error;
 80075f6:	e01d      	b.n	8007634 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2246      	movs	r2, #70	@ 0x46
 80075fc:	5a9b      	ldrh	r3, [r3, r2]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1c5      	bne.n	8007590 <HAL_SPI_Receive+0x1e0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 fce0 	bl	8008e98 <SPI_EndRxTransaction>
 80084d8:	1e03      	subs	r3, r0, #0
 80084da:	d002      	beq.n	80084e2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	0018      	movs	r0, r3
 800760c:	f000 fce0 	bl	8007fd0 <SPI_EndRxTransaction>
 8007610:	1e03      	subs	r3, r0, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80084ea:	2317      	movs	r3, #23
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	2201      	movs	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e003      	b.n	80084fc <HAL_SPI_Receive+0x284>
=======
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007622:	2317      	movs	r3, #23
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	e003      	b.n	8007634 <HAL_SPI_Receive+0x284>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	225d      	movs	r2, #93	@ 0x5d
 80084f8:	2101      	movs	r1, #1
 80084fa:	5499      	strb	r1, [r3, r2]
=======
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	225d      	movs	r2, #93	@ 0x5d
 8007630:	2101      	movs	r1, #1
 8007632:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	225c      	movs	r2, #92	@ 0x5c
 8008500:	2100      	movs	r1, #0
 8008502:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008504:	2317      	movs	r3, #23
 8008506:	18fb      	adds	r3, r7, r3
 8008508:	781b      	ldrb	r3, [r3, #0]
}
 800850a:	0018      	movs	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	b007      	add	sp, #28
 8008510:	bd90      	pop	{r4, r7, pc}
 8008512:	46c0      	nop			@ (mov r8, r8)
 8008514:	ffffefff 	.word	0xffffefff
 8008518:	ffffbfff 	.word	0xffffbfff

0800851c <HAL_SPI_TransmitReceive>:
=======
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	225c      	movs	r2, #92	@ 0x5c
 8007638:	2100      	movs	r1, #0
 800763a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800763c:	2317      	movs	r3, #23
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	781b      	ldrb	r3, [r3, #0]
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b007      	add	sp, #28
 8007648:	bd90      	pop	{r4, r7, pc}
 800764a:	46c0      	nop			@ (mov r8, r8)
 800764c:	ffffefff 	.word	0xffffefff
 8007650:	ffffbfff 	.word	0xffffbfff

08007654 <HAL_SPI_TransmitReceive>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	@ 0x28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	001a      	movs	r2, r3
 800852a:	1cbb      	adds	r3, r7, #2
 800852c:	801a      	strh	r2, [r3, #0]
=======
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	@ 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	001a      	movs	r2, r3
 8007662:	1cbb      	adds	r3, r7, #2
 8007664:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 800852e:	2301      	movs	r3, #1
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008532:	2323      	movs	r3, #35	@ 0x23
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
=======
 8007666:	2301      	movs	r3, #1
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800766a:	2323      	movs	r3, #35	@ 0x23
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	225c      	movs	r2, #92	@ 0x5c
 800853e:	5c9b      	ldrb	r3, [r3, r2]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x2c>
 8008544:	2302      	movs	r3, #2
 8008546:	e1c4      	b.n	80088d2 <HAL_SPI_TransmitReceive+0x3b6>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	225c      	movs	r2, #92	@ 0x5c
 800854c:	2101      	movs	r1, #1
 800854e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008550:	f7fb ff50 	bl	80043f4 <HAL_GetTick>
 8008554:	0003      	movs	r3, r0
 8008556:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008558:	201b      	movs	r0, #27
 800855a:	183b      	adds	r3, r7, r0
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	215d      	movs	r1, #93	@ 0x5d
 8008560:	5c52      	ldrb	r2, [r2, r1]
 8008562:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800856a:	2312      	movs	r3, #18
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	1cba      	adds	r2, r7, #2
 8008570:	8812      	ldrh	r2, [r2, #0]
 8008572:	801a      	strh	r2, [r3, #0]
=======
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	225c      	movs	r2, #92	@ 0x5c
 8007676:	5c9b      	ldrb	r3, [r3, r2]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x2c>
 800767c:	2302      	movs	r3, #2
 800767e:	e1c4      	b.n	8007a0a <HAL_SPI_TransmitReceive+0x3b6>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	225c      	movs	r2, #92	@ 0x5c
 8007684:	2101      	movs	r1, #1
 8007686:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007688:	f7fc f8cc 	bl	8003824 <HAL_GetTick>
 800768c:	0003      	movs	r3, r0
 800768e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007690:	201b      	movs	r0, #27
 8007692:	183b      	adds	r3, r7, r0
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	215d      	movs	r1, #93	@ 0x5d
 8007698:	5c52      	ldrb	r2, [r2, r1]
 800769a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80076a2:	2312      	movs	r3, #18
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	1cba      	adds	r2, r7, #2
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
<<<<<<< HEAD
 8008574:	183b      	adds	r3, r7, r0
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d011      	beq.n	80085a0 <HAL_SPI_TransmitReceive+0x84>
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	2382      	movs	r3, #130	@ 0x82
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	429a      	cmp	r2, r3
 8008584:	d107      	bne.n	8008596 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <HAL_SPI_TransmitReceive+0x7a>
 800858e:	183b      	adds	r3, r7, r0
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b04      	cmp	r3, #4
 8008594:	d004      	beq.n	80085a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008596:	2323      	movs	r3, #35	@ 0x23
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
    goto error;
 800859e:	e191      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x98>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x98>
 80085ac:	1cbb      	adds	r3, r7, #2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80085b4:	2323      	movs	r3, #35	@ 0x23
 80085b6:	18fb      	adds	r3, r7, r3
 80085b8:	2201      	movs	r2, #1
 80085ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80085bc:	e182      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x3a8>
=======
 80076ac:	183b      	adds	r3, r7, r0
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d011      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x84>
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	2382      	movs	r3, #130	@ 0x82
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d107      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x7a>
 80076c6:	183b      	adds	r3, r7, r0
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d004      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80076ce:	2323      	movs	r3, #35	@ 0x23
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	2202      	movs	r2, #2
 80076d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80076d6:	e191      	b.n	80079fc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x98>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x98>
 80076e4:	1cbb      	adds	r3, r7, #2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80076ec:	2323      	movs	r3, #35	@ 0x23
 80076ee:	18fb      	adds	r3, r7, r3
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80076f4:	e182      	b.n	80079fc <HAL_SPI_TransmitReceive+0x3a8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	225d      	movs	r2, #93	@ 0x5d
 80085c2:	5c9b      	ldrb	r3, [r3, r2]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d003      	beq.n	80085d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	225d      	movs	r2, #93	@ 0x5d
 80085ce:	2105      	movs	r1, #5
 80085d0:	5499      	strb	r1, [r3, r2]
=======
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	225d      	movs	r2, #93	@ 0x5d
 80076fa:	5c9b      	ldrb	r3, [r3, r2]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d003      	beq.n	800770a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	225d      	movs	r2, #93	@ 0x5d
 8007706:	2105      	movs	r1, #5
 8007708:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1cba      	adds	r2, r7, #2
 80085e2:	2146      	movs	r1, #70	@ 0x46
 80085e4:	8812      	ldrh	r2, [r2, #0]
 80085e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1cba      	adds	r2, r7, #2
 80085ec:	2144      	movs	r1, #68	@ 0x44
 80085ee:	8812      	ldrh	r2, [r2, #0]
 80085f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1cba      	adds	r2, r7, #2
 80085fc:	8812      	ldrh	r2, [r2, #0]
 80085fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	1cba      	adds	r2, r7, #2
 8008604:	8812      	ldrh	r2, [r2, #0]
 8008606:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1cba      	adds	r2, r7, #2
 800771a:	2146      	movs	r1, #70	@ 0x46
 800771c:	8812      	ldrh	r2, [r2, #0]
 800771e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	1cba      	adds	r2, r7, #2
 8007724:	2144      	movs	r1, #68	@ 0x44
 8007726:	8812      	ldrh	r2, [r2, #0]
 8007728:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	1cba      	adds	r2, r7, #2
 8007734:	8812      	ldrh	r2, [r2, #0]
 8007736:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1cba      	adds	r2, r7, #2
 800773c:	8812      	ldrh	r2, [r2, #0]
 800773e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	23e0      	movs	r3, #224	@ 0xe0
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	429a      	cmp	r2, r3
 800861e:	d908      	bls.n	8008632 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	49ac      	ldr	r1, [pc, #688]	@ (80088dc <HAL_SPI_TransmitReceive+0x3c0>)
 800862c:	400a      	ands	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	e008      	b.n	8008644 <HAL_SPI_TransmitReceive+0x128>
=======
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	23e0      	movs	r3, #224	@ 0xe0
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	429a      	cmp	r2, r3
 8007756:	d908      	bls.n	800776a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	49ac      	ldr	r1, [pc, #688]	@ (8007a14 <HAL_SPI_TransmitReceive+0x3c0>)
 8007764:	400a      	ands	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	e008      	b.n	800777c <HAL_SPI_TransmitReceive+0x128>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< HEAD
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2180      	movs	r1, #128	@ 0x80
 800863e:	0149      	lsls	r1, r1, #5
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
=======
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2180      	movs	r1, #128	@ 0x80
 8007776:	0149      	lsls	r1, r1, #5
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2240      	movs	r2, #64	@ 0x40
 800864c:	4013      	ands	r3, r2
 800864e:	2b40      	cmp	r3, #64	@ 0x40
 8008650:	d007      	beq.n	8008662 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2140      	movs	r1, #64	@ 0x40
 800865e:	430a      	orrs	r2, r1
 8008660:	601a      	str	r2, [r3, #0]
=======
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2240      	movs	r2, #64	@ 0x40
 8007784:	4013      	ands	r3, r2
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d007      	beq.n	800779a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2140      	movs	r1, #64	@ 0x40
 8007796:	430a      	orrs	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	23e0      	movs	r3, #224	@ 0xe0
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	429a      	cmp	r2, r3
 800866c:	d800      	bhi.n	8008670 <HAL_SPI_TransmitReceive+0x154>
 800866e:	e083      	b.n	8008778 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x168>
 8008678:	2312      	movs	r3, #18
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d000      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x168>
 8008682:	e06d      	b.n	8008760 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	881a      	ldrh	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	1c9a      	adds	r2, r3, #2
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
=======
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	23e0      	movs	r3, #224	@ 0xe0
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d800      	bhi.n	80077a8 <HAL_SPI_TransmitReceive+0x154>
 80077a6:	e083      	b.n	80078b0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x168>
 80077b0:	2312      	movs	r3, #18
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d000      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x168>
 80077ba:	e06d      	b.n	8007898 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c0:	881a      	ldrh	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	1c9a      	adds	r2, r3, #2
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80086a8:	e05a      	b.n	8008760 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2202      	movs	r2, #2
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d11b      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x1d4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d016      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x1d4>
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d113      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086cc:	881a      	ldrh	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	1c9a      	adds	r2, r3, #2
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80077e0:	e05a      	b.n	8007898 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2202      	movs	r2, #2
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d11b      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x1d4>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d016      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x1d4>
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d113      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	1c9a      	adds	r2, r3, #2
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2201      	movs	r2, #1
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d11c      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x21c>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2246      	movs	r2, #70	@ 0x46
 8008702:	5a9b      	ldrh	r3, [r3, r2]
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d016      	beq.n	8008738 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008714:	b292      	uxth	r2, r2
 8008716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2246      	movs	r2, #70	@ 0x46
 8008726:	5a9b      	ldrh	r3, [r3, r2]
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b299      	uxth	r1, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2246      	movs	r2, #70	@ 0x46
 8008732:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008734:	2301      	movs	r3, #1
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008738:	f7fb fe5c 	bl	80043f4 <HAL_GetTick>
 800873c:	0002      	movs	r2, r0
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008744:	429a      	cmp	r2, r3
 8008746:	d80b      	bhi.n	8008760 <HAL_SPI_TransmitReceive+0x244>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	3301      	adds	r3, #1
 800874c:	d008      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800874e:	2323      	movs	r3, #35	@ 0x23
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	2203      	movs	r2, #3
 8008754:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	225d      	movs	r2, #93	@ 0x5d
 800875a:	2101      	movs	r1, #1
 800875c:	5499      	strb	r1, [r3, r2]
        goto error;
 800875e:	e0b1      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d19f      	bne.n	80086aa <HAL_SPI_TransmitReceive+0x18e>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2246      	movs	r2, #70	@ 0x46
 800876e:	5a9b      	ldrh	r3, [r3, r2]
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d199      	bne.n	80086aa <HAL_SPI_TransmitReceive+0x18e>
 8008776:	e089      	b.n	800888c <HAL_SPI_TransmitReceive+0x370>
=======
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2201      	movs	r2, #1
 8007830:	4013      	ands	r3, r2
 8007832:	2b01      	cmp	r3, #1
 8007834:	d11c      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x21c>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2246      	movs	r2, #70	@ 0x46
 800783a:	5a9b      	ldrh	r3, [r3, r2]
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	b292      	uxth	r2, r2
 800784e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2246      	movs	r2, #70	@ 0x46
 800785e:	5a9b      	ldrh	r3, [r3, r2]
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b299      	uxth	r1, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2246      	movs	r2, #70	@ 0x46
 800786a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800786c:	2301      	movs	r3, #1
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007870:	f7fb ffd8 	bl	8003824 <HAL_GetTick>
 8007874:	0002      	movs	r2, r0
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787c:	429a      	cmp	r2, r3
 800787e:	d80b      	bhi.n	8007898 <HAL_SPI_TransmitReceive+0x244>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	3301      	adds	r3, #1
 8007884:	d008      	beq.n	8007898 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007886:	2323      	movs	r3, #35	@ 0x23
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	2203      	movs	r2, #3
 800788c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	225d      	movs	r2, #93	@ 0x5d
 8007892:	2101      	movs	r1, #1
 8007894:	5499      	strb	r1, [r3, r2]
        goto error;
 8007896:	e0b1      	b.n	80079fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d19f      	bne.n	80077e2 <HAL_SPI_TransmitReceive+0x18e>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2246      	movs	r2, #70	@ 0x46
 80078a6:	5a9b      	ldrh	r3, [r3, r2]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d199      	bne.n	80077e2 <HAL_SPI_TransmitReceive+0x18e>
 80078ae:	e089      	b.n	80079c4 <HAL_SPI_TransmitReceive+0x370>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_SPI_TransmitReceive+0x270>
 8008780:	2312      	movs	r3, #18
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d000      	beq.n	800878c <HAL_SPI_TransmitReceive+0x270>
 800878a:	e074      	b.n	8008876 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	330c      	adds	r3, #12
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
=======
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x270>
 80078b8:	2312      	movs	r3, #18
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d000      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x270>
 80078c2:	e074      	b.n	80079ae <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80087b2:	e060      	b.n	8008876 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2202      	movs	r2, #2
 80087bc:	4013      	ands	r3, r2
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d11c      	bne.n	80087fc <HAL_SPI_TransmitReceive+0x2e0>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d017      	beq.n	80087fc <HAL_SPI_TransmitReceive+0x2e0>
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d114      	bne.n	80087fc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80078ea:	e060      	b.n	80079ae <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2202      	movs	r2, #2
 80078f4:	4013      	ands	r3, r2
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d11c      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x2e0>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x2e0>
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	2b01      	cmp	r3, #1
 8007908:	d114      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	2201      	movs	r2, #1
 8008804:	4013      	ands	r3, r2
 8008806:	2b01      	cmp	r3, #1
 8008808:	d11e      	bne.n	8008848 <HAL_SPI_TransmitReceive+0x32c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2246      	movs	r2, #70	@ 0x46
 800880e:	5a9b      	ldrh	r3, [r3, r2]
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d018      	beq.n	8008848 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	330c      	adds	r3, #12
 800881c:	001a      	movs	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2246      	movs	r2, #70	@ 0x46
 8008836:	5a9b      	ldrh	r3, [r3, r2]
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b299      	uxth	r1, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2246      	movs	r2, #70	@ 0x46
 8008842:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008844:	2301      	movs	r3, #1
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008848:	f7fb fdd4 	bl	80043f4 <HAL_GetTick>
 800884c:	0002      	movs	r2, r0
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008854:	429a      	cmp	r2, r3
 8008856:	d802      	bhi.n	800885e <HAL_SPI_TransmitReceive+0x342>
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	3301      	adds	r3, #1
 800885c:	d102      	bne.n	8008864 <HAL_SPI_TransmitReceive+0x348>
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008864:	2323      	movs	r3, #35	@ 0x23
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	2203      	movs	r2, #3
 800886a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	225d      	movs	r2, #93	@ 0x5d
 8008870:	2101      	movs	r1, #1
 8008872:	5499      	strb	r1, [r3, r2]
        goto error;
 8008874:	e026      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d199      	bne.n	80087b4 <HAL_SPI_TransmitReceive+0x298>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2246      	movs	r2, #70	@ 0x46
 8008884:	5a9b      	ldrh	r3, [r3, r2]
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d193      	bne.n	80087b4 <HAL_SPI_TransmitReceive+0x298>
=======
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	4013      	ands	r3, r2
 800793e:	2b01      	cmp	r3, #1
 8007940:	d11e      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x32c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2246      	movs	r2, #70	@ 0x46
 8007946:	5a9b      	ldrh	r3, [r3, r2]
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	001a      	movs	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2246      	movs	r2, #70	@ 0x46
 800796e:	5a9b      	ldrh	r3, [r3, r2]
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b299      	uxth	r1, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2246      	movs	r2, #70	@ 0x46
 800797a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800797c:	2301      	movs	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007980:	f7fb ff50 	bl	8003824 <HAL_GetTick>
 8007984:	0002      	movs	r2, r0
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800798c:	429a      	cmp	r2, r3
 800798e:	d802      	bhi.n	8007996 <HAL_SPI_TransmitReceive+0x342>
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	3301      	adds	r3, #1
 8007994:	d102      	bne.n	800799c <HAL_SPI_TransmitReceive+0x348>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d108      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800799c:	2323      	movs	r3, #35	@ 0x23
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	2203      	movs	r2, #3
 80079a2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	225d      	movs	r2, #93	@ 0x5d
 80079a8:	2101      	movs	r1, #1
 80079aa:	5499      	strb	r1, [r3, r2]
        goto error;
 80079ac:	e026      	b.n	80079fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d199      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x298>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2246      	movs	r2, #70	@ 0x46
 80079bc:	5a9b      	ldrh	r3, [r3, r2]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d193      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x298>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	0018      	movs	r0, r3
 8008894:	f000 fb5e 	bl	8008f54 <SPI_EndRxTxTransaction>
 8008898:	1e03      	subs	r3, r0, #0
 800889a:	d006      	beq.n	80088aa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800889c:	2323      	movs	r3, #35	@ 0x23
 800889e:	18fb      	adds	r3, r7, r3
 80088a0:	2201      	movs	r2, #1
 80088a2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80088b2:	2323      	movs	r3, #35	@ 0x23
 80088b4:	18fb      	adds	r3, r7, r3
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e003      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x3a8>
=======
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fb5e 	bl	800808c <SPI_EndRxTxTransaction>
 80079d0:	1e03      	subs	r3, r0, #0
 80079d2:	d006      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80079d4:	2323      	movs	r3, #35	@ 0x23
 80079d6:	18fb      	adds	r3, r7, r3
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80079ea:	2323      	movs	r3, #35	@ 0x23
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	2201      	movs	r2, #1
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e003      	b.n	80079fc <HAL_SPI_TransmitReceive+0x3a8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	225d      	movs	r2, #93	@ 0x5d
 80088c0:	2101      	movs	r1, #1
 80088c2:	5499      	strb	r1, [r3, r2]
=======
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	225d      	movs	r2, #93	@ 0x5d
 80079f8:	2101      	movs	r1, #1
 80079fa:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  
error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	225c      	movs	r2, #92	@ 0x5c
 80088c8:	2100      	movs	r1, #0
 80088ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80088cc:	2323      	movs	r3, #35	@ 0x23
 80088ce:	18fb      	adds	r3, r7, r3
 80088d0:	781b      	ldrb	r3, [r3, #0]
}
 80088d2:	0018      	movs	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b00a      	add	sp, #40	@ 0x28
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	ffffefff 	.word	0xffffefff

080088e0 <HAL_SPI_Transmit_DMA>:
=======
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	225c      	movs	r2, #92	@ 0x5c
 8007a00:	2100      	movs	r1, #0
 8007a02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a04:	2323      	movs	r3, #35	@ 0x23
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	781b      	ldrb	r3, [r3, #0]
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b00a      	add	sp, #40	@ 0x28
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	ffffefff 	.word	0xffffefff

08007a18 <HAL_SPI_Transmit_DMA>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	1dbb      	adds	r3, r7, #6
 80088ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088ee:	2317      	movs	r3, #23
 80088f0:	18fb      	adds	r3, r7, r3
 80088f2:	2200      	movs	r2, #0
 80088f4:	701a      	strb	r2, [r3, #0]
=======
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	1dbb      	adds	r3, r7, #6
 8007a24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a26:	2317      	movs	r3, #23
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	225c      	movs	r2, #92	@ 0x5c
 80088fa:	5c9b      	ldrb	r3, [r3, r2]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_SPI_Transmit_DMA+0x24>
 8008900:	2302      	movs	r3, #2
 8008902:	e0e3      	b.n	8008acc <HAL_SPI_Transmit_DMA+0x1ec>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	225c      	movs	r2, #92	@ 0x5c
 8008908:	2101      	movs	r1, #1
 800890a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	225d      	movs	r2, #93	@ 0x5d
 8008910:	5c9b      	ldrb	r3, [r3, r2]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	d004      	beq.n	8008922 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8008918:	2317      	movs	r3, #23
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	2202      	movs	r2, #2
 800891e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008920:	e0cd      	b.n	8008abe <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <HAL_SPI_Transmit_DMA+0x50>
 8008928:	1dbb      	adds	r3, r7, #6
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8008930:	2317      	movs	r3, #23
 8008932:	18fb      	adds	r3, r7, r3
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
    goto error;
 8008938:	e0c1      	b.n	8008abe <HAL_SPI_Transmit_DMA+0x1de>
=======
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	225c      	movs	r2, #92	@ 0x5c
 8007a32:	5c9b      	ldrb	r3, [r3, r2]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_SPI_Transmit_DMA+0x24>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e0e3      	b.n	8007c04 <HAL_SPI_Transmit_DMA+0x1ec>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	225c      	movs	r2, #92	@ 0x5c
 8007a40:	2101      	movs	r1, #1
 8007a42:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	225d      	movs	r2, #93	@ 0x5d
 8007a48:	5c9b      	ldrb	r3, [r3, r2]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d004      	beq.n	8007a5a <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8007a50:	2317      	movs	r3, #23
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2202      	movs	r2, #2
 8007a56:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a58:	e0cd      	b.n	8007bf6 <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_SPI_Transmit_DMA+0x50>
 8007a60:	1dbb      	adds	r3, r7, #6
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8007a68:	2317      	movs	r3, #23
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a70:	e0c1      	b.n	8007bf6 <HAL_SPI_Transmit_DMA+0x1de>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	225d      	movs	r2, #93	@ 0x5d
 800893e:	2103      	movs	r1, #3
 8008940:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	1dba      	adds	r2, r7, #6
 8008952:	8812      	ldrh	r2, [r2, #0]
 8008954:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1dba      	adds	r2, r7, #6
 800895a:	8812      	ldrh	r2, [r2, #0]
 800895c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2244      	movs	r2, #68	@ 0x44
 8008974:	2100      	movs	r1, #0
 8008976:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2246      	movs	r2, #70	@ 0x46
 800897c:	2100      	movs	r1, #0
 800897e:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	2380      	movs	r3, #128	@ 0x80
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	429a      	cmp	r2, r3
 800898a:	d110      	bne.n	80089ae <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2140      	movs	r1, #64	@ 0x40
 8008998:	438a      	bics	r2, r1
 800899a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2180      	movs	r1, #128	@ 0x80
 80089a8:	01c9      	lsls	r1, r1, #7
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
=======
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	225d      	movs	r2, #93	@ 0x5d
 8007a76:	2103      	movs	r1, #3
 8007a78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1dba      	adds	r2, r7, #6
 8007a8a:	8812      	ldrh	r2, [r2, #0]
 8007a8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1dba      	adds	r2, r7, #6
 8007a92:	8812      	ldrh	r2, [r2, #0]
 8007a94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2244      	movs	r2, #68	@ 0x44
 8007aac:	2100      	movs	r1, #0
 8007aae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2246      	movs	r2, #70	@ 0x46
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	2380      	movs	r3, #128	@ 0x80
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d110      	bne.n	8007ae6 <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2140      	movs	r1, #64	@ 0x40
 8007ad0:	438a      	bics	r2, r1
 8007ad2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2180      	movs	r1, #128	@ 0x80
 8007ae0:	01c9      	lsls	r1, r1, #7
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
<<<<<<< HEAD
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b2:	4a48      	ldr	r2, [pc, #288]	@ (8008ad4 <HAL_SPI_Transmit_DMA+0x1f4>)
 80089b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ba:	4a47      	ldr	r2, [pc, #284]	@ (8008ad8 <HAL_SPI_Transmit_DMA+0x1f8>)
 80089bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c2:	4a46      	ldr	r2, [pc, #280]	@ (8008adc <HAL_SPI_Transmit_DMA+0x1fc>)
 80089c4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ca:	2200      	movs	r2, #0
 80089cc:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4941      	ldr	r1, [pc, #260]	@ (8008ae0 <HAL_SPI_Transmit_DMA+0x200>)
 80089da:	400a      	ands	r2, r1
 80089dc:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	23e0      	movs	r3, #224	@ 0xe0
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d82f      	bhi.n	8008a4a <HAL_SPI_Transmit_DMA+0x16a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ee:	695a      	ldr	r2, [r3, #20]
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d128      	bne.n	8008a4a <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	001a      	movs	r2, r3
 8008a00:	2301      	movs	r3, #1
 8008a02:	4013      	ands	r3, r2
 8008a04:	d10f      	bne.n	8008a26 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4933      	ldr	r1, [pc, #204]	@ (8008ae0 <HAL_SPI_Transmit_DMA+0x200>)
 8008a12:	400a      	ands	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a24:	e011      	b.n	8008a4a <HAL_SPI_Transmit_DMA+0x16a>
=======
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aea:	4a48      	ldr	r2, [pc, #288]	@ (8007c0c <HAL_SPI_Transmit_DMA+0x1f4>)
 8007aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	4a47      	ldr	r2, [pc, #284]	@ (8007c10 <HAL_SPI_Transmit_DMA+0x1f8>)
 8007af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afa:	4a46      	ldr	r2, [pc, #280]	@ (8007c14 <HAL_SPI_Transmit_DMA+0x1fc>)
 8007afc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b02:	2200      	movs	r2, #0
 8007b04:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4941      	ldr	r1, [pc, #260]	@ (8007c18 <HAL_SPI_Transmit_DMA+0x200>)
 8007b12:	400a      	ands	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	23e0      	movs	r3, #224	@ 0xe0
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d82f      	bhi.n	8007b82 <HAL_SPI_Transmit_DMA+0x16a>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b26:	695a      	ldr	r2, [r3, #20]
 8007b28:	2380      	movs	r3, #128	@ 0x80
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d128      	bne.n	8007b82 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	001a      	movs	r2, r3
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d10f      	bne.n	8007b5e <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4933      	ldr	r1, [pc, #204]	@ (8007c18 <HAL_SPI_Transmit_DMA+0x200>)
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b5c:	e011      	b.n	8007b82 <HAL_SPI_Transmit_DMA+0x16a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
<<<<<<< HEAD
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2180      	movs	r1, #128	@ 0x80
 8008a32:	01c9      	lsls	r1, r1, #7
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3301      	adds	r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
=======
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2180      	movs	r1, #128	@ 0x80
 8007b6a:	01c9      	lsls	r1, r1, #7
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
<<<<<<< HEAD
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a52:	0019      	movs	r1, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	330c      	adds	r3, #12
 8008a5a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a62:	f7fc fa17 	bl	8004e94 <HAL_DMA_Start_IT>
 8008a66:	1e03      	subs	r3, r0, #0
 8008a68:	d00a      	beq.n	8008a80 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6e:	2210      	movs	r2, #16
 8008a70:	431a      	orrs	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008a76:	2317      	movs	r3, #23
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	701a      	strb	r2, [r3, #0]

    goto error;
 8008a7e:	e01e      	b.n	8008abe <HAL_SPI_Transmit_DMA+0x1de>
=======
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	0019      	movs	r1, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b9a:	f7fc fa17 	bl	8003fcc <HAL_DMA_Start_IT>
 8007b9e:	1e03      	subs	r3, r0, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007bae:	2317      	movs	r3, #23
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]

    goto error;
 8007bb6:	e01e      	b.n	8007bf6 <HAL_SPI_Transmit_DMA+0x1de>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2240      	movs	r2, #64	@ 0x40
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d007      	beq.n	8008a9e <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2140      	movs	r1, #64	@ 0x40
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
=======
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2240      	movs	r2, #64	@ 0x40
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b40      	cmp	r3, #64	@ 0x40
 8007bc4:	d007      	beq.n	8007bd6 <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2140      	movs	r1, #64	@ 0x40
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
<<<<<<< HEAD
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2120      	movs	r1, #32
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2102      	movs	r1, #2
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
=======
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2120      	movs	r1, #32
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2102      	movs	r1, #2
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	225c      	movs	r2, #92	@ 0x5c
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008ac6:	2317      	movs	r3, #23
 8008ac8:	18fb      	adds	r3, r7, r3
 8008aca:	781b      	ldrb	r3, [r3, #0]
}
 8008acc:	0018      	movs	r0, r3
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b006      	add	sp, #24
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	08008bd9 	.word	0x08008bd9
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008bf7 	.word	0x08008bf7
 8008ae0:	ffffbfff 	.word	0xffffbfff

08008ae4 <HAL_SPI_TxCpltCallback>:
=======
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	225c      	movs	r2, #92	@ 0x5c
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007bfe:	2317      	movs	r3, #23
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	781b      	ldrb	r3, [r3, #0]
}
 8007c04:	0018      	movs	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b006      	add	sp, #24
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	08007d11 	.word	0x08007d11
 8007c10:	08007c65 	.word	0x08007c65
 8007c14:	08007d2f 	.word	0x08007d2f
 8007c18:	ffffbfff 	.word	0xffffbfff

08007c1c <HAL_SPI_TxCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
=======
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008aec:	46c0      	nop			@ (mov r8, r8)
 8008aee:	46bd      	mov	sp, r7
 8008af0:	b002      	add	sp, #8
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_SPI_TxHalfCpltCallback>:
=======
 8007c24:	46c0      	nop			@ (mov r8, r8)
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b002      	add	sp, #8
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_SPI_TxHalfCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
=======
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008afc:	46c0      	nop			@ (mov r8, r8)
 8008afe:	46bd      	mov	sp, r7
 8008b00:	b002      	add	sp, #8
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_SPI_ErrorCallback>:
=======
 8007c34:	46c0      	nop			@ (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_SPI_ErrorCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
=======
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 8008b0c:	46c0      	nop			@ (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b002      	add	sp, #8
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_SPI_GetState>:
=======
 8007c44:	46c0      	nop			@ (mov r8, r8)
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b002      	add	sp, #8
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_SPI_GetState>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	225d      	movs	r2, #93	@ 0x5d
 8008b20:	5c9b      	ldrb	r3, [r3, r2]
 8008b22:	b2db      	uxtb	r3, r3
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b002      	add	sp, #8
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <SPI_DMATransmitCplt>:
=======
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	225d      	movs	r2, #93	@ 0x5d
 8007c58:	5c9b      	ldrb	r3, [r3, r2]
 8007c5a:	b2db      	uxtb	r3, r3
}
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b002      	add	sp, #8
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SPI_DMATransmitCplt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b38:	617b      	str	r3, [r7, #20]
=======
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c70:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 8008b3a:	f7fb fc5b 	bl	80043f4 <HAL_GetTick>
 8008b3e:	0003      	movs	r3, r0
 8008b40:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d03c      	beq.n	8008bca <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2120      	movs	r1, #32
 8008b5c:	438a      	bics	r2, r1
 8008b5e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	438a      	bics	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2164      	movs	r1, #100	@ 0x64
 8008b76:	0018      	movs	r0, r3
 8008b78:	f000 f9ec 	bl	8008f54 <SPI_EndRxTxTransaction>
 8008b7c:	1e03      	subs	r3, r0, #0
 8008b7e:	d005      	beq.n	8008b8c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b84:	2220      	movs	r2, #32
 8008b86:	431a      	orrs	r2, r3
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8007c72:	f7fb fdd7 	bl	8003824 <HAL_GetTick>
 8007c76:	0003      	movs	r3, r0
 8007c78:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2220      	movs	r2, #32
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d03c      	beq.n	8007d02 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2120      	movs	r1, #32
 8007c94:	438a      	bics	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	438a      	bics	r2, r1
 8007ca6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2164      	movs	r1, #100	@ 0x64
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f000 f9ec 	bl	800808c <SPI_EndRxTxTransaction>
 8007cb4:	1e03      	subs	r3, r0, #0
 8007cb6:	d005      	beq.n	8007cc4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2200      	movs	r2, #0
 8008bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	225d      	movs	r2, #93	@ 0x5d
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <SPI_DMATransmitCplt+0x9e>
=======
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	225d      	movs	r2, #93	@ 0x5d
 8007cec:	2101      	movs	r1, #1
 8007cee:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d004      	beq.n	8007d02 <SPI_DMATransmitCplt+0x9e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7ff ff9e 	bl	8008b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bc8:	e003      	b.n	8008bd2 <SPI_DMATransmitCplt+0xa6>
=======
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f7ff ff9e 	bl	8007c3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d00:	e003      	b.n	8007d0a <SPI_DMATransmitCplt+0xa6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
<<<<<<< HEAD
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff ff89 	bl	8008ae4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b006      	add	sp, #24
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <SPI_DMAHalfTransmitCplt>:
=======
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	0018      	movs	r0, r3
 8007d06:	f7ff ff89 	bl	8007c1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b006      	add	sp, #24
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_DMAHalfTransmitCplt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	60fb      	str	r3, [r7, #12]
=======
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1c:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
<<<<<<< HEAD
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7ff ff83 	bl	8008af4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bee:	46c0      	nop			@ (mov r8, r8)
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	b004      	add	sp, #16
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <SPI_DMAError>:
=======
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7ff ff83 	bl	8007c2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	b004      	add	sp, #16
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SPI_DMAError>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2103      	movs	r1, #3
 8008c10:	438a      	bics	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c18:	2210      	movs	r2, #16
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	225d      	movs	r2, #93	@ 0x5d
 8008c24:	2101      	movs	r1, #1
 8008c26:	5499      	strb	r1, [r3, r2]
=======
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2103      	movs	r1, #3
 8007d48:	438a      	bics	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d50:	2210      	movs	r2, #16
 8007d52:	431a      	orrs	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	225d      	movs	r2, #93	@ 0x5d
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff ff6a 	bl	8008b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c30:	46c0      	nop			@ (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b004      	add	sp, #16
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SPI_WaitFlagStateUntilTimeout>:
=======
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0018      	movs	r0, r3
 8007d64:	f7ff ff6a 	bl	8007c3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b004      	add	sp, #16
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	1dfb      	adds	r3, r7, #7
 8008c46:	701a      	strb	r2, [r3, #0]
=======
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	1dfb      	adds	r3, r7, #7
 8007d7e:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8008c48:	f7fb fbd4 	bl	80043f4 <HAL_GetTick>
 8008c4c:	0002      	movs	r2, r0
 8008c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	18d3      	adds	r3, r2, r3
 8008c56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c58:	f7fb fbcc 	bl	80043f4 <HAL_GetTick>
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c60:	4b3a      	ldr	r3, [pc, #232]	@ (8008d4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	015b      	lsls	r3, r3, #5
 8008c66:	0d1b      	lsrs	r3, r3, #20
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	4353      	muls	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c6e:	e058      	b.n	8008d22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	3301      	adds	r3, #1
 8008c74:	d055      	beq.n	8008d22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c76:	f7fb fbbd 	bl	80043f4 <HAL_GetTick>
 8008c7a:	0002      	movs	r2, r0
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d902      	bls.n	8008c8c <SPI_WaitFlagStateUntilTimeout+0x54>
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d142      	bne.n	8008d12 <SPI_WaitFlagStateUntilTimeout+0xda>
=======
 8007d80:	f7fb fd50 	bl	8003824 <HAL_GetTick>
 8007d84:	0002      	movs	r2, r0
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d90:	f7fb fd48 	bl	8003824 <HAL_GetTick>
 8007d94:	0003      	movs	r3, r0
 8007d96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d98:	4b3a      	ldr	r3, [pc, #232]	@ (8007e84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	015b      	lsls	r3, r3, #5
 8007d9e:	0d1b      	lsrs	r3, r3, #20
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	4353      	muls	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007da6:	e058      	b.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	d055      	beq.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dae:	f7fb fd39 	bl	8003824 <HAL_GetTick>
 8007db2:	0002      	movs	r2, r0
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d902      	bls.n	8007dc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d142      	bne.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0xda>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	21e0      	movs	r1, #224	@ 0xe0
 8008c98:	438a      	bics	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	2382      	movs	r3, #130	@ 0x82
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d113      	bne.n	8008cd0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	2380      	movs	r3, #128	@ 0x80
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d005      	beq.n	8008cc0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	2380      	movs	r3, #128	@ 0x80
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d107      	bne.n	8008cd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2140      	movs	r1, #64	@ 0x40
 8008ccc:	438a      	bics	r2, r1
 8008cce:	601a      	str	r2, [r3, #0]
=======
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	21e0      	movs	r1, #224	@ 0xe0
 8007dd0:	438a      	bics	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	2382      	movs	r3, #130	@ 0x82
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d113      	bne.n	8007e08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	2380      	movs	r3, #128	@ 0x80
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d005      	beq.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	2380      	movs	r3, #128	@ 0x80
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d107      	bne.n	8007e08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2140      	movs	r1, #64	@ 0x40
 8007e04:	438a      	bics	r2, r1
 8007e06:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	019b      	lsls	r3, r3, #6
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d110      	bne.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	491a      	ldr	r1, [pc, #104]	@ (8008d50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008ce8:	400a      	ands	r2, r1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2180      	movs	r1, #128	@ 0x80
 8008cf8:	0189      	lsls	r1, r1, #6
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	225d      	movs	r2, #93	@ 0x5d
 8008d02:	2101      	movs	r1, #1
 8008d04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	225c      	movs	r2, #92	@ 0x5c
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e017      	b.n	8008d42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	425a      	negs	r2, r3
 8008d32:	4153      	adcs	r3, r2
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	001a      	movs	r2, r3
 8008d38:	1dfb      	adds	r3, r7, #7
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d197      	bne.n	8008c70 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e0c:	2380      	movs	r3, #128	@ 0x80
 8007e0e:	019b      	lsls	r3, r3, #6
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d110      	bne.n	8007e36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	491a      	ldr	r1, [pc, #104]	@ (8007e88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007e20:	400a      	ands	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2180      	movs	r1, #128	@ 0x80
 8007e30:	0189      	lsls	r1, r1, #6
 8007e32:	430a      	orrs	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	225d      	movs	r2, #93	@ 0x5d
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	225c      	movs	r2, #92	@ 0x5c
 8007e42:	2100      	movs	r1, #0
 8007e44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e017      	b.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4013      	ands	r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	425a      	negs	r2, r3
 8007e6a:	4153      	adcs	r3, r2
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	001a      	movs	r2, r3
 8007e70:	1dfb      	adds	r3, r7, #7
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d197      	bne.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b008      	add	sp, #32
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	20000070 	.word	0x20000070
 8008d50:	ffffdfff 	.word	0xffffdfff

08008d54 <SPI_WaitFifoStateUntilTimeout>:
=======
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b008      	add	sp, #32
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	46c0      	nop			@ (mov r8, r8)
 8007e84:	20000018 	.word	0x20000018
 8007e88:	ffffdfff 	.word	0xffffdfff

08007e8c <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	@ 0x28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
=======
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	@ 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
<<<<<<< HEAD
 8008d62:	2317      	movs	r3, #23
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d6a:	f7fb fb43 	bl	80043f4 <HAL_GetTick>
 8008d6e:	0002      	movs	r2, r0
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	18d3      	adds	r3, r2, r3
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008d7a:	f7fb fb3b 	bl	80043f4 <HAL_GetTick>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	330c      	adds	r3, #12
 8008d88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d8a:	4b41      	ldr	r3, [pc, #260]	@ (8008e90 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	0013      	movs	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	00da      	lsls	r2, r3, #3
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	0d1b      	lsrs	r3, r3, #20
 8008d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d9c:	4353      	muls	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008da0:	e068      	b.n	8008e74 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	23c0      	movs	r3, #192	@ 0xc0
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d10a      	bne.n	8008dc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d107      	bne.n	8008dc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	2117      	movs	r1, #23
 8008dba:	187b      	adds	r3, r7, r1
 8008dbc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008dbe:	187b      	adds	r3, r7, r1
 8008dc0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	d055      	beq.n	8008e74 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dc8:	f7fb fb14 	bl	80043f4 <HAL_GetTick>
 8008dcc:	0002      	movs	r2, r0
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d902      	bls.n	8008dde <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d142      	bne.n	8008e64 <SPI_WaitFifoStateUntilTimeout+0x110>
=======
 8007e9a:	2317      	movs	r3, #23
 8007e9c:	18fb      	adds	r3, r7, r3
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ea2:	f7fb fcbf 	bl	8003824 <HAL_GetTick>
 8007ea6:	0002      	movs	r2, r0
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	18d3      	adds	r3, r2, r3
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007eb2:	f7fb fcb7 	bl	8003824 <HAL_GetTick>
 8007eb6:	0003      	movs	r3, r0
 8007eb8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ec2:	4b41      	ldr	r3, [pc, #260]	@ (8007fc8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	0013      	movs	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	00da      	lsls	r2, r3, #3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	0d1b      	lsrs	r3, r3, #20
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed4:	4353      	muls	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ed8:	e068      	b.n	8007fac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	23c0      	movs	r3, #192	@ 0xc0
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d10a      	bne.n	8007efa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	2117      	movs	r1, #23
 8007ef2:	187b      	adds	r3, r7, r1
 8007ef4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ef6:	187b      	adds	r3, r7, r1
 8007ef8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	d055      	beq.n	8007fac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f00:	f7fb fc90 	bl	8003824 <HAL_GetTick>
 8007f04:	0002      	movs	r2, r0
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d902      	bls.n	8007f16 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d142      	bne.n	8007f9c <SPI_WaitFifoStateUntilTimeout+0x110>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	21e0      	movs	r1, #224	@ 0xe0
 8008dea:	438a      	bics	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	2382      	movs	r3, #130	@ 0x82
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d113      	bne.n	8008e22 <SPI_WaitFifoStateUntilTimeout+0xce>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	2380      	movs	r3, #128	@ 0x80
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d005      	beq.n	8008e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	2380      	movs	r3, #128	@ 0x80
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d107      	bne.n	8008e22 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2140      	movs	r1, #64	@ 0x40
 8008e1e:	438a      	bics	r2, r1
 8008e20:	601a      	str	r2, [r3, #0]
=======
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	21e0      	movs	r1, #224	@ 0xe0
 8007f22:	438a      	bics	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	2382      	movs	r3, #130	@ 0x82
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d113      	bne.n	8007f5a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	2380      	movs	r3, #128	@ 0x80
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d005      	beq.n	8007f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	2380      	movs	r3, #128	@ 0x80
 8007f44:	00db      	lsls	r3, r3, #3
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d107      	bne.n	8007f5a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2140      	movs	r1, #64	@ 0x40
 8007f56:	438a      	bics	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e26:	2380      	movs	r3, #128	@ 0x80
 8008e28:	019b      	lsls	r3, r3, #6
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d110      	bne.n	8008e50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4916      	ldr	r1, [pc, #88]	@ (8008e94 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008e3a:	400a      	ands	r2, r1
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2180      	movs	r1, #128	@ 0x80
 8008e4a:	0189      	lsls	r1, r1, #6
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	225d      	movs	r2, #93	@ 0x5d
 8008e54:	2101      	movs	r1, #1
 8008e56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	225c      	movs	r2, #92	@ 0x5c
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e010      	b.n	8008e86 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d18e      	bne.n	8008da2 <SPI_WaitFifoStateUntilTimeout+0x4e>
=======
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f5e:	2380      	movs	r3, #128	@ 0x80
 8007f60:	019b      	lsls	r3, r3, #6
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d110      	bne.n	8007f88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4916      	ldr	r1, [pc, #88]	@ (8007fcc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007f72:	400a      	ands	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2180      	movs	r1, #128	@ 0x80
 8007f82:	0189      	lsls	r1, r1, #6
 8007f84:	430a      	orrs	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	225d      	movs	r2, #93	@ 0x5d
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	225c      	movs	r2, #92	@ 0x5c
 8007f94:	2100      	movs	r1, #0
 8007f96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e010      	b.n	8007fbe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d18e      	bne.n	8007eda <SPI_WaitFifoStateUntilTimeout+0x4e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	0018      	movs	r0, r3
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	b00a      	add	sp, #40	@ 0x28
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	46c0      	nop			@ (mov r8, r8)
 8008e90:	20000070 	.word	0x20000070
 8008e94:	ffffdfff 	.word	0xffffdfff

08008e98 <SPI_EndRxTransaction>:
=======
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b00a      	add	sp, #40	@ 0x28
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	20000018 	.word	0x20000018
 8007fcc:	ffffdfff 	.word	0xffffdfff

08007fd0 <SPI_EndRxTransaction>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	2382      	movs	r3, #130	@ 0x82
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d113      	bne.n	8008ed8 <SPI_EndRxTransaction+0x40>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	2380      	movs	r3, #128	@ 0x80
 8008eb6:	021b      	lsls	r3, r3, #8
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d005      	beq.n	8008ec8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d107      	bne.n	8008ed8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2140      	movs	r1, #64	@ 0x40
 8008ed4:	438a      	bics	r2, r1
 8008ed6:	601a      	str	r2, [r3, #0]
=======
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	2382      	movs	r3, #130	@ 0x82
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d113      	bne.n	8008010 <SPI_EndRxTransaction+0x40>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	2380      	movs	r3, #128	@ 0x80
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d005      	beq.n	8008000 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	2380      	movs	r3, #128	@ 0x80
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d107      	bne.n	8008010 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2140      	movs	r1, #64	@ 0x40
 800800c:	438a      	bics	r2, r1
 800800e:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	0013      	movs	r3, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2180      	movs	r1, #128	@ 0x80
 8008ee6:	f7ff fea7 	bl	8008c38 <SPI_WaitFlagStateUntilTimeout>
 8008eea:	1e03      	subs	r3, r0, #0
 8008eec:	d007      	beq.n	8008efe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e026      	b.n	8008f4c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	2382      	movs	r3, #130	@ 0x82
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d11f      	bne.n	8008f4a <SPI_EndRxTransaction+0xb2>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	2380      	movs	r3, #128	@ 0x80
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d005      	beq.n	8008f22 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	2380      	movs	r3, #128	@ 0x80
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d113      	bne.n	8008f4a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	23c0      	movs	r3, #192	@ 0xc0
 8008f26:	00d9      	lsls	r1, r3, #3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	0013      	movs	r3, r2
 8008f30:	2200      	movs	r2, #0
 8008f32:	f7ff ff0f 	bl	8008d54 <SPI_WaitFifoStateUntilTimeout>
 8008f36:	1e03      	subs	r3, r0, #0
 8008f38:	d007      	beq.n	8008f4a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f3e:	2220      	movs	r2, #32
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e000      	b.n	8008f4c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	b004      	add	sp, #16
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <SPI_EndRxTxTransaction>:
=======
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	0013      	movs	r3, r2
 800801a:	2200      	movs	r2, #0
 800801c:	2180      	movs	r1, #128	@ 0x80
 800801e:	f7ff fea7 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 8008022:	1e03      	subs	r3, r0, #0
 8008024:	d007      	beq.n	8008036 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800802a:	2220      	movs	r2, #32
 800802c:	431a      	orrs	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e026      	b.n	8008084 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	2382      	movs	r3, #130	@ 0x82
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	429a      	cmp	r2, r3
 8008040:	d11f      	bne.n	8008082 <SPI_EndRxTransaction+0xb2>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	2380      	movs	r3, #128	@ 0x80
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	429a      	cmp	r2, r3
 800804c:	d005      	beq.n	800805a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	2380      	movs	r3, #128	@ 0x80
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	429a      	cmp	r2, r3
 8008058:	d113      	bne.n	8008082 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	23c0      	movs	r3, #192	@ 0xc0
 800805e:	00d9      	lsls	r1, r3, #3
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	0013      	movs	r3, r2
 8008068:	2200      	movs	r2, #0
 800806a:	f7ff ff0f 	bl	8007e8c <SPI_WaitFifoStateUntilTimeout>
 800806e:	1e03      	subs	r3, r0, #0
 8008070:	d007      	beq.n	8008082 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008076:	2220      	movs	r2, #32
 8008078:	431a      	orrs	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e000      	b.n	8008084 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	0018      	movs	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	b004      	add	sp, #16
 800808a:	bd80      	pop	{r7, pc}

0800808c <SPI_EndRxTxTransaction>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	23c0      	movs	r3, #192	@ 0xc0
 8008f64:	0159      	lsls	r1, r3, #5
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	0013      	movs	r3, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f7ff fef0 	bl	8008d54 <SPI_WaitFifoStateUntilTimeout>
 8008f74:	1e03      	subs	r3, r0, #0
 8008f76:	d007      	beq.n	8008f88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e027      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x84>
=======
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	23c0      	movs	r3, #192	@ 0xc0
 800809c:	0159      	lsls	r1, r3, #5
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	0013      	movs	r3, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	f7ff fef0 	bl	8007e8c <SPI_WaitFifoStateUntilTimeout>
 80080ac:	1e03      	subs	r3, r0, #0
 80080ae:	d007      	beq.n	80080c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b4:	2220      	movs	r2, #32
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e027      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	0013      	movs	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	2180      	movs	r1, #128	@ 0x80
 8008f96:	f7ff fe4f 	bl	8008c38 <SPI_WaitFlagStateUntilTimeout>
 8008f9a:	1e03      	subs	r3, r0, #0
 8008f9c:	d007      	beq.n	8008fae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e014      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x84>
=======
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	0013      	movs	r3, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	2180      	movs	r1, #128	@ 0x80
 80080ce:	f7ff fe4f 	bl	8007d70 <SPI_WaitFlagStateUntilTimeout>
 80080d2:	1e03      	subs	r3, r0, #0
 80080d4:	d007      	beq.n	80080e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080da:	2220      	movs	r2, #32
 80080dc:	431a      	orrs	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e014      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	23c0      	movs	r3, #192	@ 0xc0
 8008fb2:	00d9      	lsls	r1, r3, #3
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	0013      	movs	r3, r2
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f7ff fec9 	bl	8008d54 <SPI_WaitFifoStateUntilTimeout>
 8008fc2:	1e03      	subs	r3, r0, #0
 8008fc4:	d007      	beq.n	8008fd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fca:	2220      	movs	r2, #32
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e000      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	0018      	movs	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b004      	add	sp, #16
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_Base_Init>:
=======
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	23c0      	movs	r3, #192	@ 0xc0
 80080ea:	00d9      	lsls	r1, r3, #3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	0013      	movs	r3, r2
 80080f4:	2200      	movs	r2, #0
 80080f6:	f7ff fec9 	bl	8007e8c <SPI_WaitFifoStateUntilTimeout>
 80080fa:	1e03      	subs	r3, r0, #0
 80080fc:	d007      	beq.n	800810e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008102:	2220      	movs	r2, #32
 8008104:	431a      	orrs	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e000      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	0018      	movs	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	b004      	add	sp, #16
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_Base_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e042      	b.n	8009078 <HAL_TIM_Base_Init+0x98>
=======
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e042      	b.n	80081b0 <HAL_TIM_Base_Init+0x98>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	223d      	movs	r2, #61	@ 0x3d
 8008ff6:	5c9b      	ldrb	r3, [r3, r2]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d107      	bne.n	800900e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	223c      	movs	r2, #60	@ 0x3c
 8009002:	2100      	movs	r1, #0
 8009004:	5499      	strb	r1, [r3, r2]
=======
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	223d      	movs	r2, #61	@ 0x3d
 800812e:	5c9b      	ldrb	r3, [r3, r2]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d107      	bne.n	8008146 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	223c      	movs	r2, #60	@ 0x3c
 800813a:	2100      	movs	r1, #0
 800813c:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	0018      	movs	r0, r3
 800900a:	f7fa ff9b 	bl	8003f44 <HAL_TIM_Base_MspInit>
=======
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0018      	movs	r0, r3
 8008142:	f7fa febf 	bl	8002ec4 <HAL_TIM_Base_MspInit>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	223d      	movs	r2, #61	@ 0x3d
 8009012:	2102      	movs	r1, #2
 8009014:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	0019      	movs	r1, r3
 8009020:	0010      	movs	r0, r2
 8009022:	f000 fa17 	bl	8009454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2246      	movs	r2, #70	@ 0x46
 800902a:	2101      	movs	r1, #1
 800902c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	223e      	movs	r2, #62	@ 0x3e
 8009032:	2101      	movs	r1, #1
 8009034:	5499      	strb	r1, [r3, r2]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	223f      	movs	r2, #63	@ 0x3f
 800903a:	2101      	movs	r1, #1
 800903c:	5499      	strb	r1, [r3, r2]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2240      	movs	r2, #64	@ 0x40
 8009042:	2101      	movs	r1, #1
 8009044:	5499      	strb	r1, [r3, r2]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2241      	movs	r2, #65	@ 0x41
 800904a:	2101      	movs	r1, #1
 800904c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2242      	movs	r2, #66	@ 0x42
 8009052:	2101      	movs	r1, #1
 8009054:	5499      	strb	r1, [r3, r2]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2243      	movs	r2, #67	@ 0x43
 800905a:	2101      	movs	r1, #1
 800905c:	5499      	strb	r1, [r3, r2]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2244      	movs	r2, #68	@ 0x44
 8009062:	2101      	movs	r1, #1
 8009064:	5499      	strb	r1, [r3, r2]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2245      	movs	r2, #69	@ 0x45
 800906a:	2101      	movs	r1, #1
 800906c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	223d      	movs	r2, #61	@ 0x3d
 8009072:	2101      	movs	r1, #1
 8009074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b002      	add	sp, #8
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_TIM_IRQHandler>:
=======
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	223d      	movs	r2, #61	@ 0x3d
 800814a:	2102      	movs	r1, #2
 800814c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	0019      	movs	r1, r3
 8008158:	0010      	movs	r0, r2
 800815a:	f000 fa17 	bl	800858c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2246      	movs	r2, #70	@ 0x46
 8008162:	2101      	movs	r1, #1
 8008164:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	223e      	movs	r2, #62	@ 0x3e
 800816a:	2101      	movs	r1, #1
 800816c:	5499      	strb	r1, [r3, r2]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	223f      	movs	r2, #63	@ 0x3f
 8008172:	2101      	movs	r1, #1
 8008174:	5499      	strb	r1, [r3, r2]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2240      	movs	r2, #64	@ 0x40
 800817a:	2101      	movs	r1, #1
 800817c:	5499      	strb	r1, [r3, r2]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2241      	movs	r2, #65	@ 0x41
 8008182:	2101      	movs	r1, #1
 8008184:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2242      	movs	r2, #66	@ 0x42
 800818a:	2101      	movs	r1, #1
 800818c:	5499      	strb	r1, [r3, r2]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2243      	movs	r2, #67	@ 0x43
 8008192:	2101      	movs	r1, #1
 8008194:	5499      	strb	r1, [r3, r2]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2244      	movs	r2, #68	@ 0x44
 800819a:	2101      	movs	r1, #1
 800819c:	5499      	strb	r1, [r3, r2]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2245      	movs	r2, #69	@ 0x45
 80081a2:	2101      	movs	r1, #1
 80081a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	223d      	movs	r2, #61	@ 0x3d
 80081aa:	2101      	movs	r1, #1
 80081ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	0018      	movs	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b002      	add	sp, #8
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2202      	movs	r2, #2
 800909c:	4013      	ands	r3, r2
 800909e:	d021      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2202      	movs	r2, #2
 80090a4:	4013      	ands	r3, r2
 80090a6:	d01d      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2203      	movs	r2, #3
 80090ae:	4252      	negs	r2, r2
 80090b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	2203      	movs	r2, #3
 80090c0:	4013      	ands	r3, r2
 80090c2:	d004      	beq.n	80090ce <HAL_TIM_IRQHandler+0x4e>
=======
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2202      	movs	r2, #2
 80081d4:	4013      	ands	r3, r2
 80081d6:	d021      	beq.n	800821c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2202      	movs	r2, #2
 80081dc:	4013      	ands	r3, r2
 80081de:	d01d      	beq.n	800821c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2203      	movs	r2, #3
 80081e6:	4252      	negs	r2, r2
 80081e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2203      	movs	r2, #3
 80081f8:	4013      	ands	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIM_IRQHandler+0x4e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 f9ac 	bl	8009424 <HAL_TIM_IC_CaptureCallback>
 80090cc:	e007      	b.n	80090de <HAL_TIM_IRQHandler+0x5e>
=======
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	0018      	movs	r0, r3
 8008200:	f000 f9ac 	bl	800855c <HAL_TIM_IC_CaptureCallback>
 8008204:	e007      	b.n	8008216 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	0018      	movs	r0, r3
 80090d2:	f000 f99f 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	0018      	movs	r0, r3
 80090da:	f000 f9ab 	bl	8009434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	771a      	strb	r2, [r3, #28]
=======
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0018      	movs	r0, r3
 800820a:	f000 f99f 	bl	800854c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	0018      	movs	r0, r3
 8008212:	f000 f9ab 	bl	800856c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2204      	movs	r2, #4
 80090e8:	4013      	ands	r3, r2
 80090ea:	d022      	beq.n	8009132 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2204      	movs	r2, #4
 80090f0:	4013      	ands	r3, r2
 80090f2:	d01e      	beq.n	8009132 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2205      	movs	r2, #5
 80090fa:	4252      	negs	r2, r2
 80090fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	23c0      	movs	r3, #192	@ 0xc0
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4013      	ands	r3, r2
 8009110:	d004      	beq.n	800911c <HAL_TIM_IRQHandler+0x9c>
=======
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2204      	movs	r2, #4
 8008220:	4013      	ands	r3, r2
 8008222:	d022      	beq.n	800826a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2204      	movs	r2, #4
 8008228:	4013      	ands	r3, r2
 800822a:	d01e      	beq.n	800826a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2205      	movs	r2, #5
 8008232:	4252      	negs	r2, r2
 8008234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	23c0      	movs	r3, #192	@ 0xc0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4013      	ands	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIM_IRQHandler+0x9c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	0018      	movs	r0, r3
 8009116:	f000 f985 	bl	8009424 <HAL_TIM_IC_CaptureCallback>
 800911a:	e007      	b.n	800912c <HAL_TIM_IRQHandler+0xac>
=======
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	0018      	movs	r0, r3
 800824e:	f000 f985 	bl	800855c <HAL_TIM_IC_CaptureCallback>
 8008252:	e007      	b.n	8008264 <HAL_TIM_IRQHandler+0xac>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	0018      	movs	r0, r3
 8009120:	f000 f978 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	0018      	movs	r0, r3
 8009128:	f000 f984 	bl	8009434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	771a      	strb	r2, [r3, #28]
=======
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	0018      	movs	r0, r3
 8008258:	f000 f978 	bl	800854c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	0018      	movs	r0, r3
 8008260:	f000 f984 	bl	800856c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	771a      	strb	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2208      	movs	r2, #8
 8009136:	4013      	ands	r3, r2
 8009138:	d021      	beq.n	800917e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2208      	movs	r2, #8
 800913e:	4013      	ands	r3, r2
 8009140:	d01d      	beq.n	800917e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2209      	movs	r2, #9
 8009148:	4252      	negs	r2, r2
 800914a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2204      	movs	r2, #4
 8009150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2203      	movs	r2, #3
 800915a:	4013      	ands	r3, r2
 800915c:	d004      	beq.n	8009168 <HAL_TIM_IRQHandler+0xe8>
=======
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2208      	movs	r2, #8
 800826e:	4013      	ands	r3, r2
 8008270:	d021      	beq.n	80082b6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2208      	movs	r2, #8
 8008276:	4013      	ands	r3, r2
 8008278:	d01d      	beq.n	80082b6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2209      	movs	r2, #9
 8008280:	4252      	negs	r2, r2
 8008282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2203      	movs	r2, #3
 8008292:	4013      	ands	r3, r2
 8008294:	d004      	beq.n	80082a0 <HAL_TIM_IRQHandler+0xe8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	0018      	movs	r0, r3
 8009162:	f000 f95f 	bl	8009424 <HAL_TIM_IC_CaptureCallback>
 8009166:	e007      	b.n	8009178 <HAL_TIM_IRQHandler+0xf8>
=======
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	f000 f95f 	bl	800855c <HAL_TIM_IC_CaptureCallback>
 800829e:	e007      	b.n	80082b0 <HAL_TIM_IRQHandler+0xf8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	0018      	movs	r0, r3
 800916c:	f000 f952 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	0018      	movs	r0, r3
 8009174:	f000 f95e 	bl	8009434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	771a      	strb	r2, [r3, #28]
=======
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 f952 	bl	800854c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	0018      	movs	r0, r3
 80082ac:	f000 f95e 	bl	800856c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	771a      	strb	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2210      	movs	r2, #16
 8009182:	4013      	ands	r3, r2
 8009184:	d022      	beq.n	80091cc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2210      	movs	r2, #16
 800918a:	4013      	ands	r3, r2
 800918c:	d01e      	beq.n	80091cc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2211      	movs	r2, #17
 8009194:	4252      	negs	r2, r2
 8009196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2208      	movs	r2, #8
 800919c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	23c0      	movs	r3, #192	@ 0xc0
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4013      	ands	r3, r2
 80091aa:	d004      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x136>
=======
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2210      	movs	r2, #16
 80082ba:	4013      	ands	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2210      	movs	r2, #16
 80082c2:	4013      	ands	r3, r2
 80082c4:	d01e      	beq.n	8008304 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2211      	movs	r2, #17
 80082cc:	4252      	negs	r2, r2
 80082ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2208      	movs	r2, #8
 80082d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	23c0      	movs	r3, #192	@ 0xc0
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4013      	ands	r3, r2
 80082e2:	d004      	beq.n	80082ee <HAL_TIM_IRQHandler+0x136>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	0018      	movs	r0, r3
 80091b0:	f000 f938 	bl	8009424 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e007      	b.n	80091c6 <HAL_TIM_IRQHandler+0x146>
=======
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	0018      	movs	r0, r3
 80082e8:	f000 f938 	bl	800855c <HAL_TIM_IC_CaptureCallback>
 80082ec:	e007      	b.n	80082fe <HAL_TIM_IRQHandler+0x146>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	0018      	movs	r0, r3
 80091ba:	f000 f92b 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	0018      	movs	r0, r3
 80091c2:	f000 f937 	bl	8009434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	771a      	strb	r2, [r3, #28]
=======
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f000 f92b 	bl	800854c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	0018      	movs	r0, r3
 80082fa:	f000 f937 	bl	800856c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	771a      	strb	r2, [r3, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2201      	movs	r2, #1
 80091d0:	4013      	ands	r3, r2
 80091d2:	d00c      	beq.n	80091ee <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	4013      	ands	r3, r2
 80091da:	d008      	beq.n	80091ee <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2202      	movs	r2, #2
 80091e2:	4252      	negs	r2, r2
 80091e4:	611a      	str	r2, [r3, #16]
=======
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2201      	movs	r2, #1
 8008308:	4013      	ands	r3, r2
 800830a:	d00c      	beq.n	8008326 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	4013      	ands	r3, r2
 8008312:	d008      	beq.n	8008326 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2202      	movs	r2, #2
 800831a:	4252      	negs	r2, r2
 800831c:	611a      	str	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	0018      	movs	r0, r3
 80091ea:	f000 f90b 	bl	8009404 <HAL_TIM_PeriodElapsedCallback>
=======
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	0018      	movs	r0, r3
 8008322:	f000 f90b 	bl	800853c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2280      	movs	r2, #128	@ 0x80
 80091f2:	4013      	ands	r3, r2
 80091f4:	d00c      	beq.n	8009210 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2280      	movs	r2, #128	@ 0x80
 80091fa:	4013      	ands	r3, r2
 80091fc:	d008      	beq.n	8009210 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2281      	movs	r2, #129	@ 0x81
 8009204:	4252      	negs	r2, r2
 8009206:	611a      	str	r2, [r3, #16]
=======
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2280      	movs	r2, #128	@ 0x80
 800832a:	4013      	ands	r3, r2
 800832c:	d00c      	beq.n	8008348 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2280      	movs	r2, #128	@ 0x80
 8008332:	4013      	ands	r3, r2
 8008334:	d008      	beq.n	8008348 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2281      	movs	r2, #129	@ 0x81
 800833c:	4252      	negs	r2, r2
 800833e:	611a      	str	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0018      	movs	r0, r3
 800920c:	f000 fab0 	bl	8009770 <HAL_TIMEx_BreakCallback>
=======
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	0018      	movs	r0, r3
 8008344:	f000 fab0 	bl	80088a8 <HAL_TIMEx_BreakCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2240      	movs	r2, #64	@ 0x40
 8009214:	4013      	ands	r3, r2
 8009216:	d00c      	beq.n	8009232 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2240      	movs	r2, #64	@ 0x40
 800921c:	4013      	ands	r3, r2
 800921e:	d008      	beq.n	8009232 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2241      	movs	r2, #65	@ 0x41
 8009226:	4252      	negs	r2, r2
 8009228:	611a      	str	r2, [r3, #16]
=======
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2240      	movs	r2, #64	@ 0x40
 800834c:	4013      	ands	r3, r2
 800834e:	d00c      	beq.n	800836a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	4013      	ands	r3, r2
 8008356:	d008      	beq.n	800836a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2241      	movs	r2, #65	@ 0x41
 800835e:	4252      	negs	r2, r2
 8008360:	611a      	str	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	0018      	movs	r0, r3
 800922e:	f000 f909 	bl	8009444 <HAL_TIM_TriggerCallback>
=======
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	0018      	movs	r0, r3
 8008366:	f000 f909 	bl	800857c <HAL_TIM_TriggerCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2220      	movs	r2, #32
 8009236:	4013      	ands	r3, r2
 8009238:	d00c      	beq.n	8009254 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	4013      	ands	r3, r2
 8009240:	d008      	beq.n	8009254 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2221      	movs	r2, #33	@ 0x21
 8009248:	4252      	negs	r2, r2
 800924a:	611a      	str	r2, [r3, #16]
=======
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2220      	movs	r2, #32
 800836e:	4013      	ands	r3, r2
 8008370:	d00c      	beq.n	800838c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2220      	movs	r2, #32
 8008376:	4013      	ands	r3, r2
 8008378:	d008      	beq.n	800838c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2221      	movs	r2, #33	@ 0x21
 8008380:	4252      	negs	r2, r2
 8008382:	611a      	str	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0018      	movs	r0, r3
 8009250:	f000 fa86 	bl	8009760 <HAL_TIMEx_CommutCallback>
=======
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	0018      	movs	r0, r3
 8008388:	f000 fa86 	bl	8008898 <HAL_TIMEx_CommutCallback>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8009254:	46c0      	nop			@ (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	b004      	add	sp, #16
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_ConfigClockSource>:
=======
 800838c:	46c0      	nop			@ (mov r8, r8)
 800838e:	46bd      	mov	sp, r7
 8008390:	b004      	add	sp, #16
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_TIM_ConfigClockSource>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009266:	230f      	movs	r3, #15
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
=======
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	230f      	movs	r3, #15
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	223c      	movs	r2, #60	@ 0x3c
 8009272:	5c9b      	ldrb	r3, [r3, r2]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_TIM_ConfigClockSource+0x20>
 8009278:	2302      	movs	r3, #2
 800927a:	e0bc      	b.n	80093f6 <HAL_TIM_ConfigClockSource+0x19a>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	223c      	movs	r2, #60	@ 0x3c
 8009280:	2101      	movs	r1, #1
 8009282:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	223d      	movs	r2, #61	@ 0x3d
 8009288:	2102      	movs	r1, #2
 800928a:	5499      	strb	r1, [r3, r2]
=======
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	223c      	movs	r2, #60	@ 0x3c
 80083aa:	5c9b      	ldrb	r3, [r3, r2]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_TIM_ConfigClockSource+0x20>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e0bc      	b.n	800852e <HAL_TIM_ConfigClockSource+0x19a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	223c      	movs	r2, #60	@ 0x3c
 80083b8:	2101      	movs	r1, #1
 80083ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	223d      	movs	r2, #61	@ 0x3d
 80083c0:	2102      	movs	r1, #2
 80083c2:	5499      	strb	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2277      	movs	r2, #119	@ 0x77
 8009298:	4393      	bics	r3, r2
 800929a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4a58      	ldr	r2, [pc, #352]	@ (8009400 <HAL_TIM_ConfigClockSource+0x1a4>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2280      	movs	r2, #128	@ 0x80
 80092b2:	0192      	lsls	r2, r2, #6
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d040      	beq.n	800933a <HAL_TIM_ConfigClockSource+0xde>
 80092b8:	2280      	movs	r2, #128	@ 0x80
 80092ba:	0192      	lsls	r2, r2, #6
 80092bc:	4293      	cmp	r3, r2
 80092be:	d900      	bls.n	80092c2 <HAL_TIM_ConfigClockSource+0x66>
 80092c0:	e088      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092c2:	2280      	movs	r2, #128	@ 0x80
 80092c4:	0152      	lsls	r2, r2, #5
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d100      	bne.n	80092cc <HAL_TIM_ConfigClockSource+0x70>
 80092ca:	e088      	b.n	80093de <HAL_TIM_ConfigClockSource+0x182>
 80092cc:	2280      	movs	r2, #128	@ 0x80
 80092ce:	0152      	lsls	r2, r2, #5
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d900      	bls.n	80092d6 <HAL_TIM_ConfigClockSource+0x7a>
 80092d4:	e07e      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092d6:	2b70      	cmp	r3, #112	@ 0x70
 80092d8:	d018      	beq.n	800930c <HAL_TIM_ConfigClockSource+0xb0>
 80092da:	d900      	bls.n	80092de <HAL_TIM_ConfigClockSource+0x82>
 80092dc:	e07a      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092de:	2b60      	cmp	r3, #96	@ 0x60
 80092e0:	d04f      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x126>
 80092e2:	d900      	bls.n	80092e6 <HAL_TIM_ConfigClockSource+0x8a>
 80092e4:	e076      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092e6:	2b50      	cmp	r3, #80	@ 0x50
 80092e8:	d03b      	beq.n	8009362 <HAL_TIM_ConfigClockSource+0x106>
 80092ea:	d900      	bls.n	80092ee <HAL_TIM_ConfigClockSource+0x92>
 80092ec:	e072      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092ee:	2b40      	cmp	r3, #64	@ 0x40
 80092f0:	d057      	beq.n	80093a2 <HAL_TIM_ConfigClockSource+0x146>
 80092f2:	d900      	bls.n	80092f6 <HAL_TIM_ConfigClockSource+0x9a>
 80092f4:	e06e      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092f6:	2b30      	cmp	r3, #48	@ 0x30
 80092f8:	d063      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x166>
 80092fa:	d86b      	bhi.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d060      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x166>
 8009300:	d868      	bhi.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05d      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x166>
 8009306:	2b10      	cmp	r3, #16
 8009308:	d05b      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x166>
 800930a:	e063      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x178>
=======
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2277      	movs	r2, #119	@ 0x77
 80083d0:	4393      	bics	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4a58      	ldr	r2, [pc, #352]	@ (8008538 <HAL_TIM_ConfigClockSource+0x1a4>)
 80083d8:	4013      	ands	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2280      	movs	r2, #128	@ 0x80
 80083ea:	0192      	lsls	r2, r2, #6
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d040      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xde>
 80083f0:	2280      	movs	r2, #128	@ 0x80
 80083f2:	0192      	lsls	r2, r2, #6
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d900      	bls.n	80083fa <HAL_TIM_ConfigClockSource+0x66>
 80083f8:	e088      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 80083fa:	2280      	movs	r2, #128	@ 0x80
 80083fc:	0152      	lsls	r2, r2, #5
 80083fe:	4293      	cmp	r3, r2
 8008400:	d100      	bne.n	8008404 <HAL_TIM_ConfigClockSource+0x70>
 8008402:	e088      	b.n	8008516 <HAL_TIM_ConfigClockSource+0x182>
 8008404:	2280      	movs	r2, #128	@ 0x80
 8008406:	0152      	lsls	r2, r2, #5
 8008408:	4293      	cmp	r3, r2
 800840a:	d900      	bls.n	800840e <HAL_TIM_ConfigClockSource+0x7a>
 800840c:	e07e      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 800840e:	2b70      	cmp	r3, #112	@ 0x70
 8008410:	d018      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xb0>
 8008412:	d900      	bls.n	8008416 <HAL_TIM_ConfigClockSource+0x82>
 8008414:	e07a      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 8008416:	2b60      	cmp	r3, #96	@ 0x60
 8008418:	d04f      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0x126>
 800841a:	d900      	bls.n	800841e <HAL_TIM_ConfigClockSource+0x8a>
 800841c:	e076      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 800841e:	2b50      	cmp	r3, #80	@ 0x50
 8008420:	d03b      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x106>
 8008422:	d900      	bls.n	8008426 <HAL_TIM_ConfigClockSource+0x92>
 8008424:	e072      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	d057      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x146>
 800842a:	d900      	bls.n	800842e <HAL_TIM_ConfigClockSource+0x9a>
 800842c:	e06e      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 800842e:	2b30      	cmp	r3, #48	@ 0x30
 8008430:	d063      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x166>
 8008432:	d86b      	bhi.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 8008434:	2b20      	cmp	r3, #32
 8008436:	d060      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x166>
 8008438:	d868      	bhi.n	800850c <HAL_TIM_ConfigClockSource+0x178>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05d      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x166>
 800843e:	2b10      	cmp	r3, #16
 8008440:	d05b      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x166>
 8008442:	e063      	b.n	800850c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800931c:	f000 f9a2 	bl	8009664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2277      	movs	r2, #119	@ 0x77
 800932c:	4313      	orrs	r3, r2
 800932e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	609a      	str	r2, [r3, #8]
      break;
 8009338:	e052      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008454:	f000 f9a2 	bl	800879c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2277      	movs	r2, #119	@ 0x77
 8008464:	4313      	orrs	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	609a      	str	r2, [r3, #8]
      break;
 8008470:	e052      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800934a:	f000 f98b 	bl	8009664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2180      	movs	r1, #128	@ 0x80
 800935a:	01c9      	lsls	r1, r1, #7
 800935c:	430a      	orrs	r2, r1
 800935e:	609a      	str	r2, [r3, #8]
      break;
 8009360:	e03e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	f000 f98b 	bl	800879c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2180      	movs	r1, #128	@ 0x80
 8008492:	01c9      	lsls	r1, r1, #7
 8008494:	430a      	orrs	r2, r1
 8008496:	609a      	str	r2, [r3, #8]
      break;
 8008498:	e03e      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800936e:	001a      	movs	r2, r3
 8009370:	f000 f8fe 	bl	8009570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2150      	movs	r1, #80	@ 0x50
 800937a:	0018      	movs	r0, r3
 800937c:	f000 f958 	bl	8009630 <TIM_ITRx_SetConfig>
      break;
 8009380:	e02e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a6:	001a      	movs	r2, r3
 80084a8:	f000 f8fe 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2150      	movs	r1, #80	@ 0x50
 80084b2:	0018      	movs	r0, r3
 80084b4:	f000 f958 	bl	8008768 <TIM_ITRx_SetConfig>
      break;
 80084b8:	e02e      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800938e:	001a      	movs	r2, r3
 8009390:	f000 f91c 	bl	80095cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2160      	movs	r1, #96	@ 0x60
 800939a:	0018      	movs	r0, r3
 800939c:	f000 f948 	bl	8009630 <TIM_ITRx_SetConfig>
      break;
 80093a0:	e01e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084c6:	001a      	movs	r2, r3
 80084c8:	f000 f91c 	bl	8008704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2160      	movs	r1, #96	@ 0x60
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 f948 	bl	8008768 <TIM_ITRx_SetConfig>
      break;
 80084d8:	e01e      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ae:	001a      	movs	r2, r3
 80093b0:	f000 f8de 	bl	8009570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2140      	movs	r1, #64	@ 0x40
 80093ba:	0018      	movs	r0, r3
 80093bc:	f000 f938 	bl	8009630 <TIM_ITRx_SetConfig>
      break;
 80093c0:	e00e      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e6:	001a      	movs	r2, r3
 80084e8:	f000 f8de 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2140      	movs	r1, #64	@ 0x40
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 f938 	bl	8008768 <TIM_ITRx_SetConfig>
      break;
 80084f8:	e00e      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	0019      	movs	r1, r3
 80093cc:	0010      	movs	r0, r2
 80093ce:	f000 f92f 	bl	8009630 <TIM_ITRx_SetConfig>
      break;
 80093d2:	e005      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
=======
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	0019      	movs	r1, r3
 8008504:	0010      	movs	r0, r2
 8008506:	f000 f92f 	bl	8008768 <TIM_ITRx_SetConfig>
      break;
 800850a:	e005      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80093d4:	230f      	movs	r3, #15
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2201      	movs	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
      break;
 80093dc:	e000      	b.n	80093e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80093de:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	223d      	movs	r2, #61	@ 0x3d
 80093e4:	2101      	movs	r1, #1
 80093e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	223c      	movs	r2, #60	@ 0x3c
 80093ec:	2100      	movs	r1, #0
 80093ee:	5499      	strb	r1, [r3, r2]

  return status;
 80093f0:	230f      	movs	r3, #15
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	781b      	ldrb	r3, [r3, #0]
}
 80093f6:	0018      	movs	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b004      	add	sp, #16
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	46c0      	nop			@ (mov r8, r8)
 8009400:	ffff00ff 	.word	0xffff00ff

08009404 <HAL_TIM_PeriodElapsedCallback>:
=======
 800850c:	230f      	movs	r3, #15
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	2201      	movs	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
      break;
 8008514:	e000      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008516:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	223d      	movs	r2, #61	@ 0x3d
 800851c:	2101      	movs	r1, #1
 800851e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	223c      	movs	r2, #60	@ 0x3c
 8008524:	2100      	movs	r1, #0
 8008526:	5499      	strb	r1, [r3, r2]

  return status;
 8008528:	230f      	movs	r3, #15
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	781b      	ldrb	r3, [r3, #0]
}
 800852e:	0018      	movs	r0, r3
 8008530:	46bd      	mov	sp, r7
 8008532:	b004      	add	sp, #16
 8008534:	bd80      	pop	{r7, pc}
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	ffff00ff 	.word	0xffff00ff

0800853c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
=======
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800940c:	46c0      	nop			@ (mov r8, r8)
 800940e:	46bd      	mov	sp, r7
 8009410:	b002      	add	sp, #8
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8008544:	46c0      	nop			@ (mov r8, r8)
 8008546:	46bd      	mov	sp, r7
 8008548:	b002      	add	sp, #8
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
=======
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	46bd      	mov	sp, r7
 8009420:	b002      	add	sp, #8
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_TIM_IC_CaptureCallback>:
=======
 8008554:	46c0      	nop			@ (mov r8, r8)
 8008556:	46bd      	mov	sp, r7
 8008558:	b002      	add	sp, #8
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
=======
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800942c:	46c0      	nop			@ (mov r8, r8)
 800942e:	46bd      	mov	sp, r7
 8009430:	b002      	add	sp, #8
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8008564:	46c0      	nop			@ (mov r8, r8)
 8008566:	46bd      	mov	sp, r7
 8008568:	b002      	add	sp, #8
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
=======
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800943c:	46c0      	nop			@ (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b002      	add	sp, #8
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_TIM_TriggerCallback>:
=======
 8008574:	46c0      	nop			@ (mov r8, r8)
 8008576:	46bd      	mov	sp, r7
 8008578:	b002      	add	sp, #8
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_TIM_TriggerCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
=======
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800944c:	46c0      	nop			@ (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	b002      	add	sp, #8
 8009452:	bd80      	pop	{r7, pc}

08009454 <TIM_Base_SetConfig>:
=======
 8008584:	46c0      	nop			@ (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b002      	add	sp, #8
 800858a:	bd80      	pop	{r7, pc}

0800858c <TIM_Base_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a3b      	ldr	r2, [pc, #236]	@ (8009554 <TIM_Base_SetConfig+0x100>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d008      	beq.n	800947e <TIM_Base_SetConfig+0x2a>
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	2380      	movs	r3, #128	@ 0x80
 8009470:	05db      	lsls	r3, r3, #23
 8009472:	429a      	cmp	r2, r3
 8009474:	d003      	beq.n	800947e <TIM_Base_SetConfig+0x2a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a37      	ldr	r2, [pc, #220]	@ (8009558 <TIM_Base_SetConfig+0x104>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d108      	bne.n	8009490 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2270      	movs	r2, #112	@ 0x70
 8009482:	4393      	bics	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a30      	ldr	r2, [pc, #192]	@ (8009554 <TIM_Base_SetConfig+0x100>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d018      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	2380      	movs	r3, #128	@ 0x80
 800949c:	05db      	lsls	r3, r3, #23
 800949e:	429a      	cmp	r2, r3
 80094a0:	d013      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009558 <TIM_Base_SetConfig+0x104>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00f      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2b      	ldr	r2, [pc, #172]	@ (800955c <TIM_Base_SetConfig+0x108>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00b      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009560 <TIM_Base_SetConfig+0x10c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d007      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a29      	ldr	r2, [pc, #164]	@ (8009564 <TIM_Base_SetConfig+0x110>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_Base_SetConfig+0x76>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a28      	ldr	r2, [pc, #160]	@ (8009568 <TIM_Base_SetConfig+0x114>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d108      	bne.n	80094dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4a27      	ldr	r2, [pc, #156]	@ (800956c <TIM_Base_SetConfig+0x118>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
=======
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a3b      	ldr	r2, [pc, #236]	@ (800868c <TIM_Base_SetConfig+0x100>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d008      	beq.n	80085b6 <TIM_Base_SetConfig+0x2a>
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	2380      	movs	r3, #128	@ 0x80
 80085a8:	05db      	lsls	r3, r3, #23
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d003      	beq.n	80085b6 <TIM_Base_SetConfig+0x2a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a37      	ldr	r2, [pc, #220]	@ (8008690 <TIM_Base_SetConfig+0x104>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d108      	bne.n	80085c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2270      	movs	r2, #112	@ 0x70
 80085ba:	4393      	bics	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a30      	ldr	r2, [pc, #192]	@ (800868c <TIM_Base_SetConfig+0x100>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d018      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	2380      	movs	r3, #128	@ 0x80
 80085d4:	05db      	lsls	r3, r3, #23
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d013      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008690 <TIM_Base_SetConfig+0x104>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00f      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008694 <TIM_Base_SetConfig+0x108>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <TIM_Base_SetConfig+0x10c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a29      	ldr	r2, [pc, #164]	@ (800869c <TIM_Base_SetConfig+0x110>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_Base_SetConfig+0x76>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <TIM_Base_SetConfig+0x114>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d108      	bne.n	8008614 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4a27      	ldr	r2, [pc, #156]	@ (80086a4 <TIM_Base_SetConfig+0x118>)
 8008606:	4013      	ands	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2280      	movs	r2, #128	@ 0x80
 80094e0:	4393      	bics	r3, r2
 80094e2:	001a      	movs	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a13      	ldr	r2, [pc, #76]	@ (8009554 <TIM_Base_SetConfig+0x100>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00b      	beq.n	8009522 <TIM_Base_SetConfig+0xce>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a14      	ldr	r2, [pc, #80]	@ (8009560 <TIM_Base_SetConfig+0x10c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d007      	beq.n	8009522 <TIM_Base_SetConfig+0xce>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a13      	ldr	r2, [pc, #76]	@ (8009564 <TIM_Base_SetConfig+0x110>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_Base_SetConfig+0xce>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a12      	ldr	r2, [pc, #72]	@ (8009568 <TIM_Base_SetConfig+0x114>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d103      	bne.n	800952a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2280      	movs	r2, #128	@ 0x80
 8008618:	4393      	bics	r3, r2
 800861a:	001a      	movs	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a13      	ldr	r2, [pc, #76]	@ (800868c <TIM_Base_SetConfig+0x100>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00b      	beq.n	800865a <TIM_Base_SetConfig+0xce>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a14      	ldr	r2, [pc, #80]	@ (8008698 <TIM_Base_SetConfig+0x10c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d007      	beq.n	800865a <TIM_Base_SetConfig+0xce>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a13      	ldr	r2, [pc, #76]	@ (800869c <TIM_Base_SetConfig+0x110>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_Base_SetConfig+0xce>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a12      	ldr	r2, [pc, #72]	@ (80086a0 <TIM_Base_SetConfig+0x114>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d103      	bne.n	8008662 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	2201      	movs	r2, #1
 8009536:	4013      	ands	r3, r2
 8009538:	2b01      	cmp	r3, #1
 800953a:	d106      	bne.n	800954a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2201      	movs	r2, #1
 8009542:	4393      	bics	r3, r2
 8009544:	001a      	movs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]
  }
}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	46bd      	mov	sp, r7
 800954e:	b004      	add	sp, #16
 8009550:	bd80      	pop	{r7, pc}
 8009552:	46c0      	nop			@ (mov r8, r8)
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40000400 	.word	0x40000400
 800955c:	40002000 	.word	0x40002000
 8009560:	40014000 	.word	0x40014000
 8009564:	40014400 	.word	0x40014400
 8009568:	40014800 	.word	0x40014800
 800956c:	fffffcff 	.word	0xfffffcff

08009570 <TIM_TI1_ConfigInputStage>:
=======
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2201      	movs	r2, #1
 800866e:	4013      	ands	r3, r2
 8008670:	2b01      	cmp	r3, #1
 8008672:	d106      	bne.n	8008682 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	2201      	movs	r2, #1
 800867a:	4393      	bics	r3, r2
 800867c:	001a      	movs	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]
  }
}
 8008682:	46c0      	nop			@ (mov r8, r8)
 8008684:	46bd      	mov	sp, r7
 8008686:	b004      	add	sp, #16
 8008688:	bd80      	pop	{r7, pc}
 800868a:	46c0      	nop			@ (mov r8, r8)
 800868c:	40012c00 	.word	0x40012c00
 8008690:	40000400 	.word	0x40000400
 8008694:	40002000 	.word	0x40002000
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800
 80086a4:	fffffcff 	.word	0xfffffcff

080086a8 <TIM_TI1_ConfigInputStage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
=======
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	2201      	movs	r2, #1
 8009588:	4393      	bics	r3, r2
 800958a:	001a      	movs	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	22f0      	movs	r2, #240	@ 0xf0
 800959a:	4393      	bics	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	220a      	movs	r2, #10
 80095ac:	4393      	bics	r3, r2
 80095ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	621a      	str	r2, [r3, #32]
}
 80095c4:	46c0      	nop			@ (mov r8, r8)
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b006      	add	sp, #24
 80095ca:	bd80      	pop	{r7, pc}

080095cc <TIM_TI2_ConfigInputStage>:
=======
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2201      	movs	r2, #1
 80086c0:	4393      	bics	r3, r2
 80086c2:	001a      	movs	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	22f0      	movs	r2, #240	@ 0xf0
 80086d2:	4393      	bics	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	220a      	movs	r2, #10
 80086e4:	4393      	bics	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	621a      	str	r2, [r3, #32]
}
 80086fc:	46c0      	nop			@ (mov r8, r8)
 80086fe:	46bd      	mov	sp, r7
 8008700:	b006      	add	sp, #24
 8008702:	bd80      	pop	{r7, pc}

08008704 <TIM_TI2_ConfigInputStage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
=======
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	2210      	movs	r2, #16
 80095e4:	4393      	bics	r3, r2
 80095e6:	001a      	movs	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4a0d      	ldr	r2, [pc, #52]	@ (800962c <TIM_TI2_ConfigInputStage+0x60>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	031b      	lsls	r3, r3, #12
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4313      	orrs	r3, r2
 8009602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	22a0      	movs	r2, #160	@ 0xa0
 8009608:	4393      	bics	r3, r2
 800960a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	46bd      	mov	sp, r7
 8009626:	b006      	add	sp, #24
 8009628:	bd80      	pop	{r7, pc}
 800962a:	46c0      	nop			@ (mov r8, r8)
 800962c:	ffff0fff 	.word	0xffff0fff

08009630 <TIM_ITRx_SetConfig>:
=======
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	2210      	movs	r2, #16
 800871c:	4393      	bics	r3, r2
 800871e:	001a      	movs	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4a0d      	ldr	r2, [pc, #52]	@ (8008764 <TIM_TI2_ConfigInputStage+0x60>)
 800872e:	4013      	ands	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	031b      	lsls	r3, r3, #12
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	22a0      	movs	r2, #160	@ 0xa0
 8008740:	4393      	bics	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	46c0      	nop			@ (mov r8, r8)
 800875c:	46bd      	mov	sp, r7
 800875e:	b006      	add	sp, #24
 8008760:	bd80      	pop	{r7, pc}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	ffff0fff 	.word	0xffff0fff

08008768 <TIM_ITRx_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
=======
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2270      	movs	r2, #112	@ 0x70
 8009644:	4393      	bics	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	2207      	movs	r2, #7
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	609a      	str	r2, [r3, #8]
}
 800965a:	46c0      	nop			@ (mov r8, r8)
 800965c:	46bd      	mov	sp, r7
 800965e:	b004      	add	sp, #16
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <TIM_ETR_SetConfig>:
=======
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2270      	movs	r2, #112	@ 0x70
 800877c:	4393      	bics	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4313      	orrs	r3, r2
 8008786:	2207      	movs	r2, #7
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	609a      	str	r2, [r3, #8]
}
 8008792:	46c0      	nop			@ (mov r8, r8)
 8008794:	46bd      	mov	sp, r7
 8008796:	b004      	add	sp, #16
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <TIM_ETR_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	4a09      	ldr	r2, [pc, #36]	@ (80096a0 <TIM_ETR_SetConfig+0x3c>)
 800967c:	4013      	ands	r3, r2
 800967e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	021a      	lsls	r2, r3, #8
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	431a      	orrs	r2, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4313      	orrs	r3, r2
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	4313      	orrs	r3, r2
 8009690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	609a      	str	r2, [r3, #8]
}
 8009698:	46c0      	nop			@ (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	b006      	add	sp, #24
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	ffff00ff 	.word	0xffff00ff

080096a4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4a09      	ldr	r2, [pc, #36]	@ (80087d8 <TIM_ETR_SetConfig+0x3c>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	021a      	lsls	r2, r3, #8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	431a      	orrs	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	46c0      	nop			@ (mov r8, r8)
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b006      	add	sp, #24
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	ffff00ff 	.word	0xffff00ff

080087dc <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
=======
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	223c      	movs	r2, #60	@ 0x3c
 80096b2:	5c9b      	ldrb	r3, [r3, r2]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e047      	b.n	800974c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	223c      	movs	r2, #60	@ 0x3c
 80096c0:	2101      	movs	r1, #1
 80096c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	223d      	movs	r2, #61	@ 0x3d
 80096c8:	2102      	movs	r1, #2
 80096ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2270      	movs	r2, #112	@ 0x70
 80096e0:	4393      	bics	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00f      	beq.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	2380      	movs	r3, #128	@ 0x80
 8009706:	05db      	lsls	r3, r3, #23
 8009708:	429a      	cmp	r2, r3
 800970a:	d009      	beq.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a11      	ldr	r2, [pc, #68]	@ (8009758 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a10      	ldr	r2, [pc, #64]	@ (800975c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10c      	bne.n	800973a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2280      	movs	r2, #128	@ 0x80
 8009724:	4393      	bics	r3, r2
 8009726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	4313      	orrs	r3, r2
 8009730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	609a      	str	r2, [r3, #8]
=======
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	223c      	movs	r2, #60	@ 0x3c
 80087ea:	5c9b      	ldrb	r3, [r3, r2]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e047      	b.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	223c      	movs	r2, #60	@ 0x3c
 80087f8:	2101      	movs	r1, #1
 80087fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	223d      	movs	r2, #61	@ 0x3d
 8008800:	2102      	movs	r1, #2
 8008802:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2270      	movs	r2, #112	@ 0x70
 8008818:	4393      	bics	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a16      	ldr	r2, [pc, #88]	@ (800888c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	2380      	movs	r3, #128	@ 0x80
 800883e:	05db      	lsls	r3, r3, #23
 8008840:	429a      	cmp	r2, r3
 8008842:	d009      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a11      	ldr	r2, [pc, #68]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a10      	ldr	r2, [pc, #64]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d10c      	bne.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2280      	movs	r2, #128	@ 0x80
 800885c:	4393      	bics	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4313      	orrs	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	609a      	str	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	223d      	movs	r2, #61	@ 0x3d
 800973e:	2101      	movs	r1, #1
 8009740:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	223c      	movs	r2, #60	@ 0x3c
 8009746:	2100      	movs	r1, #0
 8009748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	0018      	movs	r0, r3
 800974e:	46bd      	mov	sp, r7
 8009750:	b004      	add	sp, #16
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40012c00 	.word	0x40012c00
 8009758:	40000400 	.word	0x40000400
 800975c:	40014000 	.word	0x40014000

08009760 <HAL_TIMEx_CommutCallback>:
=======
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	223d      	movs	r2, #61	@ 0x3d
 8008876:	2101      	movs	r1, #1
 8008878:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	223c      	movs	r2, #60	@ 0x3c
 800887e:	2100      	movs	r1, #0
 8008880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	0018      	movs	r0, r3
 8008886:	46bd      	mov	sp, r7
 8008888:	b004      	add	sp, #16
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40000400 	.word	0x40000400
 8008894:	40014000 	.word	0x40014000

08008898 <HAL_TIMEx_CommutCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
=======
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009768:	46c0      	nop			@ (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_TIMEx_BreakCallback>:
=======
 80088a0:	46c0      	nop			@ (mov r8, r8)
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b002      	add	sp, #8
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
=======
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009778:	46c0      	nop			@ (mov r8, r8)
 800977a:	46bd      	mov	sp, r7
 800977c:	b002      	add	sp, #8
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_UART_Init>:
=======
 80088b0:	46c0      	nop			@ (mov r8, r8)
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b002      	add	sp, #8
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UART_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e053      	b.n	800983a <HAL_UART_Init+0xba>
=======
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e053      	b.n	8008972 <HAL_UART_Init+0xba>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d116      	bne.n	80097c8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2278      	movs	r2, #120	@ 0x78
 800979e:	2100      	movs	r1, #0
 80097a0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	0018      	movs	r0, r3
 80097a6:	f000 fbeb 	bl	8009f80 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	22b0      	movs	r2, #176	@ 0xb0
 80097ae:	589b      	ldr	r3, [r3, r2]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	21b0      	movs	r1, #176	@ 0xb0
 80097b8:	4a22      	ldr	r2, [pc, #136]	@ (8009844 <HAL_UART_Init+0xc4>)
 80097ba:	505a      	str	r2, [r3, r1]
=======
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d116      	bne.n	8008900 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2278      	movs	r2, #120	@ 0x78
 80088d6:	2100      	movs	r1, #0
 80088d8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0018      	movs	r0, r3
 80088de:	f000 fbeb 	bl	80090b8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	22b0      	movs	r2, #176	@ 0xb0
 80088e6:	589b      	ldr	r3, [r3, r2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	21b0      	movs	r1, #176	@ 0xb0
 80088f0:	4a22      	ldr	r2, [pc, #136]	@ (800897c <HAL_UART_Init+0xc4>)
 80088f2:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
<<<<<<< HEAD
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	22b0      	movs	r2, #176	@ 0xb0
 80097c0:	589b      	ldr	r3, [r3, r2]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	0010      	movs	r0, r2
 80097c6:	4798      	blx	r3
=======
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	22b0      	movs	r2, #176	@ 0xb0
 80088f8:	589b      	ldr	r3, [r3, r2]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	0010      	movs	r0, r2
 80088fe:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2224      	movs	r2, #36	@ 0x24
 80097cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2101      	movs	r1, #1
 80097da:	438a      	bics	r2, r1
 80097dc:	601a      	str	r2, [r3, #0]
=======
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	@ 0x24
 8008904:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2101      	movs	r1, #1
 8008912:	438a      	bics	r2, r1
 8008914:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	0018      	movs	r0, r3
 80097ea:	f000 fd95 	bl	800a318 <UART_AdvFeatureConfig>
=======
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	0018      	movs	r0, r3
 8008922:	f000 fd95 	bl	8009450 <UART_AdvFeatureConfig>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	0018      	movs	r0, r3
 80097f2:	f000 fc09 	bl	800a008 <UART_SetConfig>
 80097f6:	0003      	movs	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e01c      	b.n	800983a <HAL_UART_Init+0xba>
=======
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	0018      	movs	r0, r3
 800892a:	f000 fc09 	bl	8009140 <UART_SetConfig>
 800892e:	0003      	movs	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e01c      	b.n	8008972 <HAL_UART_Init+0xba>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	490f      	ldr	r1, [pc, #60]	@ (8009848 <HAL_UART_Init+0xc8>)
 800980c:	400a      	ands	r2, r1
 800980e:	605a      	str	r2, [r3, #4]
=======
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	490f      	ldr	r1, [pc, #60]	@ (8008980 <HAL_UART_Init+0xc8>)
 8008944:	400a      	ands	r2, r1
 8008946:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
<<<<<<< HEAD
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	212a      	movs	r1, #42	@ 0x2a
 800981c:	438a      	bics	r2, r1
 800981e:	609a      	str	r2, [r3, #8]
=======
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	212a      	movs	r1, #42	@ 0x2a
 8008954:	438a      	bics	r2, r1
 8008956:	609a      	str	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
<<<<<<< HEAD
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2101      	movs	r1, #1
 800982c:	430a      	orrs	r2, r1
 800982e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	0018      	movs	r0, r3
 8009834:	f000 fe24 	bl	800a480 <UART_CheckIdleState>
 8009838:	0003      	movs	r3, r0
}
 800983a:	0018      	movs	r0, r3
 800983c:	46bd      	mov	sp, r7
 800983e:	b002      	add	sp, #8
 8009840:	bd80      	pop	{r7, pc}
 8009842:	46c0      	nop			@ (mov r8, r8)
 8009844:	08003f91 	.word	0x08003f91
 8009848:	ffffb7ff 	.word	0xffffb7ff

0800984c <HAL_UART_Transmit_IT>:
=======
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2101      	movs	r1, #1
 8008964:	430a      	orrs	r2, r1
 8008966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	0018      	movs	r0, r3
 800896c:	f000 fe24 	bl	80095b8 <UART_CheckIdleState>
 8008970:	0003      	movs	r3, r0
}
 8008972:	0018      	movs	r0, r3
 8008974:	46bd      	mov	sp, r7
 8008976:	b002      	add	sp, #8
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			@ (mov r8, r8)
 800897c:	08002f11 	.word	0x08002f11
 8008980:	ffffb7ff 	.word	0xffffb7ff

08008984 <HAL_UART_Transmit_IT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800985e:	2b20      	cmp	r3, #32
 8009860:	d15b      	bne.n	800991a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_UART_Transmit_IT+0x24>
 8009868:	1dbb      	adds	r3, r7, #6
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e053      	b.n	800991c <HAL_UART_Transmit_IT+0xd0>
=======
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	1dbb      	adds	r3, r7, #6
 8008990:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008996:	2b20      	cmp	r3, #32
 8008998:	d15b      	bne.n	8008a52 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_UART_Transmit_IT+0x24>
 80089a0:	1dbb      	adds	r3, r7, #6
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e053      	b.n	8008a54 <HAL_UART_Transmit_IT+0xd0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	2380      	movs	r3, #128	@ 0x80
 800987a:	015b      	lsls	r3, r3, #5
 800987c:	429a      	cmp	r2, r3
 800987e:	d109      	bne.n	8009894 <HAL_UART_Transmit_IT+0x48>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2201      	movs	r2, #1
 800988c:	4013      	ands	r3, r2
 800988e:	d001      	beq.n	8009894 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e043      	b.n	800991c <HAL_UART_Transmit_IT+0xd0>
=======
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	2380      	movs	r3, #128	@ 0x80
 80089b2:	015b      	lsls	r3, r3, #5
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d109      	bne.n	80089cc <HAL_UART_Transmit_IT+0x48>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2201      	movs	r2, #1
 80089c4:	4013      	ands	r3, r2
 80089c6:	d001      	beq.n	80089cc <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e043      	b.n	8008a54 <HAL_UART_Transmit_IT+0xd0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }

    huart->pTxBuffPtr  = pData;
<<<<<<< HEAD
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1dba      	adds	r2, r7, #6
 800989e:	2150      	movs	r1, #80	@ 0x50
 80098a0:	8812      	ldrh	r2, [r2, #0]
 80098a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	1dba      	adds	r2, r7, #6
 80098a8:	2152      	movs	r1, #82	@ 0x52
 80098aa:	8812      	ldrh	r2, [r2, #0]
 80098ac:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2284      	movs	r2, #132	@ 0x84
 80098b8:	2100      	movs	r1, #0
 80098ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2221      	movs	r2, #33	@ 0x21
 80098c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	2380      	movs	r3, #128	@ 0x80
 80098c8:	015b      	lsls	r3, r3, #5
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d107      	bne.n	80098de <HAL_UART_Transmit_IT+0x92>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a12      	ldr	r2, [pc, #72]	@ (8009924 <HAL_UART_Transmit_IT+0xd8>)
 80098da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80098dc:	e002      	b.n	80098e4 <HAL_UART_Transmit_IT+0x98>
=======
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1dba      	adds	r2, r7, #6
 80089d6:	2150      	movs	r1, #80	@ 0x50
 80089d8:	8812      	ldrh	r2, [r2, #0]
 80089da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1dba      	adds	r2, r7, #6
 80089e0:	2152      	movs	r1, #82	@ 0x52
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2284      	movs	r2, #132	@ 0x84
 80089f0:	2100      	movs	r1, #0
 80089f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2221      	movs	r2, #33	@ 0x21
 80089f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	2380      	movs	r3, #128	@ 0x80
 8008a00:	015b      	lsls	r3, r3, #5
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d107      	bne.n	8008a16 <HAL_UART_Transmit_IT+0x92>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4a12      	ldr	r2, [pc, #72]	@ (8008a5c <HAL_UART_Transmit_IT+0xd8>)
 8008a12:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008a14:	e002      	b.n	8008a1c <HAL_UART_Transmit_IT+0x98>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
<<<<<<< HEAD
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a11      	ldr	r2, [pc, #68]	@ (8009928 <HAL_UART_Transmit_IT+0xdc>)
 80098e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e4:	f3ef 8310 	mrs	r3, PRIMASK
 80098e8:	613b      	str	r3, [r7, #16]
  return(result);
 80098ea:	693b      	ldr	r3, [r7, #16]
=======
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4a11      	ldr	r2, [pc, #68]	@ (8008a60 <HAL_UART_Transmit_IT+0xdc>)
 8008a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a20:	613b      	str	r3, [r7, #16]
  return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
<<<<<<< HEAD
 80098ec:	61fb      	str	r3, [r7, #28]
 80098ee:	2301      	movs	r3, #1
 80098f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f383 8810 	msr	PRIMASK, r3
}
 80098f8:	46c0      	nop			@ (mov r8, r8)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2180      	movs	r1, #128	@ 0x80
 8009906:	430a      	orrs	r2, r1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f383 8810 	msr	PRIMASK, r3
}
 8009914:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	e000      	b.n	800991c <HAL_UART_Transmit_IT+0xd0>
=======
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	2301      	movs	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f383 8810 	msr	PRIMASK, r3
}
 8008a30:	46c0      	nop			@ (mov r8, r8)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2180      	movs	r1, #128	@ 0x80
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f383 8810 	msr	PRIMASK, r3
}
 8008a4c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_UART_Transmit_IT+0xd0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800991a:	2302      	movs	r3, #2
  }
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	b008      	add	sp, #32
 8009922:	bd80      	pop	{r7, pc}
 8009924:	0800abe5 	.word	0x0800abe5
 8009928:	0800ab33 	.word	0x0800ab33

0800992c <HAL_UART_IRQHandler>:
=======
 8008a52:	2302      	movs	r3, #2
  }
}
 8008a54:	0018      	movs	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	b008      	add	sp, #32
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08009d1d 	.word	0x08009d1d
 8008a60:	08009c6b 	.word	0x08009c6b

08008a64 <HAL_UART_IRQHandler>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b0ab      	sub	sp, #172	@ 0xac
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	22a4      	movs	r2, #164	@ 0xa4
 800993c:	18b9      	adds	r1, r7, r2
 800993e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	20a0      	movs	r0, #160	@ 0xa0
 8009948:	1839      	adds	r1, r7, r0
 800994a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	219c      	movs	r1, #156	@ 0x9c
 8009954:	1879      	adds	r1, r7, r1
 8009956:	600b      	str	r3, [r1, #0]
=======
 8008a64:	b590      	push	{r4, r7, lr}
 8008a66:	b0ab      	sub	sp, #172	@ 0xac
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	22a4      	movs	r2, #164	@ 0xa4
 8008a74:	18b9      	adds	r1, r7, r2
 8008a76:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	20a0      	movs	r0, #160	@ 0xa0
 8008a80:	1839      	adds	r1, r7, r0
 8008a82:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	219c      	movs	r1, #156	@ 0x9c
 8008a8c:	1879      	adds	r1, r7, r1
 8008a8e:	600b      	str	r3, [r1, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 8009958:	0011      	movs	r1, r2
 800995a:	18bb      	adds	r3, r7, r2
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a9c      	ldr	r2, [pc, #624]	@ (8009bd0 <HAL_UART_IRQHandler+0x2a4>)
 8009960:	4013      	ands	r3, r2
 8009962:	2298      	movs	r2, #152	@ 0x98
 8009964:	18bc      	adds	r4, r7, r2
 8009966:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009968:	18bb      	adds	r3, r7, r2
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d114      	bne.n	800999a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009970:	187b      	adds	r3, r7, r1
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2220      	movs	r2, #32
 8009976:	4013      	ands	r3, r2
 8009978:	d00f      	beq.n	800999a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800997a:	183b      	adds	r3, r7, r0
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2220      	movs	r2, #32
 8009980:	4013      	ands	r3, r2
 8009982:	d00a      	beq.n	800999a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009988:	2b00      	cmp	r3, #0
 800998a:	d100      	bne.n	800998e <HAL_UART_IRQHandler+0x62>
 800998c:	e2a8      	b.n	8009ee0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	0010      	movs	r0, r2
 8009996:	4798      	blx	r3
      }
      return;
 8009998:	e2a2      	b.n	8009ee0 <HAL_UART_IRQHandler+0x5b4>
=======
 8008a90:	0011      	movs	r1, r2
 8008a92:	18bb      	adds	r3, r7, r2
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a9c      	ldr	r2, [pc, #624]	@ (8008d08 <HAL_UART_IRQHandler+0x2a4>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2298      	movs	r2, #152	@ 0x98
 8008a9c:	18bc      	adds	r4, r7, r2
 8008a9e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008aa0:	18bb      	adds	r3, r7, r2
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d114      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aa8:	187b      	adds	r3, r7, r1
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2220      	movs	r2, #32
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d00f      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ab2:	183b      	adds	r3, r7, r0
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d00a      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d100      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x62>
 8008ac4:	e2a8      	b.n	8009018 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	0010      	movs	r0, r2
 8008ace:	4798      	blx	r3
      }
      return;
 8008ad0:	e2a2      	b.n	8009018 <HAL_UART_IRQHandler+0x5b4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 800999a:	2398      	movs	r3, #152	@ 0x98
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d100      	bne.n	80099a6 <HAL_UART_IRQHandler+0x7a>
 80099a4:	e11a      	b.n	8009bdc <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80099a6:	239c      	movs	r3, #156	@ 0x9c
 80099a8:	18fb      	adds	r3, r7, r3
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2201      	movs	r2, #1
 80099ae:	4013      	ands	r3, r2
 80099b0:	d106      	bne.n	80099c0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80099b2:	23a0      	movs	r3, #160	@ 0xa0
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a86      	ldr	r2, [pc, #536]	@ (8009bd4 <HAL_UART_IRQHandler+0x2a8>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	d100      	bne.n	80099c0 <HAL_UART_IRQHandler+0x94>
 80099be:	e10d      	b.n	8009bdc <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099c0:	23a4      	movs	r3, #164	@ 0xa4
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2201      	movs	r2, #1
 80099c8:	4013      	ands	r3, r2
 80099ca:	d012      	beq.n	80099f2 <HAL_UART_IRQHandler+0xc6>
 80099cc:	23a0      	movs	r3, #160	@ 0xa0
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	2380      	movs	r3, #128	@ 0x80
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4013      	ands	r3, r2
 80099d8:	d00b      	beq.n	80099f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2201      	movs	r2, #1
 80099e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2284      	movs	r2, #132	@ 0x84
 80099e6:	589b      	ldr	r3, [r3, r2]
 80099e8:	2201      	movs	r2, #1
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2184      	movs	r1, #132	@ 0x84
 80099f0:	505a      	str	r2, [r3, r1]
=======
 8008ad2:	2398      	movs	r3, #152	@ 0x98
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d100      	bne.n	8008ade <HAL_UART_IRQHandler+0x7a>
 8008adc:	e11a      	b.n	8008d14 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ade:	239c      	movs	r3, #156	@ 0x9c
 8008ae0:	18fb      	adds	r3, r7, r3
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d106      	bne.n	8008af8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008aea:	23a0      	movs	r3, #160	@ 0xa0
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a86      	ldr	r2, [pc, #536]	@ (8008d0c <HAL_UART_IRQHandler+0x2a8>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	d100      	bne.n	8008af8 <HAL_UART_IRQHandler+0x94>
 8008af6:	e10d      	b.n	8008d14 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008af8:	23a4      	movs	r3, #164	@ 0xa4
 8008afa:	18fb      	adds	r3, r7, r3
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2201      	movs	r2, #1
 8008b00:	4013      	ands	r3, r2
 8008b02:	d012      	beq.n	8008b2a <HAL_UART_IRQHandler+0xc6>
 8008b04:	23a0      	movs	r3, #160	@ 0xa0
 8008b06:	18fb      	adds	r3, r7, r3
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	2380      	movs	r3, #128	@ 0x80
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d00b      	beq.n	8008b2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2201      	movs	r2, #1
 8008b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2284      	movs	r2, #132	@ 0x84
 8008b1e:	589b      	ldr	r3, [r3, r2]
 8008b20:	2201      	movs	r2, #1
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2184      	movs	r1, #132	@ 0x84
 8008b28:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80099f2:	23a4      	movs	r3, #164	@ 0xa4
 80099f4:	18fb      	adds	r3, r7, r3
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2202      	movs	r2, #2
 80099fa:	4013      	ands	r3, r2
 80099fc:	d011      	beq.n	8009a22 <HAL_UART_IRQHandler+0xf6>
 80099fe:	239c      	movs	r3, #156	@ 0x9c
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2201      	movs	r2, #1
 8009a06:	4013      	ands	r3, r2
 8009a08:	d00b      	beq.n	8009a22 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2284      	movs	r2, #132	@ 0x84
 8009a16:	589b      	ldr	r3, [r3, r2]
 8009a18:	2204      	movs	r2, #4
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2184      	movs	r1, #132	@ 0x84
 8009a20:	505a      	str	r2, [r3, r1]
=======
 8008b2a:	23a4      	movs	r3, #164	@ 0xa4
 8008b2c:	18fb      	adds	r3, r7, r3
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2202      	movs	r2, #2
 8008b32:	4013      	ands	r3, r2
 8008b34:	d011      	beq.n	8008b5a <HAL_UART_IRQHandler+0xf6>
 8008b36:	239c      	movs	r3, #156	@ 0x9c
 8008b38:	18fb      	adds	r3, r7, r3
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	4013      	ands	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2202      	movs	r2, #2
 8008b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2284      	movs	r2, #132	@ 0x84
 8008b4e:	589b      	ldr	r3, [r3, r2]
 8008b50:	2204      	movs	r2, #4
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2184      	movs	r1, #132	@ 0x84
 8008b58:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8009a22:	23a4      	movs	r3, #164	@ 0xa4
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2204      	movs	r2, #4
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	d011      	beq.n	8009a52 <HAL_UART_IRQHandler+0x126>
 8009a2e:	239c      	movs	r3, #156	@ 0x9c
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2201      	movs	r2, #1
 8009a36:	4013      	ands	r3, r2
 8009a38:	d00b      	beq.n	8009a52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2204      	movs	r2, #4
 8009a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2284      	movs	r2, #132	@ 0x84
 8009a46:	589b      	ldr	r3, [r3, r2]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2184      	movs	r1, #132	@ 0x84
 8009a50:	505a      	str	r2, [r3, r1]
=======
 8008b5a:	23a4      	movs	r3, #164	@ 0xa4
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2204      	movs	r2, #4
 8008b62:	4013      	ands	r3, r2
 8008b64:	d011      	beq.n	8008b8a <HAL_UART_IRQHandler+0x126>
 8008b66:	239c      	movs	r3, #156	@ 0x9c
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d00b      	beq.n	8008b8a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2204      	movs	r2, #4
 8008b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2284      	movs	r2, #132	@ 0x84
 8008b7e:	589b      	ldr	r3, [r3, r2]
 8008b80:	2202      	movs	r2, #2
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2184      	movs	r1, #132	@ 0x84
 8008b88:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8009a52:	23a4      	movs	r3, #164	@ 0xa4
 8009a54:	18fb      	adds	r3, r7, r3
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	d017      	beq.n	8009a8e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a5e:	23a0      	movs	r3, #160	@ 0xa0
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2220      	movs	r2, #32
 8009a66:	4013      	ands	r3, r2
 8009a68:	d105      	bne.n	8009a76 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a6a:	239c      	movs	r3, #156	@ 0x9c
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2201      	movs	r2, #1
 8009a72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a74:	d00b      	beq.n	8009a8e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2208      	movs	r2, #8
 8009a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2284      	movs	r2, #132	@ 0x84
 8009a82:	589b      	ldr	r3, [r3, r2]
 8009a84:	2208      	movs	r2, #8
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2184      	movs	r1, #132	@ 0x84
 8009a8c:	505a      	str	r2, [r3, r1]
=======
 8008b8a:	23a4      	movs	r3, #164	@ 0xa4
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2208      	movs	r2, #8
 8008b92:	4013      	ands	r3, r2
 8008b94:	d017      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b96:	23a0      	movs	r3, #160	@ 0xa0
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	d105      	bne.n	8008bae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ba2:	239c      	movs	r3, #156	@ 0x9c
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bac:	d00b      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2208      	movs	r2, #8
 8008bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2284      	movs	r2, #132	@ 0x84
 8008bba:	589b      	ldr	r3, [r3, r2]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2184      	movs	r1, #132	@ 0x84
 8008bc4:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8009a8e:	23a4      	movs	r3, #164	@ 0xa4
 8009a90:	18fb      	adds	r3, r7, r3
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	2380      	movs	r3, #128	@ 0x80
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	4013      	ands	r3, r2
 8009a9a:	d013      	beq.n	8009ac4 <HAL_UART_IRQHandler+0x198>
 8009a9c:	23a0      	movs	r3, #160	@ 0xa0
 8009a9e:	18fb      	adds	r3, r7, r3
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	2380      	movs	r3, #128	@ 0x80
 8009aa4:	04db      	lsls	r3, r3, #19
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	d00c      	beq.n	8009ac4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2280      	movs	r2, #128	@ 0x80
 8009ab0:	0112      	lsls	r2, r2, #4
 8009ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2284      	movs	r2, #132	@ 0x84
 8009ab8:	589b      	ldr	r3, [r3, r2]
 8009aba:	2220      	movs	r2, #32
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2184      	movs	r1, #132	@ 0x84
 8009ac2:	505a      	str	r2, [r3, r1]
=======
 8008bc6:	23a4      	movs	r3, #164	@ 0xa4
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2380      	movs	r3, #128	@ 0x80
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d013      	beq.n	8008bfc <HAL_UART_IRQHandler+0x198>
 8008bd4:	23a0      	movs	r3, #160	@ 0xa0
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	2380      	movs	r3, #128	@ 0x80
 8008bdc:	04db      	lsls	r3, r3, #19
 8008bde:	4013      	ands	r3, r2
 8008be0:	d00c      	beq.n	8008bfc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2280      	movs	r2, #128	@ 0x80
 8008be8:	0112      	lsls	r2, r2, #4
 8008bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2284      	movs	r2, #132	@ 0x84
 8008bf0:	589b      	ldr	r3, [r3, r2]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2184      	movs	r1, #132	@ 0x84
 8008bfa:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2284      	movs	r2, #132	@ 0x84
 8009ac8:	589b      	ldr	r3, [r3, r2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d100      	bne.n	8009ad0 <HAL_UART_IRQHandler+0x1a4>
 8009ace:	e209      	b.n	8009ee4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ad0:	23a4      	movs	r3, #164	@ 0xa4
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	4013      	ands	r3, r2
 8009ada:	d00e      	beq.n	8009afa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009adc:	23a0      	movs	r3, #160	@ 0xa0
 8009ade:	18fb      	adds	r3, r7, r3
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d008      	beq.n	8009afa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	0010      	movs	r0, r2
 8009af8:	4798      	blx	r3
=======
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2284      	movs	r2, #132	@ 0x84
 8008c00:	589b      	ldr	r3, [r3, r2]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d100      	bne.n	8008c08 <HAL_UART_IRQHandler+0x1a4>
 8008c06:	e209      	b.n	800901c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c08:	23a4      	movs	r3, #164	@ 0xa4
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	4013      	ands	r3, r2
 8008c12:	d00e      	beq.n	8008c32 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c14:	23a0      	movs	r3, #160	@ 0xa0
 8008c16:	18fb      	adds	r3, r7, r3
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	d008      	beq.n	8008c32 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	0010      	movs	r0, r2
 8008c30:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2284      	movs	r2, #132	@ 0x84
 8009afe:	589b      	ldr	r3, [r3, r2]
 8009b00:	2194      	movs	r1, #148	@ 0x94
 8009b02:	187a      	adds	r2, r7, r1
 8009b04:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2240      	movs	r2, #64	@ 0x40
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b40      	cmp	r3, #64	@ 0x40
 8009b12:	d004      	beq.n	8009b1e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b14:	187b      	adds	r3, r7, r1
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2228      	movs	r2, #40	@ 0x28
 8009b1a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b1c:	d04b      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x28a>
=======
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2284      	movs	r2, #132	@ 0x84
 8008c36:	589b      	ldr	r3, [r3, r2]
 8008c38:	2194      	movs	r1, #148	@ 0x94
 8008c3a:	187a      	adds	r2, r7, r1
 8008c3c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2240      	movs	r2, #64	@ 0x40
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b40      	cmp	r3, #64	@ 0x40
 8008c4a:	d004      	beq.n	8008c56 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c4c:	187b      	adds	r3, r7, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2228      	movs	r2, #40	@ 0x28
 8008c52:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c54:	d04b      	beq.n	8008cee <HAL_UART_IRQHandler+0x28a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f000 fe89 	bl	800a838 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2240      	movs	r2, #64	@ 0x40
 8009b2e:	4013      	ands	r3, r2
 8009b30:	2b40      	cmp	r3, #64	@ 0x40
 8009b32:	d139      	bne.n	8009ba8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b34:	f3ef 8310 	mrs	r3, PRIMASK
 8009b38:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8009b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3c:	2090      	movs	r0, #144	@ 0x90
 8009b3e:	183a      	adds	r2, r7, r0
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	2301      	movs	r3, #1
 8009b44:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b48:	f383 8810 	msr	PRIMASK, r3
}
 8009b4c:	46c0      	nop			@ (mov r8, r8)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2140      	movs	r1, #64	@ 0x40
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]
 8009b5e:	183b      	adds	r3, r7, r0
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b66:	f383 8810 	msr	PRIMASK, r3
}
 8009b6a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d012      	beq.n	8009b9a <HAL_UART_IRQHandler+0x26e>
=======
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f000 fe89 	bl	8009970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2240      	movs	r2, #64	@ 0x40
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b40      	cmp	r3, #64	@ 0x40
 8008c6a:	d139      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c70:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c74:	2090      	movs	r0, #144	@ 0x90
 8008c76:	183a      	adds	r2, r7, r0
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c80:	f383 8810 	msr	PRIMASK, r3
}
 8008c84:	46c0      	nop			@ (mov r8, r8)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2140      	movs	r1, #64	@ 0x40
 8008c92:	438a      	bics	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]
 8008c96:	183b      	adds	r3, r7, r0
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ca2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d012      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x26e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b78:	4a17      	ldr	r2, [pc, #92]	@ (8009bd8 <HAL_UART_IRQHandler+0x2ac>)
 8009b7a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b80:	0018      	movs	r0, r3
 8009b82:	f7fb fa25 	bl	8004fd0 <HAL_DMA_Abort_IT>
 8009b86:	1e03      	subs	r3, r0, #0
 8009b88:	d020      	beq.n	8009bcc <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b94:	0018      	movs	r0, r3
 8009b96:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b98:	e018      	b.n	8009bcc <HAL_UART_IRQHandler+0x2a0>
=======
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb0:	4a17      	ldr	r2, [pc, #92]	@ (8008d10 <HAL_UART_IRQHandler+0x2ac>)
 8008cb2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7fb fa25 	bl	8004108 <HAL_DMA_Abort_IT>
 8008cbe:	1e03      	subs	r3, r0, #0
 8008cc0:	d020      	beq.n	8008d04 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ccc:	0018      	movs	r0, r3
 8008cce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd0:	e018      	b.n	8008d04 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
<<<<<<< HEAD
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2298      	movs	r2, #152	@ 0x98
 8009b9e:	589b      	ldr	r3, [r3, r2]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	0010      	movs	r0, r2
 8009ba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba6:	e011      	b.n	8009bcc <HAL_UART_IRQHandler+0x2a0>
=======
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2298      	movs	r2, #152	@ 0x98
 8008cd6:	589b      	ldr	r3, [r3, r2]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	0010      	movs	r0, r2
 8008cdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cde:	e011      	b.n	8008d04 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
<<<<<<< HEAD
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2298      	movs	r2, #152	@ 0x98
 8009bac:	589b      	ldr	r3, [r3, r2]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	0010      	movs	r0, r2
 8009bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	e00a      	b.n	8009bcc <HAL_UART_IRQHandler+0x2a0>
=======
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2298      	movs	r2, #152	@ 0x98
 8008ce4:	589b      	ldr	r3, [r3, r2]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	0010      	movs	r0, r2
 8008cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	e00a      	b.n	8008d04 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
<<<<<<< HEAD
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2298      	movs	r2, #152	@ 0x98
 8009bba:	589b      	ldr	r3, [r3, r2]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	0010      	movs	r0, r2
 8009bc0:	4798      	blx	r3
=======
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2298      	movs	r2, #152	@ 0x98
 8008cf2:	589b      	ldr	r3, [r3, r2]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	0010      	movs	r0, r2
 8008cf8:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2284      	movs	r2, #132	@ 0x84
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009bca:	e18b      	b.n	8009ee4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bcc:	46c0      	nop			@ (mov r8, r8)
    return;
 8009bce:	e189      	b.n	8009ee4 <HAL_UART_IRQHandler+0x5b8>
 8009bd0:	0000080f 	.word	0x0000080f
 8009bd4:	04000120 	.word	0x04000120
 8009bd8:	0800ab01 	.word	0x0800ab01
=======
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2284      	movs	r2, #132	@ 0x84
 8008cfe:	2100      	movs	r1, #0
 8008d00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008d02:	e18b      	b.n	800901c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d04:	46c0      	nop			@ (mov r8, r8)
    return;
 8008d06:	e189      	b.n	800901c <HAL_UART_IRQHandler+0x5b8>
 8008d08:	0000080f 	.word	0x0000080f
 8008d0c:	04000120 	.word	0x04000120
 8008d10:	08009c39 	.word	0x08009c39
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d000      	beq.n	8009be6 <HAL_UART_IRQHandler+0x2ba>
 8009be4:	e13b      	b.n	8009e5e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009be6:	23a4      	movs	r3, #164	@ 0xa4
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2210      	movs	r2, #16
 8009bee:	4013      	ands	r3, r2
 8009bf0:	d100      	bne.n	8009bf4 <HAL_UART_IRQHandler+0x2c8>
 8009bf2:	e134      	b.n	8009e5e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bf4:	23a0      	movs	r3, #160	@ 0xa0
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2210      	movs	r2, #16
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	d100      	bne.n	8009c02 <HAL_UART_IRQHandler+0x2d6>
 8009c00:	e12d      	b.n	8009e5e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2210      	movs	r2, #16
 8009c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	2240      	movs	r2, #64	@ 0x40
 8009c12:	4013      	ands	r3, r2
 8009c14:	2b40      	cmp	r3, #64	@ 0x40
 8009c16:	d000      	beq.n	8009c1a <HAL_UART_IRQHandler+0x2ee>
 8009c18:	e0a0      	b.n	8009d5c <HAL_UART_IRQHandler+0x430>
=======
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d000      	beq.n	8008d1e <HAL_UART_IRQHandler+0x2ba>
 8008d1c:	e13b      	b.n	8008f96 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d1e:	23a4      	movs	r3, #164	@ 0xa4
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2210      	movs	r2, #16
 8008d26:	4013      	ands	r3, r2
 8008d28:	d100      	bne.n	8008d2c <HAL_UART_IRQHandler+0x2c8>
 8008d2a:	e134      	b.n	8008f96 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d2c:	23a0      	movs	r3, #160	@ 0xa0
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2210      	movs	r2, #16
 8008d34:	4013      	ands	r3, r2
 8008d36:	d100      	bne.n	8008d3a <HAL_UART_IRQHandler+0x2d6>
 8008d38:	e12d      	b.n	8008f96 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2240      	movs	r2, #64	@ 0x40
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b40      	cmp	r3, #64	@ 0x40
 8008d4e:	d000      	beq.n	8008d52 <HAL_UART_IRQHandler+0x2ee>
 8008d50:	e0a0      	b.n	8008e94 <HAL_UART_IRQHandler+0x430>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	217e      	movs	r1, #126	@ 0x7e
 8009c24:	187b      	adds	r3, r7, r1
 8009c26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009c28:	187b      	adds	r3, r7, r1
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d100      	bne.n	8009c32 <HAL_UART_IRQHandler+0x306>
 8009c30:	e15a      	b.n	8009ee8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2258      	movs	r2, #88	@ 0x58
 8009c36:	5a9b      	ldrh	r3, [r3, r2]
 8009c38:	187a      	adds	r2, r7, r1
 8009c3a:	8812      	ldrh	r2, [r2, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d300      	bcc.n	8009c42 <HAL_UART_IRQHandler+0x316>
 8009c40:	e152      	b.n	8009ee8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	187a      	adds	r2, r7, r1
 8009c46:	215a      	movs	r1, #90	@ 0x5a
 8009c48:	8812      	ldrh	r2, [r2, #0]
 8009c4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d06f      	beq.n	8009d36 <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c56:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c60:	2301      	movs	r3, #1
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	46c0      	nop			@ (mov r8, r8)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	49a0      	ldr	r1, [pc, #640]	@ (8009ef8 <HAL_UART_IRQHandler+0x5cc>)
 8009c78:	400a      	ands	r2, r1
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	f383 8810 	msr	PRIMASK, r3
}
 8009c86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c88:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c90:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c92:	2301      	movs	r3, #1
 8009c94:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c98:	f383 8810 	msr	PRIMASK, r3
}
 8009c9c:	46c0      	nop			@ (mov r8, r8)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2101      	movs	r1, #1
 8009caa:	438a      	bics	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]
 8009cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb4:	f383 8810 	msr	PRIMASK, r3
}
 8009cb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cba:	f3ef 8310 	mrs	r3, PRIMASK
 8009cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
=======
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	217e      	movs	r1, #126	@ 0x7e
 8008d5c:	187b      	adds	r3, r7, r1
 8008d5e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d100      	bne.n	8008d6a <HAL_UART_IRQHandler+0x306>
 8008d68:	e15a      	b.n	8009020 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2258      	movs	r2, #88	@ 0x58
 8008d6e:	5a9b      	ldrh	r3, [r3, r2]
 8008d70:	187a      	adds	r2, r7, r1
 8008d72:	8812      	ldrh	r2, [r2, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d300      	bcc.n	8008d7a <HAL_UART_IRQHandler+0x316>
 8008d78:	e152      	b.n	8009020 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	187a      	adds	r2, r7, r1
 8008d7e:	215a      	movs	r1, #90	@ 0x5a
 8008d80:	8812      	ldrh	r2, [r2, #0]
 8008d82:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d06f      	beq.n	8008e6e <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d92:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d98:	2301      	movs	r3, #1
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9e:	f383 8810 	msr	PRIMASK, r3
}
 8008da2:	46c0      	nop			@ (mov r8, r8)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	49a0      	ldr	r1, [pc, #640]	@ (8009030 <HAL_UART_IRQHandler+0x5cc>)
 8008db0:	400a      	ands	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	f383 8810 	msr	PRIMASK, r3
}
 8008dbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8008dca:	2301      	movs	r3, #1
 8008dcc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dd0:	f383 8810 	msr	PRIMASK, r3
}
 8008dd4:	46c0      	nop			@ (mov r8, r8)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2101      	movs	r1, #1
 8008de2:	438a      	bics	r2, r1
 8008de4:	609a      	str	r2, [r3, #8]
 8008de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008de8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dec:	f383 8810 	msr	PRIMASK, r3
}
 8008df0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df2:	f3ef 8310 	mrs	r3, PRIMASK
 8008df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8009cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cca:	f383 8810 	msr	PRIMASK, r3
}
 8009cce:	46c0      	nop			@ (mov r8, r8)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689a      	ldr	r2, [r3, #8]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2140      	movs	r1, #64	@ 0x40
 8009cdc:	438a      	bics	r2, r1
 8009cde:	609a      	str	r2, [r3, #8]
 8009ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ce2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ce6:	f383 8810 	msr	PRIMASK, r3
}
 8009cea:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2280      	movs	r2, #128	@ 0x80
 8009cf0:	2120      	movs	r1, #32
 8009cf2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d04:	2301      	movs	r3, #1
 8009d06:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d0a:	f383 8810 	msr	PRIMASK, r3
}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2110      	movs	r1, #16
 8009d1c:	438a      	bics	r2, r1
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d26:	f383 8810 	msr	PRIMASK, r3
}
 8009d2a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7fb f915 	bl	8004f60 <HAL_DMA_Abort>
=======
 8008dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e02:	f383 8810 	msr	PRIMASK, r3
}
 8008e06:	46c0      	nop			@ (mov r8, r8)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2140      	movs	r1, #64	@ 0x40
 8008e14:	438a      	bics	r2, r1
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e1e:	f383 8810 	msr	PRIMASK, r3
}
 8008e22:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2280      	movs	r2, #128	@ 0x80
 8008e28:	2120      	movs	r1, #32
 8008e2a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e32:	f3ef 8310 	mrs	r3, PRIMASK
 8008e36:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e42:	f383 8810 	msr	PRIMASK, r3
}
 8008e46:	46c0      	nop			@ (mov r8, r8)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2110      	movs	r1, #16
 8008e54:	438a      	bics	r2, r1
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e5e:	f383 8810 	msr	PRIMASK, r3
}
 8008e62:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7fb f915 	bl	8004098 <HAL_DMA_Abort>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	22ac      	movs	r2, #172	@ 0xac
 8009d40:	589b      	ldr	r3, [r3, r2]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	2158      	movs	r1, #88	@ 0x58
 8009d46:	5a51      	ldrh	r1, [r2, r1]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	205a      	movs	r0, #90	@ 0x5a
 8009d4c:	5a12      	ldrh	r2, [r2, r0]
 8009d4e:	b292      	uxth	r2, r2
 8009d50:	1a8a      	subs	r2, r1, r2
 8009d52:	b291      	uxth	r1, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	0010      	movs	r0, r2
 8009d58:	4798      	blx	r3
=======
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	22ac      	movs	r2, #172	@ 0xac
 8008e78:	589b      	ldr	r3, [r3, r2]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	2158      	movs	r1, #88	@ 0x58
 8008e7e:	5a51      	ldrh	r1, [r2, r1]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	205a      	movs	r0, #90	@ 0x5a
 8008e84:	5a12      	ldrh	r2, [r2, r0]
 8008e86:	b292      	uxth	r2, r2
 8008e88:	1a8a      	subs	r2, r1, r2
 8008e8a:	b291      	uxth	r1, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	0010      	movs	r0, r2
 8008e90:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< HEAD
 8009d5a:	e0c5      	b.n	8009ee8 <HAL_UART_IRQHandler+0x5bc>
=======
 8008e92:	e0c5      	b.n	8009020 <HAL_UART_IRQHandler+0x5bc>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2258      	movs	r2, #88	@ 0x58
 8009d60:	5a99      	ldrh	r1, [r3, r2]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	225a      	movs	r2, #90	@ 0x5a
 8009d66:	5a9b      	ldrh	r3, [r3, r2]
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	208e      	movs	r0, #142	@ 0x8e
 8009d6c:	183b      	adds	r3, r7, r0
 8009d6e:	1a8a      	subs	r2, r1, r2
 8009d70:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	225a      	movs	r2, #90	@ 0x5a
 8009d76:	5a9b      	ldrh	r3, [r3, r2]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d100      	bne.n	8009d80 <HAL_UART_IRQHandler+0x454>
 8009d7e:	e0b5      	b.n	8009eec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009d80:	183b      	adds	r3, r7, r0
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d100      	bne.n	8009d8a <HAL_UART_IRQHandler+0x45e>
 8009d88:	e0b0      	b.n	8009eec <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d90:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d92:	2488      	movs	r4, #136	@ 0x88
 8009d94:	193a      	adds	r2, r7, r4
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f383 8810 	msr	PRIMASK, r3
}
 8009da2:	46c0      	nop			@ (mov r8, r8)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4953      	ldr	r1, [pc, #332]	@ (8009efc <HAL_UART_IRQHandler+0x5d0>)
 8009db0:	400a      	ands	r2, r1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	193b      	adds	r3, r7, r4
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f383 8810 	msr	PRIMASK, r3
}
 8009dc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8009dc8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	2484      	movs	r4, #132	@ 0x84
 8009dcc:	193a      	adds	r2, r7, r4
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f383 8810 	msr	PRIMASK, r3
}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2101      	movs	r1, #1
 8009de8:	438a      	bics	r2, r1
 8009dea:	609a      	str	r2, [r3, #8]
 8009dec:	193b      	adds	r3, r7, r4
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	f383 8810 	msr	PRIMASK, r3
}
 8009df8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2280      	movs	r2, #128	@ 0x80
 8009dfe:	2120      	movs	r1, #32
 8009e00:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e12:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e16:	2480      	movs	r4, #128	@ 0x80
 8009e18:	193a      	adds	r2, r7, r4
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e22:	f383 8810 	msr	PRIMASK, r3
}
 8009e26:	46c0      	nop			@ (mov r8, r8)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2110      	movs	r1, #16
 8009e34:	438a      	bics	r2, r1
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	193b      	adds	r3, r7, r4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	f383 8810 	msr	PRIMASK, r3
}
 8009e44:	46c0      	nop			@ (mov r8, r8)
=======
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2258      	movs	r2, #88	@ 0x58
 8008e98:	5a99      	ldrh	r1, [r3, r2]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	225a      	movs	r2, #90	@ 0x5a
 8008e9e:	5a9b      	ldrh	r3, [r3, r2]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	208e      	movs	r0, #142	@ 0x8e
 8008ea4:	183b      	adds	r3, r7, r0
 8008ea6:	1a8a      	subs	r2, r1, r2
 8008ea8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	225a      	movs	r2, #90	@ 0x5a
 8008eae:	5a9b      	ldrh	r3, [r3, r2]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d100      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x454>
 8008eb6:	e0b5      	b.n	8009024 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008eb8:	183b      	adds	r3, r7, r0
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d100      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x45e>
 8008ec0:	e0b0      	b.n	8009024 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eca:	2488      	movs	r4, #136	@ 0x88
 8008ecc:	193a      	adds	r2, r7, r4
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f383 8810 	msr	PRIMASK, r3
}
 8008eda:	46c0      	nop			@ (mov r8, r8)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4953      	ldr	r1, [pc, #332]	@ (8009034 <HAL_UART_IRQHandler+0x5d0>)
 8008ee8:	400a      	ands	r2, r1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	193b      	adds	r3, r7, r4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f383 8810 	msr	PRIMASK, r3
}
 8008ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efa:	f3ef 8310 	mrs	r3, PRIMASK
 8008efe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f00:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f02:	2484      	movs	r4, #132	@ 0x84
 8008f04:	193a      	adds	r2, r7, r4
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2101      	movs	r1, #1
 8008f20:	438a      	bics	r2, r1
 8008f22:	609a      	str	r2, [r3, #8]
 8008f24:	193b      	adds	r3, r7, r4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	f383 8810 	msr	PRIMASK, r3
}
 8008f30:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2280      	movs	r2, #128	@ 0x80
 8008f36:	2120      	movs	r1, #32
 8008f38:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f46:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4e:	2480      	movs	r4, #128	@ 0x80
 8008f50:	193a      	adds	r2, r7, r4
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	2301      	movs	r3, #1
 8008f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	f383 8810 	msr	PRIMASK, r3
}
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2110      	movs	r1, #16
 8008f6c:	438a      	bics	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	193b      	adds	r3, r7, r4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	f383 8810 	msr	PRIMASK, r3
}
 8008f7c:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	22ac      	movs	r2, #172	@ 0xac
 8009e50:	589b      	ldr	r3, [r3, r2]
 8009e52:	183a      	adds	r2, r7, r0
 8009e54:	8811      	ldrh	r1, [r2, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	0010      	movs	r0, r2
 8009e5a:	4798      	blx	r3
=======
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	22ac      	movs	r2, #172	@ 0xac
 8008f88:	589b      	ldr	r3, [r3, r2]
 8008f8a:	183a      	adds	r2, r7, r0
 8008f8c:	8811      	ldrh	r1, [r2, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	0010      	movs	r0, r2
 8008f92:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< HEAD
 8009e5c:	e046      	b.n	8009eec <HAL_UART_IRQHandler+0x5c0>
=======
 8008f94:	e046      	b.n	8009024 <HAL_UART_IRQHandler+0x5c0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8009e5e:	23a4      	movs	r3, #164	@ 0xa4
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	2380      	movs	r3, #128	@ 0x80
 8009e66:	035b      	lsls	r3, r3, #13
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d012      	beq.n	8009e92 <HAL_UART_IRQHandler+0x566>
 8009e6c:	239c      	movs	r3, #156	@ 0x9c
 8009e6e:	18fb      	adds	r3, r7, r3
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	2380      	movs	r3, #128	@ 0x80
 8009e74:	03db      	lsls	r3, r3, #15
 8009e76:	4013      	ands	r3, r2
 8009e78:	d00b      	beq.n	8009e92 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2280      	movs	r2, #128	@ 0x80
 8009e80:	0352      	lsls	r2, r2, #13
 8009e82:	621a      	str	r2, [r3, #32]
=======
 8008f96:	23a4      	movs	r3, #164	@ 0xa4
 8008f98:	18fb      	adds	r3, r7, r3
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	2380      	movs	r3, #128	@ 0x80
 8008f9e:	035b      	lsls	r3, r3, #13
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	d012      	beq.n	8008fca <HAL_UART_IRQHandler+0x566>
 8008fa4:	239c      	movs	r3, #156	@ 0x9c
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	2380      	movs	r3, #128	@ 0x80
 8008fac:	03db      	lsls	r3, r3, #15
 8008fae:	4013      	ands	r3, r2
 8008fb0:	d00b      	beq.n	8008fca <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2280      	movs	r2, #128	@ 0x80
 8008fb8:	0352      	lsls	r2, r2, #13
 8008fba:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
<<<<<<< HEAD
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	22a8      	movs	r2, #168	@ 0xa8
 8009e88:	589b      	ldr	r3, [r3, r2]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	0010      	movs	r0, r2
 8009e8e:	4798      	blx	r3
=======
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	22a8      	movs	r2, #168	@ 0xa8
 8008fc0:	589b      	ldr	r3, [r3, r2]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	0010      	movs	r0, r2
 8008fc6:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
<<<<<<< HEAD
 8009e90:	e02f      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
=======
 8008fc8:	e02f      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 8009e92:	23a4      	movs	r3, #164	@ 0xa4
 8009e94:	18fb      	adds	r3, r7, r3
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2280      	movs	r2, #128	@ 0x80
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	d00f      	beq.n	8009ebe <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e9e:	23a0      	movs	r3, #160	@ 0xa0
 8009ea0:	18fb      	adds	r3, r7, r3
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2280      	movs	r2, #128	@ 0x80
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	d009      	beq.n	8009ebe <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01e      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	0010      	movs	r0, r2
 8009eba:	4798      	blx	r3
    }
    return;
 8009ebc:	e018      	b.n	8009ef0 <HAL_UART_IRQHandler+0x5c4>
=======
 8008fca:	23a4      	movs	r3, #164	@ 0xa4
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2280      	movs	r2, #128	@ 0x80
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d00f      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008fd6:	23a0      	movs	r3, #160	@ 0xa0
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2280      	movs	r2, #128	@ 0x80
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01e      	beq.n	8009028 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	0010      	movs	r0, r2
 8008ff2:	4798      	blx	r3
    }
    return;
 8008ff4:	e018      	b.n	8009028 <HAL_UART_IRQHandler+0x5c4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8009ebe:	23a4      	movs	r3, #164	@ 0xa4
 8009ec0:	18fb      	adds	r3, r7, r3
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2240      	movs	r2, #64	@ 0x40
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d013      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
 8009eca:	23a0      	movs	r3, #160	@ 0xa0
 8009ecc:	18fb      	adds	r3, r7, r3
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2240      	movs	r2, #64	@ 0x40
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	d00d      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	0018      	movs	r0, r3
 8009eda:	f000 fee1 	bl	800aca0 <UART_EndTransmit_IT>
    return;
 8009ede:	e008      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ee0:	46c0      	nop			@ (mov r8, r8)
 8009ee2:	e006      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009ee4:	46c0      	nop			@ (mov r8, r8)
 8009ee6:	e004      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ee8:	46c0      	nop			@ (mov r8, r8)
 8009eea:	e002      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009eec:	46c0      	nop			@ (mov r8, r8)
 8009eee:	e000      	b.n	8009ef2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009ef0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b02b      	add	sp, #172	@ 0xac
 8009ef6:	bd90      	pop	{r4, r7, pc}
 8009ef8:	fffffeff 	.word	0xfffffeff
 8009efc:	fffffedf 	.word	0xfffffedf

08009f00 <HAL_UART_TxCpltCallback>:
=======
 8008ff6:	23a4      	movs	r3, #164	@ 0xa4
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2240      	movs	r2, #64	@ 0x40
 8008ffe:	4013      	ands	r3, r2
 8009000:	d013      	beq.n	800902a <HAL_UART_IRQHandler+0x5c6>
 8009002:	23a0      	movs	r3, #160	@ 0xa0
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2240      	movs	r2, #64	@ 0x40
 800900a:	4013      	ands	r3, r2
 800900c:	d00d      	beq.n	800902a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	0018      	movs	r0, r3
 8009012:	f000 fee1 	bl	8009dd8 <UART_EndTransmit_IT>
    return;
 8009016:	e008      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009018:	46c0      	nop			@ (mov r8, r8)
 800901a:	e006      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
    return;
 800901c:	46c0      	nop			@ (mov r8, r8)
 800901e:	e004      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009020:	46c0      	nop			@ (mov r8, r8)
 8009022:	e002      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009024:	46c0      	nop			@ (mov r8, r8)
 8009026:	e000      	b.n	800902a <HAL_UART_IRQHandler+0x5c6>
    return;
 8009028:	46c0      	nop			@ (mov r8, r8)
  }

}
 800902a:	46bd      	mov	sp, r7
 800902c:	b02b      	add	sp, #172	@ 0xac
 800902e:	bd90      	pop	{r4, r7, pc}
 8009030:	fffffeff 	.word	0xfffffeff
 8009034:	fffffedf 	.word	0xfffffedf

08009038 <HAL_UART_TxCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
=======
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f08:	46c0      	nop			@ (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b002      	add	sp, #8
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_UART_TxHalfCpltCallback>:
=======
 8009040:	46c0      	nop			@ (mov r8, r8)
 8009042:	46bd      	mov	sp, r7
 8009044:	b002      	add	sp, #8
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
=======
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f18:	46c0      	nop			@ (mov r8, r8)
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b002      	add	sp, #8
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_UART_RxCpltCallback>:
=======
 8009050:	46c0      	nop			@ (mov r8, r8)
 8009052:	46bd      	mov	sp, r7
 8009054:	b002      	add	sp, #8
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_UART_RxCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
=======
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f28:	46c0      	nop			@ (mov r8, r8)
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	b002      	add	sp, #8
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_UART_RxHalfCpltCallback>:
=======
 8009060:	46c0      	nop			@ (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
=======
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f38:	46c0      	nop			@ (mov r8, r8)
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_UART_ErrorCallback>:
=======
 8009070:	46c0      	nop			@ (mov r8, r8)
 8009072:	46bd      	mov	sp, r7
 8009074:	b002      	add	sp, #8
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_UART_ErrorCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
=======
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f48:	46c0      	nop			@ (mov r8, r8)
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b002      	add	sp, #8
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_UART_AbortCpltCallback>:
=======
 8009080:	46c0      	nop			@ (mov r8, r8)
 8009082:	46bd      	mov	sp, r7
 8009084:	b002      	add	sp, #8
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_UART_AbortCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
=======
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f58:	46c0      	nop			@ (mov r8, r8)
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b002      	add	sp, #8
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_UART_AbortTransmitCpltCallback>:
=======
 8009090:	46c0      	nop			@ (mov r8, r8)
 8009092:	46bd      	mov	sp, r7
 8009094:	b002      	add	sp, #8
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_UART_AbortTransmitCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
=======
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f68:	46c0      	nop			@ (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b002      	add	sp, #8
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_UART_AbortReceiveCpltCallback>:
=======
 80090a0:	46c0      	nop			@ (mov r8, r8)
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b002      	add	sp, #8
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
=======
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009f78:	46c0      	nop			@ (mov r8, r8)
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	b002      	add	sp, #8
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <UART_InitCallbacksToDefault>:
=======
 80090b0:	46c0      	nop			@ (mov r8, r8)
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b002      	add	sp, #8
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <UART_InitCallbacksToDefault>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2188      	movs	r1, #136	@ 0x88
 8009f8c:	4a14      	ldr	r2, [pc, #80]	@ (8009fe0 <UART_InitCallbacksToDefault+0x60>)
 8009f8e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	218c      	movs	r1, #140	@ 0x8c
 8009f94:	4a13      	ldr	r2, [pc, #76]	@ (8009fe4 <UART_InitCallbacksToDefault+0x64>)
 8009f96:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2190      	movs	r1, #144	@ 0x90
 8009f9c:	4a12      	ldr	r2, [pc, #72]	@ (8009fe8 <UART_InitCallbacksToDefault+0x68>)
 8009f9e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2194      	movs	r1, #148	@ 0x94
 8009fa4:	4a11      	ldr	r2, [pc, #68]	@ (8009fec <UART_InitCallbacksToDefault+0x6c>)
 8009fa6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2198      	movs	r1, #152	@ 0x98
 8009fac:	4a10      	ldr	r2, [pc, #64]	@ (8009ff0 <UART_InitCallbacksToDefault+0x70>)
 8009fae:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	219c      	movs	r1, #156	@ 0x9c
 8009fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ff4 <UART_InitCallbacksToDefault+0x74>)
 8009fb6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	21a0      	movs	r1, #160	@ 0xa0
 8009fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8009ff8 <UART_InitCallbacksToDefault+0x78>)
 8009fbe:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	21a4      	movs	r1, #164	@ 0xa4
 8009fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8009ffc <UART_InitCallbacksToDefault+0x7c>)
 8009fc6:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	21a8      	movs	r1, #168	@ 0xa8
 8009fcc:	4a0c      	ldr	r2, [pc, #48]	@ (800a000 <UART_InitCallbacksToDefault+0x80>)
 8009fce:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	21ac      	movs	r1, #172	@ 0xac
 8009fd4:	4a0b      	ldr	r2, [pc, #44]	@ (800a004 <UART_InitCallbacksToDefault+0x84>)
 8009fd6:	505a      	str	r2, [r3, r1]

}
 8009fd8:	46c0      	nop			@ (mov r8, r8)
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b002      	add	sp, #8
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	08009f11 	.word	0x08009f11
 8009fe4:	08009f01 	.word	0x08009f01
 8009fe8:	08009f31 	.word	0x08009f31
 8009fec:	08009f21 	.word	0x08009f21
 8009ff0:	08009f41 	.word	0x08009f41
 8009ff4:	08009f51 	.word	0x08009f51
 8009ff8:	08009f61 	.word	0x08009f61
 8009ffc:	08009f71 	.word	0x08009f71
 800a000:	0800acfb 	.word	0x0800acfb
 800a004:	08003be5 	.word	0x08003be5

0800a008 <UART_SetConfig>:
=======
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2188      	movs	r1, #136	@ 0x88
 80090c4:	4a14      	ldr	r2, [pc, #80]	@ (8009118 <UART_InitCallbacksToDefault+0x60>)
 80090c6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	218c      	movs	r1, #140	@ 0x8c
 80090cc:	4a13      	ldr	r2, [pc, #76]	@ (800911c <UART_InitCallbacksToDefault+0x64>)
 80090ce:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2190      	movs	r1, #144	@ 0x90
 80090d4:	4a12      	ldr	r2, [pc, #72]	@ (8009120 <UART_InitCallbacksToDefault+0x68>)
 80090d6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2194      	movs	r1, #148	@ 0x94
 80090dc:	4a11      	ldr	r2, [pc, #68]	@ (8009124 <UART_InitCallbacksToDefault+0x6c>)
 80090de:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2198      	movs	r1, #152	@ 0x98
 80090e4:	4a10      	ldr	r2, [pc, #64]	@ (8009128 <UART_InitCallbacksToDefault+0x70>)
 80090e6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	219c      	movs	r1, #156	@ 0x9c
 80090ec:	4a0f      	ldr	r2, [pc, #60]	@ (800912c <UART_InitCallbacksToDefault+0x74>)
 80090ee:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	21a0      	movs	r1, #160	@ 0xa0
 80090f4:	4a0e      	ldr	r2, [pc, #56]	@ (8009130 <UART_InitCallbacksToDefault+0x78>)
 80090f6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	21a4      	movs	r1, #164	@ 0xa4
 80090fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009134 <UART_InitCallbacksToDefault+0x7c>)
 80090fe:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	21a8      	movs	r1, #168	@ 0xa8
 8009104:	4a0c      	ldr	r2, [pc, #48]	@ (8009138 <UART_InitCallbacksToDefault+0x80>)
 8009106:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	21ac      	movs	r1, #172	@ 0xac
 800910c:	4a0b      	ldr	r2, [pc, #44]	@ (800913c <UART_InitCallbacksToDefault+0x84>)
 800910e:	505a      	str	r2, [r3, r1]

}
 8009110:	46c0      	nop			@ (mov r8, r8)
 8009112:	46bd      	mov	sp, r7
 8009114:	b002      	add	sp, #8
 8009116:	bd80      	pop	{r7, pc}
 8009118:	08009049 	.word	0x08009049
 800911c:	08009039 	.word	0x08009039
 8009120:	08009069 	.word	0x08009069
 8009124:	08009059 	.word	0x08009059
 8009128:	08009079 	.word	0x08009079
 800912c:	08009089 	.word	0x08009089
 8009130:	08009099 	.word	0x08009099
 8009134:	080090a9 	.word	0x080090a9
 8009138:	08009e33 	.word	0x08009e33
 800913c:	08002b65 	.word	0x08002b65

08009140 <UART_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
=======
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 800a010:	231e      	movs	r3, #30
 800a012:	18fb      	adds	r3, r7, r3
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
=======
 8009148:	231e      	movs	r3, #30
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	431a      	orrs	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4aaf      	ldr	r2, [pc, #700]	@ (800a2f4 <UART_SetConfig+0x2ec>)
 800a038:	4013      	ands	r3, r2
 800a03a:	0019      	movs	r1, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	430a      	orrs	r2, r1
 800a044:	601a      	str	r2, [r3, #0]
=======
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4aaf      	ldr	r2, [pc, #700]	@ (800942c <UART_SetConfig+0x2ec>)
 8009170:	4013      	ands	r3, r2
 8009172:	0019      	movs	r1, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	430a      	orrs	r2, r1
 800917c:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4aaa      	ldr	r2, [pc, #680]	@ (800a2f8 <UART_SetConfig+0x2f0>)
 800a04e:	4013      	ands	r3, r2
 800a050:	0019      	movs	r1, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
=======
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4aaa      	ldr	r2, [pc, #680]	@ (8009430 <UART_SetConfig+0x2f0>)
 8009186:	4013      	ands	r3, r2
 8009188:	0019      	movs	r1, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	4aa1      	ldr	r2, [pc, #644]	@ (800a2fc <UART_SetConfig+0x2f4>)
 800a076:	4013      	ands	r3, r2
 800a078:	0019      	movs	r1, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	430a      	orrs	r2, r1
 800a082:	609a      	str	r2, [r3, #8]
=======
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	4aa1      	ldr	r2, [pc, #644]	@ (8009434 <UART_SetConfig+0x2f4>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	0019      	movs	r1, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	609a      	str	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a9d      	ldr	r2, [pc, #628]	@ (800a300 <UART_SetConfig+0x2f8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d127      	bne.n	800a0de <UART_SetConfig+0xd6>
 800a08e:	4b9d      	ldr	r3, [pc, #628]	@ (800a304 <UART_SetConfig+0x2fc>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a092:	2203      	movs	r2, #3
 800a094:	4013      	ands	r3, r2
 800a096:	2b03      	cmp	r3, #3
 800a098:	d00d      	beq.n	800a0b6 <UART_SetConfig+0xae>
 800a09a:	d81b      	bhi.n	800a0d4 <UART_SetConfig+0xcc>
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d014      	beq.n	800a0ca <UART_SetConfig+0xc2>
 800a0a0:	d818      	bhi.n	800a0d4 <UART_SetConfig+0xcc>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <UART_SetConfig+0xa4>
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d00a      	beq.n	800a0c0 <UART_SetConfig+0xb8>
 800a0aa:	e013      	b.n	800a0d4 <UART_SetConfig+0xcc>
 800a0ac:	231f      	movs	r3, #31
 800a0ae:	18fb      	adds	r3, r7, r3
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	e065      	b.n	800a182 <UART_SetConfig+0x17a>
 800a0b6:	231f      	movs	r3, #31
 800a0b8:	18fb      	adds	r3, r7, r3
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	e060      	b.n	800a182 <UART_SetConfig+0x17a>
 800a0c0:	231f      	movs	r3, #31
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	2204      	movs	r2, #4
 800a0c6:	701a      	strb	r2, [r3, #0]
 800a0c8:	e05b      	b.n	800a182 <UART_SetConfig+0x17a>
 800a0ca:	231f      	movs	r3, #31
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	2208      	movs	r2, #8
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	e056      	b.n	800a182 <UART_SetConfig+0x17a>
 800a0d4:	231f      	movs	r3, #31
 800a0d6:	18fb      	adds	r3, r7, r3
 800a0d8:	2210      	movs	r2, #16
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	e051      	b.n	800a182 <UART_SetConfig+0x17a>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a89      	ldr	r2, [pc, #548]	@ (800a308 <UART_SetConfig+0x300>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d134      	bne.n	800a152 <UART_SetConfig+0x14a>
 800a0e8:	4b86      	ldr	r3, [pc, #536]	@ (800a304 <UART_SetConfig+0x2fc>)
 800a0ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ec:	23c0      	movs	r3, #192	@ 0xc0
 800a0ee:	029b      	lsls	r3, r3, #10
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	22c0      	movs	r2, #192	@ 0xc0
 800a0f4:	0292      	lsls	r2, r2, #10
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d017      	beq.n	800a12a <UART_SetConfig+0x122>
 800a0fa:	22c0      	movs	r2, #192	@ 0xc0
 800a0fc:	0292      	lsls	r2, r2, #10
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d822      	bhi.n	800a148 <UART_SetConfig+0x140>
 800a102:	2280      	movs	r2, #128	@ 0x80
 800a104:	0292      	lsls	r2, r2, #10
 800a106:	4293      	cmp	r3, r2
 800a108:	d019      	beq.n	800a13e <UART_SetConfig+0x136>
 800a10a:	2280      	movs	r2, #128	@ 0x80
 800a10c:	0292      	lsls	r2, r2, #10
 800a10e:	4293      	cmp	r3, r2
 800a110:	d81a      	bhi.n	800a148 <UART_SetConfig+0x140>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <UART_SetConfig+0x118>
 800a116:	2280      	movs	r2, #128	@ 0x80
 800a118:	0252      	lsls	r2, r2, #9
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00a      	beq.n	800a134 <UART_SetConfig+0x12c>
 800a11e:	e013      	b.n	800a148 <UART_SetConfig+0x140>
 800a120:	231f      	movs	r3, #31
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	e02b      	b.n	800a182 <UART_SetConfig+0x17a>
 800a12a:	231f      	movs	r3, #31
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e026      	b.n	800a182 <UART_SetConfig+0x17a>
 800a134:	231f      	movs	r3, #31
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	2204      	movs	r2, #4
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	e021      	b.n	800a182 <UART_SetConfig+0x17a>
 800a13e:	231f      	movs	r3, #31
 800a140:	18fb      	adds	r3, r7, r3
 800a142:	2208      	movs	r2, #8
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e01c      	b.n	800a182 <UART_SetConfig+0x17a>
 800a148:	231f      	movs	r3, #31
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	2210      	movs	r2, #16
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e017      	b.n	800a182 <UART_SetConfig+0x17a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a6d      	ldr	r2, [pc, #436]	@ (800a30c <UART_SetConfig+0x304>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d104      	bne.n	800a166 <UART_SetConfig+0x15e>
 800a15c:	231f      	movs	r3, #31
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	e00d      	b.n	800a182 <UART_SetConfig+0x17a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a69      	ldr	r2, [pc, #420]	@ (800a310 <UART_SetConfig+0x308>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d104      	bne.n	800a17a <UART_SetConfig+0x172>
 800a170:	231f      	movs	r3, #31
 800a172:	18fb      	adds	r3, r7, r3
 800a174:	2200      	movs	r2, #0
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	e003      	b.n	800a182 <UART_SetConfig+0x17a>
 800a17a:	231f      	movs	r3, #31
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	2210      	movs	r2, #16
 800a180:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69da      	ldr	r2, [r3, #28]
 800a186:	2380      	movs	r3, #128	@ 0x80
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d15c      	bne.n	800a248 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800a18e:	231f      	movs	r3, #31
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b08      	cmp	r3, #8
 800a196:	d015      	beq.n	800a1c4 <UART_SetConfig+0x1bc>
 800a198:	dc18      	bgt.n	800a1cc <UART_SetConfig+0x1c4>
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d00d      	beq.n	800a1ba <UART_SetConfig+0x1b2>
 800a19e:	dc15      	bgt.n	800a1cc <UART_SetConfig+0x1c4>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <UART_SetConfig+0x1a2>
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d005      	beq.n	800a1b4 <UART_SetConfig+0x1ac>
 800a1a8:	e010      	b.n	800a1cc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1aa:	f7fd fd39 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 800a1ae:	0003      	movs	r3, r0
 800a1b0:	61bb      	str	r3, [r7, #24]
        break;
 800a1b2:	e012      	b.n	800a1da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b4:	4b57      	ldr	r3, [pc, #348]	@ (800a314 <UART_SetConfig+0x30c>)
 800a1b6:	61bb      	str	r3, [r7, #24]
        break;
 800a1b8:	e00f      	b.n	800a1da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ba:	f7fd fcb5 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 800a1be:	0003      	movs	r3, r0
 800a1c0:	61bb      	str	r3, [r7, #24]
        break;
 800a1c2:	e00a      	b.n	800a1da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c4:	2380      	movs	r3, #128	@ 0x80
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	61bb      	str	r3, [r7, #24]
        break;
 800a1ca:	e006      	b.n	800a1da <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1d0:	231e      	movs	r3, #30
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]
        break;
 800a1d8:	46c0      	nop			@ (mov r8, r8)
=======
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a9d      	ldr	r2, [pc, #628]	@ (8009438 <UART_SetConfig+0x2f8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d127      	bne.n	8009216 <UART_SetConfig+0xd6>
 80091c6:	4b9d      	ldr	r3, [pc, #628]	@ (800943c <UART_SetConfig+0x2fc>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ca:	2203      	movs	r2, #3
 80091cc:	4013      	ands	r3, r2
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d00d      	beq.n	80091ee <UART_SetConfig+0xae>
 80091d2:	d81b      	bhi.n	800920c <UART_SetConfig+0xcc>
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d014      	beq.n	8009202 <UART_SetConfig+0xc2>
 80091d8:	d818      	bhi.n	800920c <UART_SetConfig+0xcc>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <UART_SetConfig+0xa4>
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d00a      	beq.n	80091f8 <UART_SetConfig+0xb8>
 80091e2:	e013      	b.n	800920c <UART_SetConfig+0xcc>
 80091e4:	231f      	movs	r3, #31
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	2200      	movs	r2, #0
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e065      	b.n	80092ba <UART_SetConfig+0x17a>
 80091ee:	231f      	movs	r3, #31
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	2202      	movs	r2, #2
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e060      	b.n	80092ba <UART_SetConfig+0x17a>
 80091f8:	231f      	movs	r3, #31
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	2204      	movs	r2, #4
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e05b      	b.n	80092ba <UART_SetConfig+0x17a>
 8009202:	231f      	movs	r3, #31
 8009204:	18fb      	adds	r3, r7, r3
 8009206:	2208      	movs	r2, #8
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e056      	b.n	80092ba <UART_SetConfig+0x17a>
 800920c:	231f      	movs	r3, #31
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	2210      	movs	r2, #16
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e051      	b.n	80092ba <UART_SetConfig+0x17a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a89      	ldr	r2, [pc, #548]	@ (8009440 <UART_SetConfig+0x300>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d134      	bne.n	800928a <UART_SetConfig+0x14a>
 8009220:	4b86      	ldr	r3, [pc, #536]	@ (800943c <UART_SetConfig+0x2fc>)
 8009222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009224:	23c0      	movs	r3, #192	@ 0xc0
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	4013      	ands	r3, r2
 800922a:	22c0      	movs	r2, #192	@ 0xc0
 800922c:	0292      	lsls	r2, r2, #10
 800922e:	4293      	cmp	r3, r2
 8009230:	d017      	beq.n	8009262 <UART_SetConfig+0x122>
 8009232:	22c0      	movs	r2, #192	@ 0xc0
 8009234:	0292      	lsls	r2, r2, #10
 8009236:	4293      	cmp	r3, r2
 8009238:	d822      	bhi.n	8009280 <UART_SetConfig+0x140>
 800923a:	2280      	movs	r2, #128	@ 0x80
 800923c:	0292      	lsls	r2, r2, #10
 800923e:	4293      	cmp	r3, r2
 8009240:	d019      	beq.n	8009276 <UART_SetConfig+0x136>
 8009242:	2280      	movs	r2, #128	@ 0x80
 8009244:	0292      	lsls	r2, r2, #10
 8009246:	4293      	cmp	r3, r2
 8009248:	d81a      	bhi.n	8009280 <UART_SetConfig+0x140>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <UART_SetConfig+0x118>
 800924e:	2280      	movs	r2, #128	@ 0x80
 8009250:	0252      	lsls	r2, r2, #9
 8009252:	4293      	cmp	r3, r2
 8009254:	d00a      	beq.n	800926c <UART_SetConfig+0x12c>
 8009256:	e013      	b.n	8009280 <UART_SetConfig+0x140>
 8009258:	231f      	movs	r3, #31
 800925a:	18fb      	adds	r3, r7, r3
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
 8009260:	e02b      	b.n	80092ba <UART_SetConfig+0x17a>
 8009262:	231f      	movs	r3, #31
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	2202      	movs	r2, #2
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	e026      	b.n	80092ba <UART_SetConfig+0x17a>
 800926c:	231f      	movs	r3, #31
 800926e:	18fb      	adds	r3, r7, r3
 8009270:	2204      	movs	r2, #4
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e021      	b.n	80092ba <UART_SetConfig+0x17a>
 8009276:	231f      	movs	r3, #31
 8009278:	18fb      	adds	r3, r7, r3
 800927a:	2208      	movs	r2, #8
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	e01c      	b.n	80092ba <UART_SetConfig+0x17a>
 8009280:	231f      	movs	r3, #31
 8009282:	18fb      	adds	r3, r7, r3
 8009284:	2210      	movs	r2, #16
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e017      	b.n	80092ba <UART_SetConfig+0x17a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a6d      	ldr	r2, [pc, #436]	@ (8009444 <UART_SetConfig+0x304>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d104      	bne.n	800929e <UART_SetConfig+0x15e>
 8009294:	231f      	movs	r3, #31
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e00d      	b.n	80092ba <UART_SetConfig+0x17a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a69      	ldr	r2, [pc, #420]	@ (8009448 <UART_SetConfig+0x308>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d104      	bne.n	80092b2 <UART_SetConfig+0x172>
 80092a8:	231f      	movs	r3, #31
 80092aa:	18fb      	adds	r3, r7, r3
 80092ac:	2200      	movs	r2, #0
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e003      	b.n	80092ba <UART_SetConfig+0x17a>
 80092b2:	231f      	movs	r3, #31
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	2210      	movs	r2, #16
 80092b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	2380      	movs	r3, #128	@ 0x80
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d15c      	bne.n	8009380 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80092c6:	231f      	movs	r3, #31
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d015      	beq.n	80092fc <UART_SetConfig+0x1bc>
 80092d0:	dc18      	bgt.n	8009304 <UART_SetConfig+0x1c4>
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d00d      	beq.n	80092f2 <UART_SetConfig+0x1b2>
 80092d6:	dc15      	bgt.n	8009304 <UART_SetConfig+0x1c4>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <UART_SetConfig+0x1a2>
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d005      	beq.n	80092ec <UART_SetConfig+0x1ac>
 80092e0:	e010      	b.n	8009304 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092e2:	f7fd fd39 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 80092e6:	0003      	movs	r3, r0
 80092e8:	61bb      	str	r3, [r7, #24]
        break;
 80092ea:	e012      	b.n	8009312 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092ec:	4b57      	ldr	r3, [pc, #348]	@ (800944c <UART_SetConfig+0x30c>)
 80092ee:	61bb      	str	r3, [r7, #24]
        break;
 80092f0:	e00f      	b.n	8009312 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092f2:	f7fd fcb5 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 80092f6:	0003      	movs	r3, r0
 80092f8:	61bb      	str	r3, [r7, #24]
        break;
 80092fa:	e00a      	b.n	8009312 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fc:	2380      	movs	r3, #128	@ 0x80
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	61bb      	str	r3, [r7, #24]
        break;
 8009302:	e006      	b.n	8009312 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009308:	231e      	movs	r3, #30
 800930a:	18fb      	adds	r3, r7, r3
 800930c:	2201      	movs	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
        break;
 8009310:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d100      	bne.n	800a1e2 <UART_SetConfig+0x1da>
 800a1e0:	e07a      	b.n	800a2d8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	005a      	lsls	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	085b      	lsrs	r3, r3, #1
 800a1ec:	18d2      	adds	r2, r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	0019      	movs	r1, r3
 800a1f4:	0010      	movs	r0, r2
 800a1f6:	f7f5 ffa3 	bl	8000140 <__udivsi3>
 800a1fa:	0003      	movs	r3, r0
 800a1fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d91c      	bls.n	800a23e <UART_SetConfig+0x236>
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	2380      	movs	r3, #128	@ 0x80
 800a208:	025b      	lsls	r3, r3, #9
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d217      	bcs.n	800a23e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	b29a      	uxth	r2, r3
 800a212:	200e      	movs	r0, #14
 800a214:	183b      	adds	r3, r7, r0
 800a216:	210f      	movs	r1, #15
 800a218:	438a      	bics	r2, r1
 800a21a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	085b      	lsrs	r3, r3, #1
 800a220:	b29b      	uxth	r3, r3
 800a222:	2207      	movs	r2, #7
 800a224:	4013      	ands	r3, r2
 800a226:	b299      	uxth	r1, r3
 800a228:	183b      	adds	r3, r7, r0
 800a22a:	183a      	adds	r2, r7, r0
 800a22c:	8812      	ldrh	r2, [r2, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	183a      	adds	r2, r7, r0
 800a238:	8812      	ldrh	r2, [r2, #0]
 800a23a:	60da      	str	r2, [r3, #12]
 800a23c:	e04c      	b.n	800a2d8 <UART_SetConfig+0x2d0>
=======
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d100      	bne.n	800931a <UART_SetConfig+0x1da>
 8009318:	e07a      	b.n	8009410 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	005a      	lsls	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	18d2      	adds	r2, r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	0019      	movs	r1, r3
 800932c:	0010      	movs	r0, r2
 800932e:	f7f6 ff07 	bl	8000140 <__udivsi3>
 8009332:	0003      	movs	r3, r0
 8009334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b0f      	cmp	r3, #15
 800933a:	d91c      	bls.n	8009376 <UART_SetConfig+0x236>
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	2380      	movs	r3, #128	@ 0x80
 8009340:	025b      	lsls	r3, r3, #9
 8009342:	429a      	cmp	r2, r3
 8009344:	d217      	bcs.n	8009376 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	b29a      	uxth	r2, r3
 800934a:	200e      	movs	r0, #14
 800934c:	183b      	adds	r3, r7, r0
 800934e:	210f      	movs	r1, #15
 8009350:	438a      	bics	r2, r1
 8009352:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	2207      	movs	r2, #7
 800935c:	4013      	ands	r3, r2
 800935e:	b299      	uxth	r1, r3
 8009360:	183b      	adds	r3, r7, r0
 8009362:	183a      	adds	r2, r7, r0
 8009364:	8812      	ldrh	r2, [r2, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	183a      	adds	r2, r7, r0
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	60da      	str	r2, [r3, #12]
 8009374:	e04c      	b.n	8009410 <UART_SetConfig+0x2d0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800a23e:	231e      	movs	r3, #30
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	e047      	b.n	800a2d8 <UART_SetConfig+0x2d0>
=======
 8009376:	231e      	movs	r3, #30
 8009378:	18fb      	adds	r3, r7, r3
 800937a:	2201      	movs	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	e047      	b.n	8009410 <UART_SetConfig+0x2d0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800a248:	231f      	movs	r3, #31
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d015      	beq.n	800a27e <UART_SetConfig+0x276>
 800a252:	dc18      	bgt.n	800a286 <UART_SetConfig+0x27e>
 800a254:	2b04      	cmp	r3, #4
 800a256:	d00d      	beq.n	800a274 <UART_SetConfig+0x26c>
 800a258:	dc15      	bgt.n	800a286 <UART_SetConfig+0x27e>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <UART_SetConfig+0x25c>
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d005      	beq.n	800a26e <UART_SetConfig+0x266>
 800a262:	e010      	b.n	800a286 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a264:	f7fd fcdc 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 800a268:	0003      	movs	r3, r0
 800a26a:	61bb      	str	r3, [r7, #24]
        break;
 800a26c:	e012      	b.n	800a294 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a26e:	4b29      	ldr	r3, [pc, #164]	@ (800a314 <UART_SetConfig+0x30c>)
 800a270:	61bb      	str	r3, [r7, #24]
        break;
 800a272:	e00f      	b.n	800a294 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a274:	f7fd fc58 	bl	8007b28 <HAL_RCC_GetSysClockFreq>
 800a278:	0003      	movs	r3, r0
 800a27a:	61bb      	str	r3, [r7, #24]
        break;
 800a27c:	e00a      	b.n	800a294 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a27e:	2380      	movs	r3, #128	@ 0x80
 800a280:	021b      	lsls	r3, r3, #8
 800a282:	61bb      	str	r3, [r7, #24]
        break;
 800a284:	e006      	b.n	800a294 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a28a:	231e      	movs	r3, #30
 800a28c:	18fb      	adds	r3, r7, r3
 800a28e:	2201      	movs	r2, #1
 800a290:	701a      	strb	r2, [r3, #0]
        break;
 800a292:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01e      	beq.n	800a2d8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	085a      	lsrs	r2, r3, #1
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	18d2      	adds	r2, r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	0019      	movs	r1, r3
 800a2aa:	0010      	movs	r0, r2
 800a2ac:	f7f5 ff48 	bl	8000140 <__udivsi3>
 800a2b0:	0003      	movs	r3, r0
 800a2b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b0f      	cmp	r3, #15
 800a2b8:	d90a      	bls.n	800a2d0 <UART_SetConfig+0x2c8>
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	2380      	movs	r3, #128	@ 0x80
 800a2be:	025b      	lsls	r3, r3, #9
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d205      	bcs.n	800a2d0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e003      	b.n	800a2d8 <UART_SetConfig+0x2d0>
=======
 8009380:	231f      	movs	r3, #31
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b08      	cmp	r3, #8
 8009388:	d015      	beq.n	80093b6 <UART_SetConfig+0x276>
 800938a:	dc18      	bgt.n	80093be <UART_SetConfig+0x27e>
 800938c:	2b04      	cmp	r3, #4
 800938e:	d00d      	beq.n	80093ac <UART_SetConfig+0x26c>
 8009390:	dc15      	bgt.n	80093be <UART_SetConfig+0x27e>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <UART_SetConfig+0x25c>
 8009396:	2b02      	cmp	r3, #2
 8009398:	d005      	beq.n	80093a6 <UART_SetConfig+0x266>
 800939a:	e010      	b.n	80093be <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800939c:	f7fd fcdc 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 80093a0:	0003      	movs	r3, r0
 80093a2:	61bb      	str	r3, [r7, #24]
        break;
 80093a4:	e012      	b.n	80093cc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093a6:	4b29      	ldr	r3, [pc, #164]	@ (800944c <UART_SetConfig+0x30c>)
 80093a8:	61bb      	str	r3, [r7, #24]
        break;
 80093aa:	e00f      	b.n	80093cc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ac:	f7fd fc58 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 80093b0:	0003      	movs	r3, r0
 80093b2:	61bb      	str	r3, [r7, #24]
        break;
 80093b4:	e00a      	b.n	80093cc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b6:	2380      	movs	r3, #128	@ 0x80
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	61bb      	str	r3, [r7, #24]
        break;
 80093bc:	e006      	b.n	80093cc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093c2:	231e      	movs	r3, #30
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
        break;
 80093ca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01e      	beq.n	8009410 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	085a      	lsrs	r2, r3, #1
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	18d2      	adds	r2, r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	0019      	movs	r1, r3
 80093e2:	0010      	movs	r0, r2
 80093e4:	f7f6 feac 	bl	8000140 <__udivsi3>
 80093e8:	0003      	movs	r3, r0
 80093ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2b0f      	cmp	r3, #15
 80093f0:	d90a      	bls.n	8009408 <UART_SetConfig+0x2c8>
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	2380      	movs	r3, #128	@ 0x80
 80093f6:	025b      	lsls	r3, r3, #9
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d205      	bcs.n	8009408 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	e003      	b.n	8009410 <UART_SetConfig+0x2d0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800a2d0:	231e      	movs	r3, #30
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
=======
 8009408:	231e      	movs	r3, #30
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	2201      	movs	r2, #1
 800940e:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a2e4:	231e      	movs	r3, #30
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	781b      	ldrb	r3, [r3, #0]
}
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b008      	add	sp, #32
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	efff69f3 	.word	0xefff69f3
 800a2f8:	ffffcfff 	.word	0xffffcfff
 800a2fc:	fffff4ff 	.word	0xfffff4ff
 800a300:	40013800 	.word	0x40013800
 800a304:	40021000 	.word	0x40021000
 800a308:	40004400 	.word	0x40004400
 800a30c:	40004800 	.word	0x40004800
 800a310:	40004c00 	.word	0x40004c00
 800a314:	007a1200 	.word	0x007a1200

0800a318 <UART_AdvFeatureConfig>:
=======
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800941c:	231e      	movs	r3, #30
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	781b      	ldrb	r3, [r3, #0]
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	b008      	add	sp, #32
 8009428:	bd80      	pop	{r7, pc}
 800942a:	46c0      	nop			@ (mov r8, r8)
 800942c:	efff69f3 	.word	0xefff69f3
 8009430:	ffffcfff 	.word	0xffffcfff
 8009434:	fffff4ff 	.word	0xfffff4ff
 8009438:	40013800 	.word	0x40013800
 800943c:	40021000 	.word	0x40021000
 8009440:	40004400 	.word	0x40004400
 8009444:	40004800 	.word	0x40004800
 8009448:	40004c00 	.word	0x40004c00
 800944c:	007a1200 	.word	0x007a1200

08009450 <UART_AdvFeatureConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
=======
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a324:	2208      	movs	r2, #8
 800a326:	4013      	ands	r3, r2
 800a328:	d00b      	beq.n	800a342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	4a4a      	ldr	r2, [pc, #296]	@ (800a45c <UART_AdvFeatureConfig+0x144>)
 800a332:	4013      	ands	r3, r2
 800a334:	0019      	movs	r1, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	605a      	str	r2, [r3, #4]
=======
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	2208      	movs	r2, #8
 800945e:	4013      	ands	r3, r2
 8009460:	d00b      	beq.n	800947a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4a4a      	ldr	r2, [pc, #296]	@ (8009594 <UART_AdvFeatureConfig+0x144>)
 800946a:	4013      	ands	r3, r2
 800946c:	0019      	movs	r1, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a346:	2201      	movs	r2, #1
 800a348:	4013      	ands	r3, r2
 800a34a:	d00b      	beq.n	800a364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	4a43      	ldr	r2, [pc, #268]	@ (800a460 <UART_AdvFeatureConfig+0x148>)
 800a354:	4013      	ands	r3, r2
 800a356:	0019      	movs	r1, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	430a      	orrs	r2, r1
 800a362:	605a      	str	r2, [r3, #4]
=======
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	2201      	movs	r2, #1
 8009480:	4013      	ands	r3, r2
 8009482:	d00b      	beq.n	800949c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4a43      	ldr	r2, [pc, #268]	@ (8009598 <UART_AdvFeatureConfig+0x148>)
 800948c:	4013      	ands	r3, r2
 800948e:	0019      	movs	r1, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a368:	2202      	movs	r2, #2
 800a36a:	4013      	ands	r3, r2
 800a36c:	d00b      	beq.n	800a386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	4a3b      	ldr	r2, [pc, #236]	@ (800a464 <UART_AdvFeatureConfig+0x14c>)
 800a376:	4013      	ands	r3, r2
 800a378:	0019      	movs	r1, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	430a      	orrs	r2, r1
 800a384:	605a      	str	r2, [r3, #4]
=======
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	2202      	movs	r2, #2
 80094a2:	4013      	ands	r3, r2
 80094a4:	d00b      	beq.n	80094be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4a3b      	ldr	r2, [pc, #236]	@ (800959c <UART_AdvFeatureConfig+0x14c>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	0019      	movs	r1, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38a:	2204      	movs	r2, #4
 800a38c:	4013      	ands	r3, r2
 800a38e:	d00b      	beq.n	800a3a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4a34      	ldr	r2, [pc, #208]	@ (800a468 <UART_AdvFeatureConfig+0x150>)
 800a398:	4013      	ands	r3, r2
 800a39a:	0019      	movs	r1, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	605a      	str	r2, [r3, #4]
=======
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c2:	2204      	movs	r2, #4
 80094c4:	4013      	ands	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4a34      	ldr	r2, [pc, #208]	@ (80095a0 <UART_AdvFeatureConfig+0x150>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	d00b      	beq.n	800a3ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a46c <UART_AdvFeatureConfig+0x154>)
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	0019      	movs	r1, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	609a      	str	r2, [r3, #8]
=======
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e4:	2210      	movs	r2, #16
 80094e6:	4013      	ands	r3, r2
 80094e8:	d00b      	beq.n	8009502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	4a2c      	ldr	r2, [pc, #176]	@ (80095a4 <UART_AdvFeatureConfig+0x154>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	0019      	movs	r1, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	609a      	str	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	d00b      	beq.n	800a3ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	4a25      	ldr	r2, [pc, #148]	@ (800a470 <UART_AdvFeatureConfig+0x158>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	0019      	movs	r1, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	609a      	str	r2, [r3, #8]
=======
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	2220      	movs	r2, #32
 8009508:	4013      	ands	r3, r2
 800950a:	d00b      	beq.n	8009524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	4a25      	ldr	r2, [pc, #148]	@ (80095a8 <UART_AdvFeatureConfig+0x158>)
 8009514:	4013      	ands	r3, r2
 8009516:	0019      	movs	r1, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	609a      	str	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f0:	2240      	movs	r2, #64	@ 0x40
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d01d      	beq.n	800a432 <UART_AdvFeatureConfig+0x11a>
=======
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	2240      	movs	r2, #64	@ 0x40
 800952a:	4013      	ands	r3, r2
 800952c:	d01d      	beq.n	800956a <UART_AdvFeatureConfig+0x11a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a474 <UART_AdvFeatureConfig+0x15c>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	0019      	movs	r1, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a412:	2380      	movs	r3, #128	@ 0x80
 800a414:	035b      	lsls	r3, r3, #13
 800a416:	429a      	cmp	r2, r3
 800a418:	d10b      	bne.n	800a432 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4a15      	ldr	r2, [pc, #84]	@ (800a478 <UART_AdvFeatureConfig+0x160>)
 800a422:	4013      	ands	r3, r2
 800a424:	0019      	movs	r1, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
=======
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a1d      	ldr	r2, [pc, #116]	@ (80095ac <UART_AdvFeatureConfig+0x15c>)
 8009536:	4013      	ands	r3, r2
 8009538:	0019      	movs	r1, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800954a:	2380      	movs	r3, #128	@ 0x80
 800954c:	035b      	lsls	r3, r3, #13
 800954e:	429a      	cmp	r2, r3
 8009550:	d10b      	bne.n	800956a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a15      	ldr	r2, [pc, #84]	@ (80095b0 <UART_AdvFeatureConfig+0x160>)
 800955a:	4013      	ands	r3, r2
 800955c:	0019      	movs	r1, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a436:	2280      	movs	r2, #128	@ 0x80
 800a438:	4013      	ands	r3, r2
 800a43a:	d00b      	beq.n	800a454 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	4a0e      	ldr	r2, [pc, #56]	@ (800a47c <UART_AdvFeatureConfig+0x164>)
 800a444:	4013      	ands	r3, r2
 800a446:	0019      	movs	r1, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }
}
 800a454:	46c0      	nop			@ (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	ffff7fff 	.word	0xffff7fff
 800a460:	fffdffff 	.word	0xfffdffff
 800a464:	fffeffff 	.word	0xfffeffff
 800a468:	fffbffff 	.word	0xfffbffff
 800a46c:	ffffefff 	.word	0xffffefff
 800a470:	ffffdfff 	.word	0xffffdfff
 800a474:	ffefffff 	.word	0xffefffff
 800a478:	ff9fffff 	.word	0xff9fffff
 800a47c:	fff7ffff 	.word	0xfff7ffff

0800a480 <UART_CheckIdleState>:
=======
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956e:	2280      	movs	r2, #128	@ 0x80
 8009570:	4013      	ands	r3, r2
 8009572:	d00b      	beq.n	800958c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	4a0e      	ldr	r2, [pc, #56]	@ (80095b4 <UART_AdvFeatureConfig+0x164>)
 800957c:	4013      	ands	r3, r2
 800957e:	0019      	movs	r1, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]
  }
}
 800958c:	46c0      	nop			@ (mov r8, r8)
 800958e:	46bd      	mov	sp, r7
 8009590:	b002      	add	sp, #8
 8009592:	bd80      	pop	{r7, pc}
 8009594:	ffff7fff 	.word	0xffff7fff
 8009598:	fffdffff 	.word	0xfffdffff
 800959c:	fffeffff 	.word	0xfffeffff
 80095a0:	fffbffff 	.word	0xfffbffff
 80095a4:	ffffefff 	.word	0xffffefff
 80095a8:	ffffdfff 	.word	0xffffdfff
 80095ac:	ffefffff 	.word	0xffefffff
 80095b0:	ff9fffff 	.word	0xff9fffff
 80095b4:	fff7ffff 	.word	0xfff7ffff

080095b8 <UART_CheckIdleState>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800a480:	b580      	push	{r7, lr}
 800a482:	b092      	sub	sp, #72	@ 0x48
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
=======
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b092      	sub	sp, #72	@ 0x48
 80095bc:	af02      	add	r7, sp, #8
 80095be:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2284      	movs	r2, #132	@ 0x84
 800a48c:	2100      	movs	r1, #0
 800a48e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a490:	f7f9 ffb0 	bl	80043f4 <HAL_GetTick>
 800a494:	0003      	movs	r3, r0
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2208      	movs	r2, #8
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	2b08      	cmp	r3, #8
 800a4a4:	d12c      	bne.n	800a500 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a8:	2280      	movs	r2, #128	@ 0x80
 800a4aa:	0391      	lsls	r1, r2, #14
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	4a46      	ldr	r2, [pc, #280]	@ (800a5c8 <UART_CheckIdleState+0x148>)
 800a4b0:	9200      	str	r2, [sp, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f000 f88c 	bl	800a5d0 <UART_WaitOnFlagUntilTimeout>
 800a4b8:	1e03      	subs	r3, r0, #0
 800a4ba:	d021      	beq.n	800a500 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a4c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	f383 8810 	msr	PRIMASK, r3
}
 800a4d0:	46c0      	nop			@ (mov r8, r8)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2180      	movs	r1, #128	@ 0x80
 800a4de:	438a      	bics	r2, r1
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	f383 8810 	msr	PRIMASK, r3
}
 800a4ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2278      	movs	r2, #120	@ 0x78
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e05f      	b.n	800a5c0 <UART_CheckIdleState+0x140>
=======
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2284      	movs	r2, #132	@ 0x84
 80095c4:	2100      	movs	r1, #0
 80095c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095c8:	f7fa f92c 	bl	8003824 <HAL_GetTick>
 80095cc:	0003      	movs	r3, r0
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2208      	movs	r2, #8
 80095d8:	4013      	ands	r3, r2
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d12c      	bne.n	8009638 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e0:	2280      	movs	r2, #128	@ 0x80
 80095e2:	0391      	lsls	r1, r2, #14
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	4a46      	ldr	r2, [pc, #280]	@ (8009700 <UART_CheckIdleState+0x148>)
 80095e8:	9200      	str	r2, [sp, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f000 f88c 	bl	8009708 <UART_WaitOnFlagUntilTimeout>
 80095f0:	1e03      	subs	r3, r0, #0
 80095f2:	d021      	beq.n	8009638 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095f4:	f3ef 8310 	mrs	r3, PRIMASK
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80095fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095fe:	2301      	movs	r3, #1
 8009600:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	f383 8810 	msr	PRIMASK, r3
}
 8009608:	46c0      	nop			@ (mov r8, r8)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2180      	movs	r1, #128	@ 0x80
 8009616:	438a      	bics	r2, r1
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	f383 8810 	msr	PRIMASK, r3
}
 8009624:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2278      	movs	r2, #120	@ 0x78
 8009630:	2100      	movs	r1, #0
 8009632:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e05f      	b.n	80096f8 <UART_CheckIdleState+0x140>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2204      	movs	r2, #4
 800a508:	4013      	ands	r3, r2
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d146      	bne.n	800a59c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a510:	2280      	movs	r2, #128	@ 0x80
 800a512:	03d1      	lsls	r1, r2, #15
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	4a2c      	ldr	r2, [pc, #176]	@ (800a5c8 <UART_CheckIdleState+0x148>)
 800a518:	9200      	str	r2, [sp, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f000 f858 	bl	800a5d0 <UART_WaitOnFlagUntilTimeout>
 800a520:	1e03      	subs	r3, r0, #0
 800a522:	d03b      	beq.n	800a59c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a524:	f3ef 8310 	mrs	r3, PRIMASK
 800a528:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52a:	68fb      	ldr	r3, [r7, #12]
=======
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2204      	movs	r2, #4
 8009640:	4013      	ands	r3, r2
 8009642:	2b04      	cmp	r3, #4
 8009644:	d146      	bne.n	80096d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009648:	2280      	movs	r2, #128	@ 0x80
 800964a:	03d1      	lsls	r1, r2, #15
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4a2c      	ldr	r2, [pc, #176]	@ (8009700 <UART_CheckIdleState+0x148>)
 8009650:	9200      	str	r2, [sp, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	f000 f858 	bl	8009708 <UART_WaitOnFlagUntilTimeout>
 8009658:	1e03      	subs	r3, r0, #0
 800965a:	d03b      	beq.n	80096d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800965c:	f3ef 8310 	mrs	r3, PRIMASK
 8009660:	60fb      	str	r3, [r7, #12]
  return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52e:	2301      	movs	r3, #1
 800a530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f383 8810 	msr	PRIMASK, r3
}
 800a538:	46c0      	nop			@ (mov r8, r8)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4921      	ldr	r1, [pc, #132]	@ (800a5cc <UART_CheckIdleState+0x14c>)
 800a546:	400a      	ands	r2, r1
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f383 8810 	msr	PRIMASK, r3
}
 800a554:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a556:	f3ef 8310 	mrs	r3, PRIMASK
 800a55a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a55c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a560:	2301      	movs	r3, #1
 800a562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f383 8810 	msr	PRIMASK, r3
}
 800a56a:	46c0      	nop			@ (mov r8, r8)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2101      	movs	r1, #1
 800a578:	438a      	bics	r2, r1
 800a57a:	609a      	str	r2, [r3, #8]
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	f383 8810 	msr	PRIMASK, r3
}
 800a586:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2280      	movs	r2, #128	@ 0x80
 800a58c:	2120      	movs	r1, #32
 800a58e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2278      	movs	r2, #120	@ 0x78
 800a594:	2100      	movs	r1, #0
 800a596:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e011      	b.n	800a5c0 <UART_CheckIdleState+0x140>
=======
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	2301      	movs	r3, #1
 8009668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f383 8810 	msr	PRIMASK, r3
}
 8009670:	46c0      	nop			@ (mov r8, r8)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4921      	ldr	r1, [pc, #132]	@ (8009704 <UART_CheckIdleState+0x14c>)
 800967e:	400a      	ands	r2, r1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f383 8810 	msr	PRIMASK, r3
}
 800968c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968e:	f3ef 8310 	mrs	r3, PRIMASK
 8009692:	61bb      	str	r3, [r7, #24]
  return(result);
 8009694:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30
 8009698:	2301      	movs	r3, #1
 800969a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	46c0      	nop			@ (mov r8, r8)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2101      	movs	r1, #1
 80096b0:	438a      	bics	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	f383 8810 	msr	PRIMASK, r3
}
 80096be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	2120      	movs	r1, #32
 80096c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2278      	movs	r2, #120	@ 0x78
 80096cc:	2100      	movs	r1, #0
 80096ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e011      	b.n	80096f8 <UART_CheckIdleState+0x140>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2280      	movs	r2, #128	@ 0x80
 800a5a6:	2120      	movs	r1, #32
 800a5a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2278      	movs	r2, #120	@ 0x78
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	b010      	add	sp, #64	@ 0x40
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	01ffffff 	.word	0x01ffffff
 800a5cc:	fffffedf 	.word	0xfffffedf

0800a5d0 <UART_WaitOnFlagUntilTimeout>:
=======
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2220      	movs	r2, #32
 80096d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2280      	movs	r2, #128	@ 0x80
 80096de:	2120      	movs	r1, #32
 80096e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2278      	movs	r2, #120	@ 0x78
 80096f2:	2100      	movs	r1, #0
 80096f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	0018      	movs	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b010      	add	sp, #64	@ 0x40
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	01ffffff 	.word	0x01ffffff
 8009704:	fffffedf 	.word	0xfffffedf

08009708 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	1dfb      	adds	r3, r7, #7
 800a5de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5e0:	e051      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	d04e      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e8:	f7f9 ff04 	bl	80043f4 <HAL_GetTick>
 800a5ec:	0002      	movs	r2, r0
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d302      	bcc.n	800a5fe <UART_WaitOnFlagUntilTimeout+0x2e>
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e051      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2204      	movs	r2, #4
 800a60a:	4013      	ands	r3, r2
 800a60c:	d03b      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b80      	cmp	r3, #128	@ 0x80
 800a612:	d038      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	d035      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	2208      	movs	r2, #8
 800a622:	4013      	ands	r3, r2
 800a624:	2b08      	cmp	r3, #8
 800a626:	d111      	bne.n	800a64c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2208      	movs	r2, #8
 800a62e:	621a      	str	r2, [r3, #32]
=======
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	1dfb      	adds	r3, r7, #7
 8009716:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009718:	e051      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	3301      	adds	r3, #1
 800971e:	d04e      	beq.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009720:	f7fa f880 	bl	8003824 <HAL_GetTick>
 8009724:	0002      	movs	r2, r0
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	429a      	cmp	r2, r3
 800972e:	d302      	bcc.n	8009736 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e051      	b.n	80097de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2204      	movs	r2, #4
 8009742:	4013      	ands	r3, r2
 8009744:	d03b      	beq.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b80      	cmp	r3, #128	@ 0x80
 800974a:	d038      	beq.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b40      	cmp	r3, #64	@ 0x40
 8009750:	d035      	beq.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	2208      	movs	r2, #8
 800975a:	4013      	ands	r3, r2
 800975c:	2b08      	cmp	r3, #8
 800975e:	d111      	bne.n	8009784 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2208      	movs	r2, #8
 8009766:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	0018      	movs	r0, r3
 800a634:	f000 f900 	bl	800a838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2284      	movs	r2, #132	@ 0x84
 800a63c:	2108      	movs	r1, #8
 800a63e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2278      	movs	r2, #120	@ 0x78
 800a644:	2100      	movs	r1, #0
 800a646:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e02c      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	2380      	movs	r3, #128	@ 0x80
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	401a      	ands	r2, r3
 800a658:	2380      	movs	r3, #128	@ 0x80
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d112      	bne.n	800a686 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2280      	movs	r2, #128	@ 0x80
 800a666:	0112      	lsls	r2, r2, #4
 800a668:	621a      	str	r2, [r3, #32]
=======
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0018      	movs	r0, r3
 800976c:	f000 f900 	bl	8009970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2284      	movs	r2, #132	@ 0x84
 8009774:	2108      	movs	r1, #8
 8009776:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2278      	movs	r2, #120	@ 0x78
 800977c:	2100      	movs	r1, #0
 800977e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e02c      	b.n	80097de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69da      	ldr	r2, [r3, #28]
 800978a:	2380      	movs	r3, #128	@ 0x80
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	401a      	ands	r2, r3
 8009790:	2380      	movs	r3, #128	@ 0x80
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	429a      	cmp	r2, r3
 8009796:	d112      	bne.n	80097be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2280      	movs	r2, #128	@ 0x80
 800979e:	0112      	lsls	r2, r2, #4
 80097a0:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f000 f8e3 	bl	800a838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2284      	movs	r2, #132	@ 0x84
 800a676:	2120      	movs	r1, #32
 800a678:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2278      	movs	r2, #120	@ 0x78
 800a67e:	2100      	movs	r1, #0
 800a680:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e00f      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	4013      	ands	r3, r2
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	425a      	negs	r2, r3
 800a696:	4153      	adcs	r3, r2
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	001a      	movs	r2, r3
 800a69c:	1dfb      	adds	r3, r7, #7
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d09e      	beq.n	800a5e2 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	0018      	movs	r0, r3
 80097a6:	f000 f8e3 	bl	8009970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2284      	movs	r2, #132	@ 0x84
 80097ae:	2120      	movs	r1, #32
 80097b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2278      	movs	r2, #120	@ 0x78
 80097b6:	2100      	movs	r1, #0
 80097b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e00f      	b.n	80097de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	4013      	ands	r3, r2
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	425a      	negs	r2, r3
 80097ce:	4153      	adcs	r3, r2
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	001a      	movs	r2, r3
 80097d4:	1dfb      	adds	r3, r7, #7
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d09e      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b004      	add	sp, #16
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <UART_Start_Receive_DMA>:
=======
 80097dc:	2300      	movs	r3, #0
}
 80097de:	0018      	movs	r0, r3
 80097e0:	46bd      	mov	sp, r7
 80097e2:	b004      	add	sp, #16
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <UART_Start_Receive_DMA>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b090      	sub	sp, #64	@ 0x40
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	1dbb      	adds	r3, r7, #6
 800a6bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	1dba      	adds	r2, r7, #6
 800a6c8:	2158      	movs	r1, #88	@ 0x58
 800a6ca:	8812      	ldrh	r2, [r2, #0]
 800a6cc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2284      	movs	r2, #132	@ 0x84
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2280      	movs	r2, #128	@ 0x80
 800a6da:	2122      	movs	r1, #34	@ 0x22
 800a6dc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d028      	beq.n	800a738 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ea:	4a3e      	ldr	r2, [pc, #248]	@ (800a7e4 <UART_Start_Receive_DMA+0x134>)
 800a6ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6f2:	4a3d      	ldr	r2, [pc, #244]	@ (800a7e8 <UART_Start_Receive_DMA+0x138>)
 800a6f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6fa:	4a3c      	ldr	r2, [pc, #240]	@ (800a7ec <UART_Start_Receive_DMA+0x13c>)
 800a6fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a702:	2200      	movs	r2, #0
 800a704:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3324      	adds	r3, #36	@ 0x24
 800a710:	0019      	movs	r1, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a716:	001a      	movs	r2, r3
 800a718:	1dbb      	adds	r3, r7, #6
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	f7fa fbba 	bl	8004e94 <HAL_DMA_Start_IT>
 800a720:	1e03      	subs	r3, r0, #0
 800a722:	d009      	beq.n	800a738 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2284      	movs	r2, #132	@ 0x84
 800a728:	2110      	movs	r1, #16
 800a72a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2280      	movs	r2, #128	@ 0x80
 800a730:	2120      	movs	r1, #32
 800a732:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e050      	b.n	800a7da <UART_Start_Receive_DMA+0x12a>
=======
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b090      	sub	sp, #64	@ 0x40
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	1dbb      	adds	r3, r7, #6
 80097f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1dba      	adds	r2, r7, #6
 8009800:	2158      	movs	r1, #88	@ 0x58
 8009802:	8812      	ldrh	r2, [r2, #0]
 8009804:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2284      	movs	r2, #132	@ 0x84
 800980a:	2100      	movs	r1, #0
 800980c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2280      	movs	r2, #128	@ 0x80
 8009812:	2122      	movs	r1, #34	@ 0x22
 8009814:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800981a:	2b00      	cmp	r3, #0
 800981c:	d028      	beq.n	8009870 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009822:	4a3e      	ldr	r2, [pc, #248]	@ (800991c <UART_Start_Receive_DMA+0x134>)
 8009824:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982a:	4a3d      	ldr	r2, [pc, #244]	@ (8009920 <UART_Start_Receive_DMA+0x138>)
 800982c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009832:	4a3c      	ldr	r2, [pc, #240]	@ (8009924 <UART_Start_Receive_DMA+0x13c>)
 8009834:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800983a:	2200      	movs	r2, #0
 800983c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3324      	adds	r3, #36	@ 0x24
 8009848:	0019      	movs	r1, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984e:	001a      	movs	r2, r3
 8009850:	1dbb      	adds	r3, r7, #6
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	f7fa fbba 	bl	8003fcc <HAL_DMA_Start_IT>
 8009858:	1e03      	subs	r3, r0, #0
 800985a:	d009      	beq.n	8009870 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2284      	movs	r2, #132	@ 0x84
 8009860:	2110      	movs	r1, #16
 8009862:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2280      	movs	r2, #128	@ 0x80
 8009868:	2120      	movs	r1, #32
 800986a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e050      	b.n	8009912 <UART_Start_Receive_DMA+0x12a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d019      	beq.n	800a774 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a740:	f3ef 8310 	mrs	r3, PRIMASK
 800a744:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a74a:	2301      	movs	r3, #1
 800a74c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	f383 8810 	msr	PRIMASK, r3
}
 800a754:	46c0      	nop			@ (mov r8, r8)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2180      	movs	r1, #128	@ 0x80
 800a762:	0049      	lsls	r1, r1, #1
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f383 8810 	msr	PRIMASK, r3
}
 800a772:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a774:	f3ef 8310 	mrs	r3, PRIMASK
 800a778:	613b      	str	r3, [r7, #16]
  return(result);
 800a77a:	693b      	ldr	r3, [r7, #16]
=======
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d019      	beq.n	80098ac <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009878:	f3ef 8310 	mrs	r3, PRIMASK
 800987c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009882:	2301      	movs	r3, #1
 8009884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009888:	f383 8810 	msr	PRIMASK, r3
}
 800988c:	46c0      	nop			@ (mov r8, r8)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2180      	movs	r1, #128	@ 0x80
 800989a:	0049      	lsls	r1, r1, #1
 800989c:	430a      	orrs	r2, r1
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	f383 8810 	msr	PRIMASK, r3
}
 80098aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ac:	f3ef 8310 	mrs	r3, PRIMASK
 80098b0:	613b      	str	r3, [r7, #16]
  return(result);
 80098b2:	693b      	ldr	r3, [r7, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 800a77c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a77e:	2301      	movs	r3, #1
 800a780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f383 8810 	msr	PRIMASK, r3
}
 800a788:	46c0      	nop			@ (mov r8, r8)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2101      	movs	r1, #1
 800a796:	430a      	orrs	r2, r1
 800a798:	609a      	str	r2, [r3, #8]
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f383 8810 	msr	PRIMASK, r3
}
 800a7a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7aa:	61fb      	str	r3, [r7, #28]
  return(result);
 800a7ac:	69fb      	ldr	r3, [r7, #28]
=======
 80098b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f383 8810 	msr	PRIMASK, r3
}
 80098c0:	46c0      	nop			@ (mov r8, r8)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2101      	movs	r1, #1
 80098ce:	430a      	orrs	r2, r1
 80098d0:	609a      	str	r2, [r3, #8]
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	f383 8810 	msr	PRIMASK, r3
}
 80098dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098de:	f3ef 8310 	mrs	r3, PRIMASK
 80098e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80098e4:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689a      	ldr	r2, [r3, #8]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2140      	movs	r1, #64	@ 0x40
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	609a      	str	r2, [r3, #8]
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	f383 8810 	msr	PRIMASK, r3
}
 800a7d6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b010      	add	sp, #64	@ 0x40
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	0800a901 	.word	0x0800a901
 800a7e8:	0800aa31 	.word	0x0800aa31
 800a7ec:	0800aa79 	.word	0x0800aa79

0800a7f0 <UART_EndTxTransfer>:
=======
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e8:	2301      	movs	r3, #1
 80098ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	f383 8810 	msr	PRIMASK, r3
}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2140      	movs	r1, #64	@ 0x40
 8009900:	430a      	orrs	r2, r1
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	f383 8810 	msr	PRIMASK, r3
}
 800990e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	0018      	movs	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	b010      	add	sp, #64	@ 0x40
 8009918:	bd80      	pop	{r7, pc}
 800991a:	46c0      	nop			@ (mov r8, r8)
 800991c:	08009a39 	.word	0x08009a39
 8009920:	08009b69 	.word	0x08009b69
 8009924:	08009bb1 	.word	0x08009bb1

08009928 <UART_EndTxTransfer>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	2301      	movs	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f383 8810 	msr	PRIMASK, r3
}
 800a80c:	46c0      	nop			@ (mov r8, r8)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	21c0      	movs	r1, #192	@ 0xc0
 800a81a:	438a      	bics	r2, r1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f383 8810 	msr	PRIMASK, r3
}
 800a828:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a830:	46c0      	nop			@ (mov r8, r8)
 800a832:	46bd      	mov	sp, r7
 800a834:	b006      	add	sp, #24
 800a836:	bd80      	pop	{r7, pc}

0800a838 <UART_EndRxTransfer>:
=======
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009930:	f3ef 8310 	mrs	r3, PRIMASK
 8009934:	60bb      	str	r3, [r7, #8]
  return(result);
 8009936:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	2301      	movs	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f383 8810 	msr	PRIMASK, r3
}
 8009944:	46c0      	nop			@ (mov r8, r8)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	21c0      	movs	r1, #192	@ 0xc0
 8009952:	438a      	bics	r2, r1
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f383 8810 	msr	PRIMASK, r3
}
 8009960:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009968:	46c0      	nop			@ (mov r8, r8)
 800996a:	46bd      	mov	sp, r7
 800996c:	b006      	add	sp, #24
 800996e:	bd80      	pop	{r7, pc}

08009970 <UART_EndRxTransfer>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08e      	sub	sp, #56	@ 0x38
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a840:	f3ef 8310 	mrs	r3, PRIMASK
 800a844:	617b      	str	r3, [r7, #20]
  return(result);
 800a846:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
 800a84a:	2301      	movs	r3, #1
 800a84c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	f383 8810 	msr	PRIMASK, r3
}
 800a854:	46c0      	nop			@ (mov r8, r8)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4926      	ldr	r1, [pc, #152]	@ (800a8fc <UART_EndRxTransfer+0xc4>)
 800a862:	400a      	ands	r2, r1
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f383 8810 	msr	PRIMASK, r3
}
 800a870:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a872:	f3ef 8310 	mrs	r3, PRIMASK
 800a876:	623b      	str	r3, [r7, #32]
  return(result);
 800a878:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a87c:	2301      	movs	r3, #1
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	f383 8810 	msr	PRIMASK, r3
}
 800a886:	46c0      	nop			@ (mov r8, r8)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2101      	movs	r1, #1
 800a894:	438a      	bics	r2, r1
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89e:	f383 8810 	msr	PRIMASK, r3
}
 800a8a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d118      	bne.n	800a8de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f383 8810 	msr	PRIMASK, r3
}
 800a8c0:	46c0      	nop			@ (mov r8, r8)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2110      	movs	r1, #16
 800a8ce:	438a      	bics	r2, r1
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f383 8810 	msr	PRIMASK, r3
}
 800a8dc:	46c0      	nop			@ (mov r8, r8)
=======
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	@ 0x38
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009978:	f3ef 8310 	mrs	r3, PRIMASK
 800997c:	617b      	str	r3, [r7, #20]
  return(result);
 800997e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
 8009982:	2301      	movs	r3, #1
 8009984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	f383 8810 	msr	PRIMASK, r3
}
 800998c:	46c0      	nop			@ (mov r8, r8)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4926      	ldr	r1, [pc, #152]	@ (8009a34 <UART_EndRxTransfer+0xc4>)
 800999a:	400a      	ands	r2, r1
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	f383 8810 	msr	PRIMASK, r3
}
 80099a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099aa:	f3ef 8310 	mrs	r3, PRIMASK
 80099ae:	623b      	str	r3, [r7, #32]
  return(result);
 80099b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099b4:	2301      	movs	r3, #1
 80099b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	f383 8810 	msr	PRIMASK, r3
}
 80099be:	46c0      	nop			@ (mov r8, r8)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	689a      	ldr	r2, [r3, #8]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2101      	movs	r1, #1
 80099cc:	438a      	bics	r2, r1
 80099ce:	609a      	str	r2, [r3, #8]
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d6:	f383 8810 	msr	PRIMASK, r3
}
 80099da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d118      	bne.n	8009a16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099e4:	f3ef 8310 	mrs	r3, PRIMASK
 80099e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ee:	2301      	movs	r3, #1
 80099f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f383 8810 	msr	PRIMASK, r3
}
 80099f8:	46c0      	nop			@ (mov r8, r8)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2110      	movs	r1, #16
 8009a06:	438a      	bics	r2, r1
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f383 8810 	msr	PRIMASK, r3
}
 8009a14:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2280      	movs	r2, #128	@ 0x80
 800a8e2:	2120      	movs	r1, #32
 800a8e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a8f2:	46c0      	nop			@ (mov r8, r8)
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	b00e      	add	sp, #56	@ 0x38
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	46c0      	nop			@ (mov r8, r8)
 800a8fc:	fffffedf 	.word	0xfffffedf

0800a900 <UART_DMAReceiveCplt>:
=======
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2280      	movs	r2, #128	@ 0x80
 8009a1a:	2120      	movs	r1, #32
 8009a1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b00e      	add	sp, #56	@ 0x38
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	46c0      	nop			@ (mov r8, r8)
 8009a34:	fffffedf 	.word	0xfffffedf

08009a38 <UART_DMAReceiveCplt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800a900:	b580      	push	{r7, lr}
 800a902:	b094      	sub	sp, #80	@ 0x50
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	2b20      	cmp	r3, #32
 800a914:	d06f      	beq.n	800a9f6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800a916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a918:	225a      	movs	r2, #90	@ 0x5a
 800a91a:	2100      	movs	r1, #0
 800a91c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a91e:	f3ef 8310 	mrs	r3, PRIMASK
 800a922:	61bb      	str	r3, [r7, #24]
  return(result);
 800a924:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a926:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a928:	2301      	movs	r3, #1
 800a92a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f383 8810 	msr	PRIMASK, r3
}
 800a932:	46c0      	nop			@ (mov r8, r8)
 800a934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	493b      	ldr	r1, [pc, #236]	@ (800aa2c <UART_DMAReceiveCplt+0x12c>)
 800a940:	400a      	ands	r2, r1
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a946:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	f383 8810 	msr	PRIMASK, r3
}
 800a94e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a950:	f3ef 8310 	mrs	r3, PRIMASK
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a958:	647b      	str	r3, [r7, #68]	@ 0x44
 800a95a:	2301      	movs	r3, #1
 800a95c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a960:	f383 8810 	msr	PRIMASK, r3
}
 800a964:	46c0      	nop			@ (mov r8, r8)
 800a966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2101      	movs	r1, #1
 800a972:	438a      	bics	r2, r1
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	f383 8810 	msr	PRIMASK, r3
}
 800a980:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a982:	f3ef 8310 	mrs	r3, PRIMASK
 800a986:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
=======
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b094      	sub	sp, #80	@ 0x50
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d06f      	beq.n	8009b2e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8009a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a50:	225a      	movs	r2, #90	@ 0x5a
 8009a52:	2100      	movs	r1, #0
 8009a54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a56:	f3ef 8310 	mrs	r3, PRIMASK
 8009a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a5c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a60:	2301      	movs	r3, #1
 8009a62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f383 8810 	msr	PRIMASK, r3
}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	493b      	ldr	r1, [pc, #236]	@ (8009b64 <UART_DMAReceiveCplt+0x12c>)
 8009a78:	400a      	ands	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a88:	f3ef 8310 	mrs	r3, PRIMASK
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a92:	2301      	movs	r3, #1
 8009a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	f383 8810 	msr	PRIMASK, r3
}
 8009a9c:	46c0      	nop			@ (mov r8, r8)
 8009a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	438a      	bics	r2, r1
 8009aac:	609a      	str	r2, [r3, #8]
 8009aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	f383 8810 	msr	PRIMASK, r3
}
 8009ab8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aba:	f3ef 8310 	mrs	r3, PRIMASK
 8009abe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800a98a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a98c:	2301      	movs	r3, #1
 800a98e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a992:	f383 8810 	msr	PRIMASK, r3
}
 800a996:	46c0      	nop			@ (mov r8, r8)
 800a998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2140      	movs	r1, #64	@ 0x40
 800a9a4:	438a      	bics	r2, r1
 800a9a6:	609a      	str	r2, [r3, #8]
 800a9a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ae:	f383 8810 	msr	PRIMASK, r3
}
 800a9b2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b6:	2280      	movs	r2, #128	@ 0x80
 800a9b8:	2120      	movs	r1, #32
 800a9ba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d118      	bne.n	800a9f6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f383 8810 	msr	PRIMASK, r3
}
 800a9d8:	46c0      	nop			@ (mov r8, r8)
 800a9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2110      	movs	r1, #16
 800a9e6:	438a      	bics	r2, r1
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f383 8810 	msr	PRIMASK, r3
}
 800a9f4:	46c0      	nop			@ (mov r8, r8)
=======
 8009ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	f383 8810 	msr	PRIMASK, r3
}
 8009ace:	46c0      	nop			@ (mov r8, r8)
 8009ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2140      	movs	r1, #64	@ 0x40
 8009adc:	438a      	bics	r2, r1
 8009ade:	609a      	str	r2, [r3, #8]
 8009ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f383 8810 	msr	PRIMASK, r3
}
 8009aea:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aee:	2280      	movs	r2, #128	@ 0x80
 8009af0:	2120      	movs	r1, #32
 8009af2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d118      	bne.n	8009b2e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009afc:	f3ef 8310 	mrs	r3, PRIMASK
 8009b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b02:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b06:	2301      	movs	r3, #1
 8009b08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f383 8810 	msr	PRIMASK, r3
}
 8009b10:	46c0      	nop			@ (mov r8, r8)
 8009b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2110      	movs	r1, #16
 8009b1e:	438a      	bics	r2, r1
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f383 8810 	msr	PRIMASK, r3
}
 8009b2c:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< HEAD
 800a9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 8009b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b30:	2200      	movs	r2, #0
 8009b32:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d109      	bne.n	800aa18 <UART_DMAReceiveCplt+0x118>
=======
 8009b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d109      	bne.n	8009b50 <UART_DMAReceiveCplt+0x118>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800aa04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa06:	22ac      	movs	r2, #172	@ 0xac
 800aa08:	589b      	ldr	r3, [r3, r2]
 800aa0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa0c:	2158      	movs	r1, #88	@ 0x58
 800aa0e:	5a51      	ldrh	r1, [r2, r1]
 800aa10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa12:	0010      	movs	r0, r2
 800aa14:	4798      	blx	r3
=======
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b3e:	22ac      	movs	r2, #172	@ 0xac
 8009b40:	589b      	ldr	r3, [r3, r2]
 8009b42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b44:	2158      	movs	r1, #88	@ 0x58
 8009b46:	5a51      	ldrh	r1, [r2, r1]
 8009b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b4a:	0010      	movs	r0, r2
 8009b4c:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 800aa16:	e005      	b.n	800aa24 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 800aa18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa1a:	2294      	movs	r2, #148	@ 0x94
 800aa1c:	589b      	ldr	r3, [r3, r2]
 800aa1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa20:	0010      	movs	r0, r2
 800aa22:	4798      	blx	r3
}
 800aa24:	46c0      	nop			@ (mov r8, r8)
 800aa26:	46bd      	mov	sp, r7
 800aa28:	b014      	add	sp, #80	@ 0x50
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	fffffeff 	.word	0xfffffeff

0800aa30 <UART_DMARxHalfCplt>:
=======
 8009b4e:	e005      	b.n	8009b5c <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 8009b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b52:	2294      	movs	r2, #148	@ 0x94
 8009b54:	589b      	ldr	r3, [r3, r2]
 8009b56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b58:	0010      	movs	r0, r2
 8009b5a:	4798      	blx	r3
}
 8009b5c:	46c0      	nop			@ (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b014      	add	sp, #80	@ 0x50
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	fffffeff 	.word	0xfffffeff

08009b68 <UART_DMARxHalfCplt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3c:	60fb      	str	r3, [r7, #12]
=======
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b74:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
<<<<<<< HEAD
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	665a      	str	r2, [r3, #100]	@ 0x64
=======
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	665a      	str	r2, [r3, #100]	@ 0x64
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d10b      	bne.n	800aa64 <UART_DMARxHalfCplt+0x34>
=======
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d10b      	bne.n	8009b9c <UART_DMARxHalfCplt+0x34>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< HEAD
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22ac      	movs	r2, #172	@ 0xac
 800aa50:	589b      	ldr	r3, [r3, r2]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	2158      	movs	r1, #88	@ 0x58
 800aa56:	5a52      	ldrh	r2, [r2, r1]
 800aa58:	0852      	lsrs	r2, r2, #1
 800aa5a:	b291      	uxth	r1, r2
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	0010      	movs	r0, r2
 800aa60:	4798      	blx	r3
=======
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	22ac      	movs	r2, #172	@ 0xac
 8009b88:	589b      	ldr	r3, [r3, r2]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	2158      	movs	r1, #88	@ 0x58
 8009b8e:	5a52      	ldrh	r2, [r2, r1]
 8009b90:	0852      	lsrs	r2, r2, #1
 8009b92:	b291      	uxth	r1, r2
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	0010      	movs	r0, r2
 8009b98:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 800aa62:	e005      	b.n	800aa70 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2290      	movs	r2, #144	@ 0x90
 800aa68:	589b      	ldr	r3, [r3, r2]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	0010      	movs	r0, r2
 800aa6e:	4798      	blx	r3
}
 800aa70:	46c0      	nop			@ (mov r8, r8)
 800aa72:	46bd      	mov	sp, r7
 800aa74:	b004      	add	sp, #16
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <UART_DMAError>:
=======
 8009b9a:	e005      	b.n	8009ba8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2290      	movs	r2, #144	@ 0x90
 8009ba0:	589b      	ldr	r3, [r3, r2]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	0010      	movs	r0, r2
 8009ba6:	4798      	blx	r3
}
 8009ba8:	46c0      	nop			@ (mov r8, r8)
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b004      	add	sp, #16
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <UART_DMAError>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2280      	movs	r2, #128	@ 0x80
 800aa90:	589b      	ldr	r3, [r3, r2]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	2280      	movs	r2, #128	@ 0x80
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	2b80      	cmp	r3, #128	@ 0x80
 800aaa0:	d10a      	bne.n	800aab8 <UART_DMAError+0x40>
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b21      	cmp	r3, #33	@ 0x21
 800aaa6:	d107      	bne.n	800aab8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2252      	movs	r2, #82	@ 0x52
 800aaac:	2100      	movs	r1, #0
 800aaae:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	0018      	movs	r0, r3
 800aab4:	f7ff fe9c 	bl	800a7f0 <UART_EndTxTransfer>
=======
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bbc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bc2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2280      	movs	r2, #128	@ 0x80
 8009bc8:	589b      	ldr	r3, [r3, r2]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	2280      	movs	r2, #128	@ 0x80
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	2b80      	cmp	r3, #128	@ 0x80
 8009bd8:	d10a      	bne.n	8009bf0 <UART_DMAError+0x40>
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b21      	cmp	r3, #33	@ 0x21
 8009bde:	d107      	bne.n	8009bf0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2252      	movs	r2, #82	@ 0x52
 8009be4:	2100      	movs	r1, #0
 8009be6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	0018      	movs	r0, r3
 8009bec:	f7ff fe9c 	bl	8009928 <UART_EndTxTransfer>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2240      	movs	r2, #64	@ 0x40
 800aac0:	4013      	ands	r3, r2
 800aac2:	2b40      	cmp	r3, #64	@ 0x40
 800aac4:	d10a      	bne.n	800aadc <UART_DMAError+0x64>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b22      	cmp	r3, #34	@ 0x22
 800aaca:	d107      	bne.n	800aadc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	225a      	movs	r2, #90	@ 0x5a
 800aad0:	2100      	movs	r1, #0
 800aad2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	0018      	movs	r0, r3
 800aad8:	f7ff feae 	bl	800a838 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	2284      	movs	r2, #132	@ 0x84
 800aae0:	589b      	ldr	r3, [r3, r2]
 800aae2:	2210      	movs	r2, #16
 800aae4:	431a      	orrs	r2, r3
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2184      	movs	r1, #132	@ 0x84
 800aaea:	505a      	str	r2, [r3, r1]
=======
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2240      	movs	r2, #64	@ 0x40
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d10a      	bne.n	8009c14 <UART_DMAError+0x64>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b22      	cmp	r3, #34	@ 0x22
 8009c02:	d107      	bne.n	8009c14 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	225a      	movs	r2, #90	@ 0x5a
 8009c08:	2100      	movs	r1, #0
 8009c0a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f7ff feae 	bl	8009970 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	2284      	movs	r2, #132	@ 0x84
 8009c18:	589b      	ldr	r3, [r3, r2]
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2184      	movs	r1, #132	@ 0x84
 8009c22:	505a      	str	r2, [r3, r1]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
<<<<<<< HEAD
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2298      	movs	r2, #152	@ 0x98
 800aaf0:	589b      	ldr	r3, [r3, r2]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	0010      	movs	r0, r2
 800aaf6:	4798      	blx	r3
=======
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2298      	movs	r2, #152	@ 0x98
 8009c28:	589b      	ldr	r3, [r3, r2]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	0010      	movs	r0, r2
 8009c2e:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 800aaf8:	46c0      	nop			@ (mov r8, r8)
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b006      	add	sp, #24
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <UART_DMAAbortOnError>:
=======
 8009c30:	46c0      	nop			@ (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b006      	add	sp, #24
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_DMAAbortOnError>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	225a      	movs	r2, #90	@ 0x5a
 800ab12:	2100      	movs	r1, #0
 800ab14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2252      	movs	r2, #82	@ 0x52
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	5299      	strh	r1, [r3, r2]
=======
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	225a      	movs	r2, #90	@ 0x5a
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2252      	movs	r2, #82	@ 0x52
 8009c52:	2100      	movs	r1, #0
 8009c54:	5299      	strh	r1, [r3, r2]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
<<<<<<< HEAD
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2298      	movs	r2, #152	@ 0x98
 800ab22:	589b      	ldr	r3, [r3, r2]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	0010      	movs	r0, r2
 800ab28:	4798      	blx	r3
=======
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2298      	movs	r2, #152	@ 0x98
 8009c5a:	589b      	ldr	r3, [r3, r2]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	0010      	movs	r0, r2
 8009c60:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 800ab2a:	46c0      	nop			@ (mov r8, r8)
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	b004      	add	sp, #16
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <UART_TxISR_8BIT>:
=======
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	46bd      	mov	sp, r7
 8009c66:	b004      	add	sp, #16
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <UART_TxISR_8BIT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b08a      	sub	sp, #40	@ 0x28
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab3e:	2b21      	cmp	r3, #33	@ 0x21
 800ab40:	d14c      	bne.n	800abdc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2252      	movs	r2, #82	@ 0x52
 800ab46:	5a9b      	ldrh	r3, [r3, r2]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d132      	bne.n	800abb4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab54:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ab56:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab58:	2301      	movs	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f383 8810 	msr	PRIMASK, r3
}
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2180      	movs	r1, #128	@ 0x80
 800ab70:	438a      	bics	r2, r1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f383 8810 	msr	PRIMASK, r3
}
 800ab7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab80:	f3ef 8310 	mrs	r3, PRIMASK
 800ab84:	617b      	str	r3, [r7, #20]
  return(result);
 800ab86:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab88:	623b      	str	r3, [r7, #32]
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	f383 8810 	msr	PRIMASK, r3
}
 800ab94:	46c0      	nop			@ (mov r8, r8)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2140      	movs	r1, #64	@ 0x40
 800aba2:	430a      	orrs	r2, r1
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f383 8810 	msr	PRIMASK, r3
}
 800abb0:	46c0      	nop			@ (mov r8, r8)
=======
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b08a      	sub	sp, #40	@ 0x28
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c76:	2b21      	cmp	r3, #33	@ 0x21
 8009c78:	d14c      	bne.n	8009d14 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2252      	movs	r2, #82	@ 0x52
 8009c7e:	5a9b      	ldrh	r3, [r3, r2]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d132      	bne.n	8009cec <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c86:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c90:	2301      	movs	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f383 8810 	msr	PRIMASK, r3
}
 8009c9a:	46c0      	nop			@ (mov r8, r8)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2180      	movs	r1, #128	@ 0x80
 8009ca8:	438a      	bics	r2, r1
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f383 8810 	msr	PRIMASK, r3
}
 8009cb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8009cbe:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cc0:	623b      	str	r3, [r7, #32]
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f383 8810 	msr	PRIMASK, r3
}
 8009ccc:	46c0      	nop			@ (mov r8, r8)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2140      	movs	r1, #64	@ 0x40
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	f383 8810 	msr	PRIMASK, r3
}
 8009ce8:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 800abb2:	e013      	b.n	800abdc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abb8:	781a      	ldrb	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2252      	movs	r2, #82	@ 0x52
 800abce:	5a9b      	ldrh	r3, [r3, r2]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	3b01      	subs	r3, #1
 800abd4:	b299      	uxth	r1, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2252      	movs	r2, #82	@ 0x52
 800abda:	5299      	strh	r1, [r3, r2]
}
 800abdc:	46c0      	nop			@ (mov r8, r8)
 800abde:	46bd      	mov	sp, r7
 800abe0:	b00a      	add	sp, #40	@ 0x28
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <UART_TxISR_16BIT>:
=======
 8009cea:	e013      	b.n	8009d14 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2252      	movs	r2, #82	@ 0x52
 8009d06:	5a9b      	ldrh	r3, [r3, r2]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b299      	uxth	r1, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2252      	movs	r2, #82	@ 0x52
 8009d12:	5299      	strh	r1, [r3, r2]
}
 8009d14:	46c0      	nop			@ (mov r8, r8)
 8009d16:	46bd      	mov	sp, r7
 8009d18:	b00a      	add	sp, #40	@ 0x28
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <UART_TxISR_16BIT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	@ 0x30
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
=======
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08c      	sub	sp, #48	@ 0x30
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abf0:	2b21      	cmp	r3, #33	@ 0x21
 800abf2:	d151      	bne.n	800ac98 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2252      	movs	r2, #82	@ 0x52
 800abf8:	5a9b      	ldrh	r3, [r3, r2]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d132      	bne.n	800ac66 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac00:	f3ef 8310 	mrs	r3, PRIMASK
 800ac04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f383 8810 	msr	PRIMASK, r3
}
 800ac14:	46c0      	nop			@ (mov r8, r8)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2180      	movs	r1, #128	@ 0x80
 800ac22:	438a      	bics	r2, r1
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f383 8810 	msr	PRIMASK, r3
}
 800ac30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac32:	f3ef 8310 	mrs	r3, PRIMASK
 800ac36:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac38:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f383 8810 	msr	PRIMASK, r3
}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2140      	movs	r1, #64	@ 0x40
 800ac54:	430a      	orrs	r2, r1
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	f383 8810 	msr	PRIMASK, r3
}
 800ac62:	46c0      	nop			@ (mov r8, r8)
=======
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d28:	2b21      	cmp	r3, #33	@ 0x21
 8009d2a:	d151      	bne.n	8009dd0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2252      	movs	r2, #82	@ 0x52
 8009d30:	5a9b      	ldrh	r3, [r3, r2]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d132      	bne.n	8009d9e <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d38:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d42:	2301      	movs	r3, #1
 8009d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f383 8810 	msr	PRIMASK, r3
}
 8009d4c:	46c0      	nop			@ (mov r8, r8)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2180      	movs	r1, #128	@ 0x80
 8009d5a:	438a      	bics	r2, r1
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f383 8810 	msr	PRIMASK, r3
}
 8009d68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d70:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d74:	2301      	movs	r3, #1
 8009d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f383 8810 	msr	PRIMASK, r3
}
 8009d7e:	46c0      	nop			@ (mov r8, r8)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2140      	movs	r1, #64	@ 0x40
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	f383 8810 	msr	PRIMASK, r3
}
 8009d9a:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 800ac64:	e018      	b.n	800ac98 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ac6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6e:	881a      	ldrh	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	05d2      	lsls	r2, r2, #23
 800ac76:	0dd2      	lsrs	r2, r2, #23
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac80:	1c9a      	adds	r2, r3, #2
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2252      	movs	r2, #82	@ 0x52
 800ac8a:	5a9b      	ldrh	r3, [r3, r2]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b299      	uxth	r1, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2252      	movs	r2, #82	@ 0x52
 800ac96:	5299      	strh	r1, [r3, r2]
}
 800ac98:	46c0      	nop			@ (mov r8, r8)
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b00c      	add	sp, #48	@ 0x30
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <UART_EndTransmit_IT>:
=======
 8009d9c:	e018      	b.n	8009dd0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	881a      	ldrh	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	05d2      	lsls	r2, r2, #23
 8009dae:	0dd2      	lsrs	r2, r2, #23
 8009db0:	b292      	uxth	r2, r2
 8009db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2252      	movs	r2, #82	@ 0x52
 8009dc2:	5a9b      	ldrh	r3, [r3, r2]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	b299      	uxth	r1, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2252      	movs	r2, #82	@ 0x52
 8009dce:	5299      	strh	r1, [r3, r2]
}
 8009dd0:	46c0      	nop			@ (mov r8, r8)
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	b00c      	add	sp, #48	@ 0x30
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <UART_EndTransmit_IT>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aca8:	f3ef 8310 	mrs	r3, PRIMASK
 800acac:	60bb      	str	r3, [r7, #8]
  return(result);
 800acae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	2301      	movs	r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f383 8810 	msr	PRIMASK, r3
}
 800acbc:	46c0      	nop			@ (mov r8, r8)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2140      	movs	r1, #64	@ 0x40
 800acca:	438a      	bics	r2, r1
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f383 8810 	msr	PRIMASK, r3
}
 800acd8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	66da      	str	r2, [r3, #108]	@ 0x6c
=======
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de0:	f3ef 8310 	mrs	r3, PRIMASK
 8009de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009de6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	2301      	movs	r3, #1
 8009dec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f383 8810 	msr	PRIMASK, r3
}
 8009df4:	46c0      	nop			@ (mov r8, r8)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2140      	movs	r1, #64	@ 0x40
 8009e02:	438a      	bics	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f383 8810 	msr	PRIMASK, r3
}
 8009e10:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	66da      	str	r2, [r3, #108]	@ 0x6c
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
<<<<<<< HEAD
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	228c      	movs	r2, #140	@ 0x8c
 800acea:	589b      	ldr	r3, [r3, r2]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	0010      	movs	r0, r2
 800acf0:	4798      	blx	r3
=======
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	228c      	movs	r2, #140	@ 0x8c
 8009e22:	589b      	ldr	r3, [r3, r2]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	0010      	movs	r0, r2
 8009e28:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 800acf2:	46c0      	nop			@ (mov r8, r8)
 800acf4:	46bd      	mov	sp, r7
 800acf6:	b006      	add	sp, #24
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_UARTEx_WakeupCallback>:
=======
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b006      	add	sp, #24
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_UARTEx_WakeupCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
=======
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800ad02:	46c0      	nop			@ (mov r8, r8)
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b002      	add	sp, #8
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_UARTEx_ReceiveToIdle_DMA>:
=======
 8009e3a:	46c0      	nop			@ (mov r8, r8)
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	b002      	add	sp, #8
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <HAL_UARTEx_ReceiveToIdle_DMA>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800ad0a:	b5b0      	push	{r4, r5, r7, lr}
 800ad0c:	b08a      	sub	sp, #40	@ 0x28
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	1dbb      	adds	r3, r7, #6
 800ad16:	801a      	strh	r2, [r3, #0]
=======
 8009e42:	b5b0      	push	{r4, r5, r7, lr}
 8009e44:	b08a      	sub	sp, #40	@ 0x28
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	1dbb      	adds	r3, r7, #6
 8009e4e:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2280      	movs	r2, #128	@ 0x80
 800ad1c:	589b      	ldr	r3, [r3, r2]
 800ad1e:	2b20      	cmp	r3, #32
 800ad20:	d156      	bne.n	800add0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ad28:	1dbb      	adds	r3, r7, #6
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e04e      	b.n	800add2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
=======
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2280      	movs	r2, #128	@ 0x80
 8009e54:	589b      	ldr	r3, [r3, r2]
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d156      	bne.n	8009f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009e60:	1dbb      	adds	r3, r7, #6
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e04e      	b.n	8009f0a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	2380      	movs	r3, #128	@ 0x80
 800ad3a:	015b      	lsls	r3, r3, #5
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d109      	bne.n	800ad54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d001      	beq.n	800ad54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e03e      	b.n	800add2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
=======
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	2380      	movs	r3, #128	@ 0x80
 8009e72:	015b      	lsls	r3, r3, #5
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d109      	bne.n	8009e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d105      	bne.n	8009e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2201      	movs	r2, #1
 8009e84:	4013      	ands	r3, r2
 8009e86:	d001      	beq.n	8009e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e03e      	b.n	8009f0a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
<<<<<<< HEAD
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2201      	movs	r2, #1
 800ad58:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ad60:	2527      	movs	r5, #39	@ 0x27
 800ad62:	197c      	adds	r4, r7, r5
 800ad64:	1dbb      	adds	r3, r7, #6
 800ad66:	881a      	ldrh	r2, [r3, #0]
 800ad68:	68b9      	ldr	r1, [r7, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	f7ff fc9f 	bl	800a6b0 <UART_Start_Receive_DMA>
 800ad72:	0003      	movs	r3, r0
 800ad74:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ad76:	197b      	adds	r3, r7, r5
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d124      	bne.n	800adc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d11c      	bne.n	800adc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2210      	movs	r2, #16
 800ad8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad92:	617b      	str	r3, [r7, #20]
  return(result);
 800ad94:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad96:	623b      	str	r3, [r7, #32]
 800ad98:	2301      	movs	r3, #1
 800ad9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	f383 8810 	msr	PRIMASK, r3
}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2110      	movs	r1, #16
 800adb0:	430a      	orrs	r2, r1
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	f383 8810 	msr	PRIMASK, r3
}
 800adbe:	e003      	b.n	800adc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
=======
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009e98:	2527      	movs	r5, #39	@ 0x27
 8009e9a:	197c      	adds	r4, r7, r5
 8009e9c:	1dbb      	adds	r3, r7, #6
 8009e9e:	881a      	ldrh	r2, [r3, #0]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f7ff fc9f 	bl	80097e8 <UART_Start_Receive_DMA>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009eae:	197b      	adds	r3, r7, r5
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d124      	bne.n	8009f00 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d11c      	bne.n	8009ef8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2210      	movs	r2, #16
 8009ec4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eca:	617b      	str	r3, [r7, #20]
  return(result);
 8009ecc:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ece:	623b      	str	r3, [r7, #32]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f383 8810 	msr	PRIMASK, r3
}
 8009eda:	46c0      	nop			@ (mov r8, r8)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2110      	movs	r1, #16
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f383 8810 	msr	PRIMASK, r3
}
 8009ef6:	e003      	b.n	8009f00 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
<<<<<<< HEAD
 800adc0:	2327      	movs	r3, #39	@ 0x27
 800adc2:	18fb      	adds	r3, r7, r3
 800adc4:	2201      	movs	r2, #1
 800adc6:	701a      	strb	r2, [r3, #0]
=======
 8009ef8:	2327      	movs	r3, #39	@ 0x27
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	2201      	movs	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }

    return status;
<<<<<<< HEAD
 800adc8:	2327      	movs	r3, #39	@ 0x27
 800adca:	18fb      	adds	r3, r7, r3
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	e000      	b.n	800add2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
=======
 8009f00:	2327      	movs	r3, #39	@ 0x27
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	e000      	b.n	8009f0a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800add0:	2302      	movs	r3, #2
  }
}
 800add2:	0018      	movs	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	b00a      	add	sp, #40	@ 0x28
 800add8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800addc <USB_EnableGlobalInt>:
=======
 8009f08:	2302      	movs	r3, #2
  }
}
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	b00a      	add	sp, #40	@ 0x28
 8009f10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f14 <USB_EnableGlobalInt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
=======
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< HEAD
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2244      	movs	r2, #68	@ 0x44
 800ade8:	2100      	movs	r1, #0
 800adea:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800adec:	4b05      	ldr	r3, [pc, #20]	@ (800ae04 <USB_EnableGlobalInt+0x28>)
 800adee:	60fb      	str	r3, [r7, #12]
=======
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2244      	movs	r2, #68	@ 0x44
 8009f20:	2100      	movs	r1, #0
 8009f22:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009f24:	4b05      	ldr	r3, [pc, #20]	@ (8009f3c <USB_EnableGlobalInt+0x28>)
 8009f26:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< HEAD
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	b299      	uxth	r1, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2240      	movs	r2, #64	@ 0x40
 800adf8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b004      	add	sp, #16
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	0000bf80 	.word	0x0000bf80

0800ae08 <USB_DisableGlobalInt>:
=======
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	b299      	uxth	r1, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2240      	movs	r2, #64	@ 0x40
 8009f30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	0018      	movs	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b004      	add	sp, #16
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	0000bf80 	.word	0x0000bf80

08009f40 <USB_DisableGlobalInt>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
=======
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 800ae10:	4b09      	ldr	r3, [pc, #36]	@ (800ae38 <USB_DisableGlobalInt+0x30>)
 800ae12:	60fb      	str	r3, [r7, #12]
=======
 8009f48:	4b09      	ldr	r3, [pc, #36]	@ (8009f70 <USB_DisableGlobalInt+0x30>)
 8009f4a:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2240      	movs	r2, #64	@ 0x40
 800ae18:	5a9b      	ldrh	r3, [r3, r2]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	b292      	uxth	r2, r2
 800ae20:	43d2      	mvns	r2, r2
 800ae22:	b292      	uxth	r2, r2
 800ae24:	4013      	ands	r3, r2
 800ae26:	b299      	uxth	r1, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2240      	movs	r2, #64	@ 0x40
 800ae2c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	0018      	movs	r0, r3
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b004      	add	sp, #16
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	0000bf80 	.word	0x0000bf80

0800ae3c <USB_DevInit>:
=======
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2240      	movs	r2, #64	@ 0x40
 8009f50:	5a9b      	ldrh	r3, [r3, r2]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	b292      	uxth	r2, r2
 8009f58:	43d2      	mvns	r2, r2
 8009f5a:	b292      	uxth	r2, r2
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	b299      	uxth	r1, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2240      	movs	r2, #64	@ 0x40
 8009f64:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	0018      	movs	r0, r3
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	0000bf80 	.word	0x0000bf80

08009f74 <USB_DevInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	1d3b      	adds	r3, r7, #4
 800ae46:	6019      	str	r1, [r3, #0]
 800ae48:	605a      	str	r2, [r3, #4]
=======
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	1d3b      	adds	r3, r7, #4
 8009f7e:	6019      	str	r1, [r3, #0]
 8009f80:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2240      	movs	r2, #64	@ 0x40
 800ae4e:	2101      	movs	r1, #1
 800ae50:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2240      	movs	r2, #64	@ 0x40
 800ae56:	2100      	movs	r1, #0
 800ae58:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2244      	movs	r2, #68	@ 0x44
 800ae5e:	2100      	movs	r1, #0
 800ae60:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2250      	movs	r2, #80	@ 0x50
 800ae66:	2100      	movs	r1, #0
 800ae68:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b004      	add	sp, #16
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USB_ActivateEndpoint>:
=======
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2240      	movs	r2, #64	@ 0x40
 8009f86:	2101      	movs	r1, #1
 8009f88:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2240      	movs	r2, #64	@ 0x40
 8009f8e:	2100      	movs	r1, #0
 8009f90:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2244      	movs	r2, #68	@ 0x44
 8009f96:	2100      	movs	r1, #0
 8009f98:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2250      	movs	r2, #80	@ 0x50
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	b004      	add	sp, #16
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USB_ActivateEndpoint>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b09c      	sub	sp, #112	@ 0x70
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae7e:	236f      	movs	r3, #111	@ 0x6f
 800ae80:	18fb      	adds	r3, r7, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	18d3      	adds	r3, r2, r3
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	236c      	movs	r3, #108	@ 0x6c
 800ae96:	18fb      	adds	r3, r7, r3
 800ae98:	49a1      	ldr	r1, [pc, #644]	@ (800b120 <USB_ActivateEndpoint+0x2ac>)
 800ae9a:	400a      	ands	r2, r1
 800ae9c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	78db      	ldrb	r3, [r3, #3]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d017      	beq.n	800aed6 <USB_ActivateEndpoint+0x62>
 800aea6:	dc28      	bgt.n	800aefa <USB_ActivateEndpoint+0x86>
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d00e      	beq.n	800aeca <USB_ActivateEndpoint+0x56>
 800aeac:	dc25      	bgt.n	800aefa <USB_ActivateEndpoint+0x86>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <USB_ActivateEndpoint+0x44>
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d018      	beq.n	800aee8 <USB_ActivateEndpoint+0x74>
 800aeb6:	e020      	b.n	800aefa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aeb8:	226c      	movs	r2, #108	@ 0x6c
 800aeba:	18bb      	adds	r3, r7, r2
 800aebc:	18ba      	adds	r2, r7, r2
 800aebe:	8812      	ldrh	r2, [r2, #0]
 800aec0:	2180      	movs	r1, #128	@ 0x80
 800aec2:	0089      	lsls	r1, r1, #2
 800aec4:	430a      	orrs	r2, r1
 800aec6:	801a      	strh	r2, [r3, #0]
      break;
 800aec8:	e01c      	b.n	800af04 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800aeca:	226c      	movs	r2, #108	@ 0x6c
 800aecc:	18bb      	adds	r3, r7, r2
 800aece:	18ba      	adds	r2, r7, r2
 800aed0:	8812      	ldrh	r2, [r2, #0]
 800aed2:	801a      	strh	r2, [r3, #0]
      break;
 800aed4:	e016      	b.n	800af04 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aed6:	226c      	movs	r2, #108	@ 0x6c
 800aed8:	18bb      	adds	r3, r7, r2
 800aeda:	18ba      	adds	r2, r7, r2
 800aedc:	8812      	ldrh	r2, [r2, #0]
 800aede:	21c0      	movs	r1, #192	@ 0xc0
 800aee0:	00c9      	lsls	r1, r1, #3
 800aee2:	430a      	orrs	r2, r1
 800aee4:	801a      	strh	r2, [r3, #0]
      break;
 800aee6:	e00d      	b.n	800af04 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aee8:	226c      	movs	r2, #108	@ 0x6c
 800aeea:	18bb      	adds	r3, r7, r2
 800aeec:	18ba      	adds	r2, r7, r2
 800aeee:	8812      	ldrh	r2, [r2, #0]
 800aef0:	2180      	movs	r1, #128	@ 0x80
 800aef2:	00c9      	lsls	r1, r1, #3
 800aef4:	430a      	orrs	r2, r1
 800aef6:	801a      	strh	r2, [r3, #0]
      break;
 800aef8:	e004      	b.n	800af04 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800aefa:	236f      	movs	r3, #111	@ 0x6f
 800aefc:	18fb      	adds	r3, r7, r3
 800aefe:	2201      	movs	r2, #1
 800af00:	701a      	strb	r2, [r3, #0]
      break;
 800af02:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	18d3      	adds	r3, r2, r3
 800af0e:	226c      	movs	r2, #108	@ 0x6c
 800af10:	18ba      	adds	r2, r7, r2
 800af12:	8812      	ldrh	r2, [r2, #0]
 800af14:	4983      	ldr	r1, [pc, #524]	@ (800b124 <USB_ActivateEndpoint+0x2b0>)
 800af16:	430a      	orrs	r2, r1
 800af18:	b292      	uxth	r2, r2
 800af1a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	18d3      	adds	r3, r2, r3
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	b21b      	sxth	r3, r3
 800af2c:	4a7e      	ldr	r2, [pc, #504]	@ (800b128 <USB_ActivateEndpoint+0x2b4>)
 800af2e:	4013      	ands	r3, r2
 800af30:	b21a      	sxth	r2, r3
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b21b      	sxth	r3, r3
 800af38:	4313      	orrs	r3, r2
 800af3a:	b21a      	sxth	r2, r3
 800af3c:	2166      	movs	r1, #102	@ 0x66
 800af3e:	187b      	adds	r3, r7, r1
 800af40:	801a      	strh	r2, [r3, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	18d3      	adds	r3, r2, r3
 800af4c:	187a      	adds	r2, r7, r1
 800af4e:	8812      	ldrh	r2, [r2, #0]
 800af50:	4974      	ldr	r1, [pc, #464]	@ (800b124 <USB_ActivateEndpoint+0x2b0>)
 800af52:	430a      	orrs	r2, r1
 800af54:	b292      	uxth	r2, r2
 800af56:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	7b1b      	ldrb	r3, [r3, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d000      	beq.n	800af62 <USB_ActivateEndpoint+0xee>
 800af60:	e177      	b.n	800b252 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	785b      	ldrb	r3, [r3, #1]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d100      	bne.n	800af6c <USB_ActivateEndpoint+0xf8>
 800af6a:	e07a      	b.n	800b062 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2250      	movs	r2, #80	@ 0x50
 800af74:	5a9b      	ldrh	r3, [r3, r2]
 800af76:	b29b      	uxth	r3, r3
 800af78:	001a      	movs	r2, r3
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	189b      	adds	r3, r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	00da      	lsls	r2, r3, #3
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	18d3      	adds	r3, r2, r3
 800af8a:	2280      	movs	r2, #128	@ 0x80
 800af8c:	00d2      	lsls	r2, r2, #3
 800af8e:	4694      	mov	ip, r2
 800af90:	4463      	add	r3, ip
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	88db      	ldrh	r3, [r3, #6]
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	18db      	adds	r3, r3, r3
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	18d2      	adds	r2, r2, r3
 800afae:	2112      	movs	r1, #18
 800afb0:	187b      	adds	r3, r7, r1
 800afb2:	8812      	ldrh	r2, [r2, #0]
 800afb4:	801a      	strh	r2, [r3, #0]
 800afb6:	187b      	adds	r3, r7, r1
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	2240      	movs	r2, #64	@ 0x40
 800afbc:	4013      	ands	r3, r2
 800afbe:	d016      	beq.n	800afee <USB_ActivateEndpoint+0x17a>
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	18d3      	adds	r3, r2, r3
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29a      	uxth	r2, r3
 800afce:	2010      	movs	r0, #16
 800afd0:	183b      	adds	r3, r7, r0
 800afd2:	4955      	ldr	r1, [pc, #340]	@ (800b128 <USB_ActivateEndpoint+0x2b4>)
 800afd4:	400a      	ands	r2, r1
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	18d3      	adds	r3, r2, r3
 800afe2:	183a      	adds	r2, r7, r0
 800afe4:	8812      	ldrh	r2, [r2, #0]
 800afe6:	4951      	ldr	r1, [pc, #324]	@ (800b12c <USB_ActivateEndpoint+0x2b8>)
 800afe8:	430a      	orrs	r2, r1
 800afea:	b292      	uxth	r2, r2
 800afec:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	78db      	ldrb	r3, [r3, #3]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d01d      	beq.n	800b032 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	18d3      	adds	r3, r2, r3
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	b29a      	uxth	r2, r3
 800b004:	200c      	movs	r0, #12
 800b006:	183b      	adds	r3, r7, r0
 800b008:	4949      	ldr	r1, [pc, #292]	@ (800b130 <USB_ActivateEndpoint+0x2bc>)
 800b00a:	400a      	ands	r2, r1
 800b00c:	801a      	strh	r2, [r3, #0]
 800b00e:	183b      	adds	r3, r7, r0
 800b010:	183a      	adds	r2, r7, r0
 800b012:	8812      	ldrh	r2, [r2, #0]
 800b014:	2120      	movs	r1, #32
 800b016:	404a      	eors	r2, r1
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	18d3      	adds	r3, r2, r3
 800b024:	183a      	adds	r2, r7, r0
 800b026:	8812      	ldrh	r2, [r2, #0]
 800b028:	493e      	ldr	r1, [pc, #248]	@ (800b124 <USB_ActivateEndpoint+0x2b0>)
 800b02a:	430a      	orrs	r2, r1
 800b02c:	b292      	uxth	r2, r2
 800b02e:	801a      	strh	r2, [r3, #0]
 800b030:	e2b5      	b.n	800b59e <USB_ActivateEndpoint+0x72a>
=======
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b09c      	sub	sp, #112	@ 0x70
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fb6:	236f      	movs	r3, #111	@ 0x6f
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	18d3      	adds	r3, r2, r3
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	236c      	movs	r3, #108	@ 0x6c
 8009fce:	18fb      	adds	r3, r7, r3
 8009fd0:	49a1      	ldr	r1, [pc, #644]	@ (800a258 <USB_ActivateEndpoint+0x2ac>)
 8009fd2:	400a      	ands	r2, r1
 8009fd4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	78db      	ldrb	r3, [r3, #3]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d017      	beq.n	800a00e <USB_ActivateEndpoint+0x62>
 8009fde:	dc28      	bgt.n	800a032 <USB_ActivateEndpoint+0x86>
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d00e      	beq.n	800a002 <USB_ActivateEndpoint+0x56>
 8009fe4:	dc25      	bgt.n	800a032 <USB_ActivateEndpoint+0x86>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <USB_ActivateEndpoint+0x44>
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d018      	beq.n	800a020 <USB_ActivateEndpoint+0x74>
 8009fee:	e020      	b.n	800a032 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ff0:	226c      	movs	r2, #108	@ 0x6c
 8009ff2:	18bb      	adds	r3, r7, r2
 8009ff4:	18ba      	adds	r2, r7, r2
 8009ff6:	8812      	ldrh	r2, [r2, #0]
 8009ff8:	2180      	movs	r1, #128	@ 0x80
 8009ffa:	0089      	lsls	r1, r1, #2
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	801a      	strh	r2, [r3, #0]
      break;
 800a000:	e01c      	b.n	800a03c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800a002:	226c      	movs	r2, #108	@ 0x6c
 800a004:	18bb      	adds	r3, r7, r2
 800a006:	18ba      	adds	r2, r7, r2
 800a008:	8812      	ldrh	r2, [r2, #0]
 800a00a:	801a      	strh	r2, [r3, #0]
      break;
 800a00c:	e016      	b.n	800a03c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a00e:	226c      	movs	r2, #108	@ 0x6c
 800a010:	18bb      	adds	r3, r7, r2
 800a012:	18ba      	adds	r2, r7, r2
 800a014:	8812      	ldrh	r2, [r2, #0]
 800a016:	21c0      	movs	r1, #192	@ 0xc0
 800a018:	00c9      	lsls	r1, r1, #3
 800a01a:	430a      	orrs	r2, r1
 800a01c:	801a      	strh	r2, [r3, #0]
      break;
 800a01e:	e00d      	b.n	800a03c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a020:	226c      	movs	r2, #108	@ 0x6c
 800a022:	18bb      	adds	r3, r7, r2
 800a024:	18ba      	adds	r2, r7, r2
 800a026:	8812      	ldrh	r2, [r2, #0]
 800a028:	2180      	movs	r1, #128	@ 0x80
 800a02a:	00c9      	lsls	r1, r1, #3
 800a02c:	430a      	orrs	r2, r1
 800a02e:	801a      	strh	r2, [r3, #0]
      break;
 800a030:	e004      	b.n	800a03c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800a032:	236f      	movs	r3, #111	@ 0x6f
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
      break;
 800a03a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	18d3      	adds	r3, r2, r3
 800a046:	226c      	movs	r2, #108	@ 0x6c
 800a048:	18ba      	adds	r2, r7, r2
 800a04a:	8812      	ldrh	r2, [r2, #0]
 800a04c:	4983      	ldr	r1, [pc, #524]	@ (800a25c <USB_ActivateEndpoint+0x2b0>)
 800a04e:	430a      	orrs	r2, r1
 800a050:	b292      	uxth	r2, r2
 800a052:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	18d3      	adds	r3, r2, r3
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	b21b      	sxth	r3, r3
 800a064:	4a7e      	ldr	r2, [pc, #504]	@ (800a260 <USB_ActivateEndpoint+0x2b4>)
 800a066:	4013      	ands	r3, r2
 800a068:	b21a      	sxth	r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b21b      	sxth	r3, r3
 800a070:	4313      	orrs	r3, r2
 800a072:	b21a      	sxth	r2, r3
 800a074:	2166      	movs	r1, #102	@ 0x66
 800a076:	187b      	adds	r3, r7, r1
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	18d3      	adds	r3, r2, r3
 800a084:	187a      	adds	r2, r7, r1
 800a086:	8812      	ldrh	r2, [r2, #0]
 800a088:	4974      	ldr	r1, [pc, #464]	@ (800a25c <USB_ActivateEndpoint+0x2b0>)
 800a08a:	430a      	orrs	r2, r1
 800a08c:	b292      	uxth	r2, r2
 800a08e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	7b1b      	ldrb	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d000      	beq.n	800a09a <USB_ActivateEndpoint+0xee>
 800a098:	e177      	b.n	800a38a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d100      	bne.n	800a0a4 <USB_ActivateEndpoint+0xf8>
 800a0a2:	e07a      	b.n	800a19a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2250      	movs	r2, #80	@ 0x50
 800a0ac:	5a9b      	ldrh	r3, [r3, r2]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	001a      	movs	r2, r3
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	61bb      	str	r3, [r7, #24]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	00da      	lsls	r2, r3, #3
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	18d3      	adds	r3, r2, r3
 800a0c2:	2280      	movs	r2, #128	@ 0x80
 800a0c4:	00d2      	lsls	r2, r2, #3
 800a0c6:	4694      	mov	ip, r2
 800a0c8:	4463      	add	r3, ip
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	88db      	ldrh	r3, [r3, #6]
 800a0d0:	085b      	lsrs	r3, r3, #1
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	18db      	adds	r3, r3, r3
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	18d2      	adds	r2, r2, r3
 800a0e6:	2112      	movs	r1, #18
 800a0e8:	187b      	adds	r3, r7, r1
 800a0ea:	8812      	ldrh	r2, [r2, #0]
 800a0ec:	801a      	strh	r2, [r3, #0]
 800a0ee:	187b      	adds	r3, r7, r1
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	2240      	movs	r2, #64	@ 0x40
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d016      	beq.n	800a126 <USB_ActivateEndpoint+0x17a>
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	18d3      	adds	r3, r2, r3
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29a      	uxth	r2, r3
 800a106:	2010      	movs	r0, #16
 800a108:	183b      	adds	r3, r7, r0
 800a10a:	4955      	ldr	r1, [pc, #340]	@ (800a260 <USB_ActivateEndpoint+0x2b4>)
 800a10c:	400a      	ands	r2, r1
 800a10e:	801a      	strh	r2, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	18d3      	adds	r3, r2, r3
 800a11a:	183a      	adds	r2, r7, r0
 800a11c:	8812      	ldrh	r2, [r2, #0]
 800a11e:	4951      	ldr	r1, [pc, #324]	@ (800a264 <USB_ActivateEndpoint+0x2b8>)
 800a120:	430a      	orrs	r2, r1
 800a122:	b292      	uxth	r2, r2
 800a124:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	78db      	ldrb	r3, [r3, #3]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d01d      	beq.n	800a16a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	18d3      	adds	r3, r2, r3
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	200c      	movs	r0, #12
 800a13e:	183b      	adds	r3, r7, r0
 800a140:	4949      	ldr	r1, [pc, #292]	@ (800a268 <USB_ActivateEndpoint+0x2bc>)
 800a142:	400a      	ands	r2, r1
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	183b      	adds	r3, r7, r0
 800a148:	183a      	adds	r2, r7, r0
 800a14a:	8812      	ldrh	r2, [r2, #0]
 800a14c:	2120      	movs	r1, #32
 800a14e:	404a      	eors	r2, r1
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	18d3      	adds	r3, r2, r3
 800a15c:	183a      	adds	r2, r7, r0
 800a15e:	8812      	ldrh	r2, [r2, #0]
 800a160:	493e      	ldr	r1, [pc, #248]	@ (800a25c <USB_ActivateEndpoint+0x2b0>)
 800a162:	430a      	orrs	r2, r1
 800a164:	b292      	uxth	r2, r2
 800a166:	801a      	strh	r2, [r3, #0]
 800a168:	e2b5      	b.n	800a6d6 <USB_ActivateEndpoint+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	18d3      	adds	r3, r2, r3
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	200e      	movs	r0, #14
 800b042:	183b      	adds	r3, r7, r0
 800b044:	493a      	ldr	r1, [pc, #232]	@ (800b130 <USB_ActivateEndpoint+0x2bc>)
 800b046:	400a      	ands	r2, r1
 800b048:	801a      	strh	r2, [r3, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	18d3      	adds	r3, r2, r3
 800b054:	183a      	adds	r2, r7, r0
 800b056:	8812      	ldrh	r2, [r2, #0]
 800b058:	4932      	ldr	r1, [pc, #200]	@ (800b124 <USB_ActivateEndpoint+0x2b0>)
 800b05a:	430a      	orrs	r2, r1
 800b05c:	b292      	uxth	r2, r2
 800b05e:	801a      	strh	r2, [r3, #0]
 800b060:	e29d      	b.n	800b59e <USB_ActivateEndpoint+0x72a>
=======
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	18d3      	adds	r3, r2, r3
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29a      	uxth	r2, r3
 800a178:	200e      	movs	r0, #14
 800a17a:	183b      	adds	r3, r7, r0
 800a17c:	493a      	ldr	r1, [pc, #232]	@ (800a268 <USB_ActivateEndpoint+0x2bc>)
 800a17e:	400a      	ands	r2, r1
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	183a      	adds	r2, r7, r0
 800a18e:	8812      	ldrh	r2, [r2, #0]
 800a190:	4932      	ldr	r1, [pc, #200]	@ (800a25c <USB_ActivateEndpoint+0x2b0>)
 800a192:	430a      	orrs	r2, r1
 800a194:	b292      	uxth	r2, r2
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e29d      	b.n	800a6d6 <USB_ActivateEndpoint+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< HEAD
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	633b      	str	r3, [r7, #48]	@ 0x30
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2250      	movs	r2, #80	@ 0x50
 800b06a:	5a9b      	ldrh	r3, [r3, r2]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	001a      	movs	r2, r3
 800b070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b072:	189b      	adds	r3, r3, r2
 800b074:	633b      	str	r3, [r7, #48]	@ 0x30
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	00da      	lsls	r2, r3, #3
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	18d3      	adds	r3, r2, r3
 800b080:	4a2c      	ldr	r2, [pc, #176]	@ (800b134 <USB_ActivateEndpoint+0x2c0>)
 800b082:	4694      	mov	ip, r2
 800b084:	4463      	add	r3, ip
 800b086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	88db      	ldrh	r3, [r3, #6]
 800b08c:	085b      	lsrs	r3, r3, #1
 800b08e:	b29b      	uxth	r3, r3
 800b090:	18db      	adds	r3, r3, r3
 800b092:	b29a      	uxth	r2, r3
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2250      	movs	r2, #80	@ 0x50
 800b0a0:	5a9b      	ldrh	r3, [r3, r2]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a8:	189b      	adds	r3, r3, r2
 800b0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	00da      	lsls	r2, r3, #3
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	18d3      	adds	r3, r2, r3
 800b0b6:	4a20      	ldr	r2, [pc, #128]	@ (800b138 <USB_ActivateEndpoint+0x2c4>)
 800b0b8:	4694      	mov	ip, r2
 800b0ba:	4463      	add	r3, ip
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	059b      	lsls	r3, r3, #22
 800b0c6:	0d9b      	lsrs	r3, r3, #22
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	801a      	strh	r2, [r3, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d108      	bne.n	800b0e8 <USB_ActivateEndpoint+0x274>
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	4a17      	ldr	r2, [pc, #92]	@ (800b13c <USB_ActivateEndpoint+0x2c8>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	e045      	b.n	800b174 <USB_ActivateEndpoint+0x300>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0ee:	d827      	bhi.n	800b140 <USB_ActivateEndpoint+0x2cc>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	085b      	lsrs	r3, r3, #1
 800b0f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	4013      	ands	r3, r2
 800b100:	d002      	beq.n	800b108 <USB_ActivateEndpoint+0x294>
 800b102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b104:	3301      	adds	r3, #1
 800b106:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b110:	b29b      	uxth	r3, r3
 800b112:	029b      	lsls	r3, r3, #10
 800b114:	b29b      	uxth	r3, r3
 800b116:	4313      	orrs	r3, r2
 800b118:	b29a      	uxth	r2, r3
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	801a      	strh	r2, [r3, #0]
 800b11e:	e029      	b.n	800b174 <USB_ActivateEndpoint+0x300>
 800b120:	ffff898f 	.word	0xffff898f
 800b124:	ffff8080 	.word	0xffff8080
 800b128:	ffff8f8f 	.word	0xffff8f8f
 800b12c:	ffff80c0 	.word	0xffff80c0
 800b130:	ffff8fbf 	.word	0xffff8fbf
 800b134:	00000404 	.word	0x00000404
 800b138:	00000406 	.word	0x00000406
 800b13c:	ffff8000 	.word	0xffff8000
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	095b      	lsrs	r3, r3, #5
 800b146:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	221f      	movs	r2, #31
 800b14e:	4013      	ands	r3, r2
 800b150:	d102      	bne.n	800b158 <USB_ActivateEndpoint+0x2e4>
 800b152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b154:	3b01      	subs	r3, #1
 800b156:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b160:	b29b      	uxth	r3, r3
 800b162:	029b      	lsls	r3, r3, #10
 800b164:	b29b      	uxth	r3, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	b29b      	uxth	r3, r3
 800b16a:	4ab5      	ldr	r2, [pc, #724]	@ (800b440 <USB_ActivateEndpoint+0x5cc>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	b29a      	uxth	r2, r3
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	18d2      	adds	r2, r2, r3
 800b17e:	2122      	movs	r1, #34	@ 0x22
 800b180:	187b      	adds	r3, r7, r1
 800b182:	8812      	ldrh	r2, [r2, #0]
 800b184:	801a      	strh	r2, [r3, #0]
 800b186:	187b      	adds	r3, r7, r1
 800b188:	881a      	ldrh	r2, [r3, #0]
 800b18a:	2380      	movs	r3, #128	@ 0x80
 800b18c:	01db      	lsls	r3, r3, #7
 800b18e:	4013      	ands	r3, r2
 800b190:	d016      	beq.n	800b1c0 <USB_ActivateEndpoint+0x34c>
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	18d3      	adds	r3, r2, r3
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	2020      	movs	r0, #32
 800b1a2:	183b      	adds	r3, r7, r0
 800b1a4:	49a7      	ldr	r1, [pc, #668]	@ (800b444 <USB_ActivateEndpoint+0x5d0>)
 800b1a6:	400a      	ands	r2, r1
 800b1a8:	801a      	strh	r2, [r3, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	18d3      	adds	r3, r2, r3
 800b1b4:	183a      	adds	r2, r7, r0
 800b1b6:	8812      	ldrh	r2, [r2, #0]
 800b1b8:	49a3      	ldr	r1, [pc, #652]	@ (800b448 <USB_ActivateEndpoint+0x5d4>)
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	b292      	uxth	r2, r2
 800b1be:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d125      	bne.n	800b214 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	18d3      	adds	r3, r2, r3
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	201c      	movs	r0, #28
 800b1d8:	183b      	adds	r3, r7, r0
 800b1da:	499c      	ldr	r1, [pc, #624]	@ (800b44c <USB_ActivateEndpoint+0x5d8>)
 800b1dc:	400a      	ands	r2, r1
 800b1de:	801a      	strh	r2, [r3, #0]
 800b1e0:	183b      	adds	r3, r7, r0
 800b1e2:	183a      	adds	r2, r7, r0
 800b1e4:	8812      	ldrh	r2, [r2, #0]
 800b1e6:	2180      	movs	r1, #128	@ 0x80
 800b1e8:	0149      	lsls	r1, r1, #5
 800b1ea:	404a      	eors	r2, r1
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	183b      	adds	r3, r7, r0
 800b1f0:	183a      	adds	r2, r7, r0
 800b1f2:	8812      	ldrh	r2, [r2, #0]
 800b1f4:	2180      	movs	r1, #128	@ 0x80
 800b1f6:	0189      	lsls	r1, r1, #6
 800b1f8:	404a      	eors	r2, r1
 800b1fa:	801a      	strh	r2, [r3, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	18d3      	adds	r3, r2, r3
 800b206:	183a      	adds	r2, r7, r0
 800b208:	8812      	ldrh	r2, [r2, #0]
 800b20a:	4991      	ldr	r1, [pc, #580]	@ (800b450 <USB_ActivateEndpoint+0x5dc>)
 800b20c:	430a      	orrs	r2, r1
 800b20e:	b292      	uxth	r2, r2
 800b210:	801a      	strh	r2, [r3, #0]
 800b212:	e1c4      	b.n	800b59e <USB_ActivateEndpoint+0x72a>
=======
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2250      	movs	r2, #80	@ 0x50
 800a1a2:	5a9b      	ldrh	r3, [r3, r2]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	001a      	movs	r2, r3
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	00da      	lsls	r2, r3, #3
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	18d3      	adds	r3, r2, r3
 800a1b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a26c <USB_ActivateEndpoint+0x2c0>)
 800a1ba:	4694      	mov	ip, r2
 800a1bc:	4463      	add	r3, ip
 800a1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	88db      	ldrh	r3, [r3, #6]
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	18db      	adds	r3, r3, r3
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2250      	movs	r2, #80	@ 0x50
 800a1d8:	5a9b      	ldrh	r3, [r3, r2]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	001a      	movs	r2, r3
 800a1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	00da      	lsls	r2, r3, #3
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	18d3      	adds	r3, r2, r3
 800a1ee:	4a20      	ldr	r2, [pc, #128]	@ (800a270 <USB_ActivateEndpoint+0x2c4>)
 800a1f0:	4694      	mov	ip, r2
 800a1f2:	4463      	add	r3, ip
 800a1f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	059b      	lsls	r3, r3, #22
 800a1fe:	0d9b      	lsrs	r3, r3, #22
 800a200:	b29a      	uxth	r2, r3
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	801a      	strh	r2, [r3, #0]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d108      	bne.n	800a220 <USB_ActivateEndpoint+0x274>
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	4a17      	ldr	r2, [pc, #92]	@ (800a274 <USB_ActivateEndpoint+0x2c8>)
 800a216:	4313      	orrs	r3, r2
 800a218:	b29a      	uxth	r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	801a      	strh	r2, [r3, #0]
 800a21e:	e045      	b.n	800a2ac <USB_ActivateEndpoint+0x300>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b3e      	cmp	r3, #62	@ 0x3e
 800a226:	d827      	bhi.n	800a278 <USB_ActivateEndpoint+0x2cc>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	085b      	lsrs	r3, r3, #1
 800a22e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2201      	movs	r2, #1
 800a236:	4013      	ands	r3, r2
 800a238:	d002      	beq.n	800a240 <USB_ActivateEndpoint+0x294>
 800a23a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a23c:	3301      	adds	r3, #1
 800a23e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b29a      	uxth	r2, r3
 800a246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a248:	b29b      	uxth	r3, r3
 800a24a:	029b      	lsls	r3, r3, #10
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	b29a      	uxth	r2, r3
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	e029      	b.n	800a2ac <USB_ActivateEndpoint+0x300>
 800a258:	ffff898f 	.word	0xffff898f
 800a25c:	ffff8080 	.word	0xffff8080
 800a260:	ffff8f8f 	.word	0xffff8f8f
 800a264:	ffff80c0 	.word	0xffff80c0
 800a268:	ffff8fbf 	.word	0xffff8fbf
 800a26c:	00000404 	.word	0x00000404
 800a270:	00000406 	.word	0x00000406
 800a274:	ffff8000 	.word	0xffff8000
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	095b      	lsrs	r3, r3, #5
 800a27e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	221f      	movs	r2, #31
 800a286:	4013      	ands	r3, r2
 800a288:	d102      	bne.n	800a290 <USB_ActivateEndpoint+0x2e4>
 800a28a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a28c:	3b01      	subs	r3, #1
 800a28e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29a      	uxth	r2, r3
 800a296:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a298:	b29b      	uxth	r3, r3
 800a29a:	029b      	lsls	r3, r3, #10
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4ab5      	ldr	r2, [pc, #724]	@ (800a578 <USB_ActivateEndpoint+0x5cc>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	18d2      	adds	r2, r2, r3
 800a2b6:	2122      	movs	r1, #34	@ 0x22
 800a2b8:	187b      	adds	r3, r7, r1
 800a2ba:	8812      	ldrh	r2, [r2, #0]
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	187b      	adds	r3, r7, r1
 800a2c0:	881a      	ldrh	r2, [r3, #0]
 800a2c2:	2380      	movs	r3, #128	@ 0x80
 800a2c4:	01db      	lsls	r3, r3, #7
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	d016      	beq.n	800a2f8 <USB_ActivateEndpoint+0x34c>
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	18d3      	adds	r3, r2, r3
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	2020      	movs	r0, #32
 800a2da:	183b      	adds	r3, r7, r0
 800a2dc:	49a7      	ldr	r1, [pc, #668]	@ (800a57c <USB_ActivateEndpoint+0x5d0>)
 800a2de:	400a      	ands	r2, r1
 800a2e0:	801a      	strh	r2, [r3, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	18d3      	adds	r3, r2, r3
 800a2ec:	183a      	adds	r2, r7, r0
 800a2ee:	8812      	ldrh	r2, [r2, #0]
 800a2f0:	49a3      	ldr	r1, [pc, #652]	@ (800a580 <USB_ActivateEndpoint+0x5d4>)
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d125      	bne.n	800a34c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	18d3      	adds	r3, r2, r3
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	201c      	movs	r0, #28
 800a310:	183b      	adds	r3, r7, r0
 800a312:	499c      	ldr	r1, [pc, #624]	@ (800a584 <USB_ActivateEndpoint+0x5d8>)
 800a314:	400a      	ands	r2, r1
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	183b      	adds	r3, r7, r0
 800a31a:	183a      	adds	r2, r7, r0
 800a31c:	8812      	ldrh	r2, [r2, #0]
 800a31e:	2180      	movs	r1, #128	@ 0x80
 800a320:	0149      	lsls	r1, r1, #5
 800a322:	404a      	eors	r2, r1
 800a324:	801a      	strh	r2, [r3, #0]
 800a326:	183b      	adds	r3, r7, r0
 800a328:	183a      	adds	r2, r7, r0
 800a32a:	8812      	ldrh	r2, [r2, #0]
 800a32c:	2180      	movs	r1, #128	@ 0x80
 800a32e:	0189      	lsls	r1, r1, #6
 800a330:	404a      	eors	r2, r1
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	18d3      	adds	r3, r2, r3
 800a33e:	183a      	adds	r2, r7, r0
 800a340:	8812      	ldrh	r2, [r2, #0]
 800a342:	4991      	ldr	r1, [pc, #580]	@ (800a588 <USB_ActivateEndpoint+0x5dc>)
 800a344:	430a      	orrs	r2, r1
 800a346:	b292      	uxth	r2, r2
 800a348:	801a      	strh	r2, [r3, #0]
 800a34a:	e1c4      	b.n	800a6d6 <USB_ActivateEndpoint+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
<<<<<<< HEAD
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	18d3      	adds	r3, r2, r3
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	b29a      	uxth	r2, r3
 800b222:	201e      	movs	r0, #30
 800b224:	183b      	adds	r3, r7, r0
 800b226:	4989      	ldr	r1, [pc, #548]	@ (800b44c <USB_ActivateEndpoint+0x5d8>)
 800b228:	400a      	ands	r2, r1
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	183b      	adds	r3, r7, r0
 800b22e:	183a      	adds	r2, r7, r0
 800b230:	8812      	ldrh	r2, [r2, #0]
 800b232:	2180      	movs	r1, #128	@ 0x80
 800b234:	0189      	lsls	r1, r1, #6
 800b236:	404a      	eors	r2, r1
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	18d3      	adds	r3, r2, r3
 800b244:	183a      	adds	r2, r7, r0
 800b246:	8812      	ldrh	r2, [r2, #0]
 800b248:	4981      	ldr	r1, [pc, #516]	@ (800b450 <USB_ActivateEndpoint+0x5dc>)
 800b24a:	430a      	orrs	r2, r1
 800b24c:	b292      	uxth	r2, r2
 800b24e:	801a      	strh	r2, [r3, #0]
 800b250:	e1a5      	b.n	800b59e <USB_ActivateEndpoint+0x72a>
=======
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	18d3      	adds	r3, r2, r3
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	b29a      	uxth	r2, r3
 800a35a:	201e      	movs	r0, #30
 800a35c:	183b      	adds	r3, r7, r0
 800a35e:	4989      	ldr	r1, [pc, #548]	@ (800a584 <USB_ActivateEndpoint+0x5d8>)
 800a360:	400a      	ands	r2, r1
 800a362:	801a      	strh	r2, [r3, #0]
 800a364:	183b      	adds	r3, r7, r0
 800a366:	183a      	adds	r2, r7, r0
 800a368:	8812      	ldrh	r2, [r2, #0]
 800a36a:	2180      	movs	r1, #128	@ 0x80
 800a36c:	0189      	lsls	r1, r1, #6
 800a36e:	404a      	eors	r2, r1
 800a370:	801a      	strh	r2, [r3, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	18d3      	adds	r3, r2, r3
 800a37c:	183a      	adds	r2, r7, r0
 800a37e:	8812      	ldrh	r2, [r2, #0]
 800a380:	4981      	ldr	r1, [pc, #516]	@ (800a588 <USB_ActivateEndpoint+0x5dc>)
 800a382:	430a      	orrs	r2, r1
 800a384:	b292      	uxth	r2, r2
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e1a5      	b.n	800a6d6 <USB_ActivateEndpoint+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	78db      	ldrb	r3, [r3, #3]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d117      	bne.n	800b28a <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	18d3      	adds	r3, r2, r3
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	b29a      	uxth	r2, r3
 800b268:	2062      	movs	r0, #98	@ 0x62
 800b26a:	183b      	adds	r3, r7, r0
 800b26c:	4975      	ldr	r1, [pc, #468]	@ (800b444 <USB_ActivateEndpoint+0x5d0>)
 800b26e:	400a      	ands	r2, r1
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	18d3      	adds	r3, r2, r3
 800b27c:	183a      	adds	r2, r7, r0
 800b27e:	8812      	ldrh	r2, [r2, #0]
 800b280:	4974      	ldr	r1, [pc, #464]	@ (800b454 <USB_ActivateEndpoint+0x5e0>)
 800b282:	430a      	orrs	r2, r1
 800b284:	b292      	uxth	r2, r2
 800b286:	801a      	strh	r2, [r3, #0]
 800b288:	e016      	b.n	800b2b8 <USB_ActivateEndpoint+0x444>
=======
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	78db      	ldrb	r3, [r3, #3]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d117      	bne.n	800a3c2 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	18d3      	adds	r3, r2, r3
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	2062      	movs	r0, #98	@ 0x62
 800a3a2:	183b      	adds	r3, r7, r0
 800a3a4:	4975      	ldr	r1, [pc, #468]	@ (800a57c <USB_ActivateEndpoint+0x5d0>)
 800a3a6:	400a      	ands	r2, r1
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	18d3      	adds	r3, r2, r3
 800a3b4:	183a      	adds	r2, r7, r0
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	4974      	ldr	r1, [pc, #464]	@ (800a58c <USB_ActivateEndpoint+0x5e0>)
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	e016      	b.n	800a3f0 <USB_ActivateEndpoint+0x444>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
<<<<<<< HEAD
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	18d3      	adds	r3, r2, r3
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29a      	uxth	r2, r3
 800b298:	2064      	movs	r0, #100	@ 0x64
 800b29a:	183b      	adds	r3, r7, r0
 800b29c:	496e      	ldr	r1, [pc, #440]	@ (800b458 <USB_ActivateEndpoint+0x5e4>)
 800b29e:	400a      	ands	r2, r1
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	18d3      	adds	r3, r2, r3
 800b2ac:	183a      	adds	r2, r7, r0
 800b2ae:	8812      	ldrh	r2, [r2, #0]
 800b2b0:	4967      	ldr	r1, [pc, #412]	@ (800b450 <USB_ActivateEndpoint+0x5dc>)
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	b292      	uxth	r2, r2
 800b2b6:	801a      	strh	r2, [r3, #0]
=======
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	18d3      	adds	r3, r2, r3
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	2064      	movs	r0, #100	@ 0x64
 800a3d2:	183b      	adds	r3, r7, r0
 800a3d4:	496e      	ldr	r1, [pc, #440]	@ (800a590 <USB_ActivateEndpoint+0x5e4>)
 800a3d6:	400a      	ands	r2, r1
 800a3d8:	801a      	strh	r2, [r3, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	18d3      	adds	r3, r2, r3
 800a3e4:	183a      	adds	r2, r7, r0
 800a3e6:	8812      	ldrh	r2, [r2, #0]
 800a3e8:	4967      	ldr	r1, [pc, #412]	@ (800a588 <USB_ActivateEndpoint+0x5dc>)
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	b292      	uxth	r2, r2
 800a3ee:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
<<<<<<< HEAD
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2250      	movs	r2, #80	@ 0x50
 800b2c0:	5a9b      	ldrh	r3, [r3, r2]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	001a      	movs	r2, r3
 800b2c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2c8:	189b      	adds	r3, r3, r2
 800b2ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	00da      	lsls	r2, r3, #3
 800b2d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2d4:	18d3      	adds	r3, r2, r3
 800b2d6:	2280      	movs	r2, #128	@ 0x80
 800b2d8:	00d2      	lsls	r2, r2, #3
 800b2da:	4694      	mov	ip, r2
 800b2dc:	4463      	add	r3, ip
 800b2de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	891b      	ldrh	r3, [r3, #8]
 800b2e4:	085b      	lsrs	r3, r3, #1
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	18db      	adds	r3, r3, r3
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2ee:	801a      	strh	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2250      	movs	r2, #80	@ 0x50
 800b2f8:	5a9b      	ldrh	r3, [r3, r2]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	001a      	movs	r2, r3
 800b2fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b300:	189b      	adds	r3, r3, r2
 800b302:	657b      	str	r3, [r7, #84]	@ 0x54
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	00da      	lsls	r2, r3, #3
 800b30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b30c:	18d3      	adds	r3, r2, r3
 800b30e:	4a53      	ldr	r2, [pc, #332]	@ (800b45c <USB_ActivateEndpoint+0x5e8>)
 800b310:	4694      	mov	ip, r2
 800b312:	4463      	add	r3, ip
 800b314:	653b      	str	r3, [r7, #80]	@ 0x50
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	895b      	ldrh	r3, [r3, #10]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	18db      	adds	r3, r3, r3
 800b320:	b29a      	uxth	r2, r3
 800b322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b324:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d000      	beq.n	800b330 <USB_ActivateEndpoint+0x4bc>
 800b32e:	e09b      	b.n	800b468 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	18d2      	adds	r2, r2, r3
 800b33a:	2140      	movs	r1, #64	@ 0x40
 800b33c:	187b      	adds	r3, r7, r1
 800b33e:	8812      	ldrh	r2, [r2, #0]
 800b340:	801a      	strh	r2, [r3, #0]
 800b342:	187b      	adds	r3, r7, r1
 800b344:	881a      	ldrh	r2, [r3, #0]
 800b346:	2380      	movs	r3, #128	@ 0x80
 800b348:	01db      	lsls	r3, r3, #7
 800b34a:	4013      	ands	r3, r2
 800b34c:	d016      	beq.n	800b37c <USB_ActivateEndpoint+0x508>
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	18d3      	adds	r3, r2, r3
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	203e      	movs	r0, #62	@ 0x3e
 800b35e:	183b      	adds	r3, r7, r0
 800b360:	4938      	ldr	r1, [pc, #224]	@ (800b444 <USB_ActivateEndpoint+0x5d0>)
 800b362:	400a      	ands	r2, r1
 800b364:	801a      	strh	r2, [r3, #0]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	18d3      	adds	r3, r2, r3
 800b370:	183a      	adds	r2, r7, r0
 800b372:	8812      	ldrh	r2, [r2, #0]
 800b374:	4934      	ldr	r1, [pc, #208]	@ (800b448 <USB_ActivateEndpoint+0x5d4>)
 800b376:	430a      	orrs	r2, r1
 800b378:	b292      	uxth	r2, r2
 800b37a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	18d2      	adds	r2, r2, r3
 800b386:	213c      	movs	r1, #60	@ 0x3c
 800b388:	187b      	adds	r3, r7, r1
 800b38a:	8812      	ldrh	r2, [r2, #0]
 800b38c:	801a      	strh	r2, [r3, #0]
 800b38e:	187b      	adds	r3, r7, r1
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	2240      	movs	r2, #64	@ 0x40
 800b394:	4013      	ands	r3, r2
 800b396:	d016      	beq.n	800b3c6 <USB_ActivateEndpoint+0x552>
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	18d3      	adds	r3, r2, r3
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	203a      	movs	r0, #58	@ 0x3a
 800b3a8:	183b      	adds	r3, r7, r0
 800b3aa:	4926      	ldr	r1, [pc, #152]	@ (800b444 <USB_ActivateEndpoint+0x5d0>)
 800b3ac:	400a      	ands	r2, r1
 800b3ae:	801a      	strh	r2, [r3, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	18d3      	adds	r3, r2, r3
 800b3ba:	183a      	adds	r2, r7, r0
 800b3bc:	8812      	ldrh	r2, [r2, #0]
 800b3be:	4928      	ldr	r1, [pc, #160]	@ (800b460 <USB_ActivateEndpoint+0x5ec>)
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	b292      	uxth	r2, r2
 800b3c4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	18d3      	adds	r3, r2, r3
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	2038      	movs	r0, #56	@ 0x38
 800b3d6:	183b      	adds	r3, r7, r0
 800b3d8:	491c      	ldr	r1, [pc, #112]	@ (800b44c <USB_ActivateEndpoint+0x5d8>)
 800b3da:	400a      	ands	r2, r1
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	183b      	adds	r3, r7, r0
 800b3e0:	183a      	adds	r2, r7, r0
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	2180      	movs	r1, #128	@ 0x80
 800b3e6:	0149      	lsls	r1, r1, #5
 800b3e8:	404a      	eors	r2, r1
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	183b      	adds	r3, r7, r0
 800b3ee:	183a      	adds	r2, r7, r0
 800b3f0:	8812      	ldrh	r2, [r2, #0]
 800b3f2:	2180      	movs	r1, #128	@ 0x80
 800b3f4:	0189      	lsls	r1, r1, #6
 800b3f6:	404a      	eors	r2, r1
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	18d3      	adds	r3, r2, r3
 800b404:	183a      	adds	r2, r7, r0
 800b406:	8812      	ldrh	r2, [r2, #0]
 800b408:	4911      	ldr	r1, [pc, #68]	@ (800b450 <USB_ActivateEndpoint+0x5dc>)
 800b40a:	430a      	orrs	r2, r1
 800b40c:	b292      	uxth	r2, r2
 800b40e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	18d3      	adds	r3, r2, r3
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	2036      	movs	r0, #54	@ 0x36
 800b420:	183b      	adds	r3, r7, r0
 800b422:	4910      	ldr	r1, [pc, #64]	@ (800b464 <USB_ActivateEndpoint+0x5f0>)
 800b424:	400a      	ands	r2, r1
 800b426:	801a      	strh	r2, [r3, #0]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	18d3      	adds	r3, r2, r3
 800b432:	183a      	adds	r2, r7, r0
 800b434:	8812      	ldrh	r2, [r2, #0]
 800b436:	4906      	ldr	r1, [pc, #24]	@ (800b450 <USB_ActivateEndpoint+0x5dc>)
 800b438:	430a      	orrs	r2, r1
 800b43a:	b292      	uxth	r2, r2
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	e0ae      	b.n	800b59e <USB_ActivateEndpoint+0x72a>
 800b440:	ffff8000 	.word	0xffff8000
 800b444:	ffff8f8f 	.word	0xffff8f8f
 800b448:	ffffc080 	.word	0xffffc080
 800b44c:	ffffbf8f 	.word	0xffffbf8f
 800b450:	ffff8080 	.word	0xffff8080
 800b454:	ffff8180 	.word	0xffff8180
 800b458:	ffff8e8f 	.word	0xffff8e8f
 800b45c:	00000404 	.word	0x00000404
 800b460:	ffff80c0 	.word	0xffff80c0
 800b464:	ffff8fbf 	.word	0xffff8fbf
=======
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2250      	movs	r2, #80	@ 0x50
 800a3f8:	5a9b      	ldrh	r3, [r3, r2]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	001a      	movs	r2, r3
 800a3fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a400:	189b      	adds	r3, r3, r2
 800a402:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	00da      	lsls	r2, r3, #3
 800a40a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a40c:	18d3      	adds	r3, r2, r3
 800a40e:	2280      	movs	r2, #128	@ 0x80
 800a410:	00d2      	lsls	r2, r2, #3
 800a412:	4694      	mov	ip, r2
 800a414:	4463      	add	r3, ip
 800a416:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	891b      	ldrh	r3, [r3, #8]
 800a41c:	085b      	lsrs	r3, r3, #1
 800a41e:	b29b      	uxth	r3, r3
 800a420:	18db      	adds	r3, r3, r3
 800a422:	b29a      	uxth	r2, r3
 800a424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a426:	801a      	strh	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2250      	movs	r2, #80	@ 0x50
 800a430:	5a9b      	ldrh	r3, [r3, r2]
 800a432:	b29b      	uxth	r3, r3
 800a434:	001a      	movs	r2, r3
 800a436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a438:	189b      	adds	r3, r3, r2
 800a43a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	00da      	lsls	r2, r3, #3
 800a442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a444:	18d3      	adds	r3, r2, r3
 800a446:	4a53      	ldr	r2, [pc, #332]	@ (800a594 <USB_ActivateEndpoint+0x5e8>)
 800a448:	4694      	mov	ip, r2
 800a44a:	4463      	add	r3, ip
 800a44c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	085b      	lsrs	r3, r3, #1
 800a454:	b29b      	uxth	r3, r3
 800a456:	18db      	adds	r3, r3, r3
 800a458:	b29a      	uxth	r2, r3
 800a45a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a45c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d000      	beq.n	800a468 <USB_ActivateEndpoint+0x4bc>
 800a466:	e09b      	b.n	800a5a0 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	18d2      	adds	r2, r2, r3
 800a472:	2140      	movs	r1, #64	@ 0x40
 800a474:	187b      	adds	r3, r7, r1
 800a476:	8812      	ldrh	r2, [r2, #0]
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	881a      	ldrh	r2, [r3, #0]
 800a47e:	2380      	movs	r3, #128	@ 0x80
 800a480:	01db      	lsls	r3, r3, #7
 800a482:	4013      	ands	r3, r2
 800a484:	d016      	beq.n	800a4b4 <USB_ActivateEndpoint+0x508>
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	18d3      	adds	r3, r2, r3
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29a      	uxth	r2, r3
 800a494:	203e      	movs	r0, #62	@ 0x3e
 800a496:	183b      	adds	r3, r7, r0
 800a498:	4938      	ldr	r1, [pc, #224]	@ (800a57c <USB_ActivateEndpoint+0x5d0>)
 800a49a:	400a      	ands	r2, r1
 800a49c:	801a      	strh	r2, [r3, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	18d3      	adds	r3, r2, r3
 800a4a8:	183a      	adds	r2, r7, r0
 800a4aa:	8812      	ldrh	r2, [r2, #0]
 800a4ac:	4934      	ldr	r1, [pc, #208]	@ (800a580 <USB_ActivateEndpoint+0x5d4>)
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	18d2      	adds	r2, r2, r3
 800a4be:	213c      	movs	r1, #60	@ 0x3c
 800a4c0:	187b      	adds	r3, r7, r1
 800a4c2:	8812      	ldrh	r2, [r2, #0]
 800a4c4:	801a      	strh	r2, [r3, #0]
 800a4c6:	187b      	adds	r3, r7, r1
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	2240      	movs	r2, #64	@ 0x40
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	d016      	beq.n	800a4fe <USB_ActivateEndpoint+0x552>
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	18d3      	adds	r3, r2, r3
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	203a      	movs	r0, #58	@ 0x3a
 800a4e0:	183b      	adds	r3, r7, r0
 800a4e2:	4926      	ldr	r1, [pc, #152]	@ (800a57c <USB_ActivateEndpoint+0x5d0>)
 800a4e4:	400a      	ands	r2, r1
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	18d3      	adds	r3, r2, r3
 800a4f2:	183a      	adds	r2, r7, r0
 800a4f4:	8812      	ldrh	r2, [r2, #0]
 800a4f6:	4928      	ldr	r1, [pc, #160]	@ (800a598 <USB_ActivateEndpoint+0x5ec>)
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	18d3      	adds	r3, r2, r3
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	2038      	movs	r0, #56	@ 0x38
 800a50e:	183b      	adds	r3, r7, r0
 800a510:	491c      	ldr	r1, [pc, #112]	@ (800a584 <USB_ActivateEndpoint+0x5d8>)
 800a512:	400a      	ands	r2, r1
 800a514:	801a      	strh	r2, [r3, #0]
 800a516:	183b      	adds	r3, r7, r0
 800a518:	183a      	adds	r2, r7, r0
 800a51a:	8812      	ldrh	r2, [r2, #0]
 800a51c:	2180      	movs	r1, #128	@ 0x80
 800a51e:	0149      	lsls	r1, r1, #5
 800a520:	404a      	eors	r2, r1
 800a522:	801a      	strh	r2, [r3, #0]
 800a524:	183b      	adds	r3, r7, r0
 800a526:	183a      	adds	r2, r7, r0
 800a528:	8812      	ldrh	r2, [r2, #0]
 800a52a:	2180      	movs	r1, #128	@ 0x80
 800a52c:	0189      	lsls	r1, r1, #6
 800a52e:	404a      	eors	r2, r1
 800a530:	801a      	strh	r2, [r3, #0]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	18d3      	adds	r3, r2, r3
 800a53c:	183a      	adds	r2, r7, r0
 800a53e:	8812      	ldrh	r2, [r2, #0]
 800a540:	4911      	ldr	r1, [pc, #68]	@ (800a588 <USB_ActivateEndpoint+0x5dc>)
 800a542:	430a      	orrs	r2, r1
 800a544:	b292      	uxth	r2, r2
 800a546:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	18d3      	adds	r3, r2, r3
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b29a      	uxth	r2, r3
 800a556:	2036      	movs	r0, #54	@ 0x36
 800a558:	183b      	adds	r3, r7, r0
 800a55a:	4910      	ldr	r1, [pc, #64]	@ (800a59c <USB_ActivateEndpoint+0x5f0>)
 800a55c:	400a      	ands	r2, r1
 800a55e:	801a      	strh	r2, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	18d3      	adds	r3, r2, r3
 800a56a:	183a      	adds	r2, r7, r0
 800a56c:	8812      	ldrh	r2, [r2, #0]
 800a56e:	4906      	ldr	r1, [pc, #24]	@ (800a588 <USB_ActivateEndpoint+0x5dc>)
 800a570:	430a      	orrs	r2, r1
 800a572:	b292      	uxth	r2, r2
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	e0ae      	b.n	800a6d6 <USB_ActivateEndpoint+0x72a>
 800a578:	ffff8000 	.word	0xffff8000
 800a57c:	ffff8f8f 	.word	0xffff8f8f
 800a580:	ffffc080 	.word	0xffffc080
 800a584:	ffffbf8f 	.word	0xffffbf8f
 800a588:	ffff8080 	.word	0xffff8080
 800a58c:	ffff8180 	.word	0xffff8180
 800a590:	ffff8e8f 	.word	0xffff8e8f
 800a594:	00000404 	.word	0x00000404
 800a598:	ffff80c0 	.word	0xffff80c0
 800a59c:	ffff8fbf 	.word	0xffff8fbf
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	18d2      	adds	r2, r2, r3
 800b472:	214e      	movs	r1, #78	@ 0x4e
 800b474:	187b      	adds	r3, r7, r1
 800b476:	8812      	ldrh	r2, [r2, #0]
 800b478:	801a      	strh	r2, [r3, #0]
 800b47a:	187b      	adds	r3, r7, r1
 800b47c:	881a      	ldrh	r2, [r3, #0]
 800b47e:	2380      	movs	r3, #128	@ 0x80
 800b480:	01db      	lsls	r3, r3, #7
 800b482:	4013      	ands	r3, r2
 800b484:	d016      	beq.n	800b4b4 <USB_ActivateEndpoint+0x640>
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	18d3      	adds	r3, r2, r3
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	b29a      	uxth	r2, r3
 800b494:	204c      	movs	r0, #76	@ 0x4c
 800b496:	183b      	adds	r3, r7, r0
 800b498:	4944      	ldr	r1, [pc, #272]	@ (800b5ac <USB_ActivateEndpoint+0x738>)
 800b49a:	400a      	ands	r2, r1
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	18d3      	adds	r3, r2, r3
 800b4a8:	183a      	adds	r2, r7, r0
 800b4aa:	8812      	ldrh	r2, [r2, #0]
 800b4ac:	4940      	ldr	r1, [pc, #256]	@ (800b5b0 <USB_ActivateEndpoint+0x73c>)
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	b292      	uxth	r2, r2
 800b4b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	18d2      	adds	r2, r2, r3
 800b4be:	214a      	movs	r1, #74	@ 0x4a
 800b4c0:	187b      	adds	r3, r7, r1
 800b4c2:	8812      	ldrh	r2, [r2, #0]
 800b4c4:	801a      	strh	r2, [r3, #0]
 800b4c6:	187b      	adds	r3, r7, r1
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	2240      	movs	r2, #64	@ 0x40
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	d016      	beq.n	800b4fe <USB_ActivateEndpoint+0x68a>
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	18d3      	adds	r3, r2, r3
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	2048      	movs	r0, #72	@ 0x48
 800b4e0:	183b      	adds	r3, r7, r0
 800b4e2:	4932      	ldr	r1, [pc, #200]	@ (800b5ac <USB_ActivateEndpoint+0x738>)
 800b4e4:	400a      	ands	r2, r1
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	18d3      	adds	r3, r2, r3
 800b4f2:	183a      	adds	r2, r7, r0
 800b4f4:	8812      	ldrh	r2, [r2, #0]
 800b4f6:	492f      	ldr	r1, [pc, #188]	@ (800b5b4 <USB_ActivateEndpoint+0x740>)
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	b292      	uxth	r2, r2
 800b4fc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	78db      	ldrb	r3, [r3, #3]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d01d      	beq.n	800b542 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	18d3      	adds	r3, r2, r3
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	b29a      	uxth	r2, r3
 800b514:	2044      	movs	r0, #68	@ 0x44
 800b516:	183b      	adds	r3, r7, r0
 800b518:	4927      	ldr	r1, [pc, #156]	@ (800b5b8 <USB_ActivateEndpoint+0x744>)
 800b51a:	400a      	ands	r2, r1
 800b51c:	801a      	strh	r2, [r3, #0]
 800b51e:	183b      	adds	r3, r7, r0
 800b520:	183a      	adds	r2, r7, r0
 800b522:	8812      	ldrh	r2, [r2, #0]
 800b524:	2120      	movs	r1, #32
 800b526:	404a      	eors	r2, r1
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	18d3      	adds	r3, r2, r3
 800b534:	183a      	adds	r2, r7, r0
 800b536:	8812      	ldrh	r2, [r2, #0]
 800b538:	4920      	ldr	r1, [pc, #128]	@ (800b5bc <USB_ActivateEndpoint+0x748>)
 800b53a:	430a      	orrs	r2, r1
 800b53c:	b292      	uxth	r2, r2
 800b53e:	801a      	strh	r2, [r3, #0]
 800b540:	e016      	b.n	800b570 <USB_ActivateEndpoint+0x6fc>
=======
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	18d2      	adds	r2, r2, r3
 800a5aa:	214e      	movs	r1, #78	@ 0x4e
 800a5ac:	187b      	adds	r3, r7, r1
 800a5ae:	8812      	ldrh	r2, [r2, #0]
 800a5b0:	801a      	strh	r2, [r3, #0]
 800a5b2:	187b      	adds	r3, r7, r1
 800a5b4:	881a      	ldrh	r2, [r3, #0]
 800a5b6:	2380      	movs	r3, #128	@ 0x80
 800a5b8:	01db      	lsls	r3, r3, #7
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	d016      	beq.n	800a5ec <USB_ActivateEndpoint+0x640>
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	18d3      	adds	r3, r2, r3
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	204c      	movs	r0, #76	@ 0x4c
 800a5ce:	183b      	adds	r3, r7, r0
 800a5d0:	4944      	ldr	r1, [pc, #272]	@ (800a6e4 <USB_ActivateEndpoint+0x738>)
 800a5d2:	400a      	ands	r2, r1
 800a5d4:	801a      	strh	r2, [r3, #0]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	18d3      	adds	r3, r2, r3
 800a5e0:	183a      	adds	r2, r7, r0
 800a5e2:	8812      	ldrh	r2, [r2, #0]
 800a5e4:	4940      	ldr	r1, [pc, #256]	@ (800a6e8 <USB_ActivateEndpoint+0x73c>)
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	b292      	uxth	r2, r2
 800a5ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	18d2      	adds	r2, r2, r3
 800a5f6:	214a      	movs	r1, #74	@ 0x4a
 800a5f8:	187b      	adds	r3, r7, r1
 800a5fa:	8812      	ldrh	r2, [r2, #0]
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	187b      	adds	r3, r7, r1
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	2240      	movs	r2, #64	@ 0x40
 800a604:	4013      	ands	r3, r2
 800a606:	d016      	beq.n	800a636 <USB_ActivateEndpoint+0x68a>
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	18d3      	adds	r3, r2, r3
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29a      	uxth	r2, r3
 800a616:	2048      	movs	r0, #72	@ 0x48
 800a618:	183b      	adds	r3, r7, r0
 800a61a:	4932      	ldr	r1, [pc, #200]	@ (800a6e4 <USB_ActivateEndpoint+0x738>)
 800a61c:	400a      	ands	r2, r1
 800a61e:	801a      	strh	r2, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	18d3      	adds	r3, r2, r3
 800a62a:	183a      	adds	r2, r7, r0
 800a62c:	8812      	ldrh	r2, [r2, #0]
 800a62e:	492f      	ldr	r1, [pc, #188]	@ (800a6ec <USB_ActivateEndpoint+0x740>)
 800a630:	430a      	orrs	r2, r1
 800a632:	b292      	uxth	r2, r2
 800a634:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	78db      	ldrb	r3, [r3, #3]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d01d      	beq.n	800a67a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	18d3      	adds	r3, r2, r3
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	2044      	movs	r0, #68	@ 0x44
 800a64e:	183b      	adds	r3, r7, r0
 800a650:	4927      	ldr	r1, [pc, #156]	@ (800a6f0 <USB_ActivateEndpoint+0x744>)
 800a652:	400a      	ands	r2, r1
 800a654:	801a      	strh	r2, [r3, #0]
 800a656:	183b      	adds	r3, r7, r0
 800a658:	183a      	adds	r2, r7, r0
 800a65a:	8812      	ldrh	r2, [r2, #0]
 800a65c:	2120      	movs	r1, #32
 800a65e:	404a      	eors	r2, r1
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	18d3      	adds	r3, r2, r3
 800a66c:	183a      	adds	r2, r7, r0
 800a66e:	8812      	ldrh	r2, [r2, #0]
 800a670:	4920      	ldr	r1, [pc, #128]	@ (800a6f4 <USB_ActivateEndpoint+0x748>)
 800a672:	430a      	orrs	r2, r1
 800a674:	b292      	uxth	r2, r2
 800a676:	801a      	strh	r2, [r3, #0]
 800a678:	e016      	b.n	800a6a8 <USB_ActivateEndpoint+0x6fc>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	18d3      	adds	r3, r2, r3
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	b29a      	uxth	r2, r3
 800b550:	2046      	movs	r0, #70	@ 0x46
 800b552:	183b      	adds	r3, r7, r0
 800b554:	4918      	ldr	r1, [pc, #96]	@ (800b5b8 <USB_ActivateEndpoint+0x744>)
 800b556:	400a      	ands	r2, r1
 800b558:	801a      	strh	r2, [r3, #0]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	18d3      	adds	r3, r2, r3
 800b564:	183a      	adds	r2, r7, r0
 800b566:	8812      	ldrh	r2, [r2, #0]
 800b568:	4914      	ldr	r1, [pc, #80]	@ (800b5bc <USB_ActivateEndpoint+0x748>)
 800b56a:	430a      	orrs	r2, r1
 800b56c:	b292      	uxth	r2, r2
 800b56e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	18d3      	adds	r3, r2, r3
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	2042      	movs	r0, #66	@ 0x42
 800b580:	183b      	adds	r3, r7, r0
 800b582:	490f      	ldr	r1, [pc, #60]	@ (800b5c0 <USB_ActivateEndpoint+0x74c>)
 800b584:	400a      	ands	r2, r1
 800b586:	801a      	strh	r2, [r3, #0]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	18d3      	adds	r3, r2, r3
 800b592:	183a      	adds	r2, r7, r0
 800b594:	8812      	ldrh	r2, [r2, #0]
 800b596:	4909      	ldr	r1, [pc, #36]	@ (800b5bc <USB_ActivateEndpoint+0x748>)
 800b598:	430a      	orrs	r2, r1
 800b59a:	b292      	uxth	r2, r2
 800b59c:	801a      	strh	r2, [r3, #0]
=======
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	18d3      	adds	r3, r2, r3
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	b29a      	uxth	r2, r3
 800a688:	2046      	movs	r0, #70	@ 0x46
 800a68a:	183b      	adds	r3, r7, r0
 800a68c:	4918      	ldr	r1, [pc, #96]	@ (800a6f0 <USB_ActivateEndpoint+0x744>)
 800a68e:	400a      	ands	r2, r1
 800a690:	801a      	strh	r2, [r3, #0]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	183a      	adds	r2, r7, r0
 800a69e:	8812      	ldrh	r2, [r2, #0]
 800a6a0:	4914      	ldr	r1, [pc, #80]	@ (800a6f4 <USB_ActivateEndpoint+0x748>)
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	2042      	movs	r0, #66	@ 0x42
 800a6b8:	183b      	adds	r3, r7, r0
 800a6ba:	490f      	ldr	r1, [pc, #60]	@ (800a6f8 <USB_ActivateEndpoint+0x74c>)
 800a6bc:	400a      	ands	r2, r1
 800a6be:	801a      	strh	r2, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	18d3      	adds	r3, r2, r3
 800a6ca:	183a      	adds	r2, r7, r0
 800a6cc:	8812      	ldrh	r2, [r2, #0]
 800a6ce:	4909      	ldr	r1, [pc, #36]	@ (800a6f4 <USB_ActivateEndpoint+0x748>)
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	b292      	uxth	r2, r2
 800a6d4:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
<<<<<<< HEAD
 800b59e:	236f      	movs	r3, #111	@ 0x6f
 800b5a0:	18fb      	adds	r3, r7, r3
 800b5a2:	781b      	ldrb	r3, [r3, #0]
}
 800b5a4:	0018      	movs	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	b01c      	add	sp, #112	@ 0x70
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	ffff8f8f 	.word	0xffff8f8f
 800b5b0:	ffffc080 	.word	0xffffc080
 800b5b4:	ffff80c0 	.word	0xffff80c0
 800b5b8:	ffff8fbf 	.word	0xffff8fbf
 800b5bc:	ffff8080 	.word	0xffff8080
 800b5c0:	ffffbf8f 	.word	0xffffbf8f

0800b5c4 <USB_DeactivateEndpoint>:
=======
 800a6d6:	236f      	movs	r3, #111	@ 0x6f
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	781b      	ldrb	r3, [r3, #0]
}
 800a6dc:	0018      	movs	r0, r3
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	b01c      	add	sp, #112	@ 0x70
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	ffff8f8f 	.word	0xffff8f8f
 800a6e8:	ffffc080 	.word	0xffffc080
 800a6ec:	ffff80c0 	.word	0xffff80c0
 800a6f0:	ffff8fbf 	.word	0xffff8fbf
 800a6f4:	ffff8080 	.word	0xffff8080
 800a6f8:	ffffbf8f 	.word	0xffffbf8f

0800a6fc <USB_DeactivateEndpoint>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08c      	sub	sp, #48	@ 0x30
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	7b1b      	ldrb	r3, [r3, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d000      	beq.n	800b5d8 <USB_DeactivateEndpoint+0x14>
 800b5d6:	e07e      	b.n	800b6d6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d03c      	beq.n	800b65a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	18d2      	adds	r2, r2, r3
 800b5ea:	210c      	movs	r1, #12
 800b5ec:	187b      	adds	r3, r7, r1
 800b5ee:	8812      	ldrh	r2, [r2, #0]
 800b5f0:	801a      	strh	r2, [r3, #0]
 800b5f2:	187b      	adds	r3, r7, r1
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	2240      	movs	r2, #64	@ 0x40
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	d016      	beq.n	800b62a <USB_DeactivateEndpoint+0x66>
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	18d3      	adds	r3, r2, r3
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	b29a      	uxth	r2, r3
 800b60a:	200a      	movs	r0, #10
 800b60c:	183b      	adds	r3, r7, r0
 800b60e:	49c7      	ldr	r1, [pc, #796]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b610:	400a      	ands	r2, r1
 800b612:	801a      	strh	r2, [r3, #0]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	18d3      	adds	r3, r2, r3
 800b61e:	183a      	adds	r2, r7, r0
 800b620:	8812      	ldrh	r2, [r2, #0]
 800b622:	49c3      	ldr	r1, [pc, #780]	@ (800b930 <USB_DeactivateEndpoint+0x36c>)
 800b624:	430a      	orrs	r2, r1
 800b626:	b292      	uxth	r2, r2
 800b628:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	18d3      	adds	r3, r2, r3
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	b29a      	uxth	r2, r3
 800b638:	2008      	movs	r0, #8
 800b63a:	183b      	adds	r3, r7, r0
 800b63c:	49bd      	ldr	r1, [pc, #756]	@ (800b934 <USB_DeactivateEndpoint+0x370>)
 800b63e:	400a      	ands	r2, r1
 800b640:	801a      	strh	r2, [r3, #0]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	18d3      	adds	r3, r2, r3
 800b64c:	183a      	adds	r2, r7, r0
 800b64e:	8812      	ldrh	r2, [r2, #0]
 800b650:	49b9      	ldr	r1, [pc, #740]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b652:	430a      	orrs	r2, r1
 800b654:	b292      	uxth	r2, r2
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	e163      	b.n	800b922 <USB_DeactivateEndpoint+0x35e>
=======
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08c      	sub	sp, #48	@ 0x30
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	7b1b      	ldrb	r3, [r3, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d000      	beq.n	800a710 <USB_DeactivateEndpoint+0x14>
 800a70e:	e07e      	b.n	800a80e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d03c      	beq.n	800a792 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	18d2      	adds	r2, r2, r3
 800a722:	210c      	movs	r1, #12
 800a724:	187b      	adds	r3, r7, r1
 800a726:	8812      	ldrh	r2, [r2, #0]
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	187b      	adds	r3, r7, r1
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	2240      	movs	r2, #64	@ 0x40
 800a730:	4013      	ands	r3, r2
 800a732:	d016      	beq.n	800a762 <USB_DeactivateEndpoint+0x66>
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	18d3      	adds	r3, r2, r3
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29a      	uxth	r2, r3
 800a742:	200a      	movs	r0, #10
 800a744:	183b      	adds	r3, r7, r0
 800a746:	49c7      	ldr	r1, [pc, #796]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a748:	400a      	ands	r2, r1
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	18d3      	adds	r3, r2, r3
 800a756:	183a      	adds	r2, r7, r0
 800a758:	8812      	ldrh	r2, [r2, #0]
 800a75a:	49c3      	ldr	r1, [pc, #780]	@ (800aa68 <USB_DeactivateEndpoint+0x36c>)
 800a75c:	430a      	orrs	r2, r1
 800a75e:	b292      	uxth	r2, r2
 800a760:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	18d3      	adds	r3, r2, r3
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	b29a      	uxth	r2, r3
 800a770:	2008      	movs	r0, #8
 800a772:	183b      	adds	r3, r7, r0
 800a774:	49bd      	ldr	r1, [pc, #756]	@ (800aa6c <USB_DeactivateEndpoint+0x370>)
 800a776:	400a      	ands	r2, r1
 800a778:	801a      	strh	r2, [r3, #0]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	183a      	adds	r2, r7, r0
 800a786:	8812      	ldrh	r2, [r2, #0]
 800a788:	49b9      	ldr	r1, [pc, #740]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800a78a:	430a      	orrs	r2, r1
 800a78c:	b292      	uxth	r2, r2
 800a78e:	801a      	strh	r2, [r3, #0]
 800a790:	e163      	b.n	800aa5a <USB_DeactivateEndpoint+0x35e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	18d2      	adds	r2, r2, r3
 800b664:	2112      	movs	r1, #18
 800b666:	187b      	adds	r3, r7, r1
 800b668:	8812      	ldrh	r2, [r2, #0]
 800b66a:	801a      	strh	r2, [r3, #0]
 800b66c:	187b      	adds	r3, r7, r1
 800b66e:	881a      	ldrh	r2, [r3, #0]
 800b670:	2380      	movs	r3, #128	@ 0x80
 800b672:	01db      	lsls	r3, r3, #7
 800b674:	4013      	ands	r3, r2
 800b676:	d016      	beq.n	800b6a6 <USB_DeactivateEndpoint+0xe2>
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	18d3      	adds	r3, r2, r3
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	b29a      	uxth	r2, r3
 800b686:	2010      	movs	r0, #16
 800b688:	183b      	adds	r3, r7, r0
 800b68a:	49a8      	ldr	r1, [pc, #672]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b68c:	400a      	ands	r2, r1
 800b68e:	801a      	strh	r2, [r3, #0]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	18d3      	adds	r3, r2, r3
 800b69a:	183a      	adds	r2, r7, r0
 800b69c:	8812      	ldrh	r2, [r2, #0]
 800b69e:	49a7      	ldr	r1, [pc, #668]	@ (800b93c <USB_DeactivateEndpoint+0x378>)
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	18d3      	adds	r3, r2, r3
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	200e      	movs	r0, #14
 800b6b6:	183b      	adds	r3, r7, r0
 800b6b8:	49a1      	ldr	r1, [pc, #644]	@ (800b940 <USB_DeactivateEndpoint+0x37c>)
 800b6ba:	400a      	ands	r2, r1
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	18d3      	adds	r3, r2, r3
 800b6c8:	183a      	adds	r2, r7, r0
 800b6ca:	8812      	ldrh	r2, [r2, #0]
 800b6cc:	499a      	ldr	r1, [pc, #616]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	801a      	strh	r2, [r3, #0]
 800b6d4:	e125      	b.n	800b922 <USB_DeactivateEndpoint+0x35e>
=======
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	18d2      	adds	r2, r2, r3
 800a79c:	2112      	movs	r1, #18
 800a79e:	187b      	adds	r3, r7, r1
 800a7a0:	8812      	ldrh	r2, [r2, #0]
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	187b      	adds	r3, r7, r1
 800a7a6:	881a      	ldrh	r2, [r3, #0]
 800a7a8:	2380      	movs	r3, #128	@ 0x80
 800a7aa:	01db      	lsls	r3, r3, #7
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	d016      	beq.n	800a7de <USB_DeactivateEndpoint+0xe2>
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	18d3      	adds	r3, r2, r3
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	2010      	movs	r0, #16
 800a7c0:	183b      	adds	r3, r7, r0
 800a7c2:	49a8      	ldr	r1, [pc, #672]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a7c4:	400a      	ands	r2, r1
 800a7c6:	801a      	strh	r2, [r3, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	18d3      	adds	r3, r2, r3
 800a7d2:	183a      	adds	r2, r7, r0
 800a7d4:	8812      	ldrh	r2, [r2, #0]
 800a7d6:	49a7      	ldr	r1, [pc, #668]	@ (800aa74 <USB_DeactivateEndpoint+0x378>)
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	18d3      	adds	r3, r2, r3
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	200e      	movs	r0, #14
 800a7ee:	183b      	adds	r3, r7, r0
 800a7f0:	49a1      	ldr	r1, [pc, #644]	@ (800aa78 <USB_DeactivateEndpoint+0x37c>)
 800a7f2:	400a      	ands	r2, r1
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	18d3      	adds	r3, r2, r3
 800a800:	183a      	adds	r2, r7, r0
 800a802:	8812      	ldrh	r2, [r2, #0]
 800a804:	499a      	ldr	r1, [pc, #616]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800a806:	430a      	orrs	r2, r1
 800a808:	b292      	uxth	r2, r2
 800a80a:	801a      	strh	r2, [r3, #0]
 800a80c:	e125      	b.n	800aa5a <USB_DeactivateEndpoint+0x35e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
<<<<<<< HEAD
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	785b      	ldrb	r3, [r3, #1]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d000      	beq.n	800b6e0 <USB_DeactivateEndpoint+0x11c>
 800b6de:	e090      	b.n	800b802 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	18d2      	adds	r2, r2, r3
 800b6ea:	2120      	movs	r1, #32
 800b6ec:	187b      	adds	r3, r7, r1
 800b6ee:	8812      	ldrh	r2, [r2, #0]
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	187b      	adds	r3, r7, r1
 800b6f4:	881a      	ldrh	r2, [r3, #0]
 800b6f6:	2380      	movs	r3, #128	@ 0x80
 800b6f8:	01db      	lsls	r3, r3, #7
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	d016      	beq.n	800b72c <USB_DeactivateEndpoint+0x168>
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	18d3      	adds	r3, r2, r3
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	201e      	movs	r0, #30
 800b70e:	183b      	adds	r3, r7, r0
 800b710:	4986      	ldr	r1, [pc, #536]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b712:	400a      	ands	r2, r1
 800b714:	801a      	strh	r2, [r3, #0]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	18d3      	adds	r3, r2, r3
 800b720:	183a      	adds	r2, r7, r0
 800b722:	8812      	ldrh	r2, [r2, #0]
 800b724:	4985      	ldr	r1, [pc, #532]	@ (800b93c <USB_DeactivateEndpoint+0x378>)
 800b726:	430a      	orrs	r2, r1
 800b728:	b292      	uxth	r2, r2
 800b72a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	18d2      	adds	r2, r2, r3
 800b736:	211c      	movs	r1, #28
 800b738:	187b      	adds	r3, r7, r1
 800b73a:	8812      	ldrh	r2, [r2, #0]
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	187b      	adds	r3, r7, r1
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	2240      	movs	r2, #64	@ 0x40
 800b744:	4013      	ands	r3, r2
 800b746:	d016      	beq.n	800b776 <USB_DeactivateEndpoint+0x1b2>
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	18d3      	adds	r3, r2, r3
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	b29a      	uxth	r2, r3
 800b756:	201a      	movs	r0, #26
 800b758:	183b      	adds	r3, r7, r0
 800b75a:	4974      	ldr	r1, [pc, #464]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b75c:	400a      	ands	r2, r1
 800b75e:	801a      	strh	r2, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	18d3      	adds	r3, r2, r3
 800b76a:	183a      	adds	r2, r7, r0
 800b76c:	8812      	ldrh	r2, [r2, #0]
 800b76e:	4970      	ldr	r1, [pc, #448]	@ (800b930 <USB_DeactivateEndpoint+0x36c>)
 800b770:	430a      	orrs	r2, r1
 800b772:	b292      	uxth	r2, r2
 800b774:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	18d3      	adds	r3, r2, r3
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29a      	uxth	r2, r3
 800b784:	2018      	movs	r0, #24
 800b786:	183b      	adds	r3, r7, r0
 800b788:	4968      	ldr	r1, [pc, #416]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b78a:	400a      	ands	r2, r1
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	18d3      	adds	r3, r2, r3
 800b798:	183a      	adds	r2, r7, r0
 800b79a:	8812      	ldrh	r2, [r2, #0]
 800b79c:	4964      	ldr	r1, [pc, #400]	@ (800b930 <USB_DeactivateEndpoint+0x36c>)
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	b292      	uxth	r2, r2
 800b7a2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	18d3      	adds	r3, r2, r3
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	2016      	movs	r0, #22
 800b7b4:	183b      	adds	r3, r7, r0
 800b7b6:	4962      	ldr	r1, [pc, #392]	@ (800b940 <USB_DeactivateEndpoint+0x37c>)
 800b7b8:	400a      	ands	r2, r1
 800b7ba:	801a      	strh	r2, [r3, #0]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	18d3      	adds	r3, r2, r3
 800b7c6:	183a      	adds	r2, r7, r0
 800b7c8:	8812      	ldrh	r2, [r2, #0]
 800b7ca:	495b      	ldr	r1, [pc, #364]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	b292      	uxth	r2, r2
 800b7d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	18d3      	adds	r3, r2, r3
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	2014      	movs	r0, #20
 800b7e2:	183b      	adds	r3, r7, r0
 800b7e4:	4953      	ldr	r1, [pc, #332]	@ (800b934 <USB_DeactivateEndpoint+0x370>)
 800b7e6:	400a      	ands	r2, r1
 800b7e8:	801a      	strh	r2, [r3, #0]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	18d3      	adds	r3, r2, r3
 800b7f4:	183a      	adds	r2, r7, r0
 800b7f6:	8812      	ldrh	r2, [r2, #0]
 800b7f8:	494f      	ldr	r1, [pc, #316]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	801a      	strh	r2, [r3, #0]
 800b800:	e08f      	b.n	800b922 <USB_DeactivateEndpoint+0x35e>
=======
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	785b      	ldrb	r3, [r3, #1]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d000      	beq.n	800a818 <USB_DeactivateEndpoint+0x11c>
 800a816:	e090      	b.n	800a93a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	18d2      	adds	r2, r2, r3
 800a822:	2120      	movs	r1, #32
 800a824:	187b      	adds	r3, r7, r1
 800a826:	8812      	ldrh	r2, [r2, #0]
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	187b      	adds	r3, r7, r1
 800a82c:	881a      	ldrh	r2, [r3, #0]
 800a82e:	2380      	movs	r3, #128	@ 0x80
 800a830:	01db      	lsls	r3, r3, #7
 800a832:	4013      	ands	r3, r2
 800a834:	d016      	beq.n	800a864 <USB_DeactivateEndpoint+0x168>
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	18d3      	adds	r3, r2, r3
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	b29a      	uxth	r2, r3
 800a844:	201e      	movs	r0, #30
 800a846:	183b      	adds	r3, r7, r0
 800a848:	4986      	ldr	r1, [pc, #536]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a84a:	400a      	ands	r2, r1
 800a84c:	801a      	strh	r2, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	18d3      	adds	r3, r2, r3
 800a858:	183a      	adds	r2, r7, r0
 800a85a:	8812      	ldrh	r2, [r2, #0]
 800a85c:	4985      	ldr	r1, [pc, #532]	@ (800aa74 <USB_DeactivateEndpoint+0x378>)
 800a85e:	430a      	orrs	r2, r1
 800a860:	b292      	uxth	r2, r2
 800a862:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	18d2      	adds	r2, r2, r3
 800a86e:	211c      	movs	r1, #28
 800a870:	187b      	adds	r3, r7, r1
 800a872:	8812      	ldrh	r2, [r2, #0]
 800a874:	801a      	strh	r2, [r3, #0]
 800a876:	187b      	adds	r3, r7, r1
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	2240      	movs	r2, #64	@ 0x40
 800a87c:	4013      	ands	r3, r2
 800a87e:	d016      	beq.n	800a8ae <USB_DeactivateEndpoint+0x1b2>
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	18d3      	adds	r3, r2, r3
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	201a      	movs	r0, #26
 800a890:	183b      	adds	r3, r7, r0
 800a892:	4974      	ldr	r1, [pc, #464]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a894:	400a      	ands	r2, r1
 800a896:	801a      	strh	r2, [r3, #0]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	18d3      	adds	r3, r2, r3
 800a8a2:	183a      	adds	r2, r7, r0
 800a8a4:	8812      	ldrh	r2, [r2, #0]
 800a8a6:	4970      	ldr	r1, [pc, #448]	@ (800aa68 <USB_DeactivateEndpoint+0x36c>)
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	b292      	uxth	r2, r2
 800a8ac:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	18d3      	adds	r3, r2, r3
 800a8b8:	881b      	ldrh	r3, [r3, #0]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	2018      	movs	r0, #24
 800a8be:	183b      	adds	r3, r7, r0
 800a8c0:	4968      	ldr	r1, [pc, #416]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a8c2:	400a      	ands	r2, r1
 800a8c4:	801a      	strh	r2, [r3, #0]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	18d3      	adds	r3, r2, r3
 800a8d0:	183a      	adds	r2, r7, r0
 800a8d2:	8812      	ldrh	r2, [r2, #0]
 800a8d4:	4964      	ldr	r1, [pc, #400]	@ (800aa68 <USB_DeactivateEndpoint+0x36c>)
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	b292      	uxth	r2, r2
 800a8da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	18d3      	adds	r3, r2, r3
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	2016      	movs	r0, #22
 800a8ec:	183b      	adds	r3, r7, r0
 800a8ee:	4962      	ldr	r1, [pc, #392]	@ (800aa78 <USB_DeactivateEndpoint+0x37c>)
 800a8f0:	400a      	ands	r2, r1
 800a8f2:	801a      	strh	r2, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	18d3      	adds	r3, r2, r3
 800a8fe:	183a      	adds	r2, r7, r0
 800a900:	8812      	ldrh	r2, [r2, #0]
 800a902:	495b      	ldr	r1, [pc, #364]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800a904:	430a      	orrs	r2, r1
 800a906:	b292      	uxth	r2, r2
 800a908:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	18d3      	adds	r3, r2, r3
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	b29a      	uxth	r2, r3
 800a918:	2014      	movs	r0, #20
 800a91a:	183b      	adds	r3, r7, r0
 800a91c:	4953      	ldr	r1, [pc, #332]	@ (800aa6c <USB_DeactivateEndpoint+0x370>)
 800a91e:	400a      	ands	r2, r1
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	18d3      	adds	r3, r2, r3
 800a92c:	183a      	adds	r2, r7, r0
 800a92e:	8812      	ldrh	r2, [r2, #0]
 800a930:	494f      	ldr	r1, [pc, #316]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800a932:	430a      	orrs	r2, r1
 800a934:	b292      	uxth	r2, r2
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e08f      	b.n	800aa5a <USB_DeactivateEndpoint+0x35e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	18d2      	adds	r2, r2, r3
 800b80c:	212e      	movs	r1, #46	@ 0x2e
 800b80e:	187b      	adds	r3, r7, r1
 800b810:	8812      	ldrh	r2, [r2, #0]
 800b812:	801a      	strh	r2, [r3, #0]
 800b814:	187b      	adds	r3, r7, r1
 800b816:	881a      	ldrh	r2, [r3, #0]
 800b818:	2380      	movs	r3, #128	@ 0x80
 800b81a:	01db      	lsls	r3, r3, #7
 800b81c:	4013      	ands	r3, r2
 800b81e:	d016      	beq.n	800b84e <USB_DeactivateEndpoint+0x28a>
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	18d3      	adds	r3, r2, r3
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	202c      	movs	r0, #44	@ 0x2c
 800b830:	183b      	adds	r3, r7, r0
 800b832:	493e      	ldr	r1, [pc, #248]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b834:	400a      	ands	r2, r1
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	18d3      	adds	r3, r2, r3
 800b842:	183a      	adds	r2, r7, r0
 800b844:	8812      	ldrh	r2, [r2, #0]
 800b846:	493d      	ldr	r1, [pc, #244]	@ (800b93c <USB_DeactivateEndpoint+0x378>)
 800b848:	430a      	orrs	r2, r1
 800b84a:	b292      	uxth	r2, r2
 800b84c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	18d2      	adds	r2, r2, r3
 800b858:	212a      	movs	r1, #42	@ 0x2a
 800b85a:	187b      	adds	r3, r7, r1
 800b85c:	8812      	ldrh	r2, [r2, #0]
 800b85e:	801a      	strh	r2, [r3, #0]
 800b860:	187b      	adds	r3, r7, r1
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	2240      	movs	r2, #64	@ 0x40
 800b866:	4013      	ands	r3, r2
 800b868:	d016      	beq.n	800b898 <USB_DeactivateEndpoint+0x2d4>
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	18d3      	adds	r3, r2, r3
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	b29a      	uxth	r2, r3
 800b878:	2028      	movs	r0, #40	@ 0x28
 800b87a:	183b      	adds	r3, r7, r0
 800b87c:	492b      	ldr	r1, [pc, #172]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b87e:	400a      	ands	r2, r1
 800b880:	801a      	strh	r2, [r3, #0]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	18d3      	adds	r3, r2, r3
 800b88c:	183a      	adds	r2, r7, r0
 800b88e:	8812      	ldrh	r2, [r2, #0]
 800b890:	4927      	ldr	r1, [pc, #156]	@ (800b930 <USB_DeactivateEndpoint+0x36c>)
 800b892:	430a      	orrs	r2, r1
 800b894:	b292      	uxth	r2, r2
 800b896:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	18d3      	adds	r3, r2, r3
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	2026      	movs	r0, #38	@ 0x26
 800b8a8:	183b      	adds	r3, r7, r0
 800b8aa:	4920      	ldr	r1, [pc, #128]	@ (800b92c <USB_DeactivateEndpoint+0x368>)
 800b8ac:	400a      	ands	r2, r1
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	18d3      	adds	r3, r2, r3
 800b8ba:	183a      	adds	r2, r7, r0
 800b8bc:	8812      	ldrh	r2, [r2, #0]
 800b8be:	491f      	ldr	r1, [pc, #124]	@ (800b93c <USB_DeactivateEndpoint+0x378>)
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	b292      	uxth	r2, r2
 800b8c4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	18d3      	adds	r3, r2, r3
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	2024      	movs	r0, #36	@ 0x24
 800b8d6:	183b      	adds	r3, r7, r0
 800b8d8:	4916      	ldr	r1, [pc, #88]	@ (800b934 <USB_DeactivateEndpoint+0x370>)
 800b8da:	400a      	ands	r2, r1
 800b8dc:	801a      	strh	r2, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	18d3      	adds	r3, r2, r3
 800b8e8:	183a      	adds	r2, r7, r0
 800b8ea:	8812      	ldrh	r2, [r2, #0]
 800b8ec:	4912      	ldr	r1, [pc, #72]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	18d3      	adds	r3, r2, r3
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	b29a      	uxth	r2, r3
 800b902:	2022      	movs	r0, #34	@ 0x22
 800b904:	183b      	adds	r3, r7, r0
 800b906:	490e      	ldr	r1, [pc, #56]	@ (800b940 <USB_DeactivateEndpoint+0x37c>)
 800b908:	400a      	ands	r2, r1
 800b90a:	801a      	strh	r2, [r3, #0]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	18d3      	adds	r3, r2, r3
 800b916:	183a      	adds	r2, r7, r0
 800b918:	8812      	ldrh	r2, [r2, #0]
 800b91a:	4907      	ldr	r1, [pc, #28]	@ (800b938 <USB_DeactivateEndpoint+0x374>)
 800b91c:	430a      	orrs	r2, r1
 800b91e:	b292      	uxth	r2, r2
 800b920:	801a      	strh	r2, [r3, #0]
=======
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	18d2      	adds	r2, r2, r3
 800a944:	212e      	movs	r1, #46	@ 0x2e
 800a946:	187b      	adds	r3, r7, r1
 800a948:	8812      	ldrh	r2, [r2, #0]
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	187b      	adds	r3, r7, r1
 800a94e:	881a      	ldrh	r2, [r3, #0]
 800a950:	2380      	movs	r3, #128	@ 0x80
 800a952:	01db      	lsls	r3, r3, #7
 800a954:	4013      	ands	r3, r2
 800a956:	d016      	beq.n	800a986 <USB_DeactivateEndpoint+0x28a>
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	18d3      	adds	r3, r2, r3
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29a      	uxth	r2, r3
 800a966:	202c      	movs	r0, #44	@ 0x2c
 800a968:	183b      	adds	r3, r7, r0
 800a96a:	493e      	ldr	r1, [pc, #248]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a96c:	400a      	ands	r2, r1
 800a96e:	801a      	strh	r2, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	18d3      	adds	r3, r2, r3
 800a97a:	183a      	adds	r2, r7, r0
 800a97c:	8812      	ldrh	r2, [r2, #0]
 800a97e:	493d      	ldr	r1, [pc, #244]	@ (800aa74 <USB_DeactivateEndpoint+0x378>)
 800a980:	430a      	orrs	r2, r1
 800a982:	b292      	uxth	r2, r2
 800a984:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	18d2      	adds	r2, r2, r3
 800a990:	212a      	movs	r1, #42	@ 0x2a
 800a992:	187b      	adds	r3, r7, r1
 800a994:	8812      	ldrh	r2, [r2, #0]
 800a996:	801a      	strh	r2, [r3, #0]
 800a998:	187b      	adds	r3, r7, r1
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	2240      	movs	r2, #64	@ 0x40
 800a99e:	4013      	ands	r3, r2
 800a9a0:	d016      	beq.n	800a9d0 <USB_DeactivateEndpoint+0x2d4>
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	18d3      	adds	r3, r2, r3
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	2028      	movs	r0, #40	@ 0x28
 800a9b2:	183b      	adds	r3, r7, r0
 800a9b4:	492b      	ldr	r1, [pc, #172]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a9b6:	400a      	ands	r2, r1
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	18d3      	adds	r3, r2, r3
 800a9c4:	183a      	adds	r2, r7, r0
 800a9c6:	8812      	ldrh	r2, [r2, #0]
 800a9c8:	4927      	ldr	r1, [pc, #156]	@ (800aa68 <USB_DeactivateEndpoint+0x36c>)
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	b292      	uxth	r2, r2
 800a9ce:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	18d3      	adds	r3, r2, r3
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	2026      	movs	r0, #38	@ 0x26
 800a9e0:	183b      	adds	r3, r7, r0
 800a9e2:	4920      	ldr	r1, [pc, #128]	@ (800aa64 <USB_DeactivateEndpoint+0x368>)
 800a9e4:	400a      	ands	r2, r1
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	18d3      	adds	r3, r2, r3
 800a9f2:	183a      	adds	r2, r7, r0
 800a9f4:	8812      	ldrh	r2, [r2, #0]
 800a9f6:	491f      	ldr	r1, [pc, #124]	@ (800aa74 <USB_DeactivateEndpoint+0x378>)
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	b292      	uxth	r2, r2
 800a9fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	18d3      	adds	r3, r2, r3
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	2024      	movs	r0, #36	@ 0x24
 800aa0e:	183b      	adds	r3, r7, r0
 800aa10:	4916      	ldr	r1, [pc, #88]	@ (800aa6c <USB_DeactivateEndpoint+0x370>)
 800aa12:	400a      	ands	r2, r1
 800aa14:	801a      	strh	r2, [r3, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	18d3      	adds	r3, r2, r3
 800aa20:	183a      	adds	r2, r7, r0
 800aa22:	8812      	ldrh	r2, [r2, #0]
 800aa24:	4912      	ldr	r1, [pc, #72]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800aa26:	430a      	orrs	r2, r1
 800aa28:	b292      	uxth	r2, r2
 800aa2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	18d3      	adds	r3, r2, r3
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	2022      	movs	r0, #34	@ 0x22
 800aa3c:	183b      	adds	r3, r7, r0
 800aa3e:	490e      	ldr	r1, [pc, #56]	@ (800aa78 <USB_DeactivateEndpoint+0x37c>)
 800aa40:	400a      	ands	r2, r1
 800aa42:	801a      	strh	r2, [r3, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	18d3      	adds	r3, r2, r3
 800aa4e:	183a      	adds	r2, r7, r0
 800aa50:	8812      	ldrh	r2, [r2, #0]
 800aa52:	4907      	ldr	r1, [pc, #28]	@ (800aa70 <USB_DeactivateEndpoint+0x374>)
 800aa54:	430a      	orrs	r2, r1
 800aa56:	b292      	uxth	r2, r2
 800aa58:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 800b922:	2300      	movs	r3, #0
}
 800b924:	0018      	movs	r0, r3
 800b926:	46bd      	mov	sp, r7
 800b928:	b00c      	add	sp, #48	@ 0x30
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	ffff8f8f 	.word	0xffff8f8f
 800b930:	ffff80c0 	.word	0xffff80c0
 800b934:	ffff8fbf 	.word	0xffff8fbf
 800b938:	ffff8080 	.word	0xffff8080
 800b93c:	ffffc080 	.word	0xffffc080
 800b940:	ffffbf8f 	.word	0xffffbf8f

0800b944 <USB_EPStartXfer>:
=======
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	b00c      	add	sp, #48	@ 0x30
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	ffff8f8f 	.word	0xffff8f8f
 800aa68:	ffff80c0 	.word	0xffff80c0
 800aa6c:	ffff8fbf 	.word	0xffff8fbf
 800aa70:	ffff8080 	.word	0xffff8080
 800aa74:	ffffc080 	.word	0xffffc080
 800aa78:	ffffbf8f 	.word	0xffffbf8f

0800aa7c <USB_EPStartXfer>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800b944:	b590      	push	{r4, r7, lr}
 800b946:	b0c3      	sub	sp, #268	@ 0x10c
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
=======
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b0c3      	sub	sp, #268	@ 0x10c
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	785b      	ldrb	r3, [r3, #1]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d001      	beq.n	800b95a <USB_EPStartXfer+0x16>
 800b956:	f000 fd2d 	bl	800c3b4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	699a      	ldr	r2, [r3, #24]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	429a      	cmp	r2, r3
 800b964:	d905      	bls.n	800b972 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	1d7a      	adds	r2, r7, #5
 800b96c:	32ff      	adds	r2, #255	@ 0xff
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	e004      	b.n	800b97c <USB_EPStartXfer+0x38>
=======
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d001      	beq.n	800aa92 <USB_EPStartXfer+0x16>
 800aa8e:	f000 fd2d 	bl	800b4ec <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d905      	bls.n	800aaaa <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	1d7a      	adds	r2, r7, #5
 800aaa4:	32ff      	adds	r2, #255	@ 0xff
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	e004      	b.n	800aab4 <USB_EPStartXfer+0x38>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< HEAD
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	1d7a      	adds	r2, r7, #5
 800b978:	32ff      	adds	r2, #255	@ 0xff
 800b97a:	6013      	str	r3, [r2, #0]
=======
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	1d7a      	adds	r2, r7, #5
 800aab0:	32ff      	adds	r2, #255	@ 0xff
 800aab2:	6013      	str	r3, [r2, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	7b1b      	ldrb	r3, [r3, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d125      	bne.n	800b9d0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6959      	ldr	r1, [r3, #20]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	88da      	ldrh	r2, [r3, #6]
 800b98c:	1d7b      	adds	r3, r7, #5
 800b98e:	33ff      	adds	r3, #255	@ 0xff
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 fa3f 	bl	800ce18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	613b      	str	r3, [r7, #16]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2250      	movs	r2, #80	@ 0x50
 800b9a2:	5a9b      	ldrh	r3, [r3, r2]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	001a      	movs	r2, r3
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	189b      	adds	r3, r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	00da      	lsls	r2, r3, #3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	18d3      	adds	r3, r2, r3
 800b9b8:	4ad7      	ldr	r2, [pc, #860]	@ (800bd18 <USB_EPStartXfer+0x3d4>)
 800b9ba:	4694      	mov	ip, r2
 800b9bc:	4463      	add	r3, ip
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	1d7b      	adds	r3, r7, #5
 800b9c2:	33ff      	adds	r3, #255	@ 0xff
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	801a      	strh	r2, [r3, #0]
 800b9cc:	f000 fccd 	bl	800c36a <USB_EPStartXfer+0xa26>
=======
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	7b1b      	ldrb	r3, [r3, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d125      	bne.n	800ab08 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	6959      	ldr	r1, [r3, #20]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	88da      	ldrh	r2, [r3, #6]
 800aac4:	1d7b      	adds	r3, r7, #5
 800aac6:	33ff      	adds	r3, #255	@ 0xff
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fa3f 	bl	800bf50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2250      	movs	r2, #80	@ 0x50
 800aada:	5a9b      	ldrh	r3, [r3, r2]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	001a      	movs	r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	189b      	adds	r3, r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	00da      	lsls	r2, r3, #3
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	18d3      	adds	r3, r2, r3
 800aaf0:	4ad7      	ldr	r2, [pc, #860]	@ (800ae50 <USB_EPStartXfer+0x3d4>)
 800aaf2:	4694      	mov	ip, r2
 800aaf4:	4463      	add	r3, ip
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	1d7b      	adds	r3, r7, #5
 800aafa:	33ff      	adds	r3, #255	@ 0xff
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	801a      	strh	r2, [r3, #0]
 800ab04:	f000 fccd 	bl	800b4a2 <USB_EPStartXfer+0xa26>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d000      	beq.n	800b9da <USB_EPStartXfer+0x96>
 800b9d8:	e362      	b.n	800c0a0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	6a1a      	ldr	r2, [r3, #32]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d800      	bhi.n	800b9e8 <USB_EPStartXfer+0xa4>
 800b9e6:	e309      	b.n	800bffc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	18d3      	adds	r3, r2, r3
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	2056      	movs	r0, #86	@ 0x56
 800b9f8:	183b      	adds	r3, r7, r0
 800b9fa:	49c8      	ldr	r1, [pc, #800]	@ (800bd1c <USB_EPStartXfer+0x3d8>)
 800b9fc:	400a      	ands	r2, r1
 800b9fe:	801a      	strh	r2, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	18d3      	adds	r3, r2, r3
 800ba0a:	183a      	adds	r2, r7, r0
 800ba0c:	8812      	ldrh	r2, [r2, #0]
 800ba0e:	49c4      	ldr	r1, [pc, #784]	@ (800bd20 <USB_EPStartXfer+0x3dc>)
 800ba10:	430a      	orrs	r2, r1
 800ba12:	b292      	uxth	r2, r2
 800ba14:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	6a1a      	ldr	r2, [r3, #32]
 800ba1a:	1d7b      	adds	r3, r7, #5
 800ba1c:	33ff      	adds	r3, #255	@ 0xff
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	1ad2      	subs	r2, r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	18d3      	adds	r3, r2, r3
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	001a      	movs	r2, r3
 800ba36:	2340      	movs	r3, #64	@ 0x40
 800ba38:	4013      	ands	r3, r2
 800ba3a:	d100      	bne.n	800ba3e <USB_EPStartXfer+0xfa>
 800ba3c:	e176      	b.n	800bd2c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	785b      	ldrb	r3, [r3, #1]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d000      	beq.n	800ba4c <USB_EPStartXfer+0x108>
 800ba4a:	e074      	b.n	800bb36 <USB_EPStartXfer+0x1f2>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2250      	movs	r2, #80	@ 0x50
 800ba54:	5a9b      	ldrh	r3, [r3, r2]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	001a      	movs	r2, r3
 800ba5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5c:	189b      	adds	r3, r3, r2
 800ba5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	00da      	lsls	r2, r3, #3
 800ba66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba68:	18d3      	adds	r3, r2, r3
 800ba6a:	4aae      	ldr	r2, [pc, #696]	@ (800bd24 <USB_EPStartXfer+0x3e0>)
 800ba6c:	4694      	mov	ip, r2
 800ba6e:	4463      	add	r3, ip
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	059b      	lsls	r3, r3, #22
 800ba7a:	0d9b      	lsrs	r3, r3, #22
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	801a      	strh	r2, [r3, #0]
 800ba82:	1d7b      	adds	r3, r7, #5
 800ba84:	33ff      	adds	r3, #255	@ 0xff
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d108      	bne.n	800ba9e <USB_EPStartXfer+0x15a>
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4aa5      	ldr	r2, [pc, #660]	@ (800bd28 <USB_EPStartXfer+0x3e4>)
 800ba94:	4313      	orrs	r3, r2
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	801a      	strh	r2, [r3, #0]
 800ba9c:	e066      	b.n	800bb6c <USB_EPStartXfer+0x228>
 800ba9e:	1d7b      	adds	r3, r7, #5
 800baa0:	33ff      	adds	r3, #255	@ 0xff
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b3e      	cmp	r3, #62	@ 0x3e
 800baa6:	d821      	bhi.n	800baec <USB_EPStartXfer+0x1a8>
 800baa8:	1d7b      	adds	r3, r7, #5
 800baaa:	33ff      	adds	r3, #255	@ 0xff
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	085b      	lsrs	r3, r3, #1
 800bab0:	1c7a      	adds	r2, r7, #1
 800bab2:	32ff      	adds	r2, #255	@ 0xff
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	1d7b      	adds	r3, r7, #5
 800bab8:	33ff      	adds	r3, #255	@ 0xff
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2201      	movs	r2, #1
 800babe:	4013      	ands	r3, r2
 800bac0:	d006      	beq.n	800bad0 <USB_EPStartXfer+0x18c>
 800bac2:	1c7b      	adds	r3, r7, #1
 800bac4:	33ff      	adds	r3, #255	@ 0xff
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	1c7a      	adds	r2, r7, #1
 800bacc:	32ff      	adds	r2, #255	@ 0xff
 800bace:	6013      	str	r3, [r2, #0]
 800bad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	1c7b      	adds	r3, r7, #1
 800bad8:	33ff      	adds	r3, #255	@ 0xff
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	029b      	lsls	r3, r3, #10
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	4313      	orrs	r3, r2
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae8:	801a      	strh	r2, [r3, #0]
 800baea:	e03f      	b.n	800bb6c <USB_EPStartXfer+0x228>
 800baec:	1d7b      	adds	r3, r7, #5
 800baee:	33ff      	adds	r3, #255	@ 0xff
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	095b      	lsrs	r3, r3, #5
 800baf4:	1c7a      	adds	r2, r7, #1
 800baf6:	32ff      	adds	r2, #255	@ 0xff
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	1d7b      	adds	r3, r7, #5
 800bafc:	33ff      	adds	r3, #255	@ 0xff
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	221f      	movs	r2, #31
 800bb02:	4013      	ands	r3, r2
 800bb04:	d106      	bne.n	800bb14 <USB_EPStartXfer+0x1d0>
 800bb06:	1c7b      	adds	r3, r7, #1
 800bb08:	33ff      	adds	r3, #255	@ 0xff
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	1c7a      	adds	r2, r7, #1
 800bb10:	32ff      	adds	r2, #255	@ 0xff
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	1c7b      	adds	r3, r7, #1
 800bb1c:	33ff      	adds	r3, #255	@ 0xff
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	029b      	lsls	r3, r3, #10
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	4313      	orrs	r3, r2
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	4a7f      	ldr	r2, [pc, #508]	@ (800bd28 <USB_EPStartXfer+0x3e4>)
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	801a      	strh	r2, [r3, #0]
 800bb34:	e01a      	b.n	800bb6c <USB_EPStartXfer+0x228>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	785b      	ldrb	r3, [r3, #1]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d116      	bne.n	800bb6c <USB_EPStartXfer+0x228>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2250      	movs	r2, #80	@ 0x50
 800bb42:	5a9b      	ldrh	r3, [r3, r2]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	001a      	movs	r2, r3
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	189b      	adds	r3, r3, r2
 800bb4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	00da      	lsls	r2, r3, #3
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	18d3      	adds	r3, r2, r3
 800bb58:	4a72      	ldr	r2, [pc, #456]	@ (800bd24 <USB_EPStartXfer+0x3e0>)
 800bb5a:	4694      	mov	ip, r2
 800bb5c:	4463      	add	r3, ip
 800bb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb60:	1d7b      	adds	r3, r7, #5
 800bb62:	33ff      	adds	r3, #255	@ 0xff
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb6c:	2076      	movs	r0, #118	@ 0x76
 800bb6e:	183b      	adds	r3, r7, r0
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	8952      	ldrh	r2, [r2, #10]
 800bb74:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	6959      	ldr	r1, [r3, #20]
 800bb7a:	1d7b      	adds	r3, r7, #5
 800bb7c:	33ff      	adds	r3, #255	@ 0xff
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	b29c      	uxth	r4, r3
 800bb82:	183b      	adds	r3, r7, r0
 800bb84:	881a      	ldrh	r2, [r3, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	0023      	movs	r3, r4
 800bb8a:	f001 f945 	bl	800ce18 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	695a      	ldr	r2, [r3, #20]
 800bb92:	1d7b      	adds	r3, r7, #5
 800bb94:	33ff      	adds	r3, #255	@ 0xff
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	18d2      	adds	r2, r2, r3
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	6a1a      	ldr	r2, [r3, #32]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d908      	bls.n	800bbbc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6a1a      	ldr	r2, [r3, #32]
 800bbae:	1d7b      	adds	r3, r7, #5
 800bbb0:	33ff      	adds	r3, #255	@ 0xff
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	621a      	str	r2, [r3, #32]
 800bbba:	e007      	b.n	800bbcc <USB_EPStartXfer+0x288>
=======
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	78db      	ldrb	r3, [r3, #3]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d000      	beq.n	800ab12 <USB_EPStartXfer+0x96>
 800ab10:	e362      	b.n	800b1d8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	6a1a      	ldr	r2, [r3, #32]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d800      	bhi.n	800ab20 <USB_EPStartXfer+0xa4>
 800ab1e:	e309      	b.n	800b134 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	18d3      	adds	r3, r2, r3
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	2056      	movs	r0, #86	@ 0x56
 800ab30:	183b      	adds	r3, r7, r0
 800ab32:	49c8      	ldr	r1, [pc, #800]	@ (800ae54 <USB_EPStartXfer+0x3d8>)
 800ab34:	400a      	ands	r2, r1
 800ab36:	801a      	strh	r2, [r3, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	18d3      	adds	r3, r2, r3
 800ab42:	183a      	adds	r2, r7, r0
 800ab44:	8812      	ldrh	r2, [r2, #0]
 800ab46:	49c4      	ldr	r1, [pc, #784]	@ (800ae58 <USB_EPStartXfer+0x3dc>)
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	b292      	uxth	r2, r2
 800ab4c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6a1a      	ldr	r2, [r3, #32]
 800ab52:	1d7b      	adds	r3, r7, #5
 800ab54:	33ff      	adds	r3, #255	@ 0xff
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	1ad2      	subs	r2, r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	18d3      	adds	r3, r2, r3
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	001a      	movs	r2, r3
 800ab6e:	2340      	movs	r3, #64	@ 0x40
 800ab70:	4013      	ands	r3, r2
 800ab72:	d100      	bne.n	800ab76 <USB_EPStartXfer+0xfa>
 800ab74:	e176      	b.n	800ae64 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d000      	beq.n	800ab84 <USB_EPStartXfer+0x108>
 800ab82:	e074      	b.n	800ac6e <USB_EPStartXfer+0x1f2>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2250      	movs	r2, #80	@ 0x50
 800ab8c:	5a9b      	ldrh	r3, [r3, r2]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	001a      	movs	r2, r3
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	189b      	adds	r3, r3, r2
 800ab96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	00da      	lsls	r2, r3, #3
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	18d3      	adds	r3, r2, r3
 800aba2:	4aae      	ldr	r2, [pc, #696]	@ (800ae5c <USB_EPStartXfer+0x3e0>)
 800aba4:	4694      	mov	ip, r2
 800aba6:	4463      	add	r3, ip
 800aba8:	627b      	str	r3, [r7, #36]	@ 0x24
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	059b      	lsls	r3, r3, #22
 800abb2:	0d9b      	lsrs	r3, r3, #22
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	1d7b      	adds	r3, r7, #5
 800abbc:	33ff      	adds	r3, #255	@ 0xff
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d108      	bne.n	800abd6 <USB_EPStartXfer+0x15a>
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	4aa5      	ldr	r2, [pc, #660]	@ (800ae60 <USB_EPStartXfer+0x3e4>)
 800abcc:	4313      	orrs	r3, r2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd2:	801a      	strh	r2, [r3, #0]
 800abd4:	e066      	b.n	800aca4 <USB_EPStartXfer+0x228>
 800abd6:	1d7b      	adds	r3, r7, #5
 800abd8:	33ff      	adds	r3, #255	@ 0xff
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b3e      	cmp	r3, #62	@ 0x3e
 800abde:	d821      	bhi.n	800ac24 <USB_EPStartXfer+0x1a8>
 800abe0:	1d7b      	adds	r3, r7, #5
 800abe2:	33ff      	adds	r3, #255	@ 0xff
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	085b      	lsrs	r3, r3, #1
 800abe8:	1c7a      	adds	r2, r7, #1
 800abea:	32ff      	adds	r2, #255	@ 0xff
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	1d7b      	adds	r3, r7, #5
 800abf0:	33ff      	adds	r3, #255	@ 0xff
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2201      	movs	r2, #1
 800abf6:	4013      	ands	r3, r2
 800abf8:	d006      	beq.n	800ac08 <USB_EPStartXfer+0x18c>
 800abfa:	1c7b      	adds	r3, r7, #1
 800abfc:	33ff      	adds	r3, #255	@ 0xff
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	1c7a      	adds	r2, r7, #1
 800ac04:	32ff      	adds	r2, #255	@ 0xff
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	1c7b      	adds	r3, r7, #1
 800ac10:	33ff      	adds	r3, #255	@ 0xff
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	029b      	lsls	r3, r3, #10
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	801a      	strh	r2, [r3, #0]
 800ac22:	e03f      	b.n	800aca4 <USB_EPStartXfer+0x228>
 800ac24:	1d7b      	adds	r3, r7, #5
 800ac26:	33ff      	adds	r3, #255	@ 0xff
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	095b      	lsrs	r3, r3, #5
 800ac2c:	1c7a      	adds	r2, r7, #1
 800ac2e:	32ff      	adds	r2, #255	@ 0xff
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	1d7b      	adds	r3, r7, #5
 800ac34:	33ff      	adds	r3, #255	@ 0xff
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	221f      	movs	r2, #31
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	d106      	bne.n	800ac4c <USB_EPStartXfer+0x1d0>
 800ac3e:	1c7b      	adds	r3, r7, #1
 800ac40:	33ff      	adds	r3, #255	@ 0xff
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	1c7a      	adds	r2, r7, #1
 800ac48:	32ff      	adds	r2, #255	@ 0xff
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	1c7b      	adds	r3, r7, #1
 800ac54:	33ff      	adds	r3, #255	@ 0xff
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	029b      	lsls	r3, r3, #10
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	4a7f      	ldr	r2, [pc, #508]	@ (800ae60 <USB_EPStartXfer+0x3e4>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	801a      	strh	r2, [r3, #0]
 800ac6c:	e01a      	b.n	800aca4 <USB_EPStartXfer+0x228>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d116      	bne.n	800aca4 <USB_EPStartXfer+0x228>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2250      	movs	r2, #80	@ 0x50
 800ac7a:	5a9b      	ldrh	r3, [r3, r2]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	001a      	movs	r2, r3
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	189b      	adds	r3, r3, r2
 800ac84:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	00da      	lsls	r2, r3, #3
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	18d3      	adds	r3, r2, r3
 800ac90:	4a72      	ldr	r2, [pc, #456]	@ (800ae5c <USB_EPStartXfer+0x3e0>)
 800ac92:	4694      	mov	ip, r2
 800ac94:	4463      	add	r3, ip
 800ac96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac98:	1d7b      	adds	r3, r7, #5
 800ac9a:	33ff      	adds	r3, #255	@ 0xff
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aca4:	2076      	movs	r0, #118	@ 0x76
 800aca6:	183b      	adds	r3, r7, r0
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	8952      	ldrh	r2, [r2, #10]
 800acac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	6959      	ldr	r1, [r3, #20]
 800acb2:	1d7b      	adds	r3, r7, #5
 800acb4:	33ff      	adds	r3, #255	@ 0xff
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	b29c      	uxth	r4, r3
 800acba:	183b      	adds	r3, r7, r0
 800acbc:	881a      	ldrh	r2, [r3, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	0023      	movs	r3, r4
 800acc2:	f001 f945 	bl	800bf50 <USB_WritePMA>
            ep->xfer_buff += len;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695a      	ldr	r2, [r3, #20]
 800acca:	1d7b      	adds	r3, r7, #5
 800accc:	33ff      	adds	r3, #255	@ 0xff
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	18d2      	adds	r2, r2, r3
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6a1a      	ldr	r2, [r3, #32]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d908      	bls.n	800acf4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6a1a      	ldr	r2, [r3, #32]
 800ace6:	1d7b      	adds	r3, r7, #5
 800ace8:	33ff      	adds	r3, #255	@ 0xff
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	1ad2      	subs	r2, r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	621a      	str	r2, [r3, #32]
 800acf2:	e007      	b.n	800ad04 <USB_EPStartXfer+0x288>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	1d7a      	adds	r2, r7, #5
 800bbc2:	32ff      	adds	r2, #255	@ 0xff
 800bbc4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	621a      	str	r2, [r3, #32]
=======
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	1d7a      	adds	r2, r7, #5
 800acfa:	32ff      	adds	r2, #255	@ 0xff
 800acfc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2200      	movs	r2, #0
 800ad02:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	785b      	ldrb	r3, [r3, #1]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d000      	beq.n	800bbd6 <USB_EPStartXfer+0x292>
 800bbd4:	e070      	b.n	800bcb8 <USB_EPStartXfer+0x374>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	61bb      	str	r3, [r7, #24]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2250      	movs	r2, #80	@ 0x50
 800bbde:	5a9b      	ldrh	r3, [r3, r2]
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	001a      	movs	r2, r3
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	189b      	adds	r3, r3, r2
 800bbe8:	61bb      	str	r3, [r7, #24]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	00da      	lsls	r2, r3, #3
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	18d3      	adds	r3, r2, r3
 800bbf4:	4a48      	ldr	r2, [pc, #288]	@ (800bd18 <USB_EPStartXfer+0x3d4>)
 800bbf6:	4694      	mov	ip, r2
 800bbf8:	4463      	add	r3, ip
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	059b      	lsls	r3, r3, #22
 800bc04:	0d9b      	lsrs	r3, r3, #22
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	801a      	strh	r2, [r3, #0]
 800bc0c:	1d7b      	adds	r3, r7, #5
 800bc0e:	33ff      	adds	r3, #255	@ 0xff
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d108      	bne.n	800bc28 <USB_EPStartXfer+0x2e4>
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	4a42      	ldr	r2, [pc, #264]	@ (800bd28 <USB_EPStartXfer+0x3e4>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	801a      	strh	r2, [r3, #0]
 800bc26:	e064      	b.n	800bcf2 <USB_EPStartXfer+0x3ae>
 800bc28:	1d7b      	adds	r3, r7, #5
 800bc2a:	33ff      	adds	r3, #255	@ 0xff
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc30:	d81f      	bhi.n	800bc72 <USB_EPStartXfer+0x32e>
 800bc32:	1d7b      	adds	r3, r7, #5
 800bc34:	33ff      	adds	r3, #255	@ 0xff
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	21fc      	movs	r1, #252	@ 0xfc
 800bc3c:	187a      	adds	r2, r7, r1
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	1d7b      	adds	r3, r7, #5
 800bc42:	33ff      	adds	r3, #255	@ 0xff
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2201      	movs	r2, #1
 800bc48:	4013      	ands	r3, r2
 800bc4a:	d004      	beq.n	800bc56 <USB_EPStartXfer+0x312>
 800bc4c:	187b      	adds	r3, r7, r1
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3301      	adds	r3, #1
 800bc52:	187a      	adds	r2, r7, r1
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	23fc      	movs	r3, #252	@ 0xfc
 800bc5e:	18fb      	adds	r3, r7, r3
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	029b      	lsls	r3, r3, #10
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	801a      	strh	r2, [r3, #0]
 800bc70:	e03f      	b.n	800bcf2 <USB_EPStartXfer+0x3ae>
 800bc72:	1d7b      	adds	r3, r7, #5
 800bc74:	33ff      	adds	r3, #255	@ 0xff
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	095b      	lsrs	r3, r3, #5
 800bc7a:	21fc      	movs	r1, #252	@ 0xfc
 800bc7c:	187a      	adds	r2, r7, r1
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	1d7b      	adds	r3, r7, #5
 800bc82:	33ff      	adds	r3, #255	@ 0xff
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	221f      	movs	r2, #31
 800bc88:	4013      	ands	r3, r2
 800bc8a:	d104      	bne.n	800bc96 <USB_EPStartXfer+0x352>
 800bc8c:	187b      	adds	r3, r7, r1
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	187a      	adds	r2, r7, r1
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	23fc      	movs	r3, #252	@ 0xfc
 800bc9e:	18fb      	adds	r3, r7, r3
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	029b      	lsls	r3, r3, #10
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	4a1e      	ldr	r2, [pc, #120]	@ (800bd28 <USB_EPStartXfer+0x3e4>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	801a      	strh	r2, [r3, #0]
 800bcb6:	e01c      	b.n	800bcf2 <USB_EPStartXfer+0x3ae>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	785b      	ldrb	r3, [r3, #1]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d118      	bne.n	800bcf2 <USB_EPStartXfer+0x3ae>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	623b      	str	r3, [r7, #32]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2250      	movs	r2, #80	@ 0x50
 800bcc8:	5a9b      	ldrh	r3, [r3, r2]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	001a      	movs	r2, r3
 800bcce:	6a3b      	ldr	r3, [r7, #32]
 800bcd0:	189b      	adds	r3, r3, r2
 800bcd2:	623b      	str	r3, [r7, #32]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	00da      	lsls	r2, r3, #3
 800bcda:	6a3b      	ldr	r3, [r7, #32]
 800bcdc:	18d3      	adds	r3, r2, r3
 800bcde:	4a0e      	ldr	r2, [pc, #56]	@ (800bd18 <USB_EPStartXfer+0x3d4>)
 800bce0:	4694      	mov	ip, r2
 800bce2:	4463      	add	r3, ip
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	1d7b      	adds	r3, r7, #5
 800bce8:	33ff      	adds	r3, #255	@ 0xff
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bcf2:	2076      	movs	r0, #118	@ 0x76
 800bcf4:	183b      	adds	r3, r7, r0
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	8912      	ldrh	r2, [r2, #8]
 800bcfa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	6959      	ldr	r1, [r3, #20]
 800bd00:	1d7b      	adds	r3, r7, #5
 800bd02:	33ff      	adds	r3, #255	@ 0xff
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	b29c      	uxth	r4, r3
 800bd08:	183b      	adds	r3, r7, r0
 800bd0a:	881a      	ldrh	r2, [r3, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	0023      	movs	r3, r4
 800bd10:	f001 f882 	bl	800ce18 <USB_WritePMA>
 800bd14:	e329      	b.n	800c36a <USB_EPStartXfer+0xa26>
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	00000402 	.word	0x00000402
 800bd1c:	ffff8f8f 	.word	0xffff8f8f
 800bd20:	ffff8180 	.word	0xffff8180
 800bd24:	00000406 	.word	0x00000406
 800bd28:	ffff8000 	.word	0xffff8000
=======
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d000      	beq.n	800ad0e <USB_EPStartXfer+0x292>
 800ad0c:	e070      	b.n	800adf0 <USB_EPStartXfer+0x374>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	61bb      	str	r3, [r7, #24]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2250      	movs	r2, #80	@ 0x50
 800ad16:	5a9b      	ldrh	r3, [r3, r2]
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	001a      	movs	r2, r3
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	00da      	lsls	r2, r3, #3
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	18d3      	adds	r3, r2, r3
 800ad2c:	4a48      	ldr	r2, [pc, #288]	@ (800ae50 <USB_EPStartXfer+0x3d4>)
 800ad2e:	4694      	mov	ip, r2
 800ad30:	4463      	add	r3, ip
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	059b      	lsls	r3, r3, #22
 800ad3c:	0d9b      	lsrs	r3, r3, #22
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	801a      	strh	r2, [r3, #0]
 800ad44:	1d7b      	adds	r3, r7, #5
 800ad46:	33ff      	adds	r3, #255	@ 0xff
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d108      	bne.n	800ad60 <USB_EPStartXfer+0x2e4>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4a42      	ldr	r2, [pc, #264]	@ (800ae60 <USB_EPStartXfer+0x3e4>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	801a      	strh	r2, [r3, #0]
 800ad5e:	e064      	b.n	800ae2a <USB_EPStartXfer+0x3ae>
 800ad60:	1d7b      	adds	r3, r7, #5
 800ad62:	33ff      	adds	r3, #255	@ 0xff
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad68:	d81f      	bhi.n	800adaa <USB_EPStartXfer+0x32e>
 800ad6a:	1d7b      	adds	r3, r7, #5
 800ad6c:	33ff      	adds	r3, #255	@ 0xff
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	21fc      	movs	r1, #252	@ 0xfc
 800ad74:	187a      	adds	r2, r7, r1
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	1d7b      	adds	r3, r7, #5
 800ad7a:	33ff      	adds	r3, #255	@ 0xff
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4013      	ands	r3, r2
 800ad82:	d004      	beq.n	800ad8e <USB_EPStartXfer+0x312>
 800ad84:	187b      	adds	r3, r7, r1
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	187a      	adds	r2, r7, r1
 800ad8c:	6013      	str	r3, [r2, #0]
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	23fc      	movs	r3, #252	@ 0xfc
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	029b      	lsls	r3, r3, #10
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	4313      	orrs	r3, r2
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	801a      	strh	r2, [r3, #0]
 800ada8:	e03f      	b.n	800ae2a <USB_EPStartXfer+0x3ae>
 800adaa:	1d7b      	adds	r3, r7, #5
 800adac:	33ff      	adds	r3, #255	@ 0xff
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	095b      	lsrs	r3, r3, #5
 800adb2:	21fc      	movs	r1, #252	@ 0xfc
 800adb4:	187a      	adds	r2, r7, r1
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	1d7b      	adds	r3, r7, #5
 800adba:	33ff      	adds	r3, #255	@ 0xff
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	221f      	movs	r2, #31
 800adc0:	4013      	ands	r3, r2
 800adc2:	d104      	bne.n	800adce <USB_EPStartXfer+0x352>
 800adc4:	187b      	adds	r3, r7, r1
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	187a      	adds	r2, r7, r1
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29a      	uxth	r2, r3
 800add4:	23fc      	movs	r3, #252	@ 0xfc
 800add6:	18fb      	adds	r3, r7, r3
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	b29b      	uxth	r3, r3
 800addc:	029b      	lsls	r3, r3, #10
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4a1e      	ldr	r2, [pc, #120]	@ (800ae60 <USB_EPStartXfer+0x3e4>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	b29a      	uxth	r2, r3
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	801a      	strh	r2, [r3, #0]
 800adee:	e01c      	b.n	800ae2a <USB_EPStartXfer+0x3ae>
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d118      	bne.n	800ae2a <USB_EPStartXfer+0x3ae>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	623b      	str	r3, [r7, #32]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2250      	movs	r2, #80	@ 0x50
 800ae00:	5a9b      	ldrh	r3, [r3, r2]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	001a      	movs	r2, r3
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	189b      	adds	r3, r3, r2
 800ae0a:	623b      	str	r3, [r7, #32]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	00da      	lsls	r2, r3, #3
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	18d3      	adds	r3, r2, r3
 800ae16:	4a0e      	ldr	r2, [pc, #56]	@ (800ae50 <USB_EPStartXfer+0x3d4>)
 800ae18:	4694      	mov	ip, r2
 800ae1a:	4463      	add	r3, ip
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	1d7b      	adds	r3, r7, #5
 800ae20:	33ff      	adds	r3, #255	@ 0xff
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae2a:	2076      	movs	r0, #118	@ 0x76
 800ae2c:	183b      	adds	r3, r7, r0
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	8912      	ldrh	r2, [r2, #8]
 800ae32:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	6959      	ldr	r1, [r3, #20]
 800ae38:	1d7b      	adds	r3, r7, #5
 800ae3a:	33ff      	adds	r3, #255	@ 0xff
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	b29c      	uxth	r4, r3
 800ae40:	183b      	adds	r3, r7, r0
 800ae42:	881a      	ldrh	r2, [r3, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	0023      	movs	r3, r4
 800ae48:	f001 f882 	bl	800bf50 <USB_WritePMA>
 800ae4c:	e329      	b.n	800b4a2 <USB_EPStartXfer+0xa26>
 800ae4e:	46c0      	nop			@ (mov r8, r8)
 800ae50:	00000402 	.word	0x00000402
 800ae54:	ffff8f8f 	.word	0xffff8f8f
 800ae58:	ffff8180 	.word	0xffff8180
 800ae5c:	00000406 	.word	0x00000406
 800ae60:	ffff8000 	.word	0xffff8000
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	785b      	ldrb	r3, [r3, #1]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d000      	beq.n	800bd36 <USB_EPStartXfer+0x3f2>
 800bd34:	e070      	b.n	800be18 <USB_EPStartXfer+0x4d4>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2250      	movs	r2, #80	@ 0x50
 800bd3e:	5a9b      	ldrh	r3, [r3, r2]
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	001a      	movs	r2, r3
 800bd44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd46:	189b      	adds	r3, r3, r2
 800bd48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	00da      	lsls	r2, r3, #3
 800bd50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd52:	18d3      	adds	r3, r2, r3
 800bd54:	4acd      	ldr	r2, [pc, #820]	@ (800c08c <USB_EPStartXfer+0x748>)
 800bd56:	4694      	mov	ip, r2
 800bd58:	4463      	add	r3, ip
 800bd5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	059b      	lsls	r3, r3, #22
 800bd64:	0d9b      	lsrs	r3, r3, #22
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd6a:	801a      	strh	r2, [r3, #0]
 800bd6c:	1d7b      	adds	r3, r7, #5
 800bd6e:	33ff      	adds	r3, #255	@ 0xff
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d108      	bne.n	800bd88 <USB_EPStartXfer+0x444>
 800bd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4ac4      	ldr	r2, [pc, #784]	@ (800c090 <USB_EPStartXfer+0x74c>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd84:	801a      	strh	r2, [r3, #0]
 800bd86:	e064      	b.n	800be52 <USB_EPStartXfer+0x50e>
 800bd88:	1d7b      	adds	r3, r7, #5
 800bd8a:	33ff      	adds	r3, #255	@ 0xff
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd90:	d81f      	bhi.n	800bdd2 <USB_EPStartXfer+0x48e>
 800bd92:	1d7b      	adds	r3, r7, #5
 800bd94:	33ff      	adds	r3, #255	@ 0xff
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	085b      	lsrs	r3, r3, #1
 800bd9a:	21f8      	movs	r1, #248	@ 0xf8
 800bd9c:	187a      	adds	r2, r7, r1
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	1d7b      	adds	r3, r7, #5
 800bda2:	33ff      	adds	r3, #255	@ 0xff
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2201      	movs	r2, #1
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d004      	beq.n	800bdb6 <USB_EPStartXfer+0x472>
 800bdac:	187b      	adds	r3, r7, r1
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	187a      	adds	r2, r7, r1
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	23f8      	movs	r3, #248	@ 0xf8
 800bdbe:	18fb      	adds	r3, r7, r3
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	029b      	lsls	r3, r3, #10
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdce:	801a      	strh	r2, [r3, #0]
 800bdd0:	e03f      	b.n	800be52 <USB_EPStartXfer+0x50e>
 800bdd2:	1d7b      	adds	r3, r7, #5
 800bdd4:	33ff      	adds	r3, #255	@ 0xff
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	095b      	lsrs	r3, r3, #5
 800bdda:	21f8      	movs	r1, #248	@ 0xf8
 800bddc:	187a      	adds	r2, r7, r1
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	1d7b      	adds	r3, r7, #5
 800bde2:	33ff      	adds	r3, #255	@ 0xff
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	221f      	movs	r2, #31
 800bde8:	4013      	ands	r3, r2
 800bdea:	d104      	bne.n	800bdf6 <USB_EPStartXfer+0x4b2>
 800bdec:	187b      	adds	r3, r7, r1
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	187a      	adds	r2, r7, r1
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	23f8      	movs	r3, #248	@ 0xf8
 800bdfe:	18fb      	adds	r3, r7, r3
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	029b      	lsls	r3, r3, #10
 800be06:	b29b      	uxth	r3, r3
 800be08:	4313      	orrs	r3, r2
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4aa0      	ldr	r2, [pc, #640]	@ (800c090 <USB_EPStartXfer+0x74c>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	b29a      	uxth	r2, r3
 800be12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be14:	801a      	strh	r2, [r3, #0]
 800be16:	e01c      	b.n	800be52 <USB_EPStartXfer+0x50e>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	785b      	ldrb	r3, [r3, #1]
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d118      	bne.n	800be52 <USB_EPStartXfer+0x50e>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	653b      	str	r3, [r7, #80]	@ 0x50
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2250      	movs	r2, #80	@ 0x50
 800be28:	5a9b      	ldrh	r3, [r3, r2]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	001a      	movs	r2, r3
 800be2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be30:	189b      	adds	r3, r3, r2
 800be32:	653b      	str	r3, [r7, #80]	@ 0x50
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	00da      	lsls	r2, r3, #3
 800be3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	4a93      	ldr	r2, [pc, #588]	@ (800c08c <USB_EPStartXfer+0x748>)
 800be40:	4694      	mov	ip, r2
 800be42:	4463      	add	r3, ip
 800be44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be46:	1d7b      	adds	r3, r7, #5
 800be48:	33ff      	adds	r3, #255	@ 0xff
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800be52:	2076      	movs	r0, #118	@ 0x76
 800be54:	183b      	adds	r3, r7, r0
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	8912      	ldrh	r2, [r2, #8]
 800be5a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	6959      	ldr	r1, [r3, #20]
 800be60:	1d7b      	adds	r3, r7, #5
 800be62:	33ff      	adds	r3, #255	@ 0xff
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	b29c      	uxth	r4, r3
 800be68:	183b      	adds	r3, r7, r0
 800be6a:	881a      	ldrh	r2, [r3, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	0023      	movs	r3, r4
 800be70:	f000 ffd2 	bl	800ce18 <USB_WritePMA>
            ep->xfer_buff += len;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	695a      	ldr	r2, [r3, #20]
 800be78:	1d7b      	adds	r3, r7, #5
 800be7a:	33ff      	adds	r3, #255	@ 0xff
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	18d2      	adds	r2, r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	6a1a      	ldr	r2, [r3, #32]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d908      	bls.n	800bea2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6a1a      	ldr	r2, [r3, #32]
 800be94:	1d7b      	adds	r3, r7, #5
 800be96:	33ff      	adds	r3, #255	@ 0xff
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1ad2      	subs	r2, r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	621a      	str	r2, [r3, #32]
 800bea0:	e007      	b.n	800beb2 <USB_EPStartXfer+0x56e>
=======
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d000      	beq.n	800ae6e <USB_EPStartXfer+0x3f2>
 800ae6c:	e070      	b.n	800af50 <USB_EPStartXfer+0x4d4>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2250      	movs	r2, #80	@ 0x50
 800ae76:	5a9b      	ldrh	r3, [r3, r2]
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	001a      	movs	r2, r3
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7e:	189b      	adds	r3, r3, r2
 800ae80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	00da      	lsls	r2, r3, #3
 800ae88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae8a:	18d3      	adds	r3, r2, r3
 800ae8c:	4acd      	ldr	r2, [pc, #820]	@ (800b1c4 <USB_EPStartXfer+0x748>)
 800ae8e:	4694      	mov	ip, r2
 800ae90:	4463      	add	r3, ip
 800ae92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	059b      	lsls	r3, r3, #22
 800ae9c:	0d9b      	lsrs	r3, r3, #22
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	1d7b      	adds	r3, r7, #5
 800aea6:	33ff      	adds	r3, #255	@ 0xff
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d108      	bne.n	800aec0 <USB_EPStartXfer+0x444>
 800aeae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4ac4      	ldr	r2, [pc, #784]	@ (800b1c8 <USB_EPStartXfer+0x74c>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebc:	801a      	strh	r2, [r3, #0]
 800aebe:	e064      	b.n	800af8a <USB_EPStartXfer+0x50e>
 800aec0:	1d7b      	adds	r3, r7, #5
 800aec2:	33ff      	adds	r3, #255	@ 0xff
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b3e      	cmp	r3, #62	@ 0x3e
 800aec8:	d81f      	bhi.n	800af0a <USB_EPStartXfer+0x48e>
 800aeca:	1d7b      	adds	r3, r7, #5
 800aecc:	33ff      	adds	r3, #255	@ 0xff
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	085b      	lsrs	r3, r3, #1
 800aed2:	21f8      	movs	r1, #248	@ 0xf8
 800aed4:	187a      	adds	r2, r7, r1
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	1d7b      	adds	r3, r7, #5
 800aeda:	33ff      	adds	r3, #255	@ 0xff
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2201      	movs	r2, #1
 800aee0:	4013      	ands	r3, r2
 800aee2:	d004      	beq.n	800aeee <USB_EPStartXfer+0x472>
 800aee4:	187b      	adds	r3, r7, r1
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	187a      	adds	r2, r7, r1
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	23f8      	movs	r3, #248	@ 0xf8
 800aef6:	18fb      	adds	r3, r7, r3
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	029b      	lsls	r3, r3, #10
 800aefe:	b29b      	uxth	r3, r3
 800af00:	4313      	orrs	r3, r2
 800af02:	b29a      	uxth	r2, r3
 800af04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af06:	801a      	strh	r2, [r3, #0]
 800af08:	e03f      	b.n	800af8a <USB_EPStartXfer+0x50e>
 800af0a:	1d7b      	adds	r3, r7, #5
 800af0c:	33ff      	adds	r3, #255	@ 0xff
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	21f8      	movs	r1, #248	@ 0xf8
 800af14:	187a      	adds	r2, r7, r1
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	1d7b      	adds	r3, r7, #5
 800af1a:	33ff      	adds	r3, #255	@ 0xff
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	221f      	movs	r2, #31
 800af20:	4013      	ands	r3, r2
 800af22:	d104      	bne.n	800af2e <USB_EPStartXfer+0x4b2>
 800af24:	187b      	adds	r3, r7, r1
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3b01      	subs	r3, #1
 800af2a:	187a      	adds	r2, r7, r1
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	b29a      	uxth	r2, r3
 800af34:	23f8      	movs	r3, #248	@ 0xf8
 800af36:	18fb      	adds	r3, r7, r3
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	029b      	lsls	r3, r3, #10
 800af3e:	b29b      	uxth	r3, r3
 800af40:	4313      	orrs	r3, r2
 800af42:	b29b      	uxth	r3, r3
 800af44:	4aa0      	ldr	r2, [pc, #640]	@ (800b1c8 <USB_EPStartXfer+0x74c>)
 800af46:	4313      	orrs	r3, r2
 800af48:	b29a      	uxth	r2, r3
 800af4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af4c:	801a      	strh	r2, [r3, #0]
 800af4e:	e01c      	b.n	800af8a <USB_EPStartXfer+0x50e>
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d118      	bne.n	800af8a <USB_EPStartXfer+0x50e>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2250      	movs	r2, #80	@ 0x50
 800af60:	5a9b      	ldrh	r3, [r3, r2]
 800af62:	b29b      	uxth	r3, r3
 800af64:	001a      	movs	r2, r3
 800af66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	00da      	lsls	r2, r3, #3
 800af72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af74:	18d3      	adds	r3, r2, r3
 800af76:	4a93      	ldr	r2, [pc, #588]	@ (800b1c4 <USB_EPStartXfer+0x748>)
 800af78:	4694      	mov	ip, r2
 800af7a:	4463      	add	r3, ip
 800af7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af7e:	1d7b      	adds	r3, r7, #5
 800af80:	33ff      	adds	r3, #255	@ 0xff
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	b29a      	uxth	r2, r3
 800af86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800af8a:	2076      	movs	r0, #118	@ 0x76
 800af8c:	183b      	adds	r3, r7, r0
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	8912      	ldrh	r2, [r2, #8]
 800af92:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	6959      	ldr	r1, [r3, #20]
 800af98:	1d7b      	adds	r3, r7, #5
 800af9a:	33ff      	adds	r3, #255	@ 0xff
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	b29c      	uxth	r4, r3
 800afa0:	183b      	adds	r3, r7, r0
 800afa2:	881a      	ldrh	r2, [r3, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	0023      	movs	r3, r4
 800afa8:	f000 ffd2 	bl	800bf50 <USB_WritePMA>
            ep->xfer_buff += len;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	695a      	ldr	r2, [r3, #20]
 800afb0:	1d7b      	adds	r3, r7, #5
 800afb2:	33ff      	adds	r3, #255	@ 0xff
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	18d2      	adds	r2, r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	6a1a      	ldr	r2, [r3, #32]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d908      	bls.n	800afda <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	6a1a      	ldr	r2, [r3, #32]
 800afcc:	1d7b      	adds	r3, r7, #5
 800afce:	33ff      	adds	r3, #255	@ 0xff
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1ad2      	subs	r2, r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	621a      	str	r2, [r3, #32]
 800afd8:	e007      	b.n	800afea <USB_EPStartXfer+0x56e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	1d7a      	adds	r2, r7, #5
 800bea8:	32ff      	adds	r2, #255	@ 0xff
 800beaa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2200      	movs	r2, #0
 800beb0:	621a      	str	r2, [r3, #32]
=======
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	1d7a      	adds	r2, r7, #5
 800afe0:	32ff      	adds	r2, #255	@ 0xff
 800afe2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2200      	movs	r2, #0
 800afe8:	621a      	str	r2, [r3, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	643b      	str	r3, [r7, #64]	@ 0x40
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d000      	beq.n	800bec0 <USB_EPStartXfer+0x57c>
 800bebe:	e070      	b.n	800bfa2 <USB_EPStartXfer+0x65e>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2250      	movs	r2, #80	@ 0x50
 800bec8:	5a9b      	ldrh	r3, [r3, r2]
 800beca:	b29b      	uxth	r3, r3
 800becc:	001a      	movs	r2, r3
 800bece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed0:	189b      	adds	r3, r3, r2
 800bed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	00da      	lsls	r2, r3, #3
 800beda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bedc:	18d3      	adds	r3, r2, r3
 800bede:	4a6d      	ldr	r2, [pc, #436]	@ (800c094 <USB_EPStartXfer+0x750>)
 800bee0:	4694      	mov	ip, r2
 800bee2:	4463      	add	r3, ip
 800bee4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	b29b      	uxth	r3, r3
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	0d9b      	lsrs	r3, r3, #22
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef4:	801a      	strh	r2, [r3, #0]
 800bef6:	1d7b      	adds	r3, r7, #5
 800bef8:	33ff      	adds	r3, #255	@ 0xff
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d108      	bne.n	800bf12 <USB_EPStartXfer+0x5ce>
 800bf00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4a62      	ldr	r2, [pc, #392]	@ (800c090 <USB_EPStartXfer+0x74c>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0e:	801a      	strh	r2, [r3, #0]
 800bf10:	e062      	b.n	800bfd8 <USB_EPStartXfer+0x694>
 800bf12:	1d7b      	adds	r3, r7, #5
 800bf14:	33ff      	adds	r3, #255	@ 0xff
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf1a:	d81f      	bhi.n	800bf5c <USB_EPStartXfer+0x618>
 800bf1c:	1d7b      	adds	r3, r7, #5
 800bf1e:	33ff      	adds	r3, #255	@ 0xff
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	085b      	lsrs	r3, r3, #1
 800bf24:	21f4      	movs	r1, #244	@ 0xf4
 800bf26:	187a      	adds	r2, r7, r1
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	1d7b      	adds	r3, r7, #5
 800bf2c:	33ff      	adds	r3, #255	@ 0xff
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2201      	movs	r2, #1
 800bf32:	4013      	ands	r3, r2
 800bf34:	d004      	beq.n	800bf40 <USB_EPStartXfer+0x5fc>
 800bf36:	187b      	adds	r3, r7, r1
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	187a      	adds	r2, r7, r1
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	23f4      	movs	r3, #244	@ 0xf4
 800bf48:	18fb      	adds	r3, r7, r3
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	029b      	lsls	r3, r3, #10
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	4313      	orrs	r3, r2
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf58:	801a      	strh	r2, [r3, #0]
 800bf5a:	e03d      	b.n	800bfd8 <USB_EPStartXfer+0x694>
 800bf5c:	1d7b      	adds	r3, r7, #5
 800bf5e:	33ff      	adds	r3, #255	@ 0xff
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	095b      	lsrs	r3, r3, #5
 800bf64:	21f4      	movs	r1, #244	@ 0xf4
 800bf66:	187a      	adds	r2, r7, r1
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	1d7b      	adds	r3, r7, #5
 800bf6c:	33ff      	adds	r3, #255	@ 0xff
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	221f      	movs	r2, #31
 800bf72:	4013      	ands	r3, r2
 800bf74:	d104      	bne.n	800bf80 <USB_EPStartXfer+0x63c>
 800bf76:	187b      	adds	r3, r7, r1
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	187a      	adds	r2, r7, r1
 800bf7e:	6013      	str	r3, [r2, #0]
 800bf80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	23f4      	movs	r3, #244	@ 0xf4
 800bf88:	18fb      	adds	r3, r7, r3
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	029b      	lsls	r3, r3, #10
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4313      	orrs	r3, r2
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4a3e      	ldr	r2, [pc, #248]	@ (800c090 <USB_EPStartXfer+0x74c>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf9e:	801a      	strh	r2, [r3, #0]
 800bfa0:	e01a      	b.n	800bfd8 <USB_EPStartXfer+0x694>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d116      	bne.n	800bfd8 <USB_EPStartXfer+0x694>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2250      	movs	r2, #80	@ 0x50
 800bfae:	5a9b      	ldrh	r3, [r3, r2]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	001a      	movs	r2, r3
 800bfb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb6:	189b      	adds	r3, r3, r2
 800bfb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	00da      	lsls	r2, r3, #3
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc2:	18d3      	adds	r3, r2, r3
 800bfc4:	4a33      	ldr	r2, [pc, #204]	@ (800c094 <USB_EPStartXfer+0x750>)
 800bfc6:	4694      	mov	ip, r2
 800bfc8:	4463      	add	r3, ip
 800bfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfcc:	1d7b      	adds	r3, r7, #5
 800bfce:	33ff      	adds	r3, #255	@ 0xff
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bfd8:	2076      	movs	r0, #118	@ 0x76
 800bfda:	183b      	adds	r3, r7, r0
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	8952      	ldrh	r2, [r2, #10]
 800bfe0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	1d7b      	adds	r3, r7, #5
 800bfe8:	33ff      	adds	r3, #255	@ 0xff
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	b29c      	uxth	r4, r3
 800bfee:	183b      	adds	r3, r7, r0
 800bff0:	881a      	ldrh	r2, [r3, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	0023      	movs	r3, r4
 800bff6:	f000 ff0f 	bl	800ce18 <USB_WritePMA>
 800bffa:	e1b6      	b.n	800c36a <USB_EPStartXfer+0xa26>
=======
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	643b      	str	r3, [r7, #64]	@ 0x40
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	785b      	ldrb	r3, [r3, #1]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d000      	beq.n	800aff8 <USB_EPStartXfer+0x57c>
 800aff6:	e070      	b.n	800b0da <USB_EPStartXfer+0x65e>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2250      	movs	r2, #80	@ 0x50
 800b000:	5a9b      	ldrh	r3, [r3, r2]
 800b002:	b29b      	uxth	r3, r3
 800b004:	001a      	movs	r2, r3
 800b006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b008:	189b      	adds	r3, r3, r2
 800b00a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	00da      	lsls	r2, r3, #3
 800b012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b014:	18d3      	adds	r3, r2, r3
 800b016:	4a6d      	ldr	r2, [pc, #436]	@ (800b1cc <USB_EPStartXfer+0x750>)
 800b018:	4694      	mov	ip, r2
 800b01a:	4463      	add	r3, ip
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	b29b      	uxth	r3, r3
 800b024:	059b      	lsls	r3, r3, #22
 800b026:	0d9b      	lsrs	r3, r3, #22
 800b028:	b29a      	uxth	r2, r3
 800b02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02c:	801a      	strh	r2, [r3, #0]
 800b02e:	1d7b      	adds	r3, r7, #5
 800b030:	33ff      	adds	r3, #255	@ 0xff
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d108      	bne.n	800b04a <USB_EPStartXfer+0x5ce>
 800b038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4a62      	ldr	r2, [pc, #392]	@ (800b1c8 <USB_EPStartXfer+0x74c>)
 800b040:	4313      	orrs	r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b046:	801a      	strh	r2, [r3, #0]
 800b048:	e062      	b.n	800b110 <USB_EPStartXfer+0x694>
 800b04a:	1d7b      	adds	r3, r7, #5
 800b04c:	33ff      	adds	r3, #255	@ 0xff
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b3e      	cmp	r3, #62	@ 0x3e
 800b052:	d81f      	bhi.n	800b094 <USB_EPStartXfer+0x618>
 800b054:	1d7b      	adds	r3, r7, #5
 800b056:	33ff      	adds	r3, #255	@ 0xff
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	085b      	lsrs	r3, r3, #1
 800b05c:	21f4      	movs	r1, #244	@ 0xf4
 800b05e:	187a      	adds	r2, r7, r1
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	1d7b      	adds	r3, r7, #5
 800b064:	33ff      	adds	r3, #255	@ 0xff
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	4013      	ands	r3, r2
 800b06c:	d004      	beq.n	800b078 <USB_EPStartXfer+0x5fc>
 800b06e:	187b      	adds	r3, r7, r1
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	187a      	adds	r2, r7, r1
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	23f4      	movs	r3, #244	@ 0xf4
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	b29b      	uxth	r3, r3
 800b086:	029b      	lsls	r3, r3, #10
 800b088:	b29b      	uxth	r3, r3
 800b08a:	4313      	orrs	r3, r2
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b090:	801a      	strh	r2, [r3, #0]
 800b092:	e03d      	b.n	800b110 <USB_EPStartXfer+0x694>
 800b094:	1d7b      	adds	r3, r7, #5
 800b096:	33ff      	adds	r3, #255	@ 0xff
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	21f4      	movs	r1, #244	@ 0xf4
 800b09e:	187a      	adds	r2, r7, r1
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	1d7b      	adds	r3, r7, #5
 800b0a4:	33ff      	adds	r3, #255	@ 0xff
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	221f      	movs	r2, #31
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	d104      	bne.n	800b0b8 <USB_EPStartXfer+0x63c>
 800b0ae:	187b      	adds	r3, r7, r1
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	187a      	adds	r2, r7, r1
 800b0b6:	6013      	str	r3, [r2, #0]
 800b0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	23f4      	movs	r3, #244	@ 0xf4
 800b0c0:	18fb      	adds	r3, r7, r3
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	029b      	lsls	r3, r3, #10
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	4a3e      	ldr	r2, [pc, #248]	@ (800b1c8 <USB_EPStartXfer+0x74c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d6:	801a      	strh	r2, [r3, #0]
 800b0d8:	e01a      	b.n	800b110 <USB_EPStartXfer+0x694>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d116      	bne.n	800b110 <USB_EPStartXfer+0x694>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2250      	movs	r2, #80	@ 0x50
 800b0e6:	5a9b      	ldrh	r3, [r3, r2]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	001a      	movs	r2, r3
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	00da      	lsls	r2, r3, #3
 800b0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0fa:	18d3      	adds	r3, r2, r3
 800b0fc:	4a33      	ldr	r2, [pc, #204]	@ (800b1cc <USB_EPStartXfer+0x750>)
 800b0fe:	4694      	mov	ip, r2
 800b100:	4463      	add	r3, ip
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b104:	1d7b      	adds	r3, r7, #5
 800b106:	33ff      	adds	r3, #255	@ 0xff
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b110:	2076      	movs	r0, #118	@ 0x76
 800b112:	183b      	adds	r3, r7, r0
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	8952      	ldrh	r2, [r2, #10]
 800b118:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6959      	ldr	r1, [r3, #20]
 800b11e:	1d7b      	adds	r3, r7, #5
 800b120:	33ff      	adds	r3, #255	@ 0xff
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	b29c      	uxth	r4, r3
 800b126:	183b      	adds	r3, r7, r0
 800b128:	881a      	ldrh	r2, [r3, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	0023      	movs	r3, r4
 800b12e:	f000 ff0f 	bl	800bf50 <USB_WritePMA>
 800b132:	e1b6      	b.n	800b4a2 <USB_EPStartXfer+0xa26>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	1d7a      	adds	r2, r7, #5
 800c002:	32ff      	adds	r2, #255	@ 0xff
 800c004:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	18d3      	adds	r3, r2, r3
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	b29a      	uxth	r2, r3
 800c014:	2062      	movs	r0, #98	@ 0x62
 800c016:	183b      	adds	r3, r7, r0
 800c018:	491f      	ldr	r1, [pc, #124]	@ (800c098 <USB_EPStartXfer+0x754>)
 800c01a:	400a      	ands	r2, r1
 800c01c:	801a      	strh	r2, [r3, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	18d3      	adds	r3, r2, r3
 800c028:	183a      	adds	r2, r7, r0
 800c02a:	8812      	ldrh	r2, [r2, #0]
 800c02c:	491b      	ldr	r1, [pc, #108]	@ (800c09c <USB_EPStartXfer+0x758>)
 800c02e:	430a      	orrs	r2, r1
 800c030:	b292      	uxth	r2, r2
 800c032:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2250      	movs	r2, #80	@ 0x50
 800c03c:	5a9b      	ldrh	r3, [r3, r2]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	001a      	movs	r2, r3
 800c042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c044:	189b      	adds	r3, r3, r2
 800c046:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	00da      	lsls	r2, r3, #3
 800c04e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c050:	18d3      	adds	r3, r2, r3
 800c052:	4a0e      	ldr	r2, [pc, #56]	@ (800c08c <USB_EPStartXfer+0x748>)
 800c054:	4694      	mov	ip, r2
 800c056:	4463      	add	r3, ip
 800c058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c05a:	1d7b      	adds	r3, r7, #5
 800c05c:	33ff      	adds	r3, #255	@ 0xff
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	b29a      	uxth	r2, r3
 800c062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c064:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c066:	2076      	movs	r0, #118	@ 0x76
 800c068:	183b      	adds	r3, r7, r0
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	8912      	ldrh	r2, [r2, #8]
 800c06e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	6959      	ldr	r1, [r3, #20]
 800c074:	1d7b      	adds	r3, r7, #5
 800c076:	33ff      	adds	r3, #255	@ 0xff
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	b29c      	uxth	r4, r3
 800c07c:	183b      	adds	r3, r7, r0
 800c07e:	881a      	ldrh	r2, [r3, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	0023      	movs	r3, r4
 800c084:	f000 fec8 	bl	800ce18 <USB_WritePMA>
 800c088:	e16f      	b.n	800c36a <USB_EPStartXfer+0xa26>
 800c08a:	46c0      	nop			@ (mov r8, r8)
 800c08c:	00000402 	.word	0x00000402
 800c090:	ffff8000 	.word	0xffff8000
 800c094:	00000406 	.word	0x00000406
 800c098:	ffff8e8f 	.word	0xffff8e8f
 800c09c:	ffff8080 	.word	0xffff8080
=======
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	1d7a      	adds	r2, r7, #5
 800b13a:	32ff      	adds	r2, #255	@ 0xff
 800b13c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	18d3      	adds	r3, r2, r3
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	2062      	movs	r0, #98	@ 0x62
 800b14e:	183b      	adds	r3, r7, r0
 800b150:	491f      	ldr	r1, [pc, #124]	@ (800b1d0 <USB_EPStartXfer+0x754>)
 800b152:	400a      	ands	r2, r1
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	18d3      	adds	r3, r2, r3
 800b160:	183a      	adds	r2, r7, r0
 800b162:	8812      	ldrh	r2, [r2, #0]
 800b164:	491b      	ldr	r1, [pc, #108]	@ (800b1d4 <USB_EPStartXfer+0x758>)
 800b166:	430a      	orrs	r2, r1
 800b168:	b292      	uxth	r2, r2
 800b16a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2250      	movs	r2, #80	@ 0x50
 800b174:	5a9b      	ldrh	r3, [r3, r2]
 800b176:	b29b      	uxth	r3, r3
 800b178:	001a      	movs	r2, r3
 800b17a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b17c:	189b      	adds	r3, r3, r2
 800b17e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	00da      	lsls	r2, r3, #3
 800b186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b188:	18d3      	adds	r3, r2, r3
 800b18a:	4a0e      	ldr	r2, [pc, #56]	@ (800b1c4 <USB_EPStartXfer+0x748>)
 800b18c:	4694      	mov	ip, r2
 800b18e:	4463      	add	r3, ip
 800b190:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b192:	1d7b      	adds	r3, r7, #5
 800b194:	33ff      	adds	r3, #255	@ 0xff
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	b29a      	uxth	r2, r3
 800b19a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b19c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b19e:	2076      	movs	r0, #118	@ 0x76
 800b1a0:	183b      	adds	r3, r7, r0
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	8912      	ldrh	r2, [r2, #8]
 800b1a6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	6959      	ldr	r1, [r3, #20]
 800b1ac:	1d7b      	adds	r3, r7, #5
 800b1ae:	33ff      	adds	r3, #255	@ 0xff
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	b29c      	uxth	r4, r3
 800b1b4:	183b      	adds	r3, r7, r0
 800b1b6:	881a      	ldrh	r2, [r3, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	0023      	movs	r3, r4
 800b1bc:	f000 fec8 	bl	800bf50 <USB_WritePMA>
 800b1c0:	e16f      	b.n	800b4a2 <USB_EPStartXfer+0xa26>
 800b1c2:	46c0      	nop			@ (mov r8, r8)
 800b1c4:	00000402 	.word	0x00000402
 800b1c8:	ffff8000 	.word	0xffff8000
 800b1cc:	00000406 	.word	0x00000406
 800b1d0:	ffff8e8f 	.word	0xffff8e8f
 800b1d4:	ffff8080 	.word	0xffff8080
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
<<<<<<< HEAD
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	6a1a      	ldr	r2, [r3, #32]
 800c0a4:	1d7b      	adds	r3, r7, #5
 800c0a6:	33ff      	adds	r3, #255	@ 0xff
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	1ad2      	subs	r2, r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	18d3      	adds	r3, r2, r3
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	001a      	movs	r2, r3
 800c0c0:	2340      	movs	r3, #64	@ 0x40
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	d100      	bne.n	800c0c8 <USB_EPStartXfer+0x784>
 800c0c6:	e0a4      	b.n	800c212 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	785b      	ldrb	r3, [r3, #1]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d000      	beq.n	800c0d6 <USB_EPStartXfer+0x792>
 800c0d4:	e070      	b.n	800c1b8 <USB_EPStartXfer+0x874>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2250      	movs	r2, #80	@ 0x50
 800c0de:	5a9b      	ldrh	r3, [r3, r2]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	001a      	movs	r2, r3
 800c0e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0e6:	189b      	adds	r3, r3, r2
 800c0e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	00da      	lsls	r2, r3, #3
 800c0f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f2:	18d3      	adds	r3, r2, r3
 800c0f4:	4ada      	ldr	r2, [pc, #872]	@ (800c460 <USB_EPStartXfer+0xb1c>)
 800c0f6:	4694      	mov	ip, r2
 800c0f8:	4463      	add	r3, ip
 800c0fa:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	059b      	lsls	r3, r3, #22
 800c104:	0d9b      	lsrs	r3, r3, #22
 800c106:	b29a      	uxth	r2, r3
 800c108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c10a:	801a      	strh	r2, [r3, #0]
 800c10c:	1d7b      	adds	r3, r7, #5
 800c10e:	33ff      	adds	r3, #255	@ 0xff
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d108      	bne.n	800c128 <USB_EPStartXfer+0x7e4>
 800c116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4ad1      	ldr	r2, [pc, #836]	@ (800c464 <USB_EPStartXfer+0xb20>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	b29a      	uxth	r2, r3
 800c122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c124:	801a      	strh	r2, [r3, #0]
 800c126:	e062      	b.n	800c1ee <USB_EPStartXfer+0x8aa>
 800c128:	1d7b      	adds	r3, r7, #5
 800c12a:	33ff      	adds	r3, #255	@ 0xff
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c130:	d81f      	bhi.n	800c172 <USB_EPStartXfer+0x82e>
 800c132:	1d7b      	adds	r3, r7, #5
 800c134:	33ff      	adds	r3, #255	@ 0xff
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	085b      	lsrs	r3, r3, #1
 800c13a:	21f0      	movs	r1, #240	@ 0xf0
 800c13c:	187a      	adds	r2, r7, r1
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	1d7b      	adds	r3, r7, #5
 800c142:	33ff      	adds	r3, #255	@ 0xff
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2201      	movs	r2, #1
 800c148:	4013      	ands	r3, r2
 800c14a:	d004      	beq.n	800c156 <USB_EPStartXfer+0x812>
 800c14c:	187b      	adds	r3, r7, r1
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3301      	adds	r3, #1
 800c152:	187a      	adds	r2, r7, r1
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	23f0      	movs	r3, #240	@ 0xf0
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	029b      	lsls	r3, r3, #10
 800c166:	b29b      	uxth	r3, r3
 800c168:	4313      	orrs	r3, r2
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c16e:	801a      	strh	r2, [r3, #0]
 800c170:	e03d      	b.n	800c1ee <USB_EPStartXfer+0x8aa>
 800c172:	1d7b      	adds	r3, r7, #5
 800c174:	33ff      	adds	r3, #255	@ 0xff
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	095b      	lsrs	r3, r3, #5
 800c17a:	21f0      	movs	r1, #240	@ 0xf0
 800c17c:	187a      	adds	r2, r7, r1
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	1d7b      	adds	r3, r7, #5
 800c182:	33ff      	adds	r3, #255	@ 0xff
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	221f      	movs	r2, #31
 800c188:	4013      	ands	r3, r2
 800c18a:	d104      	bne.n	800c196 <USB_EPStartXfer+0x852>
 800c18c:	187b      	adds	r3, r7, r1
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3b01      	subs	r3, #1
 800c192:	187a      	adds	r2, r7, r1
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	23f0      	movs	r3, #240	@ 0xf0
 800c19e:	18fb      	adds	r3, r7, r3
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	029b      	lsls	r3, r3, #10
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	4aad      	ldr	r2, [pc, #692]	@ (800c464 <USB_EPStartXfer+0xb20>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1b4:	801a      	strh	r2, [r3, #0]
 800c1b6:	e01a      	b.n	800c1ee <USB_EPStartXfer+0x8aa>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d116      	bne.n	800c1ee <USB_EPStartXfer+0x8aa>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2250      	movs	r2, #80	@ 0x50
 800c1c4:	5a9b      	ldrh	r3, [r3, r2]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	001a      	movs	r2, r3
 800c1ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1cc:	189b      	adds	r3, r3, r2
 800c1ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00da      	lsls	r2, r3, #3
 800c1d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1d8:	18d3      	adds	r3, r2, r3
 800c1da:	4aa1      	ldr	r2, [pc, #644]	@ (800c460 <USB_EPStartXfer+0xb1c>)
 800c1dc:	4694      	mov	ip, r2
 800c1de:	4463      	add	r3, ip
 800c1e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1e2:	1d7b      	adds	r3, r7, #5
 800c1e4:	33ff      	adds	r3, #255	@ 0xff
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c1ee:	2076      	movs	r0, #118	@ 0x76
 800c1f0:	183b      	adds	r3, r7, r0
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	8952      	ldrh	r2, [r2, #10]
 800c1f6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6959      	ldr	r1, [r3, #20]
 800c1fc:	1d7b      	adds	r3, r7, #5
 800c1fe:	33ff      	adds	r3, #255	@ 0xff
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	b29c      	uxth	r4, r3
 800c204:	183b      	adds	r3, r7, r0
 800c206:	881a      	ldrh	r2, [r3, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	0023      	movs	r3, r4
 800c20c:	f000 fe04 	bl	800ce18 <USB_WritePMA>
 800c210:	e0ab      	b.n	800c36a <USB_EPStartXfer+0xa26>
=======
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	1d7b      	adds	r3, r7, #5
 800b1de:	33ff      	adds	r3, #255	@ 0xff
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	1ad2      	subs	r2, r2, r3
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	18d3      	adds	r3, r2, r3
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	001a      	movs	r2, r3
 800b1f8:	2340      	movs	r3, #64	@ 0x40
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	d100      	bne.n	800b200 <USB_EPStartXfer+0x784>
 800b1fe:	e0a4      	b.n	800b34a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	673b      	str	r3, [r7, #112]	@ 0x70
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	785b      	ldrb	r3, [r3, #1]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d000      	beq.n	800b20e <USB_EPStartXfer+0x792>
 800b20c:	e070      	b.n	800b2f0 <USB_EPStartXfer+0x874>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2250      	movs	r2, #80	@ 0x50
 800b216:	5a9b      	ldrh	r3, [r3, r2]
 800b218:	b29b      	uxth	r3, r3
 800b21a:	001a      	movs	r2, r3
 800b21c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b21e:	189b      	adds	r3, r3, r2
 800b220:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	00da      	lsls	r2, r3, #3
 800b228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	4ada      	ldr	r2, [pc, #872]	@ (800b598 <USB_EPStartXfer+0xb1c>)
 800b22e:	4694      	mov	ip, r2
 800b230:	4463      	add	r3, ip
 800b232:	667b      	str	r3, [r7, #100]	@ 0x64
 800b234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	059b      	lsls	r3, r3, #22
 800b23c:	0d9b      	lsrs	r3, r3, #22
 800b23e:	b29a      	uxth	r2, r3
 800b240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	1d7b      	adds	r3, r7, #5
 800b246:	33ff      	adds	r3, #255	@ 0xff
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d108      	bne.n	800b260 <USB_EPStartXfer+0x7e4>
 800b24e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	4ad1      	ldr	r2, [pc, #836]	@ (800b59c <USB_EPStartXfer+0xb20>)
 800b256:	4313      	orrs	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b25c:	801a      	strh	r2, [r3, #0]
 800b25e:	e062      	b.n	800b326 <USB_EPStartXfer+0x8aa>
 800b260:	1d7b      	adds	r3, r7, #5
 800b262:	33ff      	adds	r3, #255	@ 0xff
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b3e      	cmp	r3, #62	@ 0x3e
 800b268:	d81f      	bhi.n	800b2aa <USB_EPStartXfer+0x82e>
 800b26a:	1d7b      	adds	r3, r7, #5
 800b26c:	33ff      	adds	r3, #255	@ 0xff
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	085b      	lsrs	r3, r3, #1
 800b272:	21f0      	movs	r1, #240	@ 0xf0
 800b274:	187a      	adds	r2, r7, r1
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	1d7b      	adds	r3, r7, #5
 800b27a:	33ff      	adds	r3, #255	@ 0xff
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2201      	movs	r2, #1
 800b280:	4013      	ands	r3, r2
 800b282:	d004      	beq.n	800b28e <USB_EPStartXfer+0x812>
 800b284:	187b      	adds	r3, r7, r1
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3301      	adds	r3, #1
 800b28a:	187a      	adds	r2, r7, r1
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	b29a      	uxth	r2, r3
 800b294:	23f0      	movs	r3, #240	@ 0xf0
 800b296:	18fb      	adds	r3, r7, r3
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	029b      	lsls	r3, r3, #10
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2a6:	801a      	strh	r2, [r3, #0]
 800b2a8:	e03d      	b.n	800b326 <USB_EPStartXfer+0x8aa>
 800b2aa:	1d7b      	adds	r3, r7, #5
 800b2ac:	33ff      	adds	r3, #255	@ 0xff
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	095b      	lsrs	r3, r3, #5
 800b2b2:	21f0      	movs	r1, #240	@ 0xf0
 800b2b4:	187a      	adds	r2, r7, r1
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	1d7b      	adds	r3, r7, #5
 800b2ba:	33ff      	adds	r3, #255	@ 0xff
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	221f      	movs	r2, #31
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	d104      	bne.n	800b2ce <USB_EPStartXfer+0x852>
 800b2c4:	187b      	adds	r3, r7, r1
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	187a      	adds	r2, r7, r1
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	23f0      	movs	r3, #240	@ 0xf0
 800b2d6:	18fb      	adds	r3, r7, r3
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	029b      	lsls	r3, r3, #10
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	4aad      	ldr	r2, [pc, #692]	@ (800b59c <USB_EPStartXfer+0xb20>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ec:	801a      	strh	r2, [r3, #0]
 800b2ee:	e01a      	b.n	800b326 <USB_EPStartXfer+0x8aa>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d116      	bne.n	800b326 <USB_EPStartXfer+0x8aa>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2250      	movs	r2, #80	@ 0x50
 800b2fc:	5a9b      	ldrh	r3, [r3, r2]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	001a      	movs	r2, r3
 800b302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b304:	189b      	adds	r3, r3, r2
 800b306:	673b      	str	r3, [r7, #112]	@ 0x70
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	00da      	lsls	r2, r3, #3
 800b30e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b310:	18d3      	adds	r3, r2, r3
 800b312:	4aa1      	ldr	r2, [pc, #644]	@ (800b598 <USB_EPStartXfer+0xb1c>)
 800b314:	4694      	mov	ip, r2
 800b316:	4463      	add	r3, ip
 800b318:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b31a:	1d7b      	adds	r3, r7, #5
 800b31c:	33ff      	adds	r3, #255	@ 0xff
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	b29a      	uxth	r2, r3
 800b322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b324:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b326:	2076      	movs	r0, #118	@ 0x76
 800b328:	183b      	adds	r3, r7, r0
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	8952      	ldrh	r2, [r2, #10]
 800b32e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	6959      	ldr	r1, [r3, #20]
 800b334:	1d7b      	adds	r3, r7, #5
 800b336:	33ff      	adds	r3, #255	@ 0xff
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	b29c      	uxth	r4, r3
 800b33c:	183b      	adds	r3, r7, r0
 800b33e:	881a      	ldrh	r2, [r3, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	0023      	movs	r3, r4
 800b344:	f000 fe04 	bl	800bf50 <USB_WritePMA>
 800b348:	e0ab      	b.n	800b4a2 <USB_EPStartXfer+0xa26>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d000      	beq.n	800c21c <USB_EPStartXfer+0x8d8>
 800c21a:	e070      	b.n	800c2fe <USB_EPStartXfer+0x9ba>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2250      	movs	r2, #80	@ 0x50
 800c224:	5a9b      	ldrh	r3, [r3, r2]
 800c226:	b29b      	uxth	r3, r3
 800c228:	001a      	movs	r2, r3
 800c22a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c22c:	189b      	adds	r3, r3, r2
 800c22e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	00da      	lsls	r2, r3, #3
 800c236:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c238:	18d3      	adds	r3, r2, r3
 800c23a:	4a8b      	ldr	r2, [pc, #556]	@ (800c468 <USB_EPStartXfer+0xb24>)
 800c23c:	4694      	mov	ip, r2
 800c23e:	4463      	add	r3, ip
 800c240:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	b29b      	uxth	r3, r3
 800c248:	059b      	lsls	r3, r3, #22
 800c24a:	0d9b      	lsrs	r3, r3, #22
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c250:	801a      	strh	r2, [r3, #0]
 800c252:	1d7b      	adds	r3, r7, #5
 800c254:	33ff      	adds	r3, #255	@ 0xff
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d108      	bne.n	800c26e <USB_EPStartXfer+0x92a>
 800c25c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	b29b      	uxth	r3, r3
 800c262:	4a80      	ldr	r2, [pc, #512]	@ (800c464 <USB_EPStartXfer+0xb20>)
 800c264:	4313      	orrs	r3, r2
 800c266:	b29a      	uxth	r2, r3
 800c268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	e06c      	b.n	800c348 <USB_EPStartXfer+0xa04>
 800c26e:	1d7b      	adds	r3, r7, #5
 800c270:	33ff      	adds	r3, #255	@ 0xff
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b3e      	cmp	r3, #62	@ 0x3e
 800c276:	d81f      	bhi.n	800c2b8 <USB_EPStartXfer+0x974>
 800c278:	1d7b      	adds	r3, r7, #5
 800c27a:	33ff      	adds	r3, #255	@ 0xff
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	085b      	lsrs	r3, r3, #1
 800c280:	21ec      	movs	r1, #236	@ 0xec
 800c282:	187a      	adds	r2, r7, r1
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	1d7b      	adds	r3, r7, #5
 800c288:	33ff      	adds	r3, #255	@ 0xff
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2201      	movs	r2, #1
 800c28e:	4013      	ands	r3, r2
 800c290:	d004      	beq.n	800c29c <USB_EPStartXfer+0x958>
 800c292:	187b      	adds	r3, r7, r1
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3301      	adds	r3, #1
 800c298:	187a      	adds	r2, r7, r1
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	23ec      	movs	r3, #236	@ 0xec
 800c2a4:	18fb      	adds	r3, r7, r3
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	029b      	lsls	r3, r3, #10
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2b4:	801a      	strh	r2, [r3, #0]
 800c2b6:	e047      	b.n	800c348 <USB_EPStartXfer+0xa04>
 800c2b8:	1d7b      	adds	r3, r7, #5
 800c2ba:	33ff      	adds	r3, #255	@ 0xff
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	095b      	lsrs	r3, r3, #5
 800c2c0:	21ec      	movs	r1, #236	@ 0xec
 800c2c2:	187a      	adds	r2, r7, r1
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	1d7b      	adds	r3, r7, #5
 800c2c8:	33ff      	adds	r3, #255	@ 0xff
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	221f      	movs	r2, #31
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	d104      	bne.n	800c2dc <USB_EPStartXfer+0x998>
 800c2d2:	187b      	adds	r3, r7, r1
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	187a      	adds	r2, r7, r1
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2de:	881b      	ldrh	r3, [r3, #0]
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	23ec      	movs	r3, #236	@ 0xec
 800c2e4:	18fb      	adds	r3, r7, r3
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	029b      	lsls	r3, r3, #10
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	4a5c      	ldr	r2, [pc, #368]	@ (800c464 <USB_EPStartXfer+0xb20>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2fa:	801a      	strh	r2, [r3, #0]
 800c2fc:	e024      	b.n	800c348 <USB_EPStartXfer+0xa04>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	785b      	ldrb	r3, [r3, #1]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d120      	bne.n	800c348 <USB_EPStartXfer+0xa04>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2184      	movs	r1, #132	@ 0x84
 800c30a:	187a      	adds	r2, r7, r1
 800c30c:	6013      	str	r3, [r2, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2250      	movs	r2, #80	@ 0x50
 800c312:	5a9b      	ldrh	r3, [r3, r2]
 800c314:	b29b      	uxth	r3, r3
 800c316:	001a      	movs	r2, r3
 800c318:	187b      	adds	r3, r7, r1
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	189b      	adds	r3, r3, r2
 800c31e:	187a      	adds	r2, r7, r1
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	00da      	lsls	r2, r3, #3
 800c328:	187b      	adds	r3, r7, r1
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	18d3      	adds	r3, r2, r3
 800c32e:	4a4e      	ldr	r2, [pc, #312]	@ (800c468 <USB_EPStartXfer+0xb24>)
 800c330:	4694      	mov	ip, r2
 800c332:	4463      	add	r3, ip
 800c334:	2180      	movs	r1, #128	@ 0x80
 800c336:	187a      	adds	r2, r7, r1
 800c338:	6013      	str	r3, [r2, #0]
 800c33a:	1d7b      	adds	r3, r7, #5
 800c33c:	33ff      	adds	r3, #255	@ 0xff
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	b29a      	uxth	r2, r3
 800c342:	187b      	adds	r3, r7, r1
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c348:	2076      	movs	r0, #118	@ 0x76
 800c34a:	183b      	adds	r3, r7, r0
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	8912      	ldrh	r2, [r2, #8]
 800c350:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6959      	ldr	r1, [r3, #20]
 800c356:	1d7b      	adds	r3, r7, #5
 800c358:	33ff      	adds	r3, #255	@ 0xff
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	b29c      	uxth	r4, r3
 800c35e:	183b      	adds	r3, r7, r0
 800c360:	881a      	ldrh	r2, [r3, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	0023      	movs	r3, r4
 800c366:	f000 fd57 	bl	800ce18 <USB_WritePMA>
=======
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d000      	beq.n	800b354 <USB_EPStartXfer+0x8d8>
 800b352:	e070      	b.n	800b436 <USB_EPStartXfer+0x9ba>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2250      	movs	r2, #80	@ 0x50
 800b35c:	5a9b      	ldrh	r3, [r3, r2]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	001a      	movs	r2, r3
 800b362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b364:	189b      	adds	r3, r3, r2
 800b366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	00da      	lsls	r2, r3, #3
 800b36e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b370:	18d3      	adds	r3, r2, r3
 800b372:	4a8b      	ldr	r2, [pc, #556]	@ (800b5a0 <USB_EPStartXfer+0xb24>)
 800b374:	4694      	mov	ip, r2
 800b376:	4463      	add	r3, ip
 800b378:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b37a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	059b      	lsls	r3, r3, #22
 800b382:	0d9b      	lsrs	r3, r3, #22
 800b384:	b29a      	uxth	r2, r3
 800b386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	1d7b      	adds	r3, r7, #5
 800b38c:	33ff      	adds	r3, #255	@ 0xff
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d108      	bne.n	800b3a6 <USB_EPStartXfer+0x92a>
 800b394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4a80      	ldr	r2, [pc, #512]	@ (800b59c <USB_EPStartXfer+0xb20>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3a2:	801a      	strh	r2, [r3, #0]
 800b3a4:	e06c      	b.n	800b480 <USB_EPStartXfer+0xa04>
 800b3a6:	1d7b      	adds	r3, r7, #5
 800b3a8:	33ff      	adds	r3, #255	@ 0xff
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3ae:	d81f      	bhi.n	800b3f0 <USB_EPStartXfer+0x974>
 800b3b0:	1d7b      	adds	r3, r7, #5
 800b3b2:	33ff      	adds	r3, #255	@ 0xff
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	085b      	lsrs	r3, r3, #1
 800b3b8:	21ec      	movs	r1, #236	@ 0xec
 800b3ba:	187a      	adds	r2, r7, r1
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	1d7b      	adds	r3, r7, #5
 800b3c0:	33ff      	adds	r3, #255	@ 0xff
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	d004      	beq.n	800b3d4 <USB_EPStartXfer+0x958>
 800b3ca:	187b      	adds	r3, r7, r1
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	187a      	adds	r2, r7, r1
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	23ec      	movs	r3, #236	@ 0xec
 800b3dc:	18fb      	adds	r3, r7, r3
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	029b      	lsls	r3, r3, #10
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3ec:	801a      	strh	r2, [r3, #0]
 800b3ee:	e047      	b.n	800b480 <USB_EPStartXfer+0xa04>
 800b3f0:	1d7b      	adds	r3, r7, #5
 800b3f2:	33ff      	adds	r3, #255	@ 0xff
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	21ec      	movs	r1, #236	@ 0xec
 800b3fa:	187a      	adds	r2, r7, r1
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	1d7b      	adds	r3, r7, #5
 800b400:	33ff      	adds	r3, #255	@ 0xff
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	221f      	movs	r2, #31
 800b406:	4013      	ands	r3, r2
 800b408:	d104      	bne.n	800b414 <USB_EPStartXfer+0x998>
 800b40a:	187b      	adds	r3, r7, r1
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3b01      	subs	r3, #1
 800b410:	187a      	adds	r2, r7, r1
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	b29a      	uxth	r2, r3
 800b41a:	23ec      	movs	r3, #236	@ 0xec
 800b41c:	18fb      	adds	r3, r7, r3
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	b29b      	uxth	r3, r3
 800b422:	029b      	lsls	r3, r3, #10
 800b424:	b29b      	uxth	r3, r3
 800b426:	4313      	orrs	r3, r2
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4a5c      	ldr	r2, [pc, #368]	@ (800b59c <USB_EPStartXfer+0xb20>)
 800b42c:	4313      	orrs	r3, r2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	e024      	b.n	800b480 <USB_EPStartXfer+0xa04>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d120      	bne.n	800b480 <USB_EPStartXfer+0xa04>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2184      	movs	r1, #132	@ 0x84
 800b442:	187a      	adds	r2, r7, r1
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2250      	movs	r2, #80	@ 0x50
 800b44a:	5a9b      	ldrh	r3, [r3, r2]
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	001a      	movs	r2, r3
 800b450:	187b      	adds	r3, r7, r1
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	189b      	adds	r3, r3, r2
 800b456:	187a      	adds	r2, r7, r1
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	00da      	lsls	r2, r3, #3
 800b460:	187b      	adds	r3, r7, r1
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	18d3      	adds	r3, r2, r3
 800b466:	4a4e      	ldr	r2, [pc, #312]	@ (800b5a0 <USB_EPStartXfer+0xb24>)
 800b468:	4694      	mov	ip, r2
 800b46a:	4463      	add	r3, ip
 800b46c:	2180      	movs	r1, #128	@ 0x80
 800b46e:	187a      	adds	r2, r7, r1
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	1d7b      	adds	r3, r7, #5
 800b474:	33ff      	adds	r3, #255	@ 0xff
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	187b      	adds	r3, r7, r1
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b480:	2076      	movs	r0, #118	@ 0x76
 800b482:	183b      	adds	r3, r7, r0
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	8912      	ldrh	r2, [r2, #8]
 800b488:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	6959      	ldr	r1, [r3, #20]
 800b48e:	1d7b      	adds	r3, r7, #5
 800b490:	33ff      	adds	r3, #255	@ 0xff
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	b29c      	uxth	r4, r3
 800b496:	183b      	adds	r3, r7, r0
 800b498:	881a      	ldrh	r2, [r3, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	0023      	movs	r3, r4
 800b49e:	f000 fd57 	bl	800bf50 <USB_WritePMA>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	18d3      	adds	r3, r2, r3
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	b29a      	uxth	r2, r3
 800c378:	200a      	movs	r0, #10
 800c37a:	183b      	adds	r3, r7, r0
 800c37c:	493b      	ldr	r1, [pc, #236]	@ (800c46c <USB_EPStartXfer+0xb28>)
 800c37e:	400a      	ands	r2, r1
 800c380:	801a      	strh	r2, [r3, #0]
 800c382:	183b      	adds	r3, r7, r0
 800c384:	183a      	adds	r2, r7, r0
 800c386:	8812      	ldrh	r2, [r2, #0]
 800c388:	2110      	movs	r1, #16
 800c38a:	404a      	eors	r2, r1
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	183b      	adds	r3, r7, r0
 800c390:	183a      	adds	r2, r7, r0
 800c392:	8812      	ldrh	r2, [r2, #0]
 800c394:	2120      	movs	r1, #32
 800c396:	404a      	eors	r2, r1
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	18d3      	adds	r3, r2, r3
 800c3a4:	183a      	adds	r2, r7, r0
 800c3a6:	8812      	ldrh	r2, [r2, #0]
 800c3a8:	4931      	ldr	r1, [pc, #196]	@ (800c470 <USB_EPStartXfer+0xb2c>)
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	f000 fbe9 	bl	800cb86 <USB_EPStartXfer+0x1242>
=======
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	18d3      	adds	r3, r2, r3
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	200a      	movs	r0, #10
 800b4b2:	183b      	adds	r3, r7, r0
 800b4b4:	493b      	ldr	r1, [pc, #236]	@ (800b5a4 <USB_EPStartXfer+0xb28>)
 800b4b6:	400a      	ands	r2, r1
 800b4b8:	801a      	strh	r2, [r3, #0]
 800b4ba:	183b      	adds	r3, r7, r0
 800b4bc:	183a      	adds	r2, r7, r0
 800b4be:	8812      	ldrh	r2, [r2, #0]
 800b4c0:	2110      	movs	r1, #16
 800b4c2:	404a      	eors	r2, r1
 800b4c4:	801a      	strh	r2, [r3, #0]
 800b4c6:	183b      	adds	r3, r7, r0
 800b4c8:	183a      	adds	r2, r7, r0
 800b4ca:	8812      	ldrh	r2, [r2, #0]
 800b4cc:	2120      	movs	r1, #32
 800b4ce:	404a      	eors	r2, r1
 800b4d0:	801a      	strh	r2, [r3, #0]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	18d3      	adds	r3, r2, r3
 800b4dc:	183a      	adds	r2, r7, r0
 800b4de:	8812      	ldrh	r2, [r2, #0]
 800b4e0:	4931      	ldr	r1, [pc, #196]	@ (800b5a8 <USB_EPStartXfer+0xb2c>)
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	b292      	uxth	r2, r2
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	f000 fbe9 	bl	800bcbe <USB_EPStartXfer+0x1242>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	7b1b      	ldrb	r3, [r3, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d000      	beq.n	800c3be <USB_EPStartXfer+0xa7a>
 800c3bc:	e0a8      	b.n	800c510 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	699a      	ldr	r2, [r3, #24]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d90d      	bls.n	800c3e6 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	1d7a      	adds	r2, r7, #5
 800c3d0:	32ff      	adds	r2, #255	@ 0xff
 800c3d2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	1d7b      	adds	r3, r7, #5
 800c3da:	33ff      	adds	r3, #255	@ 0xff
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	619a      	str	r2, [r3, #24]
 800c3e4:	e007      	b.n	800c3f6 <USB_EPStartXfer+0xab2>
=======
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	7b1b      	ldrb	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d000      	beq.n	800b4f6 <USB_EPStartXfer+0xa7a>
 800b4f4:	e0a8      	b.n	800b648 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d90d      	bls.n	800b51e <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	1d7a      	adds	r2, r7, #5
 800b508:	32ff      	adds	r2, #255	@ 0xff
 800b50a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	699a      	ldr	r2, [r3, #24]
 800b510:	1d7b      	adds	r3, r7, #5
 800b512:	33ff      	adds	r3, #255	@ 0xff
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	619a      	str	r2, [r3, #24]
 800b51c:	e007      	b.n	800b52e <USB_EPStartXfer+0xab2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        len = ep->xfer_len;
<<<<<<< HEAD
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	1d7a      	adds	r2, r7, #5
 800c3ec:	32ff      	adds	r2, #255	@ 0xff
 800c3ee:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2190      	movs	r1, #144	@ 0x90
 800c3fa:	187a      	adds	r2, r7, r1
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2250      	movs	r2, #80	@ 0x50
 800c402:	5a9b      	ldrh	r3, [r3, r2]
 800c404:	b29b      	uxth	r3, r3
 800c406:	001a      	movs	r2, r3
 800c408:	187b      	adds	r3, r7, r1
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	189b      	adds	r3, r3, r2
 800c40e:	187a      	adds	r2, r7, r1
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	00da      	lsls	r2, r3, #3
 800c418:	187b      	adds	r3, r7, r1
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	18d3      	adds	r3, r2, r3
 800c41e:	4a10      	ldr	r2, [pc, #64]	@ (800c460 <USB_EPStartXfer+0xb1c>)
 800c420:	4694      	mov	ip, r2
 800c422:	4463      	add	r3, ip
 800c424:	218c      	movs	r1, #140	@ 0x8c
 800c426:	187a      	adds	r2, r7, r1
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	187b      	adds	r3, r7, r1
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	b29b      	uxth	r3, r3
 800c432:	059b      	lsls	r3, r3, #22
 800c434:	0d9b      	lsrs	r3, r3, #22
 800c436:	b29a      	uxth	r2, r3
 800c438:	187b      	adds	r3, r7, r1
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	801a      	strh	r2, [r3, #0]
 800c43e:	1d7b      	adds	r3, r7, #5
 800c440:	33ff      	adds	r3, #255	@ 0xff
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d115      	bne.n	800c474 <USB_EPStartXfer+0xb30>
 800c448:	187b      	adds	r3, r7, r1
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	4a04      	ldr	r2, [pc, #16]	@ (800c464 <USB_EPStartXfer+0xb20>)
 800c452:	4313      	orrs	r3, r2
 800c454:	b29a      	uxth	r2, r3
 800c456:	187b      	adds	r3, r7, r1
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	801a      	strh	r2, [r3, #0]
 800c45c:	e36e      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
 800c45e:	46c0      	nop			@ (mov r8, r8)
 800c460:	00000406 	.word	0x00000406
 800c464:	ffff8000 	.word	0xffff8000
 800c468:	00000402 	.word	0x00000402
 800c46c:	ffff8fbf 	.word	0xffff8fbf
 800c470:	ffff8080 	.word	0xffff8080
 800c474:	1d7b      	adds	r3, r7, #5
 800c476:	33ff      	adds	r3, #255	@ 0xff
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c47c:	d822      	bhi.n	800c4c4 <USB_EPStartXfer+0xb80>
 800c47e:	1d7b      	adds	r3, r7, #5
 800c480:	33ff      	adds	r3, #255	@ 0xff
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	085b      	lsrs	r3, r3, #1
 800c486:	21e8      	movs	r1, #232	@ 0xe8
 800c488:	187a      	adds	r2, r7, r1
 800c48a:	6013      	str	r3, [r2, #0]
 800c48c:	1d7b      	adds	r3, r7, #5
 800c48e:	33ff      	adds	r3, #255	@ 0xff
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2201      	movs	r2, #1
 800c494:	4013      	ands	r3, r2
 800c496:	d004      	beq.n	800c4a2 <USB_EPStartXfer+0xb5e>
 800c498:	187b      	adds	r3, r7, r1
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	187a      	adds	r2, r7, r1
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	218c      	movs	r1, #140	@ 0x8c
 800c4a4:	187b      	adds	r3, r7, r1
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	23e8      	movs	r3, #232	@ 0xe8
 800c4ae:	18fb      	adds	r3, r7, r3
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	029b      	lsls	r3, r3, #10
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	187b      	adds	r3, r7, r1
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	801a      	strh	r2, [r3, #0]
 800c4c2:	e33b      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
 800c4c4:	1d7b      	adds	r3, r7, #5
 800c4c6:	33ff      	adds	r3, #255	@ 0xff
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	095b      	lsrs	r3, r3, #5
 800c4cc:	21e8      	movs	r1, #232	@ 0xe8
 800c4ce:	187a      	adds	r2, r7, r1
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	1d7b      	adds	r3, r7, #5
 800c4d4:	33ff      	adds	r3, #255	@ 0xff
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	221f      	movs	r2, #31
 800c4da:	4013      	ands	r3, r2
 800c4dc:	d104      	bne.n	800c4e8 <USB_EPStartXfer+0xba4>
 800c4de:	187b      	adds	r3, r7, r1
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	187a      	adds	r2, r7, r1
 800c4e6:	6013      	str	r3, [r2, #0]
 800c4e8:	218c      	movs	r1, #140	@ 0x8c
 800c4ea:	187b      	adds	r3, r7, r1
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	23e8      	movs	r3, #232	@ 0xe8
 800c4f4:	18fb      	adds	r3, r7, r3
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	029b      	lsls	r3, r3, #10
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	b29b      	uxth	r3, r3
 800c502:	4ad7      	ldr	r2, [pc, #860]	@ (800c860 <USB_EPStartXfer+0xf1c>)
 800c504:	4313      	orrs	r3, r2
 800c506:	b29a      	uxth	r2, r3
 800c508:	187b      	adds	r3, r7, r1
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	801a      	strh	r2, [r3, #0]
 800c50e:	e315      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
=======
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	1d7a      	adds	r2, r7, #5
 800b524:	32ff      	adds	r2, #255	@ 0xff
 800b526:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2190      	movs	r1, #144	@ 0x90
 800b532:	187a      	adds	r2, r7, r1
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2250      	movs	r2, #80	@ 0x50
 800b53a:	5a9b      	ldrh	r3, [r3, r2]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	001a      	movs	r2, r3
 800b540:	187b      	adds	r3, r7, r1
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	189b      	adds	r3, r3, r2
 800b546:	187a      	adds	r2, r7, r1
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	00da      	lsls	r2, r3, #3
 800b550:	187b      	adds	r3, r7, r1
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	18d3      	adds	r3, r2, r3
 800b556:	4a10      	ldr	r2, [pc, #64]	@ (800b598 <USB_EPStartXfer+0xb1c>)
 800b558:	4694      	mov	ip, r2
 800b55a:	4463      	add	r3, ip
 800b55c:	218c      	movs	r1, #140	@ 0x8c
 800b55e:	187a      	adds	r2, r7, r1
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	187b      	adds	r3, r7, r1
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	059b      	lsls	r3, r3, #22
 800b56c:	0d9b      	lsrs	r3, r3, #22
 800b56e:	b29a      	uxth	r2, r3
 800b570:	187b      	adds	r3, r7, r1
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	801a      	strh	r2, [r3, #0]
 800b576:	1d7b      	adds	r3, r7, #5
 800b578:	33ff      	adds	r3, #255	@ 0xff
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d115      	bne.n	800b5ac <USB_EPStartXfer+0xb30>
 800b580:	187b      	adds	r3, r7, r1
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	b29b      	uxth	r3, r3
 800b588:	4a04      	ldr	r2, [pc, #16]	@ (800b59c <USB_EPStartXfer+0xb20>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	187b      	adds	r3, r7, r1
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	e36e      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
 800b596:	46c0      	nop			@ (mov r8, r8)
 800b598:	00000406 	.word	0x00000406
 800b59c:	ffff8000 	.word	0xffff8000
 800b5a0:	00000402 	.word	0x00000402
 800b5a4:	ffff8fbf 	.word	0xffff8fbf
 800b5a8:	ffff8080 	.word	0xffff8080
 800b5ac:	1d7b      	adds	r3, r7, #5
 800b5ae:	33ff      	adds	r3, #255	@ 0xff
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5b4:	d822      	bhi.n	800b5fc <USB_EPStartXfer+0xb80>
 800b5b6:	1d7b      	adds	r3, r7, #5
 800b5b8:	33ff      	adds	r3, #255	@ 0xff
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	085b      	lsrs	r3, r3, #1
 800b5be:	21e8      	movs	r1, #232	@ 0xe8
 800b5c0:	187a      	adds	r2, r7, r1
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	1d7b      	adds	r3, r7, #5
 800b5c6:	33ff      	adds	r3, #255	@ 0xff
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	d004      	beq.n	800b5da <USB_EPStartXfer+0xb5e>
 800b5d0:	187b      	adds	r3, r7, r1
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	187a      	adds	r2, r7, r1
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	218c      	movs	r1, #140	@ 0x8c
 800b5dc:	187b      	adds	r3, r7, r1
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	23e8      	movs	r3, #232	@ 0xe8
 800b5e6:	18fb      	adds	r3, r7, r3
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	187b      	adds	r3, r7, r1
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	801a      	strh	r2, [r3, #0]
 800b5fa:	e33b      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
 800b5fc:	1d7b      	adds	r3, r7, #5
 800b5fe:	33ff      	adds	r3, #255	@ 0xff
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	095b      	lsrs	r3, r3, #5
 800b604:	21e8      	movs	r1, #232	@ 0xe8
 800b606:	187a      	adds	r2, r7, r1
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	1d7b      	adds	r3, r7, #5
 800b60c:	33ff      	adds	r3, #255	@ 0xff
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	221f      	movs	r2, #31
 800b612:	4013      	ands	r3, r2
 800b614:	d104      	bne.n	800b620 <USB_EPStartXfer+0xba4>
 800b616:	187b      	adds	r3, r7, r1
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	187a      	adds	r2, r7, r1
 800b61e:	6013      	str	r3, [r2, #0]
 800b620:	218c      	movs	r1, #140	@ 0x8c
 800b622:	187b      	adds	r3, r7, r1
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	b29a      	uxth	r2, r3
 800b62a:	23e8      	movs	r3, #232	@ 0xe8
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	b29b      	uxth	r3, r3
 800b632:	029b      	lsls	r3, r3, #10
 800b634:	b29b      	uxth	r3, r3
 800b636:	4313      	orrs	r3, r2
 800b638:	b29b      	uxth	r3, r3
 800b63a:	4ad7      	ldr	r2, [pc, #860]	@ (800b998 <USB_EPStartXfer+0xf1c>)
 800b63c:	4313      	orrs	r3, r2
 800b63e:	b29a      	uxth	r2, r3
 800b640:	187b      	adds	r3, r7, r1
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	801a      	strh	r2, [r3, #0]
 800b646:	e315      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	78db      	ldrb	r3, [r3, #3]
 800c514:	2b02      	cmp	r3, #2
 800c516:	d000      	beq.n	800c51a <USB_EPStartXfer+0xbd6>
 800c518:	e189      	b.n	800c82e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	785b      	ldrb	r3, [r3, #1]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d000      	beq.n	800c524 <USB_EPStartXfer+0xbe0>
 800c522:	e07b      	b.n	800c61c <USB_EPStartXfer+0xcd8>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	21ac      	movs	r1, #172	@ 0xac
 800c528:	187a      	adds	r2, r7, r1
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2250      	movs	r2, #80	@ 0x50
 800c530:	5a9b      	ldrh	r3, [r3, r2]
 800c532:	b29b      	uxth	r3, r3
 800c534:	001a      	movs	r2, r3
 800c536:	187b      	adds	r3, r7, r1
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	189b      	adds	r3, r3, r2
 800c53c:	187a      	adds	r2, r7, r1
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	00da      	lsls	r2, r3, #3
 800c546:	187b      	adds	r3, r7, r1
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	18d3      	adds	r3, r2, r3
 800c54c:	4ac5      	ldr	r2, [pc, #788]	@ (800c864 <USB_EPStartXfer+0xf20>)
 800c54e:	4694      	mov	ip, r2
 800c550:	4463      	add	r3, ip
 800c552:	21a8      	movs	r1, #168	@ 0xa8
 800c554:	187a      	adds	r2, r7, r1
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	187b      	adds	r3, r7, r1
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	059b      	lsls	r3, r3, #22
 800c562:	0d9b      	lsrs	r3, r3, #22
 800c564:	b29a      	uxth	r2, r3
 800c566:	187b      	adds	r3, r7, r1
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <USB_EPStartXfer+0xc46>
 800c574:	187b      	adds	r3, r7, r1
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	4ab8      	ldr	r2, [pc, #736]	@ (800c860 <USB_EPStartXfer+0xf1c>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	b29a      	uxth	r2, r3
 800c582:	187b      	adds	r3, r7, r1
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	801a      	strh	r2, [r3, #0]
 800c588:	e06c      	b.n	800c664 <USB_EPStartXfer+0xd20>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c590:	d820      	bhi.n	800c5d4 <USB_EPStartXfer+0xc90>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	085b      	lsrs	r3, r3, #1
 800c598:	21e4      	movs	r1, #228	@ 0xe4
 800c59a:	187a      	adds	r2, r7, r1
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	d004      	beq.n	800c5b2 <USB_EPStartXfer+0xc6e>
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	187a      	adds	r2, r7, r1
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	21a8      	movs	r1, #168	@ 0xa8
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	23e4      	movs	r3, #228	@ 0xe4
 800c5be:	18fb      	adds	r3, r7, r3
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	029b      	lsls	r3, r3, #10
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	187b      	adds	r3, r7, r1
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	801a      	strh	r2, [r3, #0]
 800c5d2:	e047      	b.n	800c664 <USB_EPStartXfer+0xd20>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	095b      	lsrs	r3, r3, #5
 800c5da:	21e4      	movs	r1, #228	@ 0xe4
 800c5dc:	187a      	adds	r2, r7, r1
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	221f      	movs	r2, #31
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	d104      	bne.n	800c5f4 <USB_EPStartXfer+0xcb0>
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	187a      	adds	r2, r7, r1
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	21a8      	movs	r1, #168	@ 0xa8
 800c5f6:	187b      	adds	r3, r7, r1
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	23e4      	movs	r3, #228	@ 0xe4
 800c600:	18fb      	adds	r3, r7, r3
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	b29b      	uxth	r3, r3
 800c606:	029b      	lsls	r3, r3, #10
 800c608:	b29b      	uxth	r3, r3
 800c60a:	4313      	orrs	r3, r2
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	4a94      	ldr	r2, [pc, #592]	@ (800c860 <USB_EPStartXfer+0xf1c>)
 800c610:	4313      	orrs	r3, r2
 800c612:	b29a      	uxth	r2, r3
 800c614:	187b      	adds	r3, r7, r1
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	801a      	strh	r2, [r3, #0]
 800c61a:	e023      	b.n	800c664 <USB_EPStartXfer+0xd20>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d11f      	bne.n	800c664 <USB_EPStartXfer+0xd20>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	21b4      	movs	r1, #180	@ 0xb4
 800c628:	187a      	adds	r2, r7, r1
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2250      	movs	r2, #80	@ 0x50
 800c630:	5a9b      	ldrh	r3, [r3, r2]
 800c632:	b29b      	uxth	r3, r3
 800c634:	001a      	movs	r2, r3
 800c636:	187b      	adds	r3, r7, r1
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	189b      	adds	r3, r3, r2
 800c63c:	187a      	adds	r2, r7, r1
 800c63e:	6013      	str	r3, [r2, #0]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	00da      	lsls	r2, r3, #3
 800c646:	187b      	adds	r3, r7, r1
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	18d3      	adds	r3, r2, r3
 800c64c:	4a85      	ldr	r2, [pc, #532]	@ (800c864 <USB_EPStartXfer+0xf20>)
 800c64e:	4694      	mov	ip, r2
 800c650:	4463      	add	r3, ip
 800c652:	21b0      	movs	r1, #176	@ 0xb0
 800c654:	187a      	adds	r2, r7, r1
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	187b      	adds	r3, r7, r1
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	801a      	strh	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	22a4      	movs	r2, #164	@ 0xa4
 800c668:	18ba      	adds	r2, r7, r2
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d000      	beq.n	800c676 <USB_EPStartXfer+0xd32>
 800c674:	e07b      	b.n	800c76e <USB_EPStartXfer+0xe2a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	219c      	movs	r1, #156	@ 0x9c
 800c67a:	187a      	adds	r2, r7, r1
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2250      	movs	r2, #80	@ 0x50
 800c682:	5a9b      	ldrh	r3, [r3, r2]
 800c684:	b29b      	uxth	r3, r3
 800c686:	001a      	movs	r2, r3
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	189b      	adds	r3, r3, r2
 800c68e:	187a      	adds	r2, r7, r1
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	00da      	lsls	r2, r3, #3
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	18d3      	adds	r3, r2, r3
 800c69e:	4a72      	ldr	r2, [pc, #456]	@ (800c868 <USB_EPStartXfer+0xf24>)
 800c6a0:	4694      	mov	ip, r2
 800c6a2:	4463      	add	r3, ip
 800c6a4:	2198      	movs	r1, #152	@ 0x98
 800c6a6:	187a      	adds	r2, r7, r1
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	187b      	adds	r3, r7, r1
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	059b      	lsls	r3, r3, #22
 800c6b4:	0d9b      	lsrs	r3, r3, #22
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	187b      	adds	r3, r7, r1
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	801a      	strh	r2, [r3, #0]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <USB_EPStartXfer+0xd98>
 800c6c6:	187b      	adds	r3, r7, r1
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	4a64      	ldr	r2, [pc, #400]	@ (800c860 <USB_EPStartXfer+0xf1c>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	187b      	adds	r3, r7, r1
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	801a      	strh	r2, [r3, #0]
 800c6da:	e069      	b.n	800c7b0 <USB_EPStartXfer+0xe6c>
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6e2:	d820      	bhi.n	800c726 <USB_EPStartXfer+0xde2>
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	085b      	lsrs	r3, r3, #1
 800c6ea:	21e0      	movs	r1, #224	@ 0xe0
 800c6ec:	187a      	adds	r2, r7, r1
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	d004      	beq.n	800c704 <USB_EPStartXfer+0xdc0>
 800c6fa:	187b      	adds	r3, r7, r1
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3301      	adds	r3, #1
 800c700:	187a      	adds	r2, r7, r1
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	2198      	movs	r1, #152	@ 0x98
 800c706:	187b      	adds	r3, r7, r1
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	23e0      	movs	r3, #224	@ 0xe0
 800c710:	18fb      	adds	r3, r7, r3
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	b29b      	uxth	r3, r3
 800c716:	029b      	lsls	r3, r3, #10
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4313      	orrs	r3, r2
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	801a      	strh	r2, [r3, #0]
 800c724:	e044      	b.n	800c7b0 <USB_EPStartXfer+0xe6c>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	095b      	lsrs	r3, r3, #5
 800c72c:	21e0      	movs	r1, #224	@ 0xe0
 800c72e:	187a      	adds	r2, r7, r1
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	221f      	movs	r2, #31
 800c738:	4013      	ands	r3, r2
 800c73a:	d104      	bne.n	800c746 <USB_EPStartXfer+0xe02>
 800c73c:	187b      	adds	r3, r7, r1
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3b01      	subs	r3, #1
 800c742:	187a      	adds	r2, r7, r1
 800c744:	6013      	str	r3, [r2, #0]
 800c746:	2198      	movs	r1, #152	@ 0x98
 800c748:	187b      	adds	r3, r7, r1
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	23e0      	movs	r3, #224	@ 0xe0
 800c752:	18fb      	adds	r3, r7, r3
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	b29b      	uxth	r3, r3
 800c758:	029b      	lsls	r3, r3, #10
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4313      	orrs	r3, r2
 800c75e:	b29b      	uxth	r3, r3
 800c760:	4a3f      	ldr	r2, [pc, #252]	@ (800c860 <USB_EPStartXfer+0xf1c>)
 800c762:	4313      	orrs	r3, r2
 800c764:	b29a      	uxth	r2, r3
 800c766:	187b      	adds	r3, r7, r1
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	801a      	strh	r2, [r3, #0]
 800c76c:	e020      	b.n	800c7b0 <USB_EPStartXfer+0xe6c>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	785b      	ldrb	r3, [r3, #1]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d11c      	bne.n	800c7b0 <USB_EPStartXfer+0xe6c>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2250      	movs	r2, #80	@ 0x50
 800c77a:	5a9b      	ldrh	r3, [r3, r2]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	001a      	movs	r2, r3
 800c780:	21a4      	movs	r1, #164	@ 0xa4
 800c782:	187b      	adds	r3, r7, r1
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	189b      	adds	r3, r3, r2
 800c788:	187a      	adds	r2, r7, r1
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	00da      	lsls	r2, r3, #3
 800c792:	187b      	adds	r3, r7, r1
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	18d3      	adds	r3, r2, r3
 800c798:	4a33      	ldr	r2, [pc, #204]	@ (800c868 <USB_EPStartXfer+0xf24>)
 800c79a:	4694      	mov	ip, r2
 800c79c:	4463      	add	r3, ip
 800c79e:	21a0      	movs	r1, #160	@ 0xa0
 800c7a0:	187a      	adds	r2, r7, r1
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	187b      	adds	r3, r7, r1
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d100      	bne.n	800c7ba <USB_EPStartXfer+0xe76>
 800c7b8:	e1c0      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	18d2      	adds	r2, r2, r3
 800c7c4:	2196      	movs	r1, #150	@ 0x96
 800c7c6:	187b      	adds	r3, r7, r1
 800c7c8:	8812      	ldrh	r2, [r2, #0]
 800c7ca:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	881a      	ldrh	r2, [r3, #0]
 800c7d0:	2380      	movs	r3, #128	@ 0x80
 800c7d2:	01db      	lsls	r3, r3, #7
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	d004      	beq.n	800c7e2 <USB_EPStartXfer+0xe9e>
 800c7d8:	187b      	adds	r3, r7, r1
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	2240      	movs	r2, #64	@ 0x40
 800c7de:	4013      	ands	r3, r2
 800c7e0:	d10d      	bne.n	800c7fe <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c7e2:	2196      	movs	r1, #150	@ 0x96
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	881a      	ldrh	r2, [r3, #0]
 800c7e8:	2380      	movs	r3, #128	@ 0x80
 800c7ea:	01db      	lsls	r3, r3, #7
 800c7ec:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c7ee:	d000      	beq.n	800c7f2 <USB_EPStartXfer+0xeae>
 800c7f0:	e1a4      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c7f2:	187b      	adds	r3, r7, r1
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	2240      	movs	r2, #64	@ 0x40
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	d000      	beq.n	800c7fe <USB_EPStartXfer+0xeba>
 800c7fc:	e19e      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	18d3      	adds	r3, r2, r3
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	2094      	movs	r0, #148	@ 0x94
 800c80e:	183b      	adds	r3, r7, r0
 800c810:	4916      	ldr	r1, [pc, #88]	@ (800c86c <USB_EPStartXfer+0xf28>)
 800c812:	400a      	ands	r2, r1
 800c814:	801a      	strh	r2, [r3, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	18d3      	adds	r3, r2, r3
 800c820:	183a      	adds	r2, r7, r0
 800c822:	8812      	ldrh	r2, [r2, #0]
 800c824:	4912      	ldr	r1, [pc, #72]	@ (800c870 <USB_EPStartXfer+0xf2c>)
 800c826:	430a      	orrs	r2, r1
 800c828:	b292      	uxth	r2, r2
 800c82a:	801a      	strh	r2, [r3, #0]
 800c82c:	e186      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
=======
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	78db      	ldrb	r3, [r3, #3]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d000      	beq.n	800b652 <USB_EPStartXfer+0xbd6>
 800b650:	e189      	b.n	800b966 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	785b      	ldrb	r3, [r3, #1]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d000      	beq.n	800b65c <USB_EPStartXfer+0xbe0>
 800b65a:	e07b      	b.n	800b754 <USB_EPStartXfer+0xcd8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	21ac      	movs	r1, #172	@ 0xac
 800b660:	187a      	adds	r2, r7, r1
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2250      	movs	r2, #80	@ 0x50
 800b668:	5a9b      	ldrh	r3, [r3, r2]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	001a      	movs	r2, r3
 800b66e:	187b      	adds	r3, r7, r1
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	189b      	adds	r3, r3, r2
 800b674:	187a      	adds	r2, r7, r1
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	00da      	lsls	r2, r3, #3
 800b67e:	187b      	adds	r3, r7, r1
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	18d3      	adds	r3, r2, r3
 800b684:	4ac5      	ldr	r2, [pc, #788]	@ (800b99c <USB_EPStartXfer+0xf20>)
 800b686:	4694      	mov	ip, r2
 800b688:	4463      	add	r3, ip
 800b68a:	21a8      	movs	r1, #168	@ 0xa8
 800b68c:	187a      	adds	r2, r7, r1
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	187b      	adds	r3, r7, r1
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	b29b      	uxth	r3, r3
 800b698:	059b      	lsls	r3, r3, #22
 800b69a:	0d9b      	lsrs	r3, r3, #22
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	187b      	adds	r3, r7, r1
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <USB_EPStartXfer+0xc46>
 800b6ac:	187b      	adds	r3, r7, r1
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	4ab8      	ldr	r2, [pc, #736]	@ (800b998 <USB_EPStartXfer+0xf1c>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	187b      	adds	r3, r7, r1
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	801a      	strh	r2, [r3, #0]
 800b6c0:	e06c      	b.n	800b79c <USB_EPStartXfer+0xd20>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6c8:	d820      	bhi.n	800b70c <USB_EPStartXfer+0xc90>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	085b      	lsrs	r3, r3, #1
 800b6d0:	21e4      	movs	r1, #228	@ 0xe4
 800b6d2:	187a      	adds	r2, r7, r1
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	4013      	ands	r3, r2
 800b6de:	d004      	beq.n	800b6ea <USB_EPStartXfer+0xc6e>
 800b6e0:	187b      	adds	r3, r7, r1
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	187a      	adds	r2, r7, r1
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	21a8      	movs	r1, #168	@ 0xa8
 800b6ec:	187b      	adds	r3, r7, r1
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	23e4      	movs	r3, #228	@ 0xe4
 800b6f6:	18fb      	adds	r3, r7, r3
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	029b      	lsls	r3, r3, #10
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	b29a      	uxth	r2, r3
 800b704:	187b      	adds	r3, r7, r1
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	e047      	b.n	800b79c <USB_EPStartXfer+0xd20>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	21e4      	movs	r1, #228	@ 0xe4
 800b714:	187a      	adds	r2, r7, r1
 800b716:	6013      	str	r3, [r2, #0]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	221f      	movs	r2, #31
 800b71e:	4013      	ands	r3, r2
 800b720:	d104      	bne.n	800b72c <USB_EPStartXfer+0xcb0>
 800b722:	187b      	adds	r3, r7, r1
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3b01      	subs	r3, #1
 800b728:	187a      	adds	r2, r7, r1
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	21a8      	movs	r1, #168	@ 0xa8
 800b72e:	187b      	adds	r3, r7, r1
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	b29a      	uxth	r2, r3
 800b736:	23e4      	movs	r3, #228	@ 0xe4
 800b738:	18fb      	adds	r3, r7, r3
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	029b      	lsls	r3, r3, #10
 800b740:	b29b      	uxth	r3, r3
 800b742:	4313      	orrs	r3, r2
 800b744:	b29b      	uxth	r3, r3
 800b746:	4a94      	ldr	r2, [pc, #592]	@ (800b998 <USB_EPStartXfer+0xf1c>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	187b      	adds	r3, r7, r1
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	e023      	b.n	800b79c <USB_EPStartXfer+0xd20>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d11f      	bne.n	800b79c <USB_EPStartXfer+0xd20>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	21b4      	movs	r1, #180	@ 0xb4
 800b760:	187a      	adds	r2, r7, r1
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2250      	movs	r2, #80	@ 0x50
 800b768:	5a9b      	ldrh	r3, [r3, r2]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	001a      	movs	r2, r3
 800b76e:	187b      	adds	r3, r7, r1
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	189b      	adds	r3, r3, r2
 800b774:	187a      	adds	r2, r7, r1
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	00da      	lsls	r2, r3, #3
 800b77e:	187b      	adds	r3, r7, r1
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	18d3      	adds	r3, r2, r3
 800b784:	4a85      	ldr	r2, [pc, #532]	@ (800b99c <USB_EPStartXfer+0xf20>)
 800b786:	4694      	mov	ip, r2
 800b788:	4463      	add	r3, ip
 800b78a:	21b0      	movs	r1, #176	@ 0xb0
 800b78c:	187a      	adds	r2, r7, r1
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	b29a      	uxth	r2, r3
 800b796:	187b      	adds	r3, r7, r1
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	801a      	strh	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	22a4      	movs	r2, #164	@ 0xa4
 800b7a0:	18ba      	adds	r2, r7, r2
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	785b      	ldrb	r3, [r3, #1]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d000      	beq.n	800b7ae <USB_EPStartXfer+0xd32>
 800b7ac:	e07b      	b.n	800b8a6 <USB_EPStartXfer+0xe2a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	219c      	movs	r1, #156	@ 0x9c
 800b7b2:	187a      	adds	r2, r7, r1
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2250      	movs	r2, #80	@ 0x50
 800b7ba:	5a9b      	ldrh	r3, [r3, r2]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	001a      	movs	r2, r3
 800b7c0:	187b      	adds	r3, r7, r1
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	189b      	adds	r3, r3, r2
 800b7c6:	187a      	adds	r2, r7, r1
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	00da      	lsls	r2, r3, #3
 800b7d0:	187b      	adds	r3, r7, r1
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	18d3      	adds	r3, r2, r3
 800b7d6:	4a72      	ldr	r2, [pc, #456]	@ (800b9a0 <USB_EPStartXfer+0xf24>)
 800b7d8:	4694      	mov	ip, r2
 800b7da:	4463      	add	r3, ip
 800b7dc:	2198      	movs	r1, #152	@ 0x98
 800b7de:	187a      	adds	r2, r7, r1
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	187b      	adds	r3, r7, r1
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	059b      	lsls	r3, r3, #22
 800b7ec:	0d9b      	lsrs	r3, r3, #22
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	187b      	adds	r3, r7, r1
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	801a      	strh	r2, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USB_EPStartXfer+0xd98>
 800b7fe:	187b      	adds	r3, r7, r1
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	b29b      	uxth	r3, r3
 800b806:	4a64      	ldr	r2, [pc, #400]	@ (800b998 <USB_EPStartXfer+0xf1c>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	187b      	adds	r3, r7, r1
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	801a      	strh	r2, [r3, #0]
 800b812:	e069      	b.n	800b8e8 <USB_EPStartXfer+0xe6c>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b3e      	cmp	r3, #62	@ 0x3e
 800b81a:	d820      	bhi.n	800b85e <USB_EPStartXfer+0xde2>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	21e0      	movs	r1, #224	@ 0xe0
 800b824:	187a      	adds	r2, r7, r1
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	2201      	movs	r2, #1
 800b82e:	4013      	ands	r3, r2
 800b830:	d004      	beq.n	800b83c <USB_EPStartXfer+0xdc0>
 800b832:	187b      	adds	r3, r7, r1
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3301      	adds	r3, #1
 800b838:	187a      	adds	r2, r7, r1
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	2198      	movs	r1, #152	@ 0x98
 800b83e:	187b      	adds	r3, r7, r1
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	b29a      	uxth	r2, r3
 800b846:	23e0      	movs	r3, #224	@ 0xe0
 800b848:	18fb      	adds	r3, r7, r3
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	029b      	lsls	r3, r3, #10
 800b850:	b29b      	uxth	r3, r3
 800b852:	4313      	orrs	r3, r2
 800b854:	b29a      	uxth	r2, r3
 800b856:	187b      	adds	r3, r7, r1
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	e044      	b.n	800b8e8 <USB_EPStartXfer+0xe6c>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	21e0      	movs	r1, #224	@ 0xe0
 800b866:	187a      	adds	r2, r7, r1
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	221f      	movs	r2, #31
 800b870:	4013      	ands	r3, r2
 800b872:	d104      	bne.n	800b87e <USB_EPStartXfer+0xe02>
 800b874:	187b      	adds	r3, r7, r1
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3b01      	subs	r3, #1
 800b87a:	187a      	adds	r2, r7, r1
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	2198      	movs	r1, #152	@ 0x98
 800b880:	187b      	adds	r3, r7, r1
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	b29a      	uxth	r2, r3
 800b888:	23e0      	movs	r3, #224	@ 0xe0
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	029b      	lsls	r3, r3, #10
 800b892:	b29b      	uxth	r3, r3
 800b894:	4313      	orrs	r3, r2
 800b896:	b29b      	uxth	r3, r3
 800b898:	4a3f      	ldr	r2, [pc, #252]	@ (800b998 <USB_EPStartXfer+0xf1c>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	801a      	strh	r2, [r3, #0]
 800b8a4:	e020      	b.n	800b8e8 <USB_EPStartXfer+0xe6c>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	785b      	ldrb	r3, [r3, #1]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d11c      	bne.n	800b8e8 <USB_EPStartXfer+0xe6c>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2250      	movs	r2, #80	@ 0x50
 800b8b2:	5a9b      	ldrh	r3, [r3, r2]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	001a      	movs	r2, r3
 800b8b8:	21a4      	movs	r1, #164	@ 0xa4
 800b8ba:	187b      	adds	r3, r7, r1
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	189b      	adds	r3, r3, r2
 800b8c0:	187a      	adds	r2, r7, r1
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	00da      	lsls	r2, r3, #3
 800b8ca:	187b      	adds	r3, r7, r1
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	18d3      	adds	r3, r2, r3
 800b8d0:	4a33      	ldr	r2, [pc, #204]	@ (800b9a0 <USB_EPStartXfer+0xf24>)
 800b8d2:	4694      	mov	ip, r2
 800b8d4:	4463      	add	r3, ip
 800b8d6:	21a0      	movs	r1, #160	@ 0xa0
 800b8d8:	187a      	adds	r2, r7, r1
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	187b      	adds	r3, r7, r1
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d100      	bne.n	800b8f2 <USB_EPStartXfer+0xe76>
 800b8f0:	e1c0      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	18d2      	adds	r2, r2, r3
 800b8fc:	2196      	movs	r1, #150	@ 0x96
 800b8fe:	187b      	adds	r3, r7, r1
 800b900:	8812      	ldrh	r2, [r2, #0]
 800b902:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b904:	187b      	adds	r3, r7, r1
 800b906:	881a      	ldrh	r2, [r3, #0]
 800b908:	2380      	movs	r3, #128	@ 0x80
 800b90a:	01db      	lsls	r3, r3, #7
 800b90c:	4013      	ands	r3, r2
 800b90e:	d004      	beq.n	800b91a <USB_EPStartXfer+0xe9e>
 800b910:	187b      	adds	r3, r7, r1
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	2240      	movs	r2, #64	@ 0x40
 800b916:	4013      	ands	r3, r2
 800b918:	d10d      	bne.n	800b936 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b91a:	2196      	movs	r1, #150	@ 0x96
 800b91c:	187b      	adds	r3, r7, r1
 800b91e:	881a      	ldrh	r2, [r3, #0]
 800b920:	2380      	movs	r3, #128	@ 0x80
 800b922:	01db      	lsls	r3, r3, #7
 800b924:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b926:	d000      	beq.n	800b92a <USB_EPStartXfer+0xeae>
 800b928:	e1a4      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b92a:	187b      	adds	r3, r7, r1
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	2240      	movs	r2, #64	@ 0x40
 800b930:	4013      	ands	r3, r2
 800b932:	d000      	beq.n	800b936 <USB_EPStartXfer+0xeba>
 800b934:	e19e      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	18d3      	adds	r3, r2, r3
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29a      	uxth	r2, r3
 800b944:	2094      	movs	r0, #148	@ 0x94
 800b946:	183b      	adds	r3, r7, r0
 800b948:	4916      	ldr	r1, [pc, #88]	@ (800b9a4 <USB_EPStartXfer+0xf28>)
 800b94a:	400a      	ands	r2, r1
 800b94c:	801a      	strh	r2, [r3, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	18d3      	adds	r3, r2, r3
 800b958:	183a      	adds	r2, r7, r0
 800b95a:	8812      	ldrh	r2, [r2, #0]
 800b95c:	4912      	ldr	r1, [pc, #72]	@ (800b9a8 <USB_EPStartXfer+0xf2c>)
 800b95e:	430a      	orrs	r2, r1
 800b960:	b292      	uxth	r2, r2
 800b962:	801a      	strh	r2, [r3, #0]
 800b964:	e186      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	78db      	ldrb	r3, [r3, #3]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d000      	beq.n	800c838 <USB_EPStartXfer+0xef4>
 800c836:	e17f      	b.n	800cb38 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	699a      	ldr	r2, [r3, #24]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	429a      	cmp	r2, r3
 800c842:	d917      	bls.n	800c874 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	1d7a      	adds	r2, r7, #5
 800c84a:	32ff      	adds	r2, #255	@ 0xff
 800c84c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	699a      	ldr	r2, [r3, #24]
 800c852:	1d7b      	adds	r3, r7, #5
 800c854:	33ff      	adds	r3, #255	@ 0xff
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	1ad2      	subs	r2, r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	619a      	str	r2, [r3, #24]
 800c85e:	e011      	b.n	800c884 <USB_EPStartXfer+0xf40>
 800c860:	ffff8000 	.word	0xffff8000
 800c864:	00000402 	.word	0x00000402
 800c868:	00000406 	.word	0x00000406
 800c86c:	ffff8f8f 	.word	0xffff8f8f
 800c870:	ffff80c0 	.word	0xffff80c0
=======
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	78db      	ldrb	r3, [r3, #3]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d000      	beq.n	800b970 <USB_EPStartXfer+0xef4>
 800b96e:	e17f      	b.n	800bc70 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	699a      	ldr	r2, [r3, #24]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d917      	bls.n	800b9ac <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	1d7a      	adds	r2, r7, #5
 800b982:	32ff      	adds	r2, #255	@ 0xff
 800b984:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	699a      	ldr	r2, [r3, #24]
 800b98a:	1d7b      	adds	r3, r7, #5
 800b98c:	33ff      	adds	r3, #255	@ 0xff
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	1ad2      	subs	r2, r2, r3
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	619a      	str	r2, [r3, #24]
 800b996:	e011      	b.n	800b9bc <USB_EPStartXfer+0xf40>
 800b998:	ffff8000 	.word	0xffff8000
 800b99c:	00000402 	.word	0x00000402
 800b9a0:	00000406 	.word	0x00000406
 800b9a4:	ffff8f8f 	.word	0xffff8f8f
 800b9a8:	ffff80c0 	.word	0xffff80c0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          len = ep->xfer_len;
<<<<<<< HEAD
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	1d7a      	adds	r2, r7, #5
 800c87a:	32ff      	adds	r2, #255	@ 0xff
 800c87c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2200      	movs	r2, #0
 800c882:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d000      	beq.n	800c88e <USB_EPStartXfer+0xf4a>
 800c88c:	e081      	b.n	800c992 <USB_EPStartXfer+0x104e>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	21cc      	movs	r1, #204	@ 0xcc
 800c892:	187a      	adds	r2, r7, r1
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2250      	movs	r2, #80	@ 0x50
 800c89a:	5a9b      	ldrh	r3, [r3, r2]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	001a      	movs	r2, r3
 800c8a0:	187b      	adds	r3, r7, r1
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	189b      	adds	r3, r3, r2
 800c8a6:	187a      	adds	r2, r7, r1
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	00da      	lsls	r2, r3, #3
 800c8b0:	187b      	adds	r3, r7, r1
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	18d3      	adds	r3, r2, r3
 800c8b6:	4ab6      	ldr	r2, [pc, #728]	@ (800cb90 <USB_EPStartXfer+0x124c>)
 800c8b8:	4694      	mov	ip, r2
 800c8ba:	4463      	add	r3, ip
 800c8bc:	21c8      	movs	r1, #200	@ 0xc8
 800c8be:	187a      	adds	r2, r7, r1
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	187b      	adds	r3, r7, r1
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	059b      	lsls	r3, r3, #22
 800c8cc:	0d9b      	lsrs	r3, r3, #22
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	187b      	adds	r3, r7, r1
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	801a      	strh	r2, [r3, #0]
 800c8d6:	1d7b      	adds	r3, r7, #5
 800c8d8:	33ff      	adds	r3, #255	@ 0xff
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <USB_EPStartXfer+0xfb2>
 800c8e0:	187b      	adds	r3, r7, r1
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4aaa      	ldr	r2, [pc, #680]	@ (800cb94 <USB_EPStartXfer+0x1250>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	801a      	strh	r2, [r3, #0]
 800c8f4:	e072      	b.n	800c9dc <USB_EPStartXfer+0x1098>
 800c8f6:	1d7b      	adds	r3, r7, #5
 800c8f8:	33ff      	adds	r3, #255	@ 0xff
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8fe:	d822      	bhi.n	800c946 <USB_EPStartXfer+0x1002>
 800c900:	1d7b      	adds	r3, r7, #5
 800c902:	33ff      	adds	r3, #255	@ 0xff
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	085b      	lsrs	r3, r3, #1
 800c908:	21dc      	movs	r1, #220	@ 0xdc
 800c90a:	187a      	adds	r2, r7, r1
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	1d7b      	adds	r3, r7, #5
 800c910:	33ff      	adds	r3, #255	@ 0xff
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2201      	movs	r2, #1
 800c916:	4013      	ands	r3, r2
 800c918:	d004      	beq.n	800c924 <USB_EPStartXfer+0xfe0>
 800c91a:	187b      	adds	r3, r7, r1
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3301      	adds	r3, #1
 800c920:	187a      	adds	r2, r7, r1
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	21c8      	movs	r1, #200	@ 0xc8
 800c926:	187b      	adds	r3, r7, r1
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	23dc      	movs	r3, #220	@ 0xdc
 800c930:	18fb      	adds	r3, r7, r3
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	b29b      	uxth	r3, r3
 800c936:	029b      	lsls	r3, r3, #10
 800c938:	b29b      	uxth	r3, r3
 800c93a:	4313      	orrs	r3, r2
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	187b      	adds	r3, r7, r1
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	801a      	strh	r2, [r3, #0]
 800c944:	e04a      	b.n	800c9dc <USB_EPStartXfer+0x1098>
 800c946:	1d7b      	adds	r3, r7, #5
 800c948:	33ff      	adds	r3, #255	@ 0xff
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	095b      	lsrs	r3, r3, #5
 800c94e:	21dc      	movs	r1, #220	@ 0xdc
 800c950:	187a      	adds	r2, r7, r1
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	1d7b      	adds	r3, r7, #5
 800c956:	33ff      	adds	r3, #255	@ 0xff
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	221f      	movs	r2, #31
 800c95c:	4013      	ands	r3, r2
 800c95e:	d104      	bne.n	800c96a <USB_EPStartXfer+0x1026>
 800c960:	187b      	adds	r3, r7, r1
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3b01      	subs	r3, #1
 800c966:	187a      	adds	r2, r7, r1
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	21c8      	movs	r1, #200	@ 0xc8
 800c96c:	187b      	adds	r3, r7, r1
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	b29a      	uxth	r2, r3
 800c974:	23dc      	movs	r3, #220	@ 0xdc
 800c976:	18fb      	adds	r3, r7, r3
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	029b      	lsls	r3, r3, #10
 800c97e:	b29b      	uxth	r3, r3
 800c980:	4313      	orrs	r3, r2
 800c982:	b29b      	uxth	r3, r3
 800c984:	4a83      	ldr	r2, [pc, #524]	@ (800cb94 <USB_EPStartXfer+0x1250>)
 800c986:	4313      	orrs	r3, r2
 800c988:	b29a      	uxth	r2, r3
 800c98a:	187b      	adds	r3, r7, r1
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	801a      	strh	r2, [r3, #0]
 800c990:	e024      	b.n	800c9dc <USB_EPStartXfer+0x1098>
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d120      	bne.n	800c9dc <USB_EPStartXfer+0x1098>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	21d4      	movs	r1, #212	@ 0xd4
 800c99e:	187a      	adds	r2, r7, r1
 800c9a0:	6013      	str	r3, [r2, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2250      	movs	r2, #80	@ 0x50
 800c9a6:	5a9b      	ldrh	r3, [r3, r2]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	001a      	movs	r2, r3
 800c9ac:	187b      	adds	r3, r7, r1
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	189b      	adds	r3, r3, r2
 800c9b2:	187a      	adds	r2, r7, r1
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	00da      	lsls	r2, r3, #3
 800c9bc:	187b      	adds	r3, r7, r1
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	18d3      	adds	r3, r2, r3
 800c9c2:	4a73      	ldr	r2, [pc, #460]	@ (800cb90 <USB_EPStartXfer+0x124c>)
 800c9c4:	4694      	mov	ip, r2
 800c9c6:	4463      	add	r3, ip
 800c9c8:	21d0      	movs	r1, #208	@ 0xd0
 800c9ca:	187a      	adds	r2, r7, r1
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	1d7b      	adds	r3, r7, #5
 800c9d0:	33ff      	adds	r3, #255	@ 0xff
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	187b      	adds	r3, r7, r1
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	22c4      	movs	r2, #196	@ 0xc4
 800c9e0:	18ba      	adds	r2, r7, r2
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d000      	beq.n	800c9ee <USB_EPStartXfer+0x10aa>
 800c9ec:	e081      	b.n	800caf2 <USB_EPStartXfer+0x11ae>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	21bc      	movs	r1, #188	@ 0xbc
 800c9f2:	187a      	adds	r2, r7, r1
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2250      	movs	r2, #80	@ 0x50
 800c9fa:	5a9b      	ldrh	r3, [r3, r2]
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	001a      	movs	r2, r3
 800ca00:	187b      	adds	r3, r7, r1
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	189b      	adds	r3, r3, r2
 800ca06:	187a      	adds	r2, r7, r1
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	00da      	lsls	r2, r3, #3
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	18d3      	adds	r3, r2, r3
 800ca16:	4a60      	ldr	r2, [pc, #384]	@ (800cb98 <USB_EPStartXfer+0x1254>)
 800ca18:	4694      	mov	ip, r2
 800ca1a:	4463      	add	r3, ip
 800ca1c:	21b8      	movs	r1, #184	@ 0xb8
 800ca1e:	187a      	adds	r2, r7, r1
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	187b      	adds	r3, r7, r1
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	059b      	lsls	r3, r3, #22
 800ca2c:	0d9b      	lsrs	r3, r3, #22
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	187b      	adds	r3, r7, r1
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	801a      	strh	r2, [r3, #0]
 800ca36:	1d7b      	adds	r3, r7, #5
 800ca38:	33ff      	adds	r3, #255	@ 0xff
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <USB_EPStartXfer+0x1112>
 800ca40:	187b      	adds	r3, r7, r1
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	4a52      	ldr	r2, [pc, #328]	@ (800cb94 <USB_EPStartXfer+0x1250>)
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	187b      	adds	r3, r7, r1
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	801a      	strh	r2, [r3, #0]
 800ca54:	e072      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
 800ca56:	1d7b      	adds	r3, r7, #5
 800ca58:	33ff      	adds	r3, #255	@ 0xff
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca5e:	d822      	bhi.n	800caa6 <USB_EPStartXfer+0x1162>
 800ca60:	1d7b      	adds	r3, r7, #5
 800ca62:	33ff      	adds	r3, #255	@ 0xff
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	085b      	lsrs	r3, r3, #1
 800ca68:	21d8      	movs	r1, #216	@ 0xd8
 800ca6a:	187a      	adds	r2, r7, r1
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	1d7b      	adds	r3, r7, #5
 800ca70:	33ff      	adds	r3, #255	@ 0xff
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2201      	movs	r2, #1
 800ca76:	4013      	ands	r3, r2
 800ca78:	d004      	beq.n	800ca84 <USB_EPStartXfer+0x1140>
 800ca7a:	187b      	adds	r3, r7, r1
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	187a      	adds	r2, r7, r1
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	21b8      	movs	r1, #184	@ 0xb8
 800ca86:	187b      	adds	r3, r7, r1
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	23d8      	movs	r3, #216	@ 0xd8
 800ca90:	18fb      	adds	r3, r7, r3
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	029b      	lsls	r3, r3, #10
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	187b      	adds	r3, r7, r1
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	801a      	strh	r2, [r3, #0]
 800caa4:	e04a      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
 800caa6:	1d7b      	adds	r3, r7, #5
 800caa8:	33ff      	adds	r3, #255	@ 0xff
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	095b      	lsrs	r3, r3, #5
 800caae:	21d8      	movs	r1, #216	@ 0xd8
 800cab0:	187a      	adds	r2, r7, r1
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	1d7b      	adds	r3, r7, #5
 800cab6:	33ff      	adds	r3, #255	@ 0xff
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	221f      	movs	r2, #31
 800cabc:	4013      	ands	r3, r2
 800cabe:	d104      	bne.n	800caca <USB_EPStartXfer+0x1186>
 800cac0:	187b      	adds	r3, r7, r1
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	187a      	adds	r2, r7, r1
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	21b8      	movs	r1, #184	@ 0xb8
 800cacc:	187b      	adds	r3, r7, r1
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	23d8      	movs	r3, #216	@ 0xd8
 800cad6:	18fb      	adds	r3, r7, r3
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	029b      	lsls	r3, r3, #10
 800cade:	b29b      	uxth	r3, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	4a2b      	ldr	r2, [pc, #172]	@ (800cb94 <USB_EPStartXfer+0x1250>)
 800cae6:	4313      	orrs	r3, r2
 800cae8:	b29a      	uxth	r2, r3
 800caea:	187b      	adds	r3, r7, r1
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	801a      	strh	r2, [r3, #0]
 800caf0:	e024      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d120      	bne.n	800cb3c <USB_EPStartXfer+0x11f8>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2250      	movs	r2, #80	@ 0x50
 800cafe:	5a9b      	ldrh	r3, [r3, r2]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	001a      	movs	r2, r3
 800cb04:	21c4      	movs	r1, #196	@ 0xc4
 800cb06:	187b      	adds	r3, r7, r1
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	189b      	adds	r3, r3, r2
 800cb0c:	187a      	adds	r2, r7, r1
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	00da      	lsls	r2, r3, #3
 800cb16:	187b      	adds	r3, r7, r1
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	18d3      	adds	r3, r2, r3
 800cb1c:	4a1e      	ldr	r2, [pc, #120]	@ (800cb98 <USB_EPStartXfer+0x1254>)
 800cb1e:	4694      	mov	ip, r2
 800cb20:	4463      	add	r3, ip
 800cb22:	21c0      	movs	r1, #192	@ 0xc0
 800cb24:	187a      	adds	r2, r7, r1
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	1d7b      	adds	r3, r7, #5
 800cb2a:	33ff      	adds	r3, #255	@ 0xff
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	187b      	adds	r3, r7, r1
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	801a      	strh	r2, [r3, #0]
 800cb36:	e001      	b.n	800cb3c <USB_EPStartXfer+0x11f8>
=======
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	1d7a      	adds	r2, r7, #5
 800b9b2:	32ff      	adds	r2, #255	@ 0xff
 800b9b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d000      	beq.n	800b9c6 <USB_EPStartXfer+0xf4a>
 800b9c4:	e081      	b.n	800baca <USB_EPStartXfer+0x104e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	21cc      	movs	r1, #204	@ 0xcc
 800b9ca:	187a      	adds	r2, r7, r1
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2250      	movs	r2, #80	@ 0x50
 800b9d2:	5a9b      	ldrh	r3, [r3, r2]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	001a      	movs	r2, r3
 800b9d8:	187b      	adds	r3, r7, r1
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	189b      	adds	r3, r3, r2
 800b9de:	187a      	adds	r2, r7, r1
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	00da      	lsls	r2, r3, #3
 800b9e8:	187b      	adds	r3, r7, r1
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	18d3      	adds	r3, r2, r3
 800b9ee:	4ab6      	ldr	r2, [pc, #728]	@ (800bcc8 <USB_EPStartXfer+0x124c>)
 800b9f0:	4694      	mov	ip, r2
 800b9f2:	4463      	add	r3, ip
 800b9f4:	21c8      	movs	r1, #200	@ 0xc8
 800b9f6:	187a      	adds	r2, r7, r1
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	187b      	adds	r3, r7, r1
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	059b      	lsls	r3, r3, #22
 800ba04:	0d9b      	lsrs	r3, r3, #22
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	187b      	adds	r3, r7, r1
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	801a      	strh	r2, [r3, #0]
 800ba0e:	1d7b      	adds	r3, r7, #5
 800ba10:	33ff      	adds	r3, #255	@ 0xff
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <USB_EPStartXfer+0xfb2>
 800ba18:	187b      	adds	r3, r7, r1
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	4aaa      	ldr	r2, [pc, #680]	@ (800bccc <USB_EPStartXfer+0x1250>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	187b      	adds	r3, r7, r1
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	e072      	b.n	800bb14 <USB_EPStartXfer+0x1098>
 800ba2e:	1d7b      	adds	r3, r7, #5
 800ba30:	33ff      	adds	r3, #255	@ 0xff
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba36:	d822      	bhi.n	800ba7e <USB_EPStartXfer+0x1002>
 800ba38:	1d7b      	adds	r3, r7, #5
 800ba3a:	33ff      	adds	r3, #255	@ 0xff
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	21dc      	movs	r1, #220	@ 0xdc
 800ba42:	187a      	adds	r2, r7, r1
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	1d7b      	adds	r3, r7, #5
 800ba48:	33ff      	adds	r3, #255	@ 0xff
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	4013      	ands	r3, r2
 800ba50:	d004      	beq.n	800ba5c <USB_EPStartXfer+0xfe0>
 800ba52:	187b      	adds	r3, r7, r1
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	187a      	adds	r2, r7, r1
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	21c8      	movs	r1, #200	@ 0xc8
 800ba5e:	187b      	adds	r3, r7, r1
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	23dc      	movs	r3, #220	@ 0xdc
 800ba68:	18fb      	adds	r3, r7, r3
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	029b      	lsls	r3, r3, #10
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	4313      	orrs	r3, r2
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	187b      	adds	r3, r7, r1
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	801a      	strh	r2, [r3, #0]
 800ba7c:	e04a      	b.n	800bb14 <USB_EPStartXfer+0x1098>
 800ba7e:	1d7b      	adds	r3, r7, #5
 800ba80:	33ff      	adds	r3, #255	@ 0xff
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	095b      	lsrs	r3, r3, #5
 800ba86:	21dc      	movs	r1, #220	@ 0xdc
 800ba88:	187a      	adds	r2, r7, r1
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	1d7b      	adds	r3, r7, #5
 800ba8e:	33ff      	adds	r3, #255	@ 0xff
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	221f      	movs	r2, #31
 800ba94:	4013      	ands	r3, r2
 800ba96:	d104      	bne.n	800baa2 <USB_EPStartXfer+0x1026>
 800ba98:	187b      	adds	r3, r7, r1
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	187a      	adds	r2, r7, r1
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	21c8      	movs	r1, #200	@ 0xc8
 800baa4:	187b      	adds	r3, r7, r1
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	b29a      	uxth	r2, r3
 800baac:	23dc      	movs	r3, #220	@ 0xdc
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	029b      	lsls	r3, r3, #10
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4313      	orrs	r3, r2
 800baba:	b29b      	uxth	r3, r3
 800babc:	4a83      	ldr	r2, [pc, #524]	@ (800bccc <USB_EPStartXfer+0x1250>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	187b      	adds	r3, r7, r1
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	801a      	strh	r2, [r3, #0]
 800bac8:	e024      	b.n	800bb14 <USB_EPStartXfer+0x1098>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	785b      	ldrb	r3, [r3, #1]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d120      	bne.n	800bb14 <USB_EPStartXfer+0x1098>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	21d4      	movs	r1, #212	@ 0xd4
 800bad6:	187a      	adds	r2, r7, r1
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2250      	movs	r2, #80	@ 0x50
 800bade:	5a9b      	ldrh	r3, [r3, r2]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	001a      	movs	r2, r3
 800bae4:	187b      	adds	r3, r7, r1
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	189b      	adds	r3, r3, r2
 800baea:	187a      	adds	r2, r7, r1
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	00da      	lsls	r2, r3, #3
 800baf4:	187b      	adds	r3, r7, r1
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	18d3      	adds	r3, r2, r3
 800bafa:	4a73      	ldr	r2, [pc, #460]	@ (800bcc8 <USB_EPStartXfer+0x124c>)
 800bafc:	4694      	mov	ip, r2
 800bafe:	4463      	add	r3, ip
 800bb00:	21d0      	movs	r1, #208	@ 0xd0
 800bb02:	187a      	adds	r2, r7, r1
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	1d7b      	adds	r3, r7, #5
 800bb08:	33ff      	adds	r3, #255	@ 0xff
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	187b      	adds	r3, r7, r1
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	801a      	strh	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	22c4      	movs	r2, #196	@ 0xc4
 800bb18:	18ba      	adds	r2, r7, r2
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d000      	beq.n	800bb26 <USB_EPStartXfer+0x10aa>
 800bb24:	e081      	b.n	800bc2a <USB_EPStartXfer+0x11ae>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	21bc      	movs	r1, #188	@ 0xbc
 800bb2a:	187a      	adds	r2, r7, r1
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2250      	movs	r2, #80	@ 0x50
 800bb32:	5a9b      	ldrh	r3, [r3, r2]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	001a      	movs	r2, r3
 800bb38:	187b      	adds	r3, r7, r1
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	189b      	adds	r3, r3, r2
 800bb3e:	187a      	adds	r2, r7, r1
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	00da      	lsls	r2, r3, #3
 800bb48:	187b      	adds	r3, r7, r1
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	18d3      	adds	r3, r2, r3
 800bb4e:	4a60      	ldr	r2, [pc, #384]	@ (800bcd0 <USB_EPStartXfer+0x1254>)
 800bb50:	4694      	mov	ip, r2
 800bb52:	4463      	add	r3, ip
 800bb54:	21b8      	movs	r1, #184	@ 0xb8
 800bb56:	187a      	adds	r2, r7, r1
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	187b      	adds	r3, r7, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	059b      	lsls	r3, r3, #22
 800bb64:	0d9b      	lsrs	r3, r3, #22
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	187b      	adds	r3, r7, r1
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	801a      	strh	r2, [r3, #0]
 800bb6e:	1d7b      	adds	r3, r7, #5
 800bb70:	33ff      	adds	r3, #255	@ 0xff
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <USB_EPStartXfer+0x1112>
 800bb78:	187b      	adds	r3, r7, r1
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4a52      	ldr	r2, [pc, #328]	@ (800bccc <USB_EPStartXfer+0x1250>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	187b      	adds	r3, r7, r1
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	801a      	strh	r2, [r3, #0]
 800bb8c:	e072      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
 800bb8e:	1d7b      	adds	r3, r7, #5
 800bb90:	33ff      	adds	r3, #255	@ 0xff
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb96:	d822      	bhi.n	800bbde <USB_EPStartXfer+0x1162>
 800bb98:	1d7b      	adds	r3, r7, #5
 800bb9a:	33ff      	adds	r3, #255	@ 0xff
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	085b      	lsrs	r3, r3, #1
 800bba0:	21d8      	movs	r1, #216	@ 0xd8
 800bba2:	187a      	adds	r2, r7, r1
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	1d7b      	adds	r3, r7, #5
 800bba8:	33ff      	adds	r3, #255	@ 0xff
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2201      	movs	r2, #1
 800bbae:	4013      	ands	r3, r2
 800bbb0:	d004      	beq.n	800bbbc <USB_EPStartXfer+0x1140>
 800bbb2:	187b      	adds	r3, r7, r1
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	187a      	adds	r2, r7, r1
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	21b8      	movs	r1, #184	@ 0xb8
 800bbbe:	187b      	adds	r3, r7, r1
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	23d8      	movs	r3, #216	@ 0xd8
 800bbc8:	18fb      	adds	r3, r7, r3
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	029b      	lsls	r3, r3, #10
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	187b      	adds	r3, r7, r1
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e04a      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
 800bbde:	1d7b      	adds	r3, r7, #5
 800bbe0:	33ff      	adds	r3, #255	@ 0xff
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	21d8      	movs	r1, #216	@ 0xd8
 800bbe8:	187a      	adds	r2, r7, r1
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	1d7b      	adds	r3, r7, #5
 800bbee:	33ff      	adds	r3, #255	@ 0xff
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	221f      	movs	r2, #31
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	d104      	bne.n	800bc02 <USB_EPStartXfer+0x1186>
 800bbf8:	187b      	adds	r3, r7, r1
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	187a      	adds	r2, r7, r1
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	21b8      	movs	r1, #184	@ 0xb8
 800bc04:	187b      	adds	r3, r7, r1
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	23d8      	movs	r3, #216	@ 0xd8
 800bc0e:	18fb      	adds	r3, r7, r3
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	029b      	lsls	r3, r3, #10
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	4a2b      	ldr	r2, [pc, #172]	@ (800bccc <USB_EPStartXfer+0x1250>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	187b      	adds	r3, r7, r1
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	801a      	strh	r2, [r3, #0]
 800bc28:	e024      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	785b      	ldrb	r3, [r3, #1]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d120      	bne.n	800bc74 <USB_EPStartXfer+0x11f8>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2250      	movs	r2, #80	@ 0x50
 800bc36:	5a9b      	ldrh	r3, [r3, r2]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	21c4      	movs	r1, #196	@ 0xc4
 800bc3e:	187b      	adds	r3, r7, r1
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	189b      	adds	r3, r3, r2
 800bc44:	187a      	adds	r2, r7, r1
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	00da      	lsls	r2, r3, #3
 800bc4e:	187b      	adds	r3, r7, r1
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	18d3      	adds	r3, r2, r3
 800bc54:	4a1e      	ldr	r2, [pc, #120]	@ (800bcd0 <USB_EPStartXfer+0x1254>)
 800bc56:	4694      	mov	ip, r2
 800bc58:	4463      	add	r3, ip
 800bc5a:	21c0      	movs	r1, #192	@ 0xc0
 800bc5c:	187a      	adds	r2, r7, r1
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	1d7b      	adds	r3, r7, #5
 800bc62:	33ff      	adds	r3, #255	@ 0xff
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	187b      	adds	r3, r7, r1
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	801a      	strh	r2, [r3, #0]
 800bc6e:	e001      	b.n	800bc74 <USB_EPStartXfer+0x11f8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        return HAL_ERROR;
<<<<<<< HEAD
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e025      	b.n	800cb88 <USB_EPStartXfer+0x1244>
=======
 800bc70:	2301      	movs	r3, #1
 800bc72:	e025      	b.n	800bcc0 <USB_EPStartXfer+0x1244>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< HEAD
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	18d3      	adds	r3, r2, r3
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	208a      	movs	r0, #138	@ 0x8a
 800cb4c:	183b      	adds	r3, r7, r0
 800cb4e:	4913      	ldr	r1, [pc, #76]	@ (800cb9c <USB_EPStartXfer+0x1258>)
 800cb50:	400a      	ands	r2, r1
 800cb52:	801a      	strh	r2, [r3, #0]
 800cb54:	183b      	adds	r3, r7, r0
 800cb56:	183a      	adds	r2, r7, r0
 800cb58:	8812      	ldrh	r2, [r2, #0]
 800cb5a:	2180      	movs	r1, #128	@ 0x80
 800cb5c:	0149      	lsls	r1, r1, #5
 800cb5e:	404a      	eors	r2, r1
 800cb60:	801a      	strh	r2, [r3, #0]
 800cb62:	183b      	adds	r3, r7, r0
 800cb64:	183a      	adds	r2, r7, r0
 800cb66:	8812      	ldrh	r2, [r2, #0]
 800cb68:	2180      	movs	r1, #128	@ 0x80
 800cb6a:	0189      	lsls	r1, r1, #6
 800cb6c:	404a      	eors	r2, r1
 800cb6e:	801a      	strh	r2, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	18d3      	adds	r3, r2, r3
 800cb7a:	183a      	adds	r2, r7, r0
 800cb7c:	8812      	ldrh	r2, [r2, #0]
 800cb7e:	4908      	ldr	r1, [pc, #32]	@ (800cba0 <USB_EPStartXfer+0x125c>)
 800cb80:	430a      	orrs	r2, r1
 800cb82:	b292      	uxth	r2, r2
 800cb84:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	b043      	add	sp, #268	@ 0x10c
 800cb8e:	bd90      	pop	{r4, r7, pc}
 800cb90:	00000402 	.word	0x00000402
 800cb94:	ffff8000 	.word	0xffff8000
 800cb98:	00000406 	.word	0x00000406
 800cb9c:	ffffbf8f 	.word	0xffffbf8f
 800cba0:	ffff8080 	.word	0xffff8080

0800cba4 <USB_EPSetStall>:
=======
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	18d3      	adds	r3, r2, r3
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	208a      	movs	r0, #138	@ 0x8a
 800bc84:	183b      	adds	r3, r7, r0
 800bc86:	4913      	ldr	r1, [pc, #76]	@ (800bcd4 <USB_EPStartXfer+0x1258>)
 800bc88:	400a      	ands	r2, r1
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	183b      	adds	r3, r7, r0
 800bc8e:	183a      	adds	r2, r7, r0
 800bc90:	8812      	ldrh	r2, [r2, #0]
 800bc92:	2180      	movs	r1, #128	@ 0x80
 800bc94:	0149      	lsls	r1, r1, #5
 800bc96:	404a      	eors	r2, r1
 800bc98:	801a      	strh	r2, [r3, #0]
 800bc9a:	183b      	adds	r3, r7, r0
 800bc9c:	183a      	adds	r2, r7, r0
 800bc9e:	8812      	ldrh	r2, [r2, #0]
 800bca0:	2180      	movs	r1, #128	@ 0x80
 800bca2:	0189      	lsls	r1, r1, #6
 800bca4:	404a      	eors	r2, r1
 800bca6:	801a      	strh	r2, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	18d3      	adds	r3, r2, r3
 800bcb2:	183a      	adds	r2, r7, r0
 800bcb4:	8812      	ldrh	r2, [r2, #0]
 800bcb6:	4908      	ldr	r1, [pc, #32]	@ (800bcd8 <USB_EPStartXfer+0x125c>)
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	b292      	uxth	r2, r2
 800bcbc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	b043      	add	sp, #268	@ 0x10c
 800bcc6:	bd90      	pop	{r4, r7, pc}
 800bcc8:	00000402 	.word	0x00000402
 800bccc:	ffff8000 	.word	0xffff8000
 800bcd0:	00000406 	.word	0x00000406
 800bcd4:	ffffbf8f 	.word	0xffffbf8f
 800bcd8:	ffff8080 	.word	0xffff8080

0800bcdc <USB_EPSetStall>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	785b      	ldrb	r3, [r3, #1]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d01d      	beq.n	800cbf2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	18d3      	adds	r3, r2, r3
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	200c      	movs	r0, #12
 800cbc6:	183b      	adds	r3, r7, r0
 800cbc8:	491b      	ldr	r1, [pc, #108]	@ (800cc38 <USB_EPSetStall+0x94>)
 800cbca:	400a      	ands	r2, r1
 800cbcc:	801a      	strh	r2, [r3, #0]
 800cbce:	183b      	adds	r3, r7, r0
 800cbd0:	183a      	adds	r2, r7, r0
 800cbd2:	8812      	ldrh	r2, [r2, #0]
 800cbd4:	2110      	movs	r1, #16
 800cbd6:	404a      	eors	r2, r1
 800cbd8:	801a      	strh	r2, [r3, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	18d3      	adds	r3, r2, r3
 800cbe4:	183a      	adds	r2, r7, r0
 800cbe6:	8812      	ldrh	r2, [r2, #0]
 800cbe8:	4914      	ldr	r1, [pc, #80]	@ (800cc3c <USB_EPSetStall+0x98>)
 800cbea:	430a      	orrs	r2, r1
 800cbec:	b292      	uxth	r2, r2
 800cbee:	801a      	strh	r2, [r3, #0]
 800cbf0:	e01d      	b.n	800cc2e <USB_EPSetStall+0x8a>
=======
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d01d      	beq.n	800bd2a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	18d3      	adds	r3, r2, r3
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	200c      	movs	r0, #12
 800bcfe:	183b      	adds	r3, r7, r0
 800bd00:	491b      	ldr	r1, [pc, #108]	@ (800bd70 <USB_EPSetStall+0x94>)
 800bd02:	400a      	ands	r2, r1
 800bd04:	801a      	strh	r2, [r3, #0]
 800bd06:	183b      	adds	r3, r7, r0
 800bd08:	183a      	adds	r2, r7, r0
 800bd0a:	8812      	ldrh	r2, [r2, #0]
 800bd0c:	2110      	movs	r1, #16
 800bd0e:	404a      	eors	r2, r1
 800bd10:	801a      	strh	r2, [r3, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	18d3      	adds	r3, r2, r3
 800bd1c:	183a      	adds	r2, r7, r0
 800bd1e:	8812      	ldrh	r2, [r2, #0]
 800bd20:	4914      	ldr	r1, [pc, #80]	@ (800bd74 <USB_EPSetStall+0x98>)
 800bd22:	430a      	orrs	r2, r1
 800bd24:	b292      	uxth	r2, r2
 800bd26:	801a      	strh	r2, [r3, #0]
 800bd28:	e01d      	b.n	800bd66 <USB_EPSetStall+0x8a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< HEAD
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	18d3      	adds	r3, r2, r3
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	200e      	movs	r0, #14
 800cc02:	183b      	adds	r3, r7, r0
 800cc04:	490e      	ldr	r1, [pc, #56]	@ (800cc40 <USB_EPSetStall+0x9c>)
 800cc06:	400a      	ands	r2, r1
 800cc08:	801a      	strh	r2, [r3, #0]
 800cc0a:	183b      	adds	r3, r7, r0
 800cc0c:	183a      	adds	r2, r7, r0
 800cc0e:	8812      	ldrh	r2, [r2, #0]
 800cc10:	2180      	movs	r1, #128	@ 0x80
 800cc12:	0149      	lsls	r1, r1, #5
 800cc14:	404a      	eors	r2, r1
 800cc16:	801a      	strh	r2, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	18d3      	adds	r3, r2, r3
 800cc22:	183a      	adds	r2, r7, r0
 800cc24:	8812      	ldrh	r2, [r2, #0]
 800cc26:	4905      	ldr	r1, [pc, #20]	@ (800cc3c <USB_EPSetStall+0x98>)
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	b292      	uxth	r2, r2
 800cc2c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	0018      	movs	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b004      	add	sp, #16
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	ffff8fbf 	.word	0xffff8fbf
 800cc3c:	ffff8080 	.word	0xffff8080
 800cc40:	ffffbf8f 	.word	0xffffbf8f

0800cc44 <USB_EPClearStall>:
=======
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	18d3      	adds	r3, r2, r3
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	200e      	movs	r0, #14
 800bd3a:	183b      	adds	r3, r7, r0
 800bd3c:	490e      	ldr	r1, [pc, #56]	@ (800bd78 <USB_EPSetStall+0x9c>)
 800bd3e:	400a      	ands	r2, r1
 800bd40:	801a      	strh	r2, [r3, #0]
 800bd42:	183b      	adds	r3, r7, r0
 800bd44:	183a      	adds	r2, r7, r0
 800bd46:	8812      	ldrh	r2, [r2, #0]
 800bd48:	2180      	movs	r1, #128	@ 0x80
 800bd4a:	0149      	lsls	r1, r1, #5
 800bd4c:	404a      	eors	r2, r1
 800bd4e:	801a      	strh	r2, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	18d3      	adds	r3, r2, r3
 800bd5a:	183a      	adds	r2, r7, r0
 800bd5c:	8812      	ldrh	r2, [r2, #0]
 800bd5e:	4905      	ldr	r1, [pc, #20]	@ (800bd74 <USB_EPSetStall+0x98>)
 800bd60:	430a      	orrs	r2, r1
 800bd62:	b292      	uxth	r2, r2
 800bd64:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	0018      	movs	r0, r3
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	b004      	add	sp, #16
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	ffff8fbf 	.word	0xffff8fbf
 800bd74:	ffff8080 	.word	0xffff8080
 800bd78:	ffffbf8f 	.word	0xffffbf8f

0800bd7c <USB_EPClearStall>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	7b1b      	ldrb	r3, [r3, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d000      	beq.n	800cc58 <USB_EPClearStall+0x14>
 800cc56:	e095      	b.n	800cd84 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d046      	beq.n	800ccee <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	18d2      	adds	r2, r2, r3
 800cc6a:	2110      	movs	r1, #16
 800cc6c:	187b      	adds	r3, r7, r1
 800cc6e:	8812      	ldrh	r2, [r2, #0]
 800cc70:	801a      	strh	r2, [r3, #0]
 800cc72:	187b      	adds	r3, r7, r1
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	2240      	movs	r2, #64	@ 0x40
 800cc78:	4013      	ands	r3, r2
 800cc7a:	d016      	beq.n	800ccaa <USB_EPClearStall+0x66>
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	18d3      	adds	r3, r2, r3
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	200e      	movs	r0, #14
 800cc8c:	183b      	adds	r3, r7, r0
 800cc8e:	4940      	ldr	r1, [pc, #256]	@ (800cd90 <USB_EPClearStall+0x14c>)
 800cc90:	400a      	ands	r2, r1
 800cc92:	801a      	strh	r2, [r3, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	18d3      	adds	r3, r2, r3
 800cc9e:	183a      	adds	r2, r7, r0
 800cca0:	8812      	ldrh	r2, [r2, #0]
 800cca2:	493c      	ldr	r1, [pc, #240]	@ (800cd94 <USB_EPClearStall+0x150>)
 800cca4:	430a      	orrs	r2, r1
 800cca6:	b292      	uxth	r2, r2
 800cca8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	78db      	ldrb	r3, [r3, #3]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d068      	beq.n	800cd84 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	18d3      	adds	r3, r2, r3
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	200c      	movs	r0, #12
 800ccc2:	183b      	adds	r3, r7, r0
 800ccc4:	4934      	ldr	r1, [pc, #208]	@ (800cd98 <USB_EPClearStall+0x154>)
 800ccc6:	400a      	ands	r2, r1
 800ccc8:	801a      	strh	r2, [r3, #0]
 800ccca:	183b      	adds	r3, r7, r0
 800cccc:	183a      	adds	r2, r7, r0
 800ccce:	8812      	ldrh	r2, [r2, #0]
 800ccd0:	2120      	movs	r1, #32
 800ccd2:	404a      	eors	r2, r1
 800ccd4:	801a      	strh	r2, [r3, #0]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	18d3      	adds	r3, r2, r3
 800cce0:	183a      	adds	r2, r7, r0
 800cce2:	8812      	ldrh	r2, [r2, #0]
 800cce4:	492d      	ldr	r1, [pc, #180]	@ (800cd9c <USB_EPClearStall+0x158>)
 800cce6:	430a      	orrs	r2, r1
 800cce8:	b292      	uxth	r2, r2
 800ccea:	801a      	strh	r2, [r3, #0]
 800ccec:	e04a      	b.n	800cd84 <USB_EPClearStall+0x140>
=======
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	7b1b      	ldrb	r3, [r3, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d000      	beq.n	800bd90 <USB_EPClearStall+0x14>
 800bd8e:	e095      	b.n	800bebc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	785b      	ldrb	r3, [r3, #1]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d046      	beq.n	800be26 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	18d2      	adds	r2, r2, r3
 800bda2:	2110      	movs	r1, #16
 800bda4:	187b      	adds	r3, r7, r1
 800bda6:	8812      	ldrh	r2, [r2, #0]
 800bda8:	801a      	strh	r2, [r3, #0]
 800bdaa:	187b      	adds	r3, r7, r1
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	2240      	movs	r2, #64	@ 0x40
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	d016      	beq.n	800bde2 <USB_EPClearStall+0x66>
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	18d3      	adds	r3, r2, r3
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	200e      	movs	r0, #14
 800bdc4:	183b      	adds	r3, r7, r0
 800bdc6:	4940      	ldr	r1, [pc, #256]	@ (800bec8 <USB_EPClearStall+0x14c>)
 800bdc8:	400a      	ands	r2, r1
 800bdca:	801a      	strh	r2, [r3, #0]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	18d3      	adds	r3, r2, r3
 800bdd6:	183a      	adds	r2, r7, r0
 800bdd8:	8812      	ldrh	r2, [r2, #0]
 800bdda:	493c      	ldr	r1, [pc, #240]	@ (800becc <USB_EPClearStall+0x150>)
 800bddc:	430a      	orrs	r2, r1
 800bdde:	b292      	uxth	r2, r2
 800bde0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	78db      	ldrb	r3, [r3, #3]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d068      	beq.n	800bebc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	18d3      	adds	r3, r2, r3
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	200c      	movs	r0, #12
 800bdfa:	183b      	adds	r3, r7, r0
 800bdfc:	4934      	ldr	r1, [pc, #208]	@ (800bed0 <USB_EPClearStall+0x154>)
 800bdfe:	400a      	ands	r2, r1
 800be00:	801a      	strh	r2, [r3, #0]
 800be02:	183b      	adds	r3, r7, r0
 800be04:	183a      	adds	r2, r7, r0
 800be06:	8812      	ldrh	r2, [r2, #0]
 800be08:	2120      	movs	r1, #32
 800be0a:	404a      	eors	r2, r1
 800be0c:	801a      	strh	r2, [r3, #0]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	18d3      	adds	r3, r2, r3
 800be18:	183a      	adds	r2, r7, r0
 800be1a:	8812      	ldrh	r2, [r2, #0]
 800be1c:	492d      	ldr	r1, [pc, #180]	@ (800bed4 <USB_EPClearStall+0x158>)
 800be1e:	430a      	orrs	r2, r1
 800be20:	b292      	uxth	r2, r2
 800be22:	801a      	strh	r2, [r3, #0]
 800be24:	e04a      	b.n	800bebc <USB_EPClearStall+0x140>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	18d2      	adds	r2, r2, r3
 800ccf8:	2116      	movs	r1, #22
 800ccfa:	187b      	adds	r3, r7, r1
 800ccfc:	8812      	ldrh	r2, [r2, #0]
 800ccfe:	801a      	strh	r2, [r3, #0]
 800cd00:	187b      	adds	r3, r7, r1
 800cd02:	881a      	ldrh	r2, [r3, #0]
 800cd04:	2380      	movs	r3, #128	@ 0x80
 800cd06:	01db      	lsls	r3, r3, #7
 800cd08:	4013      	ands	r3, r2
 800cd0a:	d016      	beq.n	800cd3a <USB_EPClearStall+0xf6>
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	18d3      	adds	r3, r2, r3
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	2014      	movs	r0, #20
 800cd1c:	183b      	adds	r3, r7, r0
 800cd1e:	491c      	ldr	r1, [pc, #112]	@ (800cd90 <USB_EPClearStall+0x14c>)
 800cd20:	400a      	ands	r2, r1
 800cd22:	801a      	strh	r2, [r3, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	18d3      	adds	r3, r2, r3
 800cd2e:	183a      	adds	r2, r7, r0
 800cd30:	8812      	ldrh	r2, [r2, #0]
 800cd32:	491b      	ldr	r1, [pc, #108]	@ (800cda0 <USB_EPClearStall+0x15c>)
 800cd34:	430a      	orrs	r2, r1
 800cd36:	b292      	uxth	r2, r2
 800cd38:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	18d3      	adds	r3, r2, r3
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	2012      	movs	r0, #18
 800cd4a:	183b      	adds	r3, r7, r0
 800cd4c:	4915      	ldr	r1, [pc, #84]	@ (800cda4 <USB_EPClearStall+0x160>)
 800cd4e:	400a      	ands	r2, r1
 800cd50:	801a      	strh	r2, [r3, #0]
 800cd52:	183b      	adds	r3, r7, r0
 800cd54:	183a      	adds	r2, r7, r0
 800cd56:	8812      	ldrh	r2, [r2, #0]
 800cd58:	2180      	movs	r1, #128	@ 0x80
 800cd5a:	0149      	lsls	r1, r1, #5
 800cd5c:	404a      	eors	r2, r1
 800cd5e:	801a      	strh	r2, [r3, #0]
 800cd60:	183b      	adds	r3, r7, r0
 800cd62:	183a      	adds	r2, r7, r0
 800cd64:	8812      	ldrh	r2, [r2, #0]
 800cd66:	2180      	movs	r1, #128	@ 0x80
 800cd68:	0189      	lsls	r1, r1, #6
 800cd6a:	404a      	eors	r2, r1
 800cd6c:	801a      	strh	r2, [r3, #0]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	18d3      	adds	r3, r2, r3
 800cd78:	183a      	adds	r2, r7, r0
 800cd7a:	8812      	ldrh	r2, [r2, #0]
 800cd7c:	4907      	ldr	r1, [pc, #28]	@ (800cd9c <USB_EPClearStall+0x158>)
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	b292      	uxth	r2, r2
 800cd82:	801a      	strh	r2, [r3, #0]
=======
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	18d2      	adds	r2, r2, r3
 800be30:	2116      	movs	r1, #22
 800be32:	187b      	adds	r3, r7, r1
 800be34:	8812      	ldrh	r2, [r2, #0]
 800be36:	801a      	strh	r2, [r3, #0]
 800be38:	187b      	adds	r3, r7, r1
 800be3a:	881a      	ldrh	r2, [r3, #0]
 800be3c:	2380      	movs	r3, #128	@ 0x80
 800be3e:	01db      	lsls	r3, r3, #7
 800be40:	4013      	ands	r3, r2
 800be42:	d016      	beq.n	800be72 <USB_EPClearStall+0xf6>
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	18d3      	adds	r3, r2, r3
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	b29a      	uxth	r2, r3
 800be52:	2014      	movs	r0, #20
 800be54:	183b      	adds	r3, r7, r0
 800be56:	491c      	ldr	r1, [pc, #112]	@ (800bec8 <USB_EPClearStall+0x14c>)
 800be58:	400a      	ands	r2, r1
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	18d3      	adds	r3, r2, r3
 800be66:	183a      	adds	r2, r7, r0
 800be68:	8812      	ldrh	r2, [r2, #0]
 800be6a:	491b      	ldr	r1, [pc, #108]	@ (800bed8 <USB_EPClearStall+0x15c>)
 800be6c:	430a      	orrs	r2, r1
 800be6e:	b292      	uxth	r2, r2
 800be70:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	18d3      	adds	r3, r2, r3
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	b29a      	uxth	r2, r3
 800be80:	2012      	movs	r0, #18
 800be82:	183b      	adds	r3, r7, r0
 800be84:	4915      	ldr	r1, [pc, #84]	@ (800bedc <USB_EPClearStall+0x160>)
 800be86:	400a      	ands	r2, r1
 800be88:	801a      	strh	r2, [r3, #0]
 800be8a:	183b      	adds	r3, r7, r0
 800be8c:	183a      	adds	r2, r7, r0
 800be8e:	8812      	ldrh	r2, [r2, #0]
 800be90:	2180      	movs	r1, #128	@ 0x80
 800be92:	0149      	lsls	r1, r1, #5
 800be94:	404a      	eors	r2, r1
 800be96:	801a      	strh	r2, [r3, #0]
 800be98:	183b      	adds	r3, r7, r0
 800be9a:	183a      	adds	r2, r7, r0
 800be9c:	8812      	ldrh	r2, [r2, #0]
 800be9e:	2180      	movs	r1, #128	@ 0x80
 800bea0:	0189      	lsls	r1, r1, #6
 800bea2:	404a      	eors	r2, r1
 800bea4:	801a      	strh	r2, [r3, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	18d3      	adds	r3, r2, r3
 800beb0:	183a      	adds	r2, r7, r0
 800beb2:	8812      	ldrh	r2, [r2, #0]
 800beb4:	4907      	ldr	r1, [pc, #28]	@ (800bed4 <USB_EPClearStall+0x158>)
 800beb6:	430a      	orrs	r2, r1
 800beb8:	b292      	uxth	r2, r2
 800beba:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	0018      	movs	r0, r3
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	b006      	add	sp, #24
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	ffff8f8f 	.word	0xffff8f8f
 800cd94:	ffff80c0 	.word	0xffff80c0
 800cd98:	ffff8fbf 	.word	0xffff8fbf
 800cd9c:	ffff8080 	.word	0xffff8080
 800cda0:	ffffc080 	.word	0xffffc080
 800cda4:	ffffbf8f 	.word	0xffffbf8f

0800cda8 <USB_SetDevAddress>:
=======
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	0018      	movs	r0, r3
 800bec0:	46bd      	mov	sp, r7
 800bec2:	b006      	add	sp, #24
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	46c0      	nop			@ (mov r8, r8)
 800bec8:	ffff8f8f 	.word	0xffff8f8f
 800becc:	ffff80c0 	.word	0xffff80c0
 800bed0:	ffff8fbf 	.word	0xffff8fbf
 800bed4:	ffff8080 	.word	0xffff8080
 800bed8:	ffffc080 	.word	0xffffc080
 800bedc:	ffffbf8f 	.word	0xffffbf8f

0800bee0 <USB_SetDevAddress>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	000a      	movs	r2, r1
 800cdb2:	1cfb      	adds	r3, r7, #3
 800cdb4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800cdb6:	1cfb      	adds	r3, r7, #3
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d103      	bne.n	800cdc6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	224c      	movs	r2, #76	@ 0x4c
 800cdc2:	2180      	movs	r1, #128	@ 0x80
 800cdc4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	0018      	movs	r0, r3
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	b002      	add	sp, #8
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USB_DevConnect>:
=======
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	000a      	movs	r2, r1
 800beea:	1cfb      	adds	r3, r7, #3
 800beec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800beee:	1cfb      	adds	r3, r7, #3
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	224c      	movs	r2, #76	@ 0x4c
 800befa:	2180      	movs	r1, #128	@ 0x80
 800befc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	0018      	movs	r0, r3
 800bf02:	46bd      	mov	sp, r7
 800bf04:	b002      	add	sp, #8
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USB_DevConnect>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2258      	movs	r2, #88	@ 0x58
 800cddc:	5a9b      	ldrh	r3, [r3, r2]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	4a05      	ldr	r2, [pc, #20]	@ (800cdf8 <USB_DevConnect+0x28>)
 800cde2:	4313      	orrs	r3, r2
 800cde4:	b299      	uxth	r1, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2258      	movs	r2, #88	@ 0x58
 800cdea:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	0018      	movs	r0, r3
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	b002      	add	sp, #8
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	46c0      	nop			@ (mov r8, r8)
 800cdf8:	ffff8000 	.word	0xffff8000

0800cdfc <USB_ReadInterrupts>:
=======
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2258      	movs	r2, #88	@ 0x58
 800bf14:	5a9b      	ldrh	r3, [r3, r2]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4a05      	ldr	r2, [pc, #20]	@ (800bf30 <USB_DevConnect+0x28>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	b299      	uxth	r1, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2258      	movs	r2, #88	@ 0x58
 800bf22:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	0018      	movs	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	b002      	add	sp, #8
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	46c0      	nop			@ (mov r8, r8)
 800bf30:	ffff8000 	.word	0xffff8000

0800bf34 <USB_ReadInterrupts>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
<<<<<<< HEAD
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2244      	movs	r2, #68	@ 0x44
 800ce08:	5a9b      	ldrh	r3, [r3, r2]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
}
 800ce10:	0018      	movs	r0, r3
 800ce12:	46bd      	mov	sp, r7
 800ce14:	b004      	add	sp, #16
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USB_WritePMA>:
=======
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2244      	movs	r2, #68	@ 0x44
 800bf40:	5a9b      	ldrh	r3, [r3, r2]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	0018      	movs	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b004      	add	sp, #16
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USB_WritePMA>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08a      	sub	sp, #40	@ 0x28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	0019      	movs	r1, r3
 800ce24:	1dbb      	adds	r3, r7, #6
 800ce26:	801a      	strh	r2, [r3, #0]
 800ce28:	1d3b      	adds	r3, r7, #4
 800ce2a:	1c0a      	adds	r2, r1, #0
 800ce2c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce2e:	1d3b      	adds	r3, r7, #4
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	3301      	adds	r3, #1
 800ce34:	085b      	lsrs	r3, r3, #1
 800ce36:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	617b      	str	r3, [r7, #20]
=======
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08a      	sub	sp, #40	@ 0x28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	0019      	movs	r1, r3
 800bf5c:	1dbb      	adds	r3, r7, #6
 800bf5e:	801a      	strh	r2, [r3, #0]
 800bf60:	1d3b      	adds	r3, r7, #4
 800bf62:	1c0a      	adds	r2, r1, #0
 800bf64:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce40:	1dbb      	adds	r3, r7, #6
 800ce42:	881a      	ldrh	r2, [r3, #0]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	18d3      	adds	r3, r2, r3
 800ce48:	2280      	movs	r2, #128	@ 0x80
 800ce4a:	00d2      	lsls	r2, r2, #3
 800ce4c:	4694      	mov	ip, r2
 800ce4e:	4463      	add	r3, ip
 800ce50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce56:	e020      	b.n	800ce9a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	781a      	ldrb	r2, [r3, #0]
 800ce5c:	2112      	movs	r1, #18
 800ce5e:	187b      	adds	r3, r7, r1
 800ce60:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	3301      	adds	r3, #1
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	b21a      	sxth	r2, r3
 800ce6c:	187b      	adds	r3, r7, r1
 800ce6e:	2000      	movs	r0, #0
 800ce70:	5e1b      	ldrsh	r3, [r3, r0]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	b21a      	sxth	r2, r3
 800ce76:	187b      	adds	r3, r7, r1
 800ce78:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	187a      	adds	r2, r7, r1
 800ce7e:	8812      	ldrh	r2, [r2, #0]
 800ce80:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	3302      	adds	r3, #2
 800ce86:	623b      	str	r3, [r7, #32]
=======
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf78:	1dbb      	adds	r3, r7, #6
 800bf7a:	881a      	ldrh	r2, [r3, #0]
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	18d3      	adds	r3, r2, r3
 800bf80:	2280      	movs	r2, #128	@ 0x80
 800bf82:	00d2      	lsls	r2, r2, #3
 800bf84:	4694      	mov	ip, r2
 800bf86:	4463      	add	r3, ip
 800bf88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf8e:	e021      	b.n	800bfd4 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	781a      	ldrb	r2, [r3, #0]
 800bf94:	2112      	movs	r1, #18
 800bf96:	187b      	adds	r3, r7, r1
 800bf98:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	b21b      	sxth	r3, r3
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	b21a      	sxth	r2, r3
 800bfa6:	187b      	adds	r3, r7, r1
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	5e1b      	ldrsh	r3, [r3, r0]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	b21a      	sxth	r2, r3
 800bfb0:	187b      	adds	r3, r7, r1
 800bfb2:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	187a      	adds	r2, r7, r1
 800bfb8:	8812      	ldrh	r2, [r2, #0]
 800bfba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	623b      	str	r3, [r7, #32]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
<<<<<<< HEAD
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	3301      	adds	r3, #1
 800ce92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	3b01      	subs	r3, #1
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1db      	bne.n	800ce58 <USB_WritePMA+0x40>
  }
}
 800cea0:	46c0      	nop			@ (mov r8, r8)
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b00a      	add	sp, #40	@ 0x28
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USB_ReadPMA>:
=======
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1da      	bne.n	800bf90 <USB_WritePMA+0x40>
  }
}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	46c0      	nop			@ (mov r8, r8)
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	b00a      	add	sp, #40	@ 0x28
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USB_ReadPMA>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b08a      	sub	sp, #40	@ 0x28
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	0019      	movs	r1, r3
 800ceb6:	1dbb      	adds	r3, r7, #6
 800ceb8:	801a      	strh	r2, [r3, #0]
 800ceba:	1d3b      	adds	r3, r7, #4
 800cebc:	1c0a      	adds	r2, r1, #0
 800cebe:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cec0:	1d3b      	adds	r3, r7, #4
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	085b      	lsrs	r3, r3, #1
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	617b      	str	r3, [r7, #20]
=======
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	@ 0x28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	0019      	movs	r1, r3
 800bff0:	1dbb      	adds	r3, r7, #6
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	1d3b      	adds	r3, r7, #4
 800bff6:	1c0a      	adds	r2, r1, #0
 800bff8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bffa:	1d3b      	adds	r3, r7, #4
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	085b      	lsrs	r3, r3, #1
 800c000:	b29b      	uxth	r3, r3
 800c002:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ced2:	1dbb      	adds	r3, r7, #6
 800ced4:	881a      	ldrh	r2, [r3, #0]
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	18d3      	adds	r3, r2, r3
 800ceda:	2280      	movs	r2, #128	@ 0x80
 800cedc:	00d2      	lsls	r2, r2, #3
 800cede:	4694      	mov	ip, r2
 800cee0:	4463      	add	r3, ip
 800cee2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cee8:	e018      	b.n	800cf1c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cef2:	6a3b      	ldr	r3, [r7, #32]
 800cef4:	3302      	adds	r3, #2
 800cef6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	3301      	adds	r3, #1
 800cf04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	0a1b      	lsrs	r3, r3, #8
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	3301      	adds	r3, #1
 800cf14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1e3      	bne.n	800ceea <USB_ReadPMA+0x40>
=======
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c00c:	1dbb      	adds	r3, r7, #6
 800c00e:	881a      	ldrh	r2, [r3, #0]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	18d3      	adds	r3, r2, r3
 800c014:	2280      	movs	r2, #128	@ 0x80
 800c016:	00d2      	lsls	r2, r2, #3
 800c018:	4694      	mov	ip, r2
 800c01a:	4463      	add	r3, ip
 800c01c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	627b      	str	r3, [r7, #36]	@ 0x24
 800c022:	e018      	b.n	800c056 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	3302      	adds	r3, #2
 800c030:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	b2da      	uxtb	r2, r3
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	3301      	adds	r3, #1
 800c03e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	0a1b      	lsrs	r3, r3, #8
 800c044:	b2da      	uxtb	r2, r3
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	3301      	adds	r3, #1
 800c04e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	3b01      	subs	r3, #1
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e3      	bne.n	800c024 <USB_ReadPMA+0x40>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< HEAD
 800cf22:	1d3b      	adds	r3, r7, #4
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	2201      	movs	r2, #1
 800cf28:	4013      	ands	r3, r2
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	701a      	strb	r2, [r3, #0]
  }
}
 800cf40:	46c0      	nop			@ (mov r8, r8)
 800cf42:	46bd      	mov	sp, r7
 800cf44:	b00a      	add	sp, #40	@ 0x28
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_CDC_Init>:
=======
 800c05c:	1d3b      	adds	r3, r7, #4
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	2201      	movs	r2, #1
 800c062:	4013      	ands	r3, r2
 800c064:	b29b      	uxth	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800c06a:	6a3b      	ldr	r3, [r7, #32]
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	b2da      	uxtb	r2, r3
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	701a      	strb	r2, [r3, #0]
  }
}
 800c07a:	46c0      	nop			@ (mov r8, r8)
 800c07c:	46bd      	mov	sp, r7
 800c07e:	b00a      	add	sp, #40	@ 0x28
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBD_CDC_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	000a      	movs	r2, r1
 800cf52:	1cfb      	adds	r3, r7, #3
 800cf54:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800cf56:	230f      	movs	r3, #15
 800cf58:	18fb      	adds	r3, r7, r3
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7c1b      	ldrb	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d116      	bne.n	800cf94 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf66:	2380      	movs	r3, #128	@ 0x80
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	2181      	movs	r1, #129	@ 0x81
 800cf70:	f004 fedf 	bl	8011d32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf7a:	2380      	movs	r3, #128	@ 0x80
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	2101      	movs	r1, #1
 800cf84:	f004 fed5 	bl	8011d32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	23b6      	movs	r3, #182	@ 0xb6
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	2101      	movs	r1, #1
 800cf90:	50d1      	str	r1, [r2, r3]
 800cf92:	e013      	b.n	800cfbc <USBD_CDC_Init+0x74>
=======
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	000a      	movs	r2, r1
 800c08c:	1cfb      	adds	r3, r7, #3
 800c08e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c090:	230f      	movs	r3, #15
 800c092:	18fb      	adds	r3, r7, r3
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7c1b      	ldrb	r3, [r3, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d116      	bne.n	800c0ce <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c0a0:	2380      	movs	r3, #128	@ 0x80
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	2181      	movs	r1, #129	@ 0x81
 800c0aa:	f004 fee0 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c0b4:	2380      	movs	r3, #128	@ 0x80
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	2101      	movs	r1, #1
 800c0be:	f004 fed6 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	23b6      	movs	r3, #182	@ 0xb6
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	50d1      	str	r1, [r2, r3]
 800c0cc:	e013      	b.n	800c0f6 <USBD_CDC_Init+0x74>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	2340      	movs	r3, #64	@ 0x40
 800cf98:	2202      	movs	r2, #2
 800cf9a:	2181      	movs	r1, #129	@ 0x81
 800cf9c:	f004 fec9 	bl	8011d32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	2340      	movs	r3, #64	@ 0x40
 800cfaa:	2202      	movs	r2, #2
 800cfac:	2101      	movs	r1, #1
 800cfae:	f004 fec0 	bl	8011d32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	23b6      	movs	r3, #182	@ 0xb6
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	2101      	movs	r1, #1
 800cfba:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	2308      	movs	r3, #8
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	2182      	movs	r1, #130	@ 0x82
 800cfc4:	f004 feb5 	bl	8011d32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cfce:	2387      	movs	r3, #135	@ 0x87
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f005 f844 	bl	8012060 <USBD_static_malloc>
 800cfd8:	0001      	movs	r1, r0
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	23ae      	movs	r3, #174	@ 0xae
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	23ae      	movs	r3, #174	@ 0xae
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	58d3      	ldr	r3, [r2, r3]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800cfee:	230f      	movs	r3, #15
 800cff0:	18fb      	adds	r3, r7, r3
 800cff2:	2201      	movs	r2, #1
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	e02c      	b.n	800d052 <USBD_CDC_Init+0x10a>
=======
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	2340      	movs	r3, #64	@ 0x40
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	2181      	movs	r1, #129	@ 0x81
 800c0d6:	f004 feca 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	2340      	movs	r3, #64	@ 0x40
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	f004 fec1 	bl	8010e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	23b6      	movs	r3, #182	@ 0xb6
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	2308      	movs	r3, #8
 800c0fa:	2203      	movs	r2, #3
 800c0fc:	2182      	movs	r1, #130	@ 0x82
 800c0fe:	f004 feb6 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c108:	2387      	movs	r3, #135	@ 0x87
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	0018      	movs	r0, r3
 800c10e:	f005 f845 	bl	801119c <USBD_static_malloc>
 800c112:	0001      	movs	r1, r0
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	23ae      	movs	r3, #174	@ 0xae
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	23ae      	movs	r3, #174	@ 0xae
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	58d3      	ldr	r3, [r2, r3]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d104      	bne.n	800c132 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800c128:	230f      	movs	r3, #15
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	2201      	movs	r2, #1
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	e02c      	b.n	800c18c <USBD_CDC_Init+0x10a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
<<<<<<< HEAD
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	23ae      	movs	r3, #174	@ 0xae
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	58d3      	ldr	r3, [r2, r3]
 800d000:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	23af      	movs	r3, #175	@ 0xaf
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	58d3      	ldr	r3, [r2, r3]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	2385      	movs	r3, #133	@ 0x85
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	2100      	movs	r1, #0
 800d016:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	2386      	movs	r3, #134	@ 0x86
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	2100      	movs	r1, #0
 800d020:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	7c1b      	ldrb	r3, [r3, #16]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	2381      	movs	r3, #129	@ 0x81
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	58d2      	ldr	r2, [r2, r3]
 800d032:	2380      	movs	r3, #128	@ 0x80
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	2101      	movs	r1, #1
 800d03a:	f004 ffc4 	bl	8011fc6 <USBD_LL_PrepareReceive>
 800d03e:	e008      	b.n	800d052 <USBD_CDC_Init+0x10a>
=======
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	23ae      	movs	r3, #174	@ 0xae
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	58d3      	ldr	r3, [r2, r3]
 800c13a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	23af      	movs	r3, #175	@ 0xaf
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	58d3      	ldr	r3, [r2, r3]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	2385      	movs	r3, #133	@ 0x85
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	2100      	movs	r1, #0
 800c150:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	2386      	movs	r3, #134	@ 0x86
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	2100      	movs	r1, #0
 800c15a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7c1b      	ldrb	r3, [r3, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	2381      	movs	r3, #129	@ 0x81
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	58d2      	ldr	r2, [r2, r3]
 800c16c:	2380      	movs	r3, #128	@ 0x80
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	2101      	movs	r1, #1
 800c174:	f004 ffc5 	bl	8011102 <USBD_LL_PrepareReceive>
 800c178:	e008      	b.n	800c18c <USBD_CDC_Init+0x10a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	2381      	movs	r3, #129	@ 0x81
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	58d2      	ldr	r2, [r2, r3]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	2340      	movs	r3, #64	@ 0x40
 800d04c:	2101      	movs	r1, #1
 800d04e:	f004 ffba 	bl	8011fc6 <USBD_LL_PrepareReceive>
=======
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	2381      	movs	r3, #129	@ 0x81
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	58d2      	ldr	r2, [r2, r3]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	2340      	movs	r3, #64	@ 0x40
 800c186:	2101      	movs	r1, #1
 800c188:	f004 ffbb 	bl	8011102 <USBD_LL_PrepareReceive>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
<<<<<<< HEAD
 800d052:	230f      	movs	r3, #15
 800d054:	18fb      	adds	r3, r7, r3
 800d056:	781b      	ldrb	r3, [r3, #0]
}
 800d058:	0018      	movs	r0, r3
 800d05a:	46bd      	mov	sp, r7
 800d05c:	b004      	add	sp, #16
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <USBD_CDC_DeInit>:
=======
 800c18c:	230f      	movs	r3, #15
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	781b      	ldrb	r3, [r3, #0]
}
 800c192:	0018      	movs	r0, r3
 800c194:	46bd      	mov	sp, r7
 800c196:	b004      	add	sp, #16
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CDC_DeInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	000a      	movs	r2, r1
 800d06a:	1cfb      	adds	r3, r7, #3
 800d06c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800d06e:	230f      	movs	r3, #15
 800d070:	18fb      	adds	r3, r7, r3
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2181      	movs	r1, #129	@ 0x81
 800d07a:	0018      	movs	r0, r3
 800d07c:	f004 fe90 	bl	8011da0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2101      	movs	r1, #1
 800d08a:	0018      	movs	r0, r3
 800d08c:	f004 fe88 	bl	8011da0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	23b6      	movs	r3, #182	@ 0xb6
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	2100      	movs	r1, #0
 800d098:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2182      	movs	r1, #130	@ 0x82
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f004 fe7e 	bl	8011da0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	23ae      	movs	r3, #174	@ 0xae
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	58d3      	ldr	r3, [r2, r3]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d011      	beq.n	800d0da <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	23af      	movs	r3, #175	@ 0xaf
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	58d3      	ldr	r3, [r2, r3]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	23ae      	movs	r3, #174	@ 0xae
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	58d3      	ldr	r3, [r2, r3]
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f004 ffd4 	bl	8012078 <USBD_static_free>
    pdev->pClassData = NULL;
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	23ae      	movs	r3, #174	@ 0xae
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800d0da:	230f      	movs	r3, #15
 800d0dc:	18fb      	adds	r3, r7, r3
 800d0de:	781b      	ldrb	r3, [r3, #0]
}
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	b004      	add	sp, #16
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBD_CDC_Setup>:
=======
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	000a      	movs	r2, r1
 800c1a4:	1cfb      	adds	r3, r7, #3
 800c1a6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c1a8:	230f      	movs	r3, #15
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2181      	movs	r1, #129	@ 0x81
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f004 fe91 	bl	8010edc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	0018      	movs	r0, r3
 800c1c6:	f004 fe89 	bl	8010edc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	23b6      	movs	r3, #182	@ 0xb6
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2182      	movs	r1, #130	@ 0x82
 800c1d8:	0018      	movs	r0, r3
 800c1da:	f004 fe7f 	bl	8010edc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	23ae      	movs	r3, #174	@ 0xae
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	58d3      	ldr	r3, [r2, r3]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d011      	beq.n	800c214 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	23af      	movs	r3, #175	@ 0xaf
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	58d3      	ldr	r3, [r2, r3]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	23ae      	movs	r3, #174	@ 0xae
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	58d3      	ldr	r3, [r2, r3]
 800c204:	0018      	movs	r0, r3
 800c206:	f004 ffd5 	bl	80111b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	23ae      	movs	r3, #174	@ 0xae
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	2100      	movs	r1, #0
 800c212:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800c214:	230f      	movs	r3, #15
 800c216:	18fb      	adds	r3, r7, r3
 800c218:	781b      	ldrb	r3, [r3, #0]
}
 800c21a:	0018      	movs	r0, r3
 800c21c:	46bd      	mov	sp, r7
 800c21e:	b004      	add	sp, #16
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <USBD_CDC_Setup>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	23ae      	movs	r3, #174	@ 0xae
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	58d3      	ldr	r3, [r2, r3]
 800d0fa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d0fc:	230f      	movs	r3, #15
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	2200      	movs	r2, #0
 800d102:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800d104:	230c      	movs	r3, #12
 800d106:	18fb      	adds	r3, r7, r3
 800d108:	2200      	movs	r2, #0
 800d10a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800d10c:	2317      	movs	r3, #23
 800d10e:	18fb      	adds	r3, r7, r3
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	001a      	movs	r2, r3
 800d11a:	2360      	movs	r3, #96	@ 0x60
 800d11c:	4013      	ands	r3, r2
 800d11e:	d03d      	beq.n	800d19c <USBD_CDC_Setup+0xb4>
 800d120:	2b20      	cmp	r3, #32
 800d122:	d000      	beq.n	800d126 <USBD_CDC_Setup+0x3e>
 800d124:	e094      	b.n	800d250 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d02b      	beq.n	800d186 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	b25b      	sxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	da12      	bge.n	800d15e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	23af      	movs	r3, #175	@ 0xaf
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	58d3      	ldr	r3, [r2, r3]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d146:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	88d2      	ldrh	r2, [r2, #6]
 800d14c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d14e:	6939      	ldr	r1, [r7, #16]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	88da      	ldrh	r2, [r3, #6]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	0018      	movs	r0, r3
 800d158:	f001 fbaf 	bl	800e8ba <USBD_CtlSendData>
=======
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	23ae      	movs	r3, #174	@ 0xae
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	58d3      	ldr	r3, [r2, r3]
 800c236:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c238:	230f      	movs	r3, #15
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	2200      	movs	r2, #0
 800c23e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800c240:	230c      	movs	r3, #12
 800c242:	18fb      	adds	r3, r7, r3
 800c244:	2200      	movs	r2, #0
 800c246:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800c248:	2317      	movs	r3, #23
 800c24a:	18fb      	adds	r3, r7, r3
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	001a      	movs	r2, r3
 800c256:	2360      	movs	r3, #96	@ 0x60
 800c258:	4013      	ands	r3, r2
 800c25a:	d03d      	beq.n	800c2d8 <USBD_CDC_Setup+0xb4>
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d000      	beq.n	800c262 <USBD_CDC_Setup+0x3e>
 800c260:	e094      	b.n	800c38c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d02b      	beq.n	800c2c2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b25b      	sxtb	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	da12      	bge.n	800c29a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	23af      	movs	r3, #175	@ 0xaf
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	58d3      	ldr	r3, [r2, r3]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c282:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	88d2      	ldrh	r2, [r2, #6]
 800c288:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c28a:	6939      	ldr	r1, [r7, #16]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	88da      	ldrh	r2, [r3, #6]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	0018      	movs	r0, r3
 800c294:	f001 fbaf 	bl	800d9f6 <USBD_CtlSendData>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
<<<<<<< HEAD
 800d15c:	e083      	b.n	800d266 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	7859      	ldrb	r1, [r3, #1]
 800d162:	693a      	ldr	r2, [r7, #16]
 800d164:	2380      	movs	r3, #128	@ 0x80
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	88db      	ldrh	r3, [r3, #6]
 800d16e:	b2d9      	uxtb	r1, r3
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	4a40      	ldr	r2, [pc, #256]	@ (800d274 <USBD_CDC_Setup+0x18c>)
 800d174:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d176:	6939      	ldr	r1, [r7, #16]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	88da      	ldrh	r2, [r3, #6]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	0018      	movs	r0, r3
 800d180:	f001 fbce 	bl	800e920 <USBD_CtlPrepareRx>
      break;
 800d184:	e06f      	b.n	800d266 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	23af      	movs	r3, #175	@ 0xaf
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	58d3      	ldr	r3, [r2, r3]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	683a      	ldr	r2, [r7, #0]
 800d192:	7850      	ldrb	r0, [r2, #1]
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	2200      	movs	r2, #0
 800d198:	4798      	blx	r3
      break;
 800d19a:	e064      	b.n	800d266 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	785b      	ldrb	r3, [r3, #1]
 800d1a0:	2b0b      	cmp	r3, #11
 800d1a2:	d037      	beq.n	800d214 <USBD_CDC_Setup+0x12c>
 800d1a4:	dc47      	bgt.n	800d236 <USBD_CDC_Setup+0x14e>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <USBD_CDC_Setup+0xc8>
 800d1aa:	2b0a      	cmp	r3, #10
 800d1ac:	d019      	beq.n	800d1e2 <USBD_CDC_Setup+0xfa>
 800d1ae:	e042      	b.n	800d236 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	23a7      	movs	r3, #167	@ 0xa7
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	5cd3      	ldrb	r3, [r2, r3]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d107      	bne.n	800d1cc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d1bc:	230c      	movs	r3, #12
 800d1be:	18f9      	adds	r1, r7, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	0018      	movs	r0, r3
 800d1c6:	f001 fb78 	bl	800e8ba <USBD_CtlSendData>
=======
 800c298:	e083      	b.n	800c3a2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	7859      	ldrb	r1, [r3, #1]
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	2380      	movs	r3, #128	@ 0x80
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	88db      	ldrh	r3, [r3, #6]
 800c2aa:	b2d9      	uxtb	r1, r3
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	4a40      	ldr	r2, [pc, #256]	@ (800c3b0 <USBD_CDC_Setup+0x18c>)
 800c2b0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c2b2:	6939      	ldr	r1, [r7, #16]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	88da      	ldrh	r2, [r3, #6]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f001 fbce 	bl	800da5c <USBD_CtlPrepareRx>
      break;
 800c2c0:	e06f      	b.n	800c3a2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	23af      	movs	r3, #175	@ 0xaf
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	58d3      	ldr	r3, [r2, r3]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	7850      	ldrb	r0, [r2, #1]
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4798      	blx	r3
      break;
 800c2d6:	e064      	b.n	800c3a2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b0b      	cmp	r3, #11
 800c2de:	d037      	beq.n	800c350 <USBD_CDC_Setup+0x12c>
 800c2e0:	dc47      	bgt.n	800c372 <USBD_CDC_Setup+0x14e>
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <USBD_CDC_Setup+0xc8>
 800c2e6:	2b0a      	cmp	r3, #10
 800c2e8:	d019      	beq.n	800c31e <USBD_CDC_Setup+0xfa>
 800c2ea:	e042      	b.n	800c372 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	23a7      	movs	r3, #167	@ 0xa7
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	5cd3      	ldrb	r3, [r2, r3]
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d107      	bne.n	800c308 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	18f9      	adds	r1, r7, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	0018      	movs	r0, r3
 800c302:	f001 fb78 	bl	800d9f6 <USBD_CtlSendData>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 800d1ca:	e040      	b.n	800d24e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	0011      	movs	r1, r2
 800d1d2:	0018      	movs	r0, r3
 800d1d4:	f001 faf3 	bl	800e7be <USBD_CtlError>
            ret = USBD_FAIL;
 800d1d8:	2317      	movs	r3, #23
 800d1da:	18fb      	adds	r3, r7, r3
 800d1dc:	2202      	movs	r2, #2
 800d1de:	701a      	strb	r2, [r3, #0]
          break;
 800d1e0:	e035      	b.n	800d24e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	23a7      	movs	r3, #167	@ 0xa7
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	5cd3      	ldrb	r3, [r2, r3]
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d107      	bne.n	800d1fe <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1ee:	230f      	movs	r3, #15
 800d1f0:	18f9      	adds	r1, r7, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f001 fb5f 	bl	800e8ba <USBD_CtlSendData>
=======
 800c306:	e040      	b.n	800c38a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	0011      	movs	r1, r2
 800c30e:	0018      	movs	r0, r3
 800c310:	f001 faf3 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c314:	2317      	movs	r3, #23
 800c316:	18fb      	adds	r3, r7, r3
 800c318:	2202      	movs	r2, #2
 800c31a:	701a      	strb	r2, [r3, #0]
          break;
 800c31c:	e035      	b.n	800c38a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	23a7      	movs	r3, #167	@ 0xa7
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	5cd3      	ldrb	r3, [r2, r3]
 800c326:	2b03      	cmp	r3, #3
 800c328:	d107      	bne.n	800c33a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c32a:	230f      	movs	r3, #15
 800c32c:	18f9      	adds	r1, r7, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	0018      	movs	r0, r3
 800c334:	f001 fb5f 	bl	800d9f6 <USBD_CtlSendData>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 800d1fc:	e027      	b.n	800d24e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	0011      	movs	r1, r2
 800d204:	0018      	movs	r0, r3
 800d206:	f001 fada 	bl	800e7be <USBD_CtlError>
            ret = USBD_FAIL;
 800d20a:	2317      	movs	r3, #23
 800d20c:	18fb      	adds	r3, r7, r3
 800d20e:	2202      	movs	r2, #2
 800d210:	701a      	strb	r2, [r3, #0]
          break;
 800d212:	e01c      	b.n	800d24e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	23a7      	movs	r3, #167	@ 0xa7
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	5cd3      	ldrb	r3, [r2, r3]
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d015      	beq.n	800d24c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	0011      	movs	r1, r2
 800d226:	0018      	movs	r0, r3
 800d228:	f001 fac9 	bl	800e7be <USBD_CtlError>
            ret = USBD_FAIL;
 800d22c:	2317      	movs	r3, #23
 800d22e:	18fb      	adds	r3, r7, r3
 800d230:	2202      	movs	r2, #2
 800d232:	701a      	strb	r2, [r3, #0]
          }
          break;
 800d234:	e00a      	b.n	800d24c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	0011      	movs	r1, r2
 800d23c:	0018      	movs	r0, r3
 800d23e:	f001 fabe 	bl	800e7be <USBD_CtlError>
          ret = USBD_FAIL;
 800d242:	2317      	movs	r3, #23
 800d244:	18fb      	adds	r3, r7, r3
 800d246:	2202      	movs	r2, #2
 800d248:	701a      	strb	r2, [r3, #0]
          break;
 800d24a:	e000      	b.n	800d24e <USBD_CDC_Setup+0x166>
          break;
 800d24c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d24e:	e00a      	b.n	800d266 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	0011      	movs	r1, r2
 800d256:	0018      	movs	r0, r3
 800d258:	f001 fab1 	bl	800e7be <USBD_CtlError>
      ret = USBD_FAIL;
 800d25c:	2317      	movs	r3, #23
 800d25e:	18fb      	adds	r3, r7, r3
 800d260:	2202      	movs	r2, #2
 800d262:	701a      	strb	r2, [r3, #0]
      break;
 800d264:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d266:	2317      	movs	r3, #23
 800d268:	18fb      	adds	r3, r7, r3
 800d26a:	781b      	ldrb	r3, [r3, #0]
}
 800d26c:	0018      	movs	r0, r3
 800d26e:	46bd      	mov	sp, r7
 800d270:	b006      	add	sp, #24
 800d272:	bd80      	pop	{r7, pc}
 800d274:	00000201 	.word	0x00000201

0800d278 <USBD_CDC_DataIn>:
=======
 800c338:	e027      	b.n	800c38a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	0011      	movs	r1, r2
 800c340:	0018      	movs	r0, r3
 800c342:	f001 fada 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c346:	2317      	movs	r3, #23
 800c348:	18fb      	adds	r3, r7, r3
 800c34a:	2202      	movs	r2, #2
 800c34c:	701a      	strb	r2, [r3, #0]
          break;
 800c34e:	e01c      	b.n	800c38a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	23a7      	movs	r3, #167	@ 0xa7
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	5cd3      	ldrb	r3, [r2, r3]
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d015      	beq.n	800c388 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	0011      	movs	r1, r2
 800c362:	0018      	movs	r0, r3
 800c364:	f001 fac9 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c368:	2317      	movs	r3, #23
 800c36a:	18fb      	adds	r3, r7, r3
 800c36c:	2202      	movs	r2, #2
 800c36e:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c370:	e00a      	b.n	800c388 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	0011      	movs	r1, r2
 800c378:	0018      	movs	r0, r3
 800c37a:	f001 fabe 	bl	800d8fa <USBD_CtlError>
          ret = USBD_FAIL;
 800c37e:	2317      	movs	r3, #23
 800c380:	18fb      	adds	r3, r7, r3
 800c382:	2202      	movs	r2, #2
 800c384:	701a      	strb	r2, [r3, #0]
          break;
 800c386:	e000      	b.n	800c38a <USBD_CDC_Setup+0x166>
          break;
 800c388:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c38a:	e00a      	b.n	800c3a2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800c38c:	683a      	ldr	r2, [r7, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	0011      	movs	r1, r2
 800c392:	0018      	movs	r0, r3
 800c394:	f001 fab1 	bl	800d8fa <USBD_CtlError>
      ret = USBD_FAIL;
 800c398:	2317      	movs	r3, #23
 800c39a:	18fb      	adds	r3, r7, r3
 800c39c:	2202      	movs	r2, #2
 800c39e:	701a      	strb	r2, [r3, #0]
      break;
 800c3a0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c3a2:	2317      	movs	r3, #23
 800c3a4:	18fb      	adds	r3, r7, r3
 800c3a6:	781b      	ldrb	r3, [r3, #0]
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b006      	add	sp, #24
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	00000201 	.word	0x00000201

0800c3b4 <USBD_CDC_DataIn>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	000a      	movs	r2, r1
 800d282:	1cfb      	adds	r3, r7, #3
 800d284:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	23ae      	movs	r3, #174	@ 0xae
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	58d3      	ldr	r3, [r2, r3]
 800d28e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	23b0      	movs	r3, #176	@ 0xb0
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	58d3      	ldr	r3, [r2, r3]
 800d298:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	23ae      	movs	r3, #174	@ 0xae
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	58d3      	ldr	r3, [r2, r3]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d03e      	beq.n	800d324 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d2a6:	1cfb      	adds	r3, r7, #3
 800d2a8:	781a      	ldrb	r2, [r3, #0]
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	0013      	movs	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	189b      	adds	r3, r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	18cb      	adds	r3, r1, r3
 800d2b6:	331c      	adds	r3, #28
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d02b      	beq.n	800d316 <USBD_CDC_DataIn+0x9e>
 800d2be:	1cfb      	adds	r3, r7, #3
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	0013      	movs	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	189b      	adds	r3, r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	18cb      	adds	r3, r1, r3
 800d2ce:	331c      	adds	r3, #28
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	1cfb      	adds	r3, r7, #3
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	0013      	movs	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	189b      	adds	r3, r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	18cb      	adds	r3, r1, r3
 800d2e2:	3320      	adds	r3, #32
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	0019      	movs	r1, r3
 800d2e8:	f7f2 ffb0 	bl	800024c <__aeabi_uidivmod>
 800d2ec:	1e0b      	subs	r3, r1, #0
 800d2ee:	d112      	bne.n	800d316 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d2f0:	1cfb      	adds	r3, r7, #3
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	6879      	ldr	r1, [r7, #4]
 800d2f6:	0013      	movs	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	189b      	adds	r3, r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	18cb      	adds	r3, r1, r3
 800d300:	331c      	adds	r3, #28
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d306:	1cfb      	adds	r3, r7, #3
 800d308:	7819      	ldrb	r1, [r3, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	2300      	movs	r3, #0
 800d30e:	2200      	movs	r2, #0
 800d310:	f004 fe22 	bl	8011f58 <USBD_LL_Transmit>
 800d314:	e004      	b.n	800d320 <USBD_CDC_DataIn+0xa8>
=======
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	000a      	movs	r2, r1
 800c3be:	1cfb      	adds	r3, r7, #3
 800c3c0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	23ae      	movs	r3, #174	@ 0xae
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	58d3      	ldr	r3, [r2, r3]
 800c3ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	23b0      	movs	r3, #176	@ 0xb0
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	58d3      	ldr	r3, [r2, r3]
 800c3d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	23ae      	movs	r3, #174	@ 0xae
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	58d3      	ldr	r3, [r2, r3]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d03e      	beq.n	800c460 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3e2:	1cfb      	adds	r3, r7, #3
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	0013      	movs	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	189b      	adds	r3, r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	18cb      	adds	r3, r1, r3
 800c3f2:	331c      	adds	r3, #28
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d02b      	beq.n	800c452 <USBD_CDC_DataIn+0x9e>
 800c3fa:	1cfb      	adds	r3, r7, #3
 800c3fc:	781a      	ldrb	r2, [r3, #0]
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	0013      	movs	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	189b      	adds	r3, r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	18cb      	adds	r3, r1, r3
 800c40a:	331c      	adds	r3, #28
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	1cfb      	adds	r3, r7, #3
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	0013      	movs	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	189b      	adds	r3, r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	18cb      	adds	r3, r1, r3
 800c41e:	3320      	adds	r3, #32
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	0019      	movs	r1, r3
 800c424:	f7f3 ff12 	bl	800024c <__aeabi_uidivmod>
 800c428:	1e0b      	subs	r3, r1, #0
 800c42a:	d112      	bne.n	800c452 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c42c:	1cfb      	adds	r3, r7, #3
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	0013      	movs	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	189b      	adds	r3, r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	18cb      	adds	r3, r1, r3
 800c43c:	331c      	adds	r3, #28
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c442:	1cfb      	adds	r3, r7, #3
 800c444:	7819      	ldrb	r1, [r3, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	2300      	movs	r3, #0
 800c44a:	2200      	movs	r2, #0
 800c44c:	f004 fe22 	bl	8011094 <USBD_LL_Transmit>
 800c450:	e004      	b.n	800c45c <USBD_CDC_DataIn+0xa8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      hcdc->TxState = 0U;
<<<<<<< HEAD
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	2385      	movs	r3, #133	@ 0x85
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	2100      	movs	r1, #0
 800d31e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	e000      	b.n	800d326 <USBD_CDC_DataIn+0xae>
=======
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	2385      	movs	r3, #133	@ 0x85
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	2100      	movs	r1, #0
 800c45a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e000      	b.n	800c462 <USBD_CDC_DataIn+0xae>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 800d324:	2302      	movs	r3, #2
  }
}
 800d326:	0018      	movs	r0, r3
 800d328:	46bd      	mov	sp, r7
 800d32a:	b004      	add	sp, #16
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_CDC_DataOut>:
=======
 800c460:	2302      	movs	r3, #2
  }
}
 800c462:	0018      	movs	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	b004      	add	sp, #16
 800c468:	bd80      	pop	{r7, pc}

0800c46a <USBD_CDC_DataOut>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	000a      	movs	r2, r1
 800d338:	1cfb      	adds	r3, r7, #3
 800d33a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	23ae      	movs	r3, #174	@ 0xae
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	58d3      	ldr	r3, [r2, r3]
 800d344:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d346:	1cfb      	adds	r3, r7, #3
 800d348:	781a      	ldrb	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	0011      	movs	r1, r2
 800d34e:	0018      	movs	r0, r3
 800d350:	f004 fe70 	bl	8012034 <USBD_LL_GetRxDataSize>
 800d354:	0001      	movs	r1, r0
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	2383      	movs	r3, #131	@ 0x83
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	50d1      	str	r1, [r2, r3]
=======
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	000a      	movs	r2, r1
 800c474:	1cfb      	adds	r3, r7, #3
 800c476:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	23ae      	movs	r3, #174	@ 0xae
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	58d3      	ldr	r3, [r2, r3]
 800c480:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c482:	1cfb      	adds	r3, r7, #3
 800c484:	781a      	ldrb	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	0011      	movs	r1, r2
 800c48a:	0018      	movs	r0, r3
 800c48c:	f004 fe70 	bl	8011170 <USBD_LL_GetRxDataSize>
 800c490:	0001      	movs	r1, r0
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	2383      	movs	r3, #131	@ 0x83
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	50d1      	str	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
<<<<<<< HEAD
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	23ae      	movs	r3, #174	@ 0xae
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	58d3      	ldr	r3, [r2, r3]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d011      	beq.n	800d38e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	23af      	movs	r3, #175	@ 0xaf
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	58d3      	ldr	r3, [r2, r3]
 800d372:	68da      	ldr	r2, [r3, #12]
 800d374:	68f9      	ldr	r1, [r7, #12]
 800d376:	2381      	movs	r3, #129	@ 0x81
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	58c8      	ldr	r0, [r1, r3]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2183      	movs	r1, #131	@ 0x83
 800d380:	0089      	lsls	r1, r1, #2
 800d382:	468c      	mov	ip, r1
 800d384:	4463      	add	r3, ip
 800d386:	0019      	movs	r1, r3
 800d388:	4790      	blx	r2

    return USBD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e000      	b.n	800d390 <USBD_CDC_DataOut+0x62>
=======
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	23ae      	movs	r3, #174	@ 0xae
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	58d3      	ldr	r3, [r2, r3]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d011      	beq.n	800c4ca <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	23af      	movs	r3, #175	@ 0xaf
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	58d3      	ldr	r3, [r2, r3]
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	68f9      	ldr	r1, [r7, #12]
 800c4b2:	2381      	movs	r3, #129	@ 0x81
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	58c8      	ldr	r0, [r1, r3]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2183      	movs	r1, #131	@ 0x83
 800c4bc:	0089      	lsls	r1, r1, #2
 800c4be:	468c      	mov	ip, r1
 800c4c0:	4463      	add	r3, ip
 800c4c2:	0019      	movs	r1, r3
 800c4c4:	4790      	blx	r2

    return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e000      	b.n	800c4cc <USBD_CDC_DataOut+0x62>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 800d38e:	2302      	movs	r3, #2
  }
}
 800d390:	0018      	movs	r0, r3
 800d392:	46bd      	mov	sp, r7
 800d394:	b004      	add	sp, #16
 800d396:	bd80      	pop	{r7, pc}

0800d398 <USBD_CDC_EP0_RxReady>:
=======
 800c4ca:	2302      	movs	r3, #2
  }
}
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	b004      	add	sp, #16
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_CDC_EP0_RxReady>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	23ae      	movs	r3, #174	@ 0xae
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	58d3      	ldr	r3, [r2, r3]
 800d3a8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	23af      	movs	r3, #175	@ 0xaf
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	58d3      	ldr	r3, [r2, r3]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d018      	beq.n	800d3e8 <USBD_CDC_EP0_RxReady+0x50>
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	2380      	movs	r3, #128	@ 0x80
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	5cd3      	ldrb	r3, [r2, r3]
 800d3be:	2bff      	cmp	r3, #255	@ 0xff
 800d3c0:	d012      	beq.n	800d3e8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	23af      	movs	r3, #175	@ 0xaf
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	58d3      	ldr	r3, [r2, r3]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	68f9      	ldr	r1, [r7, #12]
 800d3ce:	2280      	movs	r2, #128	@ 0x80
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800d3d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	4c06      	ldr	r4, [pc, #24]	@ (800d3f4 <USBD_CDC_EP0_RxReady+0x5c>)
 800d3da:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	2380      	movs	r3, #128	@ 0x80
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	21ff      	movs	r1, #255	@ 0xff
 800d3e6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	0018      	movs	r0, r3
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	b005      	add	sp, #20
 800d3f0:	bd90      	pop	{r4, r7, pc}
 800d3f2:	46c0      	nop			@ (mov r8, r8)
 800d3f4:	00000201 	.word	0x00000201

0800d3f8 <USBD_CDC_GetFSCfgDesc>:
=======
 800c4d4:	b590      	push	{r4, r7, lr}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	23ae      	movs	r3, #174	@ 0xae
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	58d3      	ldr	r3, [r2, r3]
 800c4e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	23af      	movs	r3, #175	@ 0xaf
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	58d3      	ldr	r3, [r2, r3]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d018      	beq.n	800c524 <USBD_CDC_EP0_RxReady+0x50>
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	2380      	movs	r3, #128	@ 0x80
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	5cd3      	ldrb	r3, [r2, r3]
 800c4fa:	2bff      	cmp	r3, #255	@ 0xff
 800c4fc:	d012      	beq.n	800c524 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	23af      	movs	r3, #175	@ 0xaf
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	58d3      	ldr	r3, [r2, r3]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	68f9      	ldr	r1, [r7, #12]
 800c50a:	2280      	movs	r2, #128	@ 0x80
 800c50c:	0092      	lsls	r2, r2, #2
 800c50e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800c510:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	4c06      	ldr	r4, [pc, #24]	@ (800c530 <USBD_CDC_EP0_RxReady+0x5c>)
 800c516:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c518:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	2380      	movs	r3, #128	@ 0x80
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	21ff      	movs	r1, #255	@ 0xff
 800c522:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	0018      	movs	r0, r3
 800c528:	46bd      	mov	sp, r7
 800c52a:	b005      	add	sp, #20
 800c52c:	bd90      	pop	{r4, r7, pc}
 800c52e:	46c0      	nop			@ (mov r8, r8)
 800c530:	00000201 	.word	0x00000201

0800c534 <USBD_CDC_GetFSCfgDesc>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2243      	movs	r2, #67	@ 0x43
 800d404:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d406:	4b02      	ldr	r3, [pc, #8]	@ (800d410 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800d408:	0018      	movs	r0, r3
 800d40a:	46bd      	mov	sp, r7
 800d40c:	b002      	add	sp, #8
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000104 	.word	0x20000104

0800d414 <USBD_CDC_GetHSCfgDesc>:
=======
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2243      	movs	r2, #67	@ 0x43
 800c540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c542:	4b02      	ldr	r3, [pc, #8]	@ (800c54c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800c544:	0018      	movs	r0, r3
 800c546:	46bd      	mov	sp, r7
 800c548:	b002      	add	sp, #8
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	2000010c 	.word	0x2000010c

0800c550 <USBD_CDC_GetHSCfgDesc>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2243      	movs	r2, #67	@ 0x43
 800d420:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d422:	4b02      	ldr	r3, [pc, #8]	@ (800d42c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800d424:	0018      	movs	r0, r3
 800d426:	46bd      	mov	sp, r7
 800d428:	b002      	add	sp, #8
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200000c0 	.word	0x200000c0

0800d430 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2243      	movs	r2, #67	@ 0x43
 800c55c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c55e:	4b02      	ldr	r3, [pc, #8]	@ (800c568 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800c560:	0018      	movs	r0, r3
 800c562:	46bd      	mov	sp, r7
 800c564:	b002      	add	sp, #8
 800c566:	bd80      	pop	{r7, pc}
 800c568:	200000c8 	.word	0x200000c8

0800c56c <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2243      	movs	r2, #67	@ 0x43
 800d43c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d43e:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800d440:	0018      	movs	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	b002      	add	sp, #8
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20000148 	.word	0x20000148

0800d44c <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2243      	movs	r2, #67	@ 0x43
 800c578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c57a:	4b02      	ldr	r3, [pc, #8]	@ (800c584 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800c57c:	0018      	movs	r0, r3
 800c57e:	46bd      	mov	sp, r7
 800c580:	b002      	add	sp, #8
 800c582:	bd80      	pop	{r7, pc}
 800c584:	20000150 	.word	0x20000150

0800c588 <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	220a      	movs	r2, #10
 800d458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d45a:	4b02      	ldr	r3, [pc, #8]	@ (800d464 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800d45c:	0018      	movs	r0, r3
 800d45e:	46bd      	mov	sp, r7
 800d460:	b002      	add	sp, #8
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000007c 	.word	0x2000007c

0800d468 <USBD_CDC_RegisterInterface>:
=======
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	220a      	movs	r2, #10
 800c594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c596:	4b02      	ldr	r3, [pc, #8]	@ (800c5a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c598:	0018      	movs	r0, r3
 800c59a:	46bd      	mov	sp, r7
 800c59c:	b002      	add	sp, #8
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	20000084 	.word	0x20000084

0800c5a4 <USBD_CDC_RegisterInterface>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d472:	200f      	movs	r0, #15
 800d474:	183b      	adds	r3, r7, r0
 800d476:	2202      	movs	r2, #2
 800d478:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	23af      	movs	r3, #175	@ 0xaf
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800d48a:	183b      	adds	r3, r7, r0
 800d48c:	2200      	movs	r2, #0
 800d48e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800d490:	230f      	movs	r3, #15
 800d492:	18fb      	adds	r3, r7, r3
 800d494:	781b      	ldrb	r3, [r3, #0]
}
 800d496:	0018      	movs	r0, r3
 800d498:	46bd      	mov	sp, r7
 800d49a:	b004      	add	sp, #16
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <USBD_CDC_SetTxBuffer>:
=======
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c5ae:	200f      	movs	r0, #15
 800c5b0:	183b      	adds	r3, r7, r0
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23af      	movs	r3, #175	@ 0xaf
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800c5c6:	183b      	adds	r3, r7, r0
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c5cc:	230f      	movs	r3, #15
 800c5ce:	18fb      	adds	r3, r7, r3
 800c5d0:	781b      	ldrb	r3, [r3, #0]
}
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	b004      	add	sp, #16
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBD_CDC_SetTxBuffer>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
<<<<<<< HEAD
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	60f8      	str	r0, [r7, #12]
 800d4a6:	60b9      	str	r1, [r7, #8]
 800d4a8:	1dbb      	adds	r3, r7, #6
 800d4aa:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	23ae      	movs	r3, #174	@ 0xae
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	58d3      	ldr	r3, [r2, r3]
 800d4b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	2382      	movs	r3, #130	@ 0x82
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800d4c0:	1dbb      	adds	r3, r7, #6
 800d4c2:	8819      	ldrh	r1, [r3, #0]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	2384      	movs	r3, #132	@ 0x84
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	b006      	add	sp, #24
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_CDC_SetRxBuffer>:
=======
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b086      	sub	sp, #24
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	1dbb      	adds	r3, r7, #6
 800c5e6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	23ae      	movs	r3, #174	@ 0xae
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	58d3      	ldr	r3, [r2, r3]
 800c5f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	2382      	movs	r3, #130	@ 0x82
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c5fc:	1dbb      	adds	r3, r7, #6
 800c5fe:	8819      	ldrh	r1, [r3, #0]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	2384      	movs	r3, #132	@ 0x84
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	0018      	movs	r0, r3
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b006      	add	sp, #24
 800c610:	bd80      	pop	{r7, pc}

0800c612 <USBD_CDC_SetRxBuffer>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
<<<<<<< HEAD
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	23ae      	movs	r3, #174	@ 0xae
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	58d3      	ldr	r3, [r2, r3]
 800d4e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	2381      	movs	r3, #129	@ 0x81
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b004      	add	sp, #16
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <USBD_CDC_TransmitPacket>:
=======
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	23ae      	movs	r3, #174	@ 0xae
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	58d3      	ldr	r3, [r2, r3]
 800c624:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	2381      	movs	r3, #129	@ 0x81
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	0018      	movs	r0, r3
 800c634:	46bd      	mov	sp, r7
 800c636:	b004      	add	sp, #16
 800c638:	bd80      	pop	{r7, pc}

0800c63a <USBD_CDC_TransmitPacket>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	23ae      	movs	r3, #174	@ 0xae
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	58d3      	ldr	r3, [r2, r3]
 800d50e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	23ae      	movs	r3, #174	@ 0xae
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	58d3      	ldr	r3, [r2, r3]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d022      	beq.n	800d562 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	2385      	movs	r3, #133	@ 0x85
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	58d3      	ldr	r3, [r2, r3]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d11a      	bne.n	800d55e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	2385      	movs	r3, #133	@ 0x85
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	2101      	movs	r1, #1
 800d530:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	2384      	movs	r3, #132	@ 0x84
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	58d2      	ldr	r2, [r2, r3]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	2382      	movs	r3, #130	@ 0x82
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	2384      	movs	r3, #132	@ 0x84
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d54e:	b29b      	uxth	r3, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	000a      	movs	r2, r1
 800d554:	2181      	movs	r1, #129	@ 0x81
 800d556:	f004 fcff 	bl	8011f58 <USBD_LL_Transmit>

      return USBD_OK;
 800d55a:	2300      	movs	r3, #0
 800d55c:	e002      	b.n	800d564 <USBD_CDC_TransmitPacket+0x66>
=======
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b084      	sub	sp, #16
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	23ae      	movs	r3, #174	@ 0xae
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	58d3      	ldr	r3, [r2, r3]
 800c64a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	23ae      	movs	r3, #174	@ 0xae
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	58d3      	ldr	r3, [r2, r3]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d022      	beq.n	800c69e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	2385      	movs	r3, #133	@ 0x85
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	58d3      	ldr	r3, [r2, r3]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d11a      	bne.n	800c69a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	2385      	movs	r3, #133	@ 0x85
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	2101      	movs	r1, #1
 800c66c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	2384      	movs	r3, #132	@ 0x84
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	58d2      	ldr	r2, [r2, r3]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	2382      	movs	r3, #130	@ 0x82
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	2384      	movs	r3, #132	@ 0x84
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	000a      	movs	r2, r1
 800c690:	2181      	movs	r1, #129	@ 0x81
 800c692:	f004 fcff 	bl	8011094 <USBD_LL_Transmit>

      return USBD_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	e002      	b.n	800c6a0 <USBD_CDC_TransmitPacket+0x66>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      return USBD_BUSY;
<<<<<<< HEAD
 800d55e:	2301      	movs	r3, #1
 800d560:	e000      	b.n	800d564 <USBD_CDC_TransmitPacket+0x66>
=======
 800c69a:	2301      	movs	r3, #1
 800c69c:	e000      	b.n	800c6a0 <USBD_CDC_TransmitPacket+0x66>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 800d562:	2302      	movs	r3, #2
  }
}
 800d564:	0018      	movs	r0, r3
 800d566:	46bd      	mov	sp, r7
 800d568:	b004      	add	sp, #16
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_CDC_ReceivePacket>:
=======
 800c69e:	2302      	movs	r3, #2
  }
}
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	b004      	add	sp, #16
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_CDC_ReceivePacket>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	23ae      	movs	r3, #174	@ 0xae
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	58d3      	ldr	r3, [r2, r3]
 800d57c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	23ae      	movs	r3, #174	@ 0xae
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	58d3      	ldr	r3, [r2, r3]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d019      	beq.n	800d5be <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7c1b      	ldrb	r3, [r3, #16]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10a      	bne.n	800d5a8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	2381      	movs	r3, #129	@ 0x81
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	58d2      	ldr	r2, [r2, r3]
 800d59a:	2380      	movs	r3, #128	@ 0x80
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	f004 fd10 	bl	8011fc6 <USBD_LL_PrepareReceive>
 800d5a6:	e008      	b.n	800d5ba <USBD_CDC_ReceivePacket+0x4e>
=======
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	23ae      	movs	r3, #174	@ 0xae
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	58d3      	ldr	r3, [r2, r3]
 800c6b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	23ae      	movs	r3, #174	@ 0xae
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	58d3      	ldr	r3, [r2, r3]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d019      	beq.n	800c6fa <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	7c1b      	ldrb	r3, [r3, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	2381      	movs	r3, #129	@ 0x81
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	58d2      	ldr	r2, [r2, r3]
 800c6d6:	2380      	movs	r3, #128	@ 0x80
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	2101      	movs	r1, #1
 800c6de:	f004 fd10 	bl	8011102 <USBD_LL_PrepareReceive>
 800c6e2:	e008      	b.n	800c6f6 <USBD_CDC_ReceivePacket+0x4e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
<<<<<<< HEAD
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	2381      	movs	r3, #129	@ 0x81
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	58d2      	ldr	r2, [r2, r3]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	2340      	movs	r3, #64	@ 0x40
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	f004 fd06 	bl	8011fc6 <USBD_LL_PrepareReceive>
=======
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	2381      	movs	r3, #129	@ 0x81
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	58d2      	ldr	r2, [r2, r3]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	2340      	movs	r3, #64	@ 0x40
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	f004 fd06 	bl	8011102 <USBD_LL_PrepareReceive>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
<<<<<<< HEAD
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e000      	b.n	800d5c0 <USBD_CDC_ReceivePacket+0x54>
=======
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e000      	b.n	800c6fc <USBD_CDC_ReceivePacket+0x54>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 800d5be:	2302      	movs	r3, #2
  }
}
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	b004      	add	sp, #16
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_Init>:
=======
 800c6fa:	2302      	movs	r3, #2
  }
}
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	46bd      	mov	sp, r7
 800c700:	b004      	add	sp, #16
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	1dfb      	adds	r3, r7, #7
 800d5d4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <USBD_Init+0x18>
=======
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	1dfb      	adds	r3, r7, #7
 800c710:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <USBD_Init+0x18>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 800d5dc:	2302      	movs	r3, #2
 800d5de:	e020      	b.n	800d622 <USBD_Init+0x5a>
=======
 800c718:	2302      	movs	r3, #2
 800c71a:	e020      	b.n	800c75e <USBD_Init+0x5a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
<<<<<<< HEAD
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	23ad      	movs	r3, #173	@ 0xad
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	58d3      	ldr	r3, [r2, r3]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	23ad      	movs	r3, #173	@ 0xad
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	50d1      	str	r1, [r2, r3]
=======
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	23ad      	movs	r3, #173	@ 0xad
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	58d3      	ldr	r3, [r2, r3]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d004      	beq.n	800c732 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	23ad      	movs	r3, #173	@ 0xad
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	2100      	movs	r1, #0
 800c730:	50d1      	str	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
<<<<<<< HEAD
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	23ac      	movs	r3, #172	@ 0xac
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	50d1      	str	r1, [r2, r3]
=======
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	23ac      	movs	r3, #172	@ 0xac
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	50d1      	str	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	23a7      	movs	r3, #167	@ 0xa7
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	2101      	movs	r1, #1
 800d60e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	1dfa      	adds	r2, r7, #7
 800d614:	7812      	ldrb	r2, [r2, #0]
 800d616:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	0018      	movs	r0, r3
 800d61c:	f004 fb00 	bl	8011c20 <USBD_LL_Init>

  return USBD_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	0018      	movs	r0, r3
 800d624:	46bd      	mov	sp, r7
 800d626:	b004      	add	sp, #16
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBD_RegisterClass>:
=======
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	23a7      	movs	r3, #167	@ 0xa7
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	2101      	movs	r1, #1
 800c74a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	1dfa      	adds	r2, r7, #7
 800c750:	7812      	ldrb	r2, [r2, #0]
 800c752:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	0018      	movs	r0, r3
 800c758:	f004 fb00 	bl	8010d5c <USBD_LL_Init>

  return USBD_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	0018      	movs	r0, r3
 800c760:	46bd      	mov	sp, r7
 800c762:	b004      	add	sp, #16
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_RegisterClass>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d634:	200f      	movs	r0, #15
 800d636:	183b      	adds	r3, r7, r0
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d008      	beq.n	800d654 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	23ad      	movs	r3, #173	@ 0xad
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800d64c:	183b      	adds	r3, r7, r0
 800d64e:	2200      	movs	r2, #0
 800d650:	701a      	strb	r2, [r3, #0]
 800d652:	e003      	b.n	800d65c <USBD_RegisterClass+0x32>
=======
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c770:	200f      	movs	r0, #15
 800c772:	183b      	adds	r3, r7, r0
 800c774:	2200      	movs	r2, #0
 800c776:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d008      	beq.n	800c790 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	23ad      	movs	r3, #173	@ 0xad
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800c788:	183b      	adds	r3, r7, r0
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	e003      	b.n	800c798 <USBD_RegisterClass+0x32>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
<<<<<<< HEAD
 800d654:	230f      	movs	r3, #15
 800d656:	18fb      	adds	r3, r7, r3
 800d658:	2202      	movs	r2, #2
 800d65a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d65c:	230f      	movs	r3, #15
 800d65e:	18fb      	adds	r3, r7, r3
 800d660:	781b      	ldrb	r3, [r3, #0]
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b004      	add	sp, #16
 800d668:	bd80      	pop	{r7, pc}

0800d66a <USBD_Start>:
=======
 800c790:	230f      	movs	r3, #15
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	2202      	movs	r2, #2
 800c796:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c798:	230f      	movs	r3, #15
 800c79a:	18fb      	adds	r3, r7, r3
 800c79c:	781b      	ldrb	r3, [r3, #0]
}
 800c79e:	0018      	movs	r0, r3
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	b004      	add	sp, #16
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_Start>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	0018      	movs	r0, r3
 800d676:	f004 fb37 	bl	8011ce8 <USBD_LL_Start>

  return USBD_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	0018      	movs	r0, r3
 800d67e:	46bd      	mov	sp, r7
 800d680:	b002      	add	sp, #8
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBD_RunTestMode>:
=======
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	0018      	movs	r0, r3
 800c7b2:	f004 fb37 	bl	8010e24 <USBD_LL_Start>

  return USBD_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	b002      	add	sp, #8
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <USBD_RunTestMode>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
=======
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	0018      	movs	r0, r3
 800d690:	46bd      	mov	sp, r7
 800d692:	b002      	add	sp, #8
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_SetClassConfig>:
=======
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	b002      	add	sp, #8
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_SetClassConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d696:	b590      	push	{r4, r7, lr}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	000a      	movs	r2, r1
 800d6a0:	1cfb      	adds	r3, r7, #3
 800d6a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d6a4:	240f      	movs	r4, #15
 800d6a6:	193b      	adds	r3, r7, r4
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	23ad      	movs	r3, #173	@ 0xad
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	58d3      	ldr	r3, [r2, r3]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00e      	beq.n	800d6d6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	23ad      	movs	r3, #173	@ 0xad
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	58d3      	ldr	r3, [r2, r3]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	1cfa      	adds	r2, r7, #3
 800d6c4:	7811      	ldrb	r1, [r2, #0]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	0010      	movs	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	1e03      	subs	r3, r0, #0
 800d6ce:	d102      	bne.n	800d6d6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800d6d0:	193b      	adds	r3, r7, r4
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	701a      	strb	r2, [r3, #0]
=======
 800c7d2:	b590      	push	{r4, r7, lr}
 800c7d4:	b085      	sub	sp, #20
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	000a      	movs	r2, r1
 800c7dc:	1cfb      	adds	r3, r7, #3
 800c7de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c7e0:	240f      	movs	r4, #15
 800c7e2:	193b      	adds	r3, r7, r4
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	23ad      	movs	r3, #173	@ 0xad
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	58d3      	ldr	r3, [r2, r3]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00e      	beq.n	800c812 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	23ad      	movs	r3, #173	@ 0xad
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	58d3      	ldr	r3, [r2, r3]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	1cfa      	adds	r2, r7, #3
 800c800:	7811      	ldrb	r1, [r2, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	0010      	movs	r0, r2
 800c806:	4798      	blx	r3
 800c808:	1e03      	subs	r3, r0, #0
 800c80a:	d102      	bne.n	800c812 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800c80c:	193b      	adds	r3, r7, r4
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return ret;
<<<<<<< HEAD
 800d6d6:	230f      	movs	r3, #15
 800d6d8:	18fb      	adds	r3, r7, r3
 800d6da:	781b      	ldrb	r3, [r3, #0]
}
 800d6dc:	0018      	movs	r0, r3
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	b005      	add	sp, #20
 800d6e2:	bd90      	pop	{r4, r7, pc}

0800d6e4 <USBD_ClrClassConfig>:
=======
 800c812:	230f      	movs	r3, #15
 800c814:	18fb      	adds	r3, r7, r3
 800c816:	781b      	ldrb	r3, [r3, #0]
}
 800c818:	0018      	movs	r0, r3
 800c81a:	46bd      	mov	sp, r7
 800c81c:	b005      	add	sp, #20
 800c81e:	bd90      	pop	{r4, r7, pc}

0800c820 <USBD_ClrClassConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	000a      	movs	r2, r1
 800d6ee:	1cfb      	adds	r3, r7, #3
 800d6f0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	23ad      	movs	r3, #173	@ 0xad
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	58d3      	ldr	r3, [r2, r3]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	1cfa      	adds	r2, r7, #3
 800d6fe:	7811      	ldrb	r1, [r2, #0]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	0010      	movs	r0, r2
 800d704:	4798      	blx	r3

  return USBD_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	0018      	movs	r0, r3
 800d70a:	46bd      	mov	sp, r7
 800d70c:	b002      	add	sp, #8
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBD_LL_SetupStage>:
=======
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	000a      	movs	r2, r1
 800c82a:	1cfb      	adds	r3, r7, #3
 800c82c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	23ad      	movs	r3, #173	@ 0xad
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	58d3      	ldr	r3, [r2, r3]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	1cfa      	adds	r2, r7, #3
 800c83a:	7811      	ldrb	r1, [r2, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	0010      	movs	r0, r2
 800c840:	4798      	blx	r3

  return USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	0018      	movs	r0, r3
 800c846:	46bd      	mov	sp, r7
 800c848:	b002      	add	sp, #8
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_SetupStage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	22aa      	movs	r2, #170	@ 0xaa
 800d71e:	0092      	lsls	r2, r2, #2
 800d720:	4694      	mov	ip, r2
 800d722:	4463      	add	r3, ip
 800d724:	683a      	ldr	r2, [r7, #0]
 800d726:	0011      	movs	r1, r2
 800d728:	0018      	movs	r0, r3
 800d72a:	f001 f810 	bl	800e74e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	23a5      	movs	r3, #165	@ 0xa5
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	2101      	movs	r1, #1
 800d736:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a23      	ldr	r2, [pc, #140]	@ (800d7c8 <USBD_LL_SetupStage+0xb8>)
 800d73c:	5a9b      	ldrh	r3, [r3, r2]
 800d73e:	0019      	movs	r1, r3
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	23a6      	movs	r3, #166	@ 0xa6
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	23aa      	movs	r3, #170	@ 0xaa
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	5cd3      	ldrb	r3, [r2, r3]
 800d750:	001a      	movs	r2, r3
 800d752:	231f      	movs	r3, #31
 800d754:	4013      	ands	r3, r2
 800d756:	2b02      	cmp	r3, #2
 800d758:	d019      	beq.n	800d78e <USBD_LL_SetupStage+0x7e>
 800d75a:	d822      	bhi.n	800d7a2 <USBD_LL_SetupStage+0x92>
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <USBD_LL_SetupStage+0x56>
 800d760:	2b01      	cmp	r3, #1
 800d762:	d00a      	beq.n	800d77a <USBD_LL_SetupStage+0x6a>
 800d764:	e01d      	b.n	800d7a2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	22aa      	movs	r2, #170	@ 0xaa
 800d76a:	0092      	lsls	r2, r2, #2
 800d76c:	189a      	adds	r2, r3, r2
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	0011      	movs	r1, r2
 800d772:	0018      	movs	r0, r3
 800d774:	f000 fa10 	bl	800db98 <USBD_StdDevReq>
      break;
 800d778:	e020      	b.n	800d7bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	22aa      	movs	r2, #170	@ 0xaa
 800d77e:	0092      	lsls	r2, r2, #2
 800d780:	189a      	adds	r2, r3, r2
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	0011      	movs	r1, r2
 800d786:	0018      	movs	r0, r3
 800d788:	f000 fa78 	bl	800dc7c <USBD_StdItfReq>
      break;
 800d78c:	e016      	b.n	800d7bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	22aa      	movs	r2, #170	@ 0xaa
 800d792:	0092      	lsls	r2, r2, #2
 800d794:	189a      	adds	r2, r3, r2
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	0011      	movs	r1, r2
 800d79a:	0018      	movs	r0, r3
 800d79c:	f000 fac5 	bl	800dd2a <USBD_StdEPReq>
      break;
 800d7a0:	e00c      	b.n	800d7bc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	23aa      	movs	r3, #170	@ 0xaa
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	5cd3      	ldrb	r3, [r2, r3]
 800d7aa:	227f      	movs	r2, #127	@ 0x7f
 800d7ac:	4393      	bics	r3, r2
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	0011      	movs	r1, r2
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f004 fb1e 	bl	8011df6 <USBD_LL_StallEP>
      break;
 800d7ba:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	0018      	movs	r0, r3
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	b002      	add	sp, #8
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	46c0      	nop			@ (mov r8, r8)
 800d7c8:	000002ae 	.word	0x000002ae

0800d7cc <USBD_LL_DataOutStage>:
=======
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	22aa      	movs	r2, #170	@ 0xaa
 800c85a:	0092      	lsls	r2, r2, #2
 800c85c:	4694      	mov	ip, r2
 800c85e:	4463      	add	r3, ip
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	0011      	movs	r1, r2
 800c864:	0018      	movs	r0, r3
 800c866:	f001 f810 	bl	800d88a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	23a5      	movs	r3, #165	@ 0xa5
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	2101      	movs	r1, #1
 800c872:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a23      	ldr	r2, [pc, #140]	@ (800c904 <USBD_LL_SetupStage+0xb8>)
 800c878:	5a9b      	ldrh	r3, [r3, r2]
 800c87a:	0019      	movs	r1, r3
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	23a6      	movs	r3, #166	@ 0xa6
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	23aa      	movs	r3, #170	@ 0xaa
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	5cd3      	ldrb	r3, [r2, r3]
 800c88c:	001a      	movs	r2, r3
 800c88e:	231f      	movs	r3, #31
 800c890:	4013      	ands	r3, r2
 800c892:	2b02      	cmp	r3, #2
 800c894:	d019      	beq.n	800c8ca <USBD_LL_SetupStage+0x7e>
 800c896:	d822      	bhi.n	800c8de <USBD_LL_SetupStage+0x92>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <USBD_LL_SetupStage+0x56>
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d00a      	beq.n	800c8b6 <USBD_LL_SetupStage+0x6a>
 800c8a0:	e01d      	b.n	800c8de <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	22aa      	movs	r2, #170	@ 0xaa
 800c8a6:	0092      	lsls	r2, r2, #2
 800c8a8:	189a      	adds	r2, r3, r2
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	0011      	movs	r1, r2
 800c8ae:	0018      	movs	r0, r3
 800c8b0:	f000 fa10 	bl	800ccd4 <USBD_StdDevReq>
      break;
 800c8b4:	e020      	b.n	800c8f8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	22aa      	movs	r2, #170	@ 0xaa
 800c8ba:	0092      	lsls	r2, r2, #2
 800c8bc:	189a      	adds	r2, r3, r2
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	0011      	movs	r1, r2
 800c8c2:	0018      	movs	r0, r3
 800c8c4:	f000 fa78 	bl	800cdb8 <USBD_StdItfReq>
      break;
 800c8c8:	e016      	b.n	800c8f8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	22aa      	movs	r2, #170	@ 0xaa
 800c8ce:	0092      	lsls	r2, r2, #2
 800c8d0:	189a      	adds	r2, r3, r2
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0011      	movs	r1, r2
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f000 fac5 	bl	800ce66 <USBD_StdEPReq>
      break;
 800c8dc:	e00c      	b.n	800c8f8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	23aa      	movs	r3, #170	@ 0xaa
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	5cd3      	ldrb	r3, [r2, r3]
 800c8e6:	227f      	movs	r2, #127	@ 0x7f
 800c8e8:	4393      	bics	r3, r2
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	0011      	movs	r1, r2
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f004 fb1e 	bl	8010f32 <USBD_LL_StallEP>
      break;
 800c8f6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b002      	add	sp, #8
 800c900:	bd80      	pop	{r7, pc}
 800c902:	46c0      	nop			@ (mov r8, r8)
 800c904:	000002ae 	.word	0x000002ae

0800c908 <USBD_LL_DataOutStage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	607a      	str	r2, [r7, #4]
 800d7d6:	200b      	movs	r0, #11
 800d7d8:	183b      	adds	r3, r7, r0
 800d7da:	1c0a      	adds	r2, r1, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d7de:	183b      	adds	r3, r7, r0
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d154      	bne.n	800d890 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3355      	adds	r3, #85	@ 0x55
 800d7ea:	33ff      	adds	r3, #255	@ 0xff
 800d7ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	23a5      	movs	r3, #165	@ 0xa5
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	58d3      	ldr	r3, [r2, r3]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d139      	bne.n	800d86e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	68da      	ldr	r2, [r3, #12]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	429a      	cmp	r2, r3
 800d804:	d919      	bls.n	800d83a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	1ad2      	subs	r2, r2, r3
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	68da      	ldr	r2, [r3, #12]
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d203      	bcs.n	800d828 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d824:	b29b      	uxth	r3, r3
 800d826:	e002      	b.n	800d82e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	001a      	movs	r2, r3
 800d834:	f001 f898 	bl	800e968 <USBD_CtlContinueRx>
 800d838:	e045      	b.n	800d8c6 <USBD_LL_DataOutStage+0xfa>
=======
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	200b      	movs	r0, #11
 800c914:	183b      	adds	r3, r7, r0
 800c916:	1c0a      	adds	r2, r1, #0
 800c918:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c91a:	183b      	adds	r3, r7, r0
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d154      	bne.n	800c9cc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3355      	adds	r3, #85	@ 0x55
 800c926:	33ff      	adds	r3, #255	@ 0xff
 800c928:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	23a5      	movs	r3, #165	@ 0xa5
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	58d3      	ldr	r3, [r2, r3]
 800c932:	2b03      	cmp	r3, #3
 800c934:	d139      	bne.n	800c9aa <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d919      	bls.n	800c976 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	68da      	ldr	r2, [r3, #12]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	1ad2      	subs	r2, r2, r3
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c958:	429a      	cmp	r2, r3
 800c95a:	d203      	bcs.n	800c964 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c960:	b29b      	uxth	r3, r3
 800c962:	e002      	b.n	800c96a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c968:	b29b      	uxth	r3, r3
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	001a      	movs	r2, r3
 800c970:	f001 f898 	bl	800daa4 <USBD_CtlContinueRx>
 800c974:	e045      	b.n	800ca02 <USBD_LL_DataOutStage+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
<<<<<<< HEAD
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	23ad      	movs	r3, #173	@ 0xad
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	58d3      	ldr	r3, [r2, r3]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00d      	beq.n	800d864 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	23a7      	movs	r3, #167	@ 0xa7
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d850:	2b03      	cmp	r3, #3
 800d852:	d107      	bne.n	800d864 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	23ad      	movs	r3, #173	@ 0xad
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	58d3      	ldr	r3, [r2, r3]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	0010      	movs	r0, r2
 800d862:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	0018      	movs	r0, r3
 800d868:	f001 f891 	bl	800e98e <USBD_CtlSendStatus>
 800d86c:	e02b      	b.n	800d8c6 <USBD_LL_DataOutStage+0xfa>
=======
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	23ad      	movs	r3, #173	@ 0xad
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	58d3      	ldr	r3, [r2, r3]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00d      	beq.n	800c9a0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	23a7      	movs	r3, #167	@ 0xa7
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	d107      	bne.n	800c9a0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	23ad      	movs	r3, #173	@ 0xad
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	58d3      	ldr	r3, [r2, r3]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	0010      	movs	r0, r2
 800c99e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	0018      	movs	r0, r3
 800c9a4:	f001 f891 	bl	800daca <USBD_CtlSendStatus>
 800c9a8:	e02b      	b.n	800ca02 <USBD_LL_DataOutStage+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
<<<<<<< HEAD
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	23a5      	movs	r3, #165	@ 0xa5
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	58d3      	ldr	r3, [r2, r3]
 800d876:	2b05      	cmp	r3, #5
 800d878:	d125      	bne.n	800d8c6 <USBD_LL_DataOutStage+0xfa>
=======
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	23a5      	movs	r3, #165	@ 0xa5
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	58d3      	ldr	r3, [r2, r3]
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d125      	bne.n	800ca02 <USBD_LL_DataOutStage+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
<<<<<<< HEAD
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	23a5      	movs	r3, #165	@ 0xa5
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	2100      	movs	r1, #0
 800d882:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2100      	movs	r1, #0
 800d888:	0018      	movs	r0, r3
 800d88a:	f004 fab4 	bl	8011df6 <USBD_LL_StallEP>
 800d88e:	e01a      	b.n	800d8c6 <USBD_LL_DataOutStage+0xfa>
=======
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	23a5      	movs	r3, #165	@ 0xa5
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	2100      	movs	r1, #0
 800c9be:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	0018      	movs	r0, r3
 800c9c6:	f004 fab4 	bl	8010f32 <USBD_LL_StallEP>
 800c9ca:	e01a      	b.n	800ca02 <USBD_LL_DataOutStage+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
<<<<<<< HEAD
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	23ad      	movs	r3, #173	@ 0xad
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	58d3      	ldr	r3, [r2, r3]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d011      	beq.n	800d8c2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	23a7      	movs	r3, #167	@ 0xa7
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d10b      	bne.n	800d8c2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	23ad      	movs	r3, #173	@ 0xad
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	58d3      	ldr	r3, [r2, r3]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	220b      	movs	r2, #11
 800d8b6:	18ba      	adds	r2, r7, r2
 800d8b8:	7811      	ldrb	r1, [r2, #0]
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	0010      	movs	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	e001      	b.n	800d8c6 <USBD_LL_DataOutStage+0xfa>
=======
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	23ad      	movs	r3, #173	@ 0xad
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	58d3      	ldr	r3, [r2, r3]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d011      	beq.n	800c9fe <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	23a7      	movs	r3, #167	@ 0xa7
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d10b      	bne.n	800c9fe <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	23ad      	movs	r3, #173	@ 0xad
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	58d3      	ldr	r3, [r2, r3]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	220b      	movs	r2, #11
 800c9f2:	18ba      	adds	r2, r7, r2
 800c9f4:	7811      	ldrb	r1, [r2, #0]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	0010      	movs	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	e001      	b.n	800ca02 <USBD_LL_DataOutStage+0xfa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	e000      	b.n	800d8c8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	0018      	movs	r0, r3
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	b006      	add	sp, #24
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBD_LL_DataInStage>:
=======
 800c9fe:	2302      	movs	r3, #2
 800ca00:	e000      	b.n	800ca04 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	0018      	movs	r0, r3
 800ca06:	46bd      	mov	sp, r7
 800ca08:	b006      	add	sp, #24
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBD_LL_DataInStage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	607a      	str	r2, [r7, #4]
 800d8da:	200b      	movs	r0, #11
 800d8dc:	183b      	adds	r3, r7, r0
 800d8de:	1c0a      	adds	r2, r1, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d8e2:	183b      	adds	r3, r7, r0
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d000      	beq.n	800d8ec <USBD_LL_DataInStage+0x1c>
 800d8ea:	e08e      	b.n	800da0a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	3314      	adds	r3, #20
 800d8f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	23a5      	movs	r3, #165	@ 0xa5
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	58d3      	ldr	r3, [r2, r3]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d164      	bne.n	800d9c8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	429a      	cmp	r2, r3
 800d908:	d915      	bls.n	800d936 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	0018      	movs	r0, r3
 800d924:	f000 ffe9 	bl	800e8fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	2300      	movs	r3, #0
 800d92c:	2200      	movs	r2, #0
 800d92e:	2100      	movs	r1, #0
 800d930:	f004 fb49 	bl	8011fc6 <USBD_LL_PrepareReceive>
 800d934:	e059      	b.n	800d9ea <USBD_LL_DataInStage+0x11a>
=======
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	607a      	str	r2, [r7, #4]
 800ca16:	200b      	movs	r0, #11
 800ca18:	183b      	adds	r3, r7, r0
 800ca1a:	1c0a      	adds	r2, r1, #0
 800ca1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ca1e:	183b      	adds	r3, r7, r0
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d000      	beq.n	800ca28 <USBD_LL_DataInStage+0x1c>
 800ca26:	e08e      	b.n	800cb46 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3314      	adds	r3, #20
 800ca2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	23a5      	movs	r3, #165	@ 0xa5
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	58d3      	ldr	r3, [r2, r3]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d164      	bne.n	800cb04 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	68da      	ldr	r2, [r3, #12]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d915      	bls.n	800ca72 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	68da      	ldr	r2, [r3, #12]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f000 ffe9 	bl	800da36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	f004 fb49 	bl	8011102 <USBD_LL_PrepareReceive>
 800ca70:	e059      	b.n	800cb26 <USBD_LL_DataInStage+0x11a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
<<<<<<< HEAD
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	689a      	ldr	r2, [r3, #8]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	0019      	movs	r1, r3
 800d940:	0010      	movs	r0, r2
 800d942:	f7f2 fc83 	bl	800024c <__aeabi_uidivmod>
 800d946:	1e0b      	subs	r3, r1, #0
 800d948:	d11f      	bne.n	800d98a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	689a      	ldr	r2, [r3, #8]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d952:	429a      	cmp	r2, r3
 800d954:	d319      	bcc.n	800d98a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	689a      	ldr	r2, [r3, #8]
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	23a6      	movs	r3, #166	@ 0xa6
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800d962:	429a      	cmp	r2, r3
 800d964:	d211      	bcs.n	800d98a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	2100      	movs	r1, #0
 800d96c:	0018      	movs	r0, r3
 800d96e:	f000 ffc4 	bl	800e8fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	23a6      	movs	r3, #166	@ 0xa6
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	2100      	movs	r1, #0
 800d97a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	2300      	movs	r3, #0
 800d980:	2200      	movs	r2, #0
 800d982:	2100      	movs	r1, #0
 800d984:	f004 fb1f 	bl	8011fc6 <USBD_LL_PrepareReceive>
 800d988:	e02f      	b.n	800d9ea <USBD_LL_DataInStage+0x11a>
=======
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	0019      	movs	r1, r3
 800ca7c:	0010      	movs	r0, r2
 800ca7e:	f7f3 fbe5 	bl	800024c <__aeabi_uidivmod>
 800ca82:	1e0b      	subs	r3, r1, #0
 800ca84:	d11f      	bne.n	800cac6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d319      	bcc.n	800cac6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	23a6      	movs	r3, #166	@ 0xa6
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d211      	bcs.n	800cac6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	2100      	movs	r1, #0
 800caa8:	0018      	movs	r0, r3
 800caaa:	f000 ffc4 	bl	800da36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	23a6      	movs	r3, #166	@ 0xa6
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	2100      	movs	r1, #0
 800cab6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	2300      	movs	r3, #0
 800cabc:	2200      	movs	r2, #0
 800cabe:	2100      	movs	r1, #0
 800cac0:	f004 fb1f 	bl	8011102 <USBD_LL_PrepareReceive>
 800cac4:	e02f      	b.n	800cb26 <USBD_LL_DataInStage+0x11a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
<<<<<<< HEAD
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	23ad      	movs	r3, #173	@ 0xad
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	58d3      	ldr	r3, [r2, r3]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00d      	beq.n	800d9b4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	23a7      	movs	r3, #167	@ 0xa7
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9a0:	2b03      	cmp	r3, #3
 800d9a2:	d107      	bne.n	800d9b4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	23ad      	movs	r3, #173	@ 0xad
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	58d3      	ldr	r3, [r2, r3]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	0010      	movs	r0, r2
 800d9b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2180      	movs	r1, #128	@ 0x80
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	f004 fa1c 	bl	8011df6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	f000 fff8 	bl	800e9b6 <USBD_CtlReceiveStatus>
 800d9c6:	e010      	b.n	800d9ea <USBD_LL_DataInStage+0x11a>
=======
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	23ad      	movs	r3, #173	@ 0xad
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	58d3      	ldr	r3, [r2, r3]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00d      	beq.n	800caf0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	23a7      	movs	r3, #167	@ 0xa7
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cadc:	2b03      	cmp	r3, #3
 800cade:	d107      	bne.n	800caf0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	23ad      	movs	r3, #173	@ 0xad
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	58d3      	ldr	r3, [r2, r3]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	0010      	movs	r0, r2
 800caee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2180      	movs	r1, #128	@ 0x80
 800caf4:	0018      	movs	r0, r3
 800caf6:	f004 fa1c 	bl	8010f32 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	0018      	movs	r0, r3
 800cafe:	f000 fff8 	bl	800daf2 <USBD_CtlReceiveStatus>
 800cb02:	e010      	b.n	800cb26 <USBD_LL_DataInStage+0x11a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
<<<<<<< HEAD
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	23a5      	movs	r3, #165	@ 0xa5
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	58d3      	ldr	r3, [r2, r3]
 800d9d0:	2b04      	cmp	r3, #4
 800d9d2:	d005      	beq.n	800d9e0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	23a5      	movs	r3, #165	@ 0xa5
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2180      	movs	r1, #128	@ 0x80
 800d9e4:	0018      	movs	r0, r3
 800d9e6:	f004 fa06 	bl	8011df6 <USBD_LL_StallEP>
=======
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	23a5      	movs	r3, #165	@ 0xa5
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	58d3      	ldr	r3, [r2, r3]
 800cb0c:	2b04      	cmp	r3, #4
 800cb0e:	d005      	beq.n	800cb1c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	23a5      	movs	r3, #165	@ 0xa5
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2180      	movs	r1, #128	@ 0x80
 800cb20:	0018      	movs	r0, r3
 800cb22:	f004 fa06 	bl	8010f32 <USBD_LL_StallEP>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	23a8      	movs	r3, #168	@ 0xa8
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	5cd3      	ldrb	r3, [r2, r3]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d124      	bne.n	800da40 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f7ff fe43 	bl	800d684 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	23a8      	movs	r3, #168	@ 0xa8
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	2100      	movs	r1, #0
 800da06:	54d1      	strb	r1, [r2, r3]
 800da08:	e01a      	b.n	800da40 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	23ad      	movs	r3, #173	@ 0xad
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	58d3      	ldr	r3, [r2, r3]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d011      	beq.n	800da3c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	23a7      	movs	r3, #167	@ 0xa7
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800da20:	2b03      	cmp	r3, #3
 800da22:	d10b      	bne.n	800da3c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	23ad      	movs	r3, #173	@ 0xad
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	58d3      	ldr	r3, [r2, r3]
 800da2c:	695b      	ldr	r3, [r3, #20]
 800da2e:	220b      	movs	r2, #11
 800da30:	18ba      	adds	r2, r7, r2
 800da32:	7811      	ldrb	r1, [r2, #0]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	0010      	movs	r0, r2
 800da38:	4798      	blx	r3
 800da3a:	e001      	b.n	800da40 <USBD_LL_DataInStage+0x170>
=======
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	23a8      	movs	r3, #168	@ 0xa8
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	5cd3      	ldrb	r3, [r2, r3]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d124      	bne.n	800cb7c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	0018      	movs	r0, r3
 800cb36:	f7ff fe43 	bl	800c7c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	23a8      	movs	r3, #168	@ 0xa8
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	2100      	movs	r1, #0
 800cb42:	54d1      	strb	r1, [r2, r3]
 800cb44:	e01a      	b.n	800cb7c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	23ad      	movs	r3, #173	@ 0xad
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	58d3      	ldr	r3, [r2, r3]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d011      	beq.n	800cb78 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	23a7      	movs	r3, #167	@ 0xa7
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d10b      	bne.n	800cb78 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	23ad      	movs	r3, #173	@ 0xad
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	58d3      	ldr	r3, [r2, r3]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	220b      	movs	r2, #11
 800cb6c:	18ba      	adds	r2, r7, r2
 800cb6e:	7811      	ldrb	r1, [r2, #0]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	0010      	movs	r0, r2
 800cb74:	4798      	blx	r3
 800cb76:	e001      	b.n	800cb7c <USBD_LL_DataInStage+0x170>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 800da3c:	2302      	movs	r3, #2
 800da3e:	e000      	b.n	800da42 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	0018      	movs	r0, r3
 800da44:	46bd      	mov	sp, r7
 800da46:	b006      	add	sp, #24
 800da48:	bd80      	pop	{r7, pc}

0800da4a <USBD_LL_Reset>:
=======
 800cb78:	2302      	movs	r3, #2
 800cb7a:	e000      	b.n	800cb7e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	0018      	movs	r0, r3
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b006      	add	sp, #24
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBD_LL_Reset>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	2340      	movs	r3, #64	@ 0x40
 800da56:	2200      	movs	r2, #0
 800da58:	2100      	movs	r1, #0
 800da5a:	f004 f96a 	bl	8011d32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	23ac      	movs	r3, #172	@ 0xac
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	2101      	movs	r1, #1
 800da66:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	23b2      	movs	r3, #178	@ 0xb2
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	2140      	movs	r1, #64	@ 0x40
 800da70:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	2340      	movs	r3, #64	@ 0x40
 800da76:	2200      	movs	r2, #0
 800da78:	2180      	movs	r1, #128	@ 0x80
 800da7a:	f004 f95a 	bl	8011d32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2240      	movs	r2, #64	@ 0x40
 800da88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	23a7      	movs	r3, #167	@ 0xa7
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	2101      	movs	r1, #1
 800da92:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	23a5      	movs	r3, #165	@ 0xa5
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	2100      	movs	r1, #0
 800da9c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	23a9      	movs	r3, #169	@ 0xa9
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	2100      	movs	r1, #0
 800daac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	23ae      	movs	r3, #174	@ 0xae
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	58d3      	ldr	r3, [r2, r3]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	23ad      	movs	r3, #173	@ 0xad
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	58d3      	ldr	r3, [r2, r3]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	b2d9      	uxtb	r1, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	0018      	movs	r0, r3
 800dace:	4790      	blx	r2
  }

  return USBD_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	0018      	movs	r0, r3
 800dad4:	46bd      	mov	sp, r7
 800dad6:	b002      	add	sp, #8
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_LL_SetSpeed>:
=======
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	2340      	movs	r3, #64	@ 0x40
 800cb92:	2200      	movs	r2, #0
 800cb94:	2100      	movs	r1, #0
 800cb96:	f004 f96a 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	23ac      	movs	r3, #172	@ 0xac
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	2101      	movs	r1, #1
 800cba2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	23b2      	movs	r3, #178	@ 0xb2
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	2140      	movs	r1, #64	@ 0x40
 800cbac:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	2340      	movs	r3, #64	@ 0x40
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2180      	movs	r1, #128	@ 0x80
 800cbb6:	f004 f95a 	bl	8010e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2240      	movs	r2, #64	@ 0x40
 800cbc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	23a7      	movs	r3, #167	@ 0xa7
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	2101      	movs	r1, #1
 800cbce:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	23a5      	movs	r3, #165	@ 0xa5
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	23a9      	movs	r3, #169	@ 0xa9
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	23ae      	movs	r3, #174	@ 0xae
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	58d3      	ldr	r3, [r2, r3]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00a      	beq.n	800cc0c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	23ad      	movs	r3, #173	@ 0xad
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	58d3      	ldr	r3, [r2, r3]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	b2d9      	uxtb	r1, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	0018      	movs	r0, r3
 800cc0a:	4790      	blx	r2
  }

  return USBD_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	0018      	movs	r0, r3
 800cc10:	46bd      	mov	sp, r7
 800cc12:	b002      	add	sp, #8
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBD_LL_SetSpeed>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 800dada:	b580      	push	{r7, lr}
 800dadc:	b082      	sub	sp, #8
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	000a      	movs	r2, r1
 800dae4:	1cfb      	adds	r3, r7, #3
 800dae6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	1cfa      	adds	r2, r7, #3
 800daec:	7812      	ldrb	r2, [r2, #0]
 800daee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	0018      	movs	r0, r3
 800daf4:	46bd      	mov	sp, r7
 800daf6:	b002      	add	sp, #8
 800daf8:	bd80      	pop	{r7, pc}
	...

0800dafc <USBD_LL_Suspend>:
=======
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	000a      	movs	r2, r1
 800cc20:	1cfb      	adds	r3, r7, #3
 800cc22:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	1cfa      	adds	r2, r7, #3
 800cc28:	7812      	ldrb	r2, [r2, #0]
 800cc2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	0018      	movs	r0, r3
 800cc30:	46bd      	mov	sp, r7
 800cc32:	b002      	add	sp, #8
 800cc34:	bd80      	pop	{r7, pc}
	...

0800cc38 <USBD_LL_Suspend>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	23a7      	movs	r3, #167	@ 0xa7
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	5cd1      	ldrb	r1, [r2, r3]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a06      	ldr	r2, [pc, #24]	@ (800db28 <USBD_LL_Suspend+0x2c>)
 800db10:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	23a7      	movs	r3, #167	@ 0xa7
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	2104      	movs	r1, #4
 800db1a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800db1c:	2300      	movs	r3, #0
}
 800db1e:	0018      	movs	r0, r3
 800db20:	46bd      	mov	sp, r7
 800db22:	b002      	add	sp, #8
 800db24:	bd80      	pop	{r7, pc}
 800db26:	46c0      	nop			@ (mov r8, r8)
 800db28:	0000029d 	.word	0x0000029d

0800db2c <USBD_LL_Resume>:
=======
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	23a7      	movs	r3, #167	@ 0xa7
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	5cd1      	ldrb	r1, [r2, r3]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a06      	ldr	r2, [pc, #24]	@ (800cc64 <USBD_LL_Suspend+0x2c>)
 800cc4c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	23a7      	movs	r3, #167	@ 0xa7
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	2104      	movs	r1, #4
 800cc56:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	b002      	add	sp, #8
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	46c0      	nop			@ (mov r8, r8)
 800cc64:	0000029d 	.word	0x0000029d

0800cc68 <USBD_LL_Resume>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	23a7      	movs	r3, #167	@ 0xa7
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	5cd3      	ldrb	r3, [r2, r3]
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d106      	bne.n	800db4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a05      	ldr	r2, [pc, #20]	@ (800db58 <USBD_LL_Resume+0x2c>)
 800db44:	5c99      	ldrb	r1, [r3, r2]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	23a7      	movs	r3, #167	@ 0xa7
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	0018      	movs	r0, r3
 800db52:	46bd      	mov	sp, r7
 800db54:	b002      	add	sp, #8
 800db56:	bd80      	pop	{r7, pc}
 800db58:	0000029d 	.word	0x0000029d

0800db5c <USBD_LL_SOF>:
=======
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	23a7      	movs	r3, #167	@ 0xa7
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	5cd3      	ldrb	r3, [r2, r3]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d106      	bne.n	800cc8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a05      	ldr	r2, [pc, #20]	@ (800cc94 <USBD_LL_Resume+0x2c>)
 800cc80:	5c99      	ldrb	r1, [r3, r2]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	23a7      	movs	r3, #167	@ 0xa7
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	0018      	movs	r0, r3
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	b002      	add	sp, #8
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	0000029d 	.word	0x0000029d

0800cc98 <USBD_LL_SOF>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	23a7      	movs	r3, #167	@ 0xa7
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	5cd3      	ldrb	r3, [r2, r3]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d10e      	bne.n	800db8e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	23ad      	movs	r3, #173	@ 0xad
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	58d3      	ldr	r3, [r2, r3]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d007      	beq.n	800db8e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	23ad      	movs	r3, #173	@ 0xad
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	58d3      	ldr	r3, [r2, r3]
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	0010      	movs	r0, r2
 800db8c:	4798      	blx	r3
=======
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	23a7      	movs	r3, #167	@ 0xa7
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	5cd3      	ldrb	r3, [r2, r3]
 800cca8:	2b03      	cmp	r3, #3
 800ccaa:	d10e      	bne.n	800ccca <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	23ad      	movs	r3, #173	@ 0xad
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	58d3      	ldr	r3, [r2, r3]
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d007      	beq.n	800ccca <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	23ad      	movs	r3, #173	@ 0xad
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	58d3      	ldr	r3, [r2, r3]
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	0010      	movs	r0, r2
 800ccc8:	4798      	blx	r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800db8e:	2300      	movs	r3, #0
}
 800db90:	0018      	movs	r0, r3
 800db92:	46bd      	mov	sp, r7
 800db94:	b002      	add	sp, #8
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBD_StdDevReq>:
=======
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	0018      	movs	r0, r3
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	b002      	add	sp, #8
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_StdDevReq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dba2:	230f      	movs	r3, #15
 800dba4:	18fb      	adds	r3, r7, r3
 800dba6:	2200      	movs	r2, #0
 800dba8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	001a      	movs	r2, r3
 800dbb0:	2360      	movs	r3, #96	@ 0x60
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	2b40      	cmp	r3, #64	@ 0x40
 800dbb6:	d004      	beq.n	800dbc2 <USBD_StdDevReq+0x2a>
 800dbb8:	d84f      	bhi.n	800dc5a <USBD_StdDevReq+0xc2>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <USBD_StdDevReq+0x3e>
 800dbbe:	2b20      	cmp	r3, #32
 800dbc0:	d14b      	bne.n	800dc5a <USBD_StdDevReq+0xc2>
=======
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccde:	230f      	movs	r3, #15
 800cce0:	18fb      	adds	r3, r7, r3
 800cce2:	2200      	movs	r2, #0
 800cce4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	001a      	movs	r2, r3
 800ccec:	2360      	movs	r3, #96	@ 0x60
 800ccee:	4013      	ands	r3, r2
 800ccf0:	2b40      	cmp	r3, #64	@ 0x40
 800ccf2:	d004      	beq.n	800ccfe <USBD_StdDevReq+0x2a>
 800ccf4:	d84f      	bhi.n	800cd96 <USBD_StdDevReq+0xc2>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <USBD_StdDevReq+0x3e>
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	d14b      	bne.n	800cd96 <USBD_StdDevReq+0xc2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	23ad      	movs	r3, #173	@ 0xad
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	58d3      	ldr	r3, [r2, r3]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	0010      	movs	r0, r2
 800dbd2:	4798      	blx	r3
      break;
 800dbd4:	e048      	b.n	800dc68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	785b      	ldrb	r3, [r3, #1]
 800dbda:	2b09      	cmp	r3, #9
 800dbdc:	d835      	bhi.n	800dc4a <USBD_StdDevReq+0xb2>
 800dbde:	009a      	lsls	r2, r3, #2
 800dbe0:	4b25      	ldr	r3, [pc, #148]	@ (800dc78 <USBD_StdDevReq+0xe0>)
 800dbe2:	18d3      	adds	r3, r2, r3
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	0011      	movs	r1, r2
 800dbee:	0018      	movs	r0, r3
 800dbf0:	f000 fa52 	bl	800e098 <USBD_GetDescriptor>
          break;
 800dbf4:	e030      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	0011      	movs	r1, r2
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	f000 fbfd 	bl	800e3fc <USBD_SetAddress>
          break;
 800dc02:	e029      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	0011      	movs	r1, r2
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	f000 fc4a 	bl	800e4a4 <USBD_SetConfig>
          break;
 800dc10:	e022      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	0011      	movs	r1, r2
 800dc18:	0018      	movs	r0, r3
 800dc1a:	f000 fce7 	bl	800e5ec <USBD_GetConfig>
          break;
 800dc1e:	e01b      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	0011      	movs	r1, r2
 800dc26:	0018      	movs	r0, r3
 800dc28:	f000 fd1b 	bl	800e662 <USBD_GetStatus>
          break;
 800dc2c:	e014      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	0011      	movs	r1, r2
 800dc34:	0018      	movs	r0, r3
 800dc36:	f000 fd4e 	bl	800e6d6 <USBD_SetFeature>
          break;
 800dc3a:	e00d      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	0011      	movs	r1, r2
 800dc42:	0018      	movs	r0, r3
 800dc44:	f000 fd5d 	bl	800e702 <USBD_ClrFeature>
          break;
 800dc48:	e006      	b.n	800dc58 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	0011      	movs	r1, r2
 800dc50:	0018      	movs	r0, r3
 800dc52:	f000 fdb4 	bl	800e7be <USBD_CtlError>
          break;
 800dc56:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800dc58:	e006      	b.n	800dc68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	0011      	movs	r1, r2
 800dc60:	0018      	movs	r0, r3
 800dc62:	f000 fdac 	bl	800e7be <USBD_CtlError>
      break;
 800dc66:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800dc68:	230f      	movs	r3, #15
 800dc6a:	18fb      	adds	r3, r7, r3
 800dc6c:	781b      	ldrb	r3, [r3, #0]
}
 800dc6e:	0018      	movs	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	b004      	add	sp, #16
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	46c0      	nop			@ (mov r8, r8)
 800dc78:	08016878 	.word	0x08016878

0800dc7c <USBD_StdItfReq>:
=======
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	23ad      	movs	r3, #173	@ 0xad
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	58d3      	ldr	r3, [r2, r3]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	0010      	movs	r0, r2
 800cd0e:	4798      	blx	r3
      break;
 800cd10:	e048      	b.n	800cda4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	785b      	ldrb	r3, [r3, #1]
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d835      	bhi.n	800cd86 <USBD_StdDevReq+0xb2>
 800cd1a:	009a      	lsls	r2, r3, #2
 800cd1c:	4b25      	ldr	r3, [pc, #148]	@ (800cdb4 <USBD_StdDevReq+0xe0>)
 800cd1e:	18d3      	adds	r3, r2, r3
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	0011      	movs	r1, r2
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f000 fa52 	bl	800d1d4 <USBD_GetDescriptor>
          break;
 800cd30:	e030      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	0011      	movs	r1, r2
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f000 fbfd 	bl	800d538 <USBD_SetAddress>
          break;
 800cd3e:	e029      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	0011      	movs	r1, r2
 800cd46:	0018      	movs	r0, r3
 800cd48:	f000 fc4a 	bl	800d5e0 <USBD_SetConfig>
          break;
 800cd4c:	e022      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	0011      	movs	r1, r2
 800cd54:	0018      	movs	r0, r3
 800cd56:	f000 fce7 	bl	800d728 <USBD_GetConfig>
          break;
 800cd5a:	e01b      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	0011      	movs	r1, r2
 800cd62:	0018      	movs	r0, r3
 800cd64:	f000 fd1b 	bl	800d79e <USBD_GetStatus>
          break;
 800cd68:	e014      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	0011      	movs	r1, r2
 800cd70:	0018      	movs	r0, r3
 800cd72:	f000 fd4e 	bl	800d812 <USBD_SetFeature>
          break;
 800cd76:	e00d      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	0011      	movs	r1, r2
 800cd7e:	0018      	movs	r0, r3
 800cd80:	f000 fd5d 	bl	800d83e <USBD_ClrFeature>
          break;
 800cd84:	e006      	b.n	800cd94 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	0011      	movs	r1, r2
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	f000 fdb4 	bl	800d8fa <USBD_CtlError>
          break;
 800cd92:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800cd94:	e006      	b.n	800cda4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	0011      	movs	r1, r2
 800cd9c:	0018      	movs	r0, r3
 800cd9e:	f000 fdac 	bl	800d8fa <USBD_CtlError>
      break;
 800cda2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800cda4:	230f      	movs	r3, #15
 800cda6:	18fb      	adds	r3, r7, r3
 800cda8:	781b      	ldrb	r3, [r3, #0]
}
 800cdaa:	0018      	movs	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b004      	add	sp, #16
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	08015294 	.word	0x08015294

0800cdb8 <USBD_StdItfReq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 800dc7c:	b5b0      	push	{r4, r5, r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc86:	230f      	movs	r3, #15
 800dc88:	18fb      	adds	r3, r7, r3
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	001a      	movs	r2, r3
 800dc94:	2360      	movs	r3, #96	@ 0x60
 800dc96:	4013      	ands	r3, r2
 800dc98:	2b40      	cmp	r3, #64	@ 0x40
 800dc9a:	d004      	beq.n	800dca6 <USBD_StdItfReq+0x2a>
 800dc9c:	d839      	bhi.n	800dd12 <USBD_StdItfReq+0x96>
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <USBD_StdItfReq+0x2a>
 800dca2:	2b20      	cmp	r3, #32
 800dca4:	d135      	bne.n	800dd12 <USBD_StdItfReq+0x96>
=======
 800cdb8:	b5b0      	push	{r4, r5, r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdc2:	230f      	movs	r3, #15
 800cdc4:	18fb      	adds	r3, r7, r3
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	001a      	movs	r2, r3
 800cdd0:	2360      	movs	r3, #96	@ 0x60
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	2b40      	cmp	r3, #64	@ 0x40
 800cdd6:	d004      	beq.n	800cde2 <USBD_StdItfReq+0x2a>
 800cdd8:	d839      	bhi.n	800ce4e <USBD_StdItfReq+0x96>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <USBD_StdItfReq+0x2a>
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	d135      	bne.n	800ce4e <USBD_StdItfReq+0x96>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	23a7      	movs	r3, #167	@ 0xa7
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	5cd3      	ldrb	r3, [r2, r3]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d825      	bhi.n	800dd00 <USBD_StdItfReq+0x84>
=======
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	23a7      	movs	r3, #167	@ 0xa7
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	5cd3      	ldrb	r3, [r2, r3]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d825      	bhi.n	800ce3c <USBD_StdItfReq+0x84>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	889b      	ldrh	r3, [r3, #4]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d819      	bhi.n	800dcf2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	23ad      	movs	r3, #173	@ 0xad
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	58d3      	ldr	r3, [r2, r3]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	250f      	movs	r5, #15
 800dcca:	197c      	adds	r4, r7, r5
 800dccc:	6839      	ldr	r1, [r7, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	0010      	movs	r0, r2
 800dcd2:	4798      	blx	r3
 800dcd4:	0003      	movs	r3, r0
 800dcd6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	88db      	ldrh	r3, [r3, #6]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d116      	bne.n	800dd0e <USBD_StdItfReq+0x92>
 800dce0:	197b      	adds	r3, r7, r5
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d112      	bne.n	800dd0e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	0018      	movs	r0, r3
 800dcec:	f000 fe4f 	bl	800e98e <USBD_CtlSendStatus>
=======
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	889b      	ldrh	r3, [r3, #4]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d819      	bhi.n	800ce2e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	23ad      	movs	r3, #173	@ 0xad
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	58d3      	ldr	r3, [r2, r3]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	250f      	movs	r5, #15
 800ce06:	197c      	adds	r4, r7, r5
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	0010      	movs	r0, r2
 800ce0e:	4798      	blx	r3
 800ce10:	0003      	movs	r3, r0
 800ce12:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	88db      	ldrh	r3, [r3, #6]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d116      	bne.n	800ce4a <USBD_StdItfReq+0x92>
 800ce1c:	197b      	adds	r3, r7, r5
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d112      	bne.n	800ce4a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	0018      	movs	r0, r3
 800ce28:	f000 fe4f 	bl	800daca <USBD_CtlSendStatus>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 800dcf0:	e00d      	b.n	800dd0e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	0011      	movs	r1, r2
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	f000 fd60 	bl	800e7be <USBD_CtlError>
          break;
 800dcfe:	e006      	b.n	800dd0e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800dd00:	683a      	ldr	r2, [r7, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	0011      	movs	r1, r2
 800dd06:	0018      	movs	r0, r3
 800dd08:	f000 fd59 	bl	800e7be <USBD_CtlError>
          break;
 800dd0c:	e000      	b.n	800dd10 <USBD_StdItfReq+0x94>
          break;
 800dd0e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800dd10:	e006      	b.n	800dd20 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	0011      	movs	r1, r2
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f000 fd50 	bl	800e7be <USBD_CtlError>
      break;
 800dd1e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	0018      	movs	r0, r3
 800dd24:	46bd      	mov	sp, r7
 800dd26:	b004      	add	sp, #16
 800dd28:	bdb0      	pop	{r4, r5, r7, pc}

0800dd2a <USBD_StdEPReq>:
=======
 800ce2c:	e00d      	b.n	800ce4a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	0011      	movs	r1, r2
 800ce34:	0018      	movs	r0, r3
 800ce36:	f000 fd60 	bl	800d8fa <USBD_CtlError>
          break;
 800ce3a:	e006      	b.n	800ce4a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	0011      	movs	r1, r2
 800ce42:	0018      	movs	r0, r3
 800ce44:	f000 fd59 	bl	800d8fa <USBD_CtlError>
          break;
 800ce48:	e000      	b.n	800ce4c <USBD_StdItfReq+0x94>
          break;
 800ce4a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ce4c:	e006      	b.n	800ce5c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	0011      	movs	r1, r2
 800ce54:	0018      	movs	r0, r3
 800ce56:	f000 fd50 	bl	800d8fa <USBD_CtlError>
      break;
 800ce5a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	0018      	movs	r0, r3
 800ce60:	46bd      	mov	sp, r7
 800ce62:	b004      	add	sp, #16
 800ce64:	bdb0      	pop	{r4, r5, r7, pc}

0800ce66 <USBD_StdEPReq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 800dd2a:	b5b0      	push	{r4, r5, r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd34:	230f      	movs	r3, #15
 800dd36:	18fb      	adds	r3, r7, r3
 800dd38:	2200      	movs	r2, #0
 800dd3a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	889a      	ldrh	r2, [r3, #4]
 800dd40:	230e      	movs	r3, #14
 800dd42:	18fb      	adds	r3, r7, r3
 800dd44:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	001a      	movs	r2, r3
 800dd4c:	2360      	movs	r3, #96	@ 0x60
 800dd4e:	4013      	ands	r3, r2
 800dd50:	2b40      	cmp	r3, #64	@ 0x40
 800dd52:	d006      	beq.n	800dd62 <USBD_StdEPReq+0x38>
 800dd54:	d900      	bls.n	800dd58 <USBD_StdEPReq+0x2e>
 800dd56:	e190      	b.n	800e07a <USBD_StdEPReq+0x350>
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00c      	beq.n	800dd76 <USBD_StdEPReq+0x4c>
 800dd5c:	2b20      	cmp	r3, #32
 800dd5e:	d000      	beq.n	800dd62 <USBD_StdEPReq+0x38>
 800dd60:	e18b      	b.n	800e07a <USBD_StdEPReq+0x350>
=======
 800ce66:	b5b0      	push	{r4, r5, r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce70:	230f      	movs	r3, #15
 800ce72:	18fb      	adds	r3, r7, r3
 800ce74:	2200      	movs	r2, #0
 800ce76:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	889a      	ldrh	r2, [r3, #4]
 800ce7c:	230e      	movs	r3, #14
 800ce7e:	18fb      	adds	r3, r7, r3
 800ce80:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	001a      	movs	r2, r3
 800ce88:	2360      	movs	r3, #96	@ 0x60
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	2b40      	cmp	r3, #64	@ 0x40
 800ce8e:	d006      	beq.n	800ce9e <USBD_StdEPReq+0x38>
 800ce90:	d900      	bls.n	800ce94 <USBD_StdEPReq+0x2e>
 800ce92:	e190      	b.n	800d1b6 <USBD_StdEPReq+0x350>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <USBD_StdEPReq+0x4c>
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	d000      	beq.n	800ce9e <USBD_StdEPReq+0x38>
 800ce9c:	e18b      	b.n	800d1b6 <USBD_StdEPReq+0x350>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	23ad      	movs	r3, #173	@ 0xad
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	58d3      	ldr	r3, [r2, r3]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	0010      	movs	r0, r2
 800dd72:	4798      	blx	r3
      break;
 800dd74:	e188      	b.n	800e088 <USBD_StdEPReq+0x35e>
=======
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	23ad      	movs	r3, #173	@ 0xad
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	58d3      	ldr	r3, [r2, r3]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	0010      	movs	r0, r2
 800ceae:	4798      	blx	r3
      break;
 800ceb0:	e188      	b.n	800d1c4 <USBD_StdEPReq+0x35e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
<<<<<<< HEAD
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	001a      	movs	r2, r3
 800dd7c:	2360      	movs	r3, #96	@ 0x60
 800dd7e:	4013      	ands	r3, r2
 800dd80:	2b20      	cmp	r3, #32
 800dd82:	d10f      	bne.n	800dda4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	23ad      	movs	r3, #173	@ 0xad
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	58d3      	ldr	r3, [r2, r3]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	250f      	movs	r5, #15
 800dd90:	197c      	adds	r4, r7, r5
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	0010      	movs	r0, r2
 800dd98:	4798      	blx	r3
 800dd9a:	0003      	movs	r3, r0
 800dd9c:	7023      	strb	r3, [r4, #0]

        return ret;
 800dd9e:	197b      	adds	r3, r7, r5
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	e174      	b.n	800e08e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	785b      	ldrb	r3, [r3, #1]
 800dda8:	2b03      	cmp	r3, #3
 800ddaa:	d007      	beq.n	800ddbc <USBD_StdEPReq+0x92>
 800ddac:	dd00      	ble.n	800ddb0 <USBD_StdEPReq+0x86>
 800ddae:	e15c      	b.n	800e06a <USBD_StdEPReq+0x340>
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d100      	bne.n	800ddb6 <USBD_StdEPReq+0x8c>
 800ddb4:	e092      	b.n	800dedc <USBD_StdEPReq+0x1b2>
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d04b      	beq.n	800de52 <USBD_StdEPReq+0x128>
 800ddba:	e156      	b.n	800e06a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	23a7      	movs	r3, #167	@ 0xa7
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	5cd3      	ldrb	r3, [r2, r3]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d002      	beq.n	800ddce <USBD_StdEPReq+0xa4>
 800ddc8:	2b03      	cmp	r3, #3
 800ddca:	d01d      	beq.n	800de08 <USBD_StdEPReq+0xde>
 800ddcc:	e039      	b.n	800de42 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddce:	220e      	movs	r2, #14
 800ddd0:	18bb      	adds	r3, r7, r2
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d010      	beq.n	800ddfa <USBD_StdEPReq+0xd0>
 800ddd8:	18bb      	adds	r3, r7, r2
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b80      	cmp	r3, #128	@ 0x80
 800ddde:	d00c      	beq.n	800ddfa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dde0:	18bb      	adds	r3, r7, r2
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	0011      	movs	r1, r2
 800dde8:	0018      	movs	r0, r3
 800ddea:	f004 f804 	bl	8011df6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2180      	movs	r1, #128	@ 0x80
 800ddf2:	0018      	movs	r0, r3
 800ddf4:	f003 ffff 	bl	8011df6 <USBD_LL_StallEP>
=======
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	001a      	movs	r2, r3
 800ceb8:	2360      	movs	r3, #96	@ 0x60
 800ceba:	4013      	ands	r3, r2
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	d10f      	bne.n	800cee0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	23ad      	movs	r3, #173	@ 0xad
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	58d3      	ldr	r3, [r2, r3]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	250f      	movs	r5, #15
 800cecc:	197c      	adds	r4, r7, r5
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	0010      	movs	r0, r2
 800ced4:	4798      	blx	r3
 800ced6:	0003      	movs	r3, r0
 800ced8:	7023      	strb	r3, [r4, #0]

        return ret;
 800ceda:	197b      	adds	r3, r7, r5
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	e174      	b.n	800d1ca <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	785b      	ldrb	r3, [r3, #1]
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d007      	beq.n	800cef8 <USBD_StdEPReq+0x92>
 800cee8:	dd00      	ble.n	800ceec <USBD_StdEPReq+0x86>
 800ceea:	e15c      	b.n	800d1a6 <USBD_StdEPReq+0x340>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d100      	bne.n	800cef2 <USBD_StdEPReq+0x8c>
 800cef0:	e092      	b.n	800d018 <USBD_StdEPReq+0x1b2>
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d04b      	beq.n	800cf8e <USBD_StdEPReq+0x128>
 800cef6:	e156      	b.n	800d1a6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	23a7      	movs	r3, #167	@ 0xa7
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	5cd3      	ldrb	r3, [r2, r3]
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d002      	beq.n	800cf0a <USBD_StdEPReq+0xa4>
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d01d      	beq.n	800cf44 <USBD_StdEPReq+0xde>
 800cf08:	e039      	b.n	800cf7e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf0a:	220e      	movs	r2, #14
 800cf0c:	18bb      	adds	r3, r7, r2
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d010      	beq.n	800cf36 <USBD_StdEPReq+0xd0>
 800cf14:	18bb      	adds	r3, r7, r2
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b80      	cmp	r3, #128	@ 0x80
 800cf1a:	d00c      	beq.n	800cf36 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cf1c:	18bb      	adds	r3, r7, r2
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	0011      	movs	r1, r2
 800cf24:	0018      	movs	r0, r3
 800cf26:	f004 f804 	bl	8010f32 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2180      	movs	r1, #128	@ 0x80
 800cf2e:	0018      	movs	r0, r3
 800cf30:	f003 ffff 	bl	8010f32 <USBD_LL_StallEP>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 800ddf8:	e02a      	b.n	800de50 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	0011      	movs	r1, r2
 800de00:	0018      	movs	r0, r3
 800de02:	f000 fcdc 	bl	800e7be <USBD_CtlError>
              break;
 800de06:	e023      	b.n	800de50 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d113      	bne.n	800de38 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800de10:	220e      	movs	r2, #14
 800de12:	18bb      	adds	r3, r7, r2
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00e      	beq.n	800de38 <USBD_StdEPReq+0x10e>
 800de1a:	18bb      	adds	r3, r7, r2
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	2b80      	cmp	r3, #128	@ 0x80
 800de20:	d00a      	beq.n	800de38 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	88db      	ldrh	r3, [r3, #6]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800de2a:	18bb      	adds	r3, r7, r2
 800de2c:	781a      	ldrb	r2, [r3, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	0011      	movs	r1, r2
 800de32:	0018      	movs	r0, r3
 800de34:	f003 ffdf 	bl	8011df6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	0018      	movs	r0, r3
 800de3c:	f000 fda7 	bl	800e98e <USBD_CtlSendStatus>

              break;
 800de40:	e006      	b.n	800de50 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	0011      	movs	r1, r2
 800de48:	0018      	movs	r0, r3
 800de4a:	f000 fcb8 	bl	800e7be <USBD_CtlError>
              break;
 800de4e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800de50:	e112      	b.n	800e078 <USBD_StdEPReq+0x34e>
=======
 800cf34:	e02a      	b.n	800cf8c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800cf36:	683a      	ldr	r2, [r7, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	0011      	movs	r1, r2
 800cf3c:	0018      	movs	r0, r3
 800cf3e:	f000 fcdc 	bl	800d8fa <USBD_CtlError>
              break;
 800cf42:	e023      	b.n	800cf8c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	885b      	ldrh	r3, [r3, #2]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d113      	bne.n	800cf74 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800cf4c:	220e      	movs	r2, #14
 800cf4e:	18bb      	adds	r3, r7, r2
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00e      	beq.n	800cf74 <USBD_StdEPReq+0x10e>
 800cf56:	18bb      	adds	r3, r7, r2
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b80      	cmp	r3, #128	@ 0x80
 800cf5c:	d00a      	beq.n	800cf74 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	88db      	ldrh	r3, [r3, #6]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cf66:	18bb      	adds	r3, r7, r2
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	0011      	movs	r1, r2
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f003 ffdf 	bl	8010f32 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	0018      	movs	r0, r3
 800cf78:	f000 fda7 	bl	800daca <USBD_CtlSendStatus>

              break;
 800cf7c:	e006      	b.n	800cf8c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	0011      	movs	r1, r2
 800cf84:	0018      	movs	r0, r3
 800cf86:	f000 fcb8 	bl	800d8fa <USBD_CtlError>
              break;
 800cf8a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cf8c:	e112      	b.n	800d1b4 <USBD_StdEPReq+0x34e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	23a7      	movs	r3, #167	@ 0xa7
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	5cd3      	ldrb	r3, [r2, r3]
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d002      	beq.n	800de64 <USBD_StdEPReq+0x13a>
 800de5e:	2b03      	cmp	r3, #3
 800de60:	d01d      	beq.n	800de9e <USBD_StdEPReq+0x174>
 800de62:	e032      	b.n	800deca <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de64:	220e      	movs	r2, #14
 800de66:	18bb      	adds	r3, r7, r2
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d010      	beq.n	800de90 <USBD_StdEPReq+0x166>
 800de6e:	18bb      	adds	r3, r7, r2
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	2b80      	cmp	r3, #128	@ 0x80
 800de74:	d00c      	beq.n	800de90 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800de76:	18bb      	adds	r3, r7, r2
 800de78:	781a      	ldrb	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	0011      	movs	r1, r2
 800de7e:	0018      	movs	r0, r3
 800de80:	f003 ffb9 	bl	8011df6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2180      	movs	r1, #128	@ 0x80
 800de88:	0018      	movs	r0, r3
 800de8a:	f003 ffb4 	bl	8011df6 <USBD_LL_StallEP>
=======
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	23a7      	movs	r3, #167	@ 0xa7
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	5cd3      	ldrb	r3, [r2, r3]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d002      	beq.n	800cfa0 <USBD_StdEPReq+0x13a>
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d01d      	beq.n	800cfda <USBD_StdEPReq+0x174>
 800cf9e:	e032      	b.n	800d006 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfa0:	220e      	movs	r2, #14
 800cfa2:	18bb      	adds	r3, r7, r2
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d010      	beq.n	800cfcc <USBD_StdEPReq+0x166>
 800cfaa:	18bb      	adds	r3, r7, r2
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b80      	cmp	r3, #128	@ 0x80
 800cfb0:	d00c      	beq.n	800cfcc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cfb2:	18bb      	adds	r3, r7, r2
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	0011      	movs	r1, r2
 800cfba:	0018      	movs	r0, r3
 800cfbc:	f003 ffb9 	bl	8010f32 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2180      	movs	r1, #128	@ 0x80
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f003 ffb4 	bl	8010f32 <USBD_LL_StallEP>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 800de8e:	e024      	b.n	800deda <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	0011      	movs	r1, r2
 800de96:	0018      	movs	r0, r3
 800de98:	f000 fc91 	bl	800e7be <USBD_CtlError>
              break;
 800de9c:	e01d      	b.n	800deda <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	885b      	ldrh	r3, [r3, #2]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d118      	bne.n	800ded8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dea6:	210e      	movs	r1, #14
 800dea8:	187b      	adds	r3, r7, r1
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	227f      	movs	r2, #127	@ 0x7f
 800deae:	4013      	ands	r3, r2
 800deb0:	d006      	beq.n	800dec0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800deb2:	187b      	adds	r3, r7, r1
 800deb4:	781a      	ldrb	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	0011      	movs	r1, r2
 800deba:	0018      	movs	r0, r3
 800debc:	f003 ffc6 	bl	8011e4c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	0018      	movs	r0, r3
 800dec4:	f000 fd63 	bl	800e98e <USBD_CtlSendStatus>
              }
              break;
 800dec8:	e006      	b.n	800ded8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	0011      	movs	r1, r2
 800ded0:	0018      	movs	r0, r3
 800ded2:	f000 fc74 	bl	800e7be <USBD_CtlError>
              break;
 800ded6:	e000      	b.n	800deda <USBD_StdEPReq+0x1b0>
              break;
 800ded8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800deda:	e0cd      	b.n	800e078 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	23a7      	movs	r3, #167	@ 0xa7
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	5cd3      	ldrb	r3, [r2, r3]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d002      	beq.n	800deee <USBD_StdEPReq+0x1c4>
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d03c      	beq.n	800df66 <USBD_StdEPReq+0x23c>
 800deec:	e0b5      	b.n	800e05a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800deee:	220e      	movs	r2, #14
 800def0:	18bb      	adds	r3, r7, r2
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <USBD_StdEPReq+0x1e4>
 800def8:	18bb      	adds	r3, r7, r2
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b80      	cmp	r3, #128	@ 0x80
 800defe:	d006      	beq.n	800df0e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	0011      	movs	r1, r2
 800df06:	0018      	movs	r0, r3
 800df08:	f000 fc59 	bl	800e7be <USBD_CtlError>
                break;
 800df0c:	e0ac      	b.n	800e068 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df0e:	220e      	movs	r2, #14
 800df10:	18bb      	adds	r3, r7, r2
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	b25b      	sxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	da0c      	bge.n	800df34 <USBD_StdEPReq+0x20a>
 800df1a:	18bb      	adds	r3, r7, r2
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	227f      	movs	r2, #127	@ 0x7f
 800df20:	401a      	ands	r2, r3
 800df22:	0013      	movs	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	189b      	adds	r3, r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	3310      	adds	r3, #16
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	18d3      	adds	r3, r2, r3
 800df30:	3304      	adds	r3, #4
 800df32:	e00d      	b.n	800df50 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df34:	230e      	movs	r3, #14
 800df36:	18fb      	adds	r3, r7, r3
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	227f      	movs	r2, #127	@ 0x7f
 800df3c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df3e:	0013      	movs	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	189b      	adds	r3, r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	3351      	adds	r3, #81	@ 0x51
 800df48:	33ff      	adds	r3, #255	@ 0xff
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	18d3      	adds	r3, r2, r3
 800df4e:	3304      	adds	r3, #4
 800df50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2200      	movs	r2, #0
 800df56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df58:	68b9      	ldr	r1, [r7, #8]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2202      	movs	r2, #2
 800df5e:	0018      	movs	r0, r3
 800df60:	f000 fcab 	bl	800e8ba <USBD_CtlSendData>
              break;
 800df64:	e080      	b.n	800e068 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df66:	220e      	movs	r2, #14
 800df68:	18bb      	adds	r3, r7, r2
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da14      	bge.n	800df9c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df72:	18bb      	adds	r3, r7, r2
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	220f      	movs	r2, #15
 800df78:	401a      	ands	r2, r3
 800df7a:	6879      	ldr	r1, [r7, #4]
 800df7c:	0013      	movs	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	189b      	adds	r3, r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	18cb      	adds	r3, r1, r3
 800df86:	3318      	adds	r3, #24
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d11e      	bne.n	800dfcc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	0011      	movs	r1, r2
 800df94:	0018      	movs	r0, r3
 800df96:	f000 fc12 	bl	800e7be <USBD_CtlError>
                  break;
 800df9a:	e065      	b.n	800e068 <USBD_StdEPReq+0x33e>
=======
 800cfca:	e024      	b.n	800d016 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	0011      	movs	r1, r2
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f000 fc91 	bl	800d8fa <USBD_CtlError>
              break;
 800cfd8:	e01d      	b.n	800d016 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	885b      	ldrh	r3, [r3, #2]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d118      	bne.n	800d014 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cfe2:	210e      	movs	r1, #14
 800cfe4:	187b      	adds	r3, r7, r1
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	227f      	movs	r2, #127	@ 0x7f
 800cfea:	4013      	ands	r3, r2
 800cfec:	d006      	beq.n	800cffc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cfee:	187b      	adds	r3, r7, r1
 800cff0:	781a      	ldrb	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	0011      	movs	r1, r2
 800cff6:	0018      	movs	r0, r3
 800cff8:	f003 ffc6 	bl	8010f88 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	0018      	movs	r0, r3
 800d000:	f000 fd63 	bl	800daca <USBD_CtlSendStatus>
              }
              break;
 800d004:	e006      	b.n	800d014 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	0011      	movs	r1, r2
 800d00c:	0018      	movs	r0, r3
 800d00e:	f000 fc74 	bl	800d8fa <USBD_CtlError>
              break;
 800d012:	e000      	b.n	800d016 <USBD_StdEPReq+0x1b0>
              break;
 800d014:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d016:	e0cd      	b.n	800d1b4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	23a7      	movs	r3, #167	@ 0xa7
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	5cd3      	ldrb	r3, [r2, r3]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d002      	beq.n	800d02a <USBD_StdEPReq+0x1c4>
 800d024:	2b03      	cmp	r3, #3
 800d026:	d03c      	beq.n	800d0a2 <USBD_StdEPReq+0x23c>
 800d028:	e0b5      	b.n	800d196 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d02a:	220e      	movs	r2, #14
 800d02c:	18bb      	adds	r3, r7, r2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00a      	beq.n	800d04a <USBD_StdEPReq+0x1e4>
 800d034:	18bb      	adds	r3, r7, r2
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b80      	cmp	r3, #128	@ 0x80
 800d03a:	d006      	beq.n	800d04a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	0011      	movs	r1, r2
 800d042:	0018      	movs	r0, r3
 800d044:	f000 fc59 	bl	800d8fa <USBD_CtlError>
                break;
 800d048:	e0ac      	b.n	800d1a4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d04a:	220e      	movs	r2, #14
 800d04c:	18bb      	adds	r3, r7, r2
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	b25b      	sxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	da0c      	bge.n	800d070 <USBD_StdEPReq+0x20a>
 800d056:	18bb      	adds	r3, r7, r2
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	227f      	movs	r2, #127	@ 0x7f
 800d05c:	401a      	ands	r2, r3
 800d05e:	0013      	movs	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	189b      	adds	r3, r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	3310      	adds	r3, #16
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	18d3      	adds	r3, r2, r3
 800d06c:	3304      	adds	r3, #4
 800d06e:	e00d      	b.n	800d08c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d070:	230e      	movs	r3, #14
 800d072:	18fb      	adds	r3, r7, r3
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	227f      	movs	r2, #127	@ 0x7f
 800d078:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d07a:	0013      	movs	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	189b      	adds	r3, r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	3351      	adds	r3, #81	@ 0x51
 800d084:	33ff      	adds	r3, #255	@ 0xff
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	18d3      	adds	r3, r2, r3
 800d08a:	3304      	adds	r3, #4
 800d08c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	2200      	movs	r2, #0
 800d092:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d094:	68b9      	ldr	r1, [r7, #8]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2202      	movs	r2, #2
 800d09a:	0018      	movs	r0, r3
 800d09c:	f000 fcab 	bl	800d9f6 <USBD_CtlSendData>
              break;
 800d0a0:	e080      	b.n	800d1a4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d0a2:	220e      	movs	r2, #14
 800d0a4:	18bb      	adds	r3, r7, r2
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	b25b      	sxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	da14      	bge.n	800d0d8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0ae:	18bb      	adds	r3, r7, r2
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	220f      	movs	r2, #15
 800d0b4:	401a      	ands	r2, r3
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	0013      	movs	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	189b      	adds	r3, r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	18cb      	adds	r3, r1, r3
 800d0c2:	3318      	adds	r3, #24
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d11e      	bne.n	800d108 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	0011      	movs	r1, r2
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f000 fc12 	bl	800d8fa <USBD_CtlError>
                  break;
 800d0d6:	e065      	b.n	800d1a4 <USBD_StdEPReq+0x33e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 800df9c:	230e      	movs	r3, #14
 800df9e:	18fb      	adds	r3, r7, r3
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	220f      	movs	r2, #15
 800dfa4:	401a      	ands	r2, r3
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	23ac      	movs	r3, #172	@ 0xac
 800dfaa:	0059      	lsls	r1, r3, #1
 800dfac:	0013      	movs	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	189b      	adds	r3, r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	18c3      	adds	r3, r0, r3
 800dfb6:	185b      	adds	r3, r3, r1
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d106      	bne.n	800dfcc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	0011      	movs	r1, r2
 800dfc4:	0018      	movs	r0, r3
 800dfc6:	f000 fbfa 	bl	800e7be <USBD_CtlError>
                  break;
 800dfca:	e04d      	b.n	800e068 <USBD_StdEPReq+0x33e>
=======
 800d0d8:	230e      	movs	r3, #14
 800d0da:	18fb      	adds	r3, r7, r3
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	220f      	movs	r2, #15
 800d0e0:	401a      	ands	r2, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	23ac      	movs	r3, #172	@ 0xac
 800d0e6:	0059      	lsls	r1, r3, #1
 800d0e8:	0013      	movs	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	189b      	adds	r3, r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	18c3      	adds	r3, r0, r3
 800d0f2:	185b      	adds	r3, r3, r1
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	0011      	movs	r1, r2
 800d100:	0018      	movs	r0, r3
 800d102:	f000 fbfa 	bl	800d8fa <USBD_CtlError>
                  break;
 800d106:	e04d      	b.n	800d1a4 <USBD_StdEPReq+0x33e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 800dfcc:	220e      	movs	r2, #14
 800dfce:	18bb      	adds	r3, r7, r2
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	b25b      	sxtb	r3, r3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	da0c      	bge.n	800dff2 <USBD_StdEPReq+0x2c8>
 800dfd8:	18bb      	adds	r3, r7, r2
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	227f      	movs	r2, #127	@ 0x7f
 800dfde:	401a      	ands	r2, r3
 800dfe0:	0013      	movs	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	189b      	adds	r3, r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	3310      	adds	r3, #16
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	18d3      	adds	r3, r2, r3
 800dfee:	3304      	adds	r3, #4
 800dff0:	e00d      	b.n	800e00e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dff2:	230e      	movs	r3, #14
 800dff4:	18fb      	adds	r3, r7, r3
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	227f      	movs	r2, #127	@ 0x7f
 800dffa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dffc:	0013      	movs	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	189b      	adds	r3, r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	3351      	adds	r3, #81	@ 0x51
 800e006:	33ff      	adds	r3, #255	@ 0xff
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	18d3      	adds	r3, r2, r3
 800e00c:	3304      	adds	r3, #4
 800e00e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e010:	220e      	movs	r2, #14
 800e012:	18bb      	adds	r3, r7, r2
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d003      	beq.n	800e022 <USBD_StdEPReq+0x2f8>
 800e01a:	18bb      	adds	r3, r7, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b80      	cmp	r3, #128	@ 0x80
 800e020:	d103      	bne.n	800e02a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2200      	movs	r2, #0
 800e026:	601a      	str	r2, [r3, #0]
 800e028:	e010      	b.n	800e04c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e02a:	230e      	movs	r3, #14
 800e02c:	18fb      	adds	r3, r7, r3
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	0011      	movs	r1, r2
 800e034:	0018      	movs	r0, r3
 800e036:	f003 ff34 	bl	8011ea2 <USBD_LL_IsStallEP>
 800e03a:	1e03      	subs	r3, r0, #0
 800e03c:	d003      	beq.n	800e046 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2201      	movs	r2, #1
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	e002      	b.n	800e04c <USBD_StdEPReq+0x322>
=======
 800d108:	220e      	movs	r2, #14
 800d10a:	18bb      	adds	r3, r7, r2
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	b25b      	sxtb	r3, r3
 800d110:	2b00      	cmp	r3, #0
 800d112:	da0c      	bge.n	800d12e <USBD_StdEPReq+0x2c8>
 800d114:	18bb      	adds	r3, r7, r2
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	227f      	movs	r2, #127	@ 0x7f
 800d11a:	401a      	ands	r2, r3
 800d11c:	0013      	movs	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	189b      	adds	r3, r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	3310      	adds	r3, #16
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	18d3      	adds	r3, r2, r3
 800d12a:	3304      	adds	r3, #4
 800d12c:	e00d      	b.n	800d14a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d12e:	230e      	movs	r3, #14
 800d130:	18fb      	adds	r3, r7, r3
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	227f      	movs	r2, #127	@ 0x7f
 800d136:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d138:	0013      	movs	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	189b      	adds	r3, r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	3351      	adds	r3, #81	@ 0x51
 800d142:	33ff      	adds	r3, #255	@ 0xff
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	18d3      	adds	r3, r2, r3
 800d148:	3304      	adds	r3, #4
 800d14a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d14c:	220e      	movs	r2, #14
 800d14e:	18bb      	adds	r3, r7, r2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <USBD_StdEPReq+0x2f8>
 800d156:	18bb      	adds	r3, r7, r2
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b80      	cmp	r3, #128	@ 0x80
 800d15c:	d103      	bne.n	800d166 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	e010      	b.n	800d188 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d166:	230e      	movs	r3, #14
 800d168:	18fb      	adds	r3, r7, r3
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	0011      	movs	r1, r2
 800d170:	0018      	movs	r0, r3
 800d172:	f003 ff34 	bl	8010fde <USBD_LL_IsStallEP>
 800d176:	1e03      	subs	r3, r0, #0
 800d178:	d003      	beq.n	800d182 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2201      	movs	r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	e002      	b.n	800d188 <USBD_StdEPReq+0x322>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e04c:	68b9      	ldr	r1, [r7, #8]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2202      	movs	r2, #2
 800e052:	0018      	movs	r0, r3
 800e054:	f000 fc31 	bl	800e8ba <USBD_CtlSendData>
              break;
 800e058:	e006      	b.n	800e068 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	0011      	movs	r1, r2
 800e060:	0018      	movs	r0, r3
 800e062:	f000 fbac 	bl	800e7be <USBD_CtlError>
              break;
 800e066:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800e068:	e006      	b.n	800e078 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0011      	movs	r1, r2
 800e070:	0018      	movs	r0, r3
 800e072:	f000 fba4 	bl	800e7be <USBD_CtlError>
          break;
 800e076:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800e078:	e006      	b.n	800e088 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	0011      	movs	r1, r2
 800e080:	0018      	movs	r0, r3
 800e082:	f000 fb9c 	bl	800e7be <USBD_CtlError>
      break;
 800e086:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800e088:	230f      	movs	r3, #15
 800e08a:	18fb      	adds	r3, r7, r3
 800e08c:	781b      	ldrb	r3, [r3, #0]
}
 800e08e:	0018      	movs	r0, r3
 800e090:	46bd      	mov	sp, r7
 800e092:	b004      	add	sp, #16
 800e094:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e098 <USBD_GetDescriptor>:
=======
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2202      	movs	r2, #2
 800d18e:	0018      	movs	r0, r3
 800d190:	f000 fc31 	bl	800d9f6 <USBD_CtlSendData>
              break;
 800d194:	e006      	b.n	800d1a4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	0011      	movs	r1, r2
 800d19c:	0018      	movs	r0, r3
 800d19e:	f000 fbac 	bl	800d8fa <USBD_CtlError>
              break;
 800d1a2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d1a4:	e006      	b.n	800d1b4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	0011      	movs	r1, r2
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f000 fba4 	bl	800d8fa <USBD_CtlError>
          break;
 800d1b2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d1b4:	e006      	b.n	800d1c4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	0011      	movs	r1, r2
 800d1bc:	0018      	movs	r0, r3
 800d1be:	f000 fb9c 	bl	800d8fa <USBD_CtlError>
      break;
 800d1c2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d1c4:	230f      	movs	r3, #15
 800d1c6:	18fb      	adds	r3, r7, r3
 800d1c8:	781b      	ldrb	r3, [r3, #0]
}
 800d1ca:	0018      	movs	r0, r3
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	b004      	add	sp, #16
 800d1d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d1d4 <USBD_GetDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0a2:	2308      	movs	r3, #8
 800e0a4:	18fb      	adds	r3, r7, r3
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0ae:	230b      	movs	r3, #11
 800e0b0:	18fb      	adds	r3, r7, r3
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	885b      	ldrh	r3, [r3, #2]
 800e0ba:	0a1b      	lsrs	r3, r3, #8
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	2b07      	cmp	r3, #7
 800e0c0:	d900      	bls.n	800e0c4 <USBD_GetDescriptor+0x2c>
 800e0c2:	e159      	b.n	800e378 <USBD_GetDescriptor+0x2e0>
 800e0c4:	009a      	lsls	r2, r3, #2
 800e0c6:	4bcb      	ldr	r3, [pc, #812]	@ (800e3f4 <USBD_GetDescriptor+0x35c>)
 800e0c8:	18d3      	adds	r3, r2, r3
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	469f      	mov	pc, r3
=======
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1de:	2308      	movs	r3, #8
 800d1e0:	18fb      	adds	r3, r7, r3
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d1ea:	230b      	movs	r3, #11
 800d1ec:	18fb      	adds	r3, r7, r3
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	885b      	ldrh	r3, [r3, #2]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b07      	cmp	r3, #7
 800d1fc:	d900      	bls.n	800d200 <USBD_GetDescriptor+0x2c>
 800d1fe:	e159      	b.n	800d4b4 <USBD_GetDescriptor+0x2e0>
 800d200:	009a      	lsls	r2, r3, #2
 800d202:	4bcb      	ldr	r3, [pc, #812]	@ (800d530 <USBD_GetDescriptor+0x35c>)
 800d204:	18d3      	adds	r3, r2, r3
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	469f      	mov	pc, r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	23ac      	movs	r3, #172	@ 0xac
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	58d3      	ldr	r3, [r2, r3]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	7c12      	ldrb	r2, [r2, #16]
 800e0dc:	2108      	movs	r1, #8
 800e0de:	1879      	adds	r1, r7, r1
 800e0e0:	0010      	movs	r0, r2
 800e0e2:	4798      	blx	r3
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	60fb      	str	r3, [r7, #12]
      break;
 800e0e8:	e153      	b.n	800e392 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	7c1b      	ldrb	r3, [r3, #16]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10f      	bne.n	800e112 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	23ad      	movs	r3, #173	@ 0xad
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	58d3      	ldr	r3, [r2, r3]
 800e0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0fc:	2208      	movs	r2, #8
 800e0fe:	18ba      	adds	r2, r7, r2
 800e100:	0010      	movs	r0, r2
 800e102:	4798      	blx	r3
 800e104:	0003      	movs	r3, r0
 800e106:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3301      	adds	r3, #1
 800e10c:	2202      	movs	r2, #2
 800e10e:	701a      	strb	r2, [r3, #0]
=======
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	23ac      	movs	r3, #172	@ 0xac
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	58d3      	ldr	r3, [r2, r3]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	7c12      	ldrb	r2, [r2, #16]
 800d218:	2108      	movs	r1, #8
 800d21a:	1879      	adds	r1, r7, r1
 800d21c:	0010      	movs	r0, r2
 800d21e:	4798      	blx	r3
 800d220:	0003      	movs	r3, r0
 800d222:	60fb      	str	r3, [r7, #12]
      break;
 800d224:	e153      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	7c1b      	ldrb	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10f      	bne.n	800d24e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	23ad      	movs	r3, #173	@ 0xad
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	58d3      	ldr	r3, [r2, r3]
 800d236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d238:	2208      	movs	r2, #8
 800d23a:	18ba      	adds	r2, r7, r2
 800d23c:	0010      	movs	r0, r2
 800d23e:	4798      	blx	r3
 800d240:	0003      	movs	r3, r0
 800d242:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3301      	adds	r3, #1
 800d248:	2202      	movs	r2, #2
 800d24a:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 800e110:	e13f      	b.n	800e392 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	23ad      	movs	r3, #173	@ 0xad
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	58d3      	ldr	r3, [r2, r3]
 800e11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11c:	2208      	movs	r2, #8
 800e11e:	18ba      	adds	r2, r7, r2
 800e120:	0010      	movs	r0, r2
 800e122:	4798      	blx	r3
 800e124:	0003      	movs	r3, r0
 800e126:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	2202      	movs	r2, #2
 800e12e:	701a      	strb	r2, [r3, #0]
      break;
 800e130:	e12f      	b.n	800e392 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	885b      	ldrh	r3, [r3, #2]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b05      	cmp	r3, #5
 800e13a:	d900      	bls.n	800e13e <USBD_GetDescriptor+0xa6>
 800e13c:	e0d0      	b.n	800e2e0 <USBD_GetDescriptor+0x248>
 800e13e:	009a      	lsls	r2, r3, #2
 800e140:	4bad      	ldr	r3, [pc, #692]	@ (800e3f8 <USBD_GetDescriptor+0x360>)
 800e142:	18d3      	adds	r3, r2, r3
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	23ac      	movs	r3, #172	@ 0xac
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	58d3      	ldr	r3, [r2, r3]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	23ac      	movs	r3, #172	@ 0xac
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	58d3      	ldr	r3, [r2, r3]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	2108      	movs	r1, #8
 800e166:	1879      	adds	r1, r7, r1
 800e168:	0010      	movs	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	0003      	movs	r3, r0
 800e16e:	60fb      	str	r3, [r7, #12]
=======
 800d24c:	e13f      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	23ad      	movs	r3, #173	@ 0xad
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	58d3      	ldr	r3, [r2, r3]
 800d256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d258:	2208      	movs	r2, #8
 800d25a:	18ba      	adds	r2, r7, r2
 800d25c:	0010      	movs	r0, r2
 800d25e:	4798      	blx	r3
 800d260:	0003      	movs	r3, r0
 800d262:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3301      	adds	r3, #1
 800d268:	2202      	movs	r2, #2
 800d26a:	701a      	strb	r2, [r3, #0]
      break;
 800d26c:	e12f      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	885b      	ldrh	r3, [r3, #2]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	2b05      	cmp	r3, #5
 800d276:	d900      	bls.n	800d27a <USBD_GetDescriptor+0xa6>
 800d278:	e0d0      	b.n	800d41c <USBD_GetDescriptor+0x248>
 800d27a:	009a      	lsls	r2, r3, #2
 800d27c:	4bad      	ldr	r3, [pc, #692]	@ (800d534 <USBD_GetDescriptor+0x360>)
 800d27e:	18d3      	adds	r3, r2, r3
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	23ac      	movs	r3, #172	@ 0xac
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	58d3      	ldr	r3, [r2, r3]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00d      	beq.n	800d2ae <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	23ac      	movs	r3, #172	@ 0xac
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	58d3      	ldr	r3, [r2, r3]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7c12      	ldrb	r2, [r2, #16]
 800d2a0:	2108      	movs	r1, #8
 800d2a2:	1879      	adds	r1, r7, r1
 800d2a4:	0010      	movs	r0, r2
 800d2a6:	4798      	blx	r3
 800d2a8:	0003      	movs	r3, r0
 800d2aa:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e170:	e0c3      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	0011      	movs	r1, r2
 800e178:	0018      	movs	r0, r3
 800e17a:	f000 fb20 	bl	800e7be <USBD_CtlError>
            err++;
 800e17e:	210b      	movs	r1, #11
 800e180:	187b      	adds	r3, r7, r1
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	187b      	adds	r3, r7, r1
 800e186:	3201      	adds	r2, #1
 800e188:	701a      	strb	r2, [r3, #0]
          break;
 800e18a:	e0b6      	b.n	800e2fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	23ac      	movs	r3, #172	@ 0xac
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	58d3      	ldr	r3, [r2, r3]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00d      	beq.n	800e1b6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	23ac      	movs	r3, #172	@ 0xac
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	58d3      	ldr	r3, [r2, r3]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	7c12      	ldrb	r2, [r2, #16]
 800e1a8:	2108      	movs	r1, #8
 800e1aa:	1879      	adds	r1, r7, r1
 800e1ac:	0010      	movs	r0, r2
 800e1ae:	4798      	blx	r3
 800e1b0:	0003      	movs	r3, r0
 800e1b2:	60fb      	str	r3, [r7, #12]
=======
 800d2ac:	e0c3      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	0011      	movs	r1, r2
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f000 fb20 	bl	800d8fa <USBD_CtlError>
            err++;
 800d2ba:	210b      	movs	r1, #11
 800d2bc:	187b      	adds	r3, r7, r1
 800d2be:	781a      	ldrb	r2, [r3, #0]
 800d2c0:	187b      	adds	r3, r7, r1
 800d2c2:	3201      	adds	r2, #1
 800d2c4:	701a      	strb	r2, [r3, #0]
          break;
 800d2c6:	e0b6      	b.n	800d436 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	23ac      	movs	r3, #172	@ 0xac
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	58d3      	ldr	r3, [r2, r3]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00d      	beq.n	800d2f2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	23ac      	movs	r3, #172	@ 0xac
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	58d3      	ldr	r3, [r2, r3]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	7c12      	ldrb	r2, [r2, #16]
 800d2e4:	2108      	movs	r1, #8
 800d2e6:	1879      	adds	r1, r7, r1
 800d2e8:	0010      	movs	r0, r2
 800d2ea:	4798      	blx	r3
 800d2ec:	0003      	movs	r3, r0
 800d2ee:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e1b4:	e0a1      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	0011      	movs	r1, r2
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f000 fafe 	bl	800e7be <USBD_CtlError>
            err++;
 800e1c2:	210b      	movs	r1, #11
 800e1c4:	187b      	adds	r3, r7, r1
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	187b      	adds	r3, r7, r1
 800e1ca:	3201      	adds	r2, #1
 800e1cc:	701a      	strb	r2, [r3, #0]
          break;
 800e1ce:	e094      	b.n	800e2fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	23ac      	movs	r3, #172	@ 0xac
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	58d3      	ldr	r3, [r2, r3]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00d      	beq.n	800e1fa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	23ac      	movs	r3, #172	@ 0xac
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	58d3      	ldr	r3, [r2, r3]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	7c12      	ldrb	r2, [r2, #16]
 800e1ec:	2108      	movs	r1, #8
 800e1ee:	1879      	adds	r1, r7, r1
 800e1f0:	0010      	movs	r0, r2
 800e1f2:	4798      	blx	r3
 800e1f4:	0003      	movs	r3, r0
 800e1f6:	60fb      	str	r3, [r7, #12]
=======
 800d2f0:	e0a1      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	0011      	movs	r1, r2
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	f000 fafe 	bl	800d8fa <USBD_CtlError>
            err++;
 800d2fe:	210b      	movs	r1, #11
 800d300:	187b      	adds	r3, r7, r1
 800d302:	781a      	ldrb	r2, [r3, #0]
 800d304:	187b      	adds	r3, r7, r1
 800d306:	3201      	adds	r2, #1
 800d308:	701a      	strb	r2, [r3, #0]
          break;
 800d30a:	e094      	b.n	800d436 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	23ac      	movs	r3, #172	@ 0xac
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	58d3      	ldr	r3, [r2, r3]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00d      	beq.n	800d336 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	23ac      	movs	r3, #172	@ 0xac
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	58d3      	ldr	r3, [r2, r3]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	7c12      	ldrb	r2, [r2, #16]
 800d328:	2108      	movs	r1, #8
 800d32a:	1879      	adds	r1, r7, r1
 800d32c:	0010      	movs	r0, r2
 800d32e:	4798      	blx	r3
 800d330:	0003      	movs	r3, r0
 800d332:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e1f8:	e07f      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	0011      	movs	r1, r2
 800e200:	0018      	movs	r0, r3
 800e202:	f000 fadc 	bl	800e7be <USBD_CtlError>
            err++;
 800e206:	210b      	movs	r1, #11
 800e208:	187b      	adds	r3, r7, r1
 800e20a:	781a      	ldrb	r2, [r3, #0]
 800e20c:	187b      	adds	r3, r7, r1
 800e20e:	3201      	adds	r2, #1
 800e210:	701a      	strb	r2, [r3, #0]
          break;
 800e212:	e072      	b.n	800e2fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	23ac      	movs	r3, #172	@ 0xac
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	58d3      	ldr	r3, [r2, r3]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00d      	beq.n	800e23e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	23ac      	movs	r3, #172	@ 0xac
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	58d3      	ldr	r3, [r2, r3]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	7c12      	ldrb	r2, [r2, #16]
 800e230:	2108      	movs	r1, #8
 800e232:	1879      	adds	r1, r7, r1
 800e234:	0010      	movs	r0, r2
 800e236:	4798      	blx	r3
 800e238:	0003      	movs	r3, r0
 800e23a:	60fb      	str	r3, [r7, #12]
=======
 800d334:	e07f      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	0011      	movs	r1, r2
 800d33c:	0018      	movs	r0, r3
 800d33e:	f000 fadc 	bl	800d8fa <USBD_CtlError>
            err++;
 800d342:	210b      	movs	r1, #11
 800d344:	187b      	adds	r3, r7, r1
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	187b      	adds	r3, r7, r1
 800d34a:	3201      	adds	r2, #1
 800d34c:	701a      	strb	r2, [r3, #0]
          break;
 800d34e:	e072      	b.n	800d436 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	23ac      	movs	r3, #172	@ 0xac
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	58d3      	ldr	r3, [r2, r3]
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00d      	beq.n	800d37a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	23ac      	movs	r3, #172	@ 0xac
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	58d3      	ldr	r3, [r2, r3]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7c12      	ldrb	r2, [r2, #16]
 800d36c:	2108      	movs	r1, #8
 800d36e:	1879      	adds	r1, r7, r1
 800d370:	0010      	movs	r0, r2
 800d372:	4798      	blx	r3
 800d374:	0003      	movs	r3, r0
 800d376:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e23c:	e05d      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e23e:	683a      	ldr	r2, [r7, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	0011      	movs	r1, r2
 800e244:	0018      	movs	r0, r3
 800e246:	f000 faba 	bl	800e7be <USBD_CtlError>
            err++;
 800e24a:	210b      	movs	r1, #11
 800e24c:	187b      	adds	r3, r7, r1
 800e24e:	781a      	ldrb	r2, [r3, #0]
 800e250:	187b      	adds	r3, r7, r1
 800e252:	3201      	adds	r2, #1
 800e254:	701a      	strb	r2, [r3, #0]
          break;
 800e256:	e050      	b.n	800e2fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	23ac      	movs	r3, #172	@ 0xac
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	58d3      	ldr	r3, [r2, r3]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00d      	beq.n	800e282 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	23ac      	movs	r3, #172	@ 0xac
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	58d3      	ldr	r3, [r2, r3]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	7c12      	ldrb	r2, [r2, #16]
 800e274:	2108      	movs	r1, #8
 800e276:	1879      	adds	r1, r7, r1
 800e278:	0010      	movs	r0, r2
 800e27a:	4798      	blx	r3
 800e27c:	0003      	movs	r3, r0
 800e27e:	60fb      	str	r3, [r7, #12]
=======
 800d378:	e05d      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	0011      	movs	r1, r2
 800d380:	0018      	movs	r0, r3
 800d382:	f000 faba 	bl	800d8fa <USBD_CtlError>
            err++;
 800d386:	210b      	movs	r1, #11
 800d388:	187b      	adds	r3, r7, r1
 800d38a:	781a      	ldrb	r2, [r3, #0]
 800d38c:	187b      	adds	r3, r7, r1
 800d38e:	3201      	adds	r2, #1
 800d390:	701a      	strb	r2, [r3, #0]
          break;
 800d392:	e050      	b.n	800d436 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	23ac      	movs	r3, #172	@ 0xac
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	58d3      	ldr	r3, [r2, r3]
 800d39c:	695b      	ldr	r3, [r3, #20]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00d      	beq.n	800d3be <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	23ac      	movs	r3, #172	@ 0xac
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	58d3      	ldr	r3, [r2, r3]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	7c12      	ldrb	r2, [r2, #16]
 800d3b0:	2108      	movs	r1, #8
 800d3b2:	1879      	adds	r1, r7, r1
 800d3b4:	0010      	movs	r0, r2
 800d3b6:	4798      	blx	r3
 800d3b8:	0003      	movs	r3, r0
 800d3ba:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e280:	e03b      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	0011      	movs	r1, r2
 800e288:	0018      	movs	r0, r3
 800e28a:	f000 fa98 	bl	800e7be <USBD_CtlError>
            err++;
 800e28e:	210b      	movs	r1, #11
 800e290:	187b      	adds	r3, r7, r1
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	187b      	adds	r3, r7, r1
 800e296:	3201      	adds	r2, #1
 800e298:	701a      	strb	r2, [r3, #0]
          break;
 800e29a:	e02e      	b.n	800e2fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	23ac      	movs	r3, #172	@ 0xac
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	58d3      	ldr	r3, [r2, r3]
 800e2a4:	699b      	ldr	r3, [r3, #24]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00d      	beq.n	800e2c6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	23ac      	movs	r3, #172	@ 0xac
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	58d3      	ldr	r3, [r2, r3]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	7c12      	ldrb	r2, [r2, #16]
 800e2b8:	2108      	movs	r1, #8
 800e2ba:	1879      	adds	r1, r7, r1
 800e2bc:	0010      	movs	r0, r2
 800e2be:	4798      	blx	r3
 800e2c0:	0003      	movs	r3, r0
 800e2c2:	60fb      	str	r3, [r7, #12]
=======
 800d3bc:	e03b      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	0011      	movs	r1, r2
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f000 fa98 	bl	800d8fa <USBD_CtlError>
            err++;
 800d3ca:	210b      	movs	r1, #11
 800d3cc:	187b      	adds	r3, r7, r1
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	187b      	adds	r3, r7, r1
 800d3d2:	3201      	adds	r2, #1
 800d3d4:	701a      	strb	r2, [r3, #0]
          break;
 800d3d6:	e02e      	b.n	800d436 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	23ac      	movs	r3, #172	@ 0xac
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	58d3      	ldr	r3, [r2, r3]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00d      	beq.n	800d402 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	23ac      	movs	r3, #172	@ 0xac
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	58d3      	ldr	r3, [r2, r3]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	7c12      	ldrb	r2, [r2, #16]
 800d3f4:	2108      	movs	r1, #8
 800d3f6:	1879      	adds	r1, r7, r1
 800d3f8:	0010      	movs	r0, r2
 800d3fa:	4798      	blx	r3
 800d3fc:	0003      	movs	r3, r0
 800d3fe:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e2c4:	e019      	b.n	800e2fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	0011      	movs	r1, r2
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	f000 fa76 	bl	800e7be <USBD_CtlError>
            err++;
 800e2d2:	210b      	movs	r1, #11
 800e2d4:	187b      	adds	r3, r7, r1
 800e2d6:	781a      	ldrb	r2, [r3, #0]
 800e2d8:	187b      	adds	r3, r7, r1
 800e2da:	3201      	adds	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
          break;
 800e2de:	e00c      	b.n	800e2fa <USBD_GetDescriptor+0x262>
=======
 800d400:	e019      	b.n	800d436 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	0011      	movs	r1, r2
 800d408:	0018      	movs	r0, r3
 800d40a:	f000 fa76 	bl	800d8fa <USBD_CtlError>
            err++;
 800d40e:	210b      	movs	r1, #11
 800d410:	187b      	adds	r3, r7, r1
 800d412:	781a      	ldrb	r2, [r3, #0]
 800d414:	187b      	adds	r3, r7, r1
 800d416:	3201      	adds	r2, #1
 800d418:	701a      	strb	r2, [r3, #0]
          break;
 800d41a:	e00c      	b.n	800d436 <USBD_GetDescriptor+0x262>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	0011      	movs	r1, r2
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	f000 fa69 	bl	800e7be <USBD_CtlError>
          err++;
 800e2ec:	210b      	movs	r1, #11
 800e2ee:	187b      	adds	r3, r7, r1
 800e2f0:	781a      	ldrb	r2, [r3, #0]
 800e2f2:	187b      	adds	r3, r7, r1
 800e2f4:	3201      	adds	r2, #1
 800e2f6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800e2f8:	e04b      	b.n	800e392 <USBD_GetDescriptor+0x2fa>
 800e2fa:	e04a      	b.n	800e392 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	7c1b      	ldrb	r3, [r3, #16]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10b      	bne.n	800e31c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	23ad      	movs	r3, #173	@ 0xad
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	58d3      	ldr	r3, [r2, r3]
 800e30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e30e:	2208      	movs	r2, #8
 800e310:	18ba      	adds	r2, r7, r2
 800e312:	0010      	movs	r0, r2
 800e314:	4798      	blx	r3
 800e316:	0003      	movs	r3, r0
 800e318:	60fb      	str	r3, [r7, #12]
=======
 800d41c:	683a      	ldr	r2, [r7, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	0011      	movs	r1, r2
 800d422:	0018      	movs	r0, r3
 800d424:	f000 fa69 	bl	800d8fa <USBD_CtlError>
          err++;
 800d428:	210b      	movs	r1, #11
 800d42a:	187b      	adds	r3, r7, r1
 800d42c:	781a      	ldrb	r2, [r3, #0]
 800d42e:	187b      	adds	r3, r7, r1
 800d430:	3201      	adds	r2, #1
 800d432:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800d434:	e04b      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>
 800d436:	e04a      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7c1b      	ldrb	r3, [r3, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	23ad      	movs	r3, #173	@ 0xad
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	58d3      	ldr	r3, [r2, r3]
 800d448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d44a:	2208      	movs	r2, #8
 800d44c:	18ba      	adds	r2, r7, r2
 800d44e:	0010      	movs	r0, r2
 800d450:	4798      	blx	r3
 800d452:	0003      	movs	r3, r0
 800d454:	60fb      	str	r3, [r7, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800e31a:	e03a      	b.n	800e392 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	0011      	movs	r1, r2
 800e322:	0018      	movs	r0, r3
 800e324:	f000 fa4b 	bl	800e7be <USBD_CtlError>
        err++;
 800e328:	210b      	movs	r1, #11
 800e32a:	187b      	adds	r3, r7, r1
 800e32c:	781a      	ldrb	r2, [r3, #0]
 800e32e:	187b      	adds	r3, r7, r1
 800e330:	3201      	adds	r2, #1
 800e332:	701a      	strb	r2, [r3, #0]
      break;
 800e334:	e02d      	b.n	800e392 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	7c1b      	ldrb	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10f      	bne.n	800e35e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	23ad      	movs	r3, #173	@ 0xad
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	58d3      	ldr	r3, [r2, r3]
 800e346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e348:	2208      	movs	r2, #8
 800e34a:	18ba      	adds	r2, r7, r2
 800e34c:	0010      	movs	r0, r2
 800e34e:	4798      	blx	r3
 800e350:	0003      	movs	r3, r0
 800e352:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	2207      	movs	r2, #7
 800e35a:	701a      	strb	r2, [r3, #0]
=======
 800d456:	e03a      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	0011      	movs	r1, r2
 800d45e:	0018      	movs	r0, r3
 800d460:	f000 fa4b 	bl	800d8fa <USBD_CtlError>
        err++;
 800d464:	210b      	movs	r1, #11
 800d466:	187b      	adds	r3, r7, r1
 800d468:	781a      	ldrb	r2, [r3, #0]
 800d46a:	187b      	adds	r3, r7, r1
 800d46c:	3201      	adds	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
      break;
 800d470:	e02d      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	7c1b      	ldrb	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d10f      	bne.n	800d49a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	23ad      	movs	r3, #173	@ 0xad
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	58d3      	ldr	r3, [r2, r3]
 800d482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d484:	2208      	movs	r2, #8
 800d486:	18ba      	adds	r2, r7, r2
 800d488:	0010      	movs	r0, r2
 800d48a:	4798      	blx	r3
 800d48c:	0003      	movs	r3, r0
 800d48e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
 800d494:	2207      	movs	r2, #7
 800d496:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800e35c:	e019      	b.n	800e392 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e35e:	683a      	ldr	r2, [r7, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	0011      	movs	r1, r2
 800e364:	0018      	movs	r0, r3
 800e366:	f000 fa2a 	bl	800e7be <USBD_CtlError>
        err++;
 800e36a:	210b      	movs	r1, #11
 800e36c:	187b      	adds	r3, r7, r1
 800e36e:	781a      	ldrb	r2, [r3, #0]
 800e370:	187b      	adds	r3, r7, r1
 800e372:	3201      	adds	r2, #1
 800e374:	701a      	strb	r2, [r3, #0]
      break;
 800e376:	e00c      	b.n	800e392 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	0011      	movs	r1, r2
 800e37e:	0018      	movs	r0, r3
 800e380:	f000 fa1d 	bl	800e7be <USBD_CtlError>
      err++;
 800e384:	210b      	movs	r1, #11
 800e386:	187b      	adds	r3, r7, r1
 800e388:	781a      	ldrb	r2, [r3, #0]
 800e38a:	187b      	adds	r3, r7, r1
 800e38c:	3201      	adds	r2, #1
 800e38e:	701a      	strb	r2, [r3, #0]
      break;
 800e390:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800e392:	230b      	movs	r3, #11
 800e394:	18fb      	adds	r3, r7, r3
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d127      	bne.n	800e3ec <USBD_GetDescriptor+0x354>
=======
 800d498:	e019      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	0011      	movs	r1, r2
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f000 fa2a 	bl	800d8fa <USBD_CtlError>
        err++;
 800d4a6:	210b      	movs	r1, #11
 800d4a8:	187b      	adds	r3, r7, r1
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	187b      	adds	r3, r7, r1
 800d4ae:	3201      	adds	r2, #1
 800d4b0:	701a      	strb	r2, [r3, #0]
      break;
 800d4b2:	e00c      	b.n	800d4ce <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	0011      	movs	r1, r2
 800d4ba:	0018      	movs	r0, r3
 800d4bc:	f000 fa1d 	bl	800d8fa <USBD_CtlError>
      err++;
 800d4c0:	210b      	movs	r1, #11
 800d4c2:	187b      	adds	r3, r7, r1
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	187b      	adds	r3, r7, r1
 800d4c8:	3201      	adds	r2, #1
 800d4ca:	701a      	strb	r2, [r3, #0]
      break;
 800d4cc:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800d4ce:	230b      	movs	r3, #11
 800d4d0:	18fb      	adds	r3, r7, r3
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d127      	bne.n	800d528 <USBD_GetDescriptor+0x354>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
<<<<<<< HEAD
 800e39c:	2108      	movs	r1, #8
 800e39e:	187b      	adds	r3, r7, r1
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d019      	beq.n	800e3da <USBD_GetDescriptor+0x342>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	88db      	ldrh	r3, [r3, #6]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d015      	beq.n	800e3da <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	88da      	ldrh	r2, [r3, #6]
 800e3b2:	187b      	adds	r3, r7, r1
 800e3b4:	881b      	ldrh	r3, [r3, #0]
 800e3b6:	1c18      	adds	r0, r3, #0
 800e3b8:	1c11      	adds	r1, r2, #0
 800e3ba:	b28a      	uxth	r2, r1
 800e3bc:	b283      	uxth	r3, r0
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d900      	bls.n	800e3c4 <USBD_GetDescriptor+0x32c>
 800e3c2:	1c01      	adds	r1, r0, #0
 800e3c4:	b28a      	uxth	r2, r1
 800e3c6:	2108      	movs	r1, #8
 800e3c8:	187b      	adds	r3, r7, r1
 800e3ca:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3cc:	187b      	adds	r3, r7, r1
 800e3ce:	881a      	ldrh	r2, [r3, #0]
 800e3d0:	68f9      	ldr	r1, [r7, #12]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	f000 fa70 	bl	800e8ba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	88db      	ldrh	r3, [r3, #6]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d105      	bne.n	800e3ee <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f000 fad2 	bl	800e98e <USBD_CtlSendStatus>
 800e3ea:	e000      	b.n	800e3ee <USBD_GetDescriptor+0x356>
    return;
 800e3ec:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	b004      	add	sp, #16
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	080168a0 	.word	0x080168a0
 800e3f8:	080168c0 	.word	0x080168c0

0800e3fc <USBD_SetAddress>:
=======
 800d4d8:	2108      	movs	r1, #8
 800d4da:	187b      	adds	r3, r7, r1
 800d4dc:	881b      	ldrh	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d019      	beq.n	800d516 <USBD_GetDescriptor+0x342>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	88db      	ldrh	r3, [r3, #6]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d015      	beq.n	800d516 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	88da      	ldrh	r2, [r3, #6]
 800d4ee:	187b      	adds	r3, r7, r1
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	1c18      	adds	r0, r3, #0
 800d4f4:	1c11      	adds	r1, r2, #0
 800d4f6:	b28a      	uxth	r2, r1
 800d4f8:	b283      	uxth	r3, r0
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d900      	bls.n	800d500 <USBD_GetDescriptor+0x32c>
 800d4fe:	1c01      	adds	r1, r0, #0
 800d500:	b28a      	uxth	r2, r1
 800d502:	2108      	movs	r1, #8
 800d504:	187b      	adds	r3, r7, r1
 800d506:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d508:	187b      	adds	r3, r7, r1
 800d50a:	881a      	ldrh	r2, [r3, #0]
 800d50c:	68f9      	ldr	r1, [r7, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	0018      	movs	r0, r3
 800d512:	f000 fa70 	bl	800d9f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	88db      	ldrh	r3, [r3, #6]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	0018      	movs	r0, r3
 800d522:	f000 fad2 	bl	800daca <USBD_CtlSendStatus>
 800d526:	e000      	b.n	800d52a <USBD_GetDescriptor+0x356>
    return;
 800d528:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d52a:	46bd      	mov	sp, r7
 800d52c:	b004      	add	sp, #16
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	080152bc 	.word	0x080152bc
 800d534:	080152dc 	.word	0x080152dc

0800d538 <USBD_SetAddress>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e3fc:	b590      	push	{r4, r7, lr}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	889b      	ldrh	r3, [r3, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d13d      	bne.n	800e48a <USBD_SetAddress+0x8e>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	88db      	ldrh	r3, [r3, #6]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d139      	bne.n	800e48a <USBD_SetAddress+0x8e>
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	885b      	ldrh	r3, [r3, #2]
 800e41a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e41c:	d835      	bhi.n	800e48a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	885b      	ldrh	r3, [r3, #2]
 800e422:	b2da      	uxtb	r2, r3
 800e424:	230f      	movs	r3, #15
 800e426:	18fb      	adds	r3, r7, r3
 800e428:	217f      	movs	r1, #127	@ 0x7f
 800e42a:	400a      	ands	r2, r1
 800e42c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	23a7      	movs	r3, #167	@ 0xa7
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	5cd3      	ldrb	r3, [r2, r3]
 800e436:	2b03      	cmp	r3, #3
 800e438:	d106      	bne.n	800e448 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800e43a:	683a      	ldr	r2, [r7, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	0011      	movs	r1, r2
 800e440:	0018      	movs	r0, r3
 800e442:	f000 f9bc 	bl	800e7be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e446:	e027      	b.n	800e498 <USBD_SetAddress+0x9c>
=======
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	889b      	ldrh	r3, [r3, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d13d      	bne.n	800d5c6 <USBD_SetAddress+0x8e>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	88db      	ldrh	r3, [r3, #6]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d139      	bne.n	800d5c6 <USBD_SetAddress+0x8e>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	885b      	ldrh	r3, [r3, #2]
 800d556:	2b7f      	cmp	r3, #127	@ 0x7f
 800d558:	d835      	bhi.n	800d5c6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	885b      	ldrh	r3, [r3, #2]
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	230f      	movs	r3, #15
 800d562:	18fb      	adds	r3, r7, r3
 800d564:	217f      	movs	r1, #127	@ 0x7f
 800d566:	400a      	ands	r2, r1
 800d568:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	23a7      	movs	r3, #167	@ 0xa7
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	5cd3      	ldrb	r3, [r2, r3]
 800d572:	2b03      	cmp	r3, #3
 800d574:	d106      	bne.n	800d584 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	0011      	movs	r1, r2
 800d57c:	0018      	movs	r0, r3
 800d57e:	f000 f9bc 	bl	800d8fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d582:	e027      	b.n	800d5d4 <USBD_SetAddress+0x9c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	240f      	movs	r4, #15
 800e44c:	193a      	adds	r2, r7, r4
 800e44e:	4914      	ldr	r1, [pc, #80]	@ (800e4a0 <USBD_SetAddress+0xa4>)
 800e450:	7812      	ldrb	r2, [r2, #0]
 800e452:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e454:	193b      	adds	r3, r7, r4
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	0011      	movs	r1, r2
 800e45c:	0018      	movs	r0, r3
 800e45e:	f003 fd50 	bl	8011f02 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	0018      	movs	r0, r3
 800e466:	f000 fa92 	bl	800e98e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e46a:	193b      	adds	r3, r7, r4
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d005      	beq.n	800e47e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	23a7      	movs	r3, #167	@ 0xa7
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	2102      	movs	r1, #2
 800e47a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e47c:	e00c      	b.n	800e498 <USBD_SetAddress+0x9c>
=======
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	240f      	movs	r4, #15
 800d588:	193a      	adds	r2, r7, r4
 800d58a:	4914      	ldr	r1, [pc, #80]	@ (800d5dc <USBD_SetAddress+0xa4>)
 800d58c:	7812      	ldrb	r2, [r2, #0]
 800d58e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d590:	193b      	adds	r3, r7, r4
 800d592:	781a      	ldrb	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	0011      	movs	r1, r2
 800d598:	0018      	movs	r0, r3
 800d59a:	f003 fd50 	bl	801103e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f000 fa92 	bl	800daca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5a6:	193b      	adds	r3, r7, r4
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	23a7      	movs	r3, #167	@ 0xa7
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	2102      	movs	r1, #2
 800d5b6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b8:	e00c      	b.n	800d5d4 <USBD_SetAddress+0x9c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	23a7      	movs	r3, #167	@ 0xa7
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	2101      	movs	r1, #1
 800e486:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e488:	e006      	b.n	800e498 <USBD_SetAddress+0x9c>
=======
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	23a7      	movs	r3, #167	@ 0xa7
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5c4:	e006      	b.n	800d5d4 <USBD_SetAddress+0x9c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	0011      	movs	r1, r2
 800e490:	0018      	movs	r0, r3
 800e492:	f000 f994 	bl	800e7be <USBD_CtlError>
  }
}
 800e496:	46c0      	nop			@ (mov r8, r8)
 800e498:	46c0      	nop			@ (mov r8, r8)
 800e49a:	46bd      	mov	sp, r7
 800e49c:	b005      	add	sp, #20
 800e49e:	bd90      	pop	{r4, r7, pc}
 800e4a0:	0000029e 	.word	0x0000029e

0800e4a4 <USBD_SetConfig>:
=======
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	0011      	movs	r1, r2
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	f000 f994 	bl	800d8fa <USBD_CtlError>
  }
}
 800d5d2:	46c0      	nop			@ (mov r8, r8)
 800d5d4:	46c0      	nop			@ (mov r8, r8)
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	b005      	add	sp, #20
 800d5da:	bd90      	pop	{r4, r7, pc}
 800d5dc:	0000029e 	.word	0x0000029e

0800d5e0 <USBD_SetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	885b      	ldrh	r3, [r3, #2]
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	4b4c      	ldr	r3, [pc, #304]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e4b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4b8:	4b4b      	ldr	r3, [pc, #300]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d906      	bls.n	800e4ce <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800e4c0:	683a      	ldr	r2, [r7, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	0011      	movs	r1, r2
 800e4c6:	0018      	movs	r0, r3
 800e4c8:	f000 f979 	bl	800e7be <USBD_CtlError>
 800e4cc:	e088      	b.n	800e5e0 <USBD_SetConfig+0x13c>
=======
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	4b4c      	ldr	r3, [pc, #304]	@ (800d724 <USBD_SetConfig+0x144>)
 800d5f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5f4:	4b4b      	ldr	r3, [pc, #300]	@ (800d724 <USBD_SetConfig+0x144>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d906      	bls.n	800d60a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	0011      	movs	r1, r2
 800d602:	0018      	movs	r0, r3
 800d604:	f000 f979 	bl	800d8fa <USBD_CtlError>
 800d608:	e088      	b.n	800d71c <USBD_SetConfig+0x13c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    switch (pdev->dev_state)
<<<<<<< HEAD
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	23a7      	movs	r3, #167	@ 0xa7
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	5cd3      	ldrb	r3, [r2, r3]
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	d002      	beq.n	800e4e0 <USBD_SetConfig+0x3c>
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d029      	beq.n	800e532 <USBD_SetConfig+0x8e>
 800e4de:	e071      	b.n	800e5c4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e4e0:	4b41      	ldr	r3, [pc, #260]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01f      	beq.n	800e528 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800e4e8:	4b3f      	ldr	r3, [pc, #252]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	001a      	movs	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	23a7      	movs	r3, #167	@ 0xa7
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	2103      	movs	r1, #3
 800e4fa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e4fc:	4b3a      	ldr	r3, [pc, #232]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e4fe:	781a      	ldrb	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	0011      	movs	r1, r2
 800e504:	0018      	movs	r0, r3
 800e506:	f7ff f8c6 	bl	800d696 <USBD_SetClassConfig>
 800e50a:	0003      	movs	r3, r0
 800e50c:	2b02      	cmp	r3, #2
 800e50e:	d106      	bne.n	800e51e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	0011      	movs	r1, r2
 800e516:	0018      	movs	r0, r3
 800e518:	f000 f951 	bl	800e7be <USBD_CtlError>
            return;
 800e51c:	e060      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	0018      	movs	r0, r3
 800e522:	f000 fa34 	bl	800e98e <USBD_CtlSendStatus>
=======
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	23a7      	movs	r3, #167	@ 0xa7
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	5cd3      	ldrb	r3, [r2, r3]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d002      	beq.n	800d61c <USBD_SetConfig+0x3c>
 800d616:	2b03      	cmp	r3, #3
 800d618:	d029      	beq.n	800d66e <USBD_SetConfig+0x8e>
 800d61a:	e071      	b.n	800d700 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d61c:	4b41      	ldr	r3, [pc, #260]	@ (800d724 <USBD_SetConfig+0x144>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01f      	beq.n	800d664 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800d624:	4b3f      	ldr	r3, [pc, #252]	@ (800d724 <USBD_SetConfig+0x144>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	001a      	movs	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	23a7      	movs	r3, #167	@ 0xa7
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	2103      	movs	r1, #3
 800d636:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d638:	4b3a      	ldr	r3, [pc, #232]	@ (800d724 <USBD_SetConfig+0x144>)
 800d63a:	781a      	ldrb	r2, [r3, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	0011      	movs	r1, r2
 800d640:	0018      	movs	r0, r3
 800d642:	f7ff f8c6 	bl	800c7d2 <USBD_SetClassConfig>
 800d646:	0003      	movs	r3, r0
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d106      	bne.n	800d65a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	0011      	movs	r1, r2
 800d652:	0018      	movs	r0, r3
 800d654:	f000 f951 	bl	800d8fa <USBD_CtlError>
            return;
 800d658:	e060      	b.n	800d71c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	0018      	movs	r0, r3
 800d65e:	f000 fa34 	bl	800daca <USBD_CtlSendStatus>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 800e526:	e05b      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	0018      	movs	r0, r3
 800e52c:	f000 fa2f 	bl	800e98e <USBD_CtlSendStatus>
        break;
 800e530:	e056      	b.n	800e5e0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e532:	4b2d      	ldr	r3, [pc, #180]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d115      	bne.n	800e566 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	23a7      	movs	r3, #167	@ 0xa7
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	2102      	movs	r1, #2
 800e542:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800e544:	4b28      	ldr	r3, [pc, #160]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	001a      	movs	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e54e:	4b26      	ldr	r3, [pc, #152]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e550:	781a      	ldrb	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	0011      	movs	r1, r2
 800e556:	0018      	movs	r0, r3
 800e558:	f7ff f8c4 	bl	800d6e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	0018      	movs	r0, r3
 800e560:	f000 fa15 	bl	800e98e <USBD_CtlSendStatus>
=======
 800d662:	e05b      	b.n	800d71c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	0018      	movs	r0, r3
 800d668:	f000 fa2f 	bl	800daca <USBD_CtlSendStatus>
        break;
 800d66c:	e056      	b.n	800d71c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d66e:	4b2d      	ldr	r3, [pc, #180]	@ (800d724 <USBD_SetConfig+0x144>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d115      	bne.n	800d6a2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	23a7      	movs	r3, #167	@ 0xa7
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	2102      	movs	r1, #2
 800d67e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800d680:	4b28      	ldr	r3, [pc, #160]	@ (800d724 <USBD_SetConfig+0x144>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	001a      	movs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d68a:	4b26      	ldr	r3, [pc, #152]	@ (800d724 <USBD_SetConfig+0x144>)
 800d68c:	781a      	ldrb	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	0011      	movs	r1, r2
 800d692:	0018      	movs	r0, r3
 800d694:	f7ff f8c4 	bl	800c820 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	0018      	movs	r0, r3
 800d69c:	f000 fa15 	bl	800daca <USBD_CtlSendStatus>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 800e564:	e03c      	b.n	800e5e0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800e566:	4b20      	ldr	r3, [pc, #128]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	001a      	movs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	429a      	cmp	r2, r3
 800e572:	d022      	beq.n	800e5ba <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	0011      	movs	r1, r2
 800e57e:	0018      	movs	r0, r3
 800e580:	f7ff f8b0 	bl	800d6e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e584:	4b18      	ldr	r3, [pc, #96]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	001a      	movs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e58e:	4b16      	ldr	r3, [pc, #88]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e590:	781a      	ldrb	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	0011      	movs	r1, r2
 800e596:	0018      	movs	r0, r3
 800e598:	f7ff f87d 	bl	800d696 <USBD_SetClassConfig>
 800e59c:	0003      	movs	r3, r0
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d106      	bne.n	800e5b0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800e5a2:	683a      	ldr	r2, [r7, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	0011      	movs	r1, r2
 800e5a8:	0018      	movs	r0, r3
 800e5aa:	f000 f908 	bl	800e7be <USBD_CtlError>
            return;
 800e5ae:	e017      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	f000 f9eb 	bl	800e98e <USBD_CtlSendStatus>
        break;
 800e5b8:	e012      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	0018      	movs	r0, r3
 800e5be:	f000 f9e6 	bl	800e98e <USBD_CtlSendStatus>
        break;
 800e5c2:	e00d      	b.n	800e5e0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	0011      	movs	r1, r2
 800e5ca:	0018      	movs	r0, r3
 800e5cc:	f000 f8f7 	bl	800e7be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e5d0:	4b05      	ldr	r3, [pc, #20]	@ (800e5e8 <USBD_SetConfig+0x144>)
 800e5d2:	781a      	ldrb	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	0011      	movs	r1, r2
 800e5d8:	0018      	movs	r0, r3
 800e5da:	f7ff f883 	bl	800d6e4 <USBD_ClrClassConfig>
        break;
 800e5de:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	b002      	add	sp, #8
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	46c0      	nop			@ (mov r8, r8)
 800e5e8:	20000bcc 	.word	0x20000bcc

0800e5ec <USBD_GetConfig>:
=======
 800d6a0:	e03c      	b.n	800d71c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800d6a2:	4b20      	ldr	r3, [pc, #128]	@ (800d724 <USBD_SetConfig+0x144>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	001a      	movs	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d022      	beq.n	800d6f6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	0011      	movs	r1, r2
 800d6ba:	0018      	movs	r0, r3
 800d6bc:	f7ff f8b0 	bl	800c820 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d6c0:	4b18      	ldr	r3, [pc, #96]	@ (800d724 <USBD_SetConfig+0x144>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	001a      	movs	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d6ca:	4b16      	ldr	r3, [pc, #88]	@ (800d724 <USBD_SetConfig+0x144>)
 800d6cc:	781a      	ldrb	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	0011      	movs	r1, r2
 800d6d2:	0018      	movs	r0, r3
 800d6d4:	f7ff f87d 	bl	800c7d2 <USBD_SetClassConfig>
 800d6d8:	0003      	movs	r3, r0
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d106      	bne.n	800d6ec <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	0011      	movs	r1, r2
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	f000 f908 	bl	800d8fa <USBD_CtlError>
            return;
 800d6ea:	e017      	b.n	800d71c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	f000 f9eb 	bl	800daca <USBD_CtlSendStatus>
        break;
 800d6f4:	e012      	b.n	800d71c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	0018      	movs	r0, r3
 800d6fa:	f000 f9e6 	bl	800daca <USBD_CtlSendStatus>
        break;
 800d6fe:	e00d      	b.n	800d71c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	0011      	movs	r1, r2
 800d706:	0018      	movs	r0, r3
 800d708:	f000 f8f7 	bl	800d8fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d70c:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <USBD_SetConfig+0x144>)
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	0011      	movs	r1, r2
 800d714:	0018      	movs	r0, r3
 800d716:	f7ff f883 	bl	800c820 <USBD_ClrClassConfig>
        break;
 800d71a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d71c:	46bd      	mov	sp, r7
 800d71e:	b002      	add	sp, #8
 800d720:	bd80      	pop	{r7, pc}
 800d722:	46c0      	nop			@ (mov r8, r8)
 800d724:	20000ac4 	.word	0x20000ac4

0800d728 <USBD_GetConfig>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	88db      	ldrh	r3, [r3, #6]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d006      	beq.n	800e60c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	0011      	movs	r1, r2
 800e604:	0018      	movs	r0, r3
 800e606:	f000 f8da 	bl	800e7be <USBD_CtlError>
=======
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	88db      	ldrh	r3, [r3, #6]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d006      	beq.n	800d748 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	0011      	movs	r1, r2
 800d740:	0018      	movs	r0, r3
 800d742:	f000 f8da 	bl	800d8fa <USBD_CtlError>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 800e60a:	e026      	b.n	800e65a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	23a7      	movs	r3, #167	@ 0xa7
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	5cd3      	ldrb	r3, [r2, r3]
 800e614:	2b02      	cmp	r3, #2
 800e616:	dc02      	bgt.n	800e61e <USBD_GetConfig+0x32>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dc03      	bgt.n	800e624 <USBD_GetConfig+0x38>
 800e61c:	e016      	b.n	800e64c <USBD_GetConfig+0x60>
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d00c      	beq.n	800e63c <USBD_GetConfig+0x50>
 800e622:	e013      	b.n	800e64c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3308      	adds	r3, #8
 800e62e:	0019      	movs	r1, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	0018      	movs	r0, r3
 800e636:	f000 f940 	bl	800e8ba <USBD_CtlSendData>
        break;
 800e63a:	e00e      	b.n	800e65a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	1d19      	adds	r1, r3, #4
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	0018      	movs	r0, r3
 800e646:	f000 f938 	bl	800e8ba <USBD_CtlSendData>
        break;
 800e64a:	e006      	b.n	800e65a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	0011      	movs	r1, r2
 800e652:	0018      	movs	r0, r3
 800e654:	f000 f8b3 	bl	800e7be <USBD_CtlError>
        break;
 800e658:	46c0      	nop			@ (mov r8, r8)
}
 800e65a:	46c0      	nop			@ (mov r8, r8)
 800e65c:	46bd      	mov	sp, r7
 800e65e:	b002      	add	sp, #8
 800e660:	bd80      	pop	{r7, pc}

0800e662 <USBD_GetStatus>:
=======
 800d746:	e026      	b.n	800d796 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	23a7      	movs	r3, #167	@ 0xa7
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	5cd3      	ldrb	r3, [r2, r3]
 800d750:	2b02      	cmp	r3, #2
 800d752:	dc02      	bgt.n	800d75a <USBD_GetConfig+0x32>
 800d754:	2b00      	cmp	r3, #0
 800d756:	dc03      	bgt.n	800d760 <USBD_GetConfig+0x38>
 800d758:	e016      	b.n	800d788 <USBD_GetConfig+0x60>
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d00c      	beq.n	800d778 <USBD_GetConfig+0x50>
 800d75e:	e013      	b.n	800d788 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	3308      	adds	r3, #8
 800d76a:	0019      	movs	r1, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	0018      	movs	r0, r3
 800d772:	f000 f940 	bl	800d9f6 <USBD_CtlSendData>
        break;
 800d776:	e00e      	b.n	800d796 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	1d19      	adds	r1, r3, #4
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	0018      	movs	r0, r3
 800d782:	f000 f938 	bl	800d9f6 <USBD_CtlSendData>
        break;
 800d786:	e006      	b.n	800d796 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	0011      	movs	r1, r2
 800d78e:	0018      	movs	r0, r3
 800d790:	f000 f8b3 	bl	800d8fa <USBD_CtlError>
        break;
 800d794:	46c0      	nop			@ (mov r8, r8)
}
 800d796:	46c0      	nop			@ (mov r8, r8)
 800d798:	46bd      	mov	sp, r7
 800d79a:	b002      	add	sp, #8
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <USBD_GetStatus>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	23a7      	movs	r3, #167	@ 0xa7
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	5cd3      	ldrb	r3, [r2, r3]
 800e674:	3b01      	subs	r3, #1
 800e676:	2b02      	cmp	r3, #2
 800e678:	d822      	bhi.n	800e6c0 <USBD_GetStatus+0x5e>
=======
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	23a7      	movs	r3, #167	@ 0xa7
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	5cd3      	ldrb	r3, [r2, r3]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d822      	bhi.n	800d7fc <USBD_GetStatus+0x5e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	88db      	ldrh	r3, [r3, #6]
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d006      	beq.n	800e690 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	0011      	movs	r1, r2
 800e688:	0018      	movs	r0, r3
 800e68a:	f000 f898 	bl	800e7be <USBD_CtlError>
        break;
 800e68e:	e01e      	b.n	800e6ce <USBD_GetStatus+0x6c>
=======
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	88db      	ldrh	r3, [r3, #6]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d006      	beq.n	800d7cc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	0011      	movs	r1, r2
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	f000 f898 	bl	800d8fa <USBD_CtlError>
        break;
 800d7ca:	e01e      	b.n	800d80a <USBD_GetStatus+0x6c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2201      	movs	r2, #1
 800e694:	60da      	str	r2, [r3, #12]
=======
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
<<<<<<< HEAD
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	23a9      	movs	r3, #169	@ 0xa9
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	58d3      	ldr	r3, [r2, r3]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d005      	beq.n	800e6ae <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	431a      	orrs	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	330c      	adds	r3, #12
 800e6b2:	0019      	movs	r1, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	0018      	movs	r0, r3
 800e6ba:	f000 f8fe 	bl	800e8ba <USBD_CtlSendData>
      break;
 800e6be:	e006      	b.n	800e6ce <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	0011      	movs	r1, r2
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	f000 f879 	bl	800e7be <USBD_CtlError>
      break;
 800e6cc:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e6ce:	46c0      	nop			@ (mov r8, r8)
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	b002      	add	sp, #8
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_SetFeature>:
=======
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	23a9      	movs	r3, #169	@ 0xa9
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	58d3      	ldr	r3, [r2, r3]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	431a      	orrs	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	0019      	movs	r1, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	0018      	movs	r0, r3
 800d7f6:	f000 f8fe 	bl	800d9f6 <USBD_CtlSendData>
      break;
 800d7fa:	e006      	b.n	800d80a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	0011      	movs	r1, r2
 800d802:	0018      	movs	r0, r3
 800d804:	f000 f879 	bl	800d8fa <USBD_CtlError>
      break;
 800d808:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d80a:	46c0      	nop			@ (mov r8, r8)
 800d80c:	46bd      	mov	sp, r7
 800d80e:	b002      	add	sp, #8
 800d810:	bd80      	pop	{r7, pc}

0800d812 <USBD_SetFeature>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	885b      	ldrh	r3, [r3, #2]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d108      	bne.n	800e6fa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	23a9      	movs	r3, #169	@ 0xa9
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	0018      	movs	r0, r3
 800e6f6:	f000 f94a 	bl	800e98e <USBD_CtlSendStatus>
  }
}
 800e6fa:	46c0      	nop			@ (mov r8, r8)
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	b002      	add	sp, #8
 800e700:	bd80      	pop	{r7, pc}

0800e702 <USBD_ClrFeature>:
=======
 800d812:	b580      	push	{r7, lr}
 800d814:	b082      	sub	sp, #8
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	885b      	ldrh	r3, [r3, #2]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d108      	bne.n	800d836 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	23a9      	movs	r3, #169	@ 0xa9
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	2101      	movs	r1, #1
 800d82c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	0018      	movs	r0, r3
 800d832:	f000 f94a 	bl	800daca <USBD_CtlSendStatus>
  }
}
 800d836:	46c0      	nop			@ (mov r8, r8)
 800d838:	46bd      	mov	sp, r7
 800d83a:	b002      	add	sp, #8
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_ClrFeature>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e702:	b580      	push	{r7, lr}
 800e704:	b082      	sub	sp, #8
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	23a7      	movs	r3, #167	@ 0xa7
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	5cd3      	ldrb	r3, [r2, r3]
 800e714:	3b01      	subs	r3, #1
 800e716:	2b02      	cmp	r3, #2
 800e718:	d80d      	bhi.n	800e736 <USBD_ClrFeature+0x34>
=======
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	23a7      	movs	r3, #167	@ 0xa7
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	5cd3      	ldrb	r3, [r2, r3]
 800d850:	3b01      	subs	r3, #1
 800d852:	2b02      	cmp	r3, #2
 800d854:	d80d      	bhi.n	800d872 <USBD_ClrFeature+0x34>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	885b      	ldrh	r3, [r3, #2]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d110      	bne.n	800e744 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	23a9      	movs	r3, #169	@ 0xa9
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	2100      	movs	r1, #0
 800e72a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	0018      	movs	r0, r3
 800e730:	f000 f92d 	bl	800e98e <USBD_CtlSendStatus>
      }
      break;
 800e734:	e006      	b.n	800e744 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	0011      	movs	r1, r2
 800e73c:	0018      	movs	r0, r3
 800e73e:	f000 f83e 	bl	800e7be <USBD_CtlError>
      break;
 800e742:	e000      	b.n	800e746 <USBD_ClrFeature+0x44>
      break;
 800e744:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	46bd      	mov	sp, r7
 800e74a:	b002      	add	sp, #8
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <USBD_ParseSetupRequest>:
=======
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	885b      	ldrh	r3, [r3, #2]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d110      	bne.n	800d880 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	23a9      	movs	r3, #169	@ 0xa9
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	2100      	movs	r1, #0
 800d866:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	0018      	movs	r0, r3
 800d86c:	f000 f92d 	bl	800daca <USBD_CtlSendStatus>
      }
      break;
 800d870:	e006      	b.n	800d880 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	0011      	movs	r1, r2
 800d878:	0018      	movs	r0, r3
 800d87a:	f000 f83e 	bl	800d8fa <USBD_CtlError>
      break;
 800d87e:	e000      	b.n	800d882 <USBD_ClrFeature+0x44>
      break;
 800d880:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d882:	46c0      	nop			@ (mov r8, r8)
 800d884:	46bd      	mov	sp, r7
 800d886:	b002      	add	sp, #8
 800d888:	bd80      	pop	{r7, pc}

0800d88a <USBD_ParseSetupRequest>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 800e74e:	b580      	push	{r7, lr}
 800e750:	b082      	sub	sp, #8
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781a      	ldrb	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	785a      	ldrb	r2, [r3, #1]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	3302      	adds	r3, #2
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	001a      	movs	r2, r3
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	3303      	adds	r3, #3
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	021b      	lsls	r3, r3, #8
 800e778:	b29b      	uxth	r3, r3
 800e77a:	18d3      	adds	r3, r2, r3
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	3304      	adds	r3, #4
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	001a      	movs	r2, r3
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	3305      	adds	r3, #5
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	b29b      	uxth	r3, r3
 800e794:	18d3      	adds	r3, r2, r3
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	3306      	adds	r3, #6
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	001a      	movs	r2, r3
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	3307      	adds	r3, #7
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	021b      	lsls	r3, r3, #8
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	18d3      	adds	r3, r2, r3
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	80da      	strh	r2, [r3, #6]

}
 800e7b6:	46c0      	nop			@ (mov r8, r8)
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <USBD_CtlError>:
=======
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b082      	sub	sp, #8
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	785a      	ldrb	r2, [r3, #1]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	3302      	adds	r3, #2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	001a      	movs	r2, r3
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	3303      	adds	r3, #3
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	021b      	lsls	r3, r3, #8
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	18d3      	adds	r3, r2, r3
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	001a      	movs	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	3305      	adds	r3, #5
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	18d3      	adds	r3, r2, r3
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	3306      	adds	r3, #6
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	001a      	movs	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	3307      	adds	r3, #7
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	021b      	lsls	r3, r3, #8
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	18d3      	adds	r3, r2, r3
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	80da      	strh	r2, [r3, #6]

}
 800d8f2:	46c0      	nop			@ (mov r8, r8)
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	b002      	add	sp, #8
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBD_CtlError>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2180      	movs	r1, #128	@ 0x80
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	f003 fb12 	bl	8011df6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f003 fb0d 	bl	8011df6 <USBD_LL_StallEP>
}
 800e7dc:	46c0      	nop			@ (mov r8, r8)
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	b002      	add	sp, #8
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_GetString>:
=======
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2180      	movs	r1, #128	@ 0x80
 800d908:	0018      	movs	r0, r3
 800d90a:	f003 fb12 	bl	8010f32 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2100      	movs	r1, #0
 800d912:	0018      	movs	r0, r3
 800d914:	f003 fb0d 	bl	8010f32 <USBD_LL_StallEP>
}
 800d918:	46c0      	nop			@ (mov r8, r8)
 800d91a:	46bd      	mov	sp, r7
 800d91c:	b002      	add	sp, #8
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_GetString>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800e7e4:	b590      	push	{r4, r7, lr}
 800e7e6:	b087      	sub	sp, #28
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7f0:	2417      	movs	r4, #23
 800e7f2:	193b      	adds	r3, r7, r4
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d03c      	beq.n	800e878 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	0018      	movs	r0, r3
 800e802:	f000 f83d 	bl	800e880 <USBD_GetLen>
 800e806:	0003      	movs	r3, r0
 800e808:	3301      	adds	r3, #1
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	18db      	adds	r3, r3, r3
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e814:	193b      	adds	r3, r7, r4
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	193a      	adds	r2, r7, r4
 800e81a:	1c59      	adds	r1, r3, #1
 800e81c:	7011      	strb	r1, [r2, #0]
 800e81e:	001a      	movs	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	189b      	adds	r3, r3, r2
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e82a:	193b      	adds	r3, r7, r4
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	193a      	adds	r2, r7, r4
 800e830:	1c59      	adds	r1, r3, #1
 800e832:	7011      	strb	r1, [r2, #0]
 800e834:	001a      	movs	r2, r3
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	189b      	adds	r3, r3, r2
 800e83a:	2203      	movs	r2, #3
 800e83c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e83e:	e017      	b.n	800e870 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	60fa      	str	r2, [r7, #12]
 800e846:	2417      	movs	r4, #23
 800e848:	193a      	adds	r2, r7, r4
 800e84a:	7812      	ldrb	r2, [r2, #0]
 800e84c:	1939      	adds	r1, r7, r4
 800e84e:	1c50      	adds	r0, r2, #1
 800e850:	7008      	strb	r0, [r1, #0]
 800e852:	0011      	movs	r1, r2
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	1852      	adds	r2, r2, r1
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e85c:	193b      	adds	r3, r7, r4
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	193a      	adds	r2, r7, r4
 800e862:	1c59      	adds	r1, r3, #1
 800e864:	7011      	strb	r1, [r2, #0]
 800e866:	001a      	movs	r2, r3
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	189b      	adds	r3, r3, r2
 800e86c:	2200      	movs	r2, #0
 800e86e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1e3      	bne.n	800e840 <USBD_GetString+0x5c>
    }
  }
}
 800e878:	46c0      	nop			@ (mov r8, r8)
 800e87a:	46bd      	mov	sp, r7
 800e87c:	b007      	add	sp, #28
 800e87e:	bd90      	pop	{r4, r7, pc}

0800e880 <USBD_GetLen>:
=======
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d92c:	2417      	movs	r4, #23
 800d92e:	193b      	adds	r3, r7, r4
 800d930:	2200      	movs	r2, #0
 800d932:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d03c      	beq.n	800d9b4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	0018      	movs	r0, r3
 800d93e:	f000 f83d 	bl	800d9bc <USBD_GetLen>
 800d942:	0003      	movs	r3, r0
 800d944:	3301      	adds	r3, #1
 800d946:	b29b      	uxth	r3, r3
 800d948:	18db      	adds	r3, r3, r3
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d950:	193b      	adds	r3, r7, r4
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	193a      	adds	r2, r7, r4
 800d956:	1c59      	adds	r1, r3, #1
 800d958:	7011      	strb	r1, [r2, #0]
 800d95a:	001a      	movs	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	189b      	adds	r3, r3, r2
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	7812      	ldrb	r2, [r2, #0]
 800d964:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d966:	193b      	adds	r3, r7, r4
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	193a      	adds	r2, r7, r4
 800d96c:	1c59      	adds	r1, r3, #1
 800d96e:	7011      	strb	r1, [r2, #0]
 800d970:	001a      	movs	r2, r3
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	189b      	adds	r3, r3, r2
 800d976:	2203      	movs	r2, #3
 800d978:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d97a:	e017      	b.n	800d9ac <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	60fa      	str	r2, [r7, #12]
 800d982:	2417      	movs	r4, #23
 800d984:	193a      	adds	r2, r7, r4
 800d986:	7812      	ldrb	r2, [r2, #0]
 800d988:	1939      	adds	r1, r7, r4
 800d98a:	1c50      	adds	r0, r2, #1
 800d98c:	7008      	strb	r0, [r1, #0]
 800d98e:	0011      	movs	r1, r2
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	1852      	adds	r2, r2, r1
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d998:	193b      	adds	r3, r7, r4
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	193a      	adds	r2, r7, r4
 800d99e:	1c59      	adds	r1, r3, #1
 800d9a0:	7011      	strb	r1, [r2, #0]
 800d9a2:	001a      	movs	r2, r3
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	189b      	adds	r3, r3, r2
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1e3      	bne.n	800d97c <USBD_GetString+0x5c>
    }
  }
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	b007      	add	sp, #28
 800d9ba:	bd90      	pop	{r4, r7, pc}

0800d9bc <USBD_GetLen>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e888:	230f      	movs	r3, #15
 800e88a:	18fb      	adds	r3, r7, r3
 800e88c:	2200      	movs	r2, #0
 800e88e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800e890:	e008      	b.n	800e8a4 <USBD_GetLen+0x24>
  {
    len++;
 800e892:	210f      	movs	r1, #15
 800e894:	187b      	adds	r3, r7, r1
 800e896:	781a      	ldrb	r2, [r3, #0]
 800e898:	187b      	adds	r3, r7, r1
 800e89a:	3201      	adds	r2, #1
 800e89c:	701a      	strb	r2, [r3, #0]
    buf++;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1f2      	bne.n	800e892 <USBD_GetLen+0x12>
  }

  return len;
 800e8ac:	230f      	movs	r3, #15
 800e8ae:	18fb      	adds	r3, r7, r3
 800e8b0:	781b      	ldrb	r3, [r3, #0]
}
 800e8b2:	0018      	movs	r0, r3
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	b004      	add	sp, #16
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <USBD_CtlSendData>:
=======
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9c4:	230f      	movs	r3, #15
 800d9c6:	18fb      	adds	r3, r7, r3
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d9cc:	e008      	b.n	800d9e0 <USBD_GetLen+0x24>
  {
    len++;
 800d9ce:	210f      	movs	r1, #15
 800d9d0:	187b      	adds	r3, r7, r1
 800d9d2:	781a      	ldrb	r2, [r3, #0]
 800d9d4:	187b      	adds	r3, r7, r1
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]
    buf++;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1f2      	bne.n	800d9ce <USBD_GetLen+0x12>
  }

  return len;
 800d9e8:	230f      	movs	r3, #15
 800d9ea:	18fb      	adds	r3, r7, r3
 800d9ec:	781b      	ldrb	r3, [r3, #0]
}
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	b004      	add	sp, #16
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBD_CtlSendData>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b084      	sub	sp, #16
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	1dbb      	adds	r3, r7, #6
 800e8c6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	23a5      	movs	r3, #165	@ 0xa5
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	2102      	movs	r1, #2
 800e8d0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e8d2:	1dbb      	adds	r3, r7, #6
 800e8d4:	881a      	ldrh	r2, [r3, #0]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e8da:	1dbb      	adds	r3, r7, #6
 800e8dc:	881a      	ldrh	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8e2:	1dbb      	adds	r3, r7, #6
 800e8e4:	881b      	ldrh	r3, [r3, #0]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	f003 fb34 	bl	8011f58 <USBD_LL_Transmit>

  return USBD_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	0018      	movs	r0, r3
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	b004      	add	sp, #16
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <USBD_CtlContinueSendData>:
=======
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	1dbb      	adds	r3, r7, #6
 800da02:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	23a5      	movs	r3, #165	@ 0xa5
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	2102      	movs	r1, #2
 800da0c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800da0e:	1dbb      	adds	r3, r7, #6
 800da10:	881a      	ldrh	r2, [r3, #0]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800da16:	1dbb      	adds	r3, r7, #6
 800da18:	881a      	ldrh	r2, [r3, #0]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da1e:	1dbb      	adds	r3, r7, #6
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	2100      	movs	r1, #0
 800da28:	f003 fb34 	bl	8011094 <USBD_LL_Transmit>

  return USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	0018      	movs	r0, r3
 800da30:	46bd      	mov	sp, r7
 800da32:	b004      	add	sp, #16
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_CtlContinueSendData>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	60f8      	str	r0, [r7, #12]
 800e902:	60b9      	str	r1, [r7, #8]
 800e904:	1dbb      	adds	r3, r7, #6
 800e906:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e908:	1dbb      	adds	r3, r7, #6
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	2100      	movs	r1, #0
 800e912:	f003 fb21 	bl	8011f58 <USBD_LL_Transmit>

  return USBD_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	0018      	movs	r0, r3
 800e91a:	46bd      	mov	sp, r7
 800e91c:	b004      	add	sp, #16
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USBD_CtlPrepareRx>:
=======
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	1dbb      	adds	r3, r7, #6
 800da42:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da44:	1dbb      	adds	r3, r7, #6
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	2100      	movs	r1, #0
 800da4e:	f003 fb21 	bl	8011094 <USBD_LL_Transmit>

  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	0018      	movs	r0, r3
 800da56:	46bd      	mov	sp, r7
 800da58:	b004      	add	sp, #16
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_CtlPrepareRx>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	1dbb      	adds	r3, r7, #6
 800e92c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	23a5      	movs	r3, #165	@ 0xa5
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	2103      	movs	r1, #3
 800e936:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e938:	1dbb      	adds	r3, r7, #6
 800e93a:	8819      	ldrh	r1, [r3, #0]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	23ae      	movs	r3, #174	@ 0xae
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800e944:	1dbb      	adds	r3, r7, #6
 800e946:	8819      	ldrh	r1, [r3, #0]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	23b0      	movs	r3, #176	@ 0xb0
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e950:	1dbb      	adds	r3, r7, #6
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	2100      	movs	r1, #0
 800e95a:	f003 fb34 	bl	8011fc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	0018      	movs	r0, r3
 800e962:	46bd      	mov	sp, r7
 800e964:	b004      	add	sp, #16
 800e966:	bd80      	pop	{r7, pc}

0800e968 <USBD_CtlContinueRx>:
=======
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	1dbb      	adds	r3, r7, #6
 800da68:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	23a5      	movs	r3, #165	@ 0xa5
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	2103      	movs	r1, #3
 800da72:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800da74:	1dbb      	adds	r3, r7, #6
 800da76:	8819      	ldrh	r1, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	23ae      	movs	r3, #174	@ 0xae
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800da80:	1dbb      	adds	r3, r7, #6
 800da82:	8819      	ldrh	r1, [r3, #0]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	23b0      	movs	r3, #176	@ 0xb0
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da8c:	1dbb      	adds	r3, r7, #6
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	2100      	movs	r1, #0
 800da96:	f003 fb34 	bl	8011102 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	0018      	movs	r0, r3
 800da9e:	46bd      	mov	sp, r7
 800daa0:	b004      	add	sp, #16
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_CtlContinueRx>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	1dbb      	adds	r3, r7, #6
 800e974:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e976:	1dbb      	adds	r3, r7, #6
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	2100      	movs	r1, #0
 800e980:	f003 fb21 	bl	8011fc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	0018      	movs	r0, r3
 800e988:	46bd      	mov	sp, r7
 800e98a:	b004      	add	sp, #16
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <USBD_CtlSendStatus>:
=======
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	1dbb      	adds	r3, r7, #6
 800dab0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dab2:	1dbb      	adds	r3, r7, #6
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	2100      	movs	r1, #0
 800dabc:	f003 fb21 	bl	8011102 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	0018      	movs	r0, r3
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b004      	add	sp, #16
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USBD_CtlSendStatus>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	23a5      	movs	r3, #165	@ 0xa5
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	2104      	movs	r1, #4
 800e99e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	f003 fad6 	bl	8011f58 <USBD_LL_Transmit>

  return USBD_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	0018      	movs	r0, r3
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	b002      	add	sp, #8
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <USBD_CtlReceiveStatus>:
=======
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	23a5      	movs	r3, #165	@ 0xa5
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	2104      	movs	r1, #4
 800dada:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	2300      	movs	r3, #0
 800dae0:	2200      	movs	r2, #0
 800dae2:	2100      	movs	r1, #0
 800dae4:	f003 fad6 	bl	8011094 <USBD_LL_Transmit>

  return USBD_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	0018      	movs	r0, r3
 800daec:	46bd      	mov	sp, r7
 800daee:	b002      	add	sp, #8
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_CtlReceiveStatus>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	23a5      	movs	r3, #165	@ 0xa5
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	2105      	movs	r1, #5
 800e9c6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	f003 faf9 	bl	8011fc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	0018      	movs	r0, r3
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	b002      	add	sp, #8
 800e9dc:	bd80      	pop	{r7, pc}
	...

0800e9e0 <setSPI_Size>:
=======
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	23a5      	movs	r3, #165	@ 0xa5
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	2105      	movs	r1, #5
 800db02:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	2300      	movs	r3, #0
 800db08:	2200      	movs	r2, #0
 800db0a:	2100      	movs	r1, #0
 800db0c:	f003 faf9 	bl	8011102 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	0018      	movs	r0, r3
 800db14:	46bd      	mov	sp, r7
 800db16:	b002      	add	sp, #8
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <setSPI_Size>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size)
{
<<<<<<< HEAD
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	0002      	movs	r2, r0
 800e9e8:	1dfb      	adds	r3, r7, #7
 800e9ea:	701a      	strb	r2, [r3, #0]
  if (config.spi_sz != size)
 800e9ec:	4b14      	ldr	r3, [pc, #80]	@ (800ea40 <setSPI_Size+0x60>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	b25b      	sxtb	r3, r3
 800e9f2:	1dfa      	adds	r2, r7, #7
 800e9f4:	7812      	ldrb	r2, [r2, #0]
 800e9f6:	b252      	sxtb	r2, r2
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d01d      	beq.n	800ea38 <setSPI_Size+0x58>
  {
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800e9fc:	4b11      	ldr	r3, [pc, #68]	@ (800ea44 <setSPI_Size+0x64>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b10      	ldr	r3, [pc, #64]	@ (800ea44 <setSPI_Size+0x64>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2140      	movs	r1, #64	@ 0x40
 800ea08:	438a      	bics	r2, r1
 800ea0a:	601a      	str	r2, [r3, #0]
    config.spi_sz = size;
 800ea0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea40 <setSPI_Size+0x60>)
 800ea0e:	1dfa      	adds	r2, r7, #7
 800ea10:	7812      	ldrb	r2, [r2, #0]
 800ea12:	701a      	strb	r2, [r3, #0]

    if (size == mode_16bit)
 800ea14:	1dfb      	adds	r3, r7, #7
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	b25b      	sxtb	r3, r3
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d104      	bne.n	800ea28 <setSPI_Size+0x48>
    {
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800ea1e:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <setSPI_Size+0x64>)
 800ea20:	22f0      	movs	r2, #240	@ 0xf0
 800ea22:	0112      	lsls	r2, r2, #4
 800ea24:	60da      	str	r2, [r3, #12]
 800ea26:	e003      	b.n	800ea30 <setSPI_Size+0x50>
=======
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	0002      	movs	r2, r0
 800db24:	1dfb      	adds	r3, r7, #7
 800db26:	701a      	strb	r2, [r3, #0]
  if (config.spi_sz != size)
 800db28:	4b14      	ldr	r3, [pc, #80]	@ (800db7c <setSPI_Size+0x60>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	b25b      	sxtb	r3, r3
 800db2e:	1dfa      	adds	r2, r7, #7
 800db30:	7812      	ldrb	r2, [r2, #0]
 800db32:	b252      	sxtb	r2, r2
 800db34:	429a      	cmp	r2, r3
 800db36:	d01d      	beq.n	800db74 <setSPI_Size+0x58>
  {
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800db38:	4b11      	ldr	r3, [pc, #68]	@ (800db80 <setSPI_Size+0x64>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	4b10      	ldr	r3, [pc, #64]	@ (800db80 <setSPI_Size+0x64>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2140      	movs	r1, #64	@ 0x40
 800db44:	438a      	bics	r2, r1
 800db46:	601a      	str	r2, [r3, #0]
    config.spi_sz = size;
 800db48:	4b0c      	ldr	r3, [pc, #48]	@ (800db7c <setSPI_Size+0x60>)
 800db4a:	1dfa      	adds	r2, r7, #7
 800db4c:	7812      	ldrb	r2, [r2, #0]
 800db4e:	701a      	strb	r2, [r3, #0]

    if (size == mode_16bit)
 800db50:	1dfb      	adds	r3, r7, #7
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	b25b      	sxtb	r3, r3
 800db56:	2b01      	cmp	r3, #1
 800db58:	d104      	bne.n	800db64 <setSPI_Size+0x48>
    {
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800db5a:	4b09      	ldr	r3, [pc, #36]	@ (800db80 <setSPI_Size+0x64>)
 800db5c:	22f0      	movs	r2, #240	@ 0xf0
 800db5e:	0112      	lsls	r2, r2, #4
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	e003      	b.n	800db6c <setSPI_Size+0x50>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
<<<<<<< HEAD
 800ea28:	4b06      	ldr	r3, [pc, #24]	@ (800ea44 <setSPI_Size+0x64>)
 800ea2a:	22e0      	movs	r2, #224	@ 0xe0
 800ea2c:	00d2      	lsls	r2, r2, #3
 800ea2e:	60da      	str	r2, [r3, #12]
    }

    HAL_SPI_Init(&LCD_HANDLE); // Re-initialize to apply new data size
 800ea30:	4b04      	ldr	r3, [pc, #16]	@ (800ea44 <setSPI_Size+0x64>)
 800ea32:	0018      	movs	r0, r3
 800ea34:	f7f9 fa08 	bl	8007e48 <HAL_SPI_Init>
  }
}
 800ea38:	46c0      	nop			@ (mov r8, r8)
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	b002      	add	sp, #8
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	2000018c 	.word	0x2000018c
 800ea44:	200005cc 	.word	0x200005cc

0800ea48 <setDMAMemMode>:
=======
 800db64:	4b06      	ldr	r3, [pc, #24]	@ (800db80 <setSPI_Size+0x64>)
 800db66:	22e0      	movs	r2, #224	@ 0xe0
 800db68:	00d2      	lsls	r2, r2, #3
 800db6a:	60da      	str	r2, [r3, #12]
    }

    HAL_SPI_Init(&LCD_HANDLE); // Re-initialize to apply new data size
 800db6c:	4b04      	ldr	r3, [pc, #16]	@ (800db80 <setSPI_Size+0x64>)
 800db6e:	0018      	movs	r0, r3
 800db70:	f7f9 fa06 	bl	8006f80 <HAL_SPI_Init>
  }
}
 800db74:	46c0      	nop			@ (mov r8, r8)
 800db76:	46bd      	mov	sp, r7
 800db78:	b002      	add	sp, #8
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000194 	.word	0x20000194
 800db80:	20000490 	.word	0x20000490

0800db84 <setDMAMemMode>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
<<<<<<< HEAD
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	0002      	movs	r2, r0
 800ea50:	1dfb      	adds	r3, r7, #7
 800ea52:	701a      	strb	r2, [r3, #0]
 800ea54:	1dbb      	adds	r3, r7, #6
 800ea56:	1c0a      	adds	r2, r1, #0
 800ea58:	701a      	strb	r2, [r3, #0]
  setSPI_Size(size);
 800ea5a:	1dbb      	adds	r3, r7, #6
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	b25b      	sxtb	r3, r3
 800ea60:	0018      	movs	r0, r3
 800ea62:	f7ff ffbd 	bl	800e9e0 <setSPI_Size>
  if (config.dma_sz != size || config.dma_mem_inc != memInc)
 800ea66:	4b3f      	ldr	r3, [pc, #252]	@ (800eb64 <setDMAMemMode+0x11c>)
 800ea68:	785b      	ldrb	r3, [r3, #1]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	001a      	movs	r2, r3
 800ea6e:	1dbb      	adds	r3, r7, #6
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d107      	bne.n	800ea86 <setDMAMemMode+0x3e>
 800ea76:	4b3b      	ldr	r3, [pc, #236]	@ (800eb64 <setDMAMemMode+0x11c>)
 800ea78:	789b      	ldrb	r3, [r3, #2]
 800ea7a:	b25b      	sxtb	r3, r3
 800ea7c:	001a      	movs	r2, r3
 800ea7e:	1dfb      	adds	r3, r7, #7
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d06a      	beq.n	800eb5c <setDMAMemMode+0x114>
  {
    config.dma_sz = size;
 800ea86:	1dbb      	adds	r3, r7, #6
 800ea88:	2200      	movs	r2, #0
 800ea8a:	569a      	ldrsb	r2, [r3, r2]
 800ea8c:	4b35      	ldr	r3, [pc, #212]	@ (800eb64 <setDMAMemMode+0x11c>)
 800ea8e:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800ea90:	1dfb      	adds	r3, r7, #7
 800ea92:	2200      	movs	r2, #0
 800ea94:	569a      	ldrsb	r2, [r3, r2]
 800ea96:	4b33      	ldr	r3, [pc, #204]	@ (800eb64 <setDMAMemMode+0x11c>)
 800ea98:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 800ea9a:	4b33      	ldr	r3, [pc, #204]	@ (800eb68 <setDMAMemMode+0x120>)
 800ea9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	4b31      	ldr	r3, [pc, #196]	@ (800eb68 <setDMAMemMode+0x120>)
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	438a      	bics	r2, r1
 800eaac:	601a      	str	r2, [r3, #0]
=======
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	0002      	movs	r2, r0
 800db8c:	1dfb      	adds	r3, r7, #7
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	1dbb      	adds	r3, r7, #6
 800db92:	1c0a      	adds	r2, r1, #0
 800db94:	701a      	strb	r2, [r3, #0]
  setSPI_Size(size);
 800db96:	1dbb      	adds	r3, r7, #6
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	b25b      	sxtb	r3, r3
 800db9c:	0018      	movs	r0, r3
 800db9e:	f7ff ffbd 	bl	800db1c <setSPI_Size>
  if (config.dma_sz != size || config.dma_mem_inc != memInc)
 800dba2:	4b3f      	ldr	r3, [pc, #252]	@ (800dca0 <setDMAMemMode+0x11c>)
 800dba4:	785b      	ldrb	r3, [r3, #1]
 800dba6:	b25b      	sxtb	r3, r3
 800dba8:	001a      	movs	r2, r3
 800dbaa:	1dbb      	adds	r3, r7, #6
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d107      	bne.n	800dbc2 <setDMAMemMode+0x3e>
 800dbb2:	4b3b      	ldr	r3, [pc, #236]	@ (800dca0 <setDMAMemMode+0x11c>)
 800dbb4:	789b      	ldrb	r3, [r3, #2]
 800dbb6:	b25b      	sxtb	r3, r3
 800dbb8:	001a      	movs	r2, r3
 800dbba:	1dfb      	adds	r3, r7, #7
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d06a      	beq.n	800dc98 <setDMAMemMode+0x114>
  {
    config.dma_sz = size;
 800dbc2:	1dbb      	adds	r3, r7, #6
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	569a      	ldrsb	r2, [r3, r2]
 800dbc8:	4b35      	ldr	r3, [pc, #212]	@ (800dca0 <setDMAMemMode+0x11c>)
 800dbca:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800dbcc:	1dfb      	adds	r3, r7, #7
 800dbce:	2200      	movs	r2, #0
 800dbd0:	569a      	ldrsb	r2, [r3, r2]
 800dbd2:	4b33      	ldr	r3, [pc, #204]	@ (800dca0 <setDMAMemMode+0x11c>)
 800dbd4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 800dbd6:	4b33      	ldr	r3, [pc, #204]	@ (800dca4 <setDMAMemMode+0x120>)
 800dbd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b31      	ldr	r3, [pc, #196]	@ (800dca4 <setDMAMemMode+0x120>)
 800dbe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	438a      	bics	r2, r1
 800dbe8:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    ;
#ifdef DMA_SxCR_EN
    while ((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET)
      ;
#elif defined DMA_CCR_EN
    while ((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET)
<<<<<<< HEAD
 800eaae:	46c0      	nop			@ (mov r8, r8)
 800eab0:	4b2d      	ldr	r3, [pc, #180]	@ (800eb68 <setDMAMemMode+0x120>)
 800eab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2201      	movs	r2, #1
 800eaba:	4013      	ands	r3, r2
 800eabc:	d1f8      	bne.n	800eab0 <setDMAMemMode+0x68>
      ;
#endif
    if (memInc == mem_increase)
 800eabe:	1dfb      	adds	r3, r7, #7
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d10e      	bne.n	800eae4 <setDMAMemMode+0x9c>
    {
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800eac6:	4b28      	ldr	r3, [pc, #160]	@ (800eb68 <setDMAMemMode+0x120>)
 800eac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaca:	2280      	movs	r2, #128	@ 0x80
 800eacc:	60da      	str	r2, [r3, #12]
=======
 800dbea:	46c0      	nop			@ (mov r8, r8)
 800dbec:	4b2d      	ldr	r3, [pc, #180]	@ (800dca4 <setDMAMemMode+0x120>)
 800dbee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	d1f8      	bne.n	800dbec <setDMAMemMode+0x68>
      ;
#endif
    if (memInc == mem_increase)
 800dbfa:	1dfb      	adds	r3, r7, #7
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d10e      	bne.n	800dc20 <setDMAMemMode+0x9c>
    {
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800dc02:	4b28      	ldr	r3, [pc, #160]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc06:	2280      	movs	r2, #128	@ 0x80
 800dc08:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
<<<<<<< HEAD
 800eace:	4b26      	ldr	r3, [pc, #152]	@ (800eb68 <setDMAMemMode+0x120>)
 800ead0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	4b24      	ldr	r3, [pc, #144]	@ (800eb68 <setDMAMemMode+0x120>)
 800ead8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2180      	movs	r1, #128	@ 0x80
 800eade:	430a      	orrs	r2, r1
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	e00d      	b.n	800eb00 <setDMAMemMode+0xb8>
=======
 800dc0a:	4b26      	ldr	r3, [pc, #152]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b24      	ldr	r3, [pc, #144]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2180      	movs	r1, #128	@ 0x80
 800dc1a:	430a      	orrs	r2, r1
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	e00d      	b.n	800dc3c <setDMAMemMode+0xb8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif
    }
    else
    {
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
<<<<<<< HEAD
 800eae4:	4b20      	ldr	r3, [pc, #128]	@ (800eb68 <setDMAMemMode+0x120>)
 800eae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eae8:	2200      	movs	r2, #0
 800eaea:	60da      	str	r2, [r3, #12]
=======
 800dc20:	4b20      	ldr	r3, [pc, #128]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc24:	2200      	movs	r2, #0
 800dc26:	60da      	str	r2, [r3, #12]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
<<<<<<< HEAD
 800eaec:	4b1e      	ldr	r3, [pc, #120]	@ (800eb68 <setDMAMemMode+0x120>)
 800eaee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	4b1c      	ldr	r3, [pc, #112]	@ (800eb68 <setDMAMemMode+0x120>)
 800eaf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2180      	movs	r1, #128	@ 0x80
 800eafc:	438a      	bics	r2, r1
 800eafe:	601a      	str	r2, [r3, #0]
=======
 800dc28:	4b1e      	ldr	r3, [pc, #120]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	4b1c      	ldr	r3, [pc, #112]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2180      	movs	r1, #128	@ 0x80
 800dc38:	438a      	bics	r2, r1
 800dc3a:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif
    }

    if (size == mode_16bit)
<<<<<<< HEAD
 800eb00:	1dbb      	adds	r3, r7, #6
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d117      	bne.n	800eb38 <setDMAMemMode+0xf0>
    {
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eb08:	4b17      	ldr	r3, [pc, #92]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb0c:	2280      	movs	r2, #128	@ 0x80
 800eb0e:	0052      	lsls	r2, r2, #1
 800eb10:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800eb12:	4b15      	ldr	r3, [pc, #84]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb16:	2280      	movs	r2, #128	@ 0x80
 800eb18:	00d2      	lsls	r2, r2, #3
 800eb1a:	615a      	str	r2, [r3, #20]
=======
 800dc3c:	1dbb      	adds	r3, r7, #6
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d117      	bne.n	800dc74 <setDMAMemMode+0xf0>
    {
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dc44:	4b17      	ldr	r3, [pc, #92]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc48:	2280      	movs	r2, #128	@ 0x80
 800dc4a:	0052      	lsls	r2, r2, #1
 800dc4c:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dc4e:	4b15      	ldr	r3, [pc, #84]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc52:	2280      	movs	r2, #128	@ 0x80
 800dc54:	00d2      	lsls	r2, r2, #3
 800dc56:	615a      	str	r2, [r3, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                        (1 << DMA_SxCR_PSIZE_Pos | 1 << DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
<<<<<<< HEAD
 800eb1c:	4b12      	ldr	r3, [pc, #72]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a11      	ldr	r2, [pc, #68]	@ (800eb6c <setDMAMemMode+0x124>)
 800eb26:	401a      	ands	r2, r3
 800eb28:	4b0f      	ldr	r3, [pc, #60]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	21a0      	movs	r1, #160	@ 0xa0
 800eb30:	00c9      	lsls	r1, r1, #3
 800eb32:	430a      	orrs	r2, r1
 800eb34:	601a      	str	r2, [r3, #0]
=======
 800dc58:	4b12      	ldr	r3, [pc, #72]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a11      	ldr	r2, [pc, #68]	@ (800dca8 <setDMAMemMode+0x124>)
 800dc62:	401a      	ands	r2, r3
 800dc64:	4b0f      	ldr	r3, [pc, #60]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	21a0      	movs	r1, #160	@ 0xa0
 800dc6c:	00c9      	lsls	r1, r1, #3
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	601a      	str	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
<<<<<<< HEAD
 800eb36:	e011      	b.n	800eb5c <setDMAMemMode+0x114>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb38:	4b0b      	ldr	r3, [pc, #44]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb40:	4b09      	ldr	r3, [pc, #36]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb44:	2200      	movs	r2, #0
 800eb46:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800eb48:	4b07      	ldr	r3, [pc, #28]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	4b05      	ldr	r3, [pc, #20]	@ (800eb68 <setDMAMemMode+0x120>)
 800eb52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4905      	ldr	r1, [pc, #20]	@ (800eb6c <setDMAMemMode+0x124>)
 800eb58:	400a      	ands	r2, r1
 800eb5a:	601a      	str	r2, [r3, #0]
}
 800eb5c:	46c0      	nop			@ (mov r8, r8)
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	b002      	add	sp, #8
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	2000018c 	.word	0x2000018c
 800eb68:	200005cc 	.word	0x200005cc
 800eb6c:	fffff0ff 	.word	0xfffff0ff

0800eb70 <LCD_WriteCommand>:
=======
 800dc72:	e011      	b.n	800dc98 <setDMAMemMode+0x114>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dc74:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc78:	2200      	movs	r2, #0
 800dc7a:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dc7c:	4b09      	ldr	r3, [pc, #36]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc80:	2200      	movs	r2, #0
 800dc82:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800dc84:	4b07      	ldr	r3, [pc, #28]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	4b05      	ldr	r3, [pc, #20]	@ (800dca4 <setDMAMemMode+0x120>)
 800dc8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4905      	ldr	r1, [pc, #20]	@ (800dca8 <setDMAMemMode+0x124>)
 800dc94:	400a      	ands	r2, r1
 800dc96:	601a      	str	r2, [r3, #0]
}
 800dc98:	46c0      	nop			@ (mov r8, r8)
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	b002      	add	sp, #8
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20000194 	.word	0x20000194
 800dca4:	20000490 	.word	0x20000490
 800dca8:	fffff0ff 	.word	0xfffff0ff

0800dcac <LCD_WriteCommand>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
<<<<<<< HEAD
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	000a      	movs	r2, r1
 800eb7a:	1cfb      	adds	r3, r7, #3
 800eb7c:	701a      	strb	r2, [r3, #0]
  setSPI_Size(mode_8bit);
 800eb7e:	2000      	movs	r0, #0
 800eb80:	f7ff ff2e 	bl	800e9e0 <setSPI_Size>
  LCD_PIN(LCD_DC, RESET);
 800eb84:	4b14      	ldr	r3, [pc, #80]	@ (800ebd8 <LCD_WriteCommand+0x68>)
 800eb86:	2280      	movs	r2, #128	@ 0x80
 800eb88:	0452      	lsls	r2, r2, #17
 800eb8a:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800eb8c:	4b12      	ldr	r3, [pc, #72]	@ (800ebd8 <LCD_WriteCommand+0x68>)
 800eb8e:	2280      	movs	r2, #128	@ 0x80
 800eb90:	0552      	lsls	r2, r2, #21
 800eb92:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800eb94:	2301      	movs	r3, #1
 800eb96:	425b      	negs	r3, r3
 800eb98:	6879      	ldr	r1, [r7, #4]
 800eb9a:	4810      	ldr	r0, [pc, #64]	@ (800ebdc <LCD_WriteCommand+0x6c>)
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f7f9 fa0b 	bl	8007fb8 <HAL_SPI_Transmit>
  if (argc)
 800eba2:	1cfb      	adds	r3, r7, #3
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00d      	beq.n	800ebc6 <LCD_WriteCommand+0x56>
  {
    LCD_PIN(LCD_DC, SET);
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd8 <LCD_WriteCommand+0x68>)
 800ebac:	2280      	movs	r2, #128	@ 0x80
 800ebae:	0052      	lsls	r2, r2, #1
 800ebb0:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd + 1), argc, HAL_MAX_DELAY);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	1c59      	adds	r1, r3, #1
 800ebb6:	1cfb      	adds	r3, r7, #3
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	425b      	negs	r3, r3
 800ebc0:	4806      	ldr	r0, [pc, #24]	@ (800ebdc <LCD_WriteCommand+0x6c>)
 800ebc2:	f7f9 f9f9 	bl	8007fb8 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ebc6:	4b04      	ldr	r3, [pc, #16]	@ (800ebd8 <LCD_WriteCommand+0x68>)
 800ebc8:	2280      	movs	r2, #128	@ 0x80
 800ebca:	0152      	lsls	r2, r2, #5
 800ebcc:	619a      	str	r2, [r3, #24]
#endif
}
 800ebce:	46c0      	nop			@ (mov r8, r8)
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	b002      	add	sp, #8
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	46c0      	nop			@ (mov r8, r8)
 800ebd8:	48000400 	.word	0x48000400
 800ebdc:	200005cc 	.word	0x200005cc

0800ebe0 <LCD_WriteData>:
=======
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	000a      	movs	r2, r1
 800dcb6:	1cfb      	adds	r3, r7, #3
 800dcb8:	701a      	strb	r2, [r3, #0]
  setSPI_Size(mode_8bit);
 800dcba:	2000      	movs	r0, #0
 800dcbc:	f7ff ff2e 	bl	800db1c <setSPI_Size>
  LCD_PIN(LCD_DC, RESET);
 800dcc0:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <LCD_WriteCommand+0x68>)
 800dcc2:	2280      	movs	r2, #128	@ 0x80
 800dcc4:	0452      	lsls	r2, r2, #17
 800dcc6:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800dcc8:	4b12      	ldr	r3, [pc, #72]	@ (800dd14 <LCD_WriteCommand+0x68>)
 800dcca:	2280      	movs	r2, #128	@ 0x80
 800dccc:	0552      	lsls	r2, r2, #21
 800dcce:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	425b      	negs	r3, r3
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	4810      	ldr	r0, [pc, #64]	@ (800dd18 <LCD_WriteCommand+0x6c>)
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f7f9 fa09 	bl	80070f0 <HAL_SPI_Transmit>
  if (argc)
 800dcde:	1cfb      	adds	r3, r7, #3
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00d      	beq.n	800dd02 <LCD_WriteCommand+0x56>
  {
    LCD_PIN(LCD_DC, SET);
 800dce6:	4b0b      	ldr	r3, [pc, #44]	@ (800dd14 <LCD_WriteCommand+0x68>)
 800dce8:	2280      	movs	r2, #128	@ 0x80
 800dcea:	0052      	lsls	r2, r2, #1
 800dcec:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd + 1), argc, HAL_MAX_DELAY);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	1c59      	adds	r1, r3, #1
 800dcf2:	1cfb      	adds	r3, r7, #3
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	425b      	negs	r3, r3
 800dcfc:	4806      	ldr	r0, [pc, #24]	@ (800dd18 <LCD_WriteCommand+0x6c>)
 800dcfe:	f7f9 f9f7 	bl	80070f0 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800dd02:	4b04      	ldr	r3, [pc, #16]	@ (800dd14 <LCD_WriteCommand+0x68>)
 800dd04:	2280      	movs	r2, #128	@ 0x80
 800dd06:	0152      	lsls	r2, r2, #5
 800dd08:	619a      	str	r2, [r3, #24]
#endif
}
 800dd0a:	46c0      	nop			@ (mov r8, r8)
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	b002      	add	sp, #8
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	46c0      	nop			@ (mov r8, r8)
 800dd14:	48000400 	.word	0x48000400
 800dd18:	20000490 	.word	0x20000490

0800dd1c <LCD_WriteData>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
<<<<<<< HEAD
 800ebe0:	b5b0      	push	{r4, r5, r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC, SET);
 800ebea:	4b36      	ldr	r3, [pc, #216]	@ (800ecc4 <LCD_WriteData+0xe4>)
 800ebec:	2280      	movs	r2, #128	@ 0x80
 800ebee:	0052      	lsls	r2, r2, #1
 800ebf0:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800ebf2:	4b34      	ldr	r3, [pc, #208]	@ (800ecc4 <LCD_WriteData+0xe4>)
 800ebf4:	2280      	movs	r2, #128	@ 0x80
 800ebf6:	0552      	lsls	r2, r2, #21
 800ebf8:	619a      	str	r2, [r3, #24]
=======
 800dd1c:	b5b0      	push	{r4, r5, r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC, SET);
 800dd26:	4b36      	ldr	r3, [pc, #216]	@ (800de00 <LCD_WriteData+0xe4>)
 800dd28:	2280      	movs	r2, #128	@ 0x80
 800dd2a:	0052      	lsls	r2, r2, #1
 800dd2c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800dd2e:	4b34      	ldr	r3, [pc, #208]	@ (800de00 <LCD_WriteData+0xe4>)
 800dd30:	2280      	movs	r2, #128	@ 0x80
 800dd32:	0552      	lsls	r2, r2, #21
 800dd34:	619a      	str	r2, [r3, #24]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0)
<<<<<<< HEAD
 800ebfa:	e058      	b.n	800ecae <LCD_WriteData+0xce>
  {
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	2280      	movs	r2, #128	@ 0x80
 800ec00:	0252      	lsls	r2, r2, #9
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d300      	bcc.n	800ec08 <LCD_WriteData+0x28>
 800ec06:	4b30      	ldr	r3, [pc, #192]	@ (800ecc8 <LCD_WriteData+0xe8>)
 800ec08:	210e      	movs	r1, #14
 800ec0a:	187a      	adds	r2, r7, r1
 800ec0c:	8013      	strh	r3, [r2, #0]
#ifdef USE_DMA
    if (buff_size > DMA_Min_Pixels)
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	2b20      	cmp	r3, #32
 800ec12:	d929      	bls.n	800ec68 <LCD_WriteData+0x88>
    {
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800ec14:	187b      	adds	r3, r7, r1
 800ec16:	881a      	ldrh	r2, [r3, #0]
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	4b2c      	ldr	r3, [pc, #176]	@ (800eccc <LCD_WriteData+0xec>)
 800ec1c:	0018      	movs	r0, r3
 800ec1e:	f7f9 fe5f 	bl	80088e0 <HAL_SPI_Transmit_DMA>
      while (HAL_DMA_GetState(LCD_HANDLE.hdmatx) != HAL_DMA_STATE_READY)
 800ec22:	46c0      	nop			@ (mov r8, r8)
 800ec24:	4b29      	ldr	r3, [pc, #164]	@ (800eccc <LCD_WriteData+0xec>)
 800ec26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec28:	0018      	movs	r0, r3
 800ec2a:	f7f6 fab8 	bl	800519e <HAL_DMA_GetState>
 800ec2e:	0003      	movs	r3, r0
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d1f7      	bne.n	800ec24 <LCD_WriteData+0x44>
        ;
      if (config.dma_mem_inc == mem_increase)
 800ec34:	4b26      	ldr	r3, [pc, #152]	@ (800ecd0 <LCD_WriteData+0xf0>)
 800ec36:	789b      	ldrb	r3, [r3, #2]
 800ec38:	b25b      	sxtb	r3, r3
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d131      	bne.n	800eca2 <LCD_WriteData+0xc2>
      {
        if (config.dma_sz == mode_16bit)
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <LCD_WriteData+0xf0>)
 800ec40:	785b      	ldrb	r3, [r3, #1]
 800ec42:	b25b      	sxtb	r3, r3
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d106      	bne.n	800ec56 <LCD_WriteData+0x76>
          buff += chunk_size;
 800ec48:	230e      	movs	r3, #14
 800ec4a:	18fb      	adds	r3, r7, r3
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	18d3      	adds	r3, r2, r3
 800ec52:	607b      	str	r3, [r7, #4]
 800ec54:	e025      	b.n	800eca2 <LCD_WriteData+0xc2>
        else
          buff += chunk_size * 2;
 800ec56:	230e      	movs	r3, #14
 800ec58:	18fb      	adds	r3, r7, r3
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	001a      	movs	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	189b      	adds	r3, r3, r2
 800ec64:	607b      	str	r3, [r7, #4]
 800ec66:	e01c      	b.n	800eca2 <LCD_WriteData+0xc2>
=======
 800dd36:	e058      	b.n	800ddea <LCD_WriteData+0xce>
  {
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2280      	movs	r2, #128	@ 0x80
 800dd3c:	0252      	lsls	r2, r2, #9
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d300      	bcc.n	800dd44 <LCD_WriteData+0x28>
 800dd42:	4b30      	ldr	r3, [pc, #192]	@ (800de04 <LCD_WriteData+0xe8>)
 800dd44:	210e      	movs	r1, #14
 800dd46:	187a      	adds	r2, r7, r1
 800dd48:	8013      	strh	r3, [r2, #0]
#ifdef USE_DMA
    if (buff_size > DMA_Min_Pixels)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b20      	cmp	r3, #32
 800dd4e:	d929      	bls.n	800dda4 <LCD_WriteData+0x88>
    {
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800dd50:	187b      	adds	r3, r7, r1
 800dd52:	881a      	ldrh	r2, [r3, #0]
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	4b2c      	ldr	r3, [pc, #176]	@ (800de08 <LCD_WriteData+0xec>)
 800dd58:	0018      	movs	r0, r3
 800dd5a:	f7f9 fe5d 	bl	8007a18 <HAL_SPI_Transmit_DMA>
      while (HAL_DMA_GetState(LCD_HANDLE.hdmatx) != HAL_DMA_STATE_READY)
 800dd5e:	46c0      	nop			@ (mov r8, r8)
 800dd60:	4b29      	ldr	r3, [pc, #164]	@ (800de08 <LCD_WriteData+0xec>)
 800dd62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd64:	0018      	movs	r0, r3
 800dd66:	f7f6 fab6 	bl	80042d6 <HAL_DMA_GetState>
 800dd6a:	0003      	movs	r3, r0
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d1f7      	bne.n	800dd60 <LCD_WriteData+0x44>
        ;
      if (config.dma_mem_inc == mem_increase)
 800dd70:	4b26      	ldr	r3, [pc, #152]	@ (800de0c <LCD_WriteData+0xf0>)
 800dd72:	789b      	ldrb	r3, [r3, #2]
 800dd74:	b25b      	sxtb	r3, r3
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d131      	bne.n	800ddde <LCD_WriteData+0xc2>
      {
        if (config.dma_sz == mode_16bit)
 800dd7a:	4b24      	ldr	r3, [pc, #144]	@ (800de0c <LCD_WriteData+0xf0>)
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	b25b      	sxtb	r3, r3
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d106      	bne.n	800dd92 <LCD_WriteData+0x76>
          buff += chunk_size;
 800dd84:	230e      	movs	r3, #14
 800dd86:	18fb      	adds	r3, r7, r3
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	18d3      	adds	r3, r2, r3
 800dd8e:	607b      	str	r3, [r7, #4]
 800dd90:	e025      	b.n	800ddde <LCD_WriteData+0xc2>
        else
          buff += chunk_size * 2;
 800dd92:	230e      	movs	r3, #14
 800dd94:	18fb      	adds	r3, r7, r3
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	001a      	movs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	189b      	adds	r3, r3, r2
 800dda0:	607b      	str	r3, [r7, #4]
 800dda2:	e01c      	b.n	800ddde <LCD_WriteData+0xc2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
    }
    else
    {
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
<<<<<<< HEAD
 800ec68:	2301      	movs	r3, #1
 800ec6a:	425c      	negs	r4, r3
 800ec6c:	250e      	movs	r5, #14
 800ec6e:	197b      	adds	r3, r7, r5
 800ec70:	881a      	ldrh	r2, [r3, #0]
 800ec72:	6879      	ldr	r1, [r7, #4]
 800ec74:	4815      	ldr	r0, [pc, #84]	@ (800eccc <LCD_WriteData+0xec>)
 800ec76:	0023      	movs	r3, r4
 800ec78:	f7f9 f99e 	bl	8007fb8 <HAL_SPI_Transmit>
      if (config.spi_sz == mode_16bit)
 800ec7c:	4b14      	ldr	r3, [pc, #80]	@ (800ecd0 <LCD_WriteData+0xf0>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	b25b      	sxtb	r3, r3
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d105      	bne.n	800ec92 <LCD_WriteData+0xb2>
        buff += chunk_size;
 800ec86:	197b      	adds	r3, r7, r5
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	18d3      	adds	r3, r2, r3
 800ec8e:	607b      	str	r3, [r7, #4]
 800ec90:	e007      	b.n	800eca2 <LCD_WriteData+0xc2>
      else
        buff += chunk_size * 2;
 800ec92:	230e      	movs	r3, #14
 800ec94:	18fb      	adds	r3, r7, r3
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	001a      	movs	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	189b      	adds	r3, r3, r2
 800eca0:	607b      	str	r3, [r7, #4]
=======
 800dda4:	2301      	movs	r3, #1
 800dda6:	425c      	negs	r4, r3
 800dda8:	250e      	movs	r5, #14
 800ddaa:	197b      	adds	r3, r7, r5
 800ddac:	881a      	ldrh	r2, [r3, #0]
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	4815      	ldr	r0, [pc, #84]	@ (800de08 <LCD_WriteData+0xec>)
 800ddb2:	0023      	movs	r3, r4
 800ddb4:	f7f9 f99c 	bl	80070f0 <HAL_SPI_Transmit>
      if (config.spi_sz == mode_16bit)
 800ddb8:	4b14      	ldr	r3, [pc, #80]	@ (800de0c <LCD_WriteData+0xf0>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b25b      	sxtb	r3, r3
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d105      	bne.n	800ddce <LCD_WriteData+0xb2>
        buff += chunk_size;
 800ddc2:	197b      	adds	r3, r7, r5
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	18d3      	adds	r3, r2, r3
 800ddca:	607b      	str	r3, [r7, #4]
 800ddcc:	e007      	b.n	800ddde <LCD_WriteData+0xc2>
      else
        buff += chunk_size * 2;
 800ddce:	230e      	movs	r3, #14
 800ddd0:	18fb      	adds	r3, r7, r3
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	001a      	movs	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	189b      	adds	r3, r3, r2
 800dddc:	607b      	str	r3, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
<<<<<<< HEAD
 800eca2:	230e      	movs	r3, #14
 800eca4:	18fb      	adds	r3, r7, r3
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	603b      	str	r3, [r7, #0]
  while (buff_size > 0)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1a3      	bne.n	800ebfc <LCD_WriteData+0x1c>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ecb4:	4b03      	ldr	r3, [pc, #12]	@ (800ecc4 <LCD_WriteData+0xe4>)
 800ecb6:	2280      	movs	r2, #128	@ 0x80
 800ecb8:	0152      	lsls	r2, r2, #5
 800ecba:	619a      	str	r2, [r3, #24]
#endif
}
 800ecbc:	46c0      	nop			@ (mov r8, r8)
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	b004      	add	sp, #16
 800ecc2:	bdb0      	pop	{r4, r5, r7, pc}
 800ecc4:	48000400 	.word	0x48000400
 800ecc8:	0000ffff 	.word	0x0000ffff
 800eccc:	200005cc 	.word	0x200005cc
 800ecd0:	2000018c 	.word	0x2000018c

0800ecd4 <LCD_SetAddressWindow>:
=======
 800ddde:	230e      	movs	r3, #14
 800dde0:	18fb      	adds	r3, r7, r3
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	603b      	str	r3, [r7, #0]
  while (buff_size > 0)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1a3      	bne.n	800dd38 <LCD_WriteData+0x1c>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ddf0:	4b03      	ldr	r3, [pc, #12]	@ (800de00 <LCD_WriteData+0xe4>)
 800ddf2:	2280      	movs	r2, #128	@ 0x80
 800ddf4:	0152      	lsls	r2, r2, #5
 800ddf6:	619a      	str	r2, [r3, #24]
#endif
}
 800ddf8:	46c0      	nop			@ (mov r8, r8)
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	b004      	add	sp, #16
 800ddfe:	bdb0      	pop	{r4, r5, r7, pc}
 800de00:	48000400 	.word	0x48000400
 800de04:	0000ffff 	.word	0x0000ffff
 800de08:	20000490 	.word	0x20000490
 800de0c:	20000194 	.word	0x20000194

0800de10 <LCD_SetAddressWindow>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
<<<<<<< HEAD
 800ecd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd6:	b08b      	sub	sp, #44	@ 0x2c
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	0005      	movs	r5, r0
 800ecdc:	000c      	movs	r4, r1
 800ecde:	0010      	movs	r0, r2
 800ece0:	0019      	movs	r1, r3
 800ece2:	1dbb      	adds	r3, r7, #6
 800ece4:	1c2a      	adds	r2, r5, #0
 800ece6:	801a      	strh	r2, [r3, #0]
 800ece8:	1d3b      	adds	r3, r7, #4
 800ecea:	1c22      	adds	r2, r4, #0
 800ecec:	801a      	strh	r2, [r3, #0]
 800ecee:	1cbb      	adds	r3, r7, #2
 800ecf0:	1c02      	adds	r2, r0, #0
 800ecf2:	801a      	strh	r2, [r3, #0]
 800ecf4:	003b      	movs	r3, r7
 800ecf6:	1c0a      	adds	r2, r1, #0
 800ecf8:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800ecfa:	2026      	movs	r0, #38	@ 0x26
 800ecfc:	183b      	adds	r3, r7, r0
 800ecfe:	1dba      	adds	r2, r7, #6
 800ed00:	8812      	ldrh	r2, [r2, #0]
 800ed02:	801a      	strh	r2, [r3, #0]
 800ed04:	2424      	movs	r4, #36	@ 0x24
 800ed06:	193b      	adds	r3, r7, r4
 800ed08:	1cba      	adds	r2, r7, #2
 800ed0a:	8812      	ldrh	r2, [r2, #0]
 800ed0c:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800ed0e:	1d3b      	adds	r3, r7, #4
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	3322      	adds	r3, #34	@ 0x22
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	2522      	movs	r5, #34	@ 0x22
 800ed18:	197b      	adds	r3, r7, r5
 800ed1a:	801a      	strh	r2, [r3, #0]
 800ed1c:	003b      	movs	r3, r7
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	3322      	adds	r3, #34	@ 0x22
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	2620      	movs	r6, #32
 800ed26:	19bb      	adds	r3, r7, r6
 800ed28:	801a      	strh	r2, [r3, #0]
=======
 800de10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de12:	b08b      	sub	sp, #44	@ 0x2c
 800de14:	af00      	add	r7, sp, #0
 800de16:	0005      	movs	r5, r0
 800de18:	000c      	movs	r4, r1
 800de1a:	0010      	movs	r0, r2
 800de1c:	0019      	movs	r1, r3
 800de1e:	1dbb      	adds	r3, r7, #6
 800de20:	1c2a      	adds	r2, r5, #0
 800de22:	801a      	strh	r2, [r3, #0]
 800de24:	1d3b      	adds	r3, r7, #4
 800de26:	1c22      	adds	r2, r4, #0
 800de28:	801a      	strh	r2, [r3, #0]
 800de2a:	1cbb      	adds	r3, r7, #2
 800de2c:	1c02      	adds	r2, r0, #0
 800de2e:	801a      	strh	r2, [r3, #0]
 800de30:	003b      	movs	r3, r7
 800de32:	1c0a      	adds	r2, r1, #0
 800de34:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800de36:	2026      	movs	r0, #38	@ 0x26
 800de38:	183b      	adds	r3, r7, r0
 800de3a:	1dba      	adds	r2, r7, #6
 800de3c:	8812      	ldrh	r2, [r2, #0]
 800de3e:	801a      	strh	r2, [r3, #0]
 800de40:	2424      	movs	r4, #36	@ 0x24
 800de42:	193b      	adds	r3, r7, r4
 800de44:	1cba      	adds	r2, r7, #2
 800de46:	8812      	ldrh	r2, [r2, #0]
 800de48:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800de4a:	1d3b      	adds	r3, r7, #4
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	331e      	adds	r3, #30
 800de50:	b29a      	uxth	r2, r3
 800de52:	2522      	movs	r5, #34	@ 0x22
 800de54:	197b      	adds	r3, r7, r5
 800de56:	801a      	strh	r2, [r3, #0]
 800de58:	003b      	movs	r3, r7
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	331e      	adds	r3, #30
 800de5e:	b29a      	uxth	r2, r3
 800de60:	2620      	movs	r6, #32
 800de62:	19bb      	adds	r3, r7, r6
 800de64:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Column Address set */
  {
    uint8_t cmd[] = {CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
<<<<<<< HEAD
 800ed2a:	2118      	movs	r1, #24
 800ed2c:	187b      	adds	r3, r7, r1
 800ed2e:	222a      	movs	r2, #42	@ 0x2a
 800ed30:	701a      	strb	r2, [r3, #0]
 800ed32:	183b      	adds	r3, r7, r0
 800ed34:	2200      	movs	r2, #0
 800ed36:	5e9b      	ldrsh	r3, [r3, r2]
 800ed38:	121b      	asrs	r3, r3, #8
 800ed3a:	b21b      	sxth	r3, r3
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	187b      	adds	r3, r7, r1
 800ed40:	705a      	strb	r2, [r3, #1]
 800ed42:	183b      	adds	r3, r7, r0
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	187b      	adds	r3, r7, r1
 800ed4a:	709a      	strb	r2, [r3, #2]
 800ed4c:	193b      	adds	r3, r7, r4
 800ed4e:	2200      	movs	r2, #0
 800ed50:	5e9b      	ldrsh	r3, [r3, r2]
 800ed52:	121b      	asrs	r3, r3, #8
 800ed54:	b21b      	sxth	r3, r3
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	187b      	adds	r3, r7, r1
 800ed5a:	70da      	strb	r2, [r3, #3]
 800ed5c:	193b      	adds	r3, r7, r4
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	187b      	adds	r3, r7, r1
 800ed64:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800ed66:	187b      	adds	r3, r7, r1
 800ed68:	2104      	movs	r1, #4
 800ed6a:	0018      	movs	r0, r3
 800ed6c:	f7ff ff00 	bl	800eb70 <LCD_WriteCommand>
=======
 800de66:	2118      	movs	r1, #24
 800de68:	187b      	adds	r3, r7, r1
 800de6a:	222a      	movs	r2, #42	@ 0x2a
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	183b      	adds	r3, r7, r0
 800de70:	2200      	movs	r2, #0
 800de72:	5e9b      	ldrsh	r3, [r3, r2]
 800de74:	121b      	asrs	r3, r3, #8
 800de76:	b21b      	sxth	r3, r3
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	187b      	adds	r3, r7, r1
 800de7c:	705a      	strb	r2, [r3, #1]
 800de7e:	183b      	adds	r3, r7, r0
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	b2da      	uxtb	r2, r3
 800de84:	187b      	adds	r3, r7, r1
 800de86:	709a      	strb	r2, [r3, #2]
 800de88:	193b      	adds	r3, r7, r4
 800de8a:	2200      	movs	r2, #0
 800de8c:	5e9b      	ldrsh	r3, [r3, r2]
 800de8e:	121b      	asrs	r3, r3, #8
 800de90:	b21b      	sxth	r3, r3
 800de92:	b2da      	uxtb	r2, r3
 800de94:	187b      	adds	r3, r7, r1
 800de96:	70da      	strb	r2, [r3, #3]
 800de98:	193b      	adds	r3, r7, r4
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	187b      	adds	r3, r7, r1
 800dea0:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800dea2:	187b      	adds	r3, r7, r1
 800dea4:	2104      	movs	r1, #4
 800dea6:	0018      	movs	r0, r3
 800dea8:	f7ff ff00 	bl	800dcac <LCD_WriteCommand>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  /* Row Address set */
  {
    uint8_t cmd[] = {CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
<<<<<<< HEAD
 800ed70:	2110      	movs	r1, #16
 800ed72:	187b      	adds	r3, r7, r1
 800ed74:	222b      	movs	r2, #43	@ 0x2b
 800ed76:	701a      	strb	r2, [r3, #0]
 800ed78:	197b      	adds	r3, r7, r5
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	5e9b      	ldrsh	r3, [r3, r2]
 800ed7e:	121b      	asrs	r3, r3, #8
 800ed80:	b21b      	sxth	r3, r3
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	187b      	adds	r3, r7, r1
 800ed86:	705a      	strb	r2, [r3, #1]
 800ed88:	197b      	adds	r3, r7, r5
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	187b      	adds	r3, r7, r1
 800ed90:	709a      	strb	r2, [r3, #2]
 800ed92:	19bb      	adds	r3, r7, r6
 800ed94:	2200      	movs	r2, #0
 800ed96:	5e9b      	ldrsh	r3, [r3, r2]
 800ed98:	121b      	asrs	r3, r3, #8
 800ed9a:	b21b      	sxth	r3, r3
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	187b      	adds	r3, r7, r1
 800eda0:	70da      	strb	r2, [r3, #3]
 800eda2:	19bb      	adds	r3, r7, r6
 800eda4:	881b      	ldrh	r3, [r3, #0]
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	187b      	adds	r3, r7, r1
 800edaa:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800edac:	187b      	adds	r3, r7, r1
 800edae:	2104      	movs	r1, #4
 800edb0:	0018      	movs	r0, r3
 800edb2:	f7ff fedd 	bl	800eb70 <LCD_WriteCommand>
=======
 800deac:	2110      	movs	r1, #16
 800deae:	187b      	adds	r3, r7, r1
 800deb0:	222b      	movs	r2, #43	@ 0x2b
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	197b      	adds	r3, r7, r5
 800deb6:	2200      	movs	r2, #0
 800deb8:	5e9b      	ldrsh	r3, [r3, r2]
 800deba:	121b      	asrs	r3, r3, #8
 800debc:	b21b      	sxth	r3, r3
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	187b      	adds	r3, r7, r1
 800dec2:	705a      	strb	r2, [r3, #1]
 800dec4:	197b      	adds	r3, r7, r5
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	187b      	adds	r3, r7, r1
 800decc:	709a      	strb	r2, [r3, #2]
 800dece:	19bb      	adds	r3, r7, r6
 800ded0:	2200      	movs	r2, #0
 800ded2:	5e9b      	ldrsh	r3, [r3, r2]
 800ded4:	121b      	asrs	r3, r3, #8
 800ded6:	b21b      	sxth	r3, r3
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	187b      	adds	r3, r7, r1
 800dedc:	70da      	strb	r2, [r3, #3]
 800dede:	19bb      	adds	r3, r7, r6
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	187b      	adds	r3, r7, r1
 800dee6:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800dee8:	187b      	adds	r3, r7, r1
 800deea:	2104      	movs	r1, #4
 800deec:	0018      	movs	r0, r3
 800deee:	f7ff fedd 	bl	800dcac <LCD_WriteCommand>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  {
    /* Write to RAM */
    uint8_t cmd[] = {CMD_RAMWR};
<<<<<<< HEAD
 800edb6:	210c      	movs	r1, #12
 800edb8:	187b      	adds	r3, r7, r1
 800edba:	4a06      	ldr	r2, [pc, #24]	@ (800edd4 <LCD_SetAddressWindow+0x100>)
 800edbc:	7812      	ldrb	r2, [r2, #0]
 800edbe:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800edc0:	187b      	adds	r3, r7, r1
 800edc2:	2100      	movs	r1, #0
 800edc4:	0018      	movs	r0, r3
 800edc6:	f7ff fed3 	bl	800eb70 <LCD_WriteCommand>
  }
}
 800edca:	46c0      	nop			@ (mov r8, r8)
 800edcc:	46bd      	mov	sp, r7
 800edce:	b00b      	add	sp, #44	@ 0x2c
 800edd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd2:	46c0      	nop			@ (mov r8, r8)
 800edd4:	08016730 	.word	0x08016730

0800edd8 <LCD_DrawPixel>:
=======
 800def2:	210c      	movs	r1, #12
 800def4:	187b      	adds	r3, r7, r1
 800def6:	4a06      	ldr	r2, [pc, #24]	@ (800df10 <LCD_SetAddressWindow+0x100>)
 800def8:	7812      	ldrb	r2, [r2, #0]
 800defa:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800defc:	187b      	adds	r3, r7, r1
 800defe:	2100      	movs	r1, #0
 800df00:	0018      	movs	r0, r3
 800df02:	f7ff fed3 	bl	800dcac <LCD_WriteCommand>
  }
}
 800df06:	46c0      	nop			@ (mov r8, r8)
 800df08:	46bd      	mov	sp, r7
 800df0a:	b00b      	add	sp, #44	@ 0x2c
 800df0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df0e:	46c0      	nop			@ (mov r8, r8)
 800df10:	080151c8 	.word	0x080151c8

0800df14 <LCD_DrawPixel>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
<<<<<<< HEAD
 800edd8:	b5b0      	push	{r4, r5, r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	0004      	movs	r4, r0
 800ede0:	0008      	movs	r0, r1
 800ede2:	0011      	movs	r1, r2
 800ede4:	1dbb      	adds	r3, r7, #6
 800ede6:	1c22      	adds	r2, r4, #0
 800ede8:	801a      	strh	r2, [r3, #0]
 800edea:	1d3b      	adds	r3, r7, #4
 800edec:	1c02      	adds	r2, r0, #0
 800edee:	801a      	strh	r2, [r3, #0]
 800edf0:	1cbb      	adds	r3, r7, #2
 800edf2:	1c0a      	adds	r2, r1, #0
 800edf4:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH - 1) ||
 800edf6:	1dbb      	adds	r3, r7, #6
 800edf8:	2200      	movs	r2, #0
 800edfa:	5e9b      	ldrsh	r3, [r3, r2]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	db40      	blt.n	800ee82 <LCD_DrawPixel+0xaa>
 800ee00:	1dbb      	adds	r3, r7, #6
 800ee02:	2200      	movs	r2, #0
 800ee04:	5e9a      	ldrsh	r2, [r3, r2]
 800ee06:	23a0      	movs	r3, #160	@ 0xa0
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	da39      	bge.n	800ee82 <LCD_DrawPixel+0xaa>
 800ee0e:	1d3b      	adds	r3, r7, #4
 800ee10:	2200      	movs	r2, #0
 800ee12:	5e9b      	ldrsh	r3, [r3, r2]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	db34      	blt.n	800ee82 <LCD_DrawPixel+0xaa>
      (y < 0) || (y > LCD_HEIGHT - 1))
 800ee18:	1d3b      	adds	r3, r7, #4
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ee1e:	2bab      	cmp	r3, #171	@ 0xab
 800ee20:	dc2f      	bgt.n	800ee82 <LCD_DrawPixel+0xaa>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800ee22:	1cbb      	adds	r3, r7, #2
 800ee24:	881b      	ldrh	r3, [r3, #0]
 800ee26:	0a1b      	lsrs	r3, r3, #8
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	250c      	movs	r5, #12
 800ee2e:	197b      	adds	r3, r7, r5
 800ee30:	701a      	strb	r2, [r3, #0]
 800ee32:	1cbb      	adds	r3, r7, #2
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	197b      	adds	r3, r7, r5
 800ee3a:	705a      	strb	r2, [r3, #1]

  LCD_SetAddressWindow(x, y, x, y);
 800ee3c:	1d3b      	adds	r3, r7, #4
 800ee3e:	2400      	movs	r4, #0
 800ee40:	5f1c      	ldrsh	r4, [r3, r4]
 800ee42:	1dbb      	adds	r3, r7, #6
 800ee44:	2200      	movs	r2, #0
 800ee46:	5e9a      	ldrsh	r2, [r3, r2]
 800ee48:	1d3b      	adds	r3, r7, #4
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	5e59      	ldrsh	r1, [r3, r1]
 800ee4e:	1dbb      	adds	r3, r7, #6
 800ee50:	2000      	movs	r0, #0
 800ee52:	5e18      	ldrsh	r0, [r3, r0]
 800ee54:	0023      	movs	r3, r4
 800ee56:	f7ff ff3d 	bl	800ecd4 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC, SET);
 800ee5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ee8c <LCD_DrawPixel+0xb4>)
 800ee5c:	2280      	movs	r2, #128	@ 0x80
 800ee5e:	0052      	lsls	r2, r2, #1
 800ee60:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800ee62:	4b0a      	ldr	r3, [pc, #40]	@ (800ee8c <LCD_DrawPixel+0xb4>)
 800ee64:	2280      	movs	r2, #128	@ 0x80
 800ee66:	0552      	lsls	r2, r2, #21
 800ee68:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	425b      	negs	r3, r3
 800ee6e:	1979      	adds	r1, r7, r5
 800ee70:	4807      	ldr	r0, [pc, #28]	@ (800ee90 <LCD_DrawPixel+0xb8>)
 800ee72:	2202      	movs	r2, #2
 800ee74:	f7f9 f8a0 	bl	8007fb8 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800ee78:	4b04      	ldr	r3, [pc, #16]	@ (800ee8c <LCD_DrawPixel+0xb4>)
 800ee7a:	2280      	movs	r2, #128	@ 0x80
 800ee7c:	0152      	lsls	r2, r2, #5
 800ee7e:	619a      	str	r2, [r3, #24]
 800ee80:	e000      	b.n	800ee84 <LCD_DrawPixel+0xac>
    return;
 800ee82:	46c0      	nop			@ (mov r8, r8)
#endif
}
 800ee84:	46bd      	mov	sp, r7
 800ee86:	b004      	add	sp, #16
 800ee88:	bdb0      	pop	{r4, r5, r7, pc}
 800ee8a:	46c0      	nop			@ (mov r8, r8)
 800ee8c:	48000400 	.word	0x48000400
 800ee90:	200005cc 	.word	0x200005cc

0800ee94 <LCD_FillPixels>:
=======
 800df14:	b5b0      	push	{r4, r5, r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	0004      	movs	r4, r0
 800df1c:	0008      	movs	r0, r1
 800df1e:	0011      	movs	r1, r2
 800df20:	1dbb      	adds	r3, r7, #6
 800df22:	1c22      	adds	r2, r4, #0
 800df24:	801a      	strh	r2, [r3, #0]
 800df26:	1d3b      	adds	r3, r7, #4
 800df28:	1c02      	adds	r2, r0, #0
 800df2a:	801a      	strh	r2, [r3, #0]
 800df2c:	1cbb      	adds	r3, r7, #2
 800df2e:	1c0a      	adds	r2, r1, #0
 800df30:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH - 1) ||
 800df32:	1dbb      	adds	r3, r7, #6
 800df34:	2200      	movs	r2, #0
 800df36:	5e9b      	ldrsh	r3, [r3, r2]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	db40      	blt.n	800dfbe <LCD_DrawPixel+0xaa>
 800df3c:	1dbb      	adds	r3, r7, #6
 800df3e:	2200      	movs	r2, #0
 800df40:	5e9a      	ldrsh	r2, [r3, r2]
 800df42:	23a0      	movs	r3, #160	@ 0xa0
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	429a      	cmp	r2, r3
 800df48:	da39      	bge.n	800dfbe <LCD_DrawPixel+0xaa>
 800df4a:	1d3b      	adds	r3, r7, #4
 800df4c:	2200      	movs	r2, #0
 800df4e:	5e9b      	ldrsh	r3, [r3, r2]
 800df50:	2b00      	cmp	r3, #0
 800df52:	db34      	blt.n	800dfbe <LCD_DrawPixel+0xaa>
      (y < 0) || (y > LCD_HEIGHT - 1))
 800df54:	1d3b      	adds	r3, r7, #4
 800df56:	2200      	movs	r2, #0
 800df58:	5e9b      	ldrsh	r3, [r3, r2]
 800df5a:	2bab      	cmp	r3, #171	@ 0xab
 800df5c:	dc2f      	bgt.n	800dfbe <LCD_DrawPixel+0xaa>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800df5e:	1cbb      	adds	r3, r7, #2
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	0a1b      	lsrs	r3, r3, #8
 800df64:	b29b      	uxth	r3, r3
 800df66:	b2da      	uxtb	r2, r3
 800df68:	250c      	movs	r5, #12
 800df6a:	197b      	adds	r3, r7, r5
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	1cbb      	adds	r3, r7, #2
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	b2da      	uxtb	r2, r3
 800df74:	197b      	adds	r3, r7, r5
 800df76:	705a      	strb	r2, [r3, #1]

  LCD_SetAddressWindow(x, y, x, y);
 800df78:	1d3b      	adds	r3, r7, #4
 800df7a:	2400      	movs	r4, #0
 800df7c:	5f1c      	ldrsh	r4, [r3, r4]
 800df7e:	1dbb      	adds	r3, r7, #6
 800df80:	2200      	movs	r2, #0
 800df82:	5e9a      	ldrsh	r2, [r3, r2]
 800df84:	1d3b      	adds	r3, r7, #4
 800df86:	2100      	movs	r1, #0
 800df88:	5e59      	ldrsh	r1, [r3, r1]
 800df8a:	1dbb      	adds	r3, r7, #6
 800df8c:	2000      	movs	r0, #0
 800df8e:	5e18      	ldrsh	r0, [r3, r0]
 800df90:	0023      	movs	r3, r4
 800df92:	f7ff ff3d 	bl	800de10 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC, SET);
 800df96:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc8 <LCD_DrawPixel+0xb4>)
 800df98:	2280      	movs	r2, #128	@ 0x80
 800df9a:	0052      	lsls	r2, r2, #1
 800df9c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS, RESET);
 800df9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dfc8 <LCD_DrawPixel+0xb4>)
 800dfa0:	2280      	movs	r2, #128	@ 0x80
 800dfa2:	0552      	lsls	r2, r2, #21
 800dfa4:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	425b      	negs	r3, r3
 800dfaa:	1979      	adds	r1, r7, r5
 800dfac:	4807      	ldr	r0, [pc, #28]	@ (800dfcc <LCD_DrawPixel+0xb8>)
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f7f9 f89e 	bl	80070f0 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800dfb4:	4b04      	ldr	r3, [pc, #16]	@ (800dfc8 <LCD_DrawPixel+0xb4>)
 800dfb6:	2280      	movs	r2, #128	@ 0x80
 800dfb8:	0152      	lsls	r2, r2, #5
 800dfba:	619a      	str	r2, [r3, #24]
 800dfbc:	e000      	b.n	800dfc0 <LCD_DrawPixel+0xac>
    return;
 800dfbe:	46c0      	nop			@ (mov r8, r8)
#endif
}
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	b004      	add	sp, #16
 800dfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfc6:	46c0      	nop			@ (mov r8, r8)
 800dfc8:	48000400 	.word	0x48000400
 800dfcc:	20000490 	.word	0x20000490

0800dfd0 <LCD_FillPixels>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  fb[x + (y * LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color)
{
<<<<<<< HEAD
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b094      	sub	sp, #80	@ 0x50
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	000a      	movs	r2, r1
 800ee9e:	1cbb      	adds	r3, r7, #2
 800eea0:	801a      	strh	r2, [r3, #0]
#ifdef USE_DMA
  if (pixels > DMA_Min_Pixels)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d906      	bls.n	800eeb6 <LCD_FillPixels+0x22>
    LCD_WriteData((uint8_t *)&color, pixels);
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	1cbb      	adds	r3, r7, #2
 800eeac:	0011      	movs	r1, r2
 800eeae:	0018      	movs	r0, r3
 800eeb0:	f7ff fe96 	bl	800ebe0 <LCD_WriteData>
=======
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b094      	sub	sp, #80	@ 0x50
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	000a      	movs	r2, r1
 800dfda:	1cbb      	adds	r3, r7, #2
 800dfdc:	801a      	strh	r2, [r3, #0]
#ifdef USE_DMA
  if (pixels > DMA_Min_Pixels)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d906      	bls.n	800dff2 <LCD_FillPixels+0x22>
    LCD_WriteData((uint8_t *)&color, pixels);
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	1cbb      	adds	r3, r7, #2
 800dfe8:	0011      	movs	r1, r2
 800dfea:	0018      	movs	r0, r3
 800dfec:	f7ff fe96 	bl	800dd1c <LCD_WriteData>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      pixels -= sz;
    }
#ifdef USE_DMA
  }
#endif
}
<<<<<<< HEAD
 800eeb4:	e027      	b.n	800ef06 <LCD_FillPixels+0x72>
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eeba:	e009      	b.n	800eed0 <LCD_FillPixels+0x3c>
      fill[t] = color;
 800eebc:	1cbb      	adds	r3, r7, #2
 800eebe:	8819      	ldrh	r1, [r3, #0]
 800eec0:	2308      	movs	r3, #8
 800eec2:	18fb      	adds	r3, r7, r3
 800eec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eec6:	0052      	lsls	r2, r2, #1
 800eec8:	52d1      	strh	r1, [r2, r3]
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800eeca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eecc:	3301      	adds	r3, #1
 800eece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b20      	cmp	r3, #32
 800eed4:	d900      	bls.n	800eed8 <LCD_FillPixels+0x44>
 800eed6:	2320      	movs	r3, #32
 800eed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d3ee      	bcc.n	800eebc <LCD_FillPixels+0x28>
    while (pixels)
 800eede:	e00f      	b.n	800ef00 <LCD_FillPixels+0x6c>
      uint32_t sz = (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b20      	cmp	r3, #32
 800eee4:	d900      	bls.n	800eee8 <LCD_FillPixels+0x54>
 800eee6:	2320      	movs	r3, #32
 800eee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t *)fill, sz);
 800eeea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eeec:	2308      	movs	r3, #8
 800eeee:	18fb      	adds	r3, r7, r3
 800eef0:	0011      	movs	r1, r2
 800eef2:	0018      	movs	r0, r3
 800eef4:	f7ff fe74 	bl	800ebe0 <LCD_WriteData>
      pixels -= sz;
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	607b      	str	r3, [r7, #4]
    while (pixels)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1ec      	bne.n	800eee0 <LCD_FillPixels+0x4c>
}
 800ef06:	46c0      	nop			@ (mov r8, r8)
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	b014      	add	sp, #80	@ 0x50
 800ef0c:	bd80      	pop	{r7, pc}
	...

0800ef10 <LCD_FillArea>:
=======
 800dff0:	e027      	b.n	800e042 <LCD_FillPixels+0x72>
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800dff2:	2300      	movs	r3, #0
 800dff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dff6:	e009      	b.n	800e00c <LCD_FillPixels+0x3c>
      fill[t] = color;
 800dff8:	1cbb      	adds	r3, r7, #2
 800dffa:	8819      	ldrh	r1, [r3, #0]
 800dffc:	2308      	movs	r3, #8
 800dffe:	18fb      	adds	r3, r7, r3
 800e000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e002:	0052      	lsls	r2, r2, #1
 800e004:	52d1      	strh	r1, [r2, r3]
    for (uint32_t t = 0; t < (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels); t++)
 800e006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e008:	3301      	adds	r3, #1
 800e00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b20      	cmp	r3, #32
 800e010:	d900      	bls.n	800e014 <LCD_FillPixels+0x44>
 800e012:	2320      	movs	r3, #32
 800e014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e016:	429a      	cmp	r2, r3
 800e018:	d3ee      	bcc.n	800dff8 <LCD_FillPixels+0x28>
    while (pixels)
 800e01a:	e00f      	b.n	800e03c <LCD_FillPixels+0x6c>
      uint32_t sz = (pixels < DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b20      	cmp	r3, #32
 800e020:	d900      	bls.n	800e024 <LCD_FillPixels+0x54>
 800e022:	2320      	movs	r3, #32
 800e024:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t *)fill, sz);
 800e026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e028:	2308      	movs	r3, #8
 800e02a:	18fb      	adds	r3, r7, r3
 800e02c:	0011      	movs	r1, r2
 800e02e:	0018      	movs	r0, r3
 800e030:	f7ff fe74 	bl	800dd1c <LCD_WriteData>
      pixels -= sz;
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	607b      	str	r3, [r7, #4]
    while (pixels)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1ec      	bne.n	800e01c <LCD_FillPixels+0x4c>
}
 800e042:	46c0      	nop			@ (mov r8, r8)
 800e044:	46bd      	mov	sp, r7
 800e046:	b014      	add	sp, #80	@ 0x50
 800e048:	bd80      	pop	{r7, pc}
	...

0800e04c <LCD_FillArea>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void (*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t)
{
<<<<<<< HEAD
 800ef10:	b5b0      	push	{r4, r5, r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	0005      	movs	r5, r0
 800ef18:	000c      	movs	r4, r1
 800ef1a:	0010      	movs	r0, r2
 800ef1c:	0019      	movs	r1, r3
 800ef1e:	1dbb      	adds	r3, r7, #6
 800ef20:	1c2a      	adds	r2, r5, #0
 800ef22:	801a      	strh	r2, [r3, #0]
 800ef24:	1d3b      	adds	r3, r7, #4
 800ef26:	1c22      	adds	r2, r4, #0
 800ef28:	801a      	strh	r2, [r3, #0]
 800ef2a:	1cbb      	adds	r3, r7, #2
 800ef2c:	1c02      	adds	r2, r0, #0
 800ef2e:	801a      	strh	r2, [r3, #0]
 800ef30:	003b      	movs	r3, r7
 800ef32:	1c0a      	adds	r2, r1, #0
 800ef34:	801a      	strh	r2, [r3, #0]
  if (x0 == -1)
 800ef36:	1dbb      	adds	r3, r7, #6
 800ef38:	2200      	movs	r2, #0
 800ef3a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	d105      	bne.n	800ef4c <LCD_FillArea+0x3c>
  {
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 800ef40:	2100      	movs	r1, #0
 800ef42:	2001      	movs	r0, #1
 800ef44:	f7ff fd80 	bl	800ea48 <setDMAMemMode>
=======
 800e04c:	b5b0      	push	{r4, r5, r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	0005      	movs	r5, r0
 800e054:	000c      	movs	r4, r1
 800e056:	0010      	movs	r0, r2
 800e058:	0019      	movs	r1, r3
 800e05a:	1dbb      	adds	r3, r7, #6
 800e05c:	1c2a      	adds	r2, r5, #0
 800e05e:	801a      	strh	r2, [r3, #0]
 800e060:	1d3b      	adds	r3, r7, #4
 800e062:	1c22      	adds	r2, r4, #0
 800e064:	801a      	strh	r2, [r3, #0]
 800e066:	1cbb      	adds	r3, r7, #2
 800e068:	1c02      	adds	r2, r0, #0
 800e06a:	801a      	strh	r2, [r3, #0]
 800e06c:	003b      	movs	r3, r7
 800e06e:	1c0a      	adds	r2, r1, #0
 800e070:	801a      	strh	r2, [r3, #0]
  if (x0 == -1)
 800e072:	1dbb      	adds	r3, r7, #6
 800e074:	2200      	movs	r2, #0
 800e076:	5e9b      	ldrsh	r3, [r3, r2]
 800e078:	3301      	adds	r3, #1
 800e07a:	d105      	bne.n	800e088 <LCD_FillArea+0x3c>
  {
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 800e07c:	2100      	movs	r1, #0
 800e07e:	2001      	movs	r0, #1
 800e080:	f7ff fd80 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
    setSPI_Size(mode_8bit); // Set SPI to 8 bit
#endif
    return NULL;
<<<<<<< HEAD
 800ef48:	2300      	movs	r3, #0
 800ef4a:	e017      	b.n	800ef7c <LCD_FillArea+0x6c>
  }
  LCD_SetAddressWindow(x0, y0, x1, y1);
 800ef4c:	003b      	movs	r3, r7
 800ef4e:	2400      	movs	r4, #0
 800ef50:	5f1c      	ldrsh	r4, [r3, r4]
 800ef52:	1cbb      	adds	r3, r7, #2
 800ef54:	2200      	movs	r2, #0
 800ef56:	5e9a      	ldrsh	r2, [r3, r2]
 800ef58:	1d3b      	adds	r3, r7, #4
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	5e59      	ldrsh	r1, [r3, r1]
 800ef5e:	1dbb      	adds	r3, r7, #6
 800ef60:	2000      	movs	r0, #0
 800ef62:	5e18      	ldrsh	r0, [r3, r0]
 800ef64:	0023      	movs	r3, r4
 800ef66:	f7ff feb5 	bl	800ecd4 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800ef6a:	2101      	movs	r1, #1
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f7ff fd6b 	bl	800ea48 <setDMAMemMode>
=======
 800e084:	2300      	movs	r3, #0
 800e086:	e017      	b.n	800e0b8 <LCD_FillArea+0x6c>
  }
  LCD_SetAddressWindow(x0, y0, x1, y1);
 800e088:	003b      	movs	r3, r7
 800e08a:	2400      	movs	r4, #0
 800e08c:	5f1c      	ldrsh	r4, [r3, r4]
 800e08e:	1cbb      	adds	r3, r7, #2
 800e090:	2200      	movs	r2, #0
 800e092:	5e9a      	ldrsh	r2, [r3, r2]
 800e094:	1d3b      	adds	r3, r7, #4
 800e096:	2100      	movs	r1, #0
 800e098:	5e59      	ldrsh	r1, [r3, r1]
 800e09a:	1dbb      	adds	r3, r7, #6
 800e09c:	2000      	movs	r0, #0
 800e09e:	5e18      	ldrsh	r0, [r3, r0]
 800e0a0:	0023      	movs	r3, r4
 800e0a2:	f7ff feb5 	bl	800de10 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	f7ff fd6b 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC, SET);
<<<<<<< HEAD
 800ef72:	4b04      	ldr	r3, [pc, #16]	@ (800ef84 <LCD_FillArea+0x74>)
 800ef74:	2280      	movs	r2, #128	@ 0x80
 800ef76:	0052      	lsls	r2, r2, #1
 800ef78:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 800ef7a:	4b03      	ldr	r3, [pc, #12]	@ (800ef88 <LCD_FillArea+0x78>)
}
 800ef7c:	0018      	movs	r0, r3
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	b002      	add	sp, #8
 800ef82:	bdb0      	pop	{r4, r5, r7, pc}
 800ef84:	48000400 	.word	0x48000400
 800ef88:	0800ee95 	.word	0x0800ee95

0800ef8c <LCD_Fill>:
=======
 800e0ae:	4b04      	ldr	r3, [pc, #16]	@ (800e0c0 <LCD_FillArea+0x74>)
 800e0b0:	2280      	movs	r2, #128	@ 0x80
 800e0b2:	0052      	lsls	r2, r2, #1
 800e0b4:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 800e0b6:	4b03      	ldr	r3, [pc, #12]	@ (800e0c4 <LCD_FillArea+0x78>)
}
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b002      	add	sp, #8
 800e0be:	bdb0      	pop	{r4, r5, r7, pc}
 800e0c0:	48000400 	.word	0x48000400
 800e0c4:	0800dfd1 	.word	0x0800dfd1

0800e0c8 <LCD_Fill>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
<<<<<<< HEAD
 800ef8c:	b5b0      	push	{r4, r5, r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	0005      	movs	r5, r0
 800ef94:	000c      	movs	r4, r1
 800ef96:	0010      	movs	r0, r2
 800ef98:	0019      	movs	r1, r3
 800ef9a:	1dbb      	adds	r3, r7, #6
 800ef9c:	1c2a      	adds	r2, r5, #0
 800ef9e:	801a      	strh	r2, [r3, #0]
 800efa0:	1d3b      	adds	r3, r7, #4
 800efa2:	1c22      	adds	r2, r4, #0
 800efa4:	801a      	strh	r2, [r3, #0]
 800efa6:	1cbb      	adds	r3, r7, #2
 800efa8:	1c02      	adds	r2, r0, #0
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	003b      	movs	r3, r7
 800efae:	1c0a      	adds	r2, r1, #0
 800efb0:	801a      	strh	r2, [r3, #0]
  uint32_t pixels = (uint32_t)(xEnd - xSta + 1) * (yEnd - ySta + 1);
 800efb2:	1cbb      	adds	r3, r7, #2
 800efb4:	881a      	ldrh	r2, [r3, #0]
 800efb6:	1dbb      	adds	r3, r7, #6
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	3301      	adds	r3, #1
 800efbe:	0019      	movs	r1, r3
 800efc0:	003b      	movs	r3, r7
 800efc2:	881a      	ldrh	r2, [r3, #0]
 800efc4:	1d3b      	adds	r3, r7, #4
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	3301      	adds	r3, #1
 800efcc:	434b      	muls	r3, r1
 800efce:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800efd0:	1dbb      	adds	r3, r7, #6
 800efd2:	2000      	movs	r0, #0
 800efd4:	5e18      	ldrsh	r0, [r3, r0]
 800efd6:	1d3b      	adds	r3, r7, #4
 800efd8:	2100      	movs	r1, #0
 800efda:	5e59      	ldrsh	r1, [r3, r1]
 800efdc:	1cbb      	adds	r3, r7, #2
 800efde:	2200      	movs	r2, #0
 800efe0:	5e9a      	ldrsh	r2, [r3, r2]
 800efe2:	003b      	movs	r3, r7
 800efe4:	2400      	movs	r4, #0
 800efe6:	5f1b      	ldrsh	r3, [r3, r4]
 800efe8:	f7ff fe74 	bl	800ecd4 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800efec:	2101      	movs	r1, #1
 800efee:	2000      	movs	r0, #0
 800eff0:	f7ff fd2a 	bl	800ea48 <setDMAMemMode>
=======
 800e0c8:	b5b0      	push	{r4, r5, r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	0005      	movs	r5, r0
 800e0d0:	000c      	movs	r4, r1
 800e0d2:	0010      	movs	r0, r2
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	1dbb      	adds	r3, r7, #6
 800e0d8:	1c2a      	adds	r2, r5, #0
 800e0da:	801a      	strh	r2, [r3, #0]
 800e0dc:	1d3b      	adds	r3, r7, #4
 800e0de:	1c22      	adds	r2, r4, #0
 800e0e0:	801a      	strh	r2, [r3, #0]
 800e0e2:	1cbb      	adds	r3, r7, #2
 800e0e4:	1c02      	adds	r2, r0, #0
 800e0e6:	801a      	strh	r2, [r3, #0]
 800e0e8:	003b      	movs	r3, r7
 800e0ea:	1c0a      	adds	r2, r1, #0
 800e0ec:	801a      	strh	r2, [r3, #0]
  uint32_t pixels = (uint32_t)(xEnd - xSta + 1) * (yEnd - ySta + 1);
 800e0ee:	1cbb      	adds	r3, r7, #2
 800e0f0:	881a      	ldrh	r2, [r3, #0]
 800e0f2:	1dbb      	adds	r3, r7, #6
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	0019      	movs	r1, r3
 800e0fc:	003b      	movs	r3, r7
 800e0fe:	881a      	ldrh	r2, [r3, #0]
 800e100:	1d3b      	adds	r3, r7, #4
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	3301      	adds	r3, #1
 800e108:	434b      	muls	r3, r1
 800e10a:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800e10c:	1dbb      	adds	r3, r7, #6
 800e10e:	2000      	movs	r0, #0
 800e110:	5e18      	ldrsh	r0, [r3, r0]
 800e112:	1d3b      	adds	r3, r7, #4
 800e114:	2100      	movs	r1, #0
 800e116:	5e59      	ldrsh	r1, [r3, r1]
 800e118:	1cbb      	adds	r3, r7, #2
 800e11a:	2200      	movs	r2, #0
 800e11c:	5e9a      	ldrsh	r2, [r3, r2]
 800e11e:	003b      	movs	r3, r7
 800e120:	2400      	movs	r4, #0
 800e122:	5f1b      	ldrsh	r3, [r3, r4]
 800e124:	f7ff fe74 	bl	800de10 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit);
 800e128:	2101      	movs	r1, #1
 800e12a:	2000      	movs	r0, #0
 800e12c:	f7ff fd2a 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
<<<<<<< HEAD
 800eff4:	2320      	movs	r3, #32
 800eff6:	18fb      	adds	r3, r7, r3
 800eff8:	881a      	ldrh	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	0011      	movs	r1, r2
 800effe:	0018      	movs	r0, r3
 800f000:	f7ff ff48 	bl	800ee94 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 800f004:	2100      	movs	r1, #0
 800f006:	2001      	movs	r0, #1
 800f008:	f7ff fd1e 	bl	800ea48 <setDMAMemMode>
=======
 800e130:	2320      	movs	r3, #32
 800e132:	18fb      	adds	r3, r7, r3
 800e134:	881a      	ldrh	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	0011      	movs	r1, r2
 800e13a:	0018      	movs	r0, r3
 800e13c:	f7ff ff48 	bl	800dfd0 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 800e140:	2100      	movs	r1, #0
 800e142:	2001      	movs	r0, #1
 800e144:	f7ff fd1e 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
<<<<<<< HEAD
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	0018      	movs	r0, r3
 800f010:	46bd      	mov	sp, r7
 800f012:	b004      	add	sp, #16
 800f014:	bdb0      	pop	{r4, r5, r7, pc}

0800f016 <LCD_DrawImage>:
=======
 800e148:	2300      	movs	r3, #0
}
 800e14a:	0018      	movs	r0, r3
 800e14c:	46bd      	mov	sp, r7
 800e14e:	b004      	add	sp, #16
 800e150:	bdb0      	pop	{r4, r5, r7, pc}

0800e152 <LCD_DrawImage>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP *bmp)
{
<<<<<<< HEAD
 800f016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f018:	b085      	sub	sp, #20
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	603a      	str	r2, [r7, #0]
 800f01e:	1dbb      	adds	r3, r7, #6
 800f020:	1c02      	adds	r2, r0, #0
 800f022:	801a      	strh	r2, [r3, #0]
 800f024:	1d3b      	adds	r3, r7, #4
 800f026:	1c0a      	adds	r2, r1, #0
 800f028:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 800f02a:	250e      	movs	r5, #14
 800f02c:	197b      	adds	r3, r7, r5
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	8892      	ldrh	r2, [r2, #4]
 800f032:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 800f034:	260c      	movs	r6, #12
 800f036:	19bb      	adds	r3, r7, r6
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	88d2      	ldrh	r2, [r2, #6]
 800f03c:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH - 1) || (y > LCD_HEIGHT - 1))
 800f03e:	1dbb      	adds	r3, r7, #6
 800f040:	881a      	ldrh	r2, [r3, #0]
 800f042:	23a0      	movs	r3, #160	@ 0xa0
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	429a      	cmp	r2, r3
 800f048:	d245      	bcs.n	800f0d6 <LCD_DrawImage+0xc0>
 800f04a:	1d3b      	adds	r3, r7, #4
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	2bab      	cmp	r3, #171	@ 0xab
 800f050:	d841      	bhi.n	800f0d6 <LCD_DrawImage+0xc0>
    return;
  if ((x + w - 1) > LCD_WIDTH - 1)
 800f052:	1dbb      	adds	r3, r7, #6
 800f054:	881a      	ldrh	r2, [r3, #0]
 800f056:	197b      	adds	r3, r7, r5
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	18d2      	adds	r2, r2, r3
 800f05c:	23a0      	movs	r3, #160	@ 0xa0
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	429a      	cmp	r2, r3
 800f062:	dc3a      	bgt.n	800f0da <LCD_DrawImage+0xc4>
    return;
  if ((y + h - 1) > LCD_HEIGHT - 1)
 800f064:	1d3b      	adds	r3, r7, #4
 800f066:	881a      	ldrh	r2, [r3, #0]
 800f068:	19bb      	adds	r3, r7, r6
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	18d3      	adds	r3, r2, r3
 800f06e:	2bac      	cmp	r3, #172	@ 0xac
 800f070:	dc35      	bgt.n	800f0de <LCD_DrawImage+0xc8>
    return;
  if (bmp->bpp != BMP_BPP_16)
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	7a1b      	ldrb	r3, [r3, #8]
 800f076:	2b10      	cmp	r3, #16
 800f078:	d133      	bne.n	800f0e2 <LCD_DrawImage+0xcc>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800f07a:	1dbb      	adds	r3, r7, #6
 800f07c:	2000      	movs	r0, #0
 800f07e:	5e18      	ldrsh	r0, [r3, r0]
 800f080:	1d3b      	adds	r3, r7, #4
 800f082:	2100      	movs	r1, #0
 800f084:	5e59      	ldrsh	r1, [r3, r1]
 800f086:	1dba      	adds	r2, r7, #6
 800f088:	197b      	adds	r3, r7, r5
 800f08a:	8812      	ldrh	r2, [r2, #0]
 800f08c:	881b      	ldrh	r3, [r3, #0]
 800f08e:	18d3      	adds	r3, r2, r3
 800f090:	b29b      	uxth	r3, r3
 800f092:	3b01      	subs	r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	b21c      	sxth	r4, r3
 800f098:	1d3a      	adds	r2, r7, #4
 800f09a:	19bb      	adds	r3, r7, r6
 800f09c:	8812      	ldrh	r2, [r2, #0]
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	18d3      	adds	r3, r2, r3
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	0022      	movs	r2, r4
 800f0ac:	f7ff fe12 	bl	800ecd4 <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit); // Set SPI and DMA to 16 bit, enable memory increase
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	f7ff fcc8 	bl	800ea48 <setDMAMemMode>
=======
 800e152:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e154:	b085      	sub	sp, #20
 800e156:	af00      	add	r7, sp, #0
 800e158:	603a      	str	r2, [r7, #0]
 800e15a:	1dbb      	adds	r3, r7, #6
 800e15c:	1c02      	adds	r2, r0, #0
 800e15e:	801a      	strh	r2, [r3, #0]
 800e160:	1d3b      	adds	r3, r7, #4
 800e162:	1c0a      	adds	r2, r1, #0
 800e164:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 800e166:	250e      	movs	r5, #14
 800e168:	197b      	adds	r3, r7, r5
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	8892      	ldrh	r2, [r2, #4]
 800e16e:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 800e170:	260c      	movs	r6, #12
 800e172:	19bb      	adds	r3, r7, r6
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	88d2      	ldrh	r2, [r2, #6]
 800e178:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH - 1) || (y > LCD_HEIGHT - 1))
 800e17a:	1dbb      	adds	r3, r7, #6
 800e17c:	881a      	ldrh	r2, [r3, #0]
 800e17e:	23a0      	movs	r3, #160	@ 0xa0
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	429a      	cmp	r2, r3
 800e184:	d245      	bcs.n	800e212 <LCD_DrawImage+0xc0>
 800e186:	1d3b      	adds	r3, r7, #4
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	2bab      	cmp	r3, #171	@ 0xab
 800e18c:	d841      	bhi.n	800e212 <LCD_DrawImage+0xc0>
    return;
  if ((x + w - 1) > LCD_WIDTH - 1)
 800e18e:	1dbb      	adds	r3, r7, #6
 800e190:	881a      	ldrh	r2, [r3, #0]
 800e192:	197b      	adds	r3, r7, r5
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	18d2      	adds	r2, r2, r3
 800e198:	23a0      	movs	r3, #160	@ 0xa0
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	429a      	cmp	r2, r3
 800e19e:	dc3a      	bgt.n	800e216 <LCD_DrawImage+0xc4>
    return;
  if ((y + h - 1) > LCD_HEIGHT - 1)
 800e1a0:	1d3b      	adds	r3, r7, #4
 800e1a2:	881a      	ldrh	r2, [r3, #0]
 800e1a4:	19bb      	adds	r3, r7, r6
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	18d3      	adds	r3, r2, r3
 800e1aa:	2bac      	cmp	r3, #172	@ 0xac
 800e1ac:	dc35      	bgt.n	800e21a <LCD_DrawImage+0xc8>
    return;
  if (bmp->bpp != BMP_BPP_16)
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	7a1b      	ldrb	r3, [r3, #8]
 800e1b2:	2b10      	cmp	r3, #16
 800e1b4:	d133      	bne.n	800e21e <LCD_DrawImage+0xcc>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800e1b6:	1dbb      	adds	r3, r7, #6
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	5e18      	ldrsh	r0, [r3, r0]
 800e1bc:	1d3b      	adds	r3, r7, #4
 800e1be:	2100      	movs	r1, #0
 800e1c0:	5e59      	ldrsh	r1, [r3, r1]
 800e1c2:	1dba      	adds	r2, r7, #6
 800e1c4:	197b      	adds	r3, r7, r5
 800e1c6:	8812      	ldrh	r2, [r2, #0]
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	18d3      	adds	r3, r2, r3
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	b21c      	sxth	r4, r3
 800e1d4:	1d3a      	adds	r2, r7, #4
 800e1d6:	19bb      	adds	r3, r7, r6
 800e1d8:	8812      	ldrh	r2, [r2, #0]
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	18d3      	adds	r3, r2, r3
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	0022      	movs	r2, r4
 800e1e8:	f7ff fe12 	bl	800de10 <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit); // Set SPI and DMA to 16 bit, enable memory increase
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	2001      	movs	r0, #1
 800e1f0:	f7ff fcc8 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_WriteData((uint8_t *)bmp->p, w * h);
<<<<<<< HEAD
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	6818      	ldr	r0, [r3, #0]
 800f0bc:	197b      	adds	r3, r7, r5
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	19ba      	adds	r2, r7, r6
 800f0c2:	8812      	ldrh	r2, [r2, #0]
 800f0c4:	4353      	muls	r3, r2
 800f0c6:	0019      	movs	r1, r3
 800f0c8:	f7ff fd8a 	bl	800ebe0 <LCD_WriteData>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); // Set SPI and DMA to 16 bit, enable memory increase
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	2001      	movs	r0, #1
 800f0d0:	f7ff fcba 	bl	800ea48 <setDMAMemMode>
 800f0d4:	e006      	b.n	800f0e4 <LCD_DrawImage+0xce>
    return;
 800f0d6:	46c0      	nop			@ (mov r8, r8)
 800f0d8:	e004      	b.n	800f0e4 <LCD_DrawImage+0xce>
    return;
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	e002      	b.n	800f0e4 <LCD_DrawImage+0xce>
    return;
 800f0de:	46c0      	nop			@ (mov r8, r8)
 800f0e0:	e000      	b.n	800f0e4 <LCD_DrawImage+0xce>
    return;
 800f0e2:	46c0      	nop			@ (mov r8, r8)
=======
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	197b      	adds	r3, r7, r5
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	19ba      	adds	r2, r7, r6
 800e1fe:	8812      	ldrh	r2, [r2, #0]
 800e200:	4353      	muls	r3, r2
 800e202:	0019      	movs	r1, r3
 800e204:	f7ff fd8a 	bl	800dd1c <LCD_WriteData>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); // Set SPI and DMA to 16 bit, enable memory increase
 800e208:	2100      	movs	r1, #0
 800e20a:	2001      	movs	r0, #1
 800e20c:	f7ff fcba 	bl	800db84 <setDMAMemMode>
 800e210:	e006      	b.n	800e220 <LCD_DrawImage+0xce>
    return;
 800e212:	46c0      	nop			@ (mov r8, r8)
 800e214:	e004      	b.n	800e220 <LCD_DrawImage+0xce>
    return;
 800e216:	46c0      	nop			@ (mov r8, r8)
 800e218:	e002      	b.n	800e220 <LCD_DrawImage+0xce>
    return;
 800e21a:	46c0      	nop			@ (mov r8, r8)
 800e21c:	e000      	b.n	800e220 <LCD_DrawImage+0xce>
    return;
 800e21e:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_8bit); // Set SPI to 16 bit
#endif
}
<<<<<<< HEAD
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	b005      	add	sp, #20
 800f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0ea <LCD_DrawLine>:
=======
 800e220:	46bd      	mov	sp, r7
 800e222:	b005      	add	sp, #20
 800e224:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e226 <LCD_DrawLine>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
<<<<<<< HEAD
 800f0ea:	b5b0      	push	{r4, r5, r7, lr}
 800f0ec:	b086      	sub	sp, #24
 800f0ee:	af02      	add	r7, sp, #8
 800f0f0:	0005      	movs	r5, r0
 800f0f2:	000c      	movs	r4, r1
 800f0f4:	0010      	movs	r0, r2
 800f0f6:	0019      	movs	r1, r3
 800f0f8:	1dbb      	adds	r3, r7, #6
 800f0fa:	1c2a      	adds	r2, r5, #0
 800f0fc:	801a      	strh	r2, [r3, #0]
 800f0fe:	1d3b      	adds	r3, r7, #4
 800f100:	1c22      	adds	r2, r4, #0
 800f102:	801a      	strh	r2, [r3, #0]
 800f104:	1cbb      	adds	r3, r7, #2
 800f106:	1c02      	adds	r2, r0, #0
 800f108:	801a      	strh	r2, [r3, #0]
 800f10a:	003b      	movs	r3, r7
 800f10c:	1c0a      	adds	r2, r1, #0
 800f10e:	801a      	strh	r2, [r3, #0]

  if (x0 == x1)
 800f110:	1dba      	adds	r2, r7, #6
 800f112:	1cbb      	adds	r3, r7, #2
 800f114:	8812      	ldrh	r2, [r2, #0]
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d113      	bne.n	800f144 <LCD_DrawLine+0x5a>
  { // If horizontal
    if (y0 > y1)
 800f11c:	1d3a      	adds	r2, r7, #4
 800f11e:	003b      	movs	r3, r7
 800f120:	8812      	ldrh	r2, [r2, #0]
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d92a      	bls.n	800f17e <LCD_DrawLine+0x94>
      swap(y0, y1);
 800f128:	210c      	movs	r1, #12
 800f12a:	187b      	adds	r3, r7, r1
 800f12c:	1d3a      	adds	r2, r7, #4
 800f12e:	8812      	ldrh	r2, [r2, #0]
 800f130:	801a      	strh	r2, [r3, #0]
 800f132:	1d3b      	adds	r3, r7, #4
 800f134:	003a      	movs	r2, r7
 800f136:	8812      	ldrh	r2, [r2, #0]
 800f138:	801a      	strh	r2, [r3, #0]
 800f13a:	003b      	movs	r3, r7
 800f13c:	187a      	adds	r2, r7, r1
 800f13e:	8812      	ldrh	r2, [r2, #0]
 800f140:	801a      	strh	r2, [r3, #0]
 800f142:	e01c      	b.n	800f17e <LCD_DrawLine+0x94>
  }
  else if (y0 == y1)
 800f144:	1d3a      	adds	r2, r7, #4
 800f146:	003b      	movs	r3, r7
 800f148:	8812      	ldrh	r2, [r2, #0]
 800f14a:	881b      	ldrh	r3, [r3, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d113      	bne.n	800f178 <LCD_DrawLine+0x8e>
  { // If vertical
    if (x0 > x1)
 800f150:	1dba      	adds	r2, r7, #6
 800f152:	1cbb      	adds	r3, r7, #2
 800f154:	8812      	ldrh	r2, [r2, #0]
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d910      	bls.n	800f17e <LCD_DrawLine+0x94>
      swap(x0, x1);
 800f15c:	210e      	movs	r1, #14
 800f15e:	187b      	adds	r3, r7, r1
 800f160:	1dba      	adds	r2, r7, #6
 800f162:	8812      	ldrh	r2, [r2, #0]
 800f164:	801a      	strh	r2, [r3, #0]
 800f166:	1dbb      	adds	r3, r7, #6
 800f168:	1cba      	adds	r2, r7, #2
 800f16a:	8812      	ldrh	r2, [r2, #0]
 800f16c:	801a      	strh	r2, [r3, #0]
 800f16e:	1cbb      	adds	r3, r7, #2
 800f170:	187a      	adds	r2, r7, r1
 800f172:	8812      	ldrh	r2, [r2, #0]
 800f174:	801a      	strh	r2, [r3, #0]
 800f176:	e002      	b.n	800f17e <LCD_DrawLine+0x94>
=======
 800e226:	b5b0      	push	{r4, r5, r7, lr}
 800e228:	b086      	sub	sp, #24
 800e22a:	af02      	add	r7, sp, #8
 800e22c:	0005      	movs	r5, r0
 800e22e:	000c      	movs	r4, r1
 800e230:	0010      	movs	r0, r2
 800e232:	0019      	movs	r1, r3
 800e234:	1dbb      	adds	r3, r7, #6
 800e236:	1c2a      	adds	r2, r5, #0
 800e238:	801a      	strh	r2, [r3, #0]
 800e23a:	1d3b      	adds	r3, r7, #4
 800e23c:	1c22      	adds	r2, r4, #0
 800e23e:	801a      	strh	r2, [r3, #0]
 800e240:	1cbb      	adds	r3, r7, #2
 800e242:	1c02      	adds	r2, r0, #0
 800e244:	801a      	strh	r2, [r3, #0]
 800e246:	003b      	movs	r3, r7
 800e248:	1c0a      	adds	r2, r1, #0
 800e24a:	801a      	strh	r2, [r3, #0]

  if (x0 == x1)
 800e24c:	1dba      	adds	r2, r7, #6
 800e24e:	1cbb      	adds	r3, r7, #2
 800e250:	8812      	ldrh	r2, [r2, #0]
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	429a      	cmp	r2, r3
 800e256:	d113      	bne.n	800e280 <LCD_DrawLine+0x5a>
  { // If horizontal
    if (y0 > y1)
 800e258:	1d3a      	adds	r2, r7, #4
 800e25a:	003b      	movs	r3, r7
 800e25c:	8812      	ldrh	r2, [r2, #0]
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	429a      	cmp	r2, r3
 800e262:	d92a      	bls.n	800e2ba <LCD_DrawLine+0x94>
      swap(y0, y1);
 800e264:	210c      	movs	r1, #12
 800e266:	187b      	adds	r3, r7, r1
 800e268:	1d3a      	adds	r2, r7, #4
 800e26a:	8812      	ldrh	r2, [r2, #0]
 800e26c:	801a      	strh	r2, [r3, #0]
 800e26e:	1d3b      	adds	r3, r7, #4
 800e270:	003a      	movs	r2, r7
 800e272:	8812      	ldrh	r2, [r2, #0]
 800e274:	801a      	strh	r2, [r3, #0]
 800e276:	003b      	movs	r3, r7
 800e278:	187a      	adds	r2, r7, r1
 800e27a:	8812      	ldrh	r2, [r2, #0]
 800e27c:	801a      	strh	r2, [r3, #0]
 800e27e:	e01c      	b.n	800e2ba <LCD_DrawLine+0x94>
  }
  else if (y0 == y1)
 800e280:	1d3a      	adds	r2, r7, #4
 800e282:	003b      	movs	r3, r7
 800e284:	8812      	ldrh	r2, [r2, #0]
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d113      	bne.n	800e2b4 <LCD_DrawLine+0x8e>
  { // If vertical
    if (x0 > x1)
 800e28c:	1dba      	adds	r2, r7, #6
 800e28e:	1cbb      	adds	r3, r7, #2
 800e290:	8812      	ldrh	r2, [r2, #0]
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d910      	bls.n	800e2ba <LCD_DrawLine+0x94>
      swap(x0, x1);
 800e298:	210e      	movs	r1, #14
 800e29a:	187b      	adds	r3, r7, r1
 800e29c:	1dba      	adds	r2, r7, #6
 800e29e:	8812      	ldrh	r2, [r2, #0]
 800e2a0:	801a      	strh	r2, [r3, #0]
 800e2a2:	1dbb      	adds	r3, r7, #6
 800e2a4:	1cba      	adds	r2, r7, #2
 800e2a6:	8812      	ldrh	r2, [r2, #0]
 800e2a8:	801a      	strh	r2, [r3, #0]
 800e2aa:	1cbb      	adds	r3, r7, #2
 800e2ac:	187a      	adds	r2, r7, r1
 800e2ae:	8812      	ldrh	r2, [r2, #0]
 800e2b0:	801a      	strh	r2, [r3, #0]
 800e2b2:	e002      	b.n	800e2ba <LCD_DrawLine+0x94>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  { // Else, return fail, draw using software
    return UG_RESULT_FAIL;
<<<<<<< HEAD
 800f178:	2301      	movs	r3, #1
 800f17a:	425b      	negs	r3, r3
 800f17c:	e00f      	b.n	800f19e <LCD_DrawLine+0xb4>
  }

  LCD_Fill(x0, y0, x1, y1, color); // Draw using acceleration
 800f17e:	003b      	movs	r3, r7
 800f180:	881c      	ldrh	r4, [r3, #0]
 800f182:	1cbb      	adds	r3, r7, #2
 800f184:	881a      	ldrh	r2, [r3, #0]
 800f186:	1d3b      	adds	r3, r7, #4
 800f188:	8819      	ldrh	r1, [r3, #0]
 800f18a:	1dbb      	adds	r3, r7, #6
 800f18c:	8818      	ldrh	r0, [r3, #0]
 800f18e:	2320      	movs	r3, #32
 800f190:	18fb      	adds	r3, r7, r3
 800f192:	881b      	ldrh	r3, [r3, #0]
 800f194:	9300      	str	r3, [sp, #0]
 800f196:	0023      	movs	r3, r4
 800f198:	f7ff fef8 	bl	800ef8c <LCD_Fill>
  return UG_RESULT_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	0018      	movs	r0, r3
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	b004      	add	sp, #16
 800f1a4:	bdb0      	pop	{r4, r5, r7, pc}

0800f1a6 <LCD_PutStr>:
=======
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	425b      	negs	r3, r3
 800e2b8:	e00f      	b.n	800e2da <LCD_DrawLine+0xb4>
  }

  LCD_Fill(x0, y0, x1, y1, color); // Draw using acceleration
 800e2ba:	003b      	movs	r3, r7
 800e2bc:	881c      	ldrh	r4, [r3, #0]
 800e2be:	1cbb      	adds	r3, r7, #2
 800e2c0:	881a      	ldrh	r2, [r3, #0]
 800e2c2:	1d3b      	adds	r3, r7, #4
 800e2c4:	8819      	ldrh	r1, [r3, #0]
 800e2c6:	1dbb      	adds	r3, r7, #6
 800e2c8:	8818      	ldrh	r0, [r3, #0]
 800e2ca:	2320      	movs	r3, #32
 800e2cc:	18fb      	adds	r3, r7, r3
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	0023      	movs	r3, r4
 800e2d4:	f7ff fef8 	bl	800e0c8 <LCD_Fill>
  return UG_RESULT_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	0018      	movs	r0, r3
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	b004      	add	sp, #16
 800e2e0:	bdb0      	pop	{r4, r5, r7, pc}

0800e2e2 <LCD_PutStr>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y, char *str, UG_FONT *font, uint16_t color, uint16_t bgcolor)
{
<<<<<<< HEAD
 800f1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1a8:	b085      	sub	sp, #20
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60ba      	str	r2, [r7, #8]
 800f1ae:	607b      	str	r3, [r7, #4]
 800f1b0:	240e      	movs	r4, #14
 800f1b2:	193b      	adds	r3, r7, r4
 800f1b4:	1c02      	adds	r2, r0, #0
 800f1b6:	801a      	strh	r2, [r3, #0]
 800f1b8:	250c      	movs	r5, #12
 800f1ba:	197b      	adds	r3, r7, r5
 800f1bc:	1c0a      	adds	r2, r1, #0
 800f1be:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	0018      	movs	r0, r3
 800f1c4:	f000 f970 	bl	800f4a8 <UG_FontSelect>
  UG_SetForecolor(color);
 800f1c8:	2318      	movs	r3, #24
 800f1ca:	2608      	movs	r6, #8
 800f1cc:	199b      	adds	r3, r3, r6
 800f1ce:	2208      	movs	r2, #8
 800f1d0:	4694      	mov	ip, r2
 800f1d2:	44bc      	add	ip, r7
 800f1d4:	4463      	add	r3, ip
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	0018      	movs	r0, r3
 800f1da:	f000 fc61 	bl	800faa0 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800f1de:	231c      	movs	r3, #28
 800f1e0:	199b      	adds	r3, r3, r6
 800f1e2:	2208      	movs	r2, #8
 800f1e4:	4694      	mov	ip, r2
 800f1e6:	44bc      	add	ip, r7
 800f1e8:	4463      	add	r3, ip
 800f1ea:	881b      	ldrh	r3, [r3, #0]
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	f000 fc69 	bl	800fac4 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 800f1f2:	193b      	adds	r3, r7, r4
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	5e18      	ldrsh	r0, [r3, r0]
 800f1f8:	197b      	adds	r3, r7, r5
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	5e9b      	ldrsh	r3, [r3, r2]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	0019      	movs	r1, r3
 800f202:	f000 fb8d 	bl	800f920 <UG_PutString>
}
 800f206:	46c0      	nop			@ (mov r8, r8)
 800f208:	46bd      	mov	sp, r7
 800f20a:	b005      	add	sp, #20
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f20e <LCD_setPower>:
=======
 800e2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60ba      	str	r2, [r7, #8]
 800e2ea:	607b      	str	r3, [r7, #4]
 800e2ec:	240e      	movs	r4, #14
 800e2ee:	193b      	adds	r3, r7, r4
 800e2f0:	1c02      	adds	r2, r0, #0
 800e2f2:	801a      	strh	r2, [r3, #0]
 800e2f4:	250c      	movs	r5, #12
 800e2f6:	197b      	adds	r3, r7, r5
 800e2f8:	1c0a      	adds	r2, r1, #0
 800e2fa:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	0018      	movs	r0, r3
 800e300:	f000 f970 	bl	800e5e4 <UG_FontSelect>
  UG_SetForecolor(color);
 800e304:	2318      	movs	r3, #24
 800e306:	2608      	movs	r6, #8
 800e308:	199b      	adds	r3, r3, r6
 800e30a:	2208      	movs	r2, #8
 800e30c:	4694      	mov	ip, r2
 800e30e:	44bc      	add	ip, r7
 800e310:	4463      	add	r3, ip
 800e312:	881b      	ldrh	r3, [r3, #0]
 800e314:	0018      	movs	r0, r3
 800e316:	f000 fc61 	bl	800ebdc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800e31a:	231c      	movs	r3, #28
 800e31c:	199b      	adds	r3, r3, r6
 800e31e:	2208      	movs	r2, #8
 800e320:	4694      	mov	ip, r2
 800e322:	44bc      	add	ip, r7
 800e324:	4463      	add	r3, ip
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	0018      	movs	r0, r3
 800e32a:	f000 fc69 	bl	800ec00 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 800e32e:	193b      	adds	r3, r7, r4
 800e330:	2000      	movs	r0, #0
 800e332:	5e18      	ldrsh	r0, [r3, r0]
 800e334:	197b      	adds	r3, r7, r5
 800e336:	2200      	movs	r2, #0
 800e338:	5e9b      	ldrsh	r3, [r3, r2]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	0019      	movs	r1, r3
 800e33e:	f000 fb8d 	bl	800ea5c <UG_PutString>
}
 800e342:	46c0      	nop			@ (mov r8, r8)
 800e344:	46bd      	mov	sp, r7
 800e346:	b005      	add	sp, #20
 800e348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e34a <LCD_setPower>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint8_t cmd[] = {(tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */)};
  LCD_WriteCommand(cmd, sizeof(cmd) - 1);
}

void LCD_setPower(uint8_t power)
{
<<<<<<< HEAD
 800f20e:	b580      	push	{r7, lr}
 800f210:	b084      	sub	sp, #16
 800f212:	af00      	add	r7, sp, #0
 800f214:	0002      	movs	r2, r0
 800f216:	1dfb      	adds	r3, r7, #7
 800f218:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[] = {(power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */)};
 800f21a:	1dfb      	adds	r3, r7, #7
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <LCD_setPower+0x18>
 800f222:	2229      	movs	r2, #41	@ 0x29
 800f224:	e000      	b.n	800f228 <LCD_setPower+0x1a>
 800f226:	2228      	movs	r2, #40	@ 0x28
 800f228:	210c      	movs	r1, #12
 800f22a:	187b      	adds	r3, r7, r1
 800f22c:	701a      	strb	r2, [r3, #0]
  LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800f22e:	187b      	adds	r3, r7, r1
 800f230:	2100      	movs	r1, #0
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fc9c 	bl	800eb70 <LCD_WriteCommand>
}
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	46bd      	mov	sp, r7
 800f23c:	b004      	add	sp, #16
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <LCD_Update>:

static void LCD_Update(void)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
=======
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	0002      	movs	r2, r0
 800e352:	1dfb      	adds	r3, r7, #7
 800e354:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[] = {(power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */)};
 800e356:	1dfb      	adds	r3, r7, #7
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d001      	beq.n	800e362 <LCD_setPower+0x18>
 800e35e:	2229      	movs	r2, #41	@ 0x29
 800e360:	e000      	b.n	800e364 <LCD_setPower+0x1a>
 800e362:	2228      	movs	r2, #40	@ 0x28
 800e364:	210c      	movs	r1, #12
 800e366:	187b      	adds	r3, r7, r1
 800e368:	701a      	strb	r2, [r3, #0]
  LCD_WriteCommand(cmd, sizeof(cmd) - 1);
 800e36a:	187b      	adds	r3, r7, r1
 800e36c:	2100      	movs	r1, #0
 800e36e:	0018      	movs	r0, r3
 800e370:	f7ff fc9c 	bl	800dcac <LCD_WriteCommand>
}
 800e374:	46c0      	nop			@ (mov r8, r8)
 800e376:	46bd      	mov	sp, r7
 800e378:	b004      	add	sp, #16
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <LCD_Update>:

static void LCD_Update(void)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  setSPI_Size(mode_16bit); // Set SPI to 16 bit
#endif
  LCD_WriteData((uint8_t *)fb, LCD_WIDTH * LCD_HEIGHT);
#endif
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); // Set SPI and DMA to 16 bit, enable memory increase
<<<<<<< HEAD
 800f244:	2100      	movs	r1, #0
 800f246:	2001      	movs	r0, #1
 800f248:	f7ff fbfe 	bl	800ea48 <setDMAMemMode>
=======
 800e380:	2100      	movs	r1, #0
 800e382:	2001      	movs	r0, #1
 800e384:	f7ff fbfe 	bl	800db84 <setDMAMemMode>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#else
  setSPI_Size(mode_8bit); // Set SPI to 16 bit
#endif
}
<<<<<<< HEAD
 800f24c:	46c0      	nop			@ (mov r8, r8)
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
	...

0800f254 <LCD_init>:
=======
 800e388:	46c0      	nop			@ (mov r8, r8)
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <LCD_init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @param none
 * @return none
 */

void LCD_init(void)
{
<<<<<<< HEAD
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800f25a:	4b2f      	ldr	r3, [pc, #188]	@ (800f318 <LCD_init+0xc4>)
 800f25c:	2280      	movs	r2, #128	@ 0x80
 800f25e:	0152      	lsls	r2, r2, #5
 800f260:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST, RESET);
 800f262:	4b2d      	ldr	r3, [pc, #180]	@ (800f318 <LCD_init+0xc4>)
 800f264:	2280      	movs	r2, #128	@ 0x80
 800f266:	0492      	lsls	r2, r2, #18
 800f268:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 800f26a:	2001      	movs	r0, #1
 800f26c:	f7f5 f8cc 	bl	8004408 <HAL_Delay>
  LCD_PIN(LCD_RST, SET);
 800f270:	4b29      	ldr	r3, [pc, #164]	@ (800f318 <LCD_init+0xc4>)
 800f272:	2280      	movs	r2, #128	@ 0x80
 800f274:	0092      	lsls	r2, r2, #2
 800f276:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 800f278:	20c8      	movs	r0, #200	@ 0xc8
 800f27a:	f7f5 f8c5 	bl	8004408 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800f27e:	4a27      	ldr	r2, [pc, #156]	@ (800f31c <LCD_init+0xc8>)
 800f280:	4b27      	ldr	r3, [pc, #156]	@ (800f320 <LCD_init+0xcc>)
 800f282:	0011      	movs	r1, r2
 800f284:	0018      	movs	r0, r3
 800f286:	f000 f86b 	bl	800f360 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800f28a:	4b26      	ldr	r3, [pc, #152]	@ (800f324 <LCD_init+0xd0>)
 800f28c:	0019      	movs	r1, r3
 800f28e:	2000      	movs	r0, #0
 800f290:	f001 ff3a 	bl	8011108 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 800f294:	4b24      	ldr	r3, [pc, #144]	@ (800f328 <LCD_init+0xd4>)
 800f296:	0019      	movs	r1, r3
 800f298:	2001      	movs	r0, #1
 800f29a:	f001 ff35 	bl	8011108 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800f29e:	4b23      	ldr	r3, [pc, #140]	@ (800f32c <LCD_init+0xd8>)
 800f2a0:	0019      	movs	r1, r3
 800f2a2:	2002      	movs	r0, #2
 800f2a4:	f001 ff30 	bl	8011108 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800f2a8:	4b21      	ldr	r3, [pc, #132]	@ (800f330 <LCD_init+0xdc>)
 800f2aa:	0019      	movs	r1, r3
 800f2ac:	2003      	movs	r0, #3
 800f2ae:	f001 ff2b 	bl	8011108 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	f000 fc18 	bl	800fae8 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	f000 fc29 	bl	800fb10 <UG_FontSetVSpace>
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800f2be:	1dbb      	adds	r3, r7, #6
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	801a      	strh	r2, [r3, #0]
 800f2c4:	e017      	b.n	800f2f6 <LCD_init+0xa2>
  {
    LCD_WriteCommand((uint8_t *)&init_cmd[i + 1], init_cmd[i]);
 800f2c6:	1dbb      	adds	r3, r7, #6
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	4b19      	ldr	r3, [pc, #100]	@ (800f334 <LCD_init+0xe0>)
 800f2ce:	18d0      	adds	r0, r2, r3
 800f2d0:	1dbb      	adds	r3, r7, #6
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	4a17      	ldr	r2, [pc, #92]	@ (800f334 <LCD_init+0xe0>)
 800f2d6:	5cd3      	ldrb	r3, [r2, r3]
 800f2d8:	0019      	movs	r1, r3
 800f2da:	f7ff fc49 	bl	800eb70 <LCD_WriteCommand>
    i += init_cmd[i] + 2;
 800f2de:	1dbb      	adds	r3, r7, #6
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	4a14      	ldr	r2, [pc, #80]	@ (800f334 <LCD_init+0xe0>)
 800f2e4:	5cd3      	ldrb	r3, [r2, r3]
 800f2e6:	001a      	movs	r2, r3
 800f2e8:	1dbb      	adds	r3, r7, #6
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	18d3      	adds	r3, r2, r3
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	1dbb      	adds	r3, r7, #6
 800f2f2:	3202      	adds	r2, #2
 800f2f4:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800f2f6:	1dbb      	adds	r3, r7, #6
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	2b4b      	cmp	r3, #75	@ 0x4b
 800f2fc:	d9e3      	bls.n	800f2c6 <LCD_init+0x72>
  }
  UG_FillScreen(C_BLACK); //  Clear screen
 800f2fe:	2000      	movs	r0, #0
 800f300:	f000 f8e0 	bl	800f4c4 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800f304:	2001      	movs	r0, #1
 800f306:	f7ff ff82 	bl	800f20e <LCD_setPower>
  UG_Update();
 800f30a:	f001 ff23 	bl	8011154 <UG_Update>
}
 800f30e:	46c0      	nop			@ (mov r8, r8)
 800f310:	46bd      	mov	sp, r7
 800f312:	b002      	add	sp, #8
 800f314:	bd80      	pop	{r7, pc}
 800f316:	46c0      	nop			@ (mov r8, r8)
 800f318:	48000400 	.word	0x48000400
 800f31c:	20000190 	.word	0x20000190
 800f320:	20000bd0 	.word	0x20000bd0
 800f324:	0800f0eb 	.word	0x0800f0eb
 800f328:	0800ef8d 	.word	0x0800ef8d
 800f32c:	0800ef11 	.word	0x0800ef11
 800f330:	0800f017 	.word	0x0800f017
 800f334:	080168d8 	.word	0x080168d8

0800f338 <ptr_8to16>:
=======
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS, SET);
 800e396:	4b2f      	ldr	r3, [pc, #188]	@ (800e454 <LCD_init+0xc4>)
 800e398:	2280      	movs	r2, #128	@ 0x80
 800e39a:	0152      	lsls	r2, r2, #5
 800e39c:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST, RESET);
 800e39e:	4b2d      	ldr	r3, [pc, #180]	@ (800e454 <LCD_init+0xc4>)
 800e3a0:	2280      	movs	r2, #128	@ 0x80
 800e3a2:	0492      	lsls	r2, r2, #18
 800e3a4:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 800e3a6:	2001      	movs	r0, #1
 800e3a8:	f7f5 fa46 	bl	8003838 <HAL_Delay>
  LCD_PIN(LCD_RST, SET);
 800e3ac:	4b29      	ldr	r3, [pc, #164]	@ (800e454 <LCD_init+0xc4>)
 800e3ae:	2280      	movs	r2, #128	@ 0x80
 800e3b0:	0092      	lsls	r2, r2, #2
 800e3b2:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 800e3b4:	20c8      	movs	r0, #200	@ 0xc8
 800e3b6:	f7f5 fa3f 	bl	8003838 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800e3ba:	4a27      	ldr	r2, [pc, #156]	@ (800e458 <LCD_init+0xc8>)
 800e3bc:	4b27      	ldr	r3, [pc, #156]	@ (800e45c <LCD_init+0xcc>)
 800e3be:	0011      	movs	r1, r2
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	f000 f86b 	bl	800e49c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800e3c6:	4b26      	ldr	r3, [pc, #152]	@ (800e460 <LCD_init+0xd0>)
 800e3c8:	0019      	movs	r1, r3
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	f001 ff3a 	bl	8010244 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 800e3d0:	4b24      	ldr	r3, [pc, #144]	@ (800e464 <LCD_init+0xd4>)
 800e3d2:	0019      	movs	r1, r3
 800e3d4:	2001      	movs	r0, #1
 800e3d6:	f001 ff35 	bl	8010244 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800e3da:	4b23      	ldr	r3, [pc, #140]	@ (800e468 <LCD_init+0xd8>)
 800e3dc:	0019      	movs	r1, r3
 800e3de:	2002      	movs	r0, #2
 800e3e0:	f001 ff30 	bl	8010244 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800e3e4:	4b21      	ldr	r3, [pc, #132]	@ (800e46c <LCD_init+0xdc>)
 800e3e6:	0019      	movs	r1, r3
 800e3e8:	2003      	movs	r0, #3
 800e3ea:	f001 ff2b 	bl	8010244 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	f000 fc18 	bl	800ec24 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	f000 fc29 	bl	800ec4c <UG_FontSetVSpace>
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800e3fa:	1dbb      	adds	r3, r7, #6
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	801a      	strh	r2, [r3, #0]
 800e400:	e017      	b.n	800e432 <LCD_init+0xa2>
  {
    LCD_WriteCommand((uint8_t *)&init_cmd[i + 1], init_cmd[i]);
 800e402:	1dbb      	adds	r3, r7, #6
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	4b19      	ldr	r3, [pc, #100]	@ (800e470 <LCD_init+0xe0>)
 800e40a:	18d0      	adds	r0, r2, r3
 800e40c:	1dbb      	adds	r3, r7, #6
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	4a17      	ldr	r2, [pc, #92]	@ (800e470 <LCD_init+0xe0>)
 800e412:	5cd3      	ldrb	r3, [r2, r3]
 800e414:	0019      	movs	r1, r3
 800e416:	f7ff fc49 	bl	800dcac <LCD_WriteCommand>
    i += init_cmd[i] + 2;
 800e41a:	1dbb      	adds	r3, r7, #6
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	4a14      	ldr	r2, [pc, #80]	@ (800e470 <LCD_init+0xe0>)
 800e420:	5cd3      	ldrb	r3, [r2, r3]
 800e422:	001a      	movs	r2, r3
 800e424:	1dbb      	adds	r3, r7, #6
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	18d3      	adds	r3, r2, r3
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	1dbb      	adds	r3, r7, #6
 800e42e:	3202      	adds	r2, #2
 800e430:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < sizeof(init_cmd);)
 800e432:	1dbb      	adds	r3, r7, #6
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	2b4b      	cmp	r3, #75	@ 0x4b
 800e438:	d9e3      	bls.n	800e402 <LCD_init+0x72>
  }
  UG_FillScreen(C_BLACK); //  Clear screen
 800e43a:	2000      	movs	r0, #0
 800e43c:	f000 f8e0 	bl	800e600 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800e440:	2001      	movs	r0, #1
 800e442:	f7ff ff82 	bl	800e34a <LCD_setPower>
  UG_Update();
 800e446:	f001 ff23 	bl	8010290 <UG_Update>
}
 800e44a:	46c0      	nop			@ (mov r8, r8)
 800e44c:	46bd      	mov	sp, r7
 800e44e:	b002      	add	sp, #8
 800e450:	bd80      	pop	{r7, pc}
 800e452:	46c0      	nop			@ (mov r8, r8)
 800e454:	48000400 	.word	0x48000400
 800e458:	20000198 	.word	0x20000198
 800e45c:	20000ac8 	.word	0x20000ac8
 800e460:	0800e227 	.word	0x0800e227
 800e464:	0800e0c9 	.word	0x0800e0c9
 800e468:	0800e04d 	.word	0x0800e04d
 800e46c:	0800e153 	.word	0x0800e153
 800e470:	080152f4 	.word	0x080152f4

0800e474 <ptr_8to16>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
<<<<<<< HEAD
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  return ( ((UG_U16)p[0]<<8) | p[1]);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	b21a      	sxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3301      	adds	r3, #1
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	b21b      	sxth	r3, r3
 800f350:	4313      	orrs	r3, r2
 800f352:	b21b      	sxth	r3, r3
 800f354:	b29b      	uxth	r3, r3
}
 800f356:	0018      	movs	r0, r3
 800f358:	46bd      	mov	sp, r7
 800f35a:	b002      	add	sp, #8
 800f35c:	bd80      	pop	{r7, pc}
	...

0800f360 <UG_Init>:
=======
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  return ( ((UG_U16)p[0]<<8) | p[1]);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	b21b      	sxth	r3, r3
 800e482:	021b      	lsls	r3, r3, #8
 800e484:	b21a      	sxth	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3301      	adds	r3, #1
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	b21b      	sxth	r3, r3
 800e48e:	4313      	orrs	r3, r2
 800e490:	b21b      	sxth	r3, r3
 800e492:	b29b      	uxth	r3, r3
}
 800e494:	0018      	movs	r0, r3
 800e496:	46bd      	mov	sp, r7
 800e498:	b002      	add	sp, #8
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <UG_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
<<<<<<< HEAD
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2204      	movs	r2, #4
 800f374:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2204      	movs	r2, #4
 800f37a:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2200      	movs	r2, #0
 800f382:	5e9b      	ldrsh	r3, [r3, r2]
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	211c      	movs	r1, #28
 800f38a:	5e5b      	ldrsh	r3, [r3, r1]
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	b29b      	uxth	r3, r3
 800f392:	3b01      	subs	r3, #1
 800f394:	b29b      	uxth	r3, r3
 800f396:	b21a      	sxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	5e9b      	ldrsh	r3, [r3, r2]
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	211c      	movs	r1, #28
 800f3aa:	5e5b      	ldrsh	r3, [r3, r1]
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	b21a      	sxth	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2220      	movs	r2, #32
 800f3c0:	5e9a      	ldrsh	r2, [r3, r2]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2222      	movs	r2, #34	@ 0x22
 800f3ca:	5e9a      	ldrsh	r2, [r3, r2]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2249      	movs	r2, #73	@ 0x49
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	224a      	movs	r2, #74	@ 0x4a
 800f3dc:	2101      	movs	r1, #1
 800f3de:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	222f      	movs	r2, #47	@ 0x2f
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	222e      	movs	r2, #46	@ 0x2e
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.offset_size = 0;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2250      	movs	r2, #80	@ 0x50
 800f424:	491e      	ldr	r1, [pc, #120]	@ (800f4a0 <UG_Init+0x140>)
 800f426:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	224c      	movs	r2, #76	@ 0x4c
 800f42c:	2101      	movs	r1, #1
 800f42e:	4249      	negs	r1, r1
 800f430:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	224e      	movs	r2, #78	@ 0x4e
 800f436:	2100      	movs	r1, #0
 800f438:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f44c:	230f      	movs	r3, #15
 800f44e:	18fb      	adds	r3, r7, r3
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
 800f454:	e017      	b.n	800f486 <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 800f456:	210f      	movs	r1, #15
 800f458:	187b      	adds	r3, r7, r1
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	330a      	adds	r3, #10
 800f460:	00db      	lsls	r3, r3, #3
 800f462:	18d3      	adds	r3, r2, r3
 800f464:	3304      	adds	r3, #4
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 800f46a:	187b      	adds	r3, r7, r1
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	330a      	adds	r3, #10
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	18d3      	adds	r3, r2, r3
 800f476:	3308      	adds	r3, #8
 800f478:	2200      	movs	r2, #0
 800f47a:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f47c:	187b      	adds	r3, r7, r1
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	187b      	adds	r3, r7, r1
 800f482:	3201      	adds	r2, #1
 800f484:	701a      	strb	r2, [r3, #0]
 800f486:	230f      	movs	r3, #15
 800f488:	18fb      	adds	r3, r7, r3
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d9e2      	bls.n	800f456 <UG_Init+0xf6>
   }

   gui = g;
 800f490:	4b04      	ldr	r3, [pc, #16]	@ (800f4a4 <UG_Init+0x144>)
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	601a      	str	r2, [r3, #0]
   return 1;
 800f496:	2301      	movs	r3, #1
}
 800f498:	0018      	movs	r0, r3
 800f49a:	46bd      	mov	sp, r7
 800f49c:	b004      	add	sp, #16
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	00005c5d 	.word	0x00005c5d
 800f4a4:	20000c44 	.word	0x20000c44

0800f4a8 <UG_FontSelect>:
=======
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2204      	movs	r2, #4
 800e4b0:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2204      	movs	r2, #4
 800e4b6:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	5e9b      	ldrsh	r3, [r3, r2]
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	211c      	movs	r1, #28
 800e4c6:	5e5b      	ldrsh	r3, [r3, r1]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	b21a      	sxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2202      	movs	r2, #2
 800e4de:	5e9b      	ldrsh	r3, [r3, r2]
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	211c      	movs	r1, #28
 800e4e6:	5e5b      	ldrsh	r3, [r3, r1]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	b21a      	sxth	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	5e9a      	ldrsh	r2, [r3, r2]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2222      	movs	r2, #34	@ 0x22
 800e506:	5e9a      	ldrsh	r2, [r3, r2]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2249      	movs	r2, #73	@ 0x49
 800e510:	2101      	movs	r1, #1
 800e512:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	224a      	movs	r2, #74	@ 0x4a
 800e518:	2101      	movs	r1, #1
 800e51a:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	222f      	movs	r2, #47	@ 0x2f
 800e52c:	2100      	movs	r1, #0
 800e52e:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	222e      	movs	r2, #46	@ 0x2e
 800e534:	2100      	movs	r1, #0
 800e536:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.offset_size = 0;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2250      	movs	r2, #80	@ 0x50
 800e560:	491e      	ldr	r1, [pc, #120]	@ (800e5dc <UG_Init+0x140>)
 800e562:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	224c      	movs	r2, #76	@ 0x4c
 800e568:	2101      	movs	r1, #1
 800e56a:	4249      	negs	r1, r1
 800e56c:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	224e      	movs	r2, #78	@ 0x4e
 800e572:	2100      	movs	r1, #0
 800e574:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800e588:	230f      	movs	r3, #15
 800e58a:	18fb      	adds	r3, r7, r3
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	e017      	b.n	800e5c2 <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 800e592:	210f      	movs	r1, #15
 800e594:	187b      	adds	r3, r7, r1
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	330a      	adds	r3, #10
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	18d3      	adds	r3, r2, r3
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 800e5a6:	187b      	adds	r3, r7, r1
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	330a      	adds	r3, #10
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	18d3      	adds	r3, r2, r3
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800e5b8:	187b      	adds	r3, r7, r1
 800e5ba:	781a      	ldrb	r2, [r3, #0]
 800e5bc:	187b      	adds	r3, r7, r1
 800e5be:	3201      	adds	r2, #1
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	230f      	movs	r3, #15
 800e5c4:	18fb      	adds	r3, r7, r3
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d9e2      	bls.n	800e592 <UG_Init+0xf6>
   }

   gui = g;
 800e5cc:	4b04      	ldr	r3, [pc, #16]	@ (800e5e0 <UG_Init+0x144>)
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	601a      	str	r2, [r3, #0]
   return 1;
 800e5d2:	2301      	movs	r3, #1
}
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	b004      	add	sp, #16
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	00005c5d 	.word	0x00005c5d
 800e5e0:	20000b3c 	.word	0x20000b3c

0800e5e4 <UG_FontSelect>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
<<<<<<< HEAD
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f4b0:	4b03      	ldr	r3, [pc, #12]	@ (800f4c0 <UG_FontSelect+0x18>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f4b8:	46c0      	nop			@ (mov r8, r8)
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	b002      	add	sp, #8
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	20000c44 	.word	0x20000c44

0800f4c4 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	0002      	movs	r2, r0
 800f4cc:	1dbb      	adds	r3, r7, #6
 800f4ce:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800f4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f50c <UG_FillScreen+0x48>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	b21a      	sxth	r2, r3
 800f4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f50c <UG_FillScreen+0x48>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2102      	movs	r1, #2
 800f4ea:	5e5b      	ldrsh	r3, [r3, r1]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	b219      	sxth	r1, r3
 800f4f4:	1dbb      	adds	r3, r7, #6
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	000b      	movs	r3, r1
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	2000      	movs	r0, #0
 800f500:	f000 f806 	bl	800f510 <UG_FillFrame>
}
 800f504:	46c0      	nop			@ (mov r8, r8)
 800f506:	46bd      	mov	sp, r7
 800f508:	b002      	add	sp, #8
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	20000c44 	.word	0x20000c44

0800f510 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f510:	b5b0      	push	{r4, r5, r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af02      	add	r7, sp, #8
 800f516:	0005      	movs	r5, r0
 800f518:	000c      	movs	r4, r1
 800f51a:	0010      	movs	r0, r2
 800f51c:	0019      	movs	r1, r3
 800f51e:	1dbb      	adds	r3, r7, #6
 800f520:	1c2a      	adds	r2, r5, #0
 800f522:	801a      	strh	r2, [r3, #0]
 800f524:	1d3b      	adds	r3, r7, #4
 800f526:	1c22      	adds	r2, r4, #0
 800f528:	801a      	strh	r2, [r3, #0]
 800f52a:	1cbb      	adds	r3, r7, #2
 800f52c:	1c02      	adds	r2, r0, #0
 800f52e:	801a      	strh	r2, [r3, #0]
 800f530:	003b      	movs	r3, r7
 800f532:	1c0a      	adds	r2, r1, #0
 800f534:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800f536:	1cba      	adds	r2, r7, #2
 800f538:	1dbb      	adds	r3, r7, #6
 800f53a:	2100      	movs	r1, #0
 800f53c:	5e52      	ldrsh	r2, [r2, r1]
 800f53e:	2100      	movs	r1, #0
 800f540:	5e5b      	ldrsh	r3, [r3, r1]
 800f542:	429a      	cmp	r2, r3
 800f544:	da0c      	bge.n	800f560 <UG_FillFrame+0x50>
     swap(x1,x2);
 800f546:	210a      	movs	r1, #10
 800f548:	187b      	adds	r3, r7, r1
 800f54a:	1dba      	adds	r2, r7, #6
 800f54c:	8812      	ldrh	r2, [r2, #0]
 800f54e:	801a      	strh	r2, [r3, #0]
 800f550:	1dbb      	adds	r3, r7, #6
 800f552:	1cba      	adds	r2, r7, #2
 800f554:	8812      	ldrh	r2, [r2, #0]
 800f556:	801a      	strh	r2, [r3, #0]
 800f558:	1cbb      	adds	r3, r7, #2
 800f55a:	187a      	adds	r2, r7, r1
 800f55c:	8812      	ldrh	r2, [r2, #0]
 800f55e:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 800f560:	003a      	movs	r2, r7
 800f562:	1d3b      	adds	r3, r7, #4
 800f564:	2100      	movs	r1, #0
 800f566:	5e52      	ldrsh	r2, [r2, r1]
 800f568:	2100      	movs	r1, #0
 800f56a:	5e5b      	ldrsh	r3, [r3, r1]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	da0c      	bge.n	800f58a <UG_FillFrame+0x7a>
     swap(y1,y2);
 800f570:	2108      	movs	r1, #8
 800f572:	187b      	adds	r3, r7, r1
 800f574:	1d3a      	adds	r2, r7, #4
 800f576:	8812      	ldrh	r2, [r2, #0]
 800f578:	801a      	strh	r2, [r3, #0]
 800f57a:	1d3b      	adds	r3, r7, #4
 800f57c:	003a      	movs	r2, r7
 800f57e:	8812      	ldrh	r2, [r2, #0]
 800f580:	801a      	strh	r2, [r3, #0]
 800f582:	003b      	movs	r3, r7
 800f584:	187a      	adds	r2, r7, r1
 800f586:	8812      	ldrh	r2, [r2, #0]
 800f588:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800f58a:	4b33      	ldr	r3, [pc, #204]	@ (800f658 <UG_FillFrame+0x148>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2260      	movs	r2, #96	@ 0x60
 800f590:	5c9b      	ldrb	r3, [r3, r2]
 800f592:	001a      	movs	r2, r3
 800f594:	2302      	movs	r3, #2
 800f596:	4013      	ands	r3, r2
 800f598:	d017      	beq.n	800f5ca <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f59a:	4b2f      	ldr	r3, [pc, #188]	@ (800f658 <UG_FillFrame+0x148>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5a0:	001d      	movs	r5, r3
 800f5a2:	003b      	movs	r3, r7
 800f5a4:	2400      	movs	r4, #0
 800f5a6:	5f1c      	ldrsh	r4, [r3, r4]
 800f5a8:	1cbb      	adds	r3, r7, #2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	5e9a      	ldrsh	r2, [r3, r2]
 800f5ae:	1d3b      	adds	r3, r7, #4
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	5e59      	ldrsh	r1, [r3, r1]
 800f5b4:	1dbb      	adds	r3, r7, #6
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	5e18      	ldrsh	r0, [r3, r0]
 800f5ba:	2320      	movs	r3, #32
 800f5bc:	18fb      	adds	r3, r7, r3
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	0023      	movs	r3, r4
 800f5c4:	47a8      	blx	r5
 800f5c6:	1e03      	subs	r3, r0, #0
 800f5c8:	d041      	beq.n	800f64e <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 800f5ca:	230c      	movs	r3, #12
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	1d3a      	adds	r2, r7, #4
 800f5d0:	8812      	ldrh	r2, [r2, #0]
 800f5d2:	801a      	strh	r2, [r3, #0]
 800f5d4:	e031      	b.n	800f63a <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 800f5d6:	230e      	movs	r3, #14
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	1dba      	adds	r2, r7, #6
 800f5dc:	8812      	ldrh	r2, [r2, #0]
 800f5de:	801a      	strh	r2, [r3, #0]
 800f5e0:	e019      	b.n	800f616 <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 800f5e2:	4b1d      	ldr	r3, [pc, #116]	@ (800f658 <UG_FillFrame+0x148>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685c      	ldr	r4, [r3, #4]
 800f5ea:	2320      	movs	r3, #32
 800f5ec:	18fb      	adds	r3, r7, r3
 800f5ee:	881a      	ldrh	r2, [r3, #0]
 800f5f0:	230c      	movs	r3, #12
 800f5f2:	18fb      	adds	r3, r7, r3
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	5e59      	ldrsh	r1, [r3, r1]
 800f5f8:	250e      	movs	r5, #14
 800f5fa:	197b      	adds	r3, r7, r5
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	5e1b      	ldrsh	r3, [r3, r0]
 800f600:	0018      	movs	r0, r3
 800f602:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 800f604:	0029      	movs	r1, r5
 800f606:	187b      	adds	r3, r7, r1
 800f608:	2200      	movs	r2, #0
 800f60a:	5e9b      	ldrsh	r3, [r3, r2]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	3301      	adds	r3, #1
 800f610:	b29a      	uxth	r2, r3
 800f612:	187b      	adds	r3, r7, r1
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	230e      	movs	r3, #14
 800f618:	18fa      	adds	r2, r7, r3
 800f61a:	1cbb      	adds	r3, r7, #2
 800f61c:	2100      	movs	r1, #0
 800f61e:	5e52      	ldrsh	r2, [r2, r1]
 800f620:	2100      	movs	r1, #0
 800f622:	5e5b      	ldrsh	r3, [r3, r1]
 800f624:	429a      	cmp	r2, r3
 800f626:	dddc      	ble.n	800f5e2 <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 800f628:	210c      	movs	r1, #12
 800f62a:	187b      	adds	r3, r7, r1
 800f62c:	2200      	movs	r2, #0
 800f62e:	5e9b      	ldrsh	r3, [r3, r2]
 800f630:	b29b      	uxth	r3, r3
 800f632:	3301      	adds	r3, #1
 800f634:	b29a      	uxth	r2, r3
 800f636:	187b      	adds	r3, r7, r1
 800f638:	801a      	strh	r2, [r3, #0]
 800f63a:	230c      	movs	r3, #12
 800f63c:	18fa      	adds	r2, r7, r3
 800f63e:	003b      	movs	r3, r7
 800f640:	2100      	movs	r1, #0
 800f642:	5e52      	ldrsh	r2, [r2, r1]
 800f644:	2100      	movs	r1, #0
 800f646:	5e5b      	ldrsh	r3, [r3, r1]
 800f648:	429a      	cmp	r2, r3
 800f64a:	ddc4      	ble.n	800f5d6 <UG_FillFrame+0xc6>
 800f64c:	e000      	b.n	800f650 <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f64e:	46c0      	nop			@ (mov r8, r8)
      }
   }
}
 800f650:	46bd      	mov	sp, r7
 800f652:	b004      	add	sp, #16
 800f654:	bdb0      	pop	{r4, r5, r7, pc}
 800f656:	46c0      	nop			@ (mov r8, r8)
 800f658:	20000c44 	.word	0x20000c44

0800f65c <UG_DrawLine>:
=======
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800e5ec:	4b03      	ldr	r3, [pc, #12]	@ (800e5fc <UG_FontSelect+0x18>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e5f4:	46c0      	nop			@ (mov r8, r8)
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	b002      	add	sp, #8
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	20000b3c 	.word	0x20000b3c

0800e600 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af02      	add	r7, sp, #8
 800e606:	0002      	movs	r2, r0
 800e608:	1dbb      	adds	r3, r7, #6
 800e60a:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800e60c:	4b0e      	ldr	r3, [pc, #56]	@ (800e648 <UG_FillScreen+0x48>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	5e9b      	ldrsh	r3, [r3, r2]
 800e616:	b29b      	uxth	r3, r3
 800e618:	3b01      	subs	r3, #1
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	b21a      	sxth	r2, r3
 800e61e:	4b0a      	ldr	r3, [pc, #40]	@ (800e648 <UG_FillScreen+0x48>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2102      	movs	r1, #2
 800e626:	5e5b      	ldrsh	r3, [r3, r1]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3b01      	subs	r3, #1
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	b219      	sxth	r1, r3
 800e630:	1dbb      	adds	r3, r7, #6
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	000b      	movs	r3, r1
 800e638:	2100      	movs	r1, #0
 800e63a:	2000      	movs	r0, #0
 800e63c:	f000 f806 	bl	800e64c <UG_FillFrame>
}
 800e640:	46c0      	nop			@ (mov r8, r8)
 800e642:	46bd      	mov	sp, r7
 800e644:	b002      	add	sp, #8
 800e646:	bd80      	pop	{r7, pc}
 800e648:	20000b3c 	.word	0x20000b3c

0800e64c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800e64c:	b5b0      	push	{r4, r5, r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af02      	add	r7, sp, #8
 800e652:	0005      	movs	r5, r0
 800e654:	000c      	movs	r4, r1
 800e656:	0010      	movs	r0, r2
 800e658:	0019      	movs	r1, r3
 800e65a:	1dbb      	adds	r3, r7, #6
 800e65c:	1c2a      	adds	r2, r5, #0
 800e65e:	801a      	strh	r2, [r3, #0]
 800e660:	1d3b      	adds	r3, r7, #4
 800e662:	1c22      	adds	r2, r4, #0
 800e664:	801a      	strh	r2, [r3, #0]
 800e666:	1cbb      	adds	r3, r7, #2
 800e668:	1c02      	adds	r2, r0, #0
 800e66a:	801a      	strh	r2, [r3, #0]
 800e66c:	003b      	movs	r3, r7
 800e66e:	1c0a      	adds	r2, r1, #0
 800e670:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800e672:	1cba      	adds	r2, r7, #2
 800e674:	1dbb      	adds	r3, r7, #6
 800e676:	2100      	movs	r1, #0
 800e678:	5e52      	ldrsh	r2, [r2, r1]
 800e67a:	2100      	movs	r1, #0
 800e67c:	5e5b      	ldrsh	r3, [r3, r1]
 800e67e:	429a      	cmp	r2, r3
 800e680:	da0c      	bge.n	800e69c <UG_FillFrame+0x50>
     swap(x1,x2);
 800e682:	210a      	movs	r1, #10
 800e684:	187b      	adds	r3, r7, r1
 800e686:	1dba      	adds	r2, r7, #6
 800e688:	8812      	ldrh	r2, [r2, #0]
 800e68a:	801a      	strh	r2, [r3, #0]
 800e68c:	1dbb      	adds	r3, r7, #6
 800e68e:	1cba      	adds	r2, r7, #2
 800e690:	8812      	ldrh	r2, [r2, #0]
 800e692:	801a      	strh	r2, [r3, #0]
 800e694:	1cbb      	adds	r3, r7, #2
 800e696:	187a      	adds	r2, r7, r1
 800e698:	8812      	ldrh	r2, [r2, #0]
 800e69a:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 800e69c:	003a      	movs	r2, r7
 800e69e:	1d3b      	adds	r3, r7, #4
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	5e52      	ldrsh	r2, [r2, r1]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	5e5b      	ldrsh	r3, [r3, r1]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	da0c      	bge.n	800e6c6 <UG_FillFrame+0x7a>
     swap(y1,y2);
 800e6ac:	2108      	movs	r1, #8
 800e6ae:	187b      	adds	r3, r7, r1
 800e6b0:	1d3a      	adds	r2, r7, #4
 800e6b2:	8812      	ldrh	r2, [r2, #0]
 800e6b4:	801a      	strh	r2, [r3, #0]
 800e6b6:	1d3b      	adds	r3, r7, #4
 800e6b8:	003a      	movs	r2, r7
 800e6ba:	8812      	ldrh	r2, [r2, #0]
 800e6bc:	801a      	strh	r2, [r3, #0]
 800e6be:	003b      	movs	r3, r7
 800e6c0:	187a      	adds	r2, r7, r1
 800e6c2:	8812      	ldrh	r2, [r2, #0]
 800e6c4:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800e6c6:	4b33      	ldr	r3, [pc, #204]	@ (800e794 <UG_FillFrame+0x148>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2260      	movs	r2, #96	@ 0x60
 800e6cc:	5c9b      	ldrb	r3, [r3, r2]
 800e6ce:	001a      	movs	r2, r3
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	d017      	beq.n	800e706 <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800e6d6:	4b2f      	ldr	r3, [pc, #188]	@ (800e794 <UG_FillFrame+0x148>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6dc:	001d      	movs	r5, r3
 800e6de:	003b      	movs	r3, r7
 800e6e0:	2400      	movs	r4, #0
 800e6e2:	5f1c      	ldrsh	r4, [r3, r4]
 800e6e4:	1cbb      	adds	r3, r7, #2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	5e9a      	ldrsh	r2, [r3, r2]
 800e6ea:	1d3b      	adds	r3, r7, #4
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	5e59      	ldrsh	r1, [r3, r1]
 800e6f0:	1dbb      	adds	r3, r7, #6
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	5e18      	ldrsh	r0, [r3, r0]
 800e6f6:	2320      	movs	r3, #32
 800e6f8:	18fb      	adds	r3, r7, r3
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	0023      	movs	r3, r4
 800e700:	47a8      	blx	r5
 800e702:	1e03      	subs	r3, r0, #0
 800e704:	d041      	beq.n	800e78a <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 800e706:	230c      	movs	r3, #12
 800e708:	18fb      	adds	r3, r7, r3
 800e70a:	1d3a      	adds	r2, r7, #4
 800e70c:	8812      	ldrh	r2, [r2, #0]
 800e70e:	801a      	strh	r2, [r3, #0]
 800e710:	e031      	b.n	800e776 <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 800e712:	230e      	movs	r3, #14
 800e714:	18fb      	adds	r3, r7, r3
 800e716:	1dba      	adds	r2, r7, #6
 800e718:	8812      	ldrh	r2, [r2, #0]
 800e71a:	801a      	strh	r2, [r3, #0]
 800e71c:	e019      	b.n	800e752 <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 800e71e:	4b1d      	ldr	r3, [pc, #116]	@ (800e794 <UG_FillFrame+0x148>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685c      	ldr	r4, [r3, #4]
 800e726:	2320      	movs	r3, #32
 800e728:	18fb      	adds	r3, r7, r3
 800e72a:	881a      	ldrh	r2, [r3, #0]
 800e72c:	230c      	movs	r3, #12
 800e72e:	18fb      	adds	r3, r7, r3
 800e730:	2100      	movs	r1, #0
 800e732:	5e59      	ldrsh	r1, [r3, r1]
 800e734:	250e      	movs	r5, #14
 800e736:	197b      	adds	r3, r7, r5
 800e738:	2000      	movs	r0, #0
 800e73a:	5e1b      	ldrsh	r3, [r3, r0]
 800e73c:	0018      	movs	r0, r3
 800e73e:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 800e740:	0029      	movs	r1, r5
 800e742:	187b      	adds	r3, r7, r1
 800e744:	2200      	movs	r2, #0
 800e746:	5e9b      	ldrsh	r3, [r3, r2]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	3301      	adds	r3, #1
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	187b      	adds	r3, r7, r1
 800e750:	801a      	strh	r2, [r3, #0]
 800e752:	230e      	movs	r3, #14
 800e754:	18fa      	adds	r2, r7, r3
 800e756:	1cbb      	adds	r3, r7, #2
 800e758:	2100      	movs	r1, #0
 800e75a:	5e52      	ldrsh	r2, [r2, r1]
 800e75c:	2100      	movs	r1, #0
 800e75e:	5e5b      	ldrsh	r3, [r3, r1]
 800e760:	429a      	cmp	r2, r3
 800e762:	dddc      	ble.n	800e71e <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 800e764:	210c      	movs	r1, #12
 800e766:	187b      	adds	r3, r7, r1
 800e768:	2200      	movs	r2, #0
 800e76a:	5e9b      	ldrsh	r3, [r3, r2]
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	3301      	adds	r3, #1
 800e770:	b29a      	uxth	r2, r3
 800e772:	187b      	adds	r3, r7, r1
 800e774:	801a      	strh	r2, [r3, #0]
 800e776:	230c      	movs	r3, #12
 800e778:	18fa      	adds	r2, r7, r3
 800e77a:	003b      	movs	r3, r7
 800e77c:	2100      	movs	r1, #0
 800e77e:	5e52      	ldrsh	r2, [r2, r1]
 800e780:	2100      	movs	r1, #0
 800e782:	5e5b      	ldrsh	r3, [r3, r1]
 800e784:	429a      	cmp	r2, r3
 800e786:	ddc4      	ble.n	800e712 <UG_FillFrame+0xc6>
 800e788:	e000      	b.n	800e78c <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800e78a:	46c0      	nop			@ (mov r8, r8)
      }
   }
}
 800e78c:	46bd      	mov	sp, r7
 800e78e:	b004      	add	sp, #16
 800e790:	bdb0      	pop	{r4, r5, r7, pc}
 800e792:	46c0      	nop			@ (mov r8, r8)
 800e794:	20000b3c 	.word	0x20000b3c

0800e798 <UG_DrawLine>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
<<<<<<< HEAD
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	b08b      	sub	sp, #44	@ 0x2c
 800f660:	af02      	add	r7, sp, #8
 800f662:	0005      	movs	r5, r0
 800f664:	000c      	movs	r4, r1
 800f666:	0010      	movs	r0, r2
 800f668:	0019      	movs	r1, r3
 800f66a:	1dbb      	adds	r3, r7, #6
 800f66c:	1c2a      	adds	r2, r5, #0
 800f66e:	801a      	strh	r2, [r3, #0]
 800f670:	1d3b      	adds	r3, r7, #4
 800f672:	1c22      	adds	r2, r4, #0
 800f674:	801a      	strh	r2, [r3, #0]
 800f676:	1cbb      	adds	r3, r7, #2
 800f678:	1c02      	adds	r2, r0, #0
 800f67a:	801a      	strh	r2, [r3, #0]
 800f67c:	003b      	movs	r3, r7
 800f67e:	1c0a      	adds	r2, r1, #0
 800f680:	801a      	strh	r2, [r3, #0]
=======
 800e798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79a:	b08b      	sub	sp, #44	@ 0x2c
 800e79c:	af02      	add	r7, sp, #8
 800e79e:	0005      	movs	r5, r0
 800e7a0:	000c      	movs	r4, r1
 800e7a2:	0010      	movs	r0, r2
 800e7a4:	0019      	movs	r1, r3
 800e7a6:	1dbb      	adds	r3, r7, #6
 800e7a8:	1c2a      	adds	r2, r5, #0
 800e7aa:	801a      	strh	r2, [r3, #0]
 800e7ac:	1d3b      	adds	r3, r7, #4
 800e7ae:	1c22      	adds	r2, r4, #0
 800e7b0:	801a      	strh	r2, [r3, #0]
 800e7b2:	1cbb      	adds	r3, r7, #2
 800e7b4:	1c02      	adds	r2, r0, #0
 800e7b6:	801a      	strh	r2, [r3, #0]
 800e7b8:	003b      	movs	r3, r7
 800e7ba:	1c0a      	adds	r2, r1, #0
 800e7bc:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
<<<<<<< HEAD
 800f682:	4ba6      	ldr	r3, [pc, #664]	@ (800f91c <UG_DrawLine+0x2c0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2258      	movs	r2, #88	@ 0x58
 800f688:	5c9b      	ldrb	r3, [r3, r2]
 800f68a:	001a      	movs	r2, r3
 800f68c:	2302      	movs	r3, #2
 800f68e:	4013      	ands	r3, r2
 800f690:	d01a      	beq.n	800f6c8 <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f692:	4ba2      	ldr	r3, [pc, #648]	@ (800f91c <UG_DrawLine+0x2c0>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f698:	001d      	movs	r5, r3
 800f69a:	003b      	movs	r3, r7
 800f69c:	2400      	movs	r4, #0
 800f69e:	5f1c      	ldrsh	r4, [r3, r4]
 800f6a0:	1cbb      	adds	r3, r7, #2
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	5e9a      	ldrsh	r2, [r3, r2]
 800f6a6:	1d3b      	adds	r3, r7, #4
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	5e59      	ldrsh	r1, [r3, r1]
 800f6ac:	1dbb      	adds	r3, r7, #6
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	5e18      	ldrsh	r0, [r3, r0]
 800f6b2:	2330      	movs	r3, #48	@ 0x30
 800f6b4:	2608      	movs	r6, #8
 800f6b6:	199b      	adds	r3, r3, r6
 800f6b8:	19db      	adds	r3, r3, r7
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	0023      	movs	r3, r4
 800f6c0:	47a8      	blx	r5
 800f6c2:	1e03      	subs	r3, r0, #0
 800f6c4:	d100      	bne.n	800f6c8 <UG_DrawLine+0x6c>
 800f6c6:	e125      	b.n	800f914 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 800f6c8:	1cbb      	adds	r3, r7, #2
 800f6ca:	881a      	ldrh	r2, [r3, #0]
 800f6cc:	1dbb      	adds	r3, r7, #6
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	2114      	movs	r1, #20
 800f6d6:	187b      	adds	r3, r7, r1
 800f6d8:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 800f6da:	003b      	movs	r3, r7
 800f6dc:	881a      	ldrh	r2, [r3, #0]
 800f6de:	1d3b      	adds	r3, r7, #4
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	2012      	movs	r0, #18
 800f6e8:	183b      	adds	r3, r7, r0
 800f6ea:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 800f6ec:	187b      	adds	r3, r7, r1
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	5e9b      	ldrsh	r3, [r3, r2]
 800f6f2:	17da      	asrs	r2, r3, #31
 800f6f4:	189b      	adds	r3, r3, r2
 800f6f6:	4053      	eors	r3, r2
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	2310      	movs	r3, #16
 800f6fc:	18fb      	adds	r3, r7, r3
 800f6fe:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 800f700:	183b      	adds	r3, r7, r0
 800f702:	2200      	movs	r2, #0
 800f704:	5e9b      	ldrsh	r3, [r3, r2]
 800f706:	17da      	asrs	r2, r3, #31
 800f708:	189b      	adds	r3, r3, r2
 800f70a:	4053      	eors	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	230e      	movs	r3, #14
 800f710:	18fb      	adds	r3, r7, r3
 800f712:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 800f714:	187b      	adds	r3, r7, r1
 800f716:	2200      	movs	r2, #0
 800f718:	5e9b      	ldrsh	r3, [r3, r2]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	dd01      	ble.n	800f722 <UG_DrawLine+0xc6>
 800f71e:	2201      	movs	r2, #1
 800f720:	e001      	b.n	800f726 <UG_DrawLine+0xca>
 800f722:	2301      	movs	r3, #1
 800f724:	425a      	negs	r2, r3
 800f726:	230c      	movs	r3, #12
 800f728:	18fb      	adds	r3, r7, r3
 800f72a:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 800f72c:	2312      	movs	r3, #18
 800f72e:	18fb      	adds	r3, r7, r3
 800f730:	2200      	movs	r2, #0
 800f732:	5e9b      	ldrsh	r3, [r3, r2]
 800f734:	2b00      	cmp	r3, #0
 800f736:	dd01      	ble.n	800f73c <UG_DrawLine+0xe0>
 800f738:	2201      	movs	r2, #1
 800f73a:	e001      	b.n	800f740 <UG_DrawLine+0xe4>
 800f73c:	2301      	movs	r3, #1
 800f73e:	425a      	negs	r2, r3
 800f740:	230a      	movs	r3, #10
 800f742:	18fb      	adds	r3, r7, r3
 800f744:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 800f746:	231c      	movs	r3, #28
 800f748:	18fb      	adds	r3, r7, r3
 800f74a:	250e      	movs	r5, #14
 800f74c:	197a      	adds	r2, r7, r5
 800f74e:	2100      	movs	r1, #0
 800f750:	5e52      	ldrsh	r2, [r2, r1]
 800f752:	1052      	asrs	r2, r2, #1
 800f754:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 800f756:	231a      	movs	r3, #26
 800f758:	18fb      	adds	r3, r7, r3
 800f75a:	2610      	movs	r6, #16
 800f75c:	19ba      	adds	r2, r7, r6
 800f75e:	2100      	movs	r1, #0
 800f760:	5e52      	ldrsh	r2, [r2, r1]
 800f762:	1052      	asrs	r2, r2, #1
 800f764:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 800f766:	2018      	movs	r0, #24
 800f768:	183b      	adds	r3, r7, r0
 800f76a:	1dba      	adds	r2, r7, #6
 800f76c:	8812      	ldrh	r2, [r2, #0]
 800f76e:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 800f770:	2116      	movs	r1, #22
 800f772:	187b      	adds	r3, r7, r1
 800f774:	1d3a      	adds	r2, r7, #4
 800f776:	8812      	ldrh	r2, [r2, #0]
 800f778:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 800f77a:	4b68      	ldr	r3, [pc, #416]	@ (800f91c <UG_DrawLine+0x2c0>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	685c      	ldr	r4, [r3, #4]
 800f782:	2330      	movs	r3, #48	@ 0x30
 800f784:	2208      	movs	r2, #8
 800f786:	189b      	adds	r3, r3, r2
 800f788:	19db      	adds	r3, r3, r7
 800f78a:	881a      	ldrh	r2, [r3, #0]
 800f78c:	187b      	adds	r3, r7, r1
 800f78e:	2100      	movs	r1, #0
 800f790:	5e59      	ldrsh	r1, [r3, r1]
 800f792:	183b      	adds	r3, r7, r0
 800f794:	2000      	movs	r0, #0
 800f796:	5e1b      	ldrsh	r3, [r3, r0]
 800f798:	0018      	movs	r0, r3
 800f79a:	47a0      	blx	r4

   if( dxabs >= dyabs )
 800f79c:	19ba      	adds	r2, r7, r6
 800f79e:	197b      	adds	r3, r7, r5
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	5e52      	ldrsh	r2, [r2, r1]
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	5e5b      	ldrsh	r3, [r3, r1]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	db59      	blt.n	800f860 <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 800f7ac:	231e      	movs	r3, #30
 800f7ae:	18fb      	adds	r3, r7, r3
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	801a      	strh	r2, [r3, #0]
 800f7b4:	e049      	b.n	800f84a <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 800f7b6:	211a      	movs	r1, #26
 800f7b8:	187b      	adds	r3, r7, r1
 800f7ba:	881a      	ldrh	r2, [r3, #0]
 800f7bc:	230e      	movs	r3, #14
 800f7be:	18fb      	adds	r3, r7, r3
 800f7c0:	881b      	ldrh	r3, [r3, #0]
 800f7c2:	18d3      	adds	r3, r2, r3
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	187b      	adds	r3, r7, r1
 800f7c8:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 800f7ca:	187a      	adds	r2, r7, r1
 800f7cc:	2010      	movs	r0, #16
 800f7ce:	183b      	adds	r3, r7, r0
 800f7d0:	2400      	movs	r4, #0
 800f7d2:	5f12      	ldrsh	r2, [r2, r4]
 800f7d4:	2400      	movs	r4, #0
 800f7d6:	5f1b      	ldrsh	r3, [r3, r4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	db11      	blt.n	800f800 <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 800f7dc:	187b      	adds	r3, r7, r1
 800f7de:	881a      	ldrh	r2, [r3, #0]
 800f7e0:	183b      	adds	r3, r7, r0
 800f7e2:	881b      	ldrh	r3, [r3, #0]
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	187b      	adds	r3, r7, r1
 800f7ea:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 800f7ec:	2116      	movs	r1, #22
 800f7ee:	187b      	adds	r3, r7, r1
 800f7f0:	881a      	ldrh	r2, [r3, #0]
 800f7f2:	230a      	movs	r3, #10
 800f7f4:	18fb      	adds	r3, r7, r3
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	18d3      	adds	r3, r2, r3
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	187b      	adds	r3, r7, r1
 800f7fe:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 800f800:	2018      	movs	r0, #24
 800f802:	183b      	adds	r3, r7, r0
 800f804:	881a      	ldrh	r2, [r3, #0]
 800f806:	230c      	movs	r3, #12
 800f808:	18fb      	adds	r3, r7, r3
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	18d3      	adds	r3, r2, r3
 800f80e:	b29a      	uxth	r2, r3
 800f810:	183b      	adds	r3, r7, r0
 800f812:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800f814:	4b41      	ldr	r3, [pc, #260]	@ (800f91c <UG_DrawLine+0x2c0>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	685c      	ldr	r4, [r3, #4]
 800f81c:	2330      	movs	r3, #48	@ 0x30
 800f81e:	2208      	movs	r2, #8
 800f820:	189b      	adds	r3, r3, r2
 800f822:	19db      	adds	r3, r3, r7
 800f824:	881a      	ldrh	r2, [r3, #0]
 800f826:	2316      	movs	r3, #22
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	2100      	movs	r1, #0
 800f82c:	5e59      	ldrsh	r1, [r3, r1]
 800f82e:	183b      	adds	r3, r7, r0
 800f830:	2000      	movs	r0, #0
 800f832:	5e1b      	ldrsh	r3, [r3, r0]
 800f834:	0018      	movs	r0, r3
 800f836:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 800f838:	211e      	movs	r1, #30
 800f83a:	187b      	adds	r3, r7, r1
 800f83c:	2200      	movs	r2, #0
 800f83e:	5e9b      	ldrsh	r3, [r3, r2]
 800f840:	b29b      	uxth	r3, r3
 800f842:	3301      	adds	r3, #1
 800f844:	b29a      	uxth	r2, r3
 800f846:	187b      	adds	r3, r7, r1
 800f848:	801a      	strh	r2, [r3, #0]
 800f84a:	231e      	movs	r3, #30
 800f84c:	18fa      	adds	r2, r7, r3
 800f84e:	2310      	movs	r3, #16
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	2100      	movs	r1, #0
 800f854:	5e52      	ldrsh	r2, [r2, r1]
 800f856:	2100      	movs	r1, #0
 800f858:	5e5b      	ldrsh	r3, [r3, r1]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	dbab      	blt.n	800f7b6 <UG_DrawLine+0x15a>
 800f85e:	e05a      	b.n	800f916 <UG_DrawLine+0x2ba>
=======
 800e7be:	4ba6      	ldr	r3, [pc, #664]	@ (800ea58 <UG_DrawLine+0x2c0>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2258      	movs	r2, #88	@ 0x58
 800e7c4:	5c9b      	ldrb	r3, [r3, r2]
 800e7c6:	001a      	movs	r2, r3
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	d01a      	beq.n	800e804 <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800e7ce:	4ba2      	ldr	r3, [pc, #648]	@ (800ea58 <UG_DrawLine+0x2c0>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7d4:	001d      	movs	r5, r3
 800e7d6:	003b      	movs	r3, r7
 800e7d8:	2400      	movs	r4, #0
 800e7da:	5f1c      	ldrsh	r4, [r3, r4]
 800e7dc:	1cbb      	adds	r3, r7, #2
 800e7de:	2200      	movs	r2, #0
 800e7e0:	5e9a      	ldrsh	r2, [r3, r2]
 800e7e2:	1d3b      	adds	r3, r7, #4
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	5e59      	ldrsh	r1, [r3, r1]
 800e7e8:	1dbb      	adds	r3, r7, #6
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	5e18      	ldrsh	r0, [r3, r0]
 800e7ee:	2330      	movs	r3, #48	@ 0x30
 800e7f0:	2608      	movs	r6, #8
 800e7f2:	199b      	adds	r3, r3, r6
 800e7f4:	19db      	adds	r3, r3, r7
 800e7f6:	881b      	ldrh	r3, [r3, #0]
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	0023      	movs	r3, r4
 800e7fc:	47a8      	blx	r5
 800e7fe:	1e03      	subs	r3, r0, #0
 800e800:	d100      	bne.n	800e804 <UG_DrawLine+0x6c>
 800e802:	e125      	b.n	800ea50 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 800e804:	1cbb      	adds	r3, r7, #2
 800e806:	881a      	ldrh	r2, [r3, #0]
 800e808:	1dbb      	adds	r3, r7, #6
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	b29a      	uxth	r2, r3
 800e810:	2114      	movs	r1, #20
 800e812:	187b      	adds	r3, r7, r1
 800e814:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 800e816:	003b      	movs	r3, r7
 800e818:	881a      	ldrh	r2, [r3, #0]
 800e81a:	1d3b      	adds	r3, r7, #4
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	b29a      	uxth	r2, r3
 800e822:	2012      	movs	r0, #18
 800e824:	183b      	adds	r3, r7, r0
 800e826:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 800e828:	187b      	adds	r3, r7, r1
 800e82a:	2200      	movs	r2, #0
 800e82c:	5e9b      	ldrsh	r3, [r3, r2]
 800e82e:	17da      	asrs	r2, r3, #31
 800e830:	189b      	adds	r3, r3, r2
 800e832:	4053      	eors	r3, r2
 800e834:	b29a      	uxth	r2, r3
 800e836:	2310      	movs	r3, #16
 800e838:	18fb      	adds	r3, r7, r3
 800e83a:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 800e83c:	183b      	adds	r3, r7, r0
 800e83e:	2200      	movs	r2, #0
 800e840:	5e9b      	ldrsh	r3, [r3, r2]
 800e842:	17da      	asrs	r2, r3, #31
 800e844:	189b      	adds	r3, r3, r2
 800e846:	4053      	eors	r3, r2
 800e848:	b29a      	uxth	r2, r3
 800e84a:	230e      	movs	r3, #14
 800e84c:	18fb      	adds	r3, r7, r3
 800e84e:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 800e850:	187b      	adds	r3, r7, r1
 800e852:	2200      	movs	r2, #0
 800e854:	5e9b      	ldrsh	r3, [r3, r2]
 800e856:	2b00      	cmp	r3, #0
 800e858:	dd01      	ble.n	800e85e <UG_DrawLine+0xc6>
 800e85a:	2201      	movs	r2, #1
 800e85c:	e001      	b.n	800e862 <UG_DrawLine+0xca>
 800e85e:	2301      	movs	r3, #1
 800e860:	425a      	negs	r2, r3
 800e862:	230c      	movs	r3, #12
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 800e868:	2312      	movs	r3, #18
 800e86a:	18fb      	adds	r3, r7, r3
 800e86c:	2200      	movs	r2, #0
 800e86e:	5e9b      	ldrsh	r3, [r3, r2]
 800e870:	2b00      	cmp	r3, #0
 800e872:	dd01      	ble.n	800e878 <UG_DrawLine+0xe0>
 800e874:	2201      	movs	r2, #1
 800e876:	e001      	b.n	800e87c <UG_DrawLine+0xe4>
 800e878:	2301      	movs	r3, #1
 800e87a:	425a      	negs	r2, r3
 800e87c:	230a      	movs	r3, #10
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 800e882:	231c      	movs	r3, #28
 800e884:	18fb      	adds	r3, r7, r3
 800e886:	250e      	movs	r5, #14
 800e888:	197a      	adds	r2, r7, r5
 800e88a:	2100      	movs	r1, #0
 800e88c:	5e52      	ldrsh	r2, [r2, r1]
 800e88e:	1052      	asrs	r2, r2, #1
 800e890:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 800e892:	231a      	movs	r3, #26
 800e894:	18fb      	adds	r3, r7, r3
 800e896:	2610      	movs	r6, #16
 800e898:	19ba      	adds	r2, r7, r6
 800e89a:	2100      	movs	r1, #0
 800e89c:	5e52      	ldrsh	r2, [r2, r1]
 800e89e:	1052      	asrs	r2, r2, #1
 800e8a0:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 800e8a2:	2018      	movs	r0, #24
 800e8a4:	183b      	adds	r3, r7, r0
 800e8a6:	1dba      	adds	r2, r7, #6
 800e8a8:	8812      	ldrh	r2, [r2, #0]
 800e8aa:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 800e8ac:	2116      	movs	r1, #22
 800e8ae:	187b      	adds	r3, r7, r1
 800e8b0:	1d3a      	adds	r2, r7, #4
 800e8b2:	8812      	ldrh	r2, [r2, #0]
 800e8b4:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 800e8b6:	4b68      	ldr	r3, [pc, #416]	@ (800ea58 <UG_DrawLine+0x2c0>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	685c      	ldr	r4, [r3, #4]
 800e8be:	2330      	movs	r3, #48	@ 0x30
 800e8c0:	2208      	movs	r2, #8
 800e8c2:	189b      	adds	r3, r3, r2
 800e8c4:	19db      	adds	r3, r3, r7
 800e8c6:	881a      	ldrh	r2, [r3, #0]
 800e8c8:	187b      	adds	r3, r7, r1
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	5e59      	ldrsh	r1, [r3, r1]
 800e8ce:	183b      	adds	r3, r7, r0
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	5e1b      	ldrsh	r3, [r3, r0]
 800e8d4:	0018      	movs	r0, r3
 800e8d6:	47a0      	blx	r4

   if( dxabs >= dyabs )
 800e8d8:	19ba      	adds	r2, r7, r6
 800e8da:	197b      	adds	r3, r7, r5
 800e8dc:	2100      	movs	r1, #0
 800e8de:	5e52      	ldrsh	r2, [r2, r1]
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	5e5b      	ldrsh	r3, [r3, r1]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	db59      	blt.n	800e99c <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 800e8e8:	231e      	movs	r3, #30
 800e8ea:	18fb      	adds	r3, r7, r3
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	801a      	strh	r2, [r3, #0]
 800e8f0:	e049      	b.n	800e986 <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 800e8f2:	211a      	movs	r1, #26
 800e8f4:	187b      	adds	r3, r7, r1
 800e8f6:	881a      	ldrh	r2, [r3, #0]
 800e8f8:	230e      	movs	r3, #14
 800e8fa:	18fb      	adds	r3, r7, r3
 800e8fc:	881b      	ldrh	r3, [r3, #0]
 800e8fe:	18d3      	adds	r3, r2, r3
 800e900:	b29a      	uxth	r2, r3
 800e902:	187b      	adds	r3, r7, r1
 800e904:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 800e906:	187a      	adds	r2, r7, r1
 800e908:	2010      	movs	r0, #16
 800e90a:	183b      	adds	r3, r7, r0
 800e90c:	2400      	movs	r4, #0
 800e90e:	5f12      	ldrsh	r2, [r2, r4]
 800e910:	2400      	movs	r4, #0
 800e912:	5f1b      	ldrsh	r3, [r3, r4]
 800e914:	429a      	cmp	r2, r3
 800e916:	db11      	blt.n	800e93c <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 800e918:	187b      	adds	r3, r7, r1
 800e91a:	881a      	ldrh	r2, [r3, #0]
 800e91c:	183b      	adds	r3, r7, r0
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	b29a      	uxth	r2, r3
 800e924:	187b      	adds	r3, r7, r1
 800e926:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 800e928:	2116      	movs	r1, #22
 800e92a:	187b      	adds	r3, r7, r1
 800e92c:	881a      	ldrh	r2, [r3, #0]
 800e92e:	230a      	movs	r3, #10
 800e930:	18fb      	adds	r3, r7, r3
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	18d3      	adds	r3, r2, r3
 800e936:	b29a      	uxth	r2, r3
 800e938:	187b      	adds	r3, r7, r1
 800e93a:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 800e93c:	2018      	movs	r0, #24
 800e93e:	183b      	adds	r3, r7, r0
 800e940:	881a      	ldrh	r2, [r3, #0]
 800e942:	230c      	movs	r3, #12
 800e944:	18fb      	adds	r3, r7, r3
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	18d3      	adds	r3, r2, r3
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	183b      	adds	r3, r7, r0
 800e94e:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800e950:	4b41      	ldr	r3, [pc, #260]	@ (800ea58 <UG_DrawLine+0x2c0>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	685c      	ldr	r4, [r3, #4]
 800e958:	2330      	movs	r3, #48	@ 0x30
 800e95a:	2208      	movs	r2, #8
 800e95c:	189b      	adds	r3, r3, r2
 800e95e:	19db      	adds	r3, r3, r7
 800e960:	881a      	ldrh	r2, [r3, #0]
 800e962:	2316      	movs	r3, #22
 800e964:	18fb      	adds	r3, r7, r3
 800e966:	2100      	movs	r1, #0
 800e968:	5e59      	ldrsh	r1, [r3, r1]
 800e96a:	183b      	adds	r3, r7, r0
 800e96c:	2000      	movs	r0, #0
 800e96e:	5e1b      	ldrsh	r3, [r3, r0]
 800e970:	0018      	movs	r0, r3
 800e972:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 800e974:	211e      	movs	r1, #30
 800e976:	187b      	adds	r3, r7, r1
 800e978:	2200      	movs	r2, #0
 800e97a:	5e9b      	ldrsh	r3, [r3, r2]
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	3301      	adds	r3, #1
 800e980:	b29a      	uxth	r2, r3
 800e982:	187b      	adds	r3, r7, r1
 800e984:	801a      	strh	r2, [r3, #0]
 800e986:	231e      	movs	r3, #30
 800e988:	18fa      	adds	r2, r7, r3
 800e98a:	2310      	movs	r3, #16
 800e98c:	18fb      	adds	r3, r7, r3
 800e98e:	2100      	movs	r1, #0
 800e990:	5e52      	ldrsh	r2, [r2, r1]
 800e992:	2100      	movs	r1, #0
 800e994:	5e5b      	ldrsh	r3, [r3, r1]
 800e996:	429a      	cmp	r2, r3
 800e998:	dbab      	blt.n	800e8f2 <UG_DrawLine+0x15a>
 800e99a:	e05a      	b.n	800ea52 <UG_DrawLine+0x2ba>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
<<<<<<< HEAD
 800f860:	231e      	movs	r3, #30
 800f862:	18fb      	adds	r3, r7, r3
 800f864:	2200      	movs	r2, #0
 800f866:	801a      	strh	r2, [r3, #0]
 800f868:	e049      	b.n	800f8fe <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 800f86a:	211c      	movs	r1, #28
 800f86c:	187b      	adds	r3, r7, r1
 800f86e:	881a      	ldrh	r2, [r3, #0]
 800f870:	2310      	movs	r3, #16
 800f872:	18fb      	adds	r3, r7, r3
 800f874:	881b      	ldrh	r3, [r3, #0]
 800f876:	18d3      	adds	r3, r2, r3
 800f878:	b29a      	uxth	r2, r3
 800f87a:	187b      	adds	r3, r7, r1
 800f87c:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 800f87e:	187a      	adds	r2, r7, r1
 800f880:	200e      	movs	r0, #14
 800f882:	183b      	adds	r3, r7, r0
 800f884:	2400      	movs	r4, #0
 800f886:	5f12      	ldrsh	r2, [r2, r4]
 800f888:	2400      	movs	r4, #0
 800f88a:	5f1b      	ldrsh	r3, [r3, r4]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	db11      	blt.n	800f8b4 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 800f890:	187b      	adds	r3, r7, r1
 800f892:	881a      	ldrh	r2, [r3, #0]
 800f894:	183b      	adds	r3, r7, r0
 800f896:	881b      	ldrh	r3, [r3, #0]
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	187b      	adds	r3, r7, r1
 800f89e:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 800f8a0:	2118      	movs	r1, #24
 800f8a2:	187b      	adds	r3, r7, r1
 800f8a4:	881a      	ldrh	r2, [r3, #0]
 800f8a6:	230c      	movs	r3, #12
 800f8a8:	18fb      	adds	r3, r7, r3
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	18d3      	adds	r3, r2, r3
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	187b      	adds	r3, r7, r1
 800f8b2:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 800f8b4:	2116      	movs	r1, #22
 800f8b6:	187b      	adds	r3, r7, r1
 800f8b8:	881a      	ldrh	r2, [r3, #0]
 800f8ba:	230a      	movs	r3, #10
 800f8bc:	18fb      	adds	r3, r7, r3
 800f8be:	881b      	ldrh	r3, [r3, #0]
 800f8c0:	18d3      	adds	r3, r2, r3
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	187b      	adds	r3, r7, r1
 800f8c6:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800f8c8:	4b14      	ldr	r3, [pc, #80]	@ (800f91c <UG_DrawLine+0x2c0>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	685c      	ldr	r4, [r3, #4]
 800f8d0:	2330      	movs	r3, #48	@ 0x30
 800f8d2:	2208      	movs	r2, #8
 800f8d4:	189b      	adds	r3, r3, r2
 800f8d6:	19db      	adds	r3, r3, r7
 800f8d8:	881a      	ldrh	r2, [r3, #0]
 800f8da:	187b      	adds	r3, r7, r1
 800f8dc:	2100      	movs	r1, #0
 800f8de:	5e59      	ldrsh	r1, [r3, r1]
 800f8e0:	2318      	movs	r3, #24
 800f8e2:	18fb      	adds	r3, r7, r3
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	5e1b      	ldrsh	r3, [r3, r0]
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 800f8ec:	211e      	movs	r1, #30
 800f8ee:	187b      	adds	r3, r7, r1
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	5e9b      	ldrsh	r3, [r3, r2]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	187b      	adds	r3, r7, r1
 800f8fc:	801a      	strh	r2, [r3, #0]
 800f8fe:	231e      	movs	r3, #30
 800f900:	18fa      	adds	r2, r7, r3
 800f902:	230e      	movs	r3, #14
 800f904:	18fb      	adds	r3, r7, r3
 800f906:	2100      	movs	r1, #0
 800f908:	5e52      	ldrsh	r2, [r2, r1]
 800f90a:	2100      	movs	r1, #0
 800f90c:	5e5b      	ldrsh	r3, [r3, r1]
 800f90e:	429a      	cmp	r2, r3
 800f910:	dbab      	blt.n	800f86a <UG_DrawLine+0x20e>
 800f912:	e000      	b.n	800f916 <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f914:	46c0      	nop			@ (mov r8, r8)
      }
   }  
}
 800f916:	46bd      	mov	sp, r7
 800f918:	b009      	add	sp, #36	@ 0x24
 800f91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f91c:	20000c44 	.word	0x20000c44

0800f920 <UG_PutString>:
=======
 800e99c:	231e      	movs	r3, #30
 800e99e:	18fb      	adds	r3, r7, r3
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	801a      	strh	r2, [r3, #0]
 800e9a4:	e049      	b.n	800ea3a <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 800e9a6:	211c      	movs	r1, #28
 800e9a8:	187b      	adds	r3, r7, r1
 800e9aa:	881a      	ldrh	r2, [r3, #0]
 800e9ac:	2310      	movs	r3, #16
 800e9ae:	18fb      	adds	r3, r7, r3
 800e9b0:	881b      	ldrh	r3, [r3, #0]
 800e9b2:	18d3      	adds	r3, r2, r3
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	187b      	adds	r3, r7, r1
 800e9b8:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 800e9ba:	187a      	adds	r2, r7, r1
 800e9bc:	200e      	movs	r0, #14
 800e9be:	183b      	adds	r3, r7, r0
 800e9c0:	2400      	movs	r4, #0
 800e9c2:	5f12      	ldrsh	r2, [r2, r4]
 800e9c4:	2400      	movs	r4, #0
 800e9c6:	5f1b      	ldrsh	r3, [r3, r4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	db11      	blt.n	800e9f0 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 800e9cc:	187b      	adds	r3, r7, r1
 800e9ce:	881a      	ldrh	r2, [r3, #0]
 800e9d0:	183b      	adds	r3, r7, r0
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	187b      	adds	r3, r7, r1
 800e9da:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 800e9dc:	2118      	movs	r1, #24
 800e9de:	187b      	adds	r3, r7, r1
 800e9e0:	881a      	ldrh	r2, [r3, #0]
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	18fb      	adds	r3, r7, r3
 800e9e6:	881b      	ldrh	r3, [r3, #0]
 800e9e8:	18d3      	adds	r3, r2, r3
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	187b      	adds	r3, r7, r1
 800e9ee:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 800e9f0:	2116      	movs	r1, #22
 800e9f2:	187b      	adds	r3, r7, r1
 800e9f4:	881a      	ldrh	r2, [r3, #0]
 800e9f6:	230a      	movs	r3, #10
 800e9f8:	18fb      	adds	r3, r7, r3
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	18d3      	adds	r3, r2, r3
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	187b      	adds	r3, r7, r1
 800ea02:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800ea04:	4b14      	ldr	r3, [pc, #80]	@ (800ea58 <UG_DrawLine+0x2c0>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	685c      	ldr	r4, [r3, #4]
 800ea0c:	2330      	movs	r3, #48	@ 0x30
 800ea0e:	2208      	movs	r2, #8
 800ea10:	189b      	adds	r3, r3, r2
 800ea12:	19db      	adds	r3, r3, r7
 800ea14:	881a      	ldrh	r2, [r3, #0]
 800ea16:	187b      	adds	r3, r7, r1
 800ea18:	2100      	movs	r1, #0
 800ea1a:	5e59      	ldrsh	r1, [r3, r1]
 800ea1c:	2318      	movs	r3, #24
 800ea1e:	18fb      	adds	r3, r7, r3
 800ea20:	2000      	movs	r0, #0
 800ea22:	5e1b      	ldrsh	r3, [r3, r0]
 800ea24:	0018      	movs	r0, r3
 800ea26:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 800ea28:	211e      	movs	r1, #30
 800ea2a:	187b      	adds	r3, r7, r1
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	3301      	adds	r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	187b      	adds	r3, r7, r1
 800ea38:	801a      	strh	r2, [r3, #0]
 800ea3a:	231e      	movs	r3, #30
 800ea3c:	18fa      	adds	r2, r7, r3
 800ea3e:	230e      	movs	r3, #14
 800ea40:	18fb      	adds	r3, r7, r3
 800ea42:	2100      	movs	r1, #0
 800ea44:	5e52      	ldrsh	r2, [r2, r1]
 800ea46:	2100      	movs	r1, #0
 800ea48:	5e5b      	ldrsh	r3, [r3, r1]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	dbab      	blt.n	800e9a6 <UG_DrawLine+0x20e>
 800ea4e:	e000      	b.n	800ea52 <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800ea50:	46c0      	nop			@ (mov r8, r8)
      }
   }  
}
 800ea52:	46bd      	mov	sp, r7
 800ea54:	b009      	add	sp, #36	@ 0x24
 800ea56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea58:	20000b3c 	.word	0x20000b3c

0800ea5c <UG_PutString>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
<<<<<<< HEAD
 800f920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f922:	b087      	sub	sp, #28
 800f924:	af02      	add	r7, sp, #8
 800f926:	603a      	str	r2, [r7, #0]
 800f928:	1dbb      	adds	r3, r7, #6
 800f92a:	1c02      	adds	r2, r0, #0
 800f92c:	801a      	strh	r2, [r3, #0]
 800f92e:	1d3b      	adds	r3, r7, #4
 800f930:	1c0a      	adds	r2, r1, #0
 800f932:	801a      	strh	r2, [r3, #0]
=======
 800ea5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af02      	add	r7, sp, #8
 800ea62:	603a      	str	r2, [r7, #0]
 800ea64:	1dbb      	adds	r3, r7, #6
 800ea66:	1c02      	adds	r2, r0, #0
 800ea68:	801a      	strh	r2, [r3, #0]
 800ea6a:	1d3b      	adds	r3, r7, #4
 800ea6c:	1c0a      	adds	r2, r1, #0
 800ea6e:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
<<<<<<< HEAD
 800f934:	230e      	movs	r3, #14
 800f936:	18fb      	adds	r3, r7, r3
 800f938:	1dba      	adds	r2, r7, #6
 800f93a:	8812      	ldrh	r2, [r2, #0]
 800f93c:	801a      	strh	r2, [r3, #0]
   yp=y;
 800f93e:	230c      	movs	r3, #12
 800f940:	18fb      	adds	r3, r7, r3
 800f942:	1d3a      	adds	r2, r7, #4
 800f944:	8812      	ldrh	r2, [r2, #0]
 800f946:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 800f948:	4b54      	ldr	r3, [pc, #336]	@ (800fa9c <UG_PutString+0x17c>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f94e:	0018      	movs	r0, r3
 800f950:	f000 fade 	bl	800ff10 <_UG_FontSelect>
   while ( *str != 0 )
 800f954:	e084      	b.n	800fa60 <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800f956:	4b51      	ldr	r3, [pc, #324]	@ (800fa9c <UG_PutString+0x17c>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	222d      	movs	r2, #45	@ 0x2d
 800f95c:	5c9b      	ldrb	r3, [r3, r2]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d108      	bne.n	800f974 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 800f962:	230a      	movs	r3, #10
 800f964:	18fc      	adds	r4, r7, r3
 800f966:	003b      	movs	r3, r7
 800f968:	0018      	movs	r0, r3
 800f96a:	f000 f8f7 	bl	800fb5c <_UG_DecodeUTF8>
 800f96e:	0003      	movs	r3, r0
 800f970:	8023      	strh	r3, [r4, #0]
 800f972:	e006      	b.n	800f982 <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	603a      	str	r2, [r7, #0]
 800f97a:	781a      	ldrb	r2, [r3, #0]
 800f97c:	230a      	movs	r3, #10
 800f97e:	18fb      	adds	r3, r7, r3
 800f980:	801a      	strh	r2, [r3, #0]
=======
 800ea70:	230e      	movs	r3, #14
 800ea72:	18fb      	adds	r3, r7, r3
 800ea74:	1dba      	adds	r2, r7, #6
 800ea76:	8812      	ldrh	r2, [r2, #0]
 800ea78:	801a      	strh	r2, [r3, #0]
   yp=y;
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	18fb      	adds	r3, r7, r3
 800ea7e:	1d3a      	adds	r2, r7, #4
 800ea80:	8812      	ldrh	r2, [r2, #0]
 800ea82:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 800ea84:	4b54      	ldr	r3, [pc, #336]	@ (800ebd8 <UG_PutString+0x17c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea8a:	0018      	movs	r0, r3
 800ea8c:	f000 fade 	bl	800f04c <_UG_FontSelect>
   while ( *str != 0 )
 800ea90:	e084      	b.n	800eb9c <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800ea92:	4b51      	ldr	r3, [pc, #324]	@ (800ebd8 <UG_PutString+0x17c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	222d      	movs	r2, #45	@ 0x2d
 800ea98:	5c9b      	ldrb	r3, [r3, r2]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d108      	bne.n	800eab0 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 800ea9e:	230a      	movs	r3, #10
 800eaa0:	18fc      	adds	r4, r7, r3
 800eaa2:	003b      	movs	r3, r7
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	f000 f8f7 	bl	800ec98 <_UG_DecodeUTF8>
 800eaaa:	0003      	movs	r3, r0
 800eaac:	8023      	strh	r3, [r4, #0]
 800eaae:	e006      	b.n	800eabe <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	603a      	str	r2, [r7, #0]
 800eab6:	781a      	ldrb	r2, [r3, #0]
 800eab8:	230a      	movs	r3, #10
 800eaba:	18fb      	adds	r3, r7, r3
 800eabc:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
<<<<<<< HEAD
 800f982:	230a      	movs	r3, #10
 800f984:	18fb      	adds	r3, r7, r3
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	2b0a      	cmp	r3, #10
 800f98a:	d107      	bne.n	800f99c <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 800f98c:	4b43      	ldr	r3, [pc, #268]	@ (800fa9c <UG_PutString+0x17c>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	230e      	movs	r3, #14
 800f994:	18fb      	adds	r3, r7, r3
 800f996:	8812      	ldrh	r2, [r2, #0]
 800f998:	801a      	strh	r2, [r3, #0]
         continue;
 800f99a:	e061      	b.n	800fa60 <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 800f99c:	2508      	movs	r5, #8
 800f99e:	197c      	adds	r4, r7, r5
 800f9a0:	230a      	movs	r3, #10
 800f9a2:	18fb      	adds	r3, r7, r3
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	f000 f985 	bl	800fcb8 <_UG_GetCharData>
 800f9ae:	0003      	movs	r3, r0
 800f9b0:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 800f9b2:	0028      	movs	r0, r5
 800f9b4:	183b      	adds	r3, r7, r0
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	5e9b      	ldrsh	r3, [r3, r2]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	d04f      	beq.n	800fa5e <UG_PutString+0x13e>
      if ( xp + cw > gui->device->x_dim - 1 )
 800f9be:	4b37      	ldr	r3, [pc, #220]	@ (800fa9c <UG_PutString+0x17c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c8:	0019      	movs	r1, r3
 800f9ca:	240e      	movs	r4, #14
 800f9cc:	193b      	adds	r3, r7, r4
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	5e9a      	ldrsh	r2, [r3, r2]
 800f9d2:	183b      	adds	r3, r7, r0
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	5e1b      	ldrsh	r3, [r3, r0]
 800f9d8:	18d3      	adds	r3, r2, r3
 800f9da:	4299      	cmp	r1, r3
 800f9dc:	dc16      	bgt.n	800fa0c <UG_PutString+0xec>
      {
         xp = x;
 800f9de:	193b      	adds	r3, r7, r4
 800f9e0:	1dba      	adds	r2, r7, #6
 800f9e2:	8812      	ldrh	r2, [r2, #0]
 800f9e4:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800f9e6:	4b2d      	ldr	r3, [pc, #180]	@ (800fa9c <UG_PutString+0x17c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	222f      	movs	r2, #47	@ 0x2f
 800f9ec:	5c9b      	ldrb	r3, [r3, r2]
 800f9ee:	b21a      	sxth	r2, r3
 800f9f0:	4b2a      	ldr	r3, [pc, #168]	@ (800fa9c <UG_PutString+0x17c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	214a      	movs	r1, #74	@ 0x4a
 800f9f6:	565b      	ldrsb	r3, [r3, r1]
 800f9f8:	18d3      	adds	r3, r2, r3
 800f9fa:	b21b      	sxth	r3, r3
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	210c      	movs	r1, #12
 800fa00:	187b      	adds	r3, r7, r1
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	18d3      	adds	r3, r2, r3
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	187b      	adds	r3, r7, r1
 800fa0a:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800fa0c:	4b23      	ldr	r3, [pc, #140]	@ (800fa9c <UG_PutString+0x17c>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	224c      	movs	r2, #76	@ 0x4c
 800fa12:	5a9d      	ldrh	r5, [r3, r2]
 800fa14:	4b21      	ldr	r3, [pc, #132]	@ (800fa9c <UG_PutString+0x17c>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	224e      	movs	r2, #78	@ 0x4e
 800fa1a:	5a9b      	ldrh	r3, [r3, r2]
 800fa1c:	220c      	movs	r2, #12
 800fa1e:	18ba      	adds	r2, r7, r2
 800fa20:	2400      	movs	r4, #0
 800fa22:	5f14      	ldrsh	r4, [r2, r4]
 800fa24:	260e      	movs	r6, #14
 800fa26:	19ba      	adds	r2, r7, r6
 800fa28:	2100      	movs	r1, #0
 800fa2a:	5e51      	ldrsh	r1, [r2, r1]
 800fa2c:	220a      	movs	r2, #10
 800fa2e:	18ba      	adds	r2, r7, r2
 800fa30:	8810      	ldrh	r0, [r2, #0]
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	002b      	movs	r3, r5
 800fa36:	0022      	movs	r2, r4
 800fa38:	f000 faec 	bl	8010014 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800fa3c:	4b17      	ldr	r3, [pc, #92]	@ (800fa9c <UG_PutString+0x17c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2249      	movs	r2, #73	@ 0x49
 800fa42:	569b      	ldrsb	r3, [r3, r2]
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	2308      	movs	r3, #8
 800fa48:	18fb      	adds	r3, r7, r3
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	18d3      	adds	r3, r2, r3
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	19bb      	adds	r3, r7, r6
 800fa52:	881b      	ldrh	r3, [r3, #0]
 800fa54:	18d3      	adds	r3, r2, r3
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	19bb      	adds	r3, r7, r6
 800fa5a:	801a      	strh	r2, [r3, #0]
 800fa5c:	e000      	b.n	800fa60 <UG_PutString+0x140>
      if(cw==-1) continue;
 800fa5e:	46c0      	nop			@ (mov r8, r8)
   while ( *str != 0 )
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d000      	beq.n	800fa6a <UG_PutString+0x14a>
 800fa68:	e775      	b.n	800f956 <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa9c <UG_PutString+0x17c>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2268      	movs	r2, #104	@ 0x68
 800fa70:	5c9b      	ldrb	r3, [r3, r2]
 800fa72:	001a      	movs	r2, r3
 800fa74:	2302      	movs	r3, #2
 800fa76:	4013      	ands	r3, r2
 800fa78:	d00c      	beq.n	800fa94 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800fa7a:	4b08      	ldr	r3, [pc, #32]	@ (800fa9c <UG_PutString+0x17c>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa80:	001c      	movs	r4, r3
 800fa82:	2301      	movs	r3, #1
 800fa84:	425b      	negs	r3, r3
 800fa86:	2201      	movs	r2, #1
 800fa88:	4252      	negs	r2, r2
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	4249      	negs	r1, r1
 800fa8e:	2001      	movs	r0, #1
 800fa90:	4240      	negs	r0, r0
 800fa92:	47a0      	blx	r4
}
 800fa94:	46c0      	nop			@ (mov r8, r8)
 800fa96:	46bd      	mov	sp, r7
 800fa98:	b005      	add	sp, #20
 800fa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9c:	20000c44 	.word	0x20000c44

0800faa0 <UG_SetForecolor>:
=======
 800eabe:	230a      	movs	r3, #10
 800eac0:	18fb      	adds	r3, r7, r3
 800eac2:	881b      	ldrh	r3, [r3, #0]
 800eac4:	2b0a      	cmp	r3, #10
 800eac6:	d107      	bne.n	800ead8 <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 800eac8:	4b43      	ldr	r3, [pc, #268]	@ (800ebd8 <UG_PutString+0x17c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	230e      	movs	r3, #14
 800ead0:	18fb      	adds	r3, r7, r3
 800ead2:	8812      	ldrh	r2, [r2, #0]
 800ead4:	801a      	strh	r2, [r3, #0]
         continue;
 800ead6:	e061      	b.n	800eb9c <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 800ead8:	2508      	movs	r5, #8
 800eada:	197c      	adds	r4, r7, r5
 800eadc:	230a      	movs	r3, #10
 800eade:	18fb      	adds	r3, r7, r3
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	2100      	movs	r1, #0
 800eae4:	0018      	movs	r0, r3
 800eae6:	f000 f985 	bl	800edf4 <_UG_GetCharData>
 800eaea:	0003      	movs	r3, r0
 800eaec:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 800eaee:	0028      	movs	r0, r5
 800eaf0:	183b      	adds	r3, r7, r0
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	5e9b      	ldrsh	r3, [r3, r2]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	d04f      	beq.n	800eb9a <UG_PutString+0x13e>
      if ( xp + cw > gui->device->x_dim - 1 )
 800eafa:	4b37      	ldr	r3, [pc, #220]	@ (800ebd8 <UG_PutString+0x17c>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2200      	movs	r2, #0
 800eb02:	5e9b      	ldrsh	r3, [r3, r2]
 800eb04:	0019      	movs	r1, r3
 800eb06:	240e      	movs	r4, #14
 800eb08:	193b      	adds	r3, r7, r4
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb0e:	183b      	adds	r3, r7, r0
 800eb10:	2000      	movs	r0, #0
 800eb12:	5e1b      	ldrsh	r3, [r3, r0]
 800eb14:	18d3      	adds	r3, r2, r3
 800eb16:	4299      	cmp	r1, r3
 800eb18:	dc16      	bgt.n	800eb48 <UG_PutString+0xec>
      {
         xp = x;
 800eb1a:	193b      	adds	r3, r7, r4
 800eb1c:	1dba      	adds	r2, r7, #6
 800eb1e:	8812      	ldrh	r2, [r2, #0]
 800eb20:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800eb22:	4b2d      	ldr	r3, [pc, #180]	@ (800ebd8 <UG_PutString+0x17c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	222f      	movs	r2, #47	@ 0x2f
 800eb28:	5c9b      	ldrb	r3, [r3, r2]
 800eb2a:	b21a      	sxth	r2, r3
 800eb2c:	4b2a      	ldr	r3, [pc, #168]	@ (800ebd8 <UG_PutString+0x17c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	214a      	movs	r1, #74	@ 0x4a
 800eb32:	565b      	ldrsb	r3, [r3, r1]
 800eb34:	18d3      	adds	r3, r2, r3
 800eb36:	b21b      	sxth	r3, r3
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	210c      	movs	r1, #12
 800eb3c:	187b      	adds	r3, r7, r1
 800eb3e:	881b      	ldrh	r3, [r3, #0]
 800eb40:	18d3      	adds	r3, r2, r3
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	187b      	adds	r3, r7, r1
 800eb46:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800eb48:	4b23      	ldr	r3, [pc, #140]	@ (800ebd8 <UG_PutString+0x17c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	224c      	movs	r2, #76	@ 0x4c
 800eb4e:	5a9d      	ldrh	r5, [r3, r2]
 800eb50:	4b21      	ldr	r3, [pc, #132]	@ (800ebd8 <UG_PutString+0x17c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	224e      	movs	r2, #78	@ 0x4e
 800eb56:	5a9b      	ldrh	r3, [r3, r2]
 800eb58:	220c      	movs	r2, #12
 800eb5a:	18ba      	adds	r2, r7, r2
 800eb5c:	2400      	movs	r4, #0
 800eb5e:	5f14      	ldrsh	r4, [r2, r4]
 800eb60:	260e      	movs	r6, #14
 800eb62:	19ba      	adds	r2, r7, r6
 800eb64:	2100      	movs	r1, #0
 800eb66:	5e51      	ldrsh	r1, [r2, r1]
 800eb68:	220a      	movs	r2, #10
 800eb6a:	18ba      	adds	r2, r7, r2
 800eb6c:	8810      	ldrh	r0, [r2, #0]
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	002b      	movs	r3, r5
 800eb72:	0022      	movs	r2, r4
 800eb74:	f000 faec 	bl	800f150 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800eb78:	4b17      	ldr	r3, [pc, #92]	@ (800ebd8 <UG_PutString+0x17c>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2249      	movs	r2, #73	@ 0x49
 800eb7e:	569b      	ldrsb	r3, [r3, r2]
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	2308      	movs	r3, #8
 800eb84:	18fb      	adds	r3, r7, r3
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	18d3      	adds	r3, r2, r3
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	19bb      	adds	r3, r7, r6
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	18d3      	adds	r3, r2, r3
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	19bb      	adds	r3, r7, r6
 800eb96:	801a      	strh	r2, [r3, #0]
 800eb98:	e000      	b.n	800eb9c <UG_PutString+0x140>
      if(cw==-1) continue;
 800eb9a:	46c0      	nop			@ (mov r8, r8)
   while ( *str != 0 )
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d000      	beq.n	800eba6 <UG_PutString+0x14a>
 800eba4:	e775      	b.n	800ea92 <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800eba6:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd8 <UG_PutString+0x17c>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2268      	movs	r2, #104	@ 0x68
 800ebac:	5c9b      	ldrb	r3, [r3, r2]
 800ebae:	001a      	movs	r2, r3
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	d00c      	beq.n	800ebd0 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800ebb6:	4b08      	ldr	r3, [pc, #32]	@ (800ebd8 <UG_PutString+0x17c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebbc:	001c      	movs	r4, r3
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	425b      	negs	r3, r3
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	4252      	negs	r2, r2
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	4249      	negs	r1, r1
 800ebca:	2001      	movs	r0, #1
 800ebcc:	4240      	negs	r0, r0
 800ebce:	47a0      	blx	r4
}
 800ebd0:	46c0      	nop			@ (mov r8, r8)
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	b005      	add	sp, #20
 800ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd8:	20000b3c 	.word	0x20000b3c

0800ebdc <UG_SetForecolor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
<<<<<<< HEAD
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	0002      	movs	r2, r0
 800faa8:	1dbb      	adds	r3, r7, #6
 800faaa:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 800faac:	4b04      	ldr	r3, [pc, #16]	@ (800fac0 <UG_SetForecolor+0x20>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	1dba      	adds	r2, r7, #6
 800fab2:	214c      	movs	r1, #76	@ 0x4c
 800fab4:	8812      	ldrh	r2, [r2, #0]
 800fab6:	525a      	strh	r2, [r3, r1]
}
 800fab8:	46c0      	nop			@ (mov r8, r8)
 800faba:	46bd      	mov	sp, r7
 800fabc:	b002      	add	sp, #8
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	20000c44 	.word	0x20000c44

0800fac4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	0002      	movs	r2, r0
 800facc:	1dbb      	adds	r3, r7, #6
 800face:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 800fad0:	4b04      	ldr	r3, [pc, #16]	@ (800fae4 <UG_SetBackcolor+0x20>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	1dba      	adds	r2, r7, #6
 800fad6:	214e      	movs	r1, #78	@ 0x4e
 800fad8:	8812      	ldrh	r2, [r2, #0]
 800fada:	525a      	strh	r2, [r3, r1]
}
 800fadc:	46c0      	nop			@ (mov r8, r8)
 800fade:	46bd      	mov	sp, r7
 800fae0:	b002      	add	sp, #8
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20000c44 	.word	0x20000c44

0800fae8 <UG_FontSetHSpace>:
=======
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	0002      	movs	r2, r0
 800ebe4:	1dbb      	adds	r3, r7, #6
 800ebe6:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 800ebe8:	4b04      	ldr	r3, [pc, #16]	@ (800ebfc <UG_SetForecolor+0x20>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	1dba      	adds	r2, r7, #6
 800ebee:	214c      	movs	r1, #76	@ 0x4c
 800ebf0:	8812      	ldrh	r2, [r2, #0]
 800ebf2:	525a      	strh	r2, [r3, r1]
}
 800ebf4:	46c0      	nop			@ (mov r8, r8)
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	b002      	add	sp, #8
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20000b3c 	.word	0x20000b3c

0800ec00 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	0002      	movs	r2, r0
 800ec08:	1dbb      	adds	r3, r7, #6
 800ec0a:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 800ec0c:	4b04      	ldr	r3, [pc, #16]	@ (800ec20 <UG_SetBackcolor+0x20>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	1dba      	adds	r2, r7, #6
 800ec12:	214e      	movs	r1, #78	@ 0x4e
 800ec14:	8812      	ldrh	r2, [r2, #0]
 800ec16:	525a      	strh	r2, [r3, r1]
}
 800ec18:	46c0      	nop			@ (mov r8, r8)
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	b002      	add	sp, #8
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000b3c 	.word	0x20000b3c

0800ec24 <UG_FontSetHSpace>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
<<<<<<< HEAD
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	0002      	movs	r2, r0
 800faf0:	1dbb      	adds	r3, r7, #6
 800faf2:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 800faf4:	4b05      	ldr	r3, [pc, #20]	@ (800fb0c <UG_FontSetHSpace+0x24>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	1dba      	adds	r2, r7, #6
 800fafa:	8812      	ldrh	r2, [r2, #0]
 800fafc:	b251      	sxtb	r1, r2
 800fafe:	2249      	movs	r2, #73	@ 0x49
 800fb00:	5499      	strb	r1, [r3, r2]
}
 800fb02:	46c0      	nop			@ (mov r8, r8)
 800fb04:	46bd      	mov	sp, r7
 800fb06:	b002      	add	sp, #8
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	46c0      	nop			@ (mov r8, r8)
 800fb0c:	20000c44 	.word	0x20000c44

0800fb10 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	0002      	movs	r2, r0
 800fb18:	1dbb      	adds	r3, r7, #6
 800fb1a:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 800fb1c:	4b05      	ldr	r3, [pc, #20]	@ (800fb34 <UG_FontSetVSpace+0x24>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	1dba      	adds	r2, r7, #6
 800fb22:	8812      	ldrh	r2, [r2, #0]
 800fb24:	b251      	sxtb	r1, r2
 800fb26:	224a      	movs	r2, #74	@ 0x4a
 800fb28:	5499      	strb	r1, [r3, r2]
}
 800fb2a:	46c0      	nop			@ (mov r8, r8)
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	b002      	add	sp, #8
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	46c0      	nop			@ (mov r8, r8)
 800fb34:	20000c44 	.word	0x20000c44

0800fb38 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	0002      	movs	r2, r0
 800fb40:	1dfb      	adds	r3, r7, #7
 800fb42:	701a      	strb	r2, [r3, #0]
  gui->transparent_font=t;
 800fb44:	4b04      	ldr	r3, [pc, #16]	@ (800fb58 <UG_FontSetTransparency+0x20>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	1dfa      	adds	r2, r7, #7
 800fb4a:	2148      	movs	r1, #72	@ 0x48
 800fb4c:	7812      	ldrb	r2, [r2, #0]
 800fb4e:	545a      	strb	r2, [r3, r1]
}
 800fb50:	46c0      	nop			@ (mov r8, r8)
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b002      	add	sp, #8
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	20000c44 	.word	0x20000c44

0800fb5c <_UG_DecodeUTF8>:
=======
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	0002      	movs	r2, r0
 800ec2c:	1dbb      	adds	r3, r7, #6
 800ec2e:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 800ec30:	4b05      	ldr	r3, [pc, #20]	@ (800ec48 <UG_FontSetHSpace+0x24>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	1dba      	adds	r2, r7, #6
 800ec36:	8812      	ldrh	r2, [r2, #0]
 800ec38:	b251      	sxtb	r1, r2
 800ec3a:	2249      	movs	r2, #73	@ 0x49
 800ec3c:	5499      	strb	r1, [r3, r2]
}
 800ec3e:	46c0      	nop			@ (mov r8, r8)
 800ec40:	46bd      	mov	sp, r7
 800ec42:	b002      	add	sp, #8
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	46c0      	nop			@ (mov r8, r8)
 800ec48:	20000b3c 	.word	0x20000b3c

0800ec4c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	0002      	movs	r2, r0
 800ec54:	1dbb      	adds	r3, r7, #6
 800ec56:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 800ec58:	4b05      	ldr	r3, [pc, #20]	@ (800ec70 <UG_FontSetVSpace+0x24>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	1dba      	adds	r2, r7, #6
 800ec5e:	8812      	ldrh	r2, [r2, #0]
 800ec60:	b251      	sxtb	r1, r2
 800ec62:	224a      	movs	r2, #74	@ 0x4a
 800ec64:	5499      	strb	r1, [r3, r2]
}
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	b002      	add	sp, #8
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	46c0      	nop			@ (mov r8, r8)
 800ec70:	20000b3c 	.word	0x20000b3c

0800ec74 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	0002      	movs	r2, r0
 800ec7c:	1dfb      	adds	r3, r7, #7
 800ec7e:	701a      	strb	r2, [r3, #0]
  gui->transparent_font=t;
 800ec80:	4b04      	ldr	r3, [pc, #16]	@ (800ec94 <UG_FontSetTransparency+0x20>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	1dfa      	adds	r2, r7, #7
 800ec86:	2148      	movs	r1, #72	@ 0x48
 800ec88:	7812      	ldrb	r2, [r2, #0]
 800ec8a:	545a      	strb	r2, [r3, r1]
}
 800ec8c:	46c0      	nop			@ (mov r8, r8)
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	b002      	add	sp, #8
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	20000b3c 	.word	0x20000b3c

0800ec98 <_UG_DecodeUTF8>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
<<<<<<< HEAD
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]

  char c=**str;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	210f      	movs	r1, #15
 800fb6a:	187b      	adds	r3, r7, r1
 800fb6c:	7812      	ldrb	r2, [r2, #0]
 800fb6e:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800fb70:	187b      	adds	r3, r7, r1
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	db08      	blt.n	800fb8c <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	601a      	str	r2, [r3, #0]
    return c;
 800fb84:	187b      	adds	r3, r7, r1
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	e091      	b.n	800fcb0 <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 800fb8c:	230e      	movs	r3, #14
 800fb8e:	18fb      	adds	r3, r7, r3
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 800fb94:	230c      	movs	r3, #12
 800fb96:	18fb      	adds	r3, r7, r3
 800fb98:	2200      	movs	r2, #0
 800fb9a:	801a      	strh	r2, [r3, #0]

  while(**str)
 800fb9c:	e07d      	b.n	800fc9a <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	210f      	movs	r1, #15
 800fba4:	187b      	adds	r3, r7, r1
 800fba6:	7812      	ldrb	r2, [r2, #0]
 800fba8:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800fbb4:	220e      	movs	r2, #14
 800fbb6:	18bb      	adds	r3, r7, r2
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d14f      	bne.n	800fc5e <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800fbbe:	187b      	adds	r3, r7, r1
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2bdf      	cmp	r3, #223	@ 0xdf
 800fbc4:	d809      	bhi.n	800fbda <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 800fbc6:	18bb      	adds	r3, r7, r2
 800fbc8:	2201      	movs	r2, #1
 800fbca:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 800fbcc:	187b      	adds	r3, r7, r1
 800fbce:	187a      	adds	r2, r7, r1
 800fbd0:	7812      	ldrb	r2, [r2, #0]
 800fbd2:	211f      	movs	r1, #31
 800fbd4:	400a      	ands	r2, r1
 800fbd6:	701a      	strb	r2, [r3, #0]
 800fbd8:	e03a      	b.n	800fc50 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800fbda:	210f      	movs	r1, #15
 800fbdc:	187b      	adds	r3, r7, r1
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2bef      	cmp	r3, #239	@ 0xef
 800fbe2:	d80a      	bhi.n	800fbfa <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 800fbe4:	230e      	movs	r3, #14
 800fbe6:	18fb      	adds	r3, r7, r3
 800fbe8:	2202      	movs	r2, #2
 800fbea:	701a      	strb	r2, [r3, #0]
        c &= 15;
 800fbec:	187b      	adds	r3, r7, r1
 800fbee:	187a      	adds	r2, r7, r1
 800fbf0:	7812      	ldrb	r2, [r2, #0]
 800fbf2:	210f      	movs	r1, #15
 800fbf4:	400a      	ands	r2, r1
 800fbf6:	701a      	strb	r2, [r3, #0]
 800fbf8:	e02a      	b.n	800fc50 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800fbfa:	210f      	movs	r1, #15
 800fbfc:	187b      	adds	r3, r7, r1
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2bf7      	cmp	r3, #247	@ 0xf7
 800fc02:	d80a      	bhi.n	800fc1a <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 800fc04:	230e      	movs	r3, #14
 800fc06:	18fb      	adds	r3, r7, r3
 800fc08:	2203      	movs	r2, #3
 800fc0a:	701a      	strb	r2, [r3, #0]
        c &= 7;
 800fc0c:	187b      	adds	r3, r7, r1
 800fc0e:	187a      	adds	r2, r7, r1
 800fc10:	7812      	ldrb	r2, [r2, #0]
 800fc12:	2107      	movs	r1, #7
 800fc14:	400a      	ands	r2, r1
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	e01a      	b.n	800fc50 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800fc1a:	210f      	movs	r1, #15
 800fc1c:	187b      	adds	r3, r7, r1
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2bfb      	cmp	r3, #251	@ 0xfb
 800fc22:	d80a      	bhi.n	800fc3a <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 800fc24:	230e      	movs	r3, #14
 800fc26:	18fb      	adds	r3, r7, r3
 800fc28:	2204      	movs	r2, #4
 800fc2a:	701a      	strb	r2, [r3, #0]
        c &= 3;
 800fc2c:	187b      	adds	r3, r7, r1
 800fc2e:	187a      	adds	r2, r7, r1
 800fc30:	7812      	ldrb	r2, [r2, #0]
 800fc32:	2103      	movs	r1, #3
 800fc34:	400a      	ands	r2, r1
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	e00a      	b.n	800fc50 <_UG_DecodeUTF8+0xf4>
=======
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]

  char c=**str;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	210f      	movs	r1, #15
 800eca6:	187b      	adds	r3, r7, r1
 800eca8:	7812      	ldrb	r2, [r2, #0]
 800ecaa:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800ecac:	187b      	adds	r3, r7, r1
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	b25b      	sxtb	r3, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	db08      	blt.n	800ecc8 <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	601a      	str	r2, [r3, #0]
    return c;
 800ecc0:	187b      	adds	r3, r7, r1
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	e091      	b.n	800edec <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 800ecc8:	230e      	movs	r3, #14
 800ecca:	18fb      	adds	r3, r7, r3
 800eccc:	2200      	movs	r2, #0
 800ecce:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 800ecd0:	230c      	movs	r3, #12
 800ecd2:	18fb      	adds	r3, r7, r3
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	801a      	strh	r2, [r3, #0]

  while(**str)
 800ecd8:	e07d      	b.n	800edd6 <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	210f      	movs	r1, #15
 800ece0:	187b      	adds	r3, r7, r1
 800ece2:	7812      	ldrb	r2, [r2, #0]
 800ece4:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800ecf0:	220e      	movs	r2, #14
 800ecf2:	18bb      	adds	r3, r7, r2
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d14f      	bne.n	800ed9a <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800ecfa:	187b      	adds	r3, r7, r1
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	2bdf      	cmp	r3, #223	@ 0xdf
 800ed00:	d809      	bhi.n	800ed16 <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 800ed02:	18bb      	adds	r3, r7, r2
 800ed04:	2201      	movs	r2, #1
 800ed06:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 800ed08:	187b      	adds	r3, r7, r1
 800ed0a:	187a      	adds	r2, r7, r1
 800ed0c:	7812      	ldrb	r2, [r2, #0]
 800ed0e:	211f      	movs	r1, #31
 800ed10:	400a      	ands	r2, r1
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	e03a      	b.n	800ed8c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800ed16:	210f      	movs	r1, #15
 800ed18:	187b      	adds	r3, r7, r1
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2bef      	cmp	r3, #239	@ 0xef
 800ed1e:	d80a      	bhi.n	800ed36 <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 800ed20:	230e      	movs	r3, #14
 800ed22:	18fb      	adds	r3, r7, r3
 800ed24:	2202      	movs	r2, #2
 800ed26:	701a      	strb	r2, [r3, #0]
        c &= 15;
 800ed28:	187b      	adds	r3, r7, r1
 800ed2a:	187a      	adds	r2, r7, r1
 800ed2c:	7812      	ldrb	r2, [r2, #0]
 800ed2e:	210f      	movs	r1, #15
 800ed30:	400a      	ands	r2, r1
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	e02a      	b.n	800ed8c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800ed36:	210f      	movs	r1, #15
 800ed38:	187b      	adds	r3, r7, r1
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2bf7      	cmp	r3, #247	@ 0xf7
 800ed3e:	d80a      	bhi.n	800ed56 <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 800ed40:	230e      	movs	r3, #14
 800ed42:	18fb      	adds	r3, r7, r3
 800ed44:	2203      	movs	r2, #3
 800ed46:	701a      	strb	r2, [r3, #0]
        c &= 7;
 800ed48:	187b      	adds	r3, r7, r1
 800ed4a:	187a      	adds	r2, r7, r1
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	2107      	movs	r1, #7
 800ed50:	400a      	ands	r2, r1
 800ed52:	701a      	strb	r2, [r3, #0]
 800ed54:	e01a      	b.n	800ed8c <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800ed56:	210f      	movs	r1, #15
 800ed58:	187b      	adds	r3, r7, r1
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2bfb      	cmp	r3, #251	@ 0xfb
 800ed5e:	d80a      	bhi.n	800ed76 <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 800ed60:	230e      	movs	r3, #14
 800ed62:	18fb      	adds	r3, r7, r3
 800ed64:	2204      	movs	r2, #4
 800ed66:	701a      	strb	r2, [r3, #0]
        c &= 3;
 800ed68:	187b      	adds	r3, r7, r1
 800ed6a:	187a      	adds	r2, r7, r1
 800ed6c:	7812      	ldrb	r2, [r2, #0]
 800ed6e:	2103      	movs	r1, #3
 800ed70:	400a      	ands	r2, r1
 800ed72:	701a      	strb	r2, [r3, #0]
 800ed74:	e00a      	b.n	800ed8c <_UG_DecodeUTF8+0xf4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
<<<<<<< HEAD
 800fc3a:	230e      	movs	r3, #14
 800fc3c:	18fb      	adds	r3, r7, r3
 800fc3e:	2205      	movs	r2, #5
 800fc40:	701a      	strb	r2, [r3, #0]
        c &= 1;
 800fc42:	220f      	movs	r2, #15
 800fc44:	18bb      	adds	r3, r7, r2
 800fc46:	18ba      	adds	r2, r7, r2
 800fc48:	7812      	ldrb	r2, [r2, #0]
 800fc4a:	2101      	movs	r1, #1
 800fc4c:	400a      	ands	r2, r1
 800fc4e:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 800fc50:	230c      	movs	r3, #12
 800fc52:	18fb      	adds	r3, r7, r3
 800fc54:	220f      	movs	r2, #15
 800fc56:	18ba      	adds	r2, r7, r2
 800fc58:	7812      	ldrb	r2, [r2, #0]
 800fc5a:	801a      	strh	r2, [r3, #0]
 800fc5c:	e01d      	b.n	800fc9a <_UG_DecodeUTF8+0x13e>
=======
 800ed76:	230e      	movs	r3, #14
 800ed78:	18fb      	adds	r3, r7, r3
 800ed7a:	2205      	movs	r2, #5
 800ed7c:	701a      	strb	r2, [r3, #0]
        c &= 1;
 800ed7e:	220f      	movs	r2, #15
 800ed80:	18bb      	adds	r3, r7, r2
 800ed82:	18ba      	adds	r2, r7, r2
 800ed84:	7812      	ldrb	r2, [r2, #0]
 800ed86:	2101      	movs	r1, #1
 800ed88:	400a      	ands	r2, r1
 800ed8a:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 800ed8c:	230c      	movs	r3, #12
 800ed8e:	18fb      	adds	r3, r7, r3
 800ed90:	220f      	movs	r2, #15
 800ed92:	18ba      	adds	r2, r7, r2
 800ed94:	7812      	ldrb	r2, [r2, #0]
 800ed96:	801a      	strh	r2, [r3, #0]
 800ed98:	e01d      	b.n	800edd6 <_UG_DecodeUTF8+0x13e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      encoding<<=6;
<<<<<<< HEAD
 800fc5e:	210c      	movs	r1, #12
 800fc60:	187b      	adds	r3, r7, r1
 800fc62:	187a      	adds	r2, r7, r1
 800fc64:	8812      	ldrh	r2, [r2, #0]
 800fc66:	0192      	lsls	r2, r2, #6
 800fc68:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 800fc6a:	230f      	movs	r3, #15
 800fc6c:	18fb      	adds	r3, r7, r3
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	b21b      	sxth	r3, r3
 800fc72:	223f      	movs	r2, #63	@ 0x3f
 800fc74:	4013      	ands	r3, r2
 800fc76:	b21a      	sxth	r2, r3
 800fc78:	187b      	adds	r3, r7, r1
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	5e1b      	ldrsh	r3, [r3, r0]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	b21a      	sxth	r2, r3
 800fc82:	187b      	adds	r3, r7, r1
 800fc84:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 800fc86:	210e      	movs	r1, #14
 800fc88:	187b      	adds	r3, r7, r1
 800fc8a:	187a      	adds	r2, r7, r1
 800fc8c:	7812      	ldrb	r2, [r2, #0]
 800fc8e:	3a01      	subs	r2, #1
 800fc90:	701a      	strb	r2, [r3, #0]
 800fc92:	187b      	adds	r3, r7, r1
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d006      	beq.n	800fca8 <_UG_DecodeUTF8+0x14c>
  while(**str)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d000      	beq.n	800fca6 <_UG_DecodeUTF8+0x14a>
 800fca4:	e77b      	b.n	800fb9e <_UG_DecodeUTF8+0x42>
 800fca6:	e000      	b.n	800fcaa <_UG_DecodeUTF8+0x14e>
        break;
 800fca8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return encoding;
 800fcaa:	230c      	movs	r3, #12
 800fcac:	18fb      	adds	r3, r7, r3
 800fcae:	881b      	ldrh	r3, [r3, #0]
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b004      	add	sp, #16
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <_UG_GetCharData>:
=======
 800ed9a:	210c      	movs	r1, #12
 800ed9c:	187b      	adds	r3, r7, r1
 800ed9e:	187a      	adds	r2, r7, r1
 800eda0:	8812      	ldrh	r2, [r2, #0]
 800eda2:	0192      	lsls	r2, r2, #6
 800eda4:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 800eda6:	230f      	movs	r3, #15
 800eda8:	18fb      	adds	r3, r7, r3
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	b21b      	sxth	r3, r3
 800edae:	223f      	movs	r2, #63	@ 0x3f
 800edb0:	4013      	ands	r3, r2
 800edb2:	b21a      	sxth	r2, r3
 800edb4:	187b      	adds	r3, r7, r1
 800edb6:	2000      	movs	r0, #0
 800edb8:	5e1b      	ldrsh	r3, [r3, r0]
 800edba:	4313      	orrs	r3, r2
 800edbc:	b21a      	sxth	r2, r3
 800edbe:	187b      	adds	r3, r7, r1
 800edc0:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 800edc2:	210e      	movs	r1, #14
 800edc4:	187b      	adds	r3, r7, r1
 800edc6:	187a      	adds	r2, r7, r1
 800edc8:	7812      	ldrb	r2, [r2, #0]
 800edca:	3a01      	subs	r2, #1
 800edcc:	701a      	strb	r2, [r3, #0]
 800edce:	187b      	adds	r3, r7, r1
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d006      	beq.n	800ede4 <_UG_DecodeUTF8+0x14c>
  while(**str)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d000      	beq.n	800ede2 <_UG_DecodeUTF8+0x14a>
 800ede0:	e77b      	b.n	800ecda <_UG_DecodeUTF8+0x42>
 800ede2:	e000      	b.n	800ede6 <_UG_DecodeUTF8+0x14e>
        break;
 800ede4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return encoding;
 800ede6:	230c      	movs	r3, #12
 800ede8:	18fb      	adds	r3, r7, r3
 800edea:	881b      	ldrh	r3, [r3, #0]
}
 800edec:	0018      	movs	r0, r3
 800edee:	46bd      	mov	sp, r7
 800edf0:	b004      	add	sp, #16
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <_UG_GetCharData>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
<<<<<<< HEAD
 800fcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcba:	b087      	sub	sp, #28
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	0002      	movs	r2, r0
 800fcc0:	6039      	str	r1, [r7, #0]
 800fcc2:	1dbb      	adds	r3, r7, #6
 800fcc4:	801a      	strh	r2, [r3, #0]
=======
 800edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	0002      	movs	r2, r0
 800edfc:	6039      	str	r1, [r7, #0]
 800edfe:	1dbb      	adds	r3, r7, #6
 800ee00:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  const UG_U8 * offset = gui->currentFont.offsets;
<<<<<<< HEAD
 800fcc6:	4b8c      	ldr	r3, [pc, #560]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fccc:	617b      	str	r3, [r7, #20]
  UG_U16 char_start=0, char_stop=0, skip=0;
 800fcce:	2310      	movs	r3, #16
 800fcd0:	18fb      	adds	r3, r7, r3
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	801a      	strh	r2, [r3, #0]
 800fcd6:	230e      	movs	r3, #14
 800fcd8:	18fb      	adds	r3, r7, r3
 800fcda:	2200      	movs	r2, #0
 800fcdc:	801a      	strh	r2, [r3, #0]
 800fcde:	2312      	movs	r3, #18
 800fce0:	18fb      	adds	r3, r7, r3
 800fce2:	2200      	movs	r2, #0
 800fce4:	801a      	strh	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800fce6:	4b84      	ldr	r3, [pc, #528]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fcec:	4b83      	ldr	r3, [pc, #524]	@ (800fefc <_UG_GetCharData+0x244>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d110      	bne.n	800fd16 <_UG_GetCharData+0x5e>
 800fcf4:	4b82      	ldr	r3, [pc, #520]	@ (800ff00 <_UG_GetCharData+0x248>)
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	1dba      	adds	r2, r7, #6
 800fcfa:	8812      	ldrh	r2, [r2, #0]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d10a      	bne.n	800fd16 <_UG_GetCharData+0x5e>
    if(p) *p=last_p;                                                      // Load char bitmap address if available. Sometimes called with null p to get only the cached width.
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <_UG_GetCharData+0x56>
 800fd06:	4b7f      	ldr	r3, [pc, #508]	@ (800ff04 <_UG_GetCharData+0x24c>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	601a      	str	r2, [r3, #0]
    return last_width;                                                    // Return width.
 800fd0e:	4b7e      	ldr	r3, [pc, #504]	@ (800ff08 <_UG_GetCharData+0x250>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	5e9b      	ldrsh	r3, [r3, r2]
 800fd14:	e0eb      	b.n	800feee <_UG_GetCharData+0x236>
  }
  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800fd16:	4b78      	ldr	r3, [pc, #480]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	222d      	movs	r2, #45	@ 0x2d
 800fd1c:	5c9b      	ldrb	r3, [r3, r2]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d035      	beq.n	800fd8e <_UG_GetCharData+0xd6>
    switch (encoding)
 800fd22:	1dbb      	adds	r3, r7, #6
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	2bfc      	cmp	r3, #252	@ 0xfc
 800fd28:	dc31      	bgt.n	800fd8e <_UG_GetCharData+0xd6>
 800fd2a:	2bd6      	cmp	r3, #214	@ 0xd6
 800fd2c:	da07      	bge.n	800fd3e <_UG_GetCharData+0x86>
 800fd2e:	2bc4      	cmp	r3, #196	@ 0xc4
 800fd30:	d021      	beq.n	800fd76 <_UG_GetCharData+0xbe>
 800fd32:	dc2c      	bgt.n	800fd8e <_UG_GetCharData+0xd6>
 800fd34:	2bb0      	cmp	r3, #176	@ 0xb0
 800fd36:	d026      	beq.n	800fd86 <_UG_GetCharData+0xce>
 800fd38:	2bb5      	cmp	r3, #181	@ 0xb5
 800fd3a:	d020      	beq.n	800fd7e <_UG_GetCharData+0xc6>
 800fd3c:	e027      	b.n	800fd8e <_UG_GetCharData+0xd6>
 800fd3e:	3bd6      	subs	r3, #214	@ 0xd6
 800fd40:	2b26      	cmp	r3, #38	@ 0x26
 800fd42:	d824      	bhi.n	800fd8e <_UG_GetCharData+0xd6>
 800fd44:	009a      	lsls	r2, r3, #2
 800fd46:	4b71      	ldr	r3, [pc, #452]	@ (800ff0c <_UG_GetCharData+0x254>)
 800fd48:	18d3      	adds	r3, r2, r3
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 800fd4e:	1dbb      	adds	r3, r7, #6
 800fd50:	2294      	movs	r2, #148	@ 0x94
 800fd52:	801a      	strh	r2, [r3, #0]
 800fd54:	e01b      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xD6: encoding = 0x99; break; // Ö
 800fd56:	1dbb      	adds	r3, r7, #6
 800fd58:	2299      	movs	r2, #153	@ 0x99
 800fd5a:	801a      	strh	r2, [r3, #0]
 800fd5c:	e017      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xFC: encoding = 0x81; break; // ü
 800fd5e:	1dbb      	adds	r3, r7, #6
 800fd60:	2281      	movs	r2, #129	@ 0x81
 800fd62:	801a      	strh	r2, [r3, #0]
 800fd64:	e013      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xDC: encoding = 0x9A; break; // Ü
 800fd66:	1dbb      	adds	r3, r7, #6
 800fd68:	229a      	movs	r2, #154	@ 0x9a
 800fd6a:	801a      	strh	r2, [r3, #0]
 800fd6c:	e00f      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xE4: encoding = 0x84; break; // ä
 800fd6e:	1dbb      	adds	r3, r7, #6
 800fd70:	2284      	movs	r2, #132	@ 0x84
 800fd72:	801a      	strh	r2, [r3, #0]
 800fd74:	e00b      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xC4: encoding = 0x8E; break; // Ä
 800fd76:	1dbb      	adds	r3, r7, #6
 800fd78:	228e      	movs	r2, #142	@ 0x8e
 800fd7a:	801a      	strh	r2, [r3, #0]
 800fd7c:	e007      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xB5: encoding = 0xE6; break; // µ
 800fd7e:	1dbb      	adds	r3, r7, #6
 800fd80:	22e6      	movs	r2, #230	@ 0xe6
 800fd82:	801a      	strh	r2, [r3, #0]
 800fd84:	e003      	b.n	800fd8e <_UG_GetCharData+0xd6>
       case 0xB0: encoding = 0xF8; break; // °
 800fd86:	1dbb      	adds	r3, r7, #6
 800fd88:	22f8      	movs	r2, #248	@ 0xf8
 800fd8a:	801a      	strh	r2, [r3, #0]
 800fd8c:	46c0      	nop			@ (mov r8, r8)
=======
 800ee02:	4b8c      	ldr	r3, [pc, #560]	@ (800f034 <_UG_GetCharData+0x240>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee08:	617b      	str	r3, [r7, #20]
  UG_U16 char_start=0, char_stop=0, skip=0;
 800ee0a:	2310      	movs	r3, #16
 800ee0c:	18fb      	adds	r3, r7, r3
 800ee0e:	2200      	movs	r2, #0
 800ee10:	801a      	strh	r2, [r3, #0]
 800ee12:	230e      	movs	r3, #14
 800ee14:	18fb      	adds	r3, r7, r3
 800ee16:	2200      	movs	r2, #0
 800ee18:	801a      	strh	r2, [r3, #0]
 800ee1a:	2312      	movs	r3, #18
 800ee1c:	18fb      	adds	r3, r7, r3
 800ee1e:	2200      	movs	r2, #0
 800ee20:	801a      	strh	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800ee22:	4b84      	ldr	r3, [pc, #528]	@ (800f034 <_UG_GetCharData+0x240>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee28:	4b83      	ldr	r3, [pc, #524]	@ (800f038 <_UG_GetCharData+0x244>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d110      	bne.n	800ee52 <_UG_GetCharData+0x5e>
 800ee30:	4b82      	ldr	r3, [pc, #520]	@ (800f03c <_UG_GetCharData+0x248>)
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	1dba      	adds	r2, r7, #6
 800ee36:	8812      	ldrh	r2, [r2, #0]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d10a      	bne.n	800ee52 <_UG_GetCharData+0x5e>
    if(p) *p=last_p;                                                      // Load char bitmap address if available. Sometimes called with null p to get only the cached width.
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <_UG_GetCharData+0x56>
 800ee42:	4b7f      	ldr	r3, [pc, #508]	@ (800f040 <_UG_GetCharData+0x24c>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	601a      	str	r2, [r3, #0]
    return last_width;                                                    // Return width.
 800ee4a:	4b7e      	ldr	r3, [pc, #504]	@ (800f044 <_UG_GetCharData+0x250>)
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee50:	e0eb      	b.n	800f02a <_UG_GetCharData+0x236>
  }
  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800ee52:	4b78      	ldr	r3, [pc, #480]	@ (800f034 <_UG_GetCharData+0x240>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	222d      	movs	r2, #45	@ 0x2d
 800ee58:	5c9b      	ldrb	r3, [r3, r2]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d035      	beq.n	800eeca <_UG_GetCharData+0xd6>
    switch (encoding)
 800ee5e:	1dbb      	adds	r3, r7, #6
 800ee60:	881b      	ldrh	r3, [r3, #0]
 800ee62:	2bfc      	cmp	r3, #252	@ 0xfc
 800ee64:	dc31      	bgt.n	800eeca <_UG_GetCharData+0xd6>
 800ee66:	2bd6      	cmp	r3, #214	@ 0xd6
 800ee68:	da07      	bge.n	800ee7a <_UG_GetCharData+0x86>
 800ee6a:	2bc4      	cmp	r3, #196	@ 0xc4
 800ee6c:	d021      	beq.n	800eeb2 <_UG_GetCharData+0xbe>
 800ee6e:	dc2c      	bgt.n	800eeca <_UG_GetCharData+0xd6>
 800ee70:	2bb0      	cmp	r3, #176	@ 0xb0
 800ee72:	d026      	beq.n	800eec2 <_UG_GetCharData+0xce>
 800ee74:	2bb5      	cmp	r3, #181	@ 0xb5
 800ee76:	d020      	beq.n	800eeba <_UG_GetCharData+0xc6>
 800ee78:	e027      	b.n	800eeca <_UG_GetCharData+0xd6>
 800ee7a:	3bd6      	subs	r3, #214	@ 0xd6
 800ee7c:	2b26      	cmp	r3, #38	@ 0x26
 800ee7e:	d824      	bhi.n	800eeca <_UG_GetCharData+0xd6>
 800ee80:	009a      	lsls	r2, r3, #2
 800ee82:	4b71      	ldr	r3, [pc, #452]	@ (800f048 <_UG_GetCharData+0x254>)
 800ee84:	18d3      	adds	r3, r2, r3
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 800ee8a:	1dbb      	adds	r3, r7, #6
 800ee8c:	2294      	movs	r2, #148	@ 0x94
 800ee8e:	801a      	strh	r2, [r3, #0]
 800ee90:	e01b      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xD6: encoding = 0x99; break; // Ö
 800ee92:	1dbb      	adds	r3, r7, #6
 800ee94:	2299      	movs	r2, #153	@ 0x99
 800ee96:	801a      	strh	r2, [r3, #0]
 800ee98:	e017      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xFC: encoding = 0x81; break; // ü
 800ee9a:	1dbb      	adds	r3, r7, #6
 800ee9c:	2281      	movs	r2, #129	@ 0x81
 800ee9e:	801a      	strh	r2, [r3, #0]
 800eea0:	e013      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xDC: encoding = 0x9A; break; // Ü
 800eea2:	1dbb      	adds	r3, r7, #6
 800eea4:	229a      	movs	r2, #154	@ 0x9a
 800eea6:	801a      	strh	r2, [r3, #0]
 800eea8:	e00f      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xE4: encoding = 0x84; break; // ä
 800eeaa:	1dbb      	adds	r3, r7, #6
 800eeac:	2284      	movs	r2, #132	@ 0x84
 800eeae:	801a      	strh	r2, [r3, #0]
 800eeb0:	e00b      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xC4: encoding = 0x8E; break; // Ä
 800eeb2:	1dbb      	adds	r3, r7, #6
 800eeb4:	228e      	movs	r2, #142	@ 0x8e
 800eeb6:	801a      	strh	r2, [r3, #0]
 800eeb8:	e007      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xB5: encoding = 0xE6; break; // µ
 800eeba:	1dbb      	adds	r3, r7, #6
 800eebc:	22e6      	movs	r2, #230	@ 0xe6
 800eebe:	801a      	strh	r2, [r3, #0]
 800eec0:	e003      	b.n	800eeca <_UG_GetCharData+0xd6>
       case 0xB0: encoding = 0xF8; break; // °
 800eec2:	1dbb      	adds	r3, r7, #6
 800eec4:	22f8      	movs	r2, #248	@ 0xf8
 800eec6:	801a      	strh	r2, [r3, #0]
 800eec8:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }


  while(1)                                                                  // Seek through the offsets
  {
    UG_U8 offset_type = *offset++;                                          // Fist byte indicates offset type: single char, range start, offset end
<<<<<<< HEAD
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	1c5a      	adds	r2, r3, #1
 800fd92:	617a      	str	r2, [r7, #20]
 800fd94:	250d      	movs	r5, #13
 800fd96:	197a      	adds	r2, r7, r5
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	7013      	strb	r3, [r2, #0]
    if(offset_type == 0xFF)
 800fd9c:	197b      	adds	r3, r7, r5
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2bff      	cmp	r3, #255	@ 0xff
 800fda2:	d100      	bne.n	800fda6 <_UG_GetCharData+0xee>
 800fda4:	e069      	b.n	800fe7a <_UG_GetCharData+0x1c2>
      break;                                                                // Offset table end
    char_start = ptr_8to16(offset);
 800fda6:	2610      	movs	r6, #16
 800fda8:	19bc      	adds	r4, r7, r6
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	0018      	movs	r0, r3
 800fdae:	f7ff fac3 	bl	800f338 <ptr_8to16>
 800fdb2:	0003      	movs	r3, r0
 800fdb4:	8023      	strh	r3, [r4, #0]
    offset+=2;
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	3302      	adds	r3, #2
 800fdba:	617b      	str	r3, [r7, #20]
    if(offset_type == 0)                                                    // Single char offset
 800fdbc:	197b      	adds	r3, r7, r5
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d115      	bne.n	800fdf0 <_UG_GetCharData+0x138>
    {
      if(encoding==char_start)
 800fdc4:	1dba      	adds	r2, r7, #6
 800fdc6:	19bb      	adds	r3, r7, r6
 800fdc8:	8812      	ldrh	r2, [r2, #0]
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d056      	beq.n	800fe7e <_UG_GetCharData+0x1c6>
        break;                                                              // Matching the current offset char
      else if (encoding<char_start)
 800fdd0:	1dba      	adds	r2, r7, #6
 800fdd2:	19bb      	adds	r3, r7, r6
 800fdd4:	8812      	ldrh	r2, [r2, #0]
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d202      	bcs.n	800fde2 <_UG_GetCharData+0x12a>
        return -1;                                                          // If the encoding is lower than current range, the char is not in the font
 800fddc:	2301      	movs	r3, #1
 800fdde:	425b      	negs	r3, r3
 800fde0:	e085      	b.n	800feee <_UG_GetCharData+0x236>
      skip++;                                                               // Else, increase skip and keep searching
 800fde2:	2112      	movs	r1, #18
 800fde4:	187b      	adds	r3, r7, r1
 800fde6:	881a      	ldrh	r2, [r3, #0]
 800fde8:	187b      	adds	r3, r7, r1
 800fdea:	3201      	adds	r2, #1
 800fdec:	801a      	strh	r2, [r3, #0]
 800fdee:	e7ce      	b.n	800fd8e <_UG_GetCharData+0xd6>
    }
    else if(offset_type==1){
 800fdf0:	230d      	movs	r3, #13
 800fdf2:	18fb      	adds	r3, r7, r3
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d1c9      	bne.n	800fd8e <_UG_GetCharData+0xd6>
      char_stop =  ptr_8to16(offset);
 800fdfa:	250e      	movs	r5, #14
 800fdfc:	197c      	adds	r4, r7, r5
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	0018      	movs	r0, r3
 800fe02:	f7ff fa99 	bl	800f338 <ptr_8to16>
 800fe06:	0003      	movs	r3, r0
 800fe08:	8023      	strh	r3, [r4, #0]
      offset+=2;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	3302      	adds	r3, #2
 800fe0e:	617b      	str	r3, [r7, #20]
      if(encoding>=char_start && encoding<=char_stop)                       // If the encoding is between the range
 800fe10:	1dba      	adds	r2, r7, #6
 800fe12:	2110      	movs	r1, #16
 800fe14:	187b      	adds	r3, r7, r1
 800fe16:	8812      	ldrh	r2, [r2, #0]
 800fe18:	881b      	ldrh	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d312      	bcc.n	800fe44 <_UG_GetCharData+0x18c>
 800fe1e:	1dba      	adds	r2, r7, #6
 800fe20:	197b      	adds	r3, r7, r5
 800fe22:	8812      	ldrh	r2, [r2, #0]
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d80c      	bhi.n	800fe44 <_UG_GetCharData+0x18c>
      {
        skip += (encoding-char_start);                                      // Calculate the skip value
 800fe2a:	1dba      	adds	r2, r7, #6
 800fe2c:	187b      	adds	r3, r7, r1
 800fe2e:	8812      	ldrh	r2, [r2, #0]
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	b299      	uxth	r1, r3
 800fe36:	2212      	movs	r2, #18
 800fe38:	18bb      	adds	r3, r7, r2
 800fe3a:	18ba      	adds	r2, r7, r2
 800fe3c:	8812      	ldrh	r2, [r2, #0]
 800fe3e:	188a      	adds	r2, r1, r2
 800fe40:	801a      	strh	r2, [r3, #0]
        break;
 800fe42:	e01d      	b.n	800fe80 <_UG_GetCharData+0x1c8>
      }
      else if(encoding<char_start)
 800fe44:	1dba      	adds	r2, r7, #6
 800fe46:	2310      	movs	r3, #16
 800fe48:	18fb      	adds	r3, r7, r3
 800fe4a:	8812      	ldrh	r2, [r2, #0]
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d202      	bcs.n	800fe58 <_UG_GetCharData+0x1a0>
        return -1;                                                          // If the encoding is lower than current range start, the char is not in the font
 800fe52:	2301      	movs	r3, #1
 800fe54:	425b      	negs	r3, r3
 800fe56:	e04a      	b.n	800feee <_UG_GetCharData+0x236>
      skip += (char_stop-char_start)+1;                                     // Encoding not found in the current range, increase skip size and clear range flasg
 800fe58:	230e      	movs	r3, #14
 800fe5a:	18fa      	adds	r2, r7, r3
 800fe5c:	2310      	movs	r3, #16
 800fe5e:	18fb      	adds	r3, r7, r3
 800fe60:	8812      	ldrh	r2, [r2, #0]
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	2112      	movs	r1, #18
 800fe6a:	187b      	adds	r3, r7, r1
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	18d3      	adds	r3, r2, r3
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	187b      	adds	r3, r7, r1
 800fe74:	3201      	adds	r2, #1
 800fe76:	801a      	strh	r2, [r3, #0]
  {
 800fe78:	e789      	b.n	800fd8e <_UG_GetCharData+0xd6>
      break;                                                                // Offset table end
 800fe7a:	46c0      	nop			@ (mov r8, r8)
 800fe7c:	e000      	b.n	800fe80 <_UG_GetCharData+0x1c8>
        break;                                                              // Matching the current offset char
 800fe7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  last_font =  gui->currentFont.font;                                       // Update cached data
 800fe80:	4b1d      	ldr	r3, [pc, #116]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe86:	4b1d      	ldr	r3, [pc, #116]	@ (800fefc <_UG_GetCharData+0x244>)
 800fe88:	601a      	str	r2, [r3, #0]
  last_encoding = encoding;
 800fe8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ff00 <_UG_GetCharData+0x248>)
 800fe8c:	1dba      	adds	r2, r7, #6
 800fe8e:	8812      	ldrh	r2, [r2, #0]
 800fe90:	801a      	strh	r2, [r3, #0]
  last_p = ( gui->currentFont.data+(skip*gui->currentFont.bytes_per_char));
 800fe92:	4b19      	ldr	r3, [pc, #100]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fe98:	2012      	movs	r0, #18
 800fe9a:	183b      	adds	r3, r7, r0
 800fe9c:	8819      	ldrh	r1, [r3, #0]
 800fe9e:	4b16      	ldr	r3, [pc, #88]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800fea4:	434b      	muls	r3, r1
 800fea6:	18d2      	adds	r2, r2, r3
 800fea8:	4b16      	ldr	r3, [pc, #88]	@ (800ff04 <_UG_GetCharData+0x24c>)
 800feaa:	601a      	str	r2, [r3, #0]
  if( gui->currentFont.widths)                                              // If width table available
 800feac:	4b12      	ldr	r3, [pc, #72]	@ (800fef8 <_UG_GetCharData+0x240>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <_UG_GetCharData+0x214>
    last_width = *( gui->currentFont.widths+skip);                          // Use width from table
 800feb6:	4b10      	ldr	r3, [pc, #64]	@ (800fef8 <_UG_GetCharData+0x240>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800febc:	183b      	adds	r3, r7, r0
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	18d3      	adds	r3, r2, r3
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	b21a      	sxth	r2, r3
 800fec6:	4b10      	ldr	r3, [pc, #64]	@ (800ff08 <_UG_GetCharData+0x250>)
 800fec8:	801a      	strh	r2, [r3, #0]
 800feca:	e006      	b.n	800feda <_UG_GetCharData+0x222>
  else
    last_width =  gui->currentFont.char_width;                              // Else use width from char width
 800fecc:	4b0a      	ldr	r3, [pc, #40]	@ (800fef8 <_UG_GetCharData+0x240>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	222e      	movs	r2, #46	@ 0x2e
 800fed2:	5c9b      	ldrb	r3, [r3, r2]
 800fed4:	b21a      	sxth	r2, r3
 800fed6:	4b0c      	ldr	r3, [pc, #48]	@ (800ff08 <_UG_GetCharData+0x250>)
 800fed8:	801a      	strh	r2, [r3, #0]
  if(p)
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d003      	beq.n	800fee8 <_UG_GetCharData+0x230>
    *p=last_p;                                                              // Load char bitmap address
 800fee0:	4b08      	ldr	r3, [pc, #32]	@ (800ff04 <_UG_GetCharData+0x24c>)
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	601a      	str	r2, [r3, #0]
  return(last_width);                                                       // Return char width
 800fee8:	4b07      	ldr	r3, [pc, #28]	@ (800ff08 <_UG_GetCharData+0x250>)
 800feea:	2200      	movs	r2, #0
 800feec:	5e9b      	ldrsh	r3, [r3, r2]
}
 800feee:	0018      	movs	r0, r3
 800fef0:	46bd      	mov	sp, r7
 800fef2:	b007      	add	sp, #28
 800fef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fef6:	46c0      	nop			@ (mov r8, r8)
 800fef8:	20000c44 	.word	0x20000c44
 800fefc:	20000c48 	.word	0x20000c48
 800ff00:	20000c4c 	.word	0x20000c4c
 800ff04:	20000c50 	.word	0x20000c50
 800ff08:	20000c54 	.word	0x20000c54
 800ff0c:	08019d4c 	.word	0x08019d4c

0800ff10 <_UG_FontSelect>:
=======
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	617a      	str	r2, [r7, #20]
 800eed0:	250d      	movs	r5, #13
 800eed2:	197a      	adds	r2, r7, r5
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	7013      	strb	r3, [r2, #0]
    if(offset_type == 0xFF)
 800eed8:	197b      	adds	r3, r7, r5
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	2bff      	cmp	r3, #255	@ 0xff
 800eede:	d100      	bne.n	800eee2 <_UG_GetCharData+0xee>
 800eee0:	e069      	b.n	800efb6 <_UG_GetCharData+0x1c2>
      break;                                                                // Offset table end
    char_start = ptr_8to16(offset);
 800eee2:	2610      	movs	r6, #16
 800eee4:	19bc      	adds	r4, r7, r6
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	0018      	movs	r0, r3
 800eeea:	f7ff fac3 	bl	800e474 <ptr_8to16>
 800eeee:	0003      	movs	r3, r0
 800eef0:	8023      	strh	r3, [r4, #0]
    offset+=2;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	3302      	adds	r3, #2
 800eef6:	617b      	str	r3, [r7, #20]
    if(offset_type == 0)                                                    // Single char offset
 800eef8:	197b      	adds	r3, r7, r5
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d115      	bne.n	800ef2c <_UG_GetCharData+0x138>
    {
      if(encoding==char_start)
 800ef00:	1dba      	adds	r2, r7, #6
 800ef02:	19bb      	adds	r3, r7, r6
 800ef04:	8812      	ldrh	r2, [r2, #0]
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d056      	beq.n	800efba <_UG_GetCharData+0x1c6>
        break;                                                              // Matching the current offset char
      else if (encoding<char_start)
 800ef0c:	1dba      	adds	r2, r7, #6
 800ef0e:	19bb      	adds	r3, r7, r6
 800ef10:	8812      	ldrh	r2, [r2, #0]
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d202      	bcs.n	800ef1e <_UG_GetCharData+0x12a>
        return -1;                                                          // If the encoding is lower than current range, the char is not in the font
 800ef18:	2301      	movs	r3, #1
 800ef1a:	425b      	negs	r3, r3
 800ef1c:	e085      	b.n	800f02a <_UG_GetCharData+0x236>
      skip++;                                                               // Else, increase skip and keep searching
 800ef1e:	2112      	movs	r1, #18
 800ef20:	187b      	adds	r3, r7, r1
 800ef22:	881a      	ldrh	r2, [r3, #0]
 800ef24:	187b      	adds	r3, r7, r1
 800ef26:	3201      	adds	r2, #1
 800ef28:	801a      	strh	r2, [r3, #0]
 800ef2a:	e7ce      	b.n	800eeca <_UG_GetCharData+0xd6>
    }
    else if(offset_type==1){
 800ef2c:	230d      	movs	r3, #13
 800ef2e:	18fb      	adds	r3, r7, r3
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d1c9      	bne.n	800eeca <_UG_GetCharData+0xd6>
      char_stop =  ptr_8to16(offset);
 800ef36:	250e      	movs	r5, #14
 800ef38:	197c      	adds	r4, r7, r5
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	f7ff fa99 	bl	800e474 <ptr_8to16>
 800ef42:	0003      	movs	r3, r0
 800ef44:	8023      	strh	r3, [r4, #0]
      offset+=2;
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	617b      	str	r3, [r7, #20]
      if(encoding>=char_start && encoding<=char_stop)                       // If the encoding is between the range
 800ef4c:	1dba      	adds	r2, r7, #6
 800ef4e:	2110      	movs	r1, #16
 800ef50:	187b      	adds	r3, r7, r1
 800ef52:	8812      	ldrh	r2, [r2, #0]
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d312      	bcc.n	800ef80 <_UG_GetCharData+0x18c>
 800ef5a:	1dba      	adds	r2, r7, #6
 800ef5c:	197b      	adds	r3, r7, r5
 800ef5e:	8812      	ldrh	r2, [r2, #0]
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d80c      	bhi.n	800ef80 <_UG_GetCharData+0x18c>
      {
        skip += (encoding-char_start);                                      // Calculate the skip value
 800ef66:	1dba      	adds	r2, r7, #6
 800ef68:	187b      	adds	r3, r7, r1
 800ef6a:	8812      	ldrh	r2, [r2, #0]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b299      	uxth	r1, r3
 800ef72:	2212      	movs	r2, #18
 800ef74:	18bb      	adds	r3, r7, r2
 800ef76:	18ba      	adds	r2, r7, r2
 800ef78:	8812      	ldrh	r2, [r2, #0]
 800ef7a:	188a      	adds	r2, r1, r2
 800ef7c:	801a      	strh	r2, [r3, #0]
        break;
 800ef7e:	e01d      	b.n	800efbc <_UG_GetCharData+0x1c8>
      }
      else if(encoding<char_start)
 800ef80:	1dba      	adds	r2, r7, #6
 800ef82:	2310      	movs	r3, #16
 800ef84:	18fb      	adds	r3, r7, r3
 800ef86:	8812      	ldrh	r2, [r2, #0]
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d202      	bcs.n	800ef94 <_UG_GetCharData+0x1a0>
        return -1;                                                          // If the encoding is lower than current range start, the char is not in the font
 800ef8e:	2301      	movs	r3, #1
 800ef90:	425b      	negs	r3, r3
 800ef92:	e04a      	b.n	800f02a <_UG_GetCharData+0x236>
      skip += (char_stop-char_start)+1;                                     // Encoding not found in the current range, increase skip size and clear range flasg
 800ef94:	230e      	movs	r3, #14
 800ef96:	18fa      	adds	r2, r7, r3
 800ef98:	2310      	movs	r3, #16
 800ef9a:	18fb      	adds	r3, r7, r3
 800ef9c:	8812      	ldrh	r2, [r2, #0]
 800ef9e:	881b      	ldrh	r3, [r3, #0]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	2112      	movs	r1, #18
 800efa6:	187b      	adds	r3, r7, r1
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	18d3      	adds	r3, r2, r3
 800efac:	b29a      	uxth	r2, r3
 800efae:	187b      	adds	r3, r7, r1
 800efb0:	3201      	adds	r2, #1
 800efb2:	801a      	strh	r2, [r3, #0]
  {
 800efb4:	e789      	b.n	800eeca <_UG_GetCharData+0xd6>
      break;                                                                // Offset table end
 800efb6:	46c0      	nop			@ (mov r8, r8)
 800efb8:	e000      	b.n	800efbc <_UG_GetCharData+0x1c8>
        break;                                                              // Matching the current offset char
 800efba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  last_font =  gui->currentFont.font;                                       // Update cached data
 800efbc:	4b1d      	ldr	r3, [pc, #116]	@ (800f034 <_UG_GetCharData+0x240>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efc2:	4b1d      	ldr	r3, [pc, #116]	@ (800f038 <_UG_GetCharData+0x244>)
 800efc4:	601a      	str	r2, [r3, #0]
  last_encoding = encoding;
 800efc6:	4b1d      	ldr	r3, [pc, #116]	@ (800f03c <_UG_GetCharData+0x248>)
 800efc8:	1dba      	adds	r2, r7, #6
 800efca:	8812      	ldrh	r2, [r2, #0]
 800efcc:	801a      	strh	r2, [r3, #0]
  last_p = ( gui->currentFont.data+(skip*gui->currentFont.bytes_per_char));
 800efce:	4b19      	ldr	r3, [pc, #100]	@ (800f034 <_UG_GetCharData+0x240>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efd4:	2012      	movs	r0, #18
 800efd6:	183b      	adds	r3, r7, r0
 800efd8:	8819      	ldrh	r1, [r3, #0]
 800efda:	4b16      	ldr	r3, [pc, #88]	@ (800f034 <_UG_GetCharData+0x240>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800efe0:	434b      	muls	r3, r1
 800efe2:	18d2      	adds	r2, r2, r3
 800efe4:	4b16      	ldr	r3, [pc, #88]	@ (800f040 <_UG_GetCharData+0x24c>)
 800efe6:	601a      	str	r2, [r3, #0]
  if( gui->currentFont.widths)                                              // If width table available
 800efe8:	4b12      	ldr	r3, [pc, #72]	@ (800f034 <_UG_GetCharData+0x240>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00a      	beq.n	800f008 <_UG_GetCharData+0x214>
    last_width = *( gui->currentFont.widths+skip);                          // Use width from table
 800eff2:	4b10      	ldr	r3, [pc, #64]	@ (800f034 <_UG_GetCharData+0x240>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eff8:	183b      	adds	r3, r7, r0
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	18d3      	adds	r3, r2, r3
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	b21a      	sxth	r2, r3
 800f002:	4b10      	ldr	r3, [pc, #64]	@ (800f044 <_UG_GetCharData+0x250>)
 800f004:	801a      	strh	r2, [r3, #0]
 800f006:	e006      	b.n	800f016 <_UG_GetCharData+0x222>
  else
    last_width =  gui->currentFont.char_width;                              // Else use width from char width
 800f008:	4b0a      	ldr	r3, [pc, #40]	@ (800f034 <_UG_GetCharData+0x240>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	222e      	movs	r2, #46	@ 0x2e
 800f00e:	5c9b      	ldrb	r3, [r3, r2]
 800f010:	b21a      	sxth	r2, r3
 800f012:	4b0c      	ldr	r3, [pc, #48]	@ (800f044 <_UG_GetCharData+0x250>)
 800f014:	801a      	strh	r2, [r3, #0]
  if(p)
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d003      	beq.n	800f024 <_UG_GetCharData+0x230>
    *p=last_p;                                                              // Load char bitmap address
 800f01c:	4b08      	ldr	r3, [pc, #32]	@ (800f040 <_UG_GetCharData+0x24c>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	601a      	str	r2, [r3, #0]
  return(last_width);                                                       // Return char width
 800f024:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <_UG_GetCharData+0x250>)
 800f026:	2200      	movs	r2, #0
 800f028:	5e9b      	ldrsh	r3, [r3, r2]
}
 800f02a:	0018      	movs	r0, r3
 800f02c:	46bd      	mov	sp, r7
 800f02e:	b007      	add	sp, #28
 800f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f032:	46c0      	nop			@ (mov r8, r8)
 800f034:	20000b3c 	.word	0x20000b3c
 800f038:	20000b40 	.word	0x20000b40
 800f03c:	20000b44 	.word	0x20000b44
 800f040:	20000b48 	.word	0x20000b48
 800f044:	20000b4c 	.word	0x20000b4c
 800f048:	08018768 	.word	0x08018768

0800f04c <_UG_FontSelect>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
<<<<<<< HEAD
 800ff10:	b590      	push	{r4, r7, lr}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800ff18:	4b3d      	ldr	r3, [pc, #244]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d070      	beq.n	8010006 <_UG_FontSelect+0xf6>
    return;

  gui->currentFont.font = font;                           // Save Font pointer
 800ff24:	4b3a      	ldr	r3, [pc, #232]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	645a      	str	r2, [r3, #68]	@ 0x44
  gui->currentFont.char_width = *font++;                  // Byte    0: Char width
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	607a      	str	r2, [r7, #4]
 800ff32:	4a37      	ldr	r2, [pc, #220]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff34:	6812      	ldr	r2, [r2, #0]
 800ff36:	7819      	ldrb	r1, [r3, #0]
 800ff38:	232e      	movs	r3, #46	@ 0x2e
 800ff3a:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.char_height = *font++;                 // Byte    1: Char height
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	607a      	str	r2, [r7, #4]
 800ff42:	4a33      	ldr	r2, [pc, #204]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff44:	6812      	ldr	r2, [r2, #0]
 800ff46:	7819      	ldrb	r1, [r3, #0]
 800ff48:	232f      	movs	r3, #47	@ 0x2f
 800ff4a:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.number_of_chars = ptr_8to16(font);     // Bytes 2+3: Number of chars
 800ff4c:	4b30      	ldr	r3, [pc, #192]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff4e:	681c      	ldr	r4, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	0018      	movs	r0, r3
 800ff54:	f7ff f9f0 	bl	800f338 <ptr_8to16>
 800ff58:	0003      	movs	r3, r0
 800ff5a:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3302      	adds	r3, #2
 800ff60:	607b      	str	r3, [r7, #4]
  gui->currentFont.offset_size = ptr_8to16(font);         // Bytes 4+5: Offset table size
 800ff62:	4b2b      	ldr	r3, [pc, #172]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff64:	681c      	ldr	r4, [r3, #0]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	0018      	movs	r0, r3
 800ff6a:	f7ff f9e5 	bl	800f338 <ptr_8to16>
 800ff6e:	0003      	movs	r3, r0
 800ff70:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3302      	adds	r3, #2
 800ff76:	607b      	str	r3, [r7, #4]
  gui->currentFont.bytes_per_char = ptr_8to16(font);      // Bytes 6+7: Bytes per char
 800ff78:	4b25      	ldr	r3, [pc, #148]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff7a:	681c      	ldr	r4, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	0018      	movs	r0, r3
 800ff80:	f7ff f9da 	bl	800f338 <ptr_8to16>
 800ff84:	0003      	movs	r3, r0
 800ff86:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;                                                // Byte 8: Flags
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	3302      	adds	r3, #2
 800ff8c:	607b      	str	r3, [r7, #4]
  gui->currentFont.font_type = *font & 0x3F;              // Bits 5-0: Font BPP
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	781a      	ldrb	r2, [r3, #0]
 800ff92:	4b1f      	ldr	r3, [pc, #124]	@ (8010010 <_UG_FontSelect+0x100>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	213f      	movs	r1, #63	@ 0x3f
 800ff98:	400a      	ands	r2, r1
 800ff9a:	b2d1      	uxtb	r1, r2
 800ff9c:	222c      	movs	r2, #44	@ 0x2c
 800ff9e:	5499      	strb	r1, [r3, r2]
  gui->currentFont.is_old_font = (*font & 0x80)&&1;       // Bit 7:  1=old font, 0=new font
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	b25b      	sxtb	r3, r3
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	09db      	lsrs	r3, r3, #7
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	4b18      	ldr	r3, [pc, #96]	@ (8010010 <_UG_FontSelect+0x100>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	0011      	movs	r1, r2
 800ffb2:	222d      	movs	r2, #45	@ 0x2d
 800ffb4:	5499      	strb	r1, [r3, r2]
  if(*font++ & 0x40){                                     // Bit 6: 1=Width table present, 0=not present
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	001a      	movs	r2, r3
 800ffc0:	2340      	movs	r3, #64	@ 0x40
 800ffc2:	4013      	ands	r3, r2
 800ffc4:	d00b      	beq.n	800ffde <_UG_FontSelect+0xce>
    gui->currentFont.widths = font;                       // Save pointer to width table
 800ffc6:	4b12      	ldr	r3, [pc, #72]	@ (8010010 <_UG_FontSelect+0x100>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800ffce:	4b10      	ldr	r3, [pc, #64]	@ (8010010 <_UG_FontSelect+0x100>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffd4:	001a      	movs	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	189b      	adds	r3, r3, r2
 800ffda:	607b      	str	r3, [r7, #4]
 800ffdc:	e003      	b.n	800ffe6 <_UG_FontSelect+0xd6>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800ffde:	4b0c      	ldr	r3, [pc, #48]	@ (8010010 <_UG_FontSelect+0x100>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  gui->currentFont.offsets = font;                        // Save pointer to offset table
 800ffe6:	4b0a      	ldr	r3, [pc, #40]	@ (8010010 <_UG_FontSelect+0x100>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += gui->currentFont.offset_size;                   // Skip offset table
 800ffee:	4b08      	ldr	r3, [pc, #32]	@ (8010010 <_UG_FontSelect+0x100>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800fff4:	001a      	movs	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	189b      	adds	r3, r3, r2
 800fffa:	607b      	str	r3, [r7, #4]
  gui->currentFont.data = font;                           // Save pointer to bitmap data
 800fffc:	4b04      	ldr	r3, [pc, #16]	@ (8010010 <_UG_FontSelect+0x100>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	641a      	str	r2, [r3, #64]	@ 0x40
 8010004:	e000      	b.n	8010008 <_UG_FontSelect+0xf8>
    return;
 8010006:	46c0      	nop			@ (mov r8, r8)
}
 8010008:	46bd      	mov	sp, r7
 801000a:	b003      	add	sp, #12
 801000c:	bd90      	pop	{r4, r7, pc}
 801000e:	46c0      	nop			@ (mov r8, r8)
 8010010:	20000c44 	.word	0x20000c44

08010014 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8010014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010016:	46c6      	mov	lr, r8
 8010018:	b500      	push	{lr}
 801001a:	b08c      	sub	sp, #48	@ 0x30
 801001c:	af00      	add	r7, sp, #0
 801001e:	0005      	movs	r5, r0
 8010020:	000c      	movs	r4, r1
 8010022:	0010      	movs	r0, r2
 8010024:	0019      	movs	r1, r3
 8010026:	1dbb      	adds	r3, r7, #6
 8010028:	1c2a      	adds	r2, r5, #0
 801002a:	801a      	strh	r2, [r3, #0]
 801002c:	1d3b      	adds	r3, r7, #4
 801002e:	1c22      	adds	r2, r4, #0
 8010030:	801a      	strh	r2, [r3, #0]
 8010032:	1cbb      	adds	r3, r7, #2
 8010034:	1c02      	adds	r2, r0, #0
 8010036:	801a      	strh	r2, [r3, #0]
 8010038:	003b      	movs	r3, r7
 801003a:	1c0a      	adds	r2, r1, #0
 801003c:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 801003e:	232e      	movs	r3, #46	@ 0x2e
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	2200      	movs	r2, #0
 8010044:	801a      	strh	r2, [r3, #0]
 8010046:	232c      	movs	r3, #44	@ 0x2c
 8010048:	18fb      	adds	r3, r7, r3
 801004a:	2200      	movs	r2, #0
 801004c:	801a      	strh	r2, [r3, #0]
 801004e:	2322      	movs	r3, #34	@ 0x22
 8010050:	18fb      	adds	r3, r7, r3
 8010052:	2200      	movs	r2, #0
 8010054:	801a      	strh	r2, [r3, #0]
 8010056:	2320      	movs	r3, #32
 8010058:	18fb      	adds	r3, r7, r3
 801005a:	2200      	movs	r2, #0
 801005c:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 801005e:	4bd3      	ldr	r3, [pc, #844]	@ (80103ac <_UG_PutChar+0x398>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	2317      	movs	r3, #23
 8010064:	18fb      	adds	r3, r7, r3
 8010066:	2148      	movs	r1, #72	@ 0x48
 8010068:	5c52      	ldrb	r2, [r2, r1]
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	4bcf      	ldr	r3, [pc, #828]	@ (80103ac <_UG_PutChar+0x398>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2268      	movs	r2, #104	@ 0x68
 8010072:	5c9a      	ldrb	r2, [r3, r2]
 8010074:	2316      	movs	r3, #22
 8010076:	18fb      	adds	r3, r7, r3
 8010078:	2102      	movs	r1, #2
 801007a:	400a      	ands	r2, r1
 801007c:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801007e:	2300      	movs	r3, #0
 8010080:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8010082:	2514      	movs	r5, #20
 8010084:	197c      	adds	r4, r7, r5
 8010086:	2308      	movs	r3, #8
 8010088:	18fa      	adds	r2, r7, r3
 801008a:	1dbb      	adds	r3, r7, #6
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	0011      	movs	r1, r2
 8010090:	0018      	movs	r0, r3
 8010092:	f7ff fe11 	bl	800fcb8 <_UG_GetCharData>
 8010096:	0003      	movs	r3, r0
 8010098:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 801009a:	197b      	adds	r3, r7, r5
 801009c:	2200      	movs	r2, #0
 801009e:	5e9b      	ldrsh	r3, [r3, r2]
 80100a0:	3301      	adds	r3, #1
 80100a2:	d102      	bne.n	80100aa <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 80100a4:	2301      	movs	r3, #1
 80100a6:	425b      	negs	r3, r3
 80100a8:	e34d      	b.n	8010746 <_UG_PutChar+0x732>

   bn =  gui->currentFont.char_width;
 80100aa:	4bc0      	ldr	r3, [pc, #768]	@ (80103ac <_UG_PutChar+0x398>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	222e      	movs	r2, #46	@ 0x2e
 80100b0:	5c9a      	ldrb	r2, [r3, r2]
 80100b2:	2124      	movs	r1, #36	@ 0x24
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 80100b8:	187b      	adds	r3, r7, r1
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <_UG_PutChar+0xb0>
     return 0;
 80100c0:	2300      	movs	r3, #0
 80100c2:	e340      	b.n	8010746 <_UG_PutChar+0x732>
   }
   bn >>= 3;
 80100c4:	2124      	movs	r1, #36	@ 0x24
 80100c6:	187b      	adds	r3, r7, r1
 80100c8:	187a      	adds	r2, r7, r1
 80100ca:	8812      	ldrh	r2, [r2, #0]
 80100cc:	08d2      	lsrs	r2, r2, #3
 80100ce:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 80100d0:	4bb6      	ldr	r3, [pc, #728]	@ (80103ac <_UG_PutChar+0x398>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	222e      	movs	r2, #46	@ 0x2e
 80100d6:	5c9b      	ldrb	r3, [r3, r2]
 80100d8:	2207      	movs	r2, #7
 80100da:	4013      	ands	r3, r2
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <_UG_PutChar+0xd8>
 80100e2:	187b      	adds	r3, r7, r1
 80100e4:	881a      	ldrh	r2, [r3, #0]
 80100e6:	187b      	adds	r3, r7, r1
 80100e8:	3201      	adds	r2, #1
 80100ea:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 80100ec:	2316      	movs	r3, #22
 80100ee:	18fb      	adds	r3, r7, r3
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d023      	beq.n	801013e <_UG_PutChar+0x12a>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80100f6:	4bad      	ldr	r3, [pc, #692]	@ (80103ac <_UG_PutChar+0x398>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100fc:	001d      	movs	r5, r3
 80100fe:	1d3b      	adds	r3, r7, #4
 8010100:	881a      	ldrh	r2, [r3, #0]
 8010102:	2314      	movs	r3, #20
 8010104:	18fb      	adds	r3, r7, r3
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	18d3      	adds	r3, r2, r3
 801010a:	b29b      	uxth	r3, r3
 801010c:	3b01      	subs	r3, #1
 801010e:	b29b      	uxth	r3, r3
 8010110:	b21a      	sxth	r2, r3
 8010112:	4ba6      	ldr	r3, [pc, #664]	@ (80103ac <_UG_PutChar+0x398>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	212f      	movs	r1, #47	@ 0x2f
 8010118:	5c5b      	ldrb	r3, [r3, r1]
 801011a:	0019      	movs	r1, r3
 801011c:	1cbb      	adds	r3, r7, #2
 801011e:	881b      	ldrh	r3, [r3, #0]
 8010120:	18cb      	adds	r3, r1, r3
 8010122:	b29b      	uxth	r3, r3
 8010124:	3b01      	subs	r3, #1
 8010126:	b29b      	uxth	r3, r3
 8010128:	b21c      	sxth	r4, r3
 801012a:	1cbb      	adds	r3, r7, #2
 801012c:	2100      	movs	r1, #0
 801012e:	5e59      	ldrsh	r1, [r3, r1]
 8010130:	1d3b      	adds	r3, r7, #4
 8010132:	2000      	movs	r0, #0
 8010134:	5e18      	ldrsh	r0, [r3, r0]
 8010136:	0023      	movs	r3, r4
 8010138:	47a8      	blx	r5
 801013a:	0003      	movs	r3, r0
 801013c:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 801013e:	4b9b      	ldr	r3, [pc, #620]	@ (80103ac <_UG_PutChar+0x398>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	222c      	movs	r2, #44	@ 0x2c
 8010144:	5c9b      	ldrb	r3, [r3, r2]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d000      	beq.n	801014c <_UG_PutChar+0x138>
 801014a:	e256      	b.n	80105fa <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 801014c:	2328      	movs	r3, #40	@ 0x28
 801014e:	18fb      	adds	r3, r7, r3
 8010150:	2200      	movs	r2, #0
 8010152:	801a      	strh	r2, [r3, #0]
 8010154:	e184      	b.n	8010460 <_UG_PutChar+0x44c>
     {
       c=0;
 8010156:	231e      	movs	r3, #30
 8010158:	18fb      	adds	r3, r7, r3
 801015a:	2200      	movs	r2, #0
 801015c:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 801015e:	232a      	movs	r3, #42	@ 0x2a
 8010160:	18fb      	adds	r3, r7, r3
 8010162:	2200      	movs	r2, #0
 8010164:	801a      	strh	r2, [r3, #0]
 8010166:	e16c      	b.n	8010442 <_UG_PutChar+0x42e>
       {
         b = *data++;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	60ba      	str	r2, [r7, #8]
 801016e:	221d      	movs	r2, #29
 8010170:	18ba      	adds	r2, r7, r2
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010176:	2326      	movs	r3, #38	@ 0x26
 8010178:	18fb      	adds	r3, r7, r3
 801017a:	2200      	movs	r2, #0
 801017c:	801a      	strh	r2, [r3, #0]
 801017e:	e14a      	b.n	8010416 <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8010180:	231d      	movs	r3, #29
 8010182:	18fb      	adds	r3, r7, r3
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	2201      	movs	r2, #1
 8010188:	4013      	ands	r3, r2
 801018a:	d055      	beq.n	8010238 <_UG_PutChar+0x224>
           {
             if(driver)
 801018c:	2316      	movs	r3, #22
 801018e:	18fb      	adds	r3, r7, r3
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d038      	beq.n	8010208 <_UG_PutChar+0x1f4>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8010196:	2220      	movs	r2, #32
 8010198:	18bb      	adds	r3, r7, r2
 801019a:	881b      	ldrh	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d010      	beq.n	80101c2 <_UG_PutChar+0x1ae>
 80101a0:	2317      	movs	r3, #23
 80101a2:	18fb      	adds	r3, r7, r3
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10b      	bne.n	80101c2 <_UG_PutChar+0x1ae>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80101aa:	0014      	movs	r4, r2
 80101ac:	18bb      	adds	r3, r7, r2
 80101ae:	881a      	ldrh	r2, [r3, #0]
 80101b0:	2348      	movs	r3, #72	@ 0x48
 80101b2:	18fb      	adds	r3, r7, r3
 80101b4:	8819      	ldrh	r1, [r3, #0]
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	0010      	movs	r0, r2
 80101ba:	4798      	blx	r3
                 bpixels=0;
 80101bc:	193b      	adds	r3, r7, r4
 80101be:	2200      	movs	r2, #0
 80101c0:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80101c2:	2322      	movs	r3, #34	@ 0x22
 80101c4:	18fb      	adds	r3, r7, r3
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d116      	bne.n	80101fa <_UG_PutChar+0x1e6>
 80101cc:	2317      	movs	r3, #23
 80101ce:	18fb      	adds	r3, r7, r3
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d011      	beq.n	80101fa <_UG_PutChar+0x1e6>
               {
                 x0=x+c;
 80101d6:	1d3b      	adds	r3, r7, #4
 80101d8:	8819      	ldrh	r1, [r3, #0]
 80101da:	231e      	movs	r3, #30
 80101dc:	18fb      	adds	r3, r7, r3
 80101de:	881a      	ldrh	r2, [r3, #0]
 80101e0:	232e      	movs	r3, #46	@ 0x2e
 80101e2:	18fb      	adds	r3, r7, r3
 80101e4:	188a      	adds	r2, r1, r2
 80101e6:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 80101e8:	1cbb      	adds	r3, r7, #2
 80101ea:	8819      	ldrh	r1, [r3, #0]
 80101ec:	232c      	movs	r3, #44	@ 0x2c
 80101ee:	18fb      	adds	r3, r7, r3
 80101f0:	2228      	movs	r2, #40	@ 0x28
 80101f2:	18ba      	adds	r2, r7, r2
 80101f4:	8812      	ldrh	r2, [r2, #0]
 80101f6:	188a      	adds	r2, r1, r2
 80101f8:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80101fa:	2122      	movs	r1, #34	@ 0x22
 80101fc:	187b      	adds	r3, r7, r1
 80101fe:	881a      	ldrh	r2, [r3, #0]
 8010200:	187b      	adds	r3, r7, r1
 8010202:	3201      	adds	r2, #1
 8010204:	801a      	strh	r2, [r3, #0]
 8010206:	e0f1      	b.n	80103ec <_UG_PutChar+0x3d8>
=======
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800f054:	4b3d      	ldr	r3, [pc, #244]	@ (800f14c <_UG_FontSelect+0x100>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d070      	beq.n	800f142 <_UG_FontSelect+0xf6>
    return;

  gui->currentFont.font = font;                           // Save Font pointer
 800f060:	4b3a      	ldr	r3, [pc, #232]	@ (800f14c <_UG_FontSelect+0x100>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	645a      	str	r2, [r3, #68]	@ 0x44
  gui->currentFont.char_width = *font++;                  // Byte    0: Char width
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	607a      	str	r2, [r7, #4]
 800f06e:	4a37      	ldr	r2, [pc, #220]	@ (800f14c <_UG_FontSelect+0x100>)
 800f070:	6812      	ldr	r2, [r2, #0]
 800f072:	7819      	ldrb	r1, [r3, #0]
 800f074:	232e      	movs	r3, #46	@ 0x2e
 800f076:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.char_height = *font++;                 // Byte    1: Char height
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	607a      	str	r2, [r7, #4]
 800f07e:	4a33      	ldr	r2, [pc, #204]	@ (800f14c <_UG_FontSelect+0x100>)
 800f080:	6812      	ldr	r2, [r2, #0]
 800f082:	7819      	ldrb	r1, [r3, #0]
 800f084:	232f      	movs	r3, #47	@ 0x2f
 800f086:	54d1      	strb	r1, [r2, r3]
  gui->currentFont.number_of_chars = ptr_8to16(font);     // Bytes 2+3: Number of chars
 800f088:	4b30      	ldr	r3, [pc, #192]	@ (800f14c <_UG_FontSelect+0x100>)
 800f08a:	681c      	ldr	r4, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	0018      	movs	r0, r3
 800f090:	f7ff f9f0 	bl	800e474 <ptr_8to16>
 800f094:	0003      	movs	r3, r0
 800f096:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3302      	adds	r3, #2
 800f09c:	607b      	str	r3, [r7, #4]
  gui->currentFont.offset_size = ptr_8to16(font);         // Bytes 4+5: Offset table size
 800f09e:	4b2b      	ldr	r3, [pc, #172]	@ (800f14c <_UG_FontSelect+0x100>)
 800f0a0:	681c      	ldr	r4, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	0018      	movs	r0, r3
 800f0a6:	f7ff f9e5 	bl	800e474 <ptr_8to16>
 800f0aa:	0003      	movs	r3, r0
 800f0ac:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3302      	adds	r3, #2
 800f0b2:	607b      	str	r3, [r7, #4]
  gui->currentFont.bytes_per_char = ptr_8to16(font);      // Bytes 6+7: Bytes per char
 800f0b4:	4b25      	ldr	r3, [pc, #148]	@ (800f14c <_UG_FontSelect+0x100>)
 800f0b6:	681c      	ldr	r4, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	f7ff f9da 	bl	800e474 <ptr_8to16>
 800f0c0:	0003      	movs	r3, r0
 800f0c2:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;                                                // Byte 8: Flags
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	3302      	adds	r3, #2
 800f0c8:	607b      	str	r3, [r7, #4]
  gui->currentFont.font_type = *font & 0x3F;              // Bits 5-0: Font BPP
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	781a      	ldrb	r2, [r3, #0]
 800f0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800f14c <_UG_FontSelect+0x100>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	213f      	movs	r1, #63	@ 0x3f
 800f0d4:	400a      	ands	r2, r1
 800f0d6:	b2d1      	uxtb	r1, r2
 800f0d8:	222c      	movs	r2, #44	@ 0x2c
 800f0da:	5499      	strb	r1, [r3, r2]
  gui->currentFont.is_old_font = (*font & 0x80)&&1;       // Bit 7:  1=old font, 0=new font
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	b25b      	sxtb	r3, r3
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	09db      	lsrs	r3, r3, #7
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	4b18      	ldr	r3, [pc, #96]	@ (800f14c <_UG_FontSelect+0x100>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	0011      	movs	r1, r2
 800f0ee:	222d      	movs	r2, #45	@ 0x2d
 800f0f0:	5499      	strb	r1, [r3, r2]
  if(*font++ & 0x40){                                     // Bit 6: 1=Width table present, 0=not present
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	1c5a      	adds	r2, r3, #1
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	001a      	movs	r2, r3
 800f0fc:	2340      	movs	r3, #64	@ 0x40
 800f0fe:	4013      	ands	r3, r2
 800f100:	d00b      	beq.n	800f11a <_UG_FontSelect+0xce>
    gui->currentFont.widths = font;                       // Save pointer to width table
 800f102:	4b12      	ldr	r3, [pc, #72]	@ (800f14c <_UG_FontSelect+0x100>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800f10a:	4b10      	ldr	r3, [pc, #64]	@ (800f14c <_UG_FontSelect+0x100>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f110:	001a      	movs	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	189b      	adds	r3, r3, r2
 800f116:	607b      	str	r3, [r7, #4]
 800f118:	e003      	b.n	800f122 <_UG_FontSelect+0xd6>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800f11a:	4b0c      	ldr	r3, [pc, #48]	@ (800f14c <_UG_FontSelect+0x100>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2200      	movs	r2, #0
 800f120:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  gui->currentFont.offsets = font;                        // Save pointer to offset table
 800f122:	4b0a      	ldr	r3, [pc, #40]	@ (800f14c <_UG_FontSelect+0x100>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += gui->currentFont.offset_size;                   // Skip offset table
 800f12a:	4b08      	ldr	r3, [pc, #32]	@ (800f14c <_UG_FontSelect+0x100>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800f130:	001a      	movs	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	189b      	adds	r3, r3, r2
 800f136:	607b      	str	r3, [r7, #4]
  gui->currentFont.data = font;                           // Save pointer to bitmap data
 800f138:	4b04      	ldr	r3, [pc, #16]	@ (800f14c <_UG_FontSelect+0x100>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	641a      	str	r2, [r3, #64]	@ 0x40
 800f140:	e000      	b.n	800f144 <_UG_FontSelect+0xf8>
    return;
 800f142:	46c0      	nop			@ (mov r8, r8)
}
 800f144:	46bd      	mov	sp, r7
 800f146:	b003      	add	sp, #12
 800f148:	bd90      	pop	{r4, r7, pc}
 800f14a:	46c0      	nop			@ (mov r8, r8)
 800f14c:	20000b3c 	.word	0x20000b3c

0800f150 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f152:	46c6      	mov	lr, r8
 800f154:	b500      	push	{lr}
 800f156:	b08c      	sub	sp, #48	@ 0x30
 800f158:	af00      	add	r7, sp, #0
 800f15a:	0005      	movs	r5, r0
 800f15c:	000c      	movs	r4, r1
 800f15e:	0010      	movs	r0, r2
 800f160:	0019      	movs	r1, r3
 800f162:	1dbb      	adds	r3, r7, #6
 800f164:	1c2a      	adds	r2, r5, #0
 800f166:	801a      	strh	r2, [r3, #0]
 800f168:	1d3b      	adds	r3, r7, #4
 800f16a:	1c22      	adds	r2, r4, #0
 800f16c:	801a      	strh	r2, [r3, #0]
 800f16e:	1cbb      	adds	r3, r7, #2
 800f170:	1c02      	adds	r2, r0, #0
 800f172:	801a      	strh	r2, [r3, #0]
 800f174:	003b      	movs	r3, r7
 800f176:	1c0a      	adds	r2, r1, #0
 800f178:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800f17a:	232e      	movs	r3, #46	@ 0x2e
 800f17c:	18fb      	adds	r3, r7, r3
 800f17e:	2200      	movs	r2, #0
 800f180:	801a      	strh	r2, [r3, #0]
 800f182:	232c      	movs	r3, #44	@ 0x2c
 800f184:	18fb      	adds	r3, r7, r3
 800f186:	2200      	movs	r2, #0
 800f188:	801a      	strh	r2, [r3, #0]
 800f18a:	2322      	movs	r3, #34	@ 0x22
 800f18c:	18fb      	adds	r3, r7, r3
 800f18e:	2200      	movs	r2, #0
 800f190:	801a      	strh	r2, [r3, #0]
 800f192:	2320      	movs	r3, #32
 800f194:	18fb      	adds	r3, r7, r3
 800f196:	2200      	movs	r2, #0
 800f198:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800f19a:	4bd3      	ldr	r3, [pc, #844]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	2317      	movs	r3, #23
 800f1a0:	18fb      	adds	r3, r7, r3
 800f1a2:	2148      	movs	r1, #72	@ 0x48
 800f1a4:	5c52      	ldrb	r2, [r2, r1]
 800f1a6:	701a      	strb	r2, [r3, #0]
 800f1a8:	4bcf      	ldr	r3, [pc, #828]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2268      	movs	r2, #104	@ 0x68
 800f1ae:	5c9a      	ldrb	r2, [r3, r2]
 800f1b0:	2316      	movs	r3, #22
 800f1b2:	18fb      	adds	r3, r7, r3
 800f1b4:	2102      	movs	r1, #2
 800f1b6:	400a      	ands	r2, r1
 800f1b8:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800f1be:	2514      	movs	r5, #20
 800f1c0:	197c      	adds	r4, r7, r5
 800f1c2:	2308      	movs	r3, #8
 800f1c4:	18fa      	adds	r2, r7, r3
 800f1c6:	1dbb      	adds	r3, r7, #6
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	0011      	movs	r1, r2
 800f1cc:	0018      	movs	r0, r3
 800f1ce:	f7ff fe11 	bl	800edf4 <_UG_GetCharData>
 800f1d2:	0003      	movs	r3, r0
 800f1d4:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 800f1d6:	197b      	adds	r3, r7, r5
 800f1d8:	2200      	movs	r2, #0
 800f1da:	5e9b      	ldrsh	r3, [r3, r2]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	d102      	bne.n	800f1e6 <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	425b      	negs	r3, r3
 800f1e4:	e34d      	b.n	800f882 <_UG_PutChar+0x732>

   bn =  gui->currentFont.char_width;
 800f1e6:	4bc0      	ldr	r3, [pc, #768]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	222e      	movs	r2, #46	@ 0x2e
 800f1ec:	5c9a      	ldrb	r2, [r3, r2]
 800f1ee:	2124      	movs	r1, #36	@ 0x24
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 800f1f4:	187b      	adds	r3, r7, r1
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d101      	bne.n	800f200 <_UG_PutChar+0xb0>
     return 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	e340      	b.n	800f882 <_UG_PutChar+0x732>
   }
   bn >>= 3;
 800f200:	2124      	movs	r1, #36	@ 0x24
 800f202:	187b      	adds	r3, r7, r1
 800f204:	187a      	adds	r2, r7, r1
 800f206:	8812      	ldrh	r2, [r2, #0]
 800f208:	08d2      	lsrs	r2, r2, #3
 800f20a:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 800f20c:	4bb6      	ldr	r3, [pc, #728]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	222e      	movs	r2, #46	@ 0x2e
 800f212:	5c9b      	ldrb	r3, [r3, r2]
 800f214:	2207      	movs	r2, #7
 800f216:	4013      	ands	r3, r2
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d004      	beq.n	800f228 <_UG_PutChar+0xd8>
 800f21e:	187b      	adds	r3, r7, r1
 800f220:	881a      	ldrh	r2, [r3, #0]
 800f222:	187b      	adds	r3, r7, r1
 800f224:	3201      	adds	r2, #1
 800f226:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 800f228:	2316      	movs	r3, #22
 800f22a:	18fb      	adds	r3, r7, r3
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d023      	beq.n	800f27a <_UG_PutChar+0x12a>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 800f232:	4bad      	ldr	r3, [pc, #692]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f238:	001d      	movs	r5, r3
 800f23a:	1d3b      	adds	r3, r7, #4
 800f23c:	881a      	ldrh	r2, [r3, #0]
 800f23e:	2314      	movs	r3, #20
 800f240:	18fb      	adds	r3, r7, r3
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	18d3      	adds	r3, r2, r3
 800f246:	b29b      	uxth	r3, r3
 800f248:	3b01      	subs	r3, #1
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	b21a      	sxth	r2, r3
 800f24e:	4ba6      	ldr	r3, [pc, #664]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	212f      	movs	r1, #47	@ 0x2f
 800f254:	5c5b      	ldrb	r3, [r3, r1]
 800f256:	0019      	movs	r1, r3
 800f258:	1cbb      	adds	r3, r7, #2
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	18cb      	adds	r3, r1, r3
 800f25e:	b29b      	uxth	r3, r3
 800f260:	3b01      	subs	r3, #1
 800f262:	b29b      	uxth	r3, r3
 800f264:	b21c      	sxth	r4, r3
 800f266:	1cbb      	adds	r3, r7, #2
 800f268:	2100      	movs	r1, #0
 800f26a:	5e59      	ldrsh	r1, [r3, r1]
 800f26c:	1d3b      	adds	r3, r7, #4
 800f26e:	2000      	movs	r0, #0
 800f270:	5e18      	ldrsh	r0, [r3, r0]
 800f272:	0023      	movs	r3, r4
 800f274:	47a8      	blx	r5
 800f276:	0003      	movs	r3, r0
 800f278:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 800f27a:	4b9b      	ldr	r3, [pc, #620]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	222c      	movs	r2, #44	@ 0x2c
 800f280:	5c9b      	ldrb	r3, [r3, r2]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d000      	beq.n	800f288 <_UG_PutChar+0x138>
 800f286:	e256      	b.n	800f736 <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800f288:	2328      	movs	r3, #40	@ 0x28
 800f28a:	18fb      	adds	r3, r7, r3
 800f28c:	2200      	movs	r2, #0
 800f28e:	801a      	strh	r2, [r3, #0]
 800f290:	e184      	b.n	800f59c <_UG_PutChar+0x44c>
     {
       c=0;
 800f292:	231e      	movs	r3, #30
 800f294:	18fb      	adds	r3, r7, r3
 800f296:	2200      	movs	r2, #0
 800f298:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 800f29a:	232a      	movs	r3, #42	@ 0x2a
 800f29c:	18fb      	adds	r3, r7, r3
 800f29e:	2200      	movs	r2, #0
 800f2a0:	801a      	strh	r2, [r3, #0]
 800f2a2:	e16c      	b.n	800f57e <_UG_PutChar+0x42e>
       {
         b = *data++;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	60ba      	str	r2, [r7, #8]
 800f2aa:	221d      	movs	r2, #29
 800f2ac:	18ba      	adds	r2, r7, r2
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800f2b2:	2326      	movs	r3, #38	@ 0x26
 800f2b4:	18fb      	adds	r3, r7, r3
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	801a      	strh	r2, [r3, #0]
 800f2ba:	e14a      	b.n	800f552 <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800f2bc:	231d      	movs	r3, #29
 800f2be:	18fb      	adds	r3, r7, r3
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	d055      	beq.n	800f374 <_UG_PutChar+0x224>
           {
             if(driver)
 800f2c8:	2316      	movs	r3, #22
 800f2ca:	18fb      	adds	r3, r7, r3
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d038      	beq.n	800f344 <_UG_PutChar+0x1f4>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800f2d2:	2220      	movs	r2, #32
 800f2d4:	18bb      	adds	r3, r7, r2
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d010      	beq.n	800f2fe <_UG_PutChar+0x1ae>
 800f2dc:	2317      	movs	r3, #23
 800f2de:	18fb      	adds	r3, r7, r3
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10b      	bne.n	800f2fe <_UG_PutChar+0x1ae>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800f2e6:	0014      	movs	r4, r2
 800f2e8:	18bb      	adds	r3, r7, r2
 800f2ea:	881a      	ldrh	r2, [r3, #0]
 800f2ec:	2348      	movs	r3, #72	@ 0x48
 800f2ee:	18fb      	adds	r3, r7, r3
 800f2f0:	8819      	ldrh	r1, [r3, #0]
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	0010      	movs	r0, r2
 800f2f6:	4798      	blx	r3
                 bpixels=0;
 800f2f8:	193b      	adds	r3, r7, r4
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800f2fe:	2322      	movs	r3, #34	@ 0x22
 800f300:	18fb      	adds	r3, r7, r3
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d116      	bne.n	800f336 <_UG_PutChar+0x1e6>
 800f308:	2317      	movs	r3, #23
 800f30a:	18fb      	adds	r3, r7, r3
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d011      	beq.n	800f336 <_UG_PutChar+0x1e6>
               {
                 x0=x+c;
 800f312:	1d3b      	adds	r3, r7, #4
 800f314:	8819      	ldrh	r1, [r3, #0]
 800f316:	231e      	movs	r3, #30
 800f318:	18fb      	adds	r3, r7, r3
 800f31a:	881a      	ldrh	r2, [r3, #0]
 800f31c:	232e      	movs	r3, #46	@ 0x2e
 800f31e:	18fb      	adds	r3, r7, r3
 800f320:	188a      	adds	r2, r1, r2
 800f322:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 800f324:	1cbb      	adds	r3, r7, #2
 800f326:	8819      	ldrh	r1, [r3, #0]
 800f328:	232c      	movs	r3, #44	@ 0x2c
 800f32a:	18fb      	adds	r3, r7, r3
 800f32c:	2228      	movs	r2, #40	@ 0x28
 800f32e:	18ba      	adds	r2, r7, r2
 800f330:	8812      	ldrh	r2, [r2, #0]
 800f332:	188a      	adds	r2, r1, r2
 800f334:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800f336:	2122      	movs	r1, #34	@ 0x22
 800f338:	187b      	adds	r3, r7, r1
 800f33a:	881a      	ldrh	r2, [r3, #0]
 800f33c:	187b      	adds	r3, r7, r1
 800f33e:	3201      	adds	r2, #1
 800f340:	801a      	strh	r2, [r3, #0]
 800f342:	e0f1      	b.n	800f528 <_UG_PutChar+0x3d8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
<<<<<<< HEAD
 8010208:	4b68      	ldr	r3, [pc, #416]	@ (80103ac <_UG_PutChar+0x398>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	1d3a      	adds	r2, r7, #4
 8010212:	8811      	ldrh	r1, [r2, #0]
 8010214:	221e      	movs	r2, #30
 8010216:	18ba      	adds	r2, r7, r2
 8010218:	8812      	ldrh	r2, [r2, #0]
 801021a:	188a      	adds	r2, r1, r2
 801021c:	b292      	uxth	r2, r2
 801021e:	b210      	sxth	r0, r2
 8010220:	1cba      	adds	r2, r7, #2
 8010222:	8811      	ldrh	r1, [r2, #0]
 8010224:	2228      	movs	r2, #40	@ 0x28
 8010226:	18ba      	adds	r2, r7, r2
 8010228:	8812      	ldrh	r2, [r2, #0]
 801022a:	188a      	adds	r2, r1, r2
 801022c:	b292      	uxth	r2, r2
 801022e:	b211      	sxth	r1, r2
 8010230:	003a      	movs	r2, r7
 8010232:	8812      	ldrh	r2, [r2, #0]
 8010234:	4798      	blx	r3
 8010236:	e0d9      	b.n	80103ec <_UG_PutChar+0x3d8>
=======
 800f344:	4b68      	ldr	r3, [pc, #416]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	1d3a      	adds	r2, r7, #4
 800f34e:	8811      	ldrh	r1, [r2, #0]
 800f350:	221e      	movs	r2, #30
 800f352:	18ba      	adds	r2, r7, r2
 800f354:	8812      	ldrh	r2, [r2, #0]
 800f356:	188a      	adds	r2, r1, r2
 800f358:	b292      	uxth	r2, r2
 800f35a:	b210      	sxth	r0, r2
 800f35c:	1cba      	adds	r2, r7, #2
 800f35e:	8811      	ldrh	r1, [r2, #0]
 800f360:	2228      	movs	r2, #40	@ 0x28
 800f362:	18ba      	adds	r2, r7, r2
 800f364:	8812      	ldrh	r2, [r2, #0]
 800f366:	188a      	adds	r2, r1, r2
 800f368:	b292      	uxth	r2, r2
 800f36a:	b211      	sxth	r1, r2
 800f36c:	003a      	movs	r2, r7
 800f36e:	8812      	ldrh	r2, [r2, #0]
 800f370:	4798      	blx	r3
 800f372:	e0d9      	b.n	800f528 <_UG_PutChar+0x3d8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
<<<<<<< HEAD
 8010238:	2316      	movs	r3, #22
 801023a:	18fb      	adds	r3, r7, r3
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d100      	bne.n	8010244 <_UG_PutChar+0x230>
 8010242:	e0b5      	b.n	80103b0 <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8010244:	2222      	movs	r2, #34	@ 0x22
 8010246:	18bb      	adds	r3, r7, r2
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d100      	bne.n	8010250 <_UG_PutChar+0x23c>
 801024e:	e0a5      	b.n	801039c <_UG_PutChar+0x388>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010250:	2317      	movs	r3, #23
 8010252:	18fb      	adds	r3, r7, r3
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d000      	beq.n	801025c <_UG_PutChar+0x248>
 801025a:	e099      	b.n	8010390 <_UG_PutChar+0x37c>
                 {
                   push_pixels(fpixels,fc);
 801025c:	0014      	movs	r4, r2
 801025e:	18bb      	adds	r3, r7, r2
 8010260:	881a      	ldrh	r2, [r3, #0]
 8010262:	003b      	movs	r3, r7
 8010264:	8819      	ldrh	r1, [r3, #0]
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	0010      	movs	r0, r2
 801026a:	4798      	blx	r3
                   fpixels=0;
 801026c:	193b      	adds	r3, r7, r4
 801026e:	2200      	movs	r2, #0
 8010270:	801a      	strh	r2, [r3, #0]
 8010272:	e093      	b.n	801039c <_UG_PutChar+0x388>
=======
 800f374:	2316      	movs	r3, #22
 800f376:	18fb      	adds	r3, r7, r3
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d100      	bne.n	800f380 <_UG_PutChar+0x230>
 800f37e:	e0b5      	b.n	800f4ec <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800f380:	2222      	movs	r2, #34	@ 0x22
 800f382:	18bb      	adds	r3, r7, r2
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d100      	bne.n	800f38c <_UG_PutChar+0x23c>
 800f38a:	e0a5      	b.n	800f4d8 <_UG_PutChar+0x388>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800f38c:	2317      	movs	r3, #23
 800f38e:	18fb      	adds	r3, r7, r3
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d000      	beq.n	800f398 <_UG_PutChar+0x248>
 800f396:	e099      	b.n	800f4cc <_UG_PutChar+0x37c>
                 {
                   push_pixels(fpixels,fc);
 800f398:	0014      	movs	r4, r2
 800f39a:	18bb      	adds	r3, r7, r2
 800f39c:	881a      	ldrh	r2, [r3, #0]
 800f39e:	003b      	movs	r3, r7
 800f3a0:	8819      	ldrh	r1, [r3, #0]
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	0010      	movs	r0, r2
 800f3a6:	4798      	blx	r3
                   fpixels=0;
 800f3a8:	193b      	adds	r3, r7, r4
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	801a      	strh	r2, [r3, #0]
 800f3ae:	e093      	b.n	800f4d8 <_UG_PutChar+0x388>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
<<<<<<< HEAD
 8010274:	1d3b      	adds	r3, r7, #4
 8010276:	881a      	ldrh	r2, [r3, #0]
 8010278:	2314      	movs	r3, #20
 801027a:	18fb      	adds	r3, r7, r3
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	18d3      	adds	r3, r2, r3
 8010280:	b299      	uxth	r1, r3
 8010282:	200e      	movs	r0, #14
 8010284:	183b      	adds	r3, r7, r0
 8010286:	242e      	movs	r4, #46	@ 0x2e
 8010288:	193a      	adds	r2, r7, r4
 801028a:	8812      	ldrh	r2, [r2, #0]
 801028c:	1a8a      	subs	r2, r1, r2
 801028e:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010290:	193b      	adds	r3, r7, r4
 8010292:	881a      	ldrh	r2, [r3, #0]
 8010294:	1d3b      	adds	r3, r7, #4
 8010296:	2100      	movs	r1, #0
 8010298:	5e5b      	ldrsh	r3, [r3, r1]
 801029a:	429a      	cmp	r2, r3
 801029c:	d006      	beq.n	80102ac <_UG_PutChar+0x298>
 801029e:	2322      	movs	r3, #34	@ 0x22
 80102a0:	18fa      	adds	r2, r7, r3
 80102a2:	183b      	adds	r3, r7, r0
 80102a4:	8812      	ldrh	r2, [r2, #0]
 80102a6:	881b      	ldrh	r3, [r3, #0]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d23a      	bcs.n	8010322 <_UG_PutChar+0x30e>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80102ac:	4b3f      	ldr	r3, [pc, #252]	@ (80103ac <_UG_PutChar+0x398>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102b2:	4698      	mov	r8, r3
 80102b4:	222e      	movs	r2, #46	@ 0x2e
 80102b6:	18bb      	adds	r3, r7, r2
 80102b8:	2400      	movs	r4, #0
 80102ba:	5f1c      	ldrsh	r4, [r3, r4]
 80102bc:	232c      	movs	r3, #44	@ 0x2c
 80102be:	18fb      	adds	r3, r7, r3
 80102c0:	2000      	movs	r0, #0
 80102c2:	5e1d      	ldrsh	r5, [r3, r0]
 80102c4:	18ba      	adds	r2, r7, r2
 80102c6:	200e      	movs	r0, #14
 80102c8:	183b      	adds	r3, r7, r0
 80102ca:	8812      	ldrh	r2, [r2, #0]
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	18d3      	adds	r3, r2, r3
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	3b01      	subs	r3, #1
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	b21e      	sxth	r6, r3
 80102d8:	2322      	movs	r3, #34	@ 0x22
 80102da:	18fb      	adds	r3, r7, r3
 80102dc:	881a      	ldrh	r2, [r3, #0]
 80102de:	2014      	movs	r0, #20
 80102e0:	183b      	adds	r3, r7, r0
 80102e2:	2000      	movs	r0, #0
 80102e4:	5e1b      	ldrsh	r3, [r3, r0]
 80102e6:	0019      	movs	r1, r3
 80102e8:	0010      	movs	r0, r2
 80102ea:	f7ef ffb3 	bl	8000254 <__divsi3>
 80102ee:	0003      	movs	r3, r0
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	212c      	movs	r1, #44	@ 0x2c
 80102f4:	187b      	adds	r3, r7, r1
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	18d3      	adds	r3, r2, r3
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	b21b      	sxth	r3, r3
 80102fe:	0032      	movs	r2, r6
 8010300:	0029      	movs	r1, r5
 8010302:	0020      	movs	r0, r4
 8010304:	47c0      	blx	r8
 8010306:	0003      	movs	r3, r0
 8010308:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 801030a:	2422      	movs	r4, #34	@ 0x22
 801030c:	193b      	adds	r3, r7, r4
 801030e:	881a      	ldrh	r2, [r3, #0]
 8010310:	003b      	movs	r3, r7
 8010312:	8819      	ldrh	r1, [r3, #0]
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	0010      	movs	r0, r2
 8010318:	4798      	blx	r3
                       fpixels=0;
 801031a:	193b      	adds	r3, r7, r4
 801031c:	2200      	movs	r2, #0
 801031e:	801a      	strh	r2, [r3, #0]
 8010320:	e036      	b.n	8010390 <_UG_PutChar+0x37c>
=======
 800f3b0:	1d3b      	adds	r3, r7, #4
 800f3b2:	881a      	ldrh	r2, [r3, #0]
 800f3b4:	2314      	movs	r3, #20
 800f3b6:	18fb      	adds	r3, r7, r3
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	18d3      	adds	r3, r2, r3
 800f3bc:	b299      	uxth	r1, r3
 800f3be:	200e      	movs	r0, #14
 800f3c0:	183b      	adds	r3, r7, r0
 800f3c2:	242e      	movs	r4, #46	@ 0x2e
 800f3c4:	193a      	adds	r2, r7, r4
 800f3c6:	8812      	ldrh	r2, [r2, #0]
 800f3c8:	1a8a      	subs	r2, r1, r2
 800f3ca:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800f3cc:	193b      	adds	r3, r7, r4
 800f3ce:	881a      	ldrh	r2, [r3, #0]
 800f3d0:	1d3b      	adds	r3, r7, #4
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	5e5b      	ldrsh	r3, [r3, r1]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d006      	beq.n	800f3e8 <_UG_PutChar+0x298>
 800f3da:	2322      	movs	r3, #34	@ 0x22
 800f3dc:	18fa      	adds	r2, r7, r3
 800f3de:	183b      	adds	r3, r7, r0
 800f3e0:	8812      	ldrh	r2, [r2, #0]
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d23a      	bcs.n	800f45e <_UG_PutChar+0x30e>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800f3e8:	4b3f      	ldr	r3, [pc, #252]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3ee:	4698      	mov	r8, r3
 800f3f0:	222e      	movs	r2, #46	@ 0x2e
 800f3f2:	18bb      	adds	r3, r7, r2
 800f3f4:	2400      	movs	r4, #0
 800f3f6:	5f1c      	ldrsh	r4, [r3, r4]
 800f3f8:	232c      	movs	r3, #44	@ 0x2c
 800f3fa:	18fb      	adds	r3, r7, r3
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	5e1d      	ldrsh	r5, [r3, r0]
 800f400:	18ba      	adds	r2, r7, r2
 800f402:	200e      	movs	r0, #14
 800f404:	183b      	adds	r3, r7, r0
 800f406:	8812      	ldrh	r2, [r2, #0]
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	18d3      	adds	r3, r2, r3
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	3b01      	subs	r3, #1
 800f410:	b29b      	uxth	r3, r3
 800f412:	b21e      	sxth	r6, r3
 800f414:	2322      	movs	r3, #34	@ 0x22
 800f416:	18fb      	adds	r3, r7, r3
 800f418:	881a      	ldrh	r2, [r3, #0]
 800f41a:	2014      	movs	r0, #20
 800f41c:	183b      	adds	r3, r7, r0
 800f41e:	2000      	movs	r0, #0
 800f420:	5e1b      	ldrsh	r3, [r3, r0]
 800f422:	0019      	movs	r1, r3
 800f424:	0010      	movs	r0, r2
 800f426:	f7f0 ff15 	bl	8000254 <__divsi3>
 800f42a:	0003      	movs	r3, r0
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	212c      	movs	r1, #44	@ 0x2c
 800f430:	187b      	adds	r3, r7, r1
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	18d3      	adds	r3, r2, r3
 800f436:	b29b      	uxth	r3, r3
 800f438:	b21b      	sxth	r3, r3
 800f43a:	0032      	movs	r2, r6
 800f43c:	0029      	movs	r1, r5
 800f43e:	0020      	movs	r0, r4
 800f440:	47c0      	blx	r8
 800f442:	0003      	movs	r3, r0
 800f444:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800f446:	2422      	movs	r4, #34	@ 0x22
 800f448:	193b      	adds	r3, r7, r4
 800f44a:	881a      	ldrh	r2, [r3, #0]
 800f44c:	003b      	movs	r3, r7
 800f44e:	8819      	ldrh	r1, [r3, #0]
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	0010      	movs	r0, r2
 800f454:	4798      	blx	r3
                       fpixels=0;
 800f456:	193b      	adds	r3, r7, r4
 800f458:	2200      	movs	r2, #0
 800f45a:	801a      	strh	r2, [r3, #0]
 800f45c:	e036      	b.n	800f4cc <_UG_PutChar+0x37c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
<<<<<<< HEAD
 8010322:	4b22      	ldr	r3, [pc, #136]	@ (80103ac <_UG_PutChar+0x398>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010328:	001c      	movs	r4, r3
 801032a:	262e      	movs	r6, #46	@ 0x2e
 801032c:	19bb      	adds	r3, r7, r6
 801032e:	2000      	movs	r0, #0
 8010330:	5e18      	ldrsh	r0, [r3, r0]
 8010332:	252c      	movs	r5, #44	@ 0x2c
 8010334:	197b      	adds	r3, r7, r5
 8010336:	2200      	movs	r2, #0
 8010338:	5e9a      	ldrsh	r2, [r3, r2]
 801033a:	4694      	mov	ip, r2
 801033c:	19ba      	adds	r2, r7, r6
 801033e:	230e      	movs	r3, #14
 8010340:	18fb      	adds	r3, r7, r3
 8010342:	8812      	ldrh	r2, [r2, #0]
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	18d3      	adds	r3, r2, r3
 8010348:	b29b      	uxth	r3, r3
 801034a:	3b01      	subs	r3, #1
 801034c:	b29b      	uxth	r3, r3
 801034e:	b21a      	sxth	r2, r3
 8010350:	197b      	adds	r3, r7, r5
 8010352:	2100      	movs	r1, #0
 8010354:	5e5b      	ldrsh	r3, [r3, r1]
 8010356:	4661      	mov	r1, ip
 8010358:	47a0      	blx	r4
 801035a:	0003      	movs	r3, r0
 801035c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 801035e:	2422      	movs	r4, #34	@ 0x22
 8010360:	193b      	adds	r3, r7, r4
 8010362:	881a      	ldrh	r2, [r3, #0]
 8010364:	003b      	movs	r3, r7
 8010366:	8819      	ldrh	r1, [r3, #0]
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	0010      	movs	r0, r2
 801036c:	4798      	blx	r3
                       fpixels -= width;
 801036e:	193b      	adds	r3, r7, r4
 8010370:	1939      	adds	r1, r7, r4
 8010372:	220e      	movs	r2, #14
 8010374:	18ba      	adds	r2, r7, r2
 8010376:	8809      	ldrh	r1, [r1, #0]
 8010378:	8812      	ldrh	r2, [r2, #0]
 801037a:	1a8a      	subs	r2, r1, r2
 801037c:	801a      	strh	r2, [r3, #0]
                       x0=x;
 801037e:	19bb      	adds	r3, r7, r6
 8010380:	1d3a      	adds	r2, r7, #4
 8010382:	8812      	ldrh	r2, [r2, #0]
 8010384:	801a      	strh	r2, [r3, #0]
                       y0++;
 8010386:	197b      	adds	r3, r7, r5
 8010388:	881a      	ldrh	r2, [r3, #0]
 801038a:	197b      	adds	r3, r7, r5
 801038c:	3201      	adds	r2, #1
 801038e:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 8010390:	2322      	movs	r3, #34	@ 0x22
 8010392:	18fb      	adds	r3, r7, r3
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d000      	beq.n	801039c <_UG_PutChar+0x388>
 801039a:	e76b      	b.n	8010274 <_UG_PutChar+0x260>
=======
 800f45e:	4b22      	ldr	r3, [pc, #136]	@ (800f4e8 <_UG_PutChar+0x398>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f464:	001c      	movs	r4, r3
 800f466:	262e      	movs	r6, #46	@ 0x2e
 800f468:	19bb      	adds	r3, r7, r6
 800f46a:	2000      	movs	r0, #0
 800f46c:	5e18      	ldrsh	r0, [r3, r0]
 800f46e:	252c      	movs	r5, #44	@ 0x2c
 800f470:	197b      	adds	r3, r7, r5
 800f472:	2200      	movs	r2, #0
 800f474:	5e9a      	ldrsh	r2, [r3, r2]
 800f476:	4694      	mov	ip, r2
 800f478:	19ba      	adds	r2, r7, r6
 800f47a:	230e      	movs	r3, #14
 800f47c:	18fb      	adds	r3, r7, r3
 800f47e:	8812      	ldrh	r2, [r2, #0]
 800f480:	881b      	ldrh	r3, [r3, #0]
 800f482:	18d3      	adds	r3, r2, r3
 800f484:	b29b      	uxth	r3, r3
 800f486:	3b01      	subs	r3, #1
 800f488:	b29b      	uxth	r3, r3
 800f48a:	b21a      	sxth	r2, r3
 800f48c:	197b      	adds	r3, r7, r5
 800f48e:	2100      	movs	r1, #0
 800f490:	5e5b      	ldrsh	r3, [r3, r1]
 800f492:	4661      	mov	r1, ip
 800f494:	47a0      	blx	r4
 800f496:	0003      	movs	r3, r0
 800f498:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800f49a:	2422      	movs	r4, #34	@ 0x22
 800f49c:	193b      	adds	r3, r7, r4
 800f49e:	881a      	ldrh	r2, [r3, #0]
 800f4a0:	003b      	movs	r3, r7
 800f4a2:	8819      	ldrh	r1, [r3, #0]
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	0010      	movs	r0, r2
 800f4a8:	4798      	blx	r3
                       fpixels -= width;
 800f4aa:	193b      	adds	r3, r7, r4
 800f4ac:	1939      	adds	r1, r7, r4
 800f4ae:	220e      	movs	r2, #14
 800f4b0:	18ba      	adds	r2, r7, r2
 800f4b2:	8809      	ldrh	r1, [r1, #0]
 800f4b4:	8812      	ldrh	r2, [r2, #0]
 800f4b6:	1a8a      	subs	r2, r1, r2
 800f4b8:	801a      	strh	r2, [r3, #0]
                       x0=x;
 800f4ba:	19bb      	adds	r3, r7, r6
 800f4bc:	1d3a      	adds	r2, r7, #4
 800f4be:	8812      	ldrh	r2, [r2, #0]
 800f4c0:	801a      	strh	r2, [r3, #0]
                       y0++;
 800f4c2:	197b      	adds	r3, r7, r5
 800f4c4:	881a      	ldrh	r2, [r3, #0]
 800f4c6:	197b      	adds	r3, r7, r5
 800f4c8:	3201      	adds	r2, #1
 800f4ca:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 800f4cc:	2322      	movs	r3, #34	@ 0x22
 800f4ce:	18fb      	adds	r3, r7, r3
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d000      	beq.n	800f4d8 <_UG_PutChar+0x388>
 800f4d6:	e76b      	b.n	800f3b0 <_UG_PutChar+0x260>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                     }
                   }
                 }
               }
               bpixels++;
<<<<<<< HEAD
 801039c:	2120      	movs	r1, #32
 801039e:	187b      	adds	r3, r7, r1
 80103a0:	881a      	ldrh	r2, [r3, #0]
 80103a2:	187b      	adds	r3, r7, r1
 80103a4:	3201      	adds	r2, #1
 80103a6:	801a      	strh	r2, [r3, #0]
 80103a8:	e020      	b.n	80103ec <_UG_PutChar+0x3d8>
 80103aa:	46c0      	nop			@ (mov r8, r8)
 80103ac:	20000c44 	.word	0x20000c44
             }
             else if(!trans)                           // Not accelerated output
 80103b0:	2317      	movs	r3, #23
 80103b2:	18fb      	adds	r3, r7, r3
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d118      	bne.n	80103ec <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 80103ba:	4bbd      	ldr	r3, [pc, #756]	@ (80106b0 <_UG_PutChar+0x69c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	685c      	ldr	r4, [r3, #4]
 80103c2:	1d3b      	adds	r3, r7, #4
 80103c4:	881a      	ldrh	r2, [r3, #0]
 80103c6:	231e      	movs	r3, #30
 80103c8:	18fb      	adds	r3, r7, r3
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	18d3      	adds	r3, r2, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	b218      	sxth	r0, r3
 80103d2:	1cbb      	adds	r3, r7, #2
 80103d4:	881a      	ldrh	r2, [r3, #0]
 80103d6:	2328      	movs	r3, #40	@ 0x28
 80103d8:	18fb      	adds	r3, r7, r3
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	18d3      	adds	r3, r2, r3
 80103de:	b29b      	uxth	r3, r3
 80103e0:	b219      	sxth	r1, r3
 80103e2:	2348      	movs	r3, #72	@ 0x48
 80103e4:	18fb      	adds	r3, r7, r3
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	001a      	movs	r2, r3
 80103ea:	47a0      	blx	r4
             }
           }
           b >>= 1;
 80103ec:	221d      	movs	r2, #29
 80103ee:	18bb      	adds	r3, r7, r2
 80103f0:	18ba      	adds	r2, r7, r2
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	0852      	lsrs	r2, r2, #1
 80103f6:	701a      	strb	r2, [r3, #0]
           c++;
 80103f8:	211e      	movs	r1, #30
 80103fa:	187b      	adds	r3, r7, r1
 80103fc:	2200      	movs	r2, #0
 80103fe:	5e9b      	ldrsh	r3, [r3, r2]
 8010400:	b29b      	uxth	r3, r3
 8010402:	3301      	adds	r3, #1
 8010404:	b29a      	uxth	r2, r3
 8010406:	187b      	adds	r3, r7, r1
 8010408:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 801040a:	2126      	movs	r1, #38	@ 0x26
 801040c:	187b      	adds	r3, r7, r1
 801040e:	881a      	ldrh	r2, [r3, #0]
 8010410:	187b      	adds	r3, r7, r1
 8010412:	3201      	adds	r2, #1
 8010414:	801a      	strh	r2, [r3, #0]
 8010416:	2326      	movs	r3, #38	@ 0x26
 8010418:	18fb      	adds	r3, r7, r3
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	2b07      	cmp	r3, #7
 801041e:	d80a      	bhi.n	8010436 <_UG_PutChar+0x422>
 8010420:	231e      	movs	r3, #30
 8010422:	18fa      	adds	r2, r7, r3
 8010424:	2314      	movs	r3, #20
 8010426:	18fb      	adds	r3, r7, r3
 8010428:	2100      	movs	r1, #0
 801042a:	5e52      	ldrsh	r2, [r2, r1]
 801042c:	2100      	movs	r1, #0
 801042e:	5e5b      	ldrsh	r3, [r3, r1]
 8010430:	429a      	cmp	r2, r3
 8010432:	da00      	bge.n	8010436 <_UG_PutChar+0x422>
 8010434:	e6a4      	b.n	8010180 <_UG_PutChar+0x16c>
       for( i=0;i<bn;i++ )
 8010436:	212a      	movs	r1, #42	@ 0x2a
 8010438:	187b      	adds	r3, r7, r1
 801043a:	881a      	ldrh	r2, [r3, #0]
 801043c:	187b      	adds	r3, r7, r1
 801043e:	3201      	adds	r2, #1
 8010440:	801a      	strh	r2, [r3, #0]
 8010442:	232a      	movs	r3, #42	@ 0x2a
 8010444:	18fa      	adds	r2, r7, r3
 8010446:	2324      	movs	r3, #36	@ 0x24
 8010448:	18fb      	adds	r3, r7, r3
 801044a:	8812      	ldrh	r2, [r2, #0]
 801044c:	881b      	ldrh	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d200      	bcs.n	8010454 <_UG_PutChar+0x440>
 8010452:	e689      	b.n	8010168 <_UG_PutChar+0x154>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010454:	2128      	movs	r1, #40	@ 0x28
 8010456:	187b      	adds	r3, r7, r1
 8010458:	881a      	ldrh	r2, [r3, #0]
 801045a:	187b      	adds	r3, r7, r1
 801045c:	3201      	adds	r2, #1
 801045e:	801a      	strh	r2, [r3, #0]
 8010460:	4b93      	ldr	r3, [pc, #588]	@ (80106b0 <_UG_PutChar+0x69c>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	222f      	movs	r2, #47	@ 0x2f
 8010466:	5c9b      	ldrb	r3, [r3, r2]
 8010468:	001a      	movs	r2, r3
 801046a:	2328      	movs	r3, #40	@ 0x28
 801046c:	18fb      	adds	r3, r7, r3
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	4293      	cmp	r3, r2
 8010472:	d200      	bcs.n	8010476 <_UG_PutChar+0x462>
 8010474:	e66f      	b.n	8010156 <_UG_PutChar+0x142>
=======
 800f4d8:	2120      	movs	r1, #32
 800f4da:	187b      	adds	r3, r7, r1
 800f4dc:	881a      	ldrh	r2, [r3, #0]
 800f4de:	187b      	adds	r3, r7, r1
 800f4e0:	3201      	adds	r2, #1
 800f4e2:	801a      	strh	r2, [r3, #0]
 800f4e4:	e020      	b.n	800f528 <_UG_PutChar+0x3d8>
 800f4e6:	46c0      	nop			@ (mov r8, r8)
 800f4e8:	20000b3c 	.word	0x20000b3c
             }
             else if(!trans)                           // Not accelerated output
 800f4ec:	2317      	movs	r3, #23
 800f4ee:	18fb      	adds	r3, r7, r3
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d118      	bne.n	800f528 <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 800f4f6:	4bbd      	ldr	r3, [pc, #756]	@ (800f7ec <_UG_PutChar+0x69c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	685c      	ldr	r4, [r3, #4]
 800f4fe:	1d3b      	adds	r3, r7, #4
 800f500:	881a      	ldrh	r2, [r3, #0]
 800f502:	231e      	movs	r3, #30
 800f504:	18fb      	adds	r3, r7, r3
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	18d3      	adds	r3, r2, r3
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	b218      	sxth	r0, r3
 800f50e:	1cbb      	adds	r3, r7, #2
 800f510:	881a      	ldrh	r2, [r3, #0]
 800f512:	2328      	movs	r3, #40	@ 0x28
 800f514:	18fb      	adds	r3, r7, r3
 800f516:	881b      	ldrh	r3, [r3, #0]
 800f518:	18d3      	adds	r3, r2, r3
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	b219      	sxth	r1, r3
 800f51e:	2348      	movs	r3, #72	@ 0x48
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	001a      	movs	r2, r3
 800f526:	47a0      	blx	r4
             }
           }
           b >>= 1;
 800f528:	221d      	movs	r2, #29
 800f52a:	18bb      	adds	r3, r7, r2
 800f52c:	18ba      	adds	r2, r7, r2
 800f52e:	7812      	ldrb	r2, [r2, #0]
 800f530:	0852      	lsrs	r2, r2, #1
 800f532:	701a      	strb	r2, [r3, #0]
           c++;
 800f534:	211e      	movs	r1, #30
 800f536:	187b      	adds	r3, r7, r1
 800f538:	2200      	movs	r2, #0
 800f53a:	5e9b      	ldrsh	r3, [r3, r2]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	3301      	adds	r3, #1
 800f540:	b29a      	uxth	r2, r3
 800f542:	187b      	adds	r3, r7, r1
 800f544:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800f546:	2126      	movs	r1, #38	@ 0x26
 800f548:	187b      	adds	r3, r7, r1
 800f54a:	881a      	ldrh	r2, [r3, #0]
 800f54c:	187b      	adds	r3, r7, r1
 800f54e:	3201      	adds	r2, #1
 800f550:	801a      	strh	r2, [r3, #0]
 800f552:	2326      	movs	r3, #38	@ 0x26
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	2b07      	cmp	r3, #7
 800f55a:	d80a      	bhi.n	800f572 <_UG_PutChar+0x422>
 800f55c:	231e      	movs	r3, #30
 800f55e:	18fa      	adds	r2, r7, r3
 800f560:	2314      	movs	r3, #20
 800f562:	18fb      	adds	r3, r7, r3
 800f564:	2100      	movs	r1, #0
 800f566:	5e52      	ldrsh	r2, [r2, r1]
 800f568:	2100      	movs	r1, #0
 800f56a:	5e5b      	ldrsh	r3, [r3, r1]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	da00      	bge.n	800f572 <_UG_PutChar+0x422>
 800f570:	e6a4      	b.n	800f2bc <_UG_PutChar+0x16c>
       for( i=0;i<bn;i++ )
 800f572:	212a      	movs	r1, #42	@ 0x2a
 800f574:	187b      	adds	r3, r7, r1
 800f576:	881a      	ldrh	r2, [r3, #0]
 800f578:	187b      	adds	r3, r7, r1
 800f57a:	3201      	adds	r2, #1
 800f57c:	801a      	strh	r2, [r3, #0]
 800f57e:	232a      	movs	r3, #42	@ 0x2a
 800f580:	18fa      	adds	r2, r7, r3
 800f582:	2324      	movs	r3, #36	@ 0x24
 800f584:	18fb      	adds	r3, r7, r3
 800f586:	8812      	ldrh	r2, [r2, #0]
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d200      	bcs.n	800f590 <_UG_PutChar+0x440>
 800f58e:	e689      	b.n	800f2a4 <_UG_PutChar+0x154>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800f590:	2128      	movs	r1, #40	@ 0x28
 800f592:	187b      	adds	r3, r7, r1
 800f594:	881a      	ldrh	r2, [r3, #0]
 800f596:	187b      	adds	r3, r7, r1
 800f598:	3201      	adds	r2, #1
 800f59a:	801a      	strh	r2, [r3, #0]
 800f59c:	4b93      	ldr	r3, [pc, #588]	@ (800f7ec <_UG_PutChar+0x69c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	222f      	movs	r2, #47	@ 0x2f
 800f5a2:	5c9b      	ldrb	r3, [r3, r2]
 800f5a4:	001a      	movs	r2, r3
 800f5a6:	2328      	movs	r3, #40	@ 0x28
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d200      	bcs.n	800f5b2 <_UG_PutChar+0x462>
 800f5b0:	e66f      	b.n	800f292 <_UG_PutChar+0x142>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
<<<<<<< HEAD
 8010476:	2316      	movs	r3, #22
 8010478:	18fb      	adds	r3, r7, r3
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d100      	bne.n	8010482 <_UG_PutChar+0x46e>
 8010480:	e15d      	b.n	801073e <_UG_PutChar+0x72a>
       if(bpixels && !trans)
 8010482:	2220      	movs	r2, #32
 8010484:	18bb      	adds	r3, r7, r2
 8010486:	881b      	ldrh	r3, [r3, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00d      	beq.n	80104a8 <_UG_PutChar+0x494>
 801048c:	2317      	movs	r3, #23
 801048e:	18fb      	adds	r3, r7, r3
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d108      	bne.n	80104a8 <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 8010496:	18bb      	adds	r3, r7, r2
 8010498:	881a      	ldrh	r2, [r3, #0]
 801049a:	2348      	movs	r3, #72	@ 0x48
 801049c:	18fb      	adds	r3, r7, r3
 801049e:	8819      	ldrh	r1, [r3, #0]
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	0010      	movs	r0, r2
 80104a4:	4798      	blx	r3
 80104a6:	e14a      	b.n	801073e <_UG_PutChar+0x72a>
       }
       else if(fpixels)
 80104a8:	2222      	movs	r2, #34	@ 0x22
 80104aa:	18bb      	adds	r3, r7, r2
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d100      	bne.n	80104b4 <_UG_PutChar+0x4a0>
 80104b2:	e144      	b.n	801073e <_UG_PutChar+0x72a>
       {
         if(!trans)
 80104b4:	2317      	movs	r3, #23
 80104b6:	18fb      	adds	r3, r7, r3
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d000      	beq.n	80104c0 <_UG_PutChar+0x4ac>
 80104be:	e095      	b.n	80105ec <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 80104c0:	18bb      	adds	r3, r7, r2
 80104c2:	881a      	ldrh	r2, [r3, #0]
 80104c4:	003b      	movs	r3, r7
 80104c6:	8819      	ldrh	r1, [r3, #0]
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	0010      	movs	r0, r2
 80104cc:	4798      	blx	r3
 80104ce:	e136      	b.n	801073e <_UG_PutChar+0x72a>
=======
 800f5b2:	2316      	movs	r3, #22
 800f5b4:	18fb      	adds	r3, r7, r3
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d100      	bne.n	800f5be <_UG_PutChar+0x46e>
 800f5bc:	e15d      	b.n	800f87a <_UG_PutChar+0x72a>
       if(bpixels && !trans)
 800f5be:	2220      	movs	r2, #32
 800f5c0:	18bb      	adds	r3, r7, r2
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00d      	beq.n	800f5e4 <_UG_PutChar+0x494>
 800f5c8:	2317      	movs	r3, #23
 800f5ca:	18fb      	adds	r3, r7, r3
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d108      	bne.n	800f5e4 <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 800f5d2:	18bb      	adds	r3, r7, r2
 800f5d4:	881a      	ldrh	r2, [r3, #0]
 800f5d6:	2348      	movs	r3, #72	@ 0x48
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	8819      	ldrh	r1, [r3, #0]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	0010      	movs	r0, r2
 800f5e0:	4798      	blx	r3
 800f5e2:	e14a      	b.n	800f87a <_UG_PutChar+0x72a>
       }
       else if(fpixels)
 800f5e4:	2222      	movs	r2, #34	@ 0x22
 800f5e6:	18bb      	adds	r3, r7, r2
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d100      	bne.n	800f5f0 <_UG_PutChar+0x4a0>
 800f5ee:	e144      	b.n	800f87a <_UG_PutChar+0x72a>
       {
         if(!trans)
 800f5f0:	2317      	movs	r3, #23
 800f5f2:	18fb      	adds	r3, r7, r3
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d000      	beq.n	800f5fc <_UG_PutChar+0x4ac>
 800f5fa:	e095      	b.n	800f728 <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 800f5fc:	18bb      	adds	r3, r7, r2
 800f5fe:	881a      	ldrh	r2, [r3, #0]
 800f600:	003b      	movs	r3, r7
 800f602:	8819      	ldrh	r1, [r3, #0]
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	0010      	movs	r0, r2
 800f608:	4798      	blx	r3
 800f60a:	e136      	b.n	800f87a <_UG_PutChar+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
<<<<<<< HEAD
 80104d0:	1d3b      	adds	r3, r7, #4
 80104d2:	881a      	ldrh	r2, [r3, #0]
 80104d4:	2314      	movs	r3, #20
 80104d6:	18fb      	adds	r3, r7, r3
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	18d3      	adds	r3, r2, r3
 80104dc:	b299      	uxth	r1, r3
 80104de:	2010      	movs	r0, #16
 80104e0:	183b      	adds	r3, r7, r0
 80104e2:	242e      	movs	r4, #46	@ 0x2e
 80104e4:	193a      	adds	r2, r7, r4
 80104e6:	8812      	ldrh	r2, [r2, #0]
 80104e8:	1a8a      	subs	r2, r1, r2
 80104ea:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 80104ec:	193b      	adds	r3, r7, r4
 80104ee:	881a      	ldrh	r2, [r3, #0]
 80104f0:	1d3b      	adds	r3, r7, #4
 80104f2:	2100      	movs	r1, #0
 80104f4:	5e5b      	ldrsh	r3, [r3, r1]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d006      	beq.n	8010508 <_UG_PutChar+0x4f4>
 80104fa:	2322      	movs	r3, #34	@ 0x22
 80104fc:	18fa      	adds	r2, r7, r3
 80104fe:	183b      	adds	r3, r7, r0
 8010500:	8812      	ldrh	r2, [r2, #0]
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d23a      	bcs.n	801057e <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010508:	4b69      	ldr	r3, [pc, #420]	@ (80106b0 <_UG_PutChar+0x69c>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801050e:	4698      	mov	r8, r3
 8010510:	222e      	movs	r2, #46	@ 0x2e
 8010512:	18bb      	adds	r3, r7, r2
 8010514:	2400      	movs	r4, #0
 8010516:	5f1c      	ldrsh	r4, [r3, r4]
 8010518:	232c      	movs	r3, #44	@ 0x2c
 801051a:	18fb      	adds	r3, r7, r3
 801051c:	2000      	movs	r0, #0
 801051e:	5e1d      	ldrsh	r5, [r3, r0]
 8010520:	18ba      	adds	r2, r7, r2
 8010522:	2010      	movs	r0, #16
 8010524:	183b      	adds	r3, r7, r0
 8010526:	8812      	ldrh	r2, [r2, #0]
 8010528:	881b      	ldrh	r3, [r3, #0]
 801052a:	18d3      	adds	r3, r2, r3
 801052c:	b29b      	uxth	r3, r3
 801052e:	3b01      	subs	r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	b21e      	sxth	r6, r3
 8010534:	2322      	movs	r3, #34	@ 0x22
 8010536:	18fb      	adds	r3, r7, r3
 8010538:	881a      	ldrh	r2, [r3, #0]
 801053a:	2014      	movs	r0, #20
 801053c:	183b      	adds	r3, r7, r0
 801053e:	2000      	movs	r0, #0
 8010540:	5e1b      	ldrsh	r3, [r3, r0]
 8010542:	0019      	movs	r1, r3
 8010544:	0010      	movs	r0, r2
 8010546:	f7ef fe85 	bl	8000254 <__divsi3>
 801054a:	0003      	movs	r3, r0
 801054c:	b29a      	uxth	r2, r3
 801054e:	212c      	movs	r1, #44	@ 0x2c
 8010550:	187b      	adds	r3, r7, r1
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	18d3      	adds	r3, r2, r3
 8010556:	b29b      	uxth	r3, r3
 8010558:	b21b      	sxth	r3, r3
 801055a:	0032      	movs	r2, r6
 801055c:	0029      	movs	r1, r5
 801055e:	0020      	movs	r0, r4
 8010560:	47c0      	blx	r8
 8010562:	0003      	movs	r3, r0
 8010564:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010566:	2422      	movs	r4, #34	@ 0x22
 8010568:	193b      	adds	r3, r7, r4
 801056a:	881a      	ldrh	r2, [r3, #0]
 801056c:	003b      	movs	r3, r7
 801056e:	8819      	ldrh	r1, [r3, #0]
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	0010      	movs	r0, r2
 8010574:	4798      	blx	r3
               fpixels=0;
 8010576:	193b      	adds	r3, r7, r4
 8010578:	2200      	movs	r2, #0
 801057a:	801a      	strh	r2, [r3, #0]
 801057c:	e036      	b.n	80105ec <_UG_PutChar+0x5d8>
=======
 800f60c:	1d3b      	adds	r3, r7, #4
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	2314      	movs	r3, #20
 800f612:	18fb      	adds	r3, r7, r3
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	18d3      	adds	r3, r2, r3
 800f618:	b299      	uxth	r1, r3
 800f61a:	2010      	movs	r0, #16
 800f61c:	183b      	adds	r3, r7, r0
 800f61e:	242e      	movs	r4, #46	@ 0x2e
 800f620:	193a      	adds	r2, r7, r4
 800f622:	8812      	ldrh	r2, [r2, #0]
 800f624:	1a8a      	subs	r2, r1, r2
 800f626:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 800f628:	193b      	adds	r3, r7, r4
 800f62a:	881a      	ldrh	r2, [r3, #0]
 800f62c:	1d3b      	adds	r3, r7, #4
 800f62e:	2100      	movs	r1, #0
 800f630:	5e5b      	ldrsh	r3, [r3, r1]
 800f632:	429a      	cmp	r2, r3
 800f634:	d006      	beq.n	800f644 <_UG_PutChar+0x4f4>
 800f636:	2322      	movs	r3, #34	@ 0x22
 800f638:	18fa      	adds	r2, r7, r3
 800f63a:	183b      	adds	r3, r7, r0
 800f63c:	8812      	ldrh	r2, [r2, #0]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d23a      	bcs.n	800f6ba <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800f644:	4b69      	ldr	r3, [pc, #420]	@ (800f7ec <_UG_PutChar+0x69c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f64a:	4698      	mov	r8, r3
 800f64c:	222e      	movs	r2, #46	@ 0x2e
 800f64e:	18bb      	adds	r3, r7, r2
 800f650:	2400      	movs	r4, #0
 800f652:	5f1c      	ldrsh	r4, [r3, r4]
 800f654:	232c      	movs	r3, #44	@ 0x2c
 800f656:	18fb      	adds	r3, r7, r3
 800f658:	2000      	movs	r0, #0
 800f65a:	5e1d      	ldrsh	r5, [r3, r0]
 800f65c:	18ba      	adds	r2, r7, r2
 800f65e:	2010      	movs	r0, #16
 800f660:	183b      	adds	r3, r7, r0
 800f662:	8812      	ldrh	r2, [r2, #0]
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	18d3      	adds	r3, r2, r3
 800f668:	b29b      	uxth	r3, r3
 800f66a:	3b01      	subs	r3, #1
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	b21e      	sxth	r6, r3
 800f670:	2322      	movs	r3, #34	@ 0x22
 800f672:	18fb      	adds	r3, r7, r3
 800f674:	881a      	ldrh	r2, [r3, #0]
 800f676:	2014      	movs	r0, #20
 800f678:	183b      	adds	r3, r7, r0
 800f67a:	2000      	movs	r0, #0
 800f67c:	5e1b      	ldrsh	r3, [r3, r0]
 800f67e:	0019      	movs	r1, r3
 800f680:	0010      	movs	r0, r2
 800f682:	f7f0 fde7 	bl	8000254 <__divsi3>
 800f686:	0003      	movs	r3, r0
 800f688:	b29a      	uxth	r2, r3
 800f68a:	212c      	movs	r1, #44	@ 0x2c
 800f68c:	187b      	adds	r3, r7, r1
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	18d3      	adds	r3, r2, r3
 800f692:	b29b      	uxth	r3, r3
 800f694:	b21b      	sxth	r3, r3
 800f696:	0032      	movs	r2, r6
 800f698:	0029      	movs	r1, r5
 800f69a:	0020      	movs	r0, r4
 800f69c:	47c0      	blx	r8
 800f69e:	0003      	movs	r3, r0
 800f6a0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800f6a2:	2422      	movs	r4, #34	@ 0x22
 800f6a4:	193b      	adds	r3, r7, r4
 800f6a6:	881a      	ldrh	r2, [r3, #0]
 800f6a8:	003b      	movs	r3, r7
 800f6aa:	8819      	ldrh	r1, [r3, #0]
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	0010      	movs	r0, r2
 800f6b0:	4798      	blx	r3
               fpixels=0;
 800f6b2:	193b      	adds	r3, r7, r4
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	801a      	strh	r2, [r3, #0]
 800f6b8:	e036      	b.n	800f728 <_UG_PutChar+0x5d8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
<<<<<<< HEAD
 801057e:	4b4c      	ldr	r3, [pc, #304]	@ (80106b0 <_UG_PutChar+0x69c>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010584:	001c      	movs	r4, r3
 8010586:	262e      	movs	r6, #46	@ 0x2e
 8010588:	19bb      	adds	r3, r7, r6
 801058a:	2000      	movs	r0, #0
 801058c:	5e18      	ldrsh	r0, [r3, r0]
 801058e:	252c      	movs	r5, #44	@ 0x2c
 8010590:	197b      	adds	r3, r7, r5
 8010592:	2200      	movs	r2, #0
 8010594:	5e9a      	ldrsh	r2, [r3, r2]
 8010596:	4694      	mov	ip, r2
 8010598:	19ba      	adds	r2, r7, r6
 801059a:	2310      	movs	r3, #16
 801059c:	18fb      	adds	r3, r7, r3
 801059e:	8812      	ldrh	r2, [r2, #0]
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	18d3      	adds	r3, r2, r3
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	3b01      	subs	r3, #1
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	b21a      	sxth	r2, r3
 80105ac:	197b      	adds	r3, r7, r5
 80105ae:	2100      	movs	r1, #0
 80105b0:	5e5b      	ldrsh	r3, [r3, r1]
 80105b2:	4661      	mov	r1, ip
 80105b4:	47a0      	blx	r4
 80105b6:	0003      	movs	r3, r0
 80105b8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80105ba:	2422      	movs	r4, #34	@ 0x22
 80105bc:	193b      	adds	r3, r7, r4
 80105be:	881a      	ldrh	r2, [r3, #0]
 80105c0:	003b      	movs	r3, r7
 80105c2:	8819      	ldrh	r1, [r3, #0]
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	0010      	movs	r0, r2
 80105c8:	4798      	blx	r3
               fpixels -= width;
 80105ca:	193b      	adds	r3, r7, r4
 80105cc:	1939      	adds	r1, r7, r4
 80105ce:	2210      	movs	r2, #16
 80105d0:	18ba      	adds	r2, r7, r2
 80105d2:	8809      	ldrh	r1, [r1, #0]
 80105d4:	8812      	ldrh	r2, [r2, #0]
 80105d6:	1a8a      	subs	r2, r1, r2
 80105d8:	801a      	strh	r2, [r3, #0]
               x0=x;
 80105da:	19bb      	adds	r3, r7, r6
 80105dc:	1d3a      	adds	r2, r7, #4
 80105de:	8812      	ldrh	r2, [r2, #0]
 80105e0:	801a      	strh	r2, [r3, #0]
               y0++;
 80105e2:	197b      	adds	r3, r7, r5
 80105e4:	881a      	ldrh	r2, [r3, #0]
 80105e6:	197b      	adds	r3, r7, r5
 80105e8:	3201      	adds	r2, #1
 80105ea:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 80105ec:	2322      	movs	r3, #34	@ 0x22
 80105ee:	18fb      	adds	r3, r7, r3
 80105f0:	881b      	ldrh	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d000      	beq.n	80105f8 <_UG_PutChar+0x5e4>
 80105f6:	e76b      	b.n	80104d0 <_UG_PutChar+0x4bc>
 80105f8:	e0a1      	b.n	801073e <_UG_PutChar+0x72a>
=======
 800f6ba:	4b4c      	ldr	r3, [pc, #304]	@ (800f7ec <_UG_PutChar+0x69c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6c0:	001c      	movs	r4, r3
 800f6c2:	262e      	movs	r6, #46	@ 0x2e
 800f6c4:	19bb      	adds	r3, r7, r6
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	5e18      	ldrsh	r0, [r3, r0]
 800f6ca:	252c      	movs	r5, #44	@ 0x2c
 800f6cc:	197b      	adds	r3, r7, r5
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	5e9a      	ldrsh	r2, [r3, r2]
 800f6d2:	4694      	mov	ip, r2
 800f6d4:	19ba      	adds	r2, r7, r6
 800f6d6:	2310      	movs	r3, #16
 800f6d8:	18fb      	adds	r3, r7, r3
 800f6da:	8812      	ldrh	r2, [r2, #0]
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	18d3      	adds	r3, r2, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	b21a      	sxth	r2, r3
 800f6e8:	197b      	adds	r3, r7, r5
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	5e5b      	ldrsh	r3, [r3, r1]
 800f6ee:	4661      	mov	r1, ip
 800f6f0:	47a0      	blx	r4
 800f6f2:	0003      	movs	r3, r0
 800f6f4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800f6f6:	2422      	movs	r4, #34	@ 0x22
 800f6f8:	193b      	adds	r3, r7, r4
 800f6fa:	881a      	ldrh	r2, [r3, #0]
 800f6fc:	003b      	movs	r3, r7
 800f6fe:	8819      	ldrh	r1, [r3, #0]
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	0010      	movs	r0, r2
 800f704:	4798      	blx	r3
               fpixels -= width;
 800f706:	193b      	adds	r3, r7, r4
 800f708:	1939      	adds	r1, r7, r4
 800f70a:	2210      	movs	r2, #16
 800f70c:	18ba      	adds	r2, r7, r2
 800f70e:	8809      	ldrh	r1, [r1, #0]
 800f710:	8812      	ldrh	r2, [r2, #0]
 800f712:	1a8a      	subs	r2, r1, r2
 800f714:	801a      	strh	r2, [r3, #0]
               x0=x;
 800f716:	19bb      	adds	r3, r7, r6
 800f718:	1d3a      	adds	r2, r7, #4
 800f71a:	8812      	ldrh	r2, [r2, #0]
 800f71c:	801a      	strh	r2, [r3, #0]
               y0++;
 800f71e:	197b      	adds	r3, r7, r5
 800f720:	881a      	ldrh	r2, [r3, #0]
 800f722:	197b      	adds	r3, r7, r5
 800f724:	3201      	adds	r2, #1
 800f726:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 800f728:	2322      	movs	r3, #34	@ 0x22
 800f72a:	18fb      	adds	r3, r7, r3
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d000      	beq.n	800f734 <_UG_PutChar+0x5e4>
 800f732:	e76b      	b.n	800f60c <_UG_PutChar+0x4bc>
 800f734:	e0a1      	b.n	800f87a <_UG_PutChar+0x72a>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
<<<<<<< HEAD
 80105fa:	4b2d      	ldr	r3, [pc, #180]	@ (80106b0 <_UG_PutChar+0x69c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	222c      	movs	r2, #44	@ 0x2c
 8010600:	5c9b      	ldrb	r3, [r3, r2]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d000      	beq.n	8010608 <_UG_PutChar+0x5f4>
 8010606:	e09a      	b.n	801073e <_UG_PutChar+0x72a>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010608:	2328      	movs	r3, #40	@ 0x28
 801060a:	18fb      	adds	r3, r7, r3
 801060c:	2200      	movs	r2, #0
 801060e:	801a      	strh	r2, [r3, #0]
 8010610:	e08a      	b.n	8010728 <_UG_PutChar+0x714>
     {
       for( i=0;i<actual_char_width;i++ )
 8010612:	232a      	movs	r3, #42	@ 0x2a
 8010614:	18fb      	adds	r3, r7, r3
 8010616:	2200      	movs	r2, #0
 8010618:	801a      	strh	r2, [r3, #0]
 801061a:	e069      	b.n	80106f0 <_UG_PutChar+0x6dc>
       {
         b = *data++;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	1c5a      	adds	r2, r3, #1
 8010620:	60ba      	str	r2, [r7, #8]
 8010622:	241d      	movs	r4, #29
 8010624:	193a      	adds	r2, r7, r4
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801062a:	003b      	movs	r3, r7
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	22ff      	movs	r2, #255	@ 0xff
 8010630:	4013      	ands	r3, r2
 8010632:	193a      	adds	r2, r7, r4
 8010634:	7812      	ldrb	r2, [r2, #0]
 8010636:	435a      	muls	r2, r3
 8010638:	2548      	movs	r5, #72	@ 0x48
 801063a:	197b      	adds	r3, r7, r5
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	21ff      	movs	r1, #255	@ 0xff
 8010640:	400b      	ands	r3, r1
 8010642:	1939      	adds	r1, r7, r4
 8010644:	7809      	ldrb	r1, [r1, #0]
 8010646:	2080      	movs	r0, #128	@ 0x80
 8010648:	0040      	lsls	r0, r0, #1
 801064a:	1a41      	subs	r1, r0, r1
 801064c:	434b      	muls	r3, r1
 801064e:	18d3      	adds	r3, r2, r3
 8010650:	121b      	asrs	r3, r3, #8
 8010652:	b21b      	sxth	r3, r3
 8010654:	22ff      	movs	r2, #255	@ 0xff
 8010656:	4013      	ands	r3, r2
 8010658:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 801065a:	003b      	movs	r3, r7
 801065c:	8819      	ldrh	r1, [r3, #0]
 801065e:	23ff      	movs	r3, #255	@ 0xff
 8010660:	021b      	lsls	r3, r3, #8
 8010662:	400b      	ands	r3, r1
 8010664:	1939      	adds	r1, r7, r4
 8010666:	7809      	ldrb	r1, [r1, #0]
 8010668:	4359      	muls	r1, r3
 801066a:	197b      	adds	r3, r7, r5
 801066c:	8818      	ldrh	r0, [r3, #0]
 801066e:	23ff      	movs	r3, #255	@ 0xff
 8010670:	021b      	lsls	r3, r3, #8
 8010672:	4003      	ands	r3, r0
 8010674:	1938      	adds	r0, r7, r4
 8010676:	7800      	ldrb	r0, [r0, #0]
 8010678:	2480      	movs	r4, #128	@ 0x80
 801067a:	0064      	lsls	r4, r4, #1
 801067c:	1a20      	subs	r0, r4, r0
 801067e:	4343      	muls	r3, r0
 8010680:	18cb      	adds	r3, r1, r3
 8010682:	121b      	asrs	r3, r3, #8
 8010684:	b21b      	sxth	r3, r3
 8010686:	21ff      	movs	r1, #255	@ 0xff
 8010688:	438b      	bics	r3, r1
 801068a:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801068c:	4313      	orrs	r3, r2
 801068e:	b21a      	sxth	r2, r3
 8010690:	2112      	movs	r1, #18
 8010692:	187b      	adds	r3, r7, r1
 8010694:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8010696:	2316      	movs	r3, #22
 8010698:	18fb      	adds	r3, r7, r3
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d009      	beq.n	80106b4 <_UG_PutChar+0x6a0>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80106a0:	187b      	adds	r3, r7, r1
 80106a2:	881a      	ldrh	r2, [r3, #0]
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	0011      	movs	r1, r2
 80106a8:	2001      	movs	r0, #1
 80106aa:	4798      	blx	r3
 80106ac:	e01a      	b.n	80106e4 <_UG_PutChar+0x6d0>
 80106ae:	46c0      	nop			@ (mov r8, r8)
 80106b0:	20000c44 	.word	0x20000c44
=======
 800f736:	4b2d      	ldr	r3, [pc, #180]	@ (800f7ec <_UG_PutChar+0x69c>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	222c      	movs	r2, #44	@ 0x2c
 800f73c:	5c9b      	ldrb	r3, [r3, r2]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d000      	beq.n	800f744 <_UG_PutChar+0x5f4>
 800f742:	e09a      	b.n	800f87a <_UG_PutChar+0x72a>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800f744:	2328      	movs	r3, #40	@ 0x28
 800f746:	18fb      	adds	r3, r7, r3
 800f748:	2200      	movs	r2, #0
 800f74a:	801a      	strh	r2, [r3, #0]
 800f74c:	e08a      	b.n	800f864 <_UG_PutChar+0x714>
     {
       for( i=0;i<actual_char_width;i++ )
 800f74e:	232a      	movs	r3, #42	@ 0x2a
 800f750:	18fb      	adds	r3, r7, r3
 800f752:	2200      	movs	r2, #0
 800f754:	801a      	strh	r2, [r3, #0]
 800f756:	e069      	b.n	800f82c <_UG_PutChar+0x6dc>
       {
         b = *data++;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	1c5a      	adds	r2, r3, #1
 800f75c:	60ba      	str	r2, [r7, #8]
 800f75e:	241d      	movs	r4, #29
 800f760:	193a      	adds	r2, r7, r4
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800f766:	003b      	movs	r3, r7
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	22ff      	movs	r2, #255	@ 0xff
 800f76c:	4013      	ands	r3, r2
 800f76e:	193a      	adds	r2, r7, r4
 800f770:	7812      	ldrb	r2, [r2, #0]
 800f772:	435a      	muls	r2, r3
 800f774:	2548      	movs	r5, #72	@ 0x48
 800f776:	197b      	adds	r3, r7, r5
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	21ff      	movs	r1, #255	@ 0xff
 800f77c:	400b      	ands	r3, r1
 800f77e:	1939      	adds	r1, r7, r4
 800f780:	7809      	ldrb	r1, [r1, #0]
 800f782:	2080      	movs	r0, #128	@ 0x80
 800f784:	0040      	lsls	r0, r0, #1
 800f786:	1a41      	subs	r1, r0, r1
 800f788:	434b      	muls	r3, r1
 800f78a:	18d3      	adds	r3, r2, r3
 800f78c:	121b      	asrs	r3, r3, #8
 800f78e:	b21b      	sxth	r3, r3
 800f790:	22ff      	movs	r2, #255	@ 0xff
 800f792:	4013      	ands	r3, r2
 800f794:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800f796:	003b      	movs	r3, r7
 800f798:	8819      	ldrh	r1, [r3, #0]
 800f79a:	23ff      	movs	r3, #255	@ 0xff
 800f79c:	021b      	lsls	r3, r3, #8
 800f79e:	400b      	ands	r3, r1
 800f7a0:	1939      	adds	r1, r7, r4
 800f7a2:	7809      	ldrb	r1, [r1, #0]
 800f7a4:	4359      	muls	r1, r3
 800f7a6:	197b      	adds	r3, r7, r5
 800f7a8:	8818      	ldrh	r0, [r3, #0]
 800f7aa:	23ff      	movs	r3, #255	@ 0xff
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	4003      	ands	r3, r0
 800f7b0:	1938      	adds	r0, r7, r4
 800f7b2:	7800      	ldrb	r0, [r0, #0]
 800f7b4:	2480      	movs	r4, #128	@ 0x80
 800f7b6:	0064      	lsls	r4, r4, #1
 800f7b8:	1a20      	subs	r0, r4, r0
 800f7ba:	4343      	muls	r3, r0
 800f7bc:	18cb      	adds	r3, r1, r3
 800f7be:	121b      	asrs	r3, r3, #8
 800f7c0:	b21b      	sxth	r3, r3
 800f7c2:	21ff      	movs	r1, #255	@ 0xff
 800f7c4:	438b      	bics	r3, r1
 800f7c6:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	b21a      	sxth	r2, r3
 800f7cc:	2112      	movs	r1, #18
 800f7ce:	187b      	adds	r3, r7, r1
 800f7d0:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800f7d2:	2316      	movs	r3, #22
 800f7d4:	18fb      	adds	r3, r7, r3
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <_UG_PutChar+0x6a0>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800f7dc:	187b      	adds	r3, r7, r1
 800f7de:	881a      	ldrh	r2, [r3, #0]
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	0011      	movs	r1, r2
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	4798      	blx	r3
 800f7e8:	e01a      	b.n	800f820 <_UG_PutChar+0x6d0>
 800f7ea:	46c0      	nop			@ (mov r8, r8)
 800f7ec:	20000b3c 	.word	0x20000b3c
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
<<<<<<< HEAD
 80106b4:	4b27      	ldr	r3, [pc, #156]	@ (8010754 <_UG_PutChar+0x740>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	1d3a      	adds	r2, r7, #4
 80106be:	8811      	ldrh	r1, [r2, #0]
 80106c0:	222a      	movs	r2, #42	@ 0x2a
 80106c2:	18ba      	adds	r2, r7, r2
 80106c4:	8812      	ldrh	r2, [r2, #0]
 80106c6:	188a      	adds	r2, r1, r2
 80106c8:	b292      	uxth	r2, r2
 80106ca:	b210      	sxth	r0, r2
 80106cc:	1cba      	adds	r2, r7, #2
 80106ce:	8811      	ldrh	r1, [r2, #0]
 80106d0:	2228      	movs	r2, #40	@ 0x28
 80106d2:	18ba      	adds	r2, r7, r2
 80106d4:	8812      	ldrh	r2, [r2, #0]
 80106d6:	188a      	adds	r2, r1, r2
 80106d8:	b292      	uxth	r2, r2
 80106da:	b211      	sxth	r1, r2
 80106dc:	2212      	movs	r2, #18
 80106de:	18ba      	adds	r2, r7, r2
 80106e0:	8812      	ldrh	r2, [r2, #0]
 80106e2:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80106e4:	212a      	movs	r1, #42	@ 0x2a
 80106e6:	187b      	adds	r3, r7, r1
 80106e8:	881a      	ldrh	r2, [r3, #0]
 80106ea:	187b      	adds	r3, r7, r1
 80106ec:	3201      	adds	r2, #1
 80106ee:	801a      	strh	r2, [r3, #0]
 80106f0:	232a      	movs	r3, #42	@ 0x2a
 80106f2:	18fb      	adds	r3, r7, r3
 80106f4:	881a      	ldrh	r2, [r3, #0]
 80106f6:	2014      	movs	r0, #20
 80106f8:	183b      	adds	r3, r7, r0
 80106fa:	2100      	movs	r1, #0
 80106fc:	5e5b      	ldrsh	r3, [r3, r1]
 80106fe:	429a      	cmp	r2, r3
 8010700:	da00      	bge.n	8010704 <_UG_PutChar+0x6f0>
 8010702:	e78b      	b.n	801061c <_UG_PutChar+0x608>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	4b13      	ldr	r3, [pc, #76]	@ (8010754 <_UG_PutChar+0x740>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	212e      	movs	r1, #46	@ 0x2e
 801070c:	5c5b      	ldrb	r3, [r3, r1]
 801070e:	0019      	movs	r1, r3
 8010710:	183b      	adds	r3, r7, r0
 8010712:	2000      	movs	r0, #0
 8010714:	5e1b      	ldrsh	r3, [r3, r0]
 8010716:	1acb      	subs	r3, r1, r3
 8010718:	18d3      	adds	r3, r2, r3
 801071a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 801071c:	2128      	movs	r1, #40	@ 0x28
 801071e:	187b      	adds	r3, r7, r1
 8010720:	881a      	ldrh	r2, [r3, #0]
 8010722:	187b      	adds	r3, r7, r1
 8010724:	3201      	adds	r2, #1
 8010726:	801a      	strh	r2, [r3, #0]
 8010728:	4b0a      	ldr	r3, [pc, #40]	@ (8010754 <_UG_PutChar+0x740>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	222f      	movs	r2, #47	@ 0x2f
 801072e:	5c9b      	ldrb	r3, [r3, r2]
 8010730:	001a      	movs	r2, r3
 8010732:	2328      	movs	r3, #40	@ 0x28
 8010734:	18fb      	adds	r3, r7, r3
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	4293      	cmp	r3, r2
 801073a:	d200      	bcs.n	801073e <_UG_PutChar+0x72a>
 801073c:	e769      	b.n	8010612 <_UG_PutChar+0x5fe>
=======
 800f7f0:	4b27      	ldr	r3, [pc, #156]	@ (800f890 <_UG_PutChar+0x740>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	1d3a      	adds	r2, r7, #4
 800f7fa:	8811      	ldrh	r1, [r2, #0]
 800f7fc:	222a      	movs	r2, #42	@ 0x2a
 800f7fe:	18ba      	adds	r2, r7, r2
 800f800:	8812      	ldrh	r2, [r2, #0]
 800f802:	188a      	adds	r2, r1, r2
 800f804:	b292      	uxth	r2, r2
 800f806:	b210      	sxth	r0, r2
 800f808:	1cba      	adds	r2, r7, #2
 800f80a:	8811      	ldrh	r1, [r2, #0]
 800f80c:	2228      	movs	r2, #40	@ 0x28
 800f80e:	18ba      	adds	r2, r7, r2
 800f810:	8812      	ldrh	r2, [r2, #0]
 800f812:	188a      	adds	r2, r1, r2
 800f814:	b292      	uxth	r2, r2
 800f816:	b211      	sxth	r1, r2
 800f818:	2212      	movs	r2, #18
 800f81a:	18ba      	adds	r2, r7, r2
 800f81c:	8812      	ldrh	r2, [r2, #0]
 800f81e:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800f820:	212a      	movs	r1, #42	@ 0x2a
 800f822:	187b      	adds	r3, r7, r1
 800f824:	881a      	ldrh	r2, [r3, #0]
 800f826:	187b      	adds	r3, r7, r1
 800f828:	3201      	adds	r2, #1
 800f82a:	801a      	strh	r2, [r3, #0]
 800f82c:	232a      	movs	r3, #42	@ 0x2a
 800f82e:	18fb      	adds	r3, r7, r3
 800f830:	881a      	ldrh	r2, [r3, #0]
 800f832:	2014      	movs	r0, #20
 800f834:	183b      	adds	r3, r7, r0
 800f836:	2100      	movs	r1, #0
 800f838:	5e5b      	ldrsh	r3, [r3, r1]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	da00      	bge.n	800f840 <_UG_PutChar+0x6f0>
 800f83e:	e78b      	b.n	800f758 <_UG_PutChar+0x608>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	4b13      	ldr	r3, [pc, #76]	@ (800f890 <_UG_PutChar+0x740>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	212e      	movs	r1, #46	@ 0x2e
 800f848:	5c5b      	ldrb	r3, [r3, r1]
 800f84a:	0019      	movs	r1, r3
 800f84c:	183b      	adds	r3, r7, r0
 800f84e:	2000      	movs	r0, #0
 800f850:	5e1b      	ldrsh	r3, [r3, r0]
 800f852:	1acb      	subs	r3, r1, r3
 800f854:	18d3      	adds	r3, r2, r3
 800f856:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800f858:	2128      	movs	r1, #40	@ 0x28
 800f85a:	187b      	adds	r3, r7, r1
 800f85c:	881a      	ldrh	r2, [r3, #0]
 800f85e:	187b      	adds	r3, r7, r1
 800f860:	3201      	adds	r2, #1
 800f862:	801a      	strh	r2, [r3, #0]
 800f864:	4b0a      	ldr	r3, [pc, #40]	@ (800f890 <_UG_PutChar+0x740>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	222f      	movs	r2, #47	@ 0x2f
 800f86a:	5c9b      	ldrb	r3, [r3, r2]
 800f86c:	001a      	movs	r2, r3
 800f86e:	2328      	movs	r3, #40	@ 0x28
 800f870:	18fb      	adds	r3, r7, r3
 800f872:	881b      	ldrh	r3, [r3, #0]
 800f874:	4293      	cmp	r3, r2
 800f876:	d200      	bcs.n	800f87a <_UG_PutChar+0x72a>
 800f878:	e769      	b.n	800f74e <_UG_PutChar+0x5fe>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
     }
   }
   #endif
   return (actual_char_width);
<<<<<<< HEAD
 801073e:	2314      	movs	r3, #20
 8010740:	18fb      	adds	r3, r7, r3
 8010742:	2200      	movs	r2, #0
 8010744:	5e9b      	ldrsh	r3, [r3, r2]
}
 8010746:	0018      	movs	r0, r3
 8010748:	46bd      	mov	sp, r7
 801074a:	b00c      	add	sp, #48	@ 0x30
 801074c:	bc80      	pop	{r7}
 801074e:	46b8      	mov	r8, r7
 8010750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010752:	46c0      	nop			@ (mov r8, r8)
 8010754:	20000c44 	.word	0x20000c44

08010758 <_UG_ProcessTouchData>:
=======
 800f87a:	2314      	movs	r3, #20
 800f87c:	18fb      	adds	r3, r7, r3
 800f87e:	2200      	movs	r2, #0
 800f880:	5e9b      	ldrsh	r3, [r3, r2]
}
 800f882:	0018      	movs	r0, r3
 800f884:	46bd      	mov	sp, r7
 800f886:	b00c      	add	sp, #48	@ 0x30
 800f888:	bc80      	pop	{r7}
 800f88a:	46b8      	mov	r8, r7
 800f88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f88e:	46c0      	nop			@ (mov r8, r8)
 800f890:	20000b3c 	.word	0x20000b3c

0800f894 <_UG_ProcessTouchData>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
<<<<<<< HEAD
 8010758:	b590      	push	{r4, r7, lr}
 801075a:	b089      	sub	sp, #36	@ 0x24
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
=======
 800f894:	b590      	push	{r4, r7, lr}
 800f896:	b089      	sub	sp, #36	@ 0x24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
<<<<<<< HEAD
 8010760:	4b77      	ldr	r3, [pc, #476]	@ (8010940 <_UG_ProcessTouchData+0x1e8>)
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	231a      	movs	r3, #26
 8010766:	18fb      	adds	r3, r7, r3
 8010768:	88d2      	ldrh	r2, [r2, #6]
 801076a:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 801076c:	4b74      	ldr	r3, [pc, #464]	@ (8010940 <_UG_ProcessTouchData+0x1e8>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	2318      	movs	r3, #24
 8010772:	18fb      	adds	r3, r7, r3
 8010774:	8912      	ldrh	r2, [r2, #8]
 8010776:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 8010778:	4b71      	ldr	r3, [pc, #452]	@ (8010940 <_UG_ProcessTouchData+0x1e8>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	2317      	movs	r3, #23
 801077e:	18fb      	adds	r3, r7, r3
 8010780:	7912      	ldrb	r2, [r2, #4]
 8010782:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	2314      	movs	r3, #20
 801078a:	18fb      	adds	r3, r7, r3
 801078c:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 801078e:	231e      	movs	r3, #30
 8010790:	18fb      	adds	r3, r7, r3
 8010792:	2200      	movs	r2, #0
 8010794:	801a      	strh	r2, [r3, #0]
 8010796:	e0c5      	b.n	8010924 <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	231e      	movs	r3, #30
 801079e:	18fb      	adds	r3, r7, r3
 80107a0:	881b      	ldrh	r3, [r3, #0]
 80107a2:	015b      	lsls	r3, r3, #5
 80107a4:	18d3      	adds	r3, r2, r3
 80107a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80107a8:	200f      	movs	r0, #15
 80107aa:	183b      	adds	r3, r7, r0
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	7812      	ldrb	r2, [r2, #0]
 80107b0:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 80107b2:	211d      	movs	r1, #29
 80107b4:	187b      	adds	r3, r7, r1
 80107b6:	693a      	ldr	r2, [r7, #16]
 80107b8:	7852      	ldrb	r2, [r2, #1]
 80107ba:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80107bc:	183b      	adds	r3, r7, r0
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	2201      	movs	r2, #1
 80107c2:	4013      	ands	r3, r2
 80107c4:	d000      	beq.n	80107c8 <_UG_ProcessTouchData+0x70>
 80107c6:	e0a2      	b.n	801090e <_UG_ProcessTouchData+0x1b6>
 80107c8:	183b      	adds	r3, r7, r0
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2202      	movs	r2, #2
 80107ce:	4013      	ands	r3, r2
 80107d0:	d100      	bne.n	80107d4 <_UG_ProcessTouchData+0x7c>
 80107d2:	e09c      	b.n	801090e <_UG_ProcessTouchData+0x1b6>
 80107d4:	183b      	adds	r3, r7, r0
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2208      	movs	r2, #8
 80107da:	4013      	ands	r3, r2
 80107dc:	d100      	bne.n	80107e0 <_UG_ProcessTouchData+0x88>
 80107de:	e096      	b.n	801090e <_UG_ProcessTouchData+0x1b6>
 80107e0:	183b      	adds	r3, r7, r0
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2240      	movs	r2, #64	@ 0x40
 80107e6:	4013      	ands	r3, r2
 80107e8:	d000      	beq.n	80107ec <_UG_ProcessTouchData+0x94>
 80107ea:	e090      	b.n	801090e <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80107ec:	2317      	movs	r3, #23
 80107ee:	18fb      	adds	r3, r7, r3
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d05f      	beq.n	80108b6 <_UG_ProcessTouchData+0x15e>
 80107f6:	231a      	movs	r3, #26
 80107f8:	18fb      	adds	r3, r7, r3
 80107fa:	2200      	movs	r2, #0
 80107fc:	5e9b      	ldrsh	r3, [r3, r2]
 80107fe:	3301      	adds	r3, #1
 8010800:	d059      	beq.n	80108b6 <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010802:	187b      	adds	r3, r7, r1
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2240      	movs	r2, #64	@ 0x40
 8010808:	4013      	ands	r3, r2
 801080a:	d10c      	bne.n	8010826 <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 801080c:	187b      	adds	r3, r7, r1
 801080e:	0008      	movs	r0, r1
 8010810:	187a      	adds	r2, r7, r1
 8010812:	7812      	ldrb	r2, [r2, #0]
 8010814:	2105      	movs	r1, #5
 8010816:	430a      	orrs	r2, r1
 8010818:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 801081a:	183b      	adds	r3, r7, r0
 801081c:	183a      	adds	r2, r7, r0
 801081e:	7812      	ldrb	r2, [r2, #0]
 8010820:	2118      	movs	r1, #24
 8010822:	438a      	bics	r2, r1
 8010824:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010826:	201d      	movs	r0, #29
 8010828:	183b      	adds	r3, r7, r0
 801082a:	183a      	adds	r2, r7, r0
 801082c:	7812      	ldrb	r2, [r2, #0]
 801082e:	2120      	movs	r1, #32
 8010830:	438a      	bics	r2, r1
 8010832:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	2208      	movs	r2, #8
 8010838:	5e9b      	ldrsh	r3, [r3, r2]
 801083a:	211a      	movs	r1, #26
 801083c:	187a      	adds	r2, r7, r1
 801083e:	2400      	movs	r4, #0
 8010840:	5f12      	ldrsh	r2, [r2, r4]
 8010842:	429a      	cmp	r2, r3
 8010844:	db2f      	blt.n	80108a6 <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	220c      	movs	r2, #12
 801084a:	5e9b      	ldrsh	r3, [r3, r2]
 801084c:	187a      	adds	r2, r7, r1
 801084e:	2100      	movs	r1, #0
 8010850:	5e52      	ldrsh	r2, [r2, r1]
 8010852:	429a      	cmp	r2, r3
 8010854:	dc27      	bgt.n	80108a6 <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	220a      	movs	r2, #10
 801085a:	5e9b      	ldrsh	r3, [r3, r2]
 801085c:	2118      	movs	r1, #24
 801085e:	187a      	adds	r2, r7, r1
 8010860:	2400      	movs	r4, #0
 8010862:	5f12      	ldrsh	r2, [r2, r4]
 8010864:	429a      	cmp	r2, r3
 8010866:	db1e      	blt.n	80108a6 <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	220e      	movs	r2, #14
 801086c:	5e9b      	ldrsh	r3, [r3, r2]
 801086e:	187a      	adds	r2, r7, r1
 8010870:	2100      	movs	r1, #0
 8010872:	5e52      	ldrsh	r2, [r2, r1]
 8010874:	429a      	cmp	r2, r3
 8010876:	dc16      	bgt.n	80108a6 <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010878:	183b      	adds	r3, r7, r0
 801087a:	183a      	adds	r2, r7, r0
 801087c:	7812      	ldrb	r2, [r2, #0]
 801087e:	2120      	movs	r1, #32
 8010880:	430a      	orrs	r2, r1
 8010882:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010884:	183b      	adds	r3, r7, r0
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	2240      	movs	r2, #64	@ 0x40
 801088a:	4013      	ands	r3, r2
 801088c:	d10b      	bne.n	80108a6 <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 801088e:	183b      	adds	r3, r7, r0
 8010890:	183a      	adds	r2, r7, r0
 8010892:	7812      	ldrb	r2, [r2, #0]
 8010894:	2104      	movs	r1, #4
 8010896:	438a      	bics	r2, r1
 8010898:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 801089a:	183b      	adds	r3, r7, r0
 801089c:	183a      	adds	r2, r7, r0
 801089e:	7812      	ldrb	r2, [r2, #0]
 80108a0:	2102      	movs	r1, #2
 80108a2:	430a      	orrs	r2, r1
 80108a4:	701a      	strb	r2, [r3, #0]
=======
 800f89c:	4b77      	ldr	r3, [pc, #476]	@ (800fa7c <_UG_ProcessTouchData+0x1e8>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	231a      	movs	r3, #26
 800f8a2:	18fb      	adds	r3, r7, r3
 800f8a4:	88d2      	ldrh	r2, [r2, #6]
 800f8a6:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 800f8a8:	4b74      	ldr	r3, [pc, #464]	@ (800fa7c <_UG_ProcessTouchData+0x1e8>)
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	2318      	movs	r3, #24
 800f8ae:	18fb      	adds	r3, r7, r3
 800f8b0:	8912      	ldrh	r2, [r2, #8]
 800f8b2:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 800f8b4:	4b71      	ldr	r3, [pc, #452]	@ (800fa7c <_UG_ProcessTouchData+0x1e8>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	2317      	movs	r3, #23
 800f8ba:	18fb      	adds	r3, r7, r3
 800f8bc:	7912      	ldrb	r2, [r2, #4]
 800f8be:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	781a      	ldrb	r2, [r3, #0]
 800f8c4:	2314      	movs	r3, #20
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 800f8ca:	231e      	movs	r3, #30
 800f8cc:	18fb      	adds	r3, r7, r3
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	801a      	strh	r2, [r3, #0]
 800f8d2:	e0c5      	b.n	800fa60 <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	685a      	ldr	r2, [r3, #4]
 800f8d8:	231e      	movs	r3, #30
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	015b      	lsls	r3, r3, #5
 800f8e0:	18d3      	adds	r3, r2, r3
 800f8e2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800f8e4:	200f      	movs	r0, #15
 800f8e6:	183b      	adds	r3, r7, r0
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	7812      	ldrb	r2, [r2, #0]
 800f8ec:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 800f8ee:	211d      	movs	r1, #29
 800f8f0:	187b      	adds	r3, r7, r1
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	7852      	ldrb	r2, [r2, #1]
 800f8f6:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800f8f8:	183b      	adds	r3, r7, r0
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	4013      	ands	r3, r2
 800f900:	d000      	beq.n	800f904 <_UG_ProcessTouchData+0x70>
 800f902:	e0a2      	b.n	800fa4a <_UG_ProcessTouchData+0x1b6>
 800f904:	183b      	adds	r3, r7, r0
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2202      	movs	r2, #2
 800f90a:	4013      	ands	r3, r2
 800f90c:	d100      	bne.n	800f910 <_UG_ProcessTouchData+0x7c>
 800f90e:	e09c      	b.n	800fa4a <_UG_ProcessTouchData+0x1b6>
 800f910:	183b      	adds	r3, r7, r0
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2208      	movs	r2, #8
 800f916:	4013      	ands	r3, r2
 800f918:	d100      	bne.n	800f91c <_UG_ProcessTouchData+0x88>
 800f91a:	e096      	b.n	800fa4a <_UG_ProcessTouchData+0x1b6>
 800f91c:	183b      	adds	r3, r7, r0
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2240      	movs	r2, #64	@ 0x40
 800f922:	4013      	ands	r3, r2
 800f924:	d000      	beq.n	800f928 <_UG_ProcessTouchData+0x94>
 800f926:	e090      	b.n	800fa4a <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 800f928:	2317      	movs	r3, #23
 800f92a:	18fb      	adds	r3, r7, r3
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d05f      	beq.n	800f9f2 <_UG_ProcessTouchData+0x15e>
 800f932:	231a      	movs	r3, #26
 800f934:	18fb      	adds	r3, r7, r3
 800f936:	2200      	movs	r2, #0
 800f938:	5e9b      	ldrsh	r3, [r3, r2]
 800f93a:	3301      	adds	r3, #1
 800f93c:	d059      	beq.n	800f9f2 <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800f93e:	187b      	adds	r3, r7, r1
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2240      	movs	r2, #64	@ 0x40
 800f944:	4013      	ands	r3, r2
 800f946:	d10c      	bne.n	800f962 <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800f948:	187b      	adds	r3, r7, r1
 800f94a:	0008      	movs	r0, r1
 800f94c:	187a      	adds	r2, r7, r1
 800f94e:	7812      	ldrb	r2, [r2, #0]
 800f950:	2105      	movs	r1, #5
 800f952:	430a      	orrs	r2, r1
 800f954:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 800f956:	183b      	adds	r3, r7, r0
 800f958:	183a      	adds	r2, r7, r0
 800f95a:	7812      	ldrb	r2, [r2, #0]
 800f95c:	2118      	movs	r1, #24
 800f95e:	438a      	bics	r2, r1
 800f960:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800f962:	201d      	movs	r0, #29
 800f964:	183b      	adds	r3, r7, r0
 800f966:	183a      	adds	r2, r7, r0
 800f968:	7812      	ldrb	r2, [r2, #0]
 800f96a:	2120      	movs	r1, #32
 800f96c:	438a      	bics	r2, r1
 800f96e:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	2208      	movs	r2, #8
 800f974:	5e9b      	ldrsh	r3, [r3, r2]
 800f976:	211a      	movs	r1, #26
 800f978:	187a      	adds	r2, r7, r1
 800f97a:	2400      	movs	r4, #0
 800f97c:	5f12      	ldrsh	r2, [r2, r4]
 800f97e:	429a      	cmp	r2, r3
 800f980:	db2f      	blt.n	800f9e2 <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	220c      	movs	r2, #12
 800f986:	5e9b      	ldrsh	r3, [r3, r2]
 800f988:	187a      	adds	r2, r7, r1
 800f98a:	2100      	movs	r1, #0
 800f98c:	5e52      	ldrsh	r2, [r2, r1]
 800f98e:	429a      	cmp	r2, r3
 800f990:	dc27      	bgt.n	800f9e2 <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	220a      	movs	r2, #10
 800f996:	5e9b      	ldrsh	r3, [r3, r2]
 800f998:	2118      	movs	r1, #24
 800f99a:	187a      	adds	r2, r7, r1
 800f99c:	2400      	movs	r4, #0
 800f99e:	5f12      	ldrsh	r2, [r2, r4]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	db1e      	blt.n	800f9e2 <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	220e      	movs	r2, #14
 800f9a8:	5e9b      	ldrsh	r3, [r3, r2]
 800f9aa:	187a      	adds	r2, r7, r1
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	5e52      	ldrsh	r2, [r2, r1]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	dc16      	bgt.n	800f9e2 <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800f9b4:	183b      	adds	r3, r7, r0
 800f9b6:	183a      	adds	r2, r7, r0
 800f9b8:	7812      	ldrb	r2, [r2, #0]
 800f9ba:	2120      	movs	r1, #32
 800f9bc:	430a      	orrs	r2, r1
 800f9be:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800f9c0:	183b      	adds	r3, r7, r0
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2240      	movs	r2, #64	@ 0x40
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	d10b      	bne.n	800f9e2 <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800f9ca:	183b      	adds	r3, r7, r0
 800f9cc:	183a      	adds	r2, r7, r0
 800f9ce:	7812      	ldrb	r2, [r2, #0]
 800f9d0:	2104      	movs	r1, #4
 800f9d2:	438a      	bics	r2, r1
 800f9d4:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800f9d6:	183b      	adds	r3, r7, r0
 800f9d8:	183a      	adds	r2, r7, r0
 800f9da:	7812      	ldrb	r2, [r2, #0]
 800f9dc:	2102      	movs	r1, #2
 800f9de:	430a      	orrs	r2, r1
 800f9e0:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
<<<<<<< HEAD
 80108a6:	221d      	movs	r2, #29
 80108a8:	18bb      	adds	r3, r7, r2
 80108aa:	18ba      	adds	r2, r7, r2
 80108ac:	7812      	ldrb	r2, [r2, #0]
 80108ae:	2140      	movs	r1, #64	@ 0x40
 80108b0:	430a      	orrs	r2, r1
 80108b2:	701a      	strb	r2, [r3, #0]
 80108b4:	e02b      	b.n	801090e <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80108b6:	211d      	movs	r1, #29
 80108b8:	187b      	adds	r3, r7, r1
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	2240      	movs	r2, #64	@ 0x40
 80108be:	4013      	ands	r3, r2
 80108c0:	d025      	beq.n	801090e <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80108c2:	187b      	adds	r3, r7, r1
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2220      	movs	r2, #32
 80108c8:	4013      	ands	r3, r2
 80108ca:	d006      	beq.n	80108da <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80108cc:	187b      	adds	r3, r7, r1
 80108ce:	187a      	adds	r2, r7, r1
 80108d0:	7812      	ldrb	r2, [r2, #0]
 80108d2:	2108      	movs	r1, #8
 80108d4:	430a      	orrs	r2, r1
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	e006      	b.n	80108e8 <_UG_ProcessTouchData+0x190>
=======
 800f9e2:	221d      	movs	r2, #29
 800f9e4:	18bb      	adds	r3, r7, r2
 800f9e6:	18ba      	adds	r2, r7, r2
 800f9e8:	7812      	ldrb	r2, [r2, #0]
 800f9ea:	2140      	movs	r1, #64	@ 0x40
 800f9ec:	430a      	orrs	r2, r1
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	e02b      	b.n	800fa4a <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800f9f2:	211d      	movs	r1, #29
 800f9f4:	187b      	adds	r3, r7, r1
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2240      	movs	r2, #64	@ 0x40
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	d025      	beq.n	800fa4a <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800f9fe:	187b      	adds	r3, r7, r1
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2220      	movs	r2, #32
 800fa04:	4013      	ands	r3, r2
 800fa06:	d006      	beq.n	800fa16 <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800fa08:	187b      	adds	r3, r7, r1
 800fa0a:	187a      	adds	r2, r7, r1
 800fa0c:	7812      	ldrb	r2, [r2, #0]
 800fa0e:	2108      	movs	r1, #8
 800fa10:	430a      	orrs	r2, r1
 800fa12:	701a      	strb	r2, [r3, #0]
 800fa14:	e006      	b.n	800fa24 <_UG_ProcessTouchData+0x190>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
<<<<<<< HEAD
 80108da:	221d      	movs	r2, #29
 80108dc:	18bb      	adds	r3, r7, r2
 80108de:	18ba      	adds	r2, r7, r2
 80108e0:	7812      	ldrb	r2, [r2, #0]
 80108e2:	2110      	movs	r1, #16
 80108e4:	430a      	orrs	r2, r1
 80108e6:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80108e8:	211d      	movs	r1, #29
 80108ea:	187b      	adds	r3, r7, r1
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2240      	movs	r2, #64	@ 0x40
 80108f0:	4013      	ands	r3, r2
 80108f2:	d005      	beq.n	8010900 <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80108f4:	187b      	adds	r3, r7, r1
 80108f6:	187a      	adds	r2, r7, r1
 80108f8:	7812      	ldrb	r2, [r2, #0]
 80108fa:	2101      	movs	r1, #1
 80108fc:	430a      	orrs	r2, r1
 80108fe:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8010900:	221d      	movs	r2, #29
 8010902:	18bb      	adds	r3, r7, r2
 8010904:	18ba      	adds	r2, r7, r2
 8010906:	7812      	ldrb	r2, [r2, #0]
 8010908:	2146      	movs	r1, #70	@ 0x46
 801090a:	438a      	bics	r2, r1
 801090c:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	221d      	movs	r2, #29
 8010912:	18ba      	adds	r2, r7, r2
 8010914:	7812      	ldrb	r2, [r2, #0]
 8010916:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010918:	211e      	movs	r1, #30
 801091a:	187b      	adds	r3, r7, r1
 801091c:	881a      	ldrh	r2, [r3, #0]
 801091e:	187b      	adds	r3, r7, r1
 8010920:	3201      	adds	r2, #1
 8010922:	801a      	strh	r2, [r3, #0]
 8010924:	231e      	movs	r3, #30
 8010926:	18fa      	adds	r2, r7, r3
 8010928:	2314      	movs	r3, #20
 801092a:	18fb      	adds	r3, r7, r3
 801092c:	8812      	ldrh	r2, [r2, #0]
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	d200      	bcs.n	8010936 <_UG_ProcessTouchData+0x1de>
 8010934:	e730      	b.n	8010798 <_UG_ProcessTouchData+0x40>
   }
}
 8010936:	46c0      	nop			@ (mov r8, r8)
 8010938:	46c0      	nop			@ (mov r8, r8)
 801093a:	46bd      	mov	sp, r7
 801093c:	b009      	add	sp, #36	@ 0x24
 801093e:	bd90      	pop	{r4, r7, pc}
 8010940:	20000c44 	.word	0x20000c44

08010944 <_UG_UpdateObjects>:
=======
 800fa16:	221d      	movs	r2, #29
 800fa18:	18bb      	adds	r3, r7, r2
 800fa1a:	18ba      	adds	r2, r7, r2
 800fa1c:	7812      	ldrb	r2, [r2, #0]
 800fa1e:	2110      	movs	r1, #16
 800fa20:	430a      	orrs	r2, r1
 800fa22:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800fa24:	211d      	movs	r1, #29
 800fa26:	187b      	adds	r3, r7, r1
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	2240      	movs	r2, #64	@ 0x40
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	d005      	beq.n	800fa3c <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800fa30:	187b      	adds	r3, r7, r1
 800fa32:	187a      	adds	r2, r7, r1
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	2101      	movs	r1, #1
 800fa38:	430a      	orrs	r2, r1
 800fa3a:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800fa3c:	221d      	movs	r2, #29
 800fa3e:	18bb      	adds	r3, r7, r2
 800fa40:	18ba      	adds	r2, r7, r2
 800fa42:	7812      	ldrb	r2, [r2, #0]
 800fa44:	2146      	movs	r1, #70	@ 0x46
 800fa46:	438a      	bics	r2, r1
 800fa48:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	221d      	movs	r2, #29
 800fa4e:	18ba      	adds	r2, r7, r2
 800fa50:	7812      	ldrb	r2, [r2, #0]
 800fa52:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 800fa54:	211e      	movs	r1, #30
 800fa56:	187b      	adds	r3, r7, r1
 800fa58:	881a      	ldrh	r2, [r3, #0]
 800fa5a:	187b      	adds	r3, r7, r1
 800fa5c:	3201      	adds	r2, #1
 800fa5e:	801a      	strh	r2, [r3, #0]
 800fa60:	231e      	movs	r3, #30
 800fa62:	18fa      	adds	r2, r7, r3
 800fa64:	2314      	movs	r3, #20
 800fa66:	18fb      	adds	r3, r7, r3
 800fa68:	8812      	ldrh	r2, [r2, #0]
 800fa6a:	881b      	ldrh	r3, [r3, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d200      	bcs.n	800fa72 <_UG_ProcessTouchData+0x1de>
 800fa70:	e730      	b.n	800f8d4 <_UG_ProcessTouchData+0x40>
   }
}
 800fa72:	46c0      	nop			@ (mov r8, r8)
 800fa74:	46c0      	nop			@ (mov r8, r8)
 800fa76:	46bd      	mov	sp, r7
 800fa78:	b009      	add	sp, #36	@ 0x24
 800fa7a:	bd90      	pop	{r4, r7, pc}
 800fa7c:	20000b3c 	.word	0x20000b3c

0800fa80 <_UG_UpdateObjects>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
<<<<<<< HEAD
 8010944:	b580      	push	{r7, lr}
 8010946:	b086      	sub	sp, #24
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
=======
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
<<<<<<< HEAD
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	781a      	ldrb	r2, [r3, #0]
 8010950:	2314      	movs	r3, #20
 8010952:	18fb      	adds	r3, r7, r3
 8010954:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8010956:	2316      	movs	r3, #22
 8010958:	18fb      	adds	r3, r7, r3
 801095a:	2200      	movs	r2, #0
 801095c:	801a      	strh	r2, [r3, #0]
 801095e:	e043      	b.n	80109e8 <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	685a      	ldr	r2, [r3, #4]
 8010964:	2316      	movs	r3, #22
 8010966:	18fb      	adds	r3, r7, r3
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	015b      	lsls	r3, r3, #5
 801096c:	18d3      	adds	r3, r2, r3
 801096e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010970:	210f      	movs	r1, #15
 8010972:	187b      	adds	r3, r7, r1
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	7812      	ldrb	r2, [r2, #0]
 8010978:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 801097a:	230e      	movs	r3, #14
 801097c:	18fb      	adds	r3, r7, r3
 801097e:	693a      	ldr	r2, [r7, #16]
 8010980:	7852      	ldrb	r2, [r2, #1]
 8010982:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010984:	187b      	adds	r3, r7, r1
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	2201      	movs	r2, #1
 801098a:	4013      	ands	r3, r2
 801098c:	d126      	bne.n	80109dc <_UG_UpdateObjects+0x98>
 801098e:	187b      	adds	r3, r7, r1
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	2202      	movs	r2, #2
 8010994:	4013      	ands	r3, r2
 8010996:	d021      	beq.n	80109dc <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010998:	187b      	adds	r3, r7, r1
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	2220      	movs	r2, #32
 801099e:	4013      	ands	r3, r2
 80109a0:	d005      	beq.n	80109ae <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	6939      	ldr	r1, [r7, #16]
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	0010      	movs	r0, r2
 80109ac:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80109ae:	210f      	movs	r1, #15
 80109b0:	187b      	adds	r3, r7, r1
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	2208      	movs	r2, #8
 80109b6:	4013      	ands	r3, r2
 80109b8:	d010      	beq.n	80109dc <_UG_UpdateObjects+0x98>
 80109ba:	187b      	adds	r3, r7, r1
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	b25b      	sxtb	r3, r3
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	da0b      	bge.n	80109dc <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80109c4:	230e      	movs	r3, #14
 80109c6:	18fb      	adds	r3, r7, r3
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2241      	movs	r2, #65	@ 0x41
 80109cc:	4013      	ands	r3, r2
 80109ce:	d005      	beq.n	80109dc <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	6939      	ldr	r1, [r7, #16]
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	0010      	movs	r0, r2
 80109da:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80109dc:	2116      	movs	r1, #22
 80109de:	187b      	adds	r3, r7, r1
 80109e0:	881a      	ldrh	r2, [r3, #0]
 80109e2:	187b      	adds	r3, r7, r1
 80109e4:	3201      	adds	r2, #1
 80109e6:	801a      	strh	r2, [r3, #0]
 80109e8:	2316      	movs	r3, #22
 80109ea:	18fa      	adds	r2, r7, r3
 80109ec:	2314      	movs	r3, #20
 80109ee:	18fb      	adds	r3, r7, r3
 80109f0:	8812      	ldrh	r2, [r2, #0]
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d3b3      	bcc.n	8010960 <_UG_UpdateObjects+0x1c>
=======
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	781a      	ldrb	r2, [r3, #0]
 800fa8c:	2314      	movs	r3, #20
 800fa8e:	18fb      	adds	r3, r7, r3
 800fa90:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 800fa92:	2316      	movs	r3, #22
 800fa94:	18fb      	adds	r3, r7, r3
 800fa96:	2200      	movs	r2, #0
 800fa98:	801a      	strh	r2, [r3, #0]
 800fa9a:	e043      	b.n	800fb24 <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685a      	ldr	r2, [r3, #4]
 800faa0:	2316      	movs	r3, #22
 800faa2:	18fb      	adds	r3, r7, r3
 800faa4:	881b      	ldrh	r3, [r3, #0]
 800faa6:	015b      	lsls	r3, r3, #5
 800faa8:	18d3      	adds	r3, r2, r3
 800faaa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800faac:	210f      	movs	r1, #15
 800faae:	187b      	adds	r3, r7, r1
 800fab0:	693a      	ldr	r2, [r7, #16]
 800fab2:	7812      	ldrb	r2, [r2, #0]
 800fab4:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800fab6:	230e      	movs	r3, #14
 800fab8:	18fb      	adds	r3, r7, r3
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	7852      	ldrb	r2, [r2, #1]
 800fabe:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800fac0:	187b      	adds	r3, r7, r1
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2201      	movs	r2, #1
 800fac6:	4013      	ands	r3, r2
 800fac8:	d126      	bne.n	800fb18 <_UG_UpdateObjects+0x98>
 800faca:	187b      	adds	r3, r7, r1
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	2202      	movs	r2, #2
 800fad0:	4013      	ands	r3, r2
 800fad2:	d021      	beq.n	800fb18 <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 800fad4:	187b      	adds	r3, r7, r1
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	2220      	movs	r2, #32
 800fada:	4013      	ands	r3, r2
 800fadc:	d005      	beq.n	800faea <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	6939      	ldr	r1, [r7, #16]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	0010      	movs	r0, r2
 800fae8:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 800faea:	210f      	movs	r1, #15
 800faec:	187b      	adds	r3, r7, r1
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2208      	movs	r2, #8
 800faf2:	4013      	ands	r3, r2
 800faf4:	d010      	beq.n	800fb18 <_UG_UpdateObjects+0x98>
 800faf6:	187b      	adds	r3, r7, r1
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	b25b      	sxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	da0b      	bge.n	800fb18 <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 800fb00:	230e      	movs	r3, #14
 800fb02:	18fb      	adds	r3, r7, r3
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	2241      	movs	r2, #65	@ 0x41
 800fb08:	4013      	ands	r3, r2
 800fb0a:	d005      	beq.n	800fb18 <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	6939      	ldr	r1, [r7, #16]
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	0010      	movs	r0, r2
 800fb16:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800fb18:	2116      	movs	r1, #22
 800fb1a:	187b      	adds	r3, r7, r1
 800fb1c:	881a      	ldrh	r2, [r3, #0]
 800fb1e:	187b      	adds	r3, r7, r1
 800fb20:	3201      	adds	r2, #1
 800fb22:	801a      	strh	r2, [r3, #0]
 800fb24:	2316      	movs	r3, #22
 800fb26:	18fa      	adds	r2, r7, r3
 800fb28:	2314      	movs	r3, #20
 800fb2a:	18fb      	adds	r3, r7, r3
 800fb2c:	8812      	ldrh	r2, [r2, #0]
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d3b3      	bcc.n	800fa9c <_UG_UpdateObjects+0x1c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
            }
         }
         #endif
      }
   }
}
<<<<<<< HEAD
 80109f8:	46c0      	nop			@ (mov r8, r8)
 80109fa:	46c0      	nop			@ (mov r8, r8)
 80109fc:	46bd      	mov	sp, r7
 80109fe:	b006      	add	sp, #24
 8010a00:	bd80      	pop	{r7, pc}
	...

08010a04 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
=======
 800fb34:	46c0      	nop			@ (mov r8, r8)
 800fb36:	46c0      	nop			@ (mov r8, r8)
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	b006      	add	sp, #24
 800fb3c:	bd80      	pop	{r7, pc}
	...

0800fb40 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
<<<<<<< HEAD
 8010a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a0e:	2200      	movs	r2, #0
 8010a10:	605a      	str	r2, [r3, #4]
=======
 800fb48:	4b2a      	ldr	r3, [pc, #168]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	605a      	str	r2, [r3, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
<<<<<<< HEAD
 8010a12:	4b29      	ldr	r3, [pc, #164]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a14:	2202      	movs	r2, #2
 8010a16:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	781a      	ldrb	r2, [r3, #0]
 8010a1c:	2314      	movs	r3, #20
 8010a1e:	18fb      	adds	r3, r7, r3
 8010a20:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8010a22:	2316      	movs	r3, #22
 8010a24:	18fb      	adds	r3, r7, r3
 8010a26:	2200      	movs	r2, #0
 8010a28:	801a      	strh	r2, [r3, #0]
 8010a2a:	e037      	b.n	8010a9c <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	2316      	movs	r3, #22
 8010a32:	18fb      	adds	r3, r7, r3
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	015b      	lsls	r3, r3, #5
 8010a38:	18d3      	adds	r3, r2, r3
 8010a3a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010a3c:	210f      	movs	r1, #15
 8010a3e:	187b      	adds	r3, r7, r1
 8010a40:	693a      	ldr	r2, [r7, #16]
 8010a42:	7812      	ldrb	r2, [r2, #0]
 8010a44:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010a46:	187b      	adds	r3, r7, r1
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	4013      	ands	r3, r2
 8010a4e:	d11f      	bne.n	8010a90 <_UG_HandleEvents+0x8c>
 8010a50:	187b      	adds	r3, r7, r1
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2202      	movs	r2, #2
 8010a56:	4013      	ands	r3, r2
 8010a58:	d01a      	beq.n	8010a90 <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	7e9b      	ldrb	r3, [r3, #26]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d016      	beq.n	8010a90 <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 8010a62:	4b15      	ldr	r3, [pc, #84]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a64:	693a      	ldr	r2, [r7, #16]
 8010a66:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	7e1a      	ldrb	r2, [r3, #24]
 8010a6c:	4b12      	ldr	r3, [pc, #72]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a6e:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	7e5a      	ldrb	r2, [r3, #25]
 8010a74:	4b10      	ldr	r3, [pc, #64]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a76:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	7e9a      	ldrb	r2, [r3, #26]
 8010a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a7e:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a84:	4a0c      	ldr	r2, [pc, #48]	@ (8010ab8 <_UG_HandleEvents+0xb4>)
 8010a86:	0010      	movs	r0, r2
 8010a88:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010a90:	2116      	movs	r1, #22
 8010a92:	187b      	adds	r3, r7, r1
 8010a94:	881a      	ldrh	r2, [r3, #0]
 8010a96:	187b      	adds	r3, r7, r1
 8010a98:	3201      	adds	r2, #1
 8010a9a:	801a      	strh	r2, [r3, #0]
 8010a9c:	2316      	movs	r3, #22
 8010a9e:	18fa      	adds	r2, r7, r3
 8010aa0:	2314      	movs	r3, #20
 8010aa2:	18fb      	adds	r3, r7, r3
 8010aa4:	8812      	ldrh	r2, [r2, #0]
 8010aa6:	881b      	ldrh	r3, [r3, #0]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d3bf      	bcc.n	8010a2c <_UG_HandleEvents+0x28>
=======
 800fb4e:	4b29      	ldr	r3, [pc, #164]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fb50:	2202      	movs	r2, #2
 800fb52:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	781a      	ldrb	r2, [r3, #0]
 800fb58:	2314      	movs	r3, #20
 800fb5a:	18fb      	adds	r3, r7, r3
 800fb5c:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 800fb5e:	2316      	movs	r3, #22
 800fb60:	18fb      	adds	r3, r7, r3
 800fb62:	2200      	movs	r2, #0
 800fb64:	801a      	strh	r2, [r3, #0]
 800fb66:	e037      	b.n	800fbd8 <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	2316      	movs	r3, #22
 800fb6e:	18fb      	adds	r3, r7, r3
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	015b      	lsls	r3, r3, #5
 800fb74:	18d3      	adds	r3, r2, r3
 800fb76:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800fb78:	210f      	movs	r1, #15
 800fb7a:	187b      	adds	r3, r7, r1
 800fb7c:	693a      	ldr	r2, [r7, #16]
 800fb7e:	7812      	ldrb	r2, [r2, #0]
 800fb80:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800fb82:	187b      	adds	r3, r7, r1
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	2201      	movs	r2, #1
 800fb88:	4013      	ands	r3, r2
 800fb8a:	d11f      	bne.n	800fbcc <_UG_HandleEvents+0x8c>
 800fb8c:	187b      	adds	r3, r7, r1
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2202      	movs	r2, #2
 800fb92:	4013      	ands	r3, r2
 800fb94:	d01a      	beq.n	800fbcc <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	7e9b      	ldrb	r3, [r3, #26]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d016      	beq.n	800fbcc <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 800fb9e:	4b15      	ldr	r3, [pc, #84]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fba0:	693a      	ldr	r2, [r7, #16]
 800fba2:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	7e1a      	ldrb	r2, [r3, #24]
 800fba8:	4b12      	ldr	r3, [pc, #72]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fbaa:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	7e5a      	ldrb	r2, [r3, #25]
 800fbb0:	4b10      	ldr	r3, [pc, #64]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fbb2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	7e9a      	ldrb	r2, [r3, #26]
 800fbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fbba:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbc0:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf4 <_UG_HandleEvents+0xb4>)
 800fbc2:	0010      	movs	r0, r2
 800fbc4:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800fbcc:	2116      	movs	r1, #22
 800fbce:	187b      	adds	r3, r7, r1
 800fbd0:	881a      	ldrh	r2, [r3, #0]
 800fbd2:	187b      	adds	r3, r7, r1
 800fbd4:	3201      	adds	r2, #1
 800fbd6:	801a      	strh	r2, [r3, #0]
 800fbd8:	2316      	movs	r3, #22
 800fbda:	18fa      	adds	r2, r7, r3
 800fbdc:	2314      	movs	r3, #20
 800fbde:	18fb      	adds	r3, r7, r3
 800fbe0:	8812      	ldrh	r2, [r2, #0]
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d3bf      	bcc.n	800fb68 <_UG_HandleEvents+0x28>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
      }
   }
}
<<<<<<< HEAD
 8010aac:	46c0      	nop			@ (mov r8, r8)
 8010aae:	46c0      	nop			@ (mov r8, r8)
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	b006      	add	sp, #24
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	46c0      	nop			@ (mov r8, r8)
 8010ab8:	20000c58 	.word	0x20000c58

08010abc <_UG_PutText>:
=======
 800fbe8:	46c0      	nop			@ (mov r8, r8)
 800fbea:	46c0      	nop			@ (mov r8, r8)
 800fbec:	46bd      	mov	sp, r7
 800fbee:	b006      	add	sp, #24
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	46c0      	nop			@ (mov r8, r8)
 800fbf4:	20000b50 	.word	0x20000b50

0800fbf8 <_UG_PutText>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
<<<<<<< HEAD
 8010abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010abe:	b08f      	sub	sp, #60	@ 0x3c
 8010ac0:	af02      	add	r7, sp, #8
 8010ac2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d100      	bne.n	8010ace <_UG_PutText+0x12>
 8010acc:	e1b6      	b.n	8010e3c <_UG_PutText+0x380>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d100      	bne.n	8010ad8 <_UG_PutText+0x1c>
 8010ad6:	e1b1      	b.n	8010e3c <_UG_PutText+0x380>
=======
 800fbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbfa:	b08f      	sub	sp, #60	@ 0x3c
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d100      	bne.n	800fc0a <_UG_PutText+0x12>
 800fc08:	e1b6      	b.n	800ff78 <_UG_PutText+0x380>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d100      	bne.n	800fc14 <_UG_PutText+0x1c>
 800fc12:	e1b1      	b.n	800ff78 <_UG_PutText+0x380>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
     return;
   }

   UG_S16 ye=txt->a.ye;
<<<<<<< HEAD
 8010ad8:	2122      	movs	r1, #34	@ 0x22
 8010ada:	187b      	adds	r3, r7, r1
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	89d2      	ldrh	r2, [r2, #14]
 8010ae0:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 8010ae2:	2020      	movs	r0, #32
 8010ae4:	183b      	adds	r3, r7, r0
 8010ae6:	687a      	ldr	r2, [r7, #4]
 8010ae8:	8952      	ldrh	r2, [r2, #10]
 8010aea:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	3302      	adds	r3, #2
 8010af2:	781a      	ldrb	r2, [r3, #0]
 8010af4:	241e      	movs	r4, #30
 8010af6:	193b      	adds	r3, r7, r4
 8010af8:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 8010afa:	187b      	adds	r3, r7, r1
 8010afc:	2200      	movs	r2, #0
 8010afe:	5e9a      	ldrsh	r2, [r3, r2]
 8010b00:	183b      	adds	r3, r7, r0
 8010b02:	2100      	movs	r1, #0
 8010b04:	5e5b      	ldrsh	r3, [r3, r1]
 8010b06:	1ad2      	subs	r2, r2, r3
 8010b08:	193b      	adds	r3, r7, r4
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	5e5b      	ldrsh	r3, [r3, r1]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	da00      	bge.n	8010b14 <_UG_PutText+0x58>
 8010b12:	e195      	b.n	8010e40 <_UG_PutText+0x384>
=======
 800fc14:	2122      	movs	r1, #34	@ 0x22
 800fc16:	187b      	adds	r3, r7, r1
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	89d2      	ldrh	r2, [r2, #14]
 800fc1c:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 800fc1e:	2020      	movs	r0, #32
 800fc20:	183b      	adds	r3, r7, r0
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	8952      	ldrh	r2, [r2, #10]
 800fc26:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	3302      	adds	r3, #2
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	241e      	movs	r4, #30
 800fc32:	193b      	adds	r3, r7, r4
 800fc34:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 800fc36:	187b      	adds	r3, r7, r1
 800fc38:	2200      	movs	r2, #0
 800fc3a:	5e9a      	ldrsh	r2, [r3, r2]
 800fc3c:	183b      	adds	r3, r7, r0
 800fc3e:	2100      	movs	r1, #0
 800fc40:	5e5b      	ldrsh	r3, [r3, r1]
 800fc42:	1ad2      	subs	r2, r2, r3
 800fc44:	193b      	adds	r3, r7, r4
 800fc46:	2100      	movs	r1, #0
 800fc48:	5e5b      	ldrsh	r3, [r3, r1]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	da00      	bge.n	800fc50 <_UG_PutText+0x58>
 800fc4e:	e195      	b.n	800ff7c <_UG_PutText+0x384>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
<<<<<<< HEAD
 8010b14:	231c      	movs	r3, #28
 8010b16:	18fb      	adds	r3, r7, r3
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	8912      	ldrh	r2, [r2, #8]
 8010b1c:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 8010b1e:	231a      	movs	r3, #26
 8010b20:	18fb      	adds	r3, r7, r3
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	8992      	ldrh	r2, [r2, #12]
 8010b26:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 8010b28:	2319      	movs	r3, #25
 8010b2a:	18fb      	adds	r3, r7, r3
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	7d12      	ldrb	r2, [r2, #20]
 8010b30:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 8010b32:	2316      	movs	r3, #22
 8010b34:	18fb      	adds	r3, r7, r3
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	8ad2      	ldrh	r2, [r2, #22]
 8010b3a:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 8010b3c:	2314      	movs	r3, #20
 8010b3e:	18fb      	adds	r3, r7, r3
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	8b12      	ldrh	r2, [r2, #24]
 8010b44:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	0018      	movs	r0, r3
 8010b56:	f7ff f9db 	bl	800ff10 <_UG_FontSelect>

   rc=1;
 8010b5a:	232c      	movs	r3, #44	@ 0x2c
 8010b5c:	18fb      	adds	r3, r7, r3
 8010b5e:	2201      	movs	r2, #1
 8010b60:	801a      	strh	r2, [r3, #0]
   c=str;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	60bb      	str	r3, [r7, #8]
=======
 800fc50:	231c      	movs	r3, #28
 800fc52:	18fb      	adds	r3, r7, r3
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	8912      	ldrh	r2, [r2, #8]
 800fc58:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 800fc5a:	231a      	movs	r3, #26
 800fc5c:	18fb      	adds	r3, r7, r3
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	8992      	ldrh	r2, [r2, #12]
 800fc62:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 800fc64:	2319      	movs	r3, #25
 800fc66:	18fb      	adds	r3, r7, r3
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	7d12      	ldrb	r2, [r2, #20]
 800fc6c:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 800fc6e:	2316      	movs	r3, #22
 800fc70:	18fb      	adds	r3, r7, r3
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	8ad2      	ldrh	r2, [r2, #22]
 800fc76:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 800fc78:	2314      	movs	r3, #20
 800fc7a:	18fb      	adds	r3, r7, r3
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	8b12      	ldrh	r2, [r2, #24]
 800fc80:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	60fb      	str	r3, [r7, #12]
   char* c = str;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	0018      	movs	r0, r3
 800fc92:	f7ff f9db 	bl	800f04c <_UG_FontSelect>

   rc=1;
 800fc96:	232c      	movs	r3, #44	@ 0x2c
 800fc98:	18fb      	adds	r3, r7, r3
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	801a      	strh	r2, [r3, #0]
   c=str;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	60bb      	str	r3, [r7, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
<<<<<<< HEAD
 8010b66:	4bbb      	ldr	r3, [pc, #748]	@ (8010e54 <_UG_PutText+0x398>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	222d      	movs	r2, #45	@ 0x2d
 8010b6c:	5c9b      	ldrb	r3, [r3, r2]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d109      	bne.n	8010b86 <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 8010b72:	2324      	movs	r3, #36	@ 0x24
 8010b74:	18fc      	adds	r4, r7, r3
 8010b76:	2308      	movs	r3, #8
 8010b78:	18fb      	adds	r3, r7, r3
 8010b7a:	0018      	movs	r0, r3
 8010b7c:	f7fe ffee 	bl	800fb5c <_UG_DecodeUTF8>
 8010b80:	0003      	movs	r3, r0
 8010b82:	8023      	strh	r3, [r4, #0]
 8010b84:	e006      	b.n	8010b94 <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	60ba      	str	r2, [r7, #8]
 8010b8c:	781a      	ldrb	r2, [r3, #0]
 8010b8e:	2324      	movs	r3, #36	@ 0x24
 8010b90:	18fb      	adds	r3, r7, r3
 8010b92:	801a      	strh	r2, [r3, #0]
=======
 800fca2:	4bbb      	ldr	r3, [pc, #748]	@ (800ff90 <_UG_PutText+0x398>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	222d      	movs	r2, #45	@ 0x2d
 800fca8:	5c9b      	ldrb	r3, [r3, r2]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d109      	bne.n	800fcc2 <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 800fcae:	2324      	movs	r3, #36	@ 0x24
 800fcb0:	18fc      	adds	r4, r7, r3
 800fcb2:	2308      	movs	r3, #8
 800fcb4:	18fb      	adds	r3, r7, r3
 800fcb6:	0018      	movs	r0, r3
 800fcb8:	f7fe ffee 	bl	800ec98 <_UG_DecodeUTF8>
 800fcbc:	0003      	movs	r3, r0
 800fcbe:	8023      	strh	r3, [r4, #0]
 800fcc0:	e006      	b.n	800fcd0 <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	1c5a      	adds	r2, r3, #1
 800fcc6:	60ba      	str	r2, [r7, #8]
 800fcc8:	781a      	ldrb	r2, [r3, #0]
 800fcca:	2324      	movs	r3, #36	@ 0x24
 800fccc:	18fb      	adds	r3, r7, r3
 800fcce:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
<<<<<<< HEAD
 8010b94:	2224      	movs	r2, #36	@ 0x24
 8010b96:	18bb      	adds	r3, r7, r2
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00a      	beq.n	8010bb4 <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 8010b9e:	18bb      	adds	r3, r7, r2
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	2b0a      	cmp	r3, #10
 8010ba4:	d1df      	bne.n	8010b66 <_UG_PutText+0xaa>
 8010ba6:	212c      	movs	r1, #44	@ 0x2c
 8010ba8:	187b      	adds	r3, r7, r1
 8010baa:	881a      	ldrh	r2, [r3, #0]
 8010bac:	187b      	adds	r3, r7, r1
 8010bae:	3201      	adds	r2, #1
 8010bb0:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010bb2:	e7d8      	b.n	8010b66 <_UG_PutText+0xaa>
     if(!chr) break;
 8010bb4:	46c0      	nop			@ (mov r8, r8)
   }

   yp = 0;
 8010bb6:	2126      	movs	r1, #38	@ 0x26
 8010bb8:	187b      	adds	r3, r7, r1
 8010bba:	2200      	movs	r2, #0
 8010bbc:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010bbe:	2319      	movs	r3, #25
 8010bc0:	18fb      	adds	r3, r7, r3
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2230      	movs	r2, #48	@ 0x30
 8010bc6:	4013      	ands	r3, r2
 8010bc8:	d02f      	beq.n	8010c2a <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 8010bca:	2322      	movs	r3, #34	@ 0x22
 8010bcc:	18fb      	adds	r3, r7, r3
 8010bce:	881a      	ldrh	r2, [r3, #0]
 8010bd0:	2320      	movs	r3, #32
 8010bd2:	18fb      	adds	r3, r7, r3
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	3301      	adds	r3, #1
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	0008      	movs	r0, r1
 8010be0:	183b      	adds	r3, r7, r0
 8010be2:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 8010be4:	183b      	adds	r3, r7, r0
 8010be6:	881a      	ldrh	r2, [r3, #0]
 8010be8:	231e      	movs	r3, #30
 8010bea:	18fb      	adds	r3, r7, r3
 8010bec:	881b      	ldrh	r3, [r3, #0]
 8010bee:	242c      	movs	r4, #44	@ 0x2c
 8010bf0:	1939      	adds	r1, r7, r4
 8010bf2:	8809      	ldrh	r1, [r1, #0]
 8010bf4:	434b      	muls	r3, r1
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	1ad3      	subs	r3, r2, r3
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	183b      	adds	r3, r7, r0
 8010bfe:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 8010c00:	183b      	adds	r3, r7, r0
 8010c02:	881a      	ldrh	r2, [r3, #0]
 8010c04:	193b      	adds	r3, r7, r4
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	2114      	movs	r1, #20
 8010c0e:	1879      	adds	r1, r7, r1
 8010c10:	8809      	ldrh	r1, [r1, #0]
 8010c12:	434b      	muls	r3, r1
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	183b      	adds	r3, r7, r0
 8010c1c:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 8010c1e:	183b      	adds	r3, r7, r0
 8010c20:	2200      	movs	r2, #0
 8010c22:	5e9b      	ldrsh	r3, [r3, r2]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	da00      	bge.n	8010c2a <_UG_PutText+0x16e>
 8010c28:	e10c      	b.n	8010e44 <_UG_PutText+0x388>
=======
 800fcd0:	2224      	movs	r2, #36	@ 0x24
 800fcd2:	18bb      	adds	r3, r7, r2
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00a      	beq.n	800fcf0 <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 800fcda:	18bb      	adds	r3, r7, r2
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	2b0a      	cmp	r3, #10
 800fce0:	d1df      	bne.n	800fca2 <_UG_PutText+0xaa>
 800fce2:	212c      	movs	r1, #44	@ 0x2c
 800fce4:	187b      	adds	r3, r7, r1
 800fce6:	881a      	ldrh	r2, [r3, #0]
 800fce8:	187b      	adds	r3, r7, r1
 800fcea:	3201      	adds	r2, #1
 800fcec:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800fcee:	e7d8      	b.n	800fca2 <_UG_PutText+0xaa>
     if(!chr) break;
 800fcf0:	46c0      	nop			@ (mov r8, r8)
   }

   yp = 0;
 800fcf2:	2126      	movs	r1, #38	@ 0x26
 800fcf4:	187b      	adds	r3, r7, r1
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800fcfa:	2319      	movs	r3, #25
 800fcfc:	18fb      	adds	r3, r7, r3
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2230      	movs	r2, #48	@ 0x30
 800fd02:	4013      	ands	r3, r2
 800fd04:	d02f      	beq.n	800fd66 <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 800fd06:	2322      	movs	r3, #34	@ 0x22
 800fd08:	18fb      	adds	r3, r7, r3
 800fd0a:	881a      	ldrh	r2, [r3, #0]
 800fd0c:	2320      	movs	r3, #32
 800fd0e:	18fb      	adds	r3, r7, r3
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	3301      	adds	r3, #1
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	0008      	movs	r0, r1
 800fd1c:	183b      	adds	r3, r7, r0
 800fd1e:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 800fd20:	183b      	adds	r3, r7, r0
 800fd22:	881a      	ldrh	r2, [r3, #0]
 800fd24:	231e      	movs	r3, #30
 800fd26:	18fb      	adds	r3, r7, r3
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	242c      	movs	r4, #44	@ 0x2c
 800fd2c:	1939      	adds	r1, r7, r4
 800fd2e:	8809      	ldrh	r1, [r1, #0]
 800fd30:	434b      	muls	r3, r1
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	183b      	adds	r3, r7, r0
 800fd3a:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 800fd3c:	183b      	adds	r3, r7, r0
 800fd3e:	881a      	ldrh	r2, [r3, #0]
 800fd40:	193b      	adds	r3, r7, r4
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	3b01      	subs	r3, #1
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	2114      	movs	r1, #20
 800fd4a:	1879      	adds	r1, r7, r1
 800fd4c:	8809      	ldrh	r1, [r1, #0]
 800fd4e:	434b      	muls	r3, r1
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	183b      	adds	r3, r7, r0
 800fd58:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 800fd5a:	183b      	adds	r3, r7, r0
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	5e9b      	ldrsh	r3, [r3, r2]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	da00      	bge.n	800fd66 <_UG_PutText+0x16e>
 800fd64:	e10c      	b.n	800ff80 <_UG_PutText+0x388>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
<<<<<<< HEAD
 8010c2a:	2319      	movs	r3, #25
 8010c2c:	18fb      	adds	r3, r7, r3
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2210      	movs	r2, #16
 8010c32:	4013      	ands	r3, r2
 8010c34:	d006      	beq.n	8010c44 <_UG_PutText+0x188>
 8010c36:	2226      	movs	r2, #38	@ 0x26
 8010c38:	18bb      	adds	r3, r7, r2
 8010c3a:	18ba      	adds	r2, r7, r2
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	5e52      	ldrsh	r2, [r2, r1]
 8010c40:	1052      	asrs	r2, r2, #1
 8010c42:	801a      	strh	r2, [r3, #0]
   yp += ys;
 8010c44:	2126      	movs	r1, #38	@ 0x26
 8010c46:	187b      	adds	r3, r7, r1
 8010c48:	881a      	ldrh	r2, [r3, #0]
 8010c4a:	2320      	movs	r3, #32
 8010c4c:	18fb      	adds	r3, r7, r3
 8010c4e:	881b      	ldrh	r3, [r3, #0]
 8010c50:	18d3      	adds	r3, r2, r3
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	187b      	adds	r3, r7, r1
 8010c56:	801a      	strh	r2, [r3, #0]
=======
 800fd66:	2319      	movs	r3, #25
 800fd68:	18fb      	adds	r3, r7, r3
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2210      	movs	r2, #16
 800fd6e:	4013      	ands	r3, r2
 800fd70:	d006      	beq.n	800fd80 <_UG_PutText+0x188>
 800fd72:	2226      	movs	r2, #38	@ 0x26
 800fd74:	18bb      	adds	r3, r7, r2
 800fd76:	18ba      	adds	r2, r7, r2
 800fd78:	2100      	movs	r1, #0
 800fd7a:	5e52      	ldrsh	r2, [r2, r1]
 800fd7c:	1052      	asrs	r2, r2, #1
 800fd7e:	801a      	strh	r2, [r3, #0]
   yp += ys;
 800fd80:	2126      	movs	r1, #38	@ 0x26
 800fd82:	187b      	adds	r3, r7, r1
 800fd84:	881a      	ldrh	r2, [r3, #0]
 800fd86:	2320      	movs	r3, #32
 800fd88:	18fb      	adds	r3, r7, r3
 800fd8a:	881b      	ldrh	r3, [r3, #0]
 800fd8c:	18d3      	adds	r3, r2, r3
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	187b      	adds	r3, r7, r1
 800fd92:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

   while( 1 )
   {
      sl=0;
<<<<<<< HEAD
 8010c58:	232e      	movs	r3, #46	@ 0x2e
 8010c5a:	18fb      	adds	r3, r7, r3
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	801a      	strh	r2, [r3, #0]
      c=str;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010c64:	232a      	movs	r3, #42	@ 0x2a
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	2200      	movs	r2, #0
 8010c6a:	801a      	strh	r2, [r3, #0]
=======
 800fd94:	232e      	movs	r3, #46	@ 0x2e
 800fd96:	18fb      	adds	r3, r7, r3
 800fd98:	2200      	movs	r2, #0
 800fd9a:	801a      	strh	r2, [r3, #0]
      c=str;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	60bb      	str	r3, [r7, #8]
      wl = 0;
 800fda0:	232a      	movs	r3, #42	@ 0x2a
 800fda2:	18fb      	adds	r3, r7, r3
 800fda4:	2200      	movs	r2, #0
 800fda6:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
<<<<<<< HEAD
 8010c6c:	4b79      	ldr	r3, [pc, #484]	@ (8010e54 <_UG_PutText+0x398>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	222d      	movs	r2, #45	@ 0x2d
 8010c72:	5c9b      	ldrb	r3, [r3, r2]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d109      	bne.n	8010c8c <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 8010c78:	2324      	movs	r3, #36	@ 0x24
 8010c7a:	18fc      	adds	r4, r7, r3
 8010c7c:	2308      	movs	r3, #8
 8010c7e:	18fb      	adds	r3, r7, r3
 8010c80:	0018      	movs	r0, r3
 8010c82:	f7fe ff6b 	bl	800fb5c <_UG_DecodeUTF8>
 8010c86:	0003      	movs	r3, r0
 8010c88:	8023      	strh	r3, [r4, #0]
 8010c8a:	e006      	b.n	8010c9a <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	60ba      	str	r2, [r7, #8]
 8010c92:	781a      	ldrb	r2, [r3, #0]
 8010c94:	2324      	movs	r3, #36	@ 0x24
 8010c96:	18fb      	adds	r3, r7, r3
 8010c98:	801a      	strh	r2, [r3, #0]
=======
 800fda8:	4b79      	ldr	r3, [pc, #484]	@ (800ff90 <_UG_PutText+0x398>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	222d      	movs	r2, #45	@ 0x2d
 800fdae:	5c9b      	ldrb	r3, [r3, r2]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d109      	bne.n	800fdc8 <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 800fdb4:	2324      	movs	r3, #36	@ 0x24
 800fdb6:	18fc      	adds	r4, r7, r3
 800fdb8:	2308      	movs	r3, #8
 800fdba:	18fb      	adds	r3, r7, r3
 800fdbc:	0018      	movs	r0, r3
 800fdbe:	f7fe ff6b 	bl	800ec98 <_UG_DecodeUTF8>
 800fdc2:	0003      	movs	r3, r0
 800fdc4:	8023      	strh	r3, [r4, #0]
 800fdc6:	e006      	b.n	800fdd6 <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	1c5a      	adds	r2, r3, #1
 800fdcc:	60ba      	str	r2, [r7, #8]
 800fdce:	781a      	ldrb	r2, [r3, #0]
 800fdd0:	2324      	movs	r3, #36	@ 0x24
 800fdd2:	18fb      	adds	r3, r7, r3
 800fdd4:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
<<<<<<< HEAD
 8010c9a:	2224      	movs	r2, #36	@ 0x24
 8010c9c:	18bb      	adds	r3, r7, r2
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d029      	beq.n	8010cf8 <_UG_PutText+0x23c>
 8010ca4:	18bb      	adds	r3, r7, r2
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	2b0a      	cmp	r3, #10
 8010caa:	d025      	beq.n	8010cf8 <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010cac:	2512      	movs	r5, #18
 8010cae:	197c      	adds	r4, r7, r5
 8010cb0:	18bb      	adds	r3, r7, r2
 8010cb2:	881b      	ldrh	r3, [r3, #0]
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	0018      	movs	r0, r3
 8010cb8:	f7fe fffe 	bl	800fcb8 <_UG_GetCharData>
 8010cbc:	0003      	movs	r3, r0
 8010cbe:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 8010cc0:	0029      	movs	r1, r5
 8010cc2:	187b      	adds	r3, r7, r1
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	5e9b      	ldrsh	r3, [r3, r2]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	d013      	beq.n	8010cf4 <_UG_PutText+0x238>
         sl++;
 8010ccc:	202e      	movs	r0, #46	@ 0x2e
 8010cce:	183b      	adds	r3, r7, r0
 8010cd0:	881a      	ldrh	r2, [r3, #0]
 8010cd2:	183b      	adds	r3, r7, r0
 8010cd4:	3201      	adds	r2, #1
 8010cd6:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 8010cd8:	187b      	adds	r3, r7, r1
 8010cda:	881a      	ldrh	r2, [r3, #0]
 8010cdc:	2316      	movs	r3, #22
 8010cde:	18fb      	adds	r3, r7, r3
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	18d3      	adds	r3, r2, r3
 8010ce4:	b299      	uxth	r1, r3
 8010ce6:	222a      	movs	r2, #42	@ 0x2a
 8010ce8:	18bb      	adds	r3, r7, r2
 8010cea:	18ba      	adds	r2, r7, r2
 8010cec:	8812      	ldrh	r2, [r2, #0]
 8010cee:	188a      	adds	r2, r1, r2
 8010cf0:	801a      	strh	r2, [r3, #0]
 8010cf2:	e7bb      	b.n	8010c6c <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 8010cf4:	46c0      	nop			@ (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010cf6:	e7b9      	b.n	8010c6c <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 8010cf8:	2316      	movs	r3, #22
 8010cfa:	18fb      	adds	r3, r7, r3
 8010cfc:	881a      	ldrh	r2, [r3, #0]
 8010cfe:	202a      	movs	r0, #42	@ 0x2a
 8010d00:	183b      	adds	r3, r7, r0
 8010d02:	1839      	adds	r1, r7, r0
 8010d04:	8809      	ldrh	r1, [r1, #0]
 8010d06:	1a8a      	subs	r2, r1, r2
 8010d08:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 8010d0a:	231a      	movs	r3, #26
 8010d0c:	18fb      	adds	r3, r7, r3
 8010d0e:	881a      	ldrh	r2, [r3, #0]
 8010d10:	231c      	movs	r3, #28
 8010d12:	18fb      	adds	r3, r7, r3
 8010d14:	881b      	ldrh	r3, [r3, #0]
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	b29a      	uxth	r2, r3
 8010d1e:	2128      	movs	r1, #40	@ 0x28
 8010d20:	187b      	adds	r3, r7, r1
 8010d22:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 8010d24:	187b      	adds	r3, r7, r1
 8010d26:	881a      	ldrh	r2, [r3, #0]
 8010d28:	183b      	adds	r3, r7, r0
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	187b      	adds	r3, r7, r1
 8010d32:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 8010d34:	187b      	adds	r3, r7, r1
 8010d36:	2200      	movs	r2, #0
 8010d38:	5e9b      	ldrsh	r3, [r3, r2]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	da00      	bge.n	8010d40 <_UG_PutText+0x284>
 8010d3e:	e083      	b.n	8010e48 <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010d40:	2319      	movs	r3, #25
 8010d42:	18fb      	adds	r3, r7, r3
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2201      	movs	r2, #1
 8010d48:	4013      	ands	r3, r2
 8010d4a:	d003      	beq.n	8010d54 <_UG_PutText+0x298>
 8010d4c:	187b      	adds	r3, r7, r1
 8010d4e:	2200      	movs	r2, #0
 8010d50:	801a      	strh	r2, [r3, #0]
 8010d52:	e00c      	b.n	8010d6e <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010d54:	2319      	movs	r3, #25
 8010d56:	18fb      	adds	r3, r7, r3
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2202      	movs	r2, #2
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	d006      	beq.n	8010d6e <_UG_PutText+0x2b2>
 8010d60:	2228      	movs	r2, #40	@ 0x28
 8010d62:	18bb      	adds	r3, r7, r2
 8010d64:	18ba      	adds	r2, r7, r2
 8010d66:	2100      	movs	r1, #0
 8010d68:	5e52      	ldrsh	r2, [r2, r1]
 8010d6a:	1052      	asrs	r2, r2, #1
 8010d6c:	801a      	strh	r2, [r3, #0]
      xp += xs;
 8010d6e:	2128      	movs	r1, #40	@ 0x28
 8010d70:	187b      	adds	r3, r7, r1
 8010d72:	881a      	ldrh	r2, [r3, #0]
 8010d74:	231c      	movs	r3, #28
 8010d76:	18fb      	adds	r3, r7, r3
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	18d3      	adds	r3, r2, r3
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	187b      	adds	r3, r7, r1
 8010d80:	801a      	strh	r2, [r3, #0]
=======
 800fdd6:	2224      	movs	r2, #36	@ 0x24
 800fdd8:	18bb      	adds	r3, r7, r2
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d029      	beq.n	800fe34 <_UG_PutText+0x23c>
 800fde0:	18bb      	adds	r3, r7, r2
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	2b0a      	cmp	r3, #10
 800fde6:	d025      	beq.n	800fe34 <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 800fde8:	2512      	movs	r5, #18
 800fdea:	197c      	adds	r4, r7, r5
 800fdec:	18bb      	adds	r3, r7, r2
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	f7fe fffe 	bl	800edf4 <_UG_GetCharData>
 800fdf8:	0003      	movs	r3, r0
 800fdfa:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 800fdfc:	0029      	movs	r1, r5
 800fdfe:	187b      	adds	r3, r7, r1
 800fe00:	2200      	movs	r2, #0
 800fe02:	5e9b      	ldrsh	r3, [r3, r2]
 800fe04:	3301      	adds	r3, #1
 800fe06:	d013      	beq.n	800fe30 <_UG_PutText+0x238>
         sl++;
 800fe08:	202e      	movs	r0, #46	@ 0x2e
 800fe0a:	183b      	adds	r3, r7, r0
 800fe0c:	881a      	ldrh	r2, [r3, #0]
 800fe0e:	183b      	adds	r3, r7, r0
 800fe10:	3201      	adds	r2, #1
 800fe12:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 800fe14:	187b      	adds	r3, r7, r1
 800fe16:	881a      	ldrh	r2, [r3, #0]
 800fe18:	2316      	movs	r3, #22
 800fe1a:	18fb      	adds	r3, r7, r3
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	18d3      	adds	r3, r2, r3
 800fe20:	b299      	uxth	r1, r3
 800fe22:	222a      	movs	r2, #42	@ 0x2a
 800fe24:	18bb      	adds	r3, r7, r2
 800fe26:	18ba      	adds	r2, r7, r2
 800fe28:	8812      	ldrh	r2, [r2, #0]
 800fe2a:	188a      	adds	r2, r1, r2
 800fe2c:	801a      	strh	r2, [r3, #0]
 800fe2e:	e7bb      	b.n	800fda8 <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 800fe30:	46c0      	nop			@ (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800fe32:	e7b9      	b.n	800fda8 <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 800fe34:	2316      	movs	r3, #22
 800fe36:	18fb      	adds	r3, r7, r3
 800fe38:	881a      	ldrh	r2, [r3, #0]
 800fe3a:	202a      	movs	r0, #42	@ 0x2a
 800fe3c:	183b      	adds	r3, r7, r0
 800fe3e:	1839      	adds	r1, r7, r0
 800fe40:	8809      	ldrh	r1, [r1, #0]
 800fe42:	1a8a      	subs	r2, r1, r2
 800fe44:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 800fe46:	231a      	movs	r3, #26
 800fe48:	18fb      	adds	r3, r7, r3
 800fe4a:	881a      	ldrh	r2, [r3, #0]
 800fe4c:	231c      	movs	r3, #28
 800fe4e:	18fb      	adds	r3, r7, r3
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	3301      	adds	r3, #1
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	2128      	movs	r1, #40	@ 0x28
 800fe5c:	187b      	adds	r3, r7, r1
 800fe5e:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 800fe60:	187b      	adds	r3, r7, r1
 800fe62:	881a      	ldrh	r2, [r3, #0]
 800fe64:	183b      	adds	r3, r7, r0
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	187b      	adds	r3, r7, r1
 800fe6e:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 800fe70:	187b      	adds	r3, r7, r1
 800fe72:	2200      	movs	r2, #0
 800fe74:	5e9b      	ldrsh	r3, [r3, r2]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	da00      	bge.n	800fe7c <_UG_PutText+0x284>
 800fe7a:	e083      	b.n	800ff84 <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800fe7c:	2319      	movs	r3, #25
 800fe7e:	18fb      	adds	r3, r7, r3
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	2201      	movs	r2, #1
 800fe84:	4013      	ands	r3, r2
 800fe86:	d003      	beq.n	800fe90 <_UG_PutText+0x298>
 800fe88:	187b      	adds	r3, r7, r1
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	801a      	strh	r2, [r3, #0]
 800fe8e:	e00c      	b.n	800feaa <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800fe90:	2319      	movs	r3, #25
 800fe92:	18fb      	adds	r3, r7, r3
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	2202      	movs	r2, #2
 800fe98:	4013      	ands	r3, r2
 800fe9a:	d006      	beq.n	800feaa <_UG_PutText+0x2b2>
 800fe9c:	2228      	movs	r2, #40	@ 0x28
 800fe9e:	18bb      	adds	r3, r7, r2
 800fea0:	18ba      	adds	r2, r7, r2
 800fea2:	2100      	movs	r1, #0
 800fea4:	5e52      	ldrsh	r2, [r2, r1]
 800fea6:	1052      	asrs	r2, r2, #1
 800fea8:	801a      	strh	r2, [r3, #0]
      xp += xs;
 800feaa:	2128      	movs	r1, #40	@ 0x28
 800feac:	187b      	adds	r3, r7, r1
 800feae:	881a      	ldrh	r2, [r3, #0]
 800feb0:	231c      	movs	r3, #28
 800feb2:	18fb      	adds	r3, r7, r3
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	18d3      	adds	r3, r2, r3
 800feb8:	b29a      	uxth	r2, r3
 800feba:	187b      	adds	r3, r7, r1
 800febc:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
<<<<<<< HEAD
 8010d82:	4b34      	ldr	r3, [pc, #208]	@ (8010e54 <_UG_PutText+0x398>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	222d      	movs	r2, #45	@ 0x2d
 8010d88:	5c9b      	ldrb	r3, [r3, r2]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d109      	bne.n	8010da2 <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 8010d8e:	2324      	movs	r3, #36	@ 0x24
 8010d90:	18fc      	adds	r4, r7, r3
 8010d92:	230c      	movs	r3, #12
 8010d94:	18fb      	adds	r3, r7, r3
 8010d96:	0018      	movs	r0, r3
 8010d98:	f7fe fee0 	bl	800fb5c <_UG_DecodeUTF8>
 8010d9c:	0003      	movs	r3, r0
 8010d9e:	8023      	strh	r3, [r4, #0]
 8010da0:	e006      	b.n	8010db0 <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	1c5a      	adds	r2, r3, #1
 8010da6:	60fa      	str	r2, [r7, #12]
 8010da8:	781a      	ldrb	r2, [r3, #0]
 8010daa:	2324      	movs	r3, #36	@ 0x24
 8010dac:	18fb      	adds	r3, r7, r3
 8010dae:	801a      	strh	r2, [r3, #0]
=======
 800febe:	4b34      	ldr	r3, [pc, #208]	@ (800ff90 <_UG_PutText+0x398>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	222d      	movs	r2, #45	@ 0x2d
 800fec4:	5c9b      	ldrb	r3, [r3, r2]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d109      	bne.n	800fede <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 800feca:	2324      	movs	r3, #36	@ 0x24
 800fecc:	18fc      	adds	r4, r7, r3
 800fece:	230c      	movs	r3, #12
 800fed0:	18fb      	adds	r3, r7, r3
 800fed2:	0018      	movs	r0, r3
 800fed4:	f7fe fee0 	bl	800ec98 <_UG_DecodeUTF8>
 800fed8:	0003      	movs	r3, r0
 800feda:	8023      	strh	r3, [r4, #0]
 800fedc:	e006      	b.n	800feec <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	1c5a      	adds	r2, r3, #1
 800fee2:	60fa      	str	r2, [r7, #12]
 800fee4:	781a      	ldrb	r2, [r3, #0]
 800fee6:	2324      	movs	r3, #36	@ 0x24
 800fee8:	18fb      	adds	r3, r7, r3
 800feea:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
<<<<<<< HEAD
 8010db0:	2024      	movs	r0, #36	@ 0x24
 8010db2:	183b      	adds	r3, r7, r0
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d048      	beq.n	8010e4c <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 8010dba:	183b      	adds	r3, r7, r0
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	2b0a      	cmp	r3, #10
 8010dc0:	d02b      	beq.n	8010e1a <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	8a1e      	ldrh	r6, [r3, #16]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8a5b      	ldrh	r3, [r3, #18]
 8010dca:	2212      	movs	r2, #18
 8010dcc:	18bc      	adds	r4, r7, r2
 8010dce:	2126      	movs	r1, #38	@ 0x26
 8010dd0:	187a      	adds	r2, r7, r1
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	5e55      	ldrsh	r5, [r2, r1]
 8010dd6:	2128      	movs	r1, #40	@ 0x28
 8010dd8:	187a      	adds	r2, r7, r1
 8010dda:	2100      	movs	r1, #0
 8010ddc:	5e51      	ldrsh	r1, [r2, r1]
 8010dde:	183a      	adds	r2, r7, r0
 8010de0:	8810      	ldrh	r0, [r2, #0]
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	0033      	movs	r3, r6
 8010de6:	002a      	movs	r2, r5
 8010de8:	f7ff f914 	bl	8010014 <_UG_PutChar>
 8010dec:	0003      	movs	r3, r0
 8010dee:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 8010df0:	2212      	movs	r2, #18
 8010df2:	18bb      	adds	r3, r7, r2
 8010df4:	2000      	movs	r0, #0
 8010df6:	5e1b      	ldrsh	r3, [r3, r0]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	d0c2      	beq.n	8010d82 <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 8010dfc:	18bb      	adds	r3, r7, r2
 8010dfe:	881a      	ldrh	r2, [r3, #0]
 8010e00:	2316      	movs	r3, #22
 8010e02:	18fb      	adds	r3, r7, r3
 8010e04:	881b      	ldrh	r3, [r3, #0]
 8010e06:	18d3      	adds	r3, r2, r3
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	2128      	movs	r1, #40	@ 0x28
 8010e0c:	187b      	adds	r3, r7, r1
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	18d3      	adds	r3, r2, r3
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	187b      	adds	r3, r7, r1
 8010e16:	801a      	strh	r2, [r3, #0]
 8010e18:	e7b3      	b.n	8010d82 <_UG_PutText+0x2c6>
           break;
 8010e1a:	46c0      	nop			@ (mov r8, r8)
      }
      yp += char_height + char_v_space;
 8010e1c:	231e      	movs	r3, #30
 8010e1e:	18fb      	adds	r3, r7, r3
 8010e20:	881a      	ldrh	r2, [r3, #0]
 8010e22:	2314      	movs	r3, #20
 8010e24:	18fb      	adds	r3, r7, r3
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	18d3      	adds	r3, r2, r3
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	2126      	movs	r1, #38	@ 0x26
 8010e2e:	187b      	adds	r3, r7, r1
 8010e30:	881b      	ldrh	r3, [r3, #0]
 8010e32:	18d3      	adds	r3, r2, r3
 8010e34:	b29a      	uxth	r2, r3
 8010e36:	187b      	adds	r3, r7, r1
 8010e38:	801a      	strh	r2, [r3, #0]
      sl=0;
 8010e3a:	e70d      	b.n	8010c58 <_UG_PutText+0x19c>
     return;
 8010e3c:	46c0      	nop			@ (mov r8, r8)
 8010e3e:	e006      	b.n	8010e4e <_UG_PutText+0x392>
     return;
 8010e40:	46c0      	nop			@ (mov r8, r8)
 8010e42:	e004      	b.n	8010e4e <_UG_PutText+0x392>
        return;
 8010e44:	46c0      	nop			@ (mov r8, r8)
 8010e46:	e002      	b.n	8010e4e <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 8010e48:	46c0      	nop			@ (mov r8, r8)
 8010e4a:	e000      	b.n	8010e4e <_UG_PutText+0x392>
           return;
 8010e4c:	46c0      	nop			@ (mov r8, r8)
   }
}
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	b00d      	add	sp, #52	@ 0x34
 8010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e54:	20000c44 	.word	0x20000c44

08010e58 <_UG_DrawObjectFrame>:
=======
 800feec:	2024      	movs	r0, #36	@ 0x24
 800feee:	183b      	adds	r3, r7, r0
 800fef0:	881b      	ldrh	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d048      	beq.n	800ff88 <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 800fef6:	183b      	adds	r3, r7, r0
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	2b0a      	cmp	r3, #10
 800fefc:	d02b      	beq.n	800ff56 <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	8a1e      	ldrh	r6, [r3, #16]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8a5b      	ldrh	r3, [r3, #18]
 800ff06:	2212      	movs	r2, #18
 800ff08:	18bc      	adds	r4, r7, r2
 800ff0a:	2126      	movs	r1, #38	@ 0x26
 800ff0c:	187a      	adds	r2, r7, r1
 800ff0e:	2100      	movs	r1, #0
 800ff10:	5e55      	ldrsh	r5, [r2, r1]
 800ff12:	2128      	movs	r1, #40	@ 0x28
 800ff14:	187a      	adds	r2, r7, r1
 800ff16:	2100      	movs	r1, #0
 800ff18:	5e51      	ldrsh	r1, [r2, r1]
 800ff1a:	183a      	adds	r2, r7, r0
 800ff1c:	8810      	ldrh	r0, [r2, #0]
 800ff1e:	9300      	str	r3, [sp, #0]
 800ff20:	0033      	movs	r3, r6
 800ff22:	002a      	movs	r2, r5
 800ff24:	f7ff f914 	bl	800f150 <_UG_PutChar>
 800ff28:	0003      	movs	r3, r0
 800ff2a:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 800ff2c:	2212      	movs	r2, #18
 800ff2e:	18bb      	adds	r3, r7, r2
 800ff30:	2000      	movs	r0, #0
 800ff32:	5e1b      	ldrsh	r3, [r3, r0]
 800ff34:	3301      	adds	r3, #1
 800ff36:	d0c2      	beq.n	800febe <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 800ff38:	18bb      	adds	r3, r7, r2
 800ff3a:	881a      	ldrh	r2, [r3, #0]
 800ff3c:	2316      	movs	r3, #22
 800ff3e:	18fb      	adds	r3, r7, r3
 800ff40:	881b      	ldrh	r3, [r3, #0]
 800ff42:	18d3      	adds	r3, r2, r3
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	2128      	movs	r1, #40	@ 0x28
 800ff48:	187b      	adds	r3, r7, r1
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	18d3      	adds	r3, r2, r3
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	187b      	adds	r3, r7, r1
 800ff52:	801a      	strh	r2, [r3, #0]
 800ff54:	e7b3      	b.n	800febe <_UG_PutText+0x2c6>
           break;
 800ff56:	46c0      	nop			@ (mov r8, r8)
      }
      yp += char_height + char_v_space;
 800ff58:	231e      	movs	r3, #30
 800ff5a:	18fb      	adds	r3, r7, r3
 800ff5c:	881a      	ldrh	r2, [r3, #0]
 800ff5e:	2314      	movs	r3, #20
 800ff60:	18fb      	adds	r3, r7, r3
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	18d3      	adds	r3, r2, r3
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	2126      	movs	r1, #38	@ 0x26
 800ff6a:	187b      	adds	r3, r7, r1
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	18d3      	adds	r3, r2, r3
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	187b      	adds	r3, r7, r1
 800ff74:	801a      	strh	r2, [r3, #0]
      sl=0;
 800ff76:	e70d      	b.n	800fd94 <_UG_PutText+0x19c>
     return;
 800ff78:	46c0      	nop			@ (mov r8, r8)
 800ff7a:	e006      	b.n	800ff8a <_UG_PutText+0x392>
     return;
 800ff7c:	46c0      	nop			@ (mov r8, r8)
 800ff7e:	e004      	b.n	800ff8a <_UG_PutText+0x392>
        return;
 800ff80:	46c0      	nop			@ (mov r8, r8)
 800ff82:	e002      	b.n	800ff8a <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 800ff84:	46c0      	nop			@ (mov r8, r8)
 800ff86:	e000      	b.n	800ff8a <_UG_PutText+0x392>
           return;
 800ff88:	46c0      	nop			@ (mov r8, r8)
   }
}
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	b00d      	add	sp, #52	@ 0x34
 800ff8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff90:	20000b3c 	.word	0x20000b3c

0800ff94 <_UG_DrawObjectFrame>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
<<<<<<< HEAD
 8010e58:	b5b0      	push	{r4, r5, r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af02      	add	r7, sp, #8
 8010e5e:	0005      	movs	r5, r0
 8010e60:	000c      	movs	r4, r1
 8010e62:	0010      	movs	r0, r2
 8010e64:	0019      	movs	r1, r3
 8010e66:	1dbb      	adds	r3, r7, #6
 8010e68:	1c2a      	adds	r2, r5, #0
 8010e6a:	801a      	strh	r2, [r3, #0]
 8010e6c:	1d3b      	adds	r3, r7, #4
 8010e6e:	1c22      	adds	r2, r4, #0
 8010e70:	801a      	strh	r2, [r3, #0]
 8010e72:	1cbb      	adds	r3, r7, #2
 8010e74:	1c02      	adds	r2, r0, #0
 8010e76:	801a      	strh	r2, [r3, #0]
 8010e78:	003b      	movs	r3, r7
 8010e7a:	1c0a      	adds	r2, r1, #0
 8010e7c:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010e7e:	1cbb      	adds	r3, r7, #2
 8010e80:	881b      	ldrh	r3, [r3, #0]
 8010e82:	3b01      	subs	r3, #1
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b21c      	sxth	r4, r3
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	1c9a      	adds	r2, r3, #2
 8010e8c:	61ba      	str	r2, [r7, #24]
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	1d3a      	adds	r2, r7, #4
 8010e92:	2500      	movs	r5, #0
 8010e94:	5f55      	ldrsh	r5, [r2, r5]
 8010e96:	1d3a      	adds	r2, r7, #4
 8010e98:	2100      	movs	r1, #0
 8010e9a:	5e51      	ldrsh	r1, [r2, r1]
 8010e9c:	1dba      	adds	r2, r7, #6
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	5e10      	ldrsh	r0, [r2, r0]
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	002b      	movs	r3, r5
 8010ea6:	0022      	movs	r2, r4
 8010ea8:	f7fe fbd8 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010eac:	1d3b      	adds	r3, r7, #4
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	b219      	sxth	r1, r3
 8010eb6:	003b      	movs	r3, r7
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	b21d      	sxth	r5, r3
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	1c9a      	adds	r2, r3, #2
 8010ec4:	61ba      	str	r2, [r7, #24]
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	1dba      	adds	r2, r7, #6
 8010eca:	2400      	movs	r4, #0
 8010ecc:	5f14      	ldrsh	r4, [r2, r4]
 8010ece:	1dba      	adds	r2, r7, #6
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	5e10      	ldrsh	r0, [r2, r0]
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	002b      	movs	r3, r5
 8010ed8:	0022      	movs	r2, r4
 8010eda:	f7fe fbbf 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	1c9a      	adds	r2, r3, #2
 8010ee2:	61ba      	str	r2, [r7, #24]
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	003a      	movs	r2, r7
 8010ee8:	2500      	movs	r5, #0
 8010eea:	5f55      	ldrsh	r5, [r2, r5]
 8010eec:	1cba      	adds	r2, r7, #2
 8010eee:	2400      	movs	r4, #0
 8010ef0:	5f14      	ldrsh	r4, [r2, r4]
 8010ef2:	003a      	movs	r2, r7
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	5e51      	ldrsh	r1, [r2, r1]
 8010ef8:	1dba      	adds	r2, r7, #6
 8010efa:	2000      	movs	r0, #0
 8010efc:	5e10      	ldrsh	r0, [r2, r0]
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	002b      	movs	r3, r5
 8010f02:	0022      	movs	r2, r4
 8010f04:	f7fe fbaa 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010f08:	003b      	movs	r3, r7
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	b21d      	sxth	r5, r3
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	1c9a      	adds	r2, r3, #2
 8010f16:	61ba      	str	r2, [r7, #24]
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	1cba      	adds	r2, r7, #2
 8010f1c:	2400      	movs	r4, #0
 8010f1e:	5f14      	ldrsh	r4, [r2, r4]
 8010f20:	1d3a      	adds	r2, r7, #4
 8010f22:	2100      	movs	r1, #0
 8010f24:	5e51      	ldrsh	r1, [r2, r1]
 8010f26:	1cba      	adds	r2, r7, #2
 8010f28:	2000      	movs	r0, #0
 8010f2a:	5e10      	ldrsh	r0, [r2, r0]
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	002b      	movs	r3, r5
 8010f30:	0022      	movs	r2, r4
 8010f32:	f7fe fb93 	bl	800f65c <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010f36:	1dbb      	adds	r3, r7, #6
 8010f38:	881b      	ldrh	r3, [r3, #0]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	b218      	sxth	r0, r3
 8010f40:	1d3b      	adds	r3, r7, #4
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	3301      	adds	r3, #1
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	b219      	sxth	r1, r3
 8010f4a:	1cbb      	adds	r3, r7, #2
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	3b02      	subs	r3, #2
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	b21c      	sxth	r4, r3
 8010f54:	1d3b      	adds	r3, r7, #4
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	b21d      	sxth	r5, r3
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	1c9a      	adds	r2, r3, #2
 8010f62:	61ba      	str	r2, [r7, #24]
 8010f64:	881b      	ldrh	r3, [r3, #0]
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	002b      	movs	r3, r5
 8010f6a:	0022      	movs	r2, r4
 8010f6c:	f7fe fb76 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8010f70:	1dbb      	adds	r3, r7, #6
 8010f72:	881b      	ldrh	r3, [r3, #0]
 8010f74:	3301      	adds	r3, #1
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	b218      	sxth	r0, r3
 8010f7a:	1d3b      	adds	r3, r7, #4
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	3302      	adds	r3, #2
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	b219      	sxth	r1, r3
 8010f84:	1dbb      	adds	r3, r7, #6
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	b21c      	sxth	r4, r3
 8010f8e:	003b      	movs	r3, r7
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	3b02      	subs	r3, #2
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	b21d      	sxth	r5, r3
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	1c9a      	adds	r2, r3, #2
 8010f9c:	61ba      	str	r2, [r7, #24]
 8010f9e:	881b      	ldrh	r3, [r3, #0]
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	002b      	movs	r3, r5
 8010fa4:	0022      	movs	r2, r4
 8010fa6:	f7fe fb59 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8010faa:	1dbb      	adds	r3, r7, #6
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	b218      	sxth	r0, r3
 8010fb4:	003b      	movs	r3, r7
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	b219      	sxth	r1, r3
 8010fbe:	1cbb      	adds	r3, r7, #2
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	b21c      	sxth	r4, r3
 8010fc8:	003b      	movs	r3, r7
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	b21d      	sxth	r5, r3
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	1c9a      	adds	r2, r3, #2
 8010fd6:	61ba      	str	r2, [r7, #24]
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	002b      	movs	r3, r5
 8010fde:	0022      	movs	r2, r4
 8010fe0:	f7fe fb3c 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010fe4:	1cbb      	adds	r3, r7, #2
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	b218      	sxth	r0, r3
 8010fee:	1d3b      	adds	r3, r7, #4
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	b219      	sxth	r1, r3
 8010ff8:	1cbb      	adds	r3, r7, #2
 8010ffa:	881b      	ldrh	r3, [r3, #0]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	b21c      	sxth	r4, r3
 8011002:	003b      	movs	r3, r7
 8011004:	881b      	ldrh	r3, [r3, #0]
 8011006:	3b02      	subs	r3, #2
 8011008:	b29b      	uxth	r3, r3
 801100a:	b21d      	sxth	r5, r3
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	1c9a      	adds	r2, r3, #2
 8011010:	61ba      	str	r2, [r7, #24]
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	002b      	movs	r3, r5
 8011018:	0022      	movs	r2, r4
 801101a:	f7fe fb1f 	bl	800f65c <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 801101e:	1dbb      	adds	r3, r7, #6
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	3302      	adds	r3, #2
 8011024:	b29b      	uxth	r3, r3
 8011026:	b218      	sxth	r0, r3
 8011028:	1d3b      	adds	r3, r7, #4
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	3302      	adds	r3, #2
 801102e:	b29b      	uxth	r3, r3
 8011030:	b219      	sxth	r1, r3
 8011032:	1cbb      	adds	r3, r7, #2
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	3b03      	subs	r3, #3
 8011038:	b29b      	uxth	r3, r3
 801103a:	b21c      	sxth	r4, r3
 801103c:	1d3b      	adds	r3, r7, #4
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	3302      	adds	r3, #2
 8011042:	b29b      	uxth	r3, r3
 8011044:	b21d      	sxth	r5, r3
 8011046:	69bb      	ldr	r3, [r7, #24]
 8011048:	1c9a      	adds	r2, r3, #2
 801104a:	61ba      	str	r2, [r7, #24]
 801104c:	881b      	ldrh	r3, [r3, #0]
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	002b      	movs	r3, r5
 8011052:	0022      	movs	r2, r4
 8011054:	f7fe fb02 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8011058:	1dbb      	adds	r3, r7, #6
 801105a:	881b      	ldrh	r3, [r3, #0]
 801105c:	3302      	adds	r3, #2
 801105e:	b29b      	uxth	r3, r3
 8011060:	b218      	sxth	r0, r3
 8011062:	1d3b      	adds	r3, r7, #4
 8011064:	881b      	ldrh	r3, [r3, #0]
 8011066:	3303      	adds	r3, #3
 8011068:	b29b      	uxth	r3, r3
 801106a:	b219      	sxth	r1, r3
 801106c:	1dbb      	adds	r3, r7, #6
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	3302      	adds	r3, #2
 8011072:	b29b      	uxth	r3, r3
 8011074:	b21c      	sxth	r4, r3
 8011076:	003b      	movs	r3, r7
 8011078:	881b      	ldrh	r3, [r3, #0]
 801107a:	3b03      	subs	r3, #3
 801107c:	b29b      	uxth	r3, r3
 801107e:	b21d      	sxth	r5, r3
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	1c9a      	adds	r2, r3, #2
 8011084:	61ba      	str	r2, [r7, #24]
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	002b      	movs	r3, r5
 801108c:	0022      	movs	r2, r4
 801108e:	f7fe fae5 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8011092:	1dbb      	adds	r3, r7, #6
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	3302      	adds	r3, #2
 8011098:	b29b      	uxth	r3, r3
 801109a:	b218      	sxth	r0, r3
 801109c:	003b      	movs	r3, r7
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	3b02      	subs	r3, #2
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	b219      	sxth	r1, r3
 80110a6:	1cbb      	adds	r3, r7, #2
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	3b02      	subs	r3, #2
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	b21c      	sxth	r4, r3
 80110b0:	003b      	movs	r3, r7
 80110b2:	881b      	ldrh	r3, [r3, #0]
 80110b4:	3b02      	subs	r3, #2
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	b21d      	sxth	r5, r3
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	1c9a      	adds	r2, r3, #2
 80110be:	61ba      	str	r2, [r7, #24]
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	002b      	movs	r3, r5
 80110c6:	0022      	movs	r2, r4
 80110c8:	f7fe fac8 	bl	800f65c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80110cc:	1cbb      	adds	r3, r7, #2
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	3b02      	subs	r3, #2
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	b218      	sxth	r0, r3
 80110d6:	1d3b      	adds	r3, r7, #4
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	3302      	adds	r3, #2
 80110dc:	b29b      	uxth	r3, r3
 80110de:	b219      	sxth	r1, r3
 80110e0:	1cbb      	adds	r3, r7, #2
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	3b02      	subs	r3, #2
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	b21a      	sxth	r2, r3
 80110ea:	003b      	movs	r3, r7
 80110ec:	881b      	ldrh	r3, [r3, #0]
 80110ee:	3b03      	subs	r3, #3
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	b21c      	sxth	r4, r3
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	0023      	movs	r3, r4
 80110fc:	f7fe faae 	bl	800f65c <UG_DrawLine>
}
 8011100:	46c0      	nop			@ (mov r8, r8)
 8011102:	46bd      	mov	sp, r7
 8011104:	b002      	add	sp, #8
 8011106:	bdb0      	pop	{r4, r5, r7, pc}

08011108 <UG_DriverRegister>:
=======
 800ff94:	b5b0      	push	{r4, r5, r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	0005      	movs	r5, r0
 800ff9c:	000c      	movs	r4, r1
 800ff9e:	0010      	movs	r0, r2
 800ffa0:	0019      	movs	r1, r3
 800ffa2:	1dbb      	adds	r3, r7, #6
 800ffa4:	1c2a      	adds	r2, r5, #0
 800ffa6:	801a      	strh	r2, [r3, #0]
 800ffa8:	1d3b      	adds	r3, r7, #4
 800ffaa:	1c22      	adds	r2, r4, #0
 800ffac:	801a      	strh	r2, [r3, #0]
 800ffae:	1cbb      	adds	r3, r7, #2
 800ffb0:	1c02      	adds	r2, r0, #0
 800ffb2:	801a      	strh	r2, [r3, #0]
 800ffb4:	003b      	movs	r3, r7
 800ffb6:	1c0a      	adds	r2, r1, #0
 800ffb8:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800ffba:	1cbb      	adds	r3, r7, #2
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	b21c      	sxth	r4, r3
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	1c9a      	adds	r2, r3, #2
 800ffc8:	61ba      	str	r2, [r7, #24]
 800ffca:	881b      	ldrh	r3, [r3, #0]
 800ffcc:	1d3a      	adds	r2, r7, #4
 800ffce:	2500      	movs	r5, #0
 800ffd0:	5f55      	ldrsh	r5, [r2, r5]
 800ffd2:	1d3a      	adds	r2, r7, #4
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	5e51      	ldrsh	r1, [r2, r1]
 800ffd8:	1dba      	adds	r2, r7, #6
 800ffda:	2000      	movs	r0, #0
 800ffdc:	5e10      	ldrsh	r0, [r2, r0]
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	002b      	movs	r3, r5
 800ffe2:	0022      	movs	r2, r4
 800ffe4:	f7fe fbd8 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800ffe8:	1d3b      	adds	r3, r7, #4
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	3301      	adds	r3, #1
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	b219      	sxth	r1, r3
 800fff2:	003b      	movs	r3, r7
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	b21d      	sxth	r5, r3
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	1c9a      	adds	r2, r3, #2
 8010000:	61ba      	str	r2, [r7, #24]
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	1dba      	adds	r2, r7, #6
 8010006:	2400      	movs	r4, #0
 8010008:	5f14      	ldrsh	r4, [r2, r4]
 801000a:	1dba      	adds	r2, r7, #6
 801000c:	2000      	movs	r0, #0
 801000e:	5e10      	ldrsh	r0, [r2, r0]
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	002b      	movs	r3, r5
 8010014:	0022      	movs	r2, r4
 8010016:	f7fe fbbf 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	1c9a      	adds	r2, r3, #2
 801001e:	61ba      	str	r2, [r7, #24]
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	003a      	movs	r2, r7
 8010024:	2500      	movs	r5, #0
 8010026:	5f55      	ldrsh	r5, [r2, r5]
 8010028:	1cba      	adds	r2, r7, #2
 801002a:	2400      	movs	r4, #0
 801002c:	5f14      	ldrsh	r4, [r2, r4]
 801002e:	003a      	movs	r2, r7
 8010030:	2100      	movs	r1, #0
 8010032:	5e51      	ldrsh	r1, [r2, r1]
 8010034:	1dba      	adds	r2, r7, #6
 8010036:	2000      	movs	r0, #0
 8010038:	5e10      	ldrsh	r0, [r2, r0]
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	002b      	movs	r3, r5
 801003e:	0022      	movs	r2, r4
 8010040:	f7fe fbaa 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010044:	003b      	movs	r3, r7
 8010046:	881b      	ldrh	r3, [r3, #0]
 8010048:	3b01      	subs	r3, #1
 801004a:	b29b      	uxth	r3, r3
 801004c:	b21d      	sxth	r5, r3
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	1c9a      	adds	r2, r3, #2
 8010052:	61ba      	str	r2, [r7, #24]
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	1cba      	adds	r2, r7, #2
 8010058:	2400      	movs	r4, #0
 801005a:	5f14      	ldrsh	r4, [r2, r4]
 801005c:	1d3a      	adds	r2, r7, #4
 801005e:	2100      	movs	r1, #0
 8010060:	5e51      	ldrsh	r1, [r2, r1]
 8010062:	1cba      	adds	r2, r7, #2
 8010064:	2000      	movs	r0, #0
 8010066:	5e10      	ldrsh	r0, [r2, r0]
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	002b      	movs	r3, r5
 801006c:	0022      	movs	r2, r4
 801006e:	f7fe fb93 	bl	800e798 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010072:	1dbb      	adds	r3, r7, #6
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	3301      	adds	r3, #1
 8010078:	b29b      	uxth	r3, r3
 801007a:	b218      	sxth	r0, r3
 801007c:	1d3b      	adds	r3, r7, #4
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	3301      	adds	r3, #1
 8010082:	b29b      	uxth	r3, r3
 8010084:	b219      	sxth	r1, r3
 8010086:	1cbb      	adds	r3, r7, #2
 8010088:	881b      	ldrh	r3, [r3, #0]
 801008a:	3b02      	subs	r3, #2
 801008c:	b29b      	uxth	r3, r3
 801008e:	b21c      	sxth	r4, r3
 8010090:	1d3b      	adds	r3, r7, #4
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	3301      	adds	r3, #1
 8010096:	b29b      	uxth	r3, r3
 8010098:	b21d      	sxth	r5, r3
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	1c9a      	adds	r2, r3, #2
 801009e:	61ba      	str	r2, [r7, #24]
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	002b      	movs	r3, r5
 80100a6:	0022      	movs	r2, r4
 80100a8:	f7fe fb76 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80100ac:	1dbb      	adds	r3, r7, #6
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	3301      	adds	r3, #1
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	b218      	sxth	r0, r3
 80100b6:	1d3b      	adds	r3, r7, #4
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	3302      	adds	r3, #2
 80100bc:	b29b      	uxth	r3, r3
 80100be:	b219      	sxth	r1, r3
 80100c0:	1dbb      	adds	r3, r7, #6
 80100c2:	881b      	ldrh	r3, [r3, #0]
 80100c4:	3301      	adds	r3, #1
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	b21c      	sxth	r4, r3
 80100ca:	003b      	movs	r3, r7
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	3b02      	subs	r3, #2
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	b21d      	sxth	r5, r3
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	1c9a      	adds	r2, r3, #2
 80100d8:	61ba      	str	r2, [r7, #24]
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	002b      	movs	r3, r5
 80100e0:	0022      	movs	r2, r4
 80100e2:	f7fe fb59 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80100e6:	1dbb      	adds	r3, r7, #6
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	3301      	adds	r3, #1
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	b218      	sxth	r0, r3
 80100f0:	003b      	movs	r3, r7
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	3b01      	subs	r3, #1
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	b219      	sxth	r1, r3
 80100fa:	1cbb      	adds	r3, r7, #2
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	3b01      	subs	r3, #1
 8010100:	b29b      	uxth	r3, r3
 8010102:	b21c      	sxth	r4, r3
 8010104:	003b      	movs	r3, r7
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	3b01      	subs	r3, #1
 801010a:	b29b      	uxth	r3, r3
 801010c:	b21d      	sxth	r5, r3
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	1c9a      	adds	r2, r3, #2
 8010112:	61ba      	str	r2, [r7, #24]
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	002b      	movs	r3, r5
 801011a:	0022      	movs	r2, r4
 801011c:	f7fe fb3c 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010120:	1cbb      	adds	r3, r7, #2
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	3b01      	subs	r3, #1
 8010126:	b29b      	uxth	r3, r3
 8010128:	b218      	sxth	r0, r3
 801012a:	1d3b      	adds	r3, r7, #4
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	3301      	adds	r3, #1
 8010130:	b29b      	uxth	r3, r3
 8010132:	b219      	sxth	r1, r3
 8010134:	1cbb      	adds	r3, r7, #2
 8010136:	881b      	ldrh	r3, [r3, #0]
 8010138:	3b01      	subs	r3, #1
 801013a:	b29b      	uxth	r3, r3
 801013c:	b21c      	sxth	r4, r3
 801013e:	003b      	movs	r3, r7
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	3b02      	subs	r3, #2
 8010144:	b29b      	uxth	r3, r3
 8010146:	b21d      	sxth	r5, r3
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	1c9a      	adds	r2, r3, #2
 801014c:	61ba      	str	r2, [r7, #24]
 801014e:	881b      	ldrh	r3, [r3, #0]
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	002b      	movs	r3, r5
 8010154:	0022      	movs	r2, r4
 8010156:	f7fe fb1f 	bl	800e798 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 801015a:	1dbb      	adds	r3, r7, #6
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	3302      	adds	r3, #2
 8010160:	b29b      	uxth	r3, r3
 8010162:	b218      	sxth	r0, r3
 8010164:	1d3b      	adds	r3, r7, #4
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	3302      	adds	r3, #2
 801016a:	b29b      	uxth	r3, r3
 801016c:	b219      	sxth	r1, r3
 801016e:	1cbb      	adds	r3, r7, #2
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	3b03      	subs	r3, #3
 8010174:	b29b      	uxth	r3, r3
 8010176:	b21c      	sxth	r4, r3
 8010178:	1d3b      	adds	r3, r7, #4
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	3302      	adds	r3, #2
 801017e:	b29b      	uxth	r3, r3
 8010180:	b21d      	sxth	r5, r3
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	1c9a      	adds	r2, r3, #2
 8010186:	61ba      	str	r2, [r7, #24]
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	002b      	movs	r3, r5
 801018e:	0022      	movs	r2, r4
 8010190:	f7fe fb02 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8010194:	1dbb      	adds	r3, r7, #6
 8010196:	881b      	ldrh	r3, [r3, #0]
 8010198:	3302      	adds	r3, #2
 801019a:	b29b      	uxth	r3, r3
 801019c:	b218      	sxth	r0, r3
 801019e:	1d3b      	adds	r3, r7, #4
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	3303      	adds	r3, #3
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	b219      	sxth	r1, r3
 80101a8:	1dbb      	adds	r3, r7, #6
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	3302      	adds	r3, #2
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	b21c      	sxth	r4, r3
 80101b2:	003b      	movs	r3, r7
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	3b03      	subs	r3, #3
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	b21d      	sxth	r5, r3
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	1c9a      	adds	r2, r3, #2
 80101c0:	61ba      	str	r2, [r7, #24]
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	002b      	movs	r3, r5
 80101c8:	0022      	movs	r2, r4
 80101ca:	f7fe fae5 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80101ce:	1dbb      	adds	r3, r7, #6
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	3302      	adds	r3, #2
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	b218      	sxth	r0, r3
 80101d8:	003b      	movs	r3, r7
 80101da:	881b      	ldrh	r3, [r3, #0]
 80101dc:	3b02      	subs	r3, #2
 80101de:	b29b      	uxth	r3, r3
 80101e0:	b219      	sxth	r1, r3
 80101e2:	1cbb      	adds	r3, r7, #2
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	3b02      	subs	r3, #2
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	b21c      	sxth	r4, r3
 80101ec:	003b      	movs	r3, r7
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	3b02      	subs	r3, #2
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	b21d      	sxth	r5, r3
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	1c9a      	adds	r2, r3, #2
 80101fa:	61ba      	str	r2, [r7, #24]
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	002b      	movs	r3, r5
 8010202:	0022      	movs	r2, r4
 8010204:	f7fe fac8 	bl	800e798 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8010208:	1cbb      	adds	r3, r7, #2
 801020a:	881b      	ldrh	r3, [r3, #0]
 801020c:	3b02      	subs	r3, #2
 801020e:	b29b      	uxth	r3, r3
 8010210:	b218      	sxth	r0, r3
 8010212:	1d3b      	adds	r3, r7, #4
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	3302      	adds	r3, #2
 8010218:	b29b      	uxth	r3, r3
 801021a:	b219      	sxth	r1, r3
 801021c:	1cbb      	adds	r3, r7, #2
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	3b02      	subs	r3, #2
 8010222:	b29b      	uxth	r3, r3
 8010224:	b21a      	sxth	r2, r3
 8010226:	003b      	movs	r3, r7
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	3b03      	subs	r3, #3
 801022c:	b29b      	uxth	r3, r3
 801022e:	b21c      	sxth	r4, r3
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	0023      	movs	r3, r4
 8010238:	f7fe faae 	bl	800e798 <UG_DrawLine>
}
 801023c:	46c0      	nop			@ (mov r8, r8)
 801023e:	46bd      	mov	sp, r7
 8010240:	b002      	add	sp, #8
 8010242:	bdb0      	pop	{r4, r5, r7, pc}

08010244 <UG_DriverRegister>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
<<<<<<< HEAD
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	0002      	movs	r2, r0
 8011110:	6039      	str	r1, [r7, #0]
 8011112:	1dfb      	adds	r3, r7, #7
 8011114:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8011116:	1dfb      	adds	r3, r7, #7
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	2b03      	cmp	r3, #3
 801111c:	d814      	bhi.n	8011148 <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 801111e:	4b0c      	ldr	r3, [pc, #48]	@ (8011150 <UG_DriverRegister+0x48>)
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	1dfb      	adds	r3, r7, #7
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	330a      	adds	r3, #10
 8011128:	00db      	lsls	r3, r3, #3
 801112a:	18d3      	adds	r3, r2, r3
 801112c:	3304      	adds	r3, #4
 801112e:	683a      	ldr	r2, [r7, #0]
 8011130:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8011132:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <UG_DriverRegister+0x48>)
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	1dfb      	adds	r3, r7, #7
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	330a      	adds	r3, #10
 801113c:	00db      	lsls	r3, r3, #3
 801113e:	18d3      	adds	r3, r2, r3
 8011140:	3308      	adds	r3, #8
 8011142:	2203      	movs	r2, #3
 8011144:	701a      	strb	r2, [r3, #0]
 8011146:	e000      	b.n	801114a <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8011148:	46c0      	nop			@ (mov r8, r8)
}
 801114a:	46bd      	mov	sp, r7
 801114c:	b002      	add	sp, #8
 801114e:	bd80      	pop	{r7, pc}
 8011150:	20000c44 	.word	0x20000c44

08011154 <UG_Update>:
=======
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	0002      	movs	r2, r0
 801024c:	6039      	str	r1, [r7, #0]
 801024e:	1dfb      	adds	r3, r7, #7
 8010250:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010252:	1dfb      	adds	r3, r7, #7
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	2b03      	cmp	r3, #3
 8010258:	d814      	bhi.n	8010284 <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 801025a:	4b0c      	ldr	r3, [pc, #48]	@ (801028c <UG_DriverRegister+0x48>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	1dfb      	adds	r3, r7, #7
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	330a      	adds	r3, #10
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	18d3      	adds	r3, r2, r3
 8010268:	3304      	adds	r3, #4
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801026e:	4b07      	ldr	r3, [pc, #28]	@ (801028c <UG_DriverRegister+0x48>)
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	1dfb      	adds	r3, r7, #7
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	330a      	adds	r3, #10
 8010278:	00db      	lsls	r3, r3, #3
 801027a:	18d3      	adds	r3, r2, r3
 801027c:	3308      	adds	r3, #8
 801027e:	2203      	movs	r2, #3
 8010280:	701a      	strb	r2, [r3, #0]
 8010282:	e000      	b.n	8010286 <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010284:	46c0      	nop			@ (mov r8, r8)
}
 8010286:	46bd      	mov	sp, r7
 8010288:	b002      	add	sp, #8
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20000b3c 	.word	0x20000b3c

08010290 <UG_Update>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
<<<<<<< HEAD
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
=======
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
<<<<<<< HEAD
 801115a:	4b61      	ldr	r3, [pc, #388]	@ (80112e0 <UG_Update+0x18c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2252      	movs	r2, #82	@ 0x52
 8011160:	5c9b      	ldrb	r3, [r3, r2]
 8011162:	001a      	movs	r2, r3
 8011164:	2301      	movs	r3, #1
 8011166:	4013      	ands	r3, r2
 8011168:	d00a      	beq.n	8011180 <UG_Update+0x2c>
 801116a:	4b5d      	ldr	r3, [pc, #372]	@ (80112e0 <UG_Update+0x18c>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2252      	movs	r2, #82	@ 0x52
 8011170:	5c9a      	ldrb	r2, [r3, r2]
 8011172:	4b5b      	ldr	r3, [pc, #364]	@ (80112e0 <UG_Update+0x18c>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2101      	movs	r1, #1
 8011178:	438a      	bics	r2, r1
 801117a:	b2d1      	uxtb	r1, r2
 801117c:	2252      	movs	r2, #82	@ 0x52
 801117e:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8011180:	4b57      	ldr	r3, [pc, #348]	@ (80112e0 <UG_Update+0x18c>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68da      	ldr	r2, [r3, #12]
 8011186:	4b56      	ldr	r3, [pc, #344]	@ (80112e0 <UG_Update+0x18c>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	429a      	cmp	r2, r3
 801118e:	d100      	bne.n	8011192 <UG_Update+0x3e>
 8011190:	e071      	b.n	8011276 <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 8011192:	4b53      	ldr	r3, [pc, #332]	@ (80112e0 <UG_Update+0x18c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d06c      	beq.n	8011276 <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 801119c:	4b50      	ldr	r3, [pc, #320]	@ (80112e0 <UG_Update+0x18c>)
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	4b4f      	ldr	r3, [pc, #316]	@ (80112e0 <UG_Update+0x18c>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	6912      	ldr	r2, [r2, #16]
 80111a6:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80111a8:	4b4d      	ldr	r3, [pc, #308]	@ (80112e0 <UG_Update+0x18c>)
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	4b4c      	ldr	r3, [pc, #304]	@ (80112e0 <UG_Update+0x18c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	68d2      	ldr	r2, [r2, #12]
 80111b2:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80111b4:	4b4a      	ldr	r3, [pc, #296]	@ (80112e0 <UG_Update+0x18c>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d045      	beq.n	801124a <UG_Update+0xf6>
 80111be:	4b48      	ldr	r3, [pc, #288]	@ (80112e0 <UG_Update+0x18c>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	695b      	ldr	r3, [r3, #20]
 80111c4:	7d9b      	ldrb	r3, [r3, #22]
 80111c6:	001a      	movs	r2, r3
 80111c8:	2302      	movs	r3, #2
 80111ca:	4013      	ands	r3, r2
 80111cc:	d03d      	beq.n	801124a <UG_Update+0xf6>
 80111ce:	4b44      	ldr	r3, [pc, #272]	@ (80112e0 <UG_Update+0x18c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	7a1b      	ldrb	r3, [r3, #8]
 80111d6:	001a      	movs	r2, r3
 80111d8:	2308      	movs	r3, #8
 80111da:	4013      	ands	r3, r2
 80111dc:	d035      	beq.n	801124a <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80111de:	4b40      	ldr	r3, [pc, #256]	@ (80112e0 <UG_Update+0x18c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	220e      	movs	r2, #14
 80111e6:	5e9a      	ldrsh	r2, [r3, r2]
 80111e8:	4b3d      	ldr	r3, [pc, #244]	@ (80112e0 <UG_Update+0x18c>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	210e      	movs	r1, #14
 80111f0:	5e5b      	ldrsh	r3, [r3, r1]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d123      	bne.n	801123e <UG_Update+0xea>
 80111f6:	4b3a      	ldr	r3, [pc, #232]	@ (80112e0 <UG_Update+0x18c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	695b      	ldr	r3, [r3, #20]
 80111fc:	2212      	movs	r2, #18
 80111fe:	5e9a      	ldrsh	r2, [r3, r2]
 8011200:	4b37      	ldr	r3, [pc, #220]	@ (80112e0 <UG_Update+0x18c>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	2112      	movs	r1, #18
 8011208:	5e5b      	ldrsh	r3, [r3, r1]
 801120a:	429a      	cmp	r2, r3
 801120c:	d117      	bne.n	801123e <UG_Update+0xea>
 801120e:	4b34      	ldr	r3, [pc, #208]	@ (80112e0 <UG_Update+0x18c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	2210      	movs	r2, #16
 8011216:	5e9a      	ldrsh	r2, [r3, r2]
 8011218:	4b31      	ldr	r3, [pc, #196]	@ (80112e0 <UG_Update+0x18c>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	2110      	movs	r1, #16
 8011220:	5e5b      	ldrsh	r3, [r3, r1]
 8011222:	429a      	cmp	r2, r3
 8011224:	d10b      	bne.n	801123e <UG_Update+0xea>
 8011226:	4b2e      	ldr	r3, [pc, #184]	@ (80112e0 <UG_Update+0x18c>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	695b      	ldr	r3, [r3, #20]
 801122c:	2214      	movs	r2, #20
 801122e:	5e9a      	ldrsh	r2, [r3, r2]
 8011230:	4b2b      	ldr	r3, [pc, #172]	@ (80112e0 <UG_Update+0x18c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	691b      	ldr	r3, [r3, #16]
 8011236:	2114      	movs	r1, #20
 8011238:	5e5b      	ldrsh	r3, [r3, r1]
 801123a:	429a      	cmp	r2, r3
 801123c:	d005      	beq.n	801124a <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 801123e:	4b28      	ldr	r3, [pc, #160]	@ (80112e0 <UG_Update+0x18c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	0018      	movs	r0, r3
 8011246:	f000 f84d 	bl	80112e4 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 801124a:	4b25      	ldr	r3, [pc, #148]	@ (80112e0 <UG_Update+0x18c>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	691b      	ldr	r3, [r3, #16]
 8011250:	7a1a      	ldrb	r2, [r3, #8]
 8011252:	4b23      	ldr	r3, [pc, #140]	@ (80112e0 <UG_Update+0x18c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	2140      	movs	r1, #64	@ 0x40
 801125a:	438a      	bics	r2, r1
 801125c:	b2d2      	uxtb	r2, r2
 801125e:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8011260:	4b1f      	ldr	r3, [pc, #124]	@ (80112e0 <UG_Update+0x18c>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	691b      	ldr	r3, [r3, #16]
 8011266:	7a1a      	ldrb	r2, [r3, #8]
 8011268:	4b1d      	ldr	r3, [pc, #116]	@ (80112e0 <UG_Update+0x18c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	691b      	ldr	r3, [r3, #16]
 801126e:	2128      	movs	r1, #40	@ 0x28
 8011270:	430a      	orrs	r2, r1
 8011272:	b2d2      	uxtb	r2, r2
 8011274:	721a      	strb	r2, [r3, #8]
=======
 8010296:	4b61      	ldr	r3, [pc, #388]	@ (801041c <UG_Update+0x18c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2252      	movs	r2, #82	@ 0x52
 801029c:	5c9b      	ldrb	r3, [r3, r2]
 801029e:	001a      	movs	r2, r3
 80102a0:	2301      	movs	r3, #1
 80102a2:	4013      	ands	r3, r2
 80102a4:	d00a      	beq.n	80102bc <UG_Update+0x2c>
 80102a6:	4b5d      	ldr	r3, [pc, #372]	@ (801041c <UG_Update+0x18c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2252      	movs	r2, #82	@ 0x52
 80102ac:	5c9a      	ldrb	r2, [r3, r2]
 80102ae:	4b5b      	ldr	r3, [pc, #364]	@ (801041c <UG_Update+0x18c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2101      	movs	r1, #1
 80102b4:	438a      	bics	r2, r1
 80102b6:	b2d1      	uxtb	r1, r2
 80102b8:	2252      	movs	r2, #82	@ 0x52
 80102ba:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80102bc:	4b57      	ldr	r3, [pc, #348]	@ (801041c <UG_Update+0x18c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	68da      	ldr	r2, [r3, #12]
 80102c2:	4b56      	ldr	r3, [pc, #344]	@ (801041c <UG_Update+0x18c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d100      	bne.n	80102ce <UG_Update+0x3e>
 80102cc:	e071      	b.n	80103b2 <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 80102ce:	4b53      	ldr	r3, [pc, #332]	@ (801041c <UG_Update+0x18c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d06c      	beq.n	80103b2 <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 80102d8:	4b50      	ldr	r3, [pc, #320]	@ (801041c <UG_Update+0x18c>)
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	4b4f      	ldr	r3, [pc, #316]	@ (801041c <UG_Update+0x18c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6912      	ldr	r2, [r2, #16]
 80102e2:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80102e4:	4b4d      	ldr	r3, [pc, #308]	@ (801041c <UG_Update+0x18c>)
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	4b4c      	ldr	r3, [pc, #304]	@ (801041c <UG_Update+0x18c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68d2      	ldr	r2, [r2, #12]
 80102ee:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80102f0:	4b4a      	ldr	r3, [pc, #296]	@ (801041c <UG_Update+0x18c>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d045      	beq.n	8010386 <UG_Update+0xf6>
 80102fa:	4b48      	ldr	r3, [pc, #288]	@ (801041c <UG_Update+0x18c>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	695b      	ldr	r3, [r3, #20]
 8010300:	7d9b      	ldrb	r3, [r3, #22]
 8010302:	001a      	movs	r2, r3
 8010304:	2302      	movs	r3, #2
 8010306:	4013      	ands	r3, r2
 8010308:	d03d      	beq.n	8010386 <UG_Update+0xf6>
 801030a:	4b44      	ldr	r3, [pc, #272]	@ (801041c <UG_Update+0x18c>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	695b      	ldr	r3, [r3, #20]
 8010310:	7a1b      	ldrb	r3, [r3, #8]
 8010312:	001a      	movs	r2, r3
 8010314:	2308      	movs	r3, #8
 8010316:	4013      	ands	r3, r2
 8010318:	d035      	beq.n	8010386 <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 801031a:	4b40      	ldr	r3, [pc, #256]	@ (801041c <UG_Update+0x18c>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	220e      	movs	r2, #14
 8010322:	5e9a      	ldrsh	r2, [r3, r2]
 8010324:	4b3d      	ldr	r3, [pc, #244]	@ (801041c <UG_Update+0x18c>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	691b      	ldr	r3, [r3, #16]
 801032a:	210e      	movs	r1, #14
 801032c:	5e5b      	ldrsh	r3, [r3, r1]
 801032e:	429a      	cmp	r2, r3
 8010330:	d123      	bne.n	801037a <UG_Update+0xea>
 8010332:	4b3a      	ldr	r3, [pc, #232]	@ (801041c <UG_Update+0x18c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	695b      	ldr	r3, [r3, #20]
 8010338:	2212      	movs	r2, #18
 801033a:	5e9a      	ldrsh	r2, [r3, r2]
 801033c:	4b37      	ldr	r3, [pc, #220]	@ (801041c <UG_Update+0x18c>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2112      	movs	r1, #18
 8010344:	5e5b      	ldrsh	r3, [r3, r1]
 8010346:	429a      	cmp	r2, r3
 8010348:	d117      	bne.n	801037a <UG_Update+0xea>
 801034a:	4b34      	ldr	r3, [pc, #208]	@ (801041c <UG_Update+0x18c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	695b      	ldr	r3, [r3, #20]
 8010350:	2210      	movs	r2, #16
 8010352:	5e9a      	ldrsh	r2, [r3, r2]
 8010354:	4b31      	ldr	r3, [pc, #196]	@ (801041c <UG_Update+0x18c>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	691b      	ldr	r3, [r3, #16]
 801035a:	2110      	movs	r1, #16
 801035c:	5e5b      	ldrsh	r3, [r3, r1]
 801035e:	429a      	cmp	r2, r3
 8010360:	d10b      	bne.n	801037a <UG_Update+0xea>
 8010362:	4b2e      	ldr	r3, [pc, #184]	@ (801041c <UG_Update+0x18c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	695b      	ldr	r3, [r3, #20]
 8010368:	2214      	movs	r2, #20
 801036a:	5e9a      	ldrsh	r2, [r3, r2]
 801036c:	4b2b      	ldr	r3, [pc, #172]	@ (801041c <UG_Update+0x18c>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	2114      	movs	r1, #20
 8010374:	5e5b      	ldrsh	r3, [r3, r1]
 8010376:	429a      	cmp	r2, r3
 8010378:	d005      	beq.n	8010386 <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 801037a:	4b28      	ldr	r3, [pc, #160]	@ (801041c <UG_Update+0x18c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	0018      	movs	r0, r3
 8010382:	f000 f84d 	bl	8010420 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8010386:	4b25      	ldr	r3, [pc, #148]	@ (801041c <UG_Update+0x18c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	7a1a      	ldrb	r2, [r3, #8]
 801038e:	4b23      	ldr	r3, [pc, #140]	@ (801041c <UG_Update+0x18c>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	2140      	movs	r1, #64	@ 0x40
 8010396:	438a      	bics	r2, r1
 8010398:	b2d2      	uxtb	r2, r2
 801039a:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 801039c:	4b1f      	ldr	r3, [pc, #124]	@ (801041c <UG_Update+0x18c>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	7a1a      	ldrb	r2, [r3, #8]
 80103a4:	4b1d      	ldr	r3, [pc, #116]	@ (801041c <UG_Update+0x18c>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	2128      	movs	r1, #40	@ 0x28
 80103ac:	430a      	orrs	r2, r1
 80103ae:	b2d2      	uxtb	r2, r2
 80103b0:	721a      	strb	r2, [r3, #8]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
<<<<<<< HEAD
 8011276:	4b1a      	ldr	r3, [pc, #104]	@ (80112e0 <UG_Update+0x18c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d01f      	beq.n	80112c0 <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 8011280:	4b17      	ldr	r3, [pc, #92]	@ (80112e0 <UG_Update+0x18c>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7a1b      	ldrb	r3, [r3, #8]
 801128c:	001a      	movs	r2, r3
 801128e:	2320      	movs	r3, #32
 8011290:	4013      	ands	r3, r2
 8011292:	d003      	beq.n	801129c <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	0018      	movs	r0, r3
 8011298:	f000 f904 	bl	80114a4 <_UG_WindowUpdate>
=======
 80103b2:	4b1a      	ldr	r3, [pc, #104]	@ (801041c <UG_Update+0x18c>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d01f      	beq.n	80103fc <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 80103bc:	4b17      	ldr	r3, [pc, #92]	@ (801041c <UG_Update+0x18c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7a1b      	ldrb	r3, [r3, #8]
 80103c8:	001a      	movs	r2, r3
 80103ca:	2320      	movs	r3, #32
 80103cc:	4013      	ands	r3, r2
 80103ce:	d003      	beq.n	80103d8 <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	0018      	movs	r0, r3
 80103d4:	f000 f904 	bl	80105e0 <_UG_WindowUpdate>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
<<<<<<< HEAD
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7a1b      	ldrb	r3, [r3, #8]
 80112a0:	001a      	movs	r2, r3
 80112a2:	2308      	movs	r3, #8
 80112a4:	4013      	ands	r3, r2
 80112a6:	d00b      	beq.n	80112c0 <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	0018      	movs	r0, r3
 80112ac:	f7ff fa54 	bl	8010758 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	0018      	movs	r0, r3
 80112b4:	f7ff fb46 	bl	8010944 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	0018      	movs	r0, r3
 80112bc:	f7ff fba2 	bl	8010a04 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80112c0:	4b07      	ldr	r3, [pc, #28]	@ (80112e0 <UG_Update+0x18c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d004      	beq.n	80112d6 <UG_Update+0x182>
     gui->device->flush();
 80112cc:	4b04      	ldr	r3, [pc, #16]	@ (80112e0 <UG_Update+0x18c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	4798      	blx	r3
   }
}
 80112d6:	46c0      	nop			@ (mov r8, r8)
 80112d8:	46bd      	mov	sp, r7
 80112da:	b002      	add	sp, #8
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	46c0      	nop			@ (mov r8, r8)
 80112e0:	20000c44 	.word	0x20000c44

080112e4 <_UG_WindowDrawTitle>:
=======
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	7a1b      	ldrb	r3, [r3, #8]
 80103dc:	001a      	movs	r2, r3
 80103de:	2308      	movs	r3, #8
 80103e0:	4013      	ands	r3, r2
 80103e2:	d00b      	beq.n	80103fc <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	0018      	movs	r0, r3
 80103e8:	f7ff fa54 	bl	800f894 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	0018      	movs	r0, r3
 80103f0:	f7ff fb46 	bl	800fa80 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	0018      	movs	r0, r3
 80103f8:	f7ff fba2 	bl	800fb40 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80103fc:	4b07      	ldr	r3, [pc, #28]	@ (801041c <UG_Update+0x18c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d004      	beq.n	8010412 <UG_Update+0x182>
     gui->device->flush();
 8010408:	4b04      	ldr	r3, [pc, #16]	@ (801041c <UG_Update+0x18c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	4798      	blx	r3
   }
}
 8010412:	46c0      	nop			@ (mov r8, r8)
 8010414:	46bd      	mov	sp, r7
 8010416:	b002      	add	sp, #8
 8010418:	bd80      	pop	{r7, pc}
 801041a:	46c0      	nop			@ (mov r8, r8)
 801041c:	20000b3c 	.word	0x20000b3c

08010420 <_UG_WindowDrawTitle>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
<<<<<<< HEAD
 80112e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112e6:	b08f      	sub	sp, #60	@ 0x3c
 80112e8:	af02      	add	r7, sp, #8
 80112ea:	6078      	str	r0, [r7, #4]
=======
 8010420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010422:	b08f      	sub	sp, #60	@ 0x3c
 8010424:	af02      	add	r7, sp, #8
 8010426:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
<<<<<<< HEAD
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d100      	bne.n	80112f4 <_UG_WindowDrawTitle+0x10>
 80112f2:	e0cd      	b.n	8011490 <_UG_WindowDrawTitle+0x1ac>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	7a1b      	ldrb	r3, [r3, #8]
 80112f8:	001a      	movs	r2, r3
 80112fa:	2302      	movs	r3, #2
 80112fc:	4013      	ands	r3, r2
 80112fe:	d100      	bne.n	8011302 <_UG_WindowDrawTitle+0x1e>
 8011300:	e0c6      	b.n	8011490 <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 8011302:	212e      	movs	r1, #46	@ 0x2e
 8011304:	187b      	adds	r3, r7, r1
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	89d2      	ldrh	r2, [r2, #14]
 801130a:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 801130c:	202c      	movs	r0, #44	@ 0x2c
 801130e:	183b      	adds	r3, r7, r0
 8011310:	687a      	ldr	r2, [r7, #4]
 8011312:	8a12      	ldrh	r2, [r2, #16]
 8011314:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 8011316:	242a      	movs	r4, #42	@ 0x2a
 8011318:	193b      	adds	r3, r7, r4
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	8a52      	ldrh	r2, [r2, #18]
 801131e:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 8011320:	2528      	movs	r5, #40	@ 0x28
 8011322:	197b      	adds	r3, r7, r5
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	8a92      	ldrh	r2, [r2, #20]
 8011328:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7d9b      	ldrb	r3, [r3, #22]
 801132e:	001a      	movs	r2, r3
 8011330:	2301      	movs	r3, #1
 8011332:	4013      	ands	r3, r2
 8011334:	d017      	beq.n	8011366 <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 8011336:	187b      	adds	r3, r7, r1
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	3303      	adds	r3, #3
 801133c:	b29a      	uxth	r2, r3
 801133e:	187b      	adds	r3, r7, r1
 8011340:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8011342:	183b      	adds	r3, r7, r0
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	3303      	adds	r3, #3
 8011348:	b29a      	uxth	r2, r3
 801134a:	183b      	adds	r3, r7, r0
 801134c:	801a      	strh	r2, [r3, #0]
         xe-=3;
 801134e:	193b      	adds	r3, r7, r4
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	3b03      	subs	r3, #3
 8011354:	b29a      	uxth	r2, r3
 8011356:	193b      	adds	r3, r7, r4
 8011358:	801a      	strh	r2, [r3, #0]
         ye-=3;
 801135a:	197b      	adds	r3, r7, r5
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	3b03      	subs	r3, #3
 8011360:	b29a      	uxth	r2, r3
 8011362:	197b      	adds	r3, r7, r5
 8011364:	801a      	strh	r2, [r3, #0]
=======
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d100      	bne.n	8010430 <_UG_WindowDrawTitle+0x10>
 801042e:	e0cd      	b.n	80105cc <_UG_WindowDrawTitle+0x1ac>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7a1b      	ldrb	r3, [r3, #8]
 8010434:	001a      	movs	r2, r3
 8010436:	2302      	movs	r3, #2
 8010438:	4013      	ands	r3, r2
 801043a:	d100      	bne.n	801043e <_UG_WindowDrawTitle+0x1e>
 801043c:	e0c6      	b.n	80105cc <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 801043e:	212e      	movs	r1, #46	@ 0x2e
 8010440:	187b      	adds	r3, r7, r1
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	89d2      	ldrh	r2, [r2, #14]
 8010446:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 8010448:	202c      	movs	r0, #44	@ 0x2c
 801044a:	183b      	adds	r3, r7, r0
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	8a12      	ldrh	r2, [r2, #16]
 8010450:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 8010452:	242a      	movs	r4, #42	@ 0x2a
 8010454:	193b      	adds	r3, r7, r4
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	8a52      	ldrh	r2, [r2, #18]
 801045a:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 801045c:	2528      	movs	r5, #40	@ 0x28
 801045e:	197b      	adds	r3, r7, r5
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	8a92      	ldrh	r2, [r2, #20]
 8010464:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	7d9b      	ldrb	r3, [r3, #22]
 801046a:	001a      	movs	r2, r3
 801046c:	2301      	movs	r3, #1
 801046e:	4013      	ands	r3, r2
 8010470:	d017      	beq.n	80104a2 <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 8010472:	187b      	adds	r3, r7, r1
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	3303      	adds	r3, #3
 8010478:	b29a      	uxth	r2, r3
 801047a:	187b      	adds	r3, r7, r1
 801047c:	801a      	strh	r2, [r3, #0]
         ys+=3;
 801047e:	183b      	adds	r3, r7, r0
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	3303      	adds	r3, #3
 8010484:	b29a      	uxth	r2, r3
 8010486:	183b      	adds	r3, r7, r0
 8010488:	801a      	strh	r2, [r3, #0]
         xe-=3;
 801048a:	193b      	adds	r3, r7, r4
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	3b03      	subs	r3, #3
 8010490:	b29a      	uxth	r2, r3
 8010492:	193b      	adds	r3, r7, r4
 8010494:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8010496:	197b      	adds	r3, r7, r5
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	3b03      	subs	r3, #3
 801049c:	b29a      	uxth	r2, r3
 801049e:	197b      	adds	r3, r7, r5
 80104a0:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
<<<<<<< HEAD
 8011366:	4b4d      	ldr	r3, [pc, #308]	@ (801149c <_UG_WindowDrawTitle+0x1b8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	691b      	ldr	r3, [r3, #16]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	429a      	cmp	r2, r3
 8011370:	d109      	bne.n	8011386 <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8011376:	210c      	movs	r1, #12
 8011378:	187b      	adds	r3, r7, r1
 801137a:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8011380:	187b      	adds	r3, r7, r1
 8011382:	821a      	strh	r2, [r3, #16]
 8011384:	e008      	b.n	8011398 <_UG_WindowDrawTitle+0xb4>
=======
 80104a2:	4b4d      	ldr	r3, [pc, #308]	@ (80105d8 <_UG_WindowDrawTitle+0x1b8>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d109      	bne.n	80104c2 <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80104b2:	210c      	movs	r1, #12
 80104b4:	187b      	adds	r3, r7, r1
 80104b6:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80104bc:	187b      	adds	r3, r7, r1
 80104be:	821a      	strh	r2, [r3, #16]
 80104c0:	e008      	b.n	80104d4 <_UG_WindowDrawTitle+0xb4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
      else
      {
         txt.bc = wnd->title.ibc;
<<<<<<< HEAD
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801138a:	210c      	movs	r1, #12
 801138c:	187b      	adds	r3, r7, r1
 801138e:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011394:	187b      	adds	r3, r7, r1
 8011396:	821a      	strh	r2, [r3, #16]
=======
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80104c6:	210c      	movs	r1, #12
 80104c8:	187b      	adds	r3, r7, r1
 80104ca:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80104d0:	187b      	adds	r3, r7, r1
 80104d2:	821a      	strh	r2, [r3, #16]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
<<<<<<< HEAD
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	222c      	movs	r2, #44	@ 0x2c
 801139c:	5c9b      	ldrb	r3, [r3, r2]
 801139e:	001a      	movs	r2, r3
 80113a0:	212c      	movs	r1, #44	@ 0x2c
 80113a2:	187b      	adds	r3, r7, r1
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	18d3      	adds	r3, r2, r3
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	3b01      	subs	r3, #1
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	b21d      	sxth	r5, r3
 80113b0:	260c      	movs	r6, #12
 80113b2:	19bb      	adds	r3, r7, r6
 80113b4:	8a5b      	ldrh	r3, [r3, #18]
 80113b6:	222a      	movs	r2, #42	@ 0x2a
 80113b8:	18ba      	adds	r2, r7, r2
 80113ba:	2000      	movs	r0, #0
 80113bc:	5e14      	ldrsh	r4, [r2, r0]
 80113be:	187a      	adds	r2, r7, r1
 80113c0:	2000      	movs	r0, #0
 80113c2:	5e11      	ldrsh	r1, [r2, r0]
 80113c4:	202e      	movs	r0, #46	@ 0x2e
 80113c6:	183a      	adds	r2, r7, r0
 80113c8:	2000      	movs	r0, #0
 80113ca:	5e10      	ldrsh	r0, [r2, r0]
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	002b      	movs	r3, r5
 80113d0:	0022      	movs	r2, r4
 80113d2:	f7fe f89d 	bl	800f510 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	699a      	ldr	r2, [r3, #24]
 80113da:	19bb      	adds	r3, r7, r6
 80113dc:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	69da      	ldr	r2, [r3, #28]
 80113e2:	19bb      	adds	r3, r7, r6
 80113e4:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 80113e6:	202e      	movs	r0, #46	@ 0x2e
 80113e8:	183b      	adds	r3, r7, r0
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	3303      	adds	r3, #3
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	b21a      	sxth	r2, r3
 80113f2:	0031      	movs	r1, r6
 80113f4:	187b      	adds	r3, r7, r1
 80113f6:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 80113f8:	187b      	adds	r3, r7, r1
 80113fa:	242c      	movs	r4, #44	@ 0x2c
 80113fc:	193a      	adds	r2, r7, r4
 80113fe:	8812      	ldrh	r2, [r2, #0]
 8011400:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 8011402:	187b      	adds	r3, r7, r1
 8011404:	262a      	movs	r6, #42	@ 0x2a
 8011406:	19ba      	adds	r2, r7, r6
 8011408:	8812      	ldrh	r2, [r2, #0]
 801140a:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	222c      	movs	r2, #44	@ 0x2c
 8011410:	5c9b      	ldrb	r3, [r3, r2]
 8011412:	001a      	movs	r2, r3
 8011414:	193b      	adds	r3, r7, r4
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	18d3      	adds	r3, r2, r3
 801141a:	b29b      	uxth	r3, r3
 801141c:	3b01      	subs	r3, #1
 801141e:	b29b      	uxth	r3, r3
 8011420:	b21a      	sxth	r2, r3
 8011422:	187b      	adds	r3, r7, r1
 8011424:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2222      	movs	r2, #34	@ 0x22
 801142a:	5c9a      	ldrb	r2, [r3, r2]
 801142c:	187b      	adds	r3, r7, r1
 801142e:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2220      	movs	r2, #32
 8011434:	569b      	ldrsb	r3, [r3, r2]
 8011436:	001a      	movs	r2, r3
 8011438:	187b      	adds	r3, r7, r1
 801143a:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2221      	movs	r2, #33	@ 0x21
 8011440:	569b      	ldrsb	r3, [r3, r2]
 8011442:	001a      	movs	r2, r3
 8011444:	187b      	adds	r3, r7, r1
 8011446:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 8011448:	187b      	adds	r3, r7, r1
 801144a:	0018      	movs	r0, r3
 801144c:	f7ff fb36 	bl	8010abc <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	222c      	movs	r2, #44	@ 0x2c
 8011454:	5c9b      	ldrb	r3, [r3, r2]
 8011456:	001a      	movs	r2, r3
 8011458:	193b      	adds	r3, r7, r4
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	18d3      	adds	r3, r2, r3
 801145e:	b29b      	uxth	r3, r3
 8011460:	b219      	sxth	r1, r3
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	222c      	movs	r2, #44	@ 0x2c
 8011466:	5c9b      	ldrb	r3, [r3, r2]
 8011468:	001a      	movs	r2, r3
 801146a:	193b      	adds	r3, r7, r4
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	18d3      	adds	r3, r2, r3
 8011470:	b29b      	uxth	r3, r3
 8011472:	b21c      	sxth	r4, r3
 8011474:	4d0a      	ldr	r5, [pc, #40]	@ (80114a0 <_UG_WindowDrawTitle+0x1bc>)
 8011476:	19bb      	adds	r3, r7, r6
 8011478:	2200      	movs	r2, #0
 801147a:	5e9a      	ldrsh	r2, [r3, r2]
 801147c:	202e      	movs	r0, #46	@ 0x2e
 801147e:	183b      	adds	r3, r7, r0
 8011480:	2000      	movs	r0, #0
 8011482:	5e18      	ldrsh	r0, [r3, r0]
 8011484:	9500      	str	r5, [sp, #0]
 8011486:	0023      	movs	r3, r4
 8011488:	f7fe f8e8 	bl	800f65c <UG_DrawLine>
      return UG_RESULT_OK;
 801148c:	2300      	movs	r3, #0
 801148e:	e001      	b.n	8011494 <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 8011490:	2301      	movs	r3, #1
 8011492:	425b      	negs	r3, r3
}
 8011494:	0018      	movs	r0, r3
 8011496:	46bd      	mov	sp, r7
 8011498:	b00d      	add	sp, #52	@ 0x34
 801149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801149c:	20000c44 	.word	0x20000c44
 80114a0:	00009d13 	.word	0x00009d13

080114a4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80114a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a6:	b089      	sub	sp, #36	@ 0x24
 80114a8:	af02      	add	r7, sp, #8
 80114aa:	6078      	str	r0, [r7, #4]
=======
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	222c      	movs	r2, #44	@ 0x2c
 80104d8:	5c9b      	ldrb	r3, [r3, r2]
 80104da:	001a      	movs	r2, r3
 80104dc:	212c      	movs	r1, #44	@ 0x2c
 80104de:	187b      	adds	r3, r7, r1
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	18d3      	adds	r3, r2, r3
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	3b01      	subs	r3, #1
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	b21d      	sxth	r5, r3
 80104ec:	260c      	movs	r6, #12
 80104ee:	19bb      	adds	r3, r7, r6
 80104f0:	8a5b      	ldrh	r3, [r3, #18]
 80104f2:	222a      	movs	r2, #42	@ 0x2a
 80104f4:	18ba      	adds	r2, r7, r2
 80104f6:	2000      	movs	r0, #0
 80104f8:	5e14      	ldrsh	r4, [r2, r0]
 80104fa:	187a      	adds	r2, r7, r1
 80104fc:	2000      	movs	r0, #0
 80104fe:	5e11      	ldrsh	r1, [r2, r0]
 8010500:	202e      	movs	r0, #46	@ 0x2e
 8010502:	183a      	adds	r2, r7, r0
 8010504:	2000      	movs	r0, #0
 8010506:	5e10      	ldrsh	r0, [r2, r0]
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	002b      	movs	r3, r5
 801050c:	0022      	movs	r2, r4
 801050e:	f7fe f89d 	bl	800e64c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	699a      	ldr	r2, [r3, #24]
 8010516:	19bb      	adds	r3, r7, r6
 8010518:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	69da      	ldr	r2, [r3, #28]
 801051e:	19bb      	adds	r3, r7, r6
 8010520:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 8010522:	202e      	movs	r0, #46	@ 0x2e
 8010524:	183b      	adds	r3, r7, r0
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	3303      	adds	r3, #3
 801052a:	b29b      	uxth	r3, r3
 801052c:	b21a      	sxth	r2, r3
 801052e:	0031      	movs	r1, r6
 8010530:	187b      	adds	r3, r7, r1
 8010532:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 8010534:	187b      	adds	r3, r7, r1
 8010536:	242c      	movs	r4, #44	@ 0x2c
 8010538:	193a      	adds	r2, r7, r4
 801053a:	8812      	ldrh	r2, [r2, #0]
 801053c:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 801053e:	187b      	adds	r3, r7, r1
 8010540:	262a      	movs	r6, #42	@ 0x2a
 8010542:	19ba      	adds	r2, r7, r6
 8010544:	8812      	ldrh	r2, [r2, #0]
 8010546:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	222c      	movs	r2, #44	@ 0x2c
 801054c:	5c9b      	ldrb	r3, [r3, r2]
 801054e:	001a      	movs	r2, r3
 8010550:	193b      	adds	r3, r7, r4
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	18d3      	adds	r3, r2, r3
 8010556:	b29b      	uxth	r3, r3
 8010558:	3b01      	subs	r3, #1
 801055a:	b29b      	uxth	r3, r3
 801055c:	b21a      	sxth	r2, r3
 801055e:	187b      	adds	r3, r7, r1
 8010560:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2222      	movs	r2, #34	@ 0x22
 8010566:	5c9a      	ldrb	r2, [r3, r2]
 8010568:	187b      	adds	r3, r7, r1
 801056a:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2220      	movs	r2, #32
 8010570:	569b      	ldrsb	r3, [r3, r2]
 8010572:	001a      	movs	r2, r3
 8010574:	187b      	adds	r3, r7, r1
 8010576:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2221      	movs	r2, #33	@ 0x21
 801057c:	569b      	ldrsb	r3, [r3, r2]
 801057e:	001a      	movs	r2, r3
 8010580:	187b      	adds	r3, r7, r1
 8010582:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 8010584:	187b      	adds	r3, r7, r1
 8010586:	0018      	movs	r0, r3
 8010588:	f7ff fb36 	bl	800fbf8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	222c      	movs	r2, #44	@ 0x2c
 8010590:	5c9b      	ldrb	r3, [r3, r2]
 8010592:	001a      	movs	r2, r3
 8010594:	193b      	adds	r3, r7, r4
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	18d3      	adds	r3, r2, r3
 801059a:	b29b      	uxth	r3, r3
 801059c:	b219      	sxth	r1, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	222c      	movs	r2, #44	@ 0x2c
 80105a2:	5c9b      	ldrb	r3, [r3, r2]
 80105a4:	001a      	movs	r2, r3
 80105a6:	193b      	adds	r3, r7, r4
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	18d3      	adds	r3, r2, r3
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	b21c      	sxth	r4, r3
 80105b0:	4d0a      	ldr	r5, [pc, #40]	@ (80105dc <_UG_WindowDrawTitle+0x1bc>)
 80105b2:	19bb      	adds	r3, r7, r6
 80105b4:	2200      	movs	r2, #0
 80105b6:	5e9a      	ldrsh	r2, [r3, r2]
 80105b8:	202e      	movs	r0, #46	@ 0x2e
 80105ba:	183b      	adds	r3, r7, r0
 80105bc:	2000      	movs	r0, #0
 80105be:	5e18      	ldrsh	r0, [r3, r0]
 80105c0:	9500      	str	r5, [sp, #0]
 80105c2:	0023      	movs	r3, r4
 80105c4:	f7fe f8e8 	bl	800e798 <UG_DrawLine>
      return UG_RESULT_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	e001      	b.n	80105d0 <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 80105cc:	2301      	movs	r3, #1
 80105ce:	425b      	negs	r3, r3
}
 80105d0:	0018      	movs	r0, r3
 80105d2:	46bd      	mov	sp, r7
 80105d4:	b00d      	add	sp, #52	@ 0x34
 80105d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d8:	20000b3c 	.word	0x20000b3c
 80105dc:	00009d13 	.word	0x00009d13

080105e0 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80105e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105e2:	b089      	sub	sp, #36	@ 0x24
 80105e4:	af02      	add	r7, sp, #8
 80105e6:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
<<<<<<< HEAD
 80114ac:	2014      	movs	r0, #20
 80114ae:	183b      	adds	r3, r7, r0
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	89d2      	ldrh	r2, [r2, #14]
 80114b4:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 80114b6:	2112      	movs	r1, #18
 80114b8:	187b      	adds	r3, r7, r1
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	8a12      	ldrh	r2, [r2, #16]
 80114be:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 80114c0:	2510      	movs	r5, #16
 80114c2:	197b      	adds	r3, r7, r5
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	8a52      	ldrh	r2, [r2, #18]
 80114c8:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 80114ca:	240e      	movs	r4, #14
 80114cc:	193b      	adds	r3, r7, r4
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	8a92      	ldrh	r2, [r2, #20]
 80114d2:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7a1b      	ldrb	r3, [r3, #8]
 80114d8:	2220      	movs	r2, #32
 80114da:	4393      	bics	r3, r2
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	7a1b      	ldrb	r3, [r3, #8]
 80114e6:	001a      	movs	r2, r3
 80114e8:	2308      	movs	r3, #8
 80114ea:	4013      	ands	r3, r2
 80114ec:	d100      	bne.n	80114f0 <_UG_WindowUpdate+0x4c>
 80114ee:	e0af      	b.n	8011650 <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7d9b      	ldrb	r3, [r3, #22]
 80114f4:	001a      	movs	r2, r3
 80114f6:	2301      	movs	r3, #1
 80114f8:	4013      	ands	r3, r2
 80114fa:	d033      	beq.n	8011564 <_UG_WindowUpdate+0xc0>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7a1b      	ldrb	r3, [r3, #8]
 8011500:	001a      	movs	r2, r3
 8011502:	2340      	movs	r3, #64	@ 0x40
 8011504:	4013      	ands	r3, r2
 8011506:	d12d      	bne.n	8011564 <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011508:	193b      	adds	r3, r7, r4
 801150a:	2400      	movs	r4, #0
 801150c:	5f1c      	ldrsh	r4, [r3, r4]
 801150e:	197b      	adds	r3, r7, r5
 8011510:	2200      	movs	r2, #0
 8011512:	5e9a      	ldrsh	r2, [r3, r2]
 8011514:	000e      	movs	r6, r1
 8011516:	187b      	adds	r3, r7, r1
 8011518:	2100      	movs	r1, #0
 801151a:	5e59      	ldrsh	r1, [r3, r1]
 801151c:	0005      	movs	r5, r0
 801151e:	183b      	adds	r3, r7, r0
 8011520:	2000      	movs	r0, #0
 8011522:	5e18      	ldrsh	r0, [r3, r0]
 8011524:	4b56      	ldr	r3, [pc, #344]	@ (8011680 <_UG_WindowUpdate+0x1dc>)
 8011526:	9300      	str	r3, [sp, #0]
 8011528:	0023      	movs	r3, r4
 801152a:	f7ff fc95 	bl	8010e58 <_UG_DrawObjectFrame>
         xs+=3;
 801152e:	0028      	movs	r0, r5
 8011530:	183b      	adds	r3, r7, r0
 8011532:	881b      	ldrh	r3, [r3, #0]
 8011534:	3303      	adds	r3, #3
 8011536:	b29a      	uxth	r2, r3
 8011538:	183b      	adds	r3, r7, r0
 801153a:	801a      	strh	r2, [r3, #0]
         ys+=3;
 801153c:	19bb      	adds	r3, r7, r6
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	3303      	adds	r3, #3
 8011542:	b29a      	uxth	r2, r3
 8011544:	19bb      	adds	r3, r7, r6
 8011546:	801a      	strh	r2, [r3, #0]
         xe-=3;
 8011548:	2510      	movs	r5, #16
 801154a:	197b      	adds	r3, r7, r5
 801154c:	881b      	ldrh	r3, [r3, #0]
 801154e:	3b03      	subs	r3, #3
 8011550:	b29a      	uxth	r2, r3
 8011552:	197b      	adds	r3, r7, r5
 8011554:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8011556:	240e      	movs	r4, #14
 8011558:	193b      	adds	r3, r7, r4
 801155a:	881b      	ldrh	r3, [r3, #0]
 801155c:	3b03      	subs	r3, #3
 801155e:	b29a      	uxth	r2, r3
 8011560:	193b      	adds	r3, r7, r4
 8011562:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	7d9b      	ldrb	r3, [r3, #22]
 8011568:	001a      	movs	r2, r3
 801156a:	2302      	movs	r3, #2
 801156c:	4013      	ands	r3, r2
 801156e:	d01e      	beq.n	80115ae <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	0018      	movs	r0, r3
 8011574:	f7ff feb6 	bl	80112e4 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	222c      	movs	r2, #44	@ 0x2c
 801157c:	5c9b      	ldrb	r3, [r3, r2]
 801157e:	001a      	movs	r2, r3
 8011580:	2112      	movs	r1, #18
 8011582:	187b      	adds	r3, r7, r1
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	18d3      	adds	r3, r2, r3
 8011588:	b29b      	uxth	r3, r3
 801158a:	3301      	adds	r3, #1
 801158c:	b29a      	uxth	r2, r3
 801158e:	187b      	adds	r3, r7, r1
 8011590:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	7a1b      	ldrb	r3, [r3, #8]
 8011596:	001a      	movs	r2, r3
 8011598:	2340      	movs	r3, #64	@ 0x40
 801159a:	4013      	ands	r3, r2
 801159c:	d007      	beq.n	80115ae <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	7a1b      	ldrb	r3, [r3, #8]
 80115a2:	2240      	movs	r2, #64	@ 0x40
 80115a4:	4393      	bics	r3, r2
 80115a6:	b2da      	uxtb	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	721a      	strb	r2, [r3, #8]
            return;
 80115ac:	e064      	b.n	8011678 <_UG_WindowUpdate+0x1d4>
=======
 80105e8:	2014      	movs	r0, #20
 80105ea:	183b      	adds	r3, r7, r0
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	89d2      	ldrh	r2, [r2, #14]
 80105f0:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 80105f2:	2112      	movs	r1, #18
 80105f4:	187b      	adds	r3, r7, r1
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	8a12      	ldrh	r2, [r2, #16]
 80105fa:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 80105fc:	2510      	movs	r5, #16
 80105fe:	197b      	adds	r3, r7, r5
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	8a52      	ldrh	r2, [r2, #18]
 8010604:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 8010606:	240e      	movs	r4, #14
 8010608:	193b      	adds	r3, r7, r4
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	8a92      	ldrh	r2, [r2, #20]
 801060e:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7a1b      	ldrb	r3, [r3, #8]
 8010614:	2220      	movs	r2, #32
 8010616:	4393      	bics	r3, r2
 8010618:	b2da      	uxtb	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	7a1b      	ldrb	r3, [r3, #8]
 8010622:	001a      	movs	r2, r3
 8010624:	2308      	movs	r3, #8
 8010626:	4013      	ands	r3, r2
 8010628:	d100      	bne.n	801062c <_UG_WindowUpdate+0x4c>
 801062a:	e0af      	b.n	801078c <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7d9b      	ldrb	r3, [r3, #22]
 8010630:	001a      	movs	r2, r3
 8010632:	2301      	movs	r3, #1
 8010634:	4013      	ands	r3, r2
 8010636:	d033      	beq.n	80106a0 <_UG_WindowUpdate+0xc0>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	7a1b      	ldrb	r3, [r3, #8]
 801063c:	001a      	movs	r2, r3
 801063e:	2340      	movs	r3, #64	@ 0x40
 8010640:	4013      	ands	r3, r2
 8010642:	d12d      	bne.n	80106a0 <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8010644:	193b      	adds	r3, r7, r4
 8010646:	2400      	movs	r4, #0
 8010648:	5f1c      	ldrsh	r4, [r3, r4]
 801064a:	197b      	adds	r3, r7, r5
 801064c:	2200      	movs	r2, #0
 801064e:	5e9a      	ldrsh	r2, [r3, r2]
 8010650:	000e      	movs	r6, r1
 8010652:	187b      	adds	r3, r7, r1
 8010654:	2100      	movs	r1, #0
 8010656:	5e59      	ldrsh	r1, [r3, r1]
 8010658:	0005      	movs	r5, r0
 801065a:	183b      	adds	r3, r7, r0
 801065c:	2000      	movs	r0, #0
 801065e:	5e18      	ldrsh	r0, [r3, r0]
 8010660:	4b56      	ldr	r3, [pc, #344]	@ (80107bc <_UG_WindowUpdate+0x1dc>)
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	0023      	movs	r3, r4
 8010666:	f7ff fc95 	bl	800ff94 <_UG_DrawObjectFrame>
         xs+=3;
 801066a:	0028      	movs	r0, r5
 801066c:	183b      	adds	r3, r7, r0
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	3303      	adds	r3, #3
 8010672:	b29a      	uxth	r2, r3
 8010674:	183b      	adds	r3, r7, r0
 8010676:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8010678:	19bb      	adds	r3, r7, r6
 801067a:	881b      	ldrh	r3, [r3, #0]
 801067c:	3303      	adds	r3, #3
 801067e:	b29a      	uxth	r2, r3
 8010680:	19bb      	adds	r3, r7, r6
 8010682:	801a      	strh	r2, [r3, #0]
         xe-=3;
 8010684:	2510      	movs	r5, #16
 8010686:	197b      	adds	r3, r7, r5
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	3b03      	subs	r3, #3
 801068c:	b29a      	uxth	r2, r3
 801068e:	197b      	adds	r3, r7, r5
 8010690:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8010692:	240e      	movs	r4, #14
 8010694:	193b      	adds	r3, r7, r4
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	3b03      	subs	r3, #3
 801069a:	b29a      	uxth	r2, r3
 801069c:	193b      	adds	r3, r7, r4
 801069e:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	7d9b      	ldrb	r3, [r3, #22]
 80106a4:	001a      	movs	r2, r3
 80106a6:	2302      	movs	r3, #2
 80106a8:	4013      	ands	r3, r2
 80106aa:	d01e      	beq.n	80106ea <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	0018      	movs	r0, r3
 80106b0:	f7ff feb6 	bl	8010420 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	222c      	movs	r2, #44	@ 0x2c
 80106b8:	5c9b      	ldrb	r3, [r3, r2]
 80106ba:	001a      	movs	r2, r3
 80106bc:	2112      	movs	r1, #18
 80106be:	187b      	adds	r3, r7, r1
 80106c0:	881b      	ldrh	r3, [r3, #0]
 80106c2:	18d3      	adds	r3, r2, r3
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	3301      	adds	r3, #1
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	187b      	adds	r3, r7, r1
 80106cc:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	7a1b      	ldrb	r3, [r3, #8]
 80106d2:	001a      	movs	r2, r3
 80106d4:	2340      	movs	r3, #64	@ 0x40
 80106d6:	4013      	ands	r3, r2
 80106d8:	d007      	beq.n	80106ea <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7a1b      	ldrb	r3, [r3, #8]
 80106de:	2240      	movs	r2, #64	@ 0x40
 80106e0:	4393      	bics	r3, r2
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	721a      	strb	r2, [r3, #8]
            return;
 80106e8:	e064      	b.n	80107b4 <_UG_WindowUpdate+0x1d4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
<<<<<<< HEAD
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	899b      	ldrh	r3, [r3, #12]
 80115b2:	220e      	movs	r2, #14
 80115b4:	18ba      	adds	r2, r7, r2
 80115b6:	2500      	movs	r5, #0
 80115b8:	5f55      	ldrsh	r5, [r2, r5]
 80115ba:	2210      	movs	r2, #16
 80115bc:	18ba      	adds	r2, r7, r2
 80115be:	2400      	movs	r4, #0
 80115c0:	5f14      	ldrsh	r4, [r2, r4]
 80115c2:	2212      	movs	r2, #18
 80115c4:	18ba      	adds	r2, r7, r2
 80115c6:	2100      	movs	r1, #0
 80115c8:	5e51      	ldrsh	r1, [r2, r1]
 80115ca:	2214      	movs	r2, #20
 80115cc:	18ba      	adds	r2, r7, r2
 80115ce:	2000      	movs	r0, #0
 80115d0:	5e10      	ldrsh	r0, [r2, r0]
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	002b      	movs	r3, r5
 80115d6:	0022      	movs	r2, r4
 80115d8:	f7fd ff9a 	bl	800f510 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	781a      	ldrb	r2, [r3, #0]
 80115e0:	230c      	movs	r3, #12
 80115e2:	18fb      	adds	r3, r7, r3
 80115e4:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80115e6:	2316      	movs	r3, #22
 80115e8:	18fb      	adds	r3, r7, r3
 80115ea:	2200      	movs	r2, #0
 80115ec:	801a      	strh	r2, [r3, #0]
 80115ee:	e026      	b.n	801163e <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	2316      	movs	r3, #22
 80115f6:	18fb      	adds	r3, r7, r3
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	015b      	lsls	r3, r3, #5
 80115fc:	18d3      	adds	r3, r2, r3
 80115fe:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	001a      	movs	r2, r3
 8011606:	2301      	movs	r3, #1
 8011608:	4013      	ands	r3, r2
 801160a:	d112      	bne.n	8011632 <_UG_WindowUpdate+0x18e>
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	001a      	movs	r2, r3
 8011612:	2302      	movs	r3, #2
 8011614:	4013      	ands	r3, r2
 8011616:	d00c      	beq.n	8011632 <_UG_WindowUpdate+0x18e>
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	001a      	movs	r2, r3
 801161e:	2308      	movs	r3, #8
 8011620:	4013      	ands	r3, r2
 8011622:	d006      	beq.n	8011632 <_UG_WindowUpdate+0x18e>
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	2260      	movs	r2, #96	@ 0x60
 801162a:	4313      	orrs	r3, r2
 801162c:	b2da      	uxtb	r2, r3
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8011632:	2116      	movs	r1, #22
 8011634:	187b      	adds	r3, r7, r1
 8011636:	881a      	ldrh	r2, [r3, #0]
 8011638:	187b      	adds	r3, r7, r1
 801163a:	3201      	adds	r2, #1
 801163c:	801a      	strh	r2, [r3, #0]
 801163e:	2316      	movs	r3, #22
 8011640:	18fa      	adds	r2, r7, r3
 8011642:	230c      	movs	r3, #12
 8011644:	18fb      	adds	r3, r7, r3
 8011646:	8812      	ldrh	r2, [r2, #0]
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	429a      	cmp	r2, r3
 801164c:	d3d0      	bcc.n	80115f0 <_UG_WindowUpdate+0x14c>
 801164e:	e013      	b.n	8011678 <_UG_WindowUpdate+0x1d4>
=======
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	899b      	ldrh	r3, [r3, #12]
 80106ee:	220e      	movs	r2, #14
 80106f0:	18ba      	adds	r2, r7, r2
 80106f2:	2500      	movs	r5, #0
 80106f4:	5f55      	ldrsh	r5, [r2, r5]
 80106f6:	2210      	movs	r2, #16
 80106f8:	18ba      	adds	r2, r7, r2
 80106fa:	2400      	movs	r4, #0
 80106fc:	5f14      	ldrsh	r4, [r2, r4]
 80106fe:	2212      	movs	r2, #18
 8010700:	18ba      	adds	r2, r7, r2
 8010702:	2100      	movs	r1, #0
 8010704:	5e51      	ldrsh	r1, [r2, r1]
 8010706:	2214      	movs	r2, #20
 8010708:	18ba      	adds	r2, r7, r2
 801070a:	2000      	movs	r0, #0
 801070c:	5e10      	ldrsh	r0, [r2, r0]
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	002b      	movs	r3, r5
 8010712:	0022      	movs	r2, r4
 8010714:	f7fd ff9a 	bl	800e64c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	781a      	ldrb	r2, [r3, #0]
 801071c:	230c      	movs	r3, #12
 801071e:	18fb      	adds	r3, r7, r3
 8010720:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8010722:	2316      	movs	r3, #22
 8010724:	18fb      	adds	r3, r7, r3
 8010726:	2200      	movs	r2, #0
 8010728:	801a      	strh	r2, [r3, #0]
 801072a:	e026      	b.n	801077a <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	2316      	movs	r3, #22
 8010732:	18fb      	adds	r3, r7, r3
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	015b      	lsls	r3, r3, #5
 8010738:	18d3      	adds	r3, r2, r3
 801073a:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	001a      	movs	r2, r3
 8010742:	2301      	movs	r3, #1
 8010744:	4013      	ands	r3, r2
 8010746:	d112      	bne.n	801076e <_UG_WindowUpdate+0x18e>
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	001a      	movs	r2, r3
 801074e:	2302      	movs	r3, #2
 8010750:	4013      	ands	r3, r2
 8010752:	d00c      	beq.n	801076e <_UG_WindowUpdate+0x18e>
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	001a      	movs	r2, r3
 801075a:	2308      	movs	r3, #8
 801075c:	4013      	ands	r3, r2
 801075e:	d006      	beq.n	801076e <_UG_WindowUpdate+0x18e>
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	2260      	movs	r2, #96	@ 0x60
 8010766:	4313      	orrs	r3, r2
 8010768:	b2da      	uxtb	r2, r3
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 801076e:	2116      	movs	r1, #22
 8010770:	187b      	adds	r3, r7, r1
 8010772:	881a      	ldrh	r2, [r3, #0]
 8010774:	187b      	adds	r3, r7, r1
 8010776:	3201      	adds	r2, #1
 8010778:	801a      	strh	r2, [r3, #0]
 801077a:	2316      	movs	r3, #22
 801077c:	18fa      	adds	r2, r7, r3
 801077e:	230c      	movs	r3, #12
 8010780:	18fb      	adds	r3, r7, r3
 8010782:	8812      	ldrh	r2, [r2, #0]
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	429a      	cmp	r2, r3
 8010788:	d3d0      	bcc.n	801072c <_UG_WindowUpdate+0x14c>
 801078a:	e013      	b.n	80107b4 <_UG_WindowUpdate+0x1d4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
<<<<<<< HEAD
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	200e      	movs	r0, #14
 8011654:	5e18      	ldrsh	r0, [r3, r0]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	210e      	movs	r1, #14
 801165a:	5e59      	ldrsh	r1, [r3, r1]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2212      	movs	r2, #18
 8011660:	5e9a      	ldrsh	r2, [r3, r2]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2414      	movs	r4, #20
 8011666:	5f1c      	ldrsh	r4, [r3, r4]
 8011668:	4b06      	ldr	r3, [pc, #24]	@ (8011684 <_UG_WindowUpdate+0x1e0>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2550      	movs	r5, #80	@ 0x50
 801166e:	5b5b      	ldrh	r3, [r3, r5]
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	0023      	movs	r3, r4
 8011674:	f7fd ff4c 	bl	800f510 <UG_FillFrame>
   }
}
 8011678:	46bd      	mov	sp, r7
 801167a:	b007      	add	sp, #28
 801167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801167e:	46c0      	nop			@ (mov r8, r8)
 8011680:	08019d34 	.word	0x08019d34
 8011684:	20000c44 	.word	0x20000c44

08011688 <MX_USB_DEVICE_Init>:
=======
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	200e      	movs	r0, #14
 8010790:	5e18      	ldrsh	r0, [r3, r0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	210e      	movs	r1, #14
 8010796:	5e59      	ldrsh	r1, [r3, r1]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2212      	movs	r2, #18
 801079c:	5e9a      	ldrsh	r2, [r3, r2]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2414      	movs	r4, #20
 80107a2:	5f1c      	ldrsh	r4, [r3, r4]
 80107a4:	4b06      	ldr	r3, [pc, #24]	@ (80107c0 <_UG_WindowUpdate+0x1e0>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2550      	movs	r5, #80	@ 0x50
 80107aa:	5b5b      	ldrh	r3, [r3, r5]
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	0023      	movs	r3, r4
 80107b0:	f7fd ff4c 	bl	800e64c <UG_FillFrame>
   }
}
 80107b4:	46bd      	mov	sp, r7
 80107b6:	b007      	add	sp, #28
 80107b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ba:	46c0      	nop			@ (mov r8, r8)
 80107bc:	08018750 	.word	0x08018750
 80107c0:	20000b3c 	.word	0x20000b3c

080107c4 <MX_USB_DEVICE_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 8011688:	b580      	push	{r7, lr}
 801168a:	af00      	add	r7, sp, #0
=======
 80107c4:	b580      	push	{r7, lr}
 80107c6:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 801168c:	4914      	ldr	r1, [pc, #80]	@ (80116e0 <MX_USB_DEVICE_Init+0x58>)
 801168e:	4b15      	ldr	r3, [pc, #84]	@ (80116e4 <MX_USB_DEVICE_Init+0x5c>)
 8011690:	2200      	movs	r2, #0
 8011692:	0018      	movs	r0, r3
 8011694:	f7fb ff98 	bl	800d5c8 <USBD_Init>
 8011698:	1e03      	subs	r3, r0, #0
 801169a:	d001      	beq.n	80116a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801169c:	f7f2 fb0e 	bl	8003cbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80116a0:	4a11      	ldr	r2, [pc, #68]	@ (80116e8 <MX_USB_DEVICE_Init+0x60>)
 80116a2:	4b10      	ldr	r3, [pc, #64]	@ (80116e4 <MX_USB_DEVICE_Init+0x5c>)
 80116a4:	0011      	movs	r1, r2
 80116a6:	0018      	movs	r0, r3
 80116a8:	f7fb ffbf 	bl	800d62a <USBD_RegisterClass>
 80116ac:	1e03      	subs	r3, r0, #0
 80116ae:	d001      	beq.n	80116b4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80116b0:	f7f2 fb04 	bl	8003cbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80116b4:	4a0d      	ldr	r2, [pc, #52]	@ (80116ec <MX_USB_DEVICE_Init+0x64>)
 80116b6:	4b0b      	ldr	r3, [pc, #44]	@ (80116e4 <MX_USB_DEVICE_Init+0x5c>)
 80116b8:	0011      	movs	r1, r2
 80116ba:	0018      	movs	r0, r3
 80116bc:	f7fb fed4 	bl	800d468 <USBD_CDC_RegisterInterface>
 80116c0:	1e03      	subs	r3, r0, #0
 80116c2:	d001      	beq.n	80116c8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80116c4:	f7f2 fafa 	bl	8003cbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80116c8:	4b06      	ldr	r3, [pc, #24]	@ (80116e4 <MX_USB_DEVICE_Init+0x5c>)
 80116ca:	0018      	movs	r0, r3
 80116cc:	f7fb ffcd 	bl	800d66a <USBD_Start>
 80116d0:	1e03      	subs	r3, r0, #0
 80116d2:	d001      	beq.n	80116d8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80116d4:	f7f2 faf2 	bl	8003cbc <Error_Handler>
=======
 80107c8:	4914      	ldr	r1, [pc, #80]	@ (801081c <MX_USB_DEVICE_Init+0x58>)
 80107ca:	4b15      	ldr	r3, [pc, #84]	@ (8010820 <MX_USB_DEVICE_Init+0x5c>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	0018      	movs	r0, r3
 80107d0:	f7fb ff98 	bl	800c704 <USBD_Init>
 80107d4:	1e03      	subs	r3, r0, #0
 80107d6:	d001      	beq.n	80107dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80107d8:	f7f2 fa30 	bl	8002c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80107dc:	4a11      	ldr	r2, [pc, #68]	@ (8010824 <MX_USB_DEVICE_Init+0x60>)
 80107de:	4b10      	ldr	r3, [pc, #64]	@ (8010820 <MX_USB_DEVICE_Init+0x5c>)
 80107e0:	0011      	movs	r1, r2
 80107e2:	0018      	movs	r0, r3
 80107e4:	f7fb ffbf 	bl	800c766 <USBD_RegisterClass>
 80107e8:	1e03      	subs	r3, r0, #0
 80107ea:	d001      	beq.n	80107f0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80107ec:	f7f2 fa26 	bl	8002c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80107f0:	4a0d      	ldr	r2, [pc, #52]	@ (8010828 <MX_USB_DEVICE_Init+0x64>)
 80107f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010820 <MX_USB_DEVICE_Init+0x5c>)
 80107f4:	0011      	movs	r1, r2
 80107f6:	0018      	movs	r0, r3
 80107f8:	f7fb fed4 	bl	800c5a4 <USBD_CDC_RegisterInterface>
 80107fc:	1e03      	subs	r3, r0, #0
 80107fe:	d001      	beq.n	8010804 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8010800:	f7f2 fa1c 	bl	8002c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010804:	4b06      	ldr	r3, [pc, #24]	@ (8010820 <MX_USB_DEVICE_Init+0x5c>)
 8010806:	0018      	movs	r0, r3
 8010808:	f7fb ffcd 	bl	800c7a6 <USBD_Start>
 801080c:	1e03      	subs	r3, r0, #0
 801080e:	d001      	beq.n	8010814 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8010810:	f7f2 fa14 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 80116d8:	46c0      	nop			@ (mov r8, r8)
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	46c0      	nop			@ (mov r8, r8)
 80116e0:	200001ac 	.word	0x200001ac
 80116e4:	20000c60 	.word	0x20000c60
 80116e8:	20000088 	.word	0x20000088
 80116ec:	2000019c 	.word	0x2000019c

080116f0 <CDC_Init_FS>:
=======
 8010814:	46c0      	nop			@ (mov r8, r8)
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	46c0      	nop			@ (mov r8, r8)
 801081c:	200001b4 	.word	0x200001b4
 8010820:	20000b58 	.word	0x20000b58
 8010824:	20000090 	.word	0x20000090
 8010828:	200001a4 	.word	0x200001a4

0801082c <CDC_Init_FS>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 80116f0:	b580      	push	{r7, lr}
 80116f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80116f4:	4907      	ldr	r1, [pc, #28]	@ (8011714 <CDC_Init_FS+0x24>)
 80116f6:	4b08      	ldr	r3, [pc, #32]	@ (8011718 <CDC_Init_FS+0x28>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	0018      	movs	r0, r3
 80116fc:	f7fb fecf 	bl	800d49e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011700:	4a06      	ldr	r2, [pc, #24]	@ (801171c <CDC_Init_FS+0x2c>)
 8011702:	4b05      	ldr	r3, [pc, #20]	@ (8011718 <CDC_Init_FS+0x28>)
 8011704:	0011      	movs	r1, r2
 8011706:	0018      	movs	r0, r3
 8011708:	f7fb fee5 	bl	800d4d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801170c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801170e:	0018      	movs	r0, r3
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	20001324 	.word	0x20001324
 8011718:	20000c60 	.word	0x20000c60
 801171c:	20000f24 	.word	0x20000f24

08011720 <CDC_DeInit_FS>:
=======
 801082c:	b580      	push	{r7, lr}
 801082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010830:	4907      	ldr	r1, [pc, #28]	@ (8010850 <CDC_Init_FS+0x24>)
 8010832:	4b08      	ldr	r3, [pc, #32]	@ (8010854 <CDC_Init_FS+0x28>)
 8010834:	2200      	movs	r2, #0
 8010836:	0018      	movs	r0, r3
 8010838:	f7fb fecf 	bl	800c5da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801083c:	4a06      	ldr	r2, [pc, #24]	@ (8010858 <CDC_Init_FS+0x2c>)
 801083e:	4b05      	ldr	r3, [pc, #20]	@ (8010854 <CDC_Init_FS+0x28>)
 8010840:	0011      	movs	r1, r2
 8010842:	0018      	movs	r0, r3
 8010844:	f7fb fee5 	bl	800c612 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010848:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801084a:	0018      	movs	r0, r3
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	2000121c 	.word	0x2000121c
 8010854:	20000b58 	.word	0x20000b58
 8010858:	20000e1c 	.word	0x20000e1c

0801085c <CDC_DeInit_FS>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 8011720:	b580      	push	{r7, lr}
 8011722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011724:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011726:	0018      	movs	r0, r3
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <CDC_Control_FS>:
=======
 801085c:	b580      	push	{r7, lr}
 801085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010860:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010862:	0018      	movs	r0, r3
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <CDC_Control_FS>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6039      	str	r1, [r7, #0]
 8011734:	0011      	movs	r1, r2
 8011736:	1dfb      	adds	r3, r7, #7
 8011738:	1c02      	adds	r2, r0, #0
 801173a:	701a      	strb	r2, [r3, #0]
 801173c:	1d3b      	adds	r3, r7, #4
 801173e:	1c0a      	adds	r2, r1, #0
 8011740:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011742:	1dfb      	adds	r3, r7, #7
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b23      	cmp	r3, #35	@ 0x23
 8011748:	d804      	bhi.n	8011754 <CDC_Control_FS+0x28>
 801174a:	009a      	lsls	r2, r3, #2
 801174c:	4b04      	ldr	r3, [pc, #16]	@ (8011760 <CDC_Control_FS+0x34>)
 801174e:	18d3      	adds	r3, r2, r3
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	469f      	mov	pc, r3
=======
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6039      	str	r1, [r7, #0]
 8010870:	0011      	movs	r1, r2
 8010872:	1dfb      	adds	r3, r7, #7
 8010874:	1c02      	adds	r2, r0, #0
 8010876:	701a      	strb	r2, [r3, #0]
 8010878:	1d3b      	adds	r3, r7, #4
 801087a:	1c0a      	adds	r2, r1, #0
 801087c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801087e:	1dfb      	adds	r3, r7, #7
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	2b23      	cmp	r3, #35	@ 0x23
 8010884:	d804      	bhi.n	8010890 <CDC_Control_FS+0x28>
 8010886:	009a      	lsls	r2, r3, #2
 8010888:	4b04      	ldr	r3, [pc, #16]	@ (801089c <CDC_Control_FS+0x34>)
 801088a:	18d3      	adds	r3, r2, r3
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	469f      	mov	pc, r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
 8011754:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8011756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011758:	0018      	movs	r0, r3
 801175a:	46bd      	mov	sp, r7
 801175c:	b002      	add	sp, #8
 801175e:	bd80      	pop	{r7, pc}
 8011760:	08019de8 	.word	0x08019de8

08011764 <CDC_Receive_FS>:
=======
 8010890:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8010892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010894:	0018      	movs	r0, r3
 8010896:	46bd      	mov	sp, r7
 8010898:	b002      	add	sp, #8
 801089a:	bd80      	pop	{r7, pc}
 801089c:	08018804 	.word	0x08018804

080108a0 <CDC_Receive_FS>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	4b06      	ldr	r3, [pc, #24]	@ (801178c <CDC_Receive_FS+0x28>)
 8011772:	0011      	movs	r1, r2
 8011774:	0018      	movs	r0, r3
 8011776:	f7fb feae 	bl	800d4d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801177a:	4b04      	ldr	r3, [pc, #16]	@ (801178c <CDC_Receive_FS+0x28>)
 801177c:	0018      	movs	r0, r3
 801177e:	f7fb fef5 	bl	800d56c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011782:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011784:	0018      	movs	r0, r3
 8011786:	46bd      	mov	sp, r7
 8011788:	b002      	add	sp, #8
 801178a:	bd80      	pop	{r7, pc}
 801178c:	20000c60 	.word	0x20000c60

08011790 <CDC_Transmit_FS>:
=======
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	4b06      	ldr	r3, [pc, #24]	@ (80108c8 <CDC_Receive_FS+0x28>)
 80108ae:	0011      	movs	r1, r2
 80108b0:	0018      	movs	r0, r3
 80108b2:	f7fb feae 	bl	800c612 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80108b6:	4b04      	ldr	r3, [pc, #16]	@ (80108c8 <CDC_Receive_FS+0x28>)
 80108b8:	0018      	movs	r0, r3
 80108ba:	f7fb fef5 	bl	800c6a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80108be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80108c0:	0018      	movs	r0, r3
 80108c2:	46bd      	mov	sp, r7
 80108c4:	b002      	add	sp, #8
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	20000b58 	.word	0x20000b58

080108cc <CDC_Transmit_FS>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
<<<<<<< HEAD
 8011790:	b5b0      	push	{r4, r5, r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	000a      	movs	r2, r1
 801179a:	1cbb      	adds	r3, r7, #2
 801179c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801179e:	230f      	movs	r3, #15
 80117a0:	18fb      	adds	r3, r7, r3
 80117a2:	2200      	movs	r2, #0
 80117a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80117a6:	4a11      	ldr	r2, [pc, #68]	@ (80117ec <CDC_Transmit_FS+0x5c>)
 80117a8:	23ae      	movs	r3, #174	@ 0xae
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	58d3      	ldr	r3, [r2, r3]
 80117ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	2385      	movs	r3, #133	@ 0x85
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	58d3      	ldr	r3, [r2, r3]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80117bc:	2301      	movs	r3, #1
 80117be:	e010      	b.n	80117e2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80117c0:	1cbb      	adds	r3, r7, #2
 80117c2:	881a      	ldrh	r2, [r3, #0]
 80117c4:	6879      	ldr	r1, [r7, #4]
 80117c6:	4b09      	ldr	r3, [pc, #36]	@ (80117ec <CDC_Transmit_FS+0x5c>)
 80117c8:	0018      	movs	r0, r3
 80117ca:	f7fb fe68 	bl	800d49e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80117ce:	250f      	movs	r5, #15
 80117d0:	197c      	adds	r4, r7, r5
 80117d2:	4b06      	ldr	r3, [pc, #24]	@ (80117ec <CDC_Transmit_FS+0x5c>)
 80117d4:	0018      	movs	r0, r3
 80117d6:	f7fb fe92 	bl	800d4fe <USBD_CDC_TransmitPacket>
 80117da:	0003      	movs	r3, r0
 80117dc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80117de:	197b      	adds	r3, r7, r5
 80117e0:	781b      	ldrb	r3, [r3, #0]
}
 80117e2:	0018      	movs	r0, r3
 80117e4:	46bd      	mov	sp, r7
 80117e6:	b004      	add	sp, #16
 80117e8:	bdb0      	pop	{r4, r5, r7, pc}
 80117ea:	46c0      	nop			@ (mov r8, r8)
 80117ec:	20000c60 	.word	0x20000c60

080117f0 <USBD_FS_DeviceDescriptor>:
=======
 80108cc:	b5b0      	push	{r4, r5, r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	000a      	movs	r2, r1
 80108d6:	1cbb      	adds	r3, r7, #2
 80108d8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80108da:	230f      	movs	r3, #15
 80108dc:	18fb      	adds	r3, r7, r3
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80108e2:	4a11      	ldr	r2, [pc, #68]	@ (8010928 <CDC_Transmit_FS+0x5c>)
 80108e4:	23ae      	movs	r3, #174	@ 0xae
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	58d3      	ldr	r3, [r2, r3]
 80108ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80108ec:	68ba      	ldr	r2, [r7, #8]
 80108ee:	2385      	movs	r3, #133	@ 0x85
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	58d3      	ldr	r3, [r2, r3]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d001      	beq.n	80108fc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80108f8:	2301      	movs	r3, #1
 80108fa:	e010      	b.n	801091e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80108fc:	1cbb      	adds	r3, r7, #2
 80108fe:	881a      	ldrh	r2, [r3, #0]
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	4b09      	ldr	r3, [pc, #36]	@ (8010928 <CDC_Transmit_FS+0x5c>)
 8010904:	0018      	movs	r0, r3
 8010906:	f7fb fe68 	bl	800c5da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801090a:	250f      	movs	r5, #15
 801090c:	197c      	adds	r4, r7, r5
 801090e:	4b06      	ldr	r3, [pc, #24]	@ (8010928 <CDC_Transmit_FS+0x5c>)
 8010910:	0018      	movs	r0, r3
 8010912:	f7fb fe92 	bl	800c63a <USBD_CDC_TransmitPacket>
 8010916:	0003      	movs	r3, r0
 8010918:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801091a:	197b      	adds	r3, r7, r5
 801091c:	781b      	ldrb	r3, [r3, #0]
}
 801091e:	0018      	movs	r0, r3
 8010920:	46bd      	mov	sp, r7
 8010922:	b004      	add	sp, #16
 8010924:	bdb0      	pop	{r4, r5, r7, pc}
 8010926:	46c0      	nop			@ (mov r8, r8)
 8010928:	20000b58 	.word	0x20000b58

0801092c <USBD_FS_DeviceDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	0002      	movs	r2, r0
 80117f8:	6039      	str	r1, [r7, #0]
 80117fa:	1dfb      	adds	r3, r7, #7
 80117fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	2212      	movs	r2, #18
 8011802:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011804:	4b02      	ldr	r3, [pc, #8]	@ (8011810 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011806:	0018      	movs	r0, r3
 8011808:	46bd      	mov	sp, r7
 801180a:	b002      	add	sp, #8
 801180c:	bd80      	pop	{r7, pc}
 801180e:	46c0      	nop			@ (mov r8, r8)
 8011810:	200001c8 	.word	0x200001c8

08011814 <USBD_FS_LangIDStrDescriptor>:
=======
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	0002      	movs	r2, r0
 8010934:	6039      	str	r1, [r7, #0]
 8010936:	1dfb      	adds	r3, r7, #7
 8010938:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2212      	movs	r2, #18
 801093e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010940:	4b02      	ldr	r3, [pc, #8]	@ (801094c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010942:	0018      	movs	r0, r3
 8010944:	46bd      	mov	sp, r7
 8010946:	b002      	add	sp, #8
 8010948:	bd80      	pop	{r7, pc}
 801094a:	46c0      	nop			@ (mov r8, r8)
 801094c:	200001d0 	.word	0x200001d0

08010950 <USBD_FS_LangIDStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	0002      	movs	r2, r0
 801181c:	6039      	str	r1, [r7, #0]
 801181e:	1dfb      	adds	r3, r7, #7
 8011820:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	2204      	movs	r2, #4
 8011826:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011828:	4b02      	ldr	r3, [pc, #8]	@ (8011834 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801182a:	0018      	movs	r0, r3
 801182c:	46bd      	mov	sp, r7
 801182e:	b002      	add	sp, #8
 8011830:	bd80      	pop	{r7, pc}
 8011832:	46c0      	nop			@ (mov r8, r8)
 8011834:	200001dc 	.word	0x200001dc

08011838 <USBD_FS_ProductStrDescriptor>:
=======
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	0002      	movs	r2, r0
 8010958:	6039      	str	r1, [r7, #0]
 801095a:	1dfb      	adds	r3, r7, #7
 801095c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	2204      	movs	r2, #4
 8010962:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010964:	4b02      	ldr	r3, [pc, #8]	@ (8010970 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010966:	0018      	movs	r0, r3
 8010968:	46bd      	mov	sp, r7
 801096a:	b002      	add	sp, #8
 801096c:	bd80      	pop	{r7, pc}
 801096e:	46c0      	nop			@ (mov r8, r8)
 8010970:	200001e4 	.word	0x200001e4

08010974 <USBD_FS_ProductStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	0002      	movs	r2, r0
 8011840:	6039      	str	r1, [r7, #0]
 8011842:	1dfb      	adds	r3, r7, #7
 8011844:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8011846:	1dfb      	adds	r3, r7, #7
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d106      	bne.n	801185c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	4908      	ldr	r1, [pc, #32]	@ (8011874 <USBD_FS_ProductStrDescriptor+0x3c>)
 8011852:	4b09      	ldr	r3, [pc, #36]	@ (8011878 <USBD_FS_ProductStrDescriptor+0x40>)
 8011854:	0018      	movs	r0, r3
 8011856:	f7fc ffc5 	bl	800e7e4 <USBD_GetString>
 801185a:	e005      	b.n	8011868 <USBD_FS_ProductStrDescriptor+0x30>
=======
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	0002      	movs	r2, r0
 801097c:	6039      	str	r1, [r7, #0]
 801097e:	1dfb      	adds	r3, r7, #7
 8010980:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8010982:	1dfb      	adds	r3, r7, #7
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	4908      	ldr	r1, [pc, #32]	@ (80109b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801098e:	4b09      	ldr	r3, [pc, #36]	@ (80109b4 <USBD_FS_ProductStrDescriptor+0x40>)
 8010990:	0018      	movs	r0, r3
 8010992:	f7fc ffc5 	bl	800d920 <USBD_GetString>
 8010996:	e005      	b.n	80109a4 <USBD_FS_ProductStrDescriptor+0x30>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	4905      	ldr	r1, [pc, #20]	@ (8011874 <USBD_FS_ProductStrDescriptor+0x3c>)
 8011860:	4b05      	ldr	r3, [pc, #20]	@ (8011878 <USBD_FS_ProductStrDescriptor+0x40>)
 8011862:	0018      	movs	r0, r3
 8011864:	f7fc ffbe 	bl	800e7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011868:	4b02      	ldr	r3, [pc, #8]	@ (8011874 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801186a:	0018      	movs	r0, r3
 801186c:	46bd      	mov	sp, r7
 801186e:	b002      	add	sp, #8
 8011870:	bd80      	pop	{r7, pc}
 8011872:	46c0      	nop			@ (mov r8, r8)
 8011874:	20001724 	.word	0x20001724
 8011878:	0801673c 	.word	0x0801673c

0801187c <USBD_FS_ManufacturerStrDescriptor>:
=======
 8010998:	683a      	ldr	r2, [r7, #0]
 801099a:	4905      	ldr	r1, [pc, #20]	@ (80109b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801099c:	4b05      	ldr	r3, [pc, #20]	@ (80109b4 <USBD_FS_ProductStrDescriptor+0x40>)
 801099e:	0018      	movs	r0, r3
 80109a0:	f7fc ffbe 	bl	800d920 <USBD_GetString>
  }
  return USBD_StrDesc;
 80109a4:	4b02      	ldr	r3, [pc, #8]	@ (80109b0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80109a6:	0018      	movs	r0, r3
 80109a8:	46bd      	mov	sp, r7
 80109aa:	b002      	add	sp, #8
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	46c0      	nop			@ (mov r8, r8)
 80109b0:	2000161c 	.word	0x2000161c
 80109b4:	080151d4 	.word	0x080151d4

080109b8 <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	0002      	movs	r2, r0
 8011884:	6039      	str	r1, [r7, #0]
 8011886:	1dfb      	adds	r3, r7, #7
 8011888:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801188a:	683a      	ldr	r2, [r7, #0]
 801188c:	4904      	ldr	r1, [pc, #16]	@ (80118a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801188e:	4b05      	ldr	r3, [pc, #20]	@ (80118a4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8011890:	0018      	movs	r0, r3
 8011892:	f7fc ffa7 	bl	800e7e4 <USBD_GetString>
  return USBD_StrDesc;
 8011896:	4b02      	ldr	r3, [pc, #8]	@ (80118a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8011898:	0018      	movs	r0, r3
 801189a:	46bd      	mov	sp, r7
 801189c:	b002      	add	sp, #8
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	20001724 	.word	0x20001724
 80118a4:	08016754 	.word	0x08016754

080118a8 <USBD_FS_SerialStrDescriptor>:
=======
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	0002      	movs	r2, r0
 80109c0:	6039      	str	r1, [r7, #0]
 80109c2:	1dfb      	adds	r3, r7, #7
 80109c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80109c6:	683a      	ldr	r2, [r7, #0]
 80109c8:	4904      	ldr	r1, [pc, #16]	@ (80109dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80109ca:	4b05      	ldr	r3, [pc, #20]	@ (80109e0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80109cc:	0018      	movs	r0, r3
 80109ce:	f7fc ffa7 	bl	800d920 <USBD_GetString>
  return USBD_StrDesc;
 80109d2:	4b02      	ldr	r3, [pc, #8]	@ (80109dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80109d4:	0018      	movs	r0, r3
 80109d6:	46bd      	mov	sp, r7
 80109d8:	b002      	add	sp, #8
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	2000161c 	.word	0x2000161c
 80109e0:	080151ec 	.word	0x080151ec

080109e4 <USBD_FS_SerialStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	0002      	movs	r2, r0
 80118b0:	6039      	str	r1, [r7, #0]
 80118b2:	1dfb      	adds	r3, r7, #7
 80118b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	221a      	movs	r2, #26
 80118ba:	801a      	strh	r2, [r3, #0]
=======
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	0002      	movs	r2, r0
 80109ec:	6039      	str	r1, [r7, #0]
 80109ee:	1dfb      	adds	r3, r7, #7
 80109f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	221a      	movs	r2, #26
 80109f6:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 80118bc:	f000 f84c 	bl	8011958 <Get_SerialNum>
=======
 80109f8:	f000 f84c 	bl	8010a94 <Get_SerialNum>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 80118c0:	4b02      	ldr	r3, [pc, #8]	@ (80118cc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80118c2:	0018      	movs	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	b002      	add	sp, #8
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	46c0      	nop			@ (mov r8, r8)
 80118cc:	200001e0 	.word	0x200001e0

080118d0 <USBD_FS_ConfigStrDescriptor>:
=======
 80109fc:	4b02      	ldr	r3, [pc, #8]	@ (8010a08 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80109fe:	0018      	movs	r0, r3
 8010a00:	46bd      	mov	sp, r7
 8010a02:	b002      	add	sp, #8
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	46c0      	nop			@ (mov r8, r8)
 8010a08:	200001e8 	.word	0x200001e8

08010a0c <USBD_FS_ConfigStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	0002      	movs	r2, r0
 80118d8:	6039      	str	r1, [r7, #0]
 80118da:	1dfb      	adds	r3, r7, #7
 80118dc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80118de:	1dfb      	adds	r3, r7, #7
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d106      	bne.n	80118f4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	4908      	ldr	r1, [pc, #32]	@ (801190c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80118ea:	4b09      	ldr	r3, [pc, #36]	@ (8011910 <USBD_FS_ConfigStrDescriptor+0x40>)
 80118ec:	0018      	movs	r0, r3
 80118ee:	f7fc ff79 	bl	800e7e4 <USBD_GetString>
 80118f2:	e005      	b.n	8011900 <USBD_FS_ConfigStrDescriptor+0x30>
=======
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	0002      	movs	r2, r0
 8010a14:	6039      	str	r1, [r7, #0]
 8010a16:	1dfb      	adds	r3, r7, #7
 8010a18:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8010a1a:	1dfb      	adds	r3, r7, #7
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010a22:	683a      	ldr	r2, [r7, #0]
 8010a24:	4908      	ldr	r1, [pc, #32]	@ (8010a48 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8010a26:	4b09      	ldr	r3, [pc, #36]	@ (8010a4c <USBD_FS_ConfigStrDescriptor+0x40>)
 8010a28:	0018      	movs	r0, r3
 8010a2a:	f7fc ff79 	bl	800d920 <USBD_GetString>
 8010a2e:	e005      	b.n	8010a3c <USBD_FS_ConfigStrDescriptor+0x30>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	4905      	ldr	r1, [pc, #20]	@ (801190c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80118f8:	4b05      	ldr	r3, [pc, #20]	@ (8011910 <USBD_FS_ConfigStrDescriptor+0x40>)
 80118fa:	0018      	movs	r0, r3
 80118fc:	f7fc ff72 	bl	800e7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011900:	4b02      	ldr	r3, [pc, #8]	@ (801190c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8011902:	0018      	movs	r0, r3
 8011904:	46bd      	mov	sp, r7
 8011906:	b002      	add	sp, #8
 8011908:	bd80      	pop	{r7, pc}
 801190a:	46c0      	nop			@ (mov r8, r8)
 801190c:	20001724 	.word	0x20001724
 8011910:	08016768 	.word	0x08016768

08011914 <USBD_FS_InterfaceStrDescriptor>:
=======
 8010a30:	683a      	ldr	r2, [r7, #0]
 8010a32:	4905      	ldr	r1, [pc, #20]	@ (8010a48 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8010a34:	4b05      	ldr	r3, [pc, #20]	@ (8010a4c <USBD_FS_ConfigStrDescriptor+0x40>)
 8010a36:	0018      	movs	r0, r3
 8010a38:	f7fc ff72 	bl	800d920 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a3c:	4b02      	ldr	r3, [pc, #8]	@ (8010a48 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8010a3e:	0018      	movs	r0, r3
 8010a40:	46bd      	mov	sp, r7
 8010a42:	b002      	add	sp, #8
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	46c0      	nop			@ (mov r8, r8)
 8010a48:	2000161c 	.word	0x2000161c
 8010a4c:	08015200 	.word	0x08015200

08010a50 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	0002      	movs	r2, r0
 801191c:	6039      	str	r1, [r7, #0]
 801191e:	1dfb      	adds	r3, r7, #7
 8011920:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8011922:	1dfb      	adds	r3, r7, #7
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	4908      	ldr	r1, [pc, #32]	@ (8011950 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801192e:	4b09      	ldr	r3, [pc, #36]	@ (8011954 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8011930:	0018      	movs	r0, r3
 8011932:	f7fc ff57 	bl	800e7e4 <USBD_GetString>
 8011936:	e005      	b.n	8011944 <USBD_FS_InterfaceStrDescriptor+0x30>
=======
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	0002      	movs	r2, r0
 8010a58:	6039      	str	r1, [r7, #0]
 8010a5a:	1dfb      	adds	r3, r7, #7
 8010a5c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8010a5e:	1dfb      	adds	r3, r7, #7
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	4908      	ldr	r1, [pc, #32]	@ (8010a8c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8010a6a:	4b09      	ldr	r3, [pc, #36]	@ (8010a90 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8010a6c:	0018      	movs	r0, r3
 8010a6e:	f7fc ff57 	bl	800d920 <USBD_GetString>
 8010a72:	e005      	b.n	8010a80 <USBD_FS_InterfaceStrDescriptor+0x30>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 8011938:	683a      	ldr	r2, [r7, #0]
 801193a:	4905      	ldr	r1, [pc, #20]	@ (8011950 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801193c:	4b05      	ldr	r3, [pc, #20]	@ (8011954 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801193e:	0018      	movs	r0, r3
 8011940:	f7fc ff50 	bl	800e7e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011944:	4b02      	ldr	r3, [pc, #8]	@ (8011950 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8011946:	0018      	movs	r0, r3
 8011948:	46bd      	mov	sp, r7
 801194a:	b002      	add	sp, #8
 801194c:	bd80      	pop	{r7, pc}
 801194e:	46c0      	nop			@ (mov r8, r8)
 8011950:	20001724 	.word	0x20001724
 8011954:	08016774 	.word	0x08016774

08011958 <Get_SerialNum>:
=======
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	4905      	ldr	r1, [pc, #20]	@ (8010a8c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8010a78:	4b05      	ldr	r3, [pc, #20]	@ (8010a90 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8010a7a:	0018      	movs	r0, r3
 8010a7c:	f7fc ff50 	bl	800d920 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a80:	4b02      	ldr	r3, [pc, #8]	@ (8010a8c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8010a82:	0018      	movs	r0, r3
 8010a84:	46bd      	mov	sp, r7
 8010a86:	b002      	add	sp, #8
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	46c0      	nop			@ (mov r8, r8)
 8010a8c:	2000161c 	.word	0x2000161c
 8010a90:	0801520c 	.word	0x0801520c

08010a94 <Get_SerialNum>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
=======
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< HEAD
 801195e:	4b10      	ldr	r3, [pc, #64]	@ (80119a0 <Get_SerialNum+0x48>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011964:	4b0f      	ldr	r3, [pc, #60]	@ (80119a4 <Get_SerialNum+0x4c>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801196a:	4b0f      	ldr	r3, [pc, #60]	@ (80119a8 <Get_SerialNum+0x50>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	18d3      	adds	r3, r2, r3
 8011976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00b      	beq.n	8011996 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801197e:	490b      	ldr	r1, [pc, #44]	@ (80119ac <Get_SerialNum+0x54>)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2208      	movs	r2, #8
 8011984:	0018      	movs	r0, r3
 8011986:	f000 f815 	bl	80119b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801198a:	4909      	ldr	r1, [pc, #36]	@ (80119b0 <Get_SerialNum+0x58>)
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	2204      	movs	r2, #4
 8011990:	0018      	movs	r0, r3
 8011992:	f000 f80f 	bl	80119b4 <IntToUnicode>
  }
}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	46bd      	mov	sp, r7
 801199a:	b004      	add	sp, #16
 801199c:	bd80      	pop	{r7, pc}
 801199e:	46c0      	nop			@ (mov r8, r8)
 80119a0:	1ffff7ac 	.word	0x1ffff7ac
 80119a4:	1ffff7b0 	.word	0x1ffff7b0
 80119a8:	1ffff7b4 	.word	0x1ffff7b4
 80119ac:	200001e2 	.word	0x200001e2
 80119b0:	200001f2 	.word	0x200001f2

080119b4 <IntToUnicode>:
=======
 8010a9a:	4b10      	ldr	r3, [pc, #64]	@ (8010adc <Get_SerialNum+0x48>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae0 <Get_SerialNum+0x4c>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae4 <Get_SerialNum+0x50>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	18d3      	adds	r3, r2, r3
 8010ab2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00b      	beq.n	8010ad2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010aba:	490b      	ldr	r1, [pc, #44]	@ (8010ae8 <Get_SerialNum+0x54>)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2208      	movs	r2, #8
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f000 f815 	bl	8010af0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010ac6:	4909      	ldr	r1, [pc, #36]	@ (8010aec <Get_SerialNum+0x58>)
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2204      	movs	r2, #4
 8010acc:	0018      	movs	r0, r3
 8010ace:	f000 f80f 	bl	8010af0 <IntToUnicode>
  }
}
 8010ad2:	46c0      	nop			@ (mov r8, r8)
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	b004      	add	sp, #16
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	46c0      	nop			@ (mov r8, r8)
 8010adc:	1ffff7ac 	.word	0x1ffff7ac
 8010ae0:	1ffff7b0 	.word	0x1ffff7b0
 8010ae4:	1ffff7b4 	.word	0x1ffff7b4
 8010ae8:	200001ea 	.word	0x200001ea
 8010aec:	200001fa 	.word	0x200001fa

08010af0 <IntToUnicode>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b086      	sub	sp, #24
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	1dfb      	adds	r3, r7, #7
 80119c0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80119c2:	2117      	movs	r1, #23
 80119c4:	187b      	adds	r3, r7, r1
 80119c6:	2200      	movs	r2, #0
 80119c8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80119ca:	187b      	adds	r3, r7, r1
 80119cc:	2200      	movs	r2, #0
 80119ce:	701a      	strb	r2, [r3, #0]
 80119d0:	e02f      	b.n	8011a32 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	0f1b      	lsrs	r3, r3, #28
 80119d6:	2b09      	cmp	r3, #9
 80119d8:	d80d      	bhi.n	80119f6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	0f1b      	lsrs	r3, r3, #28
 80119de:	b2da      	uxtb	r2, r3
 80119e0:	2317      	movs	r3, #23
 80119e2:	18fb      	adds	r3, r7, r3
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	005b      	lsls	r3, r3, #1
 80119e8:	0019      	movs	r1, r3
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	185b      	adds	r3, r3, r1
 80119ee:	3230      	adds	r2, #48	@ 0x30
 80119f0:	b2d2      	uxtb	r2, r2
 80119f2:	701a      	strb	r2, [r3, #0]
 80119f4:	e00c      	b.n	8011a10 <IntToUnicode+0x5c>
=======
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	1dfb      	adds	r3, r7, #7
 8010afc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8010afe:	2117      	movs	r1, #23
 8010b00:	187b      	adds	r3, r7, r1
 8010b02:	2200      	movs	r2, #0
 8010b04:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8010b06:	187b      	adds	r3, r7, r1
 8010b08:	2200      	movs	r2, #0
 8010b0a:	701a      	strb	r2, [r3, #0]
 8010b0c:	e02f      	b.n	8010b6e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	0f1b      	lsrs	r3, r3, #28
 8010b12:	2b09      	cmp	r3, #9
 8010b14:	d80d      	bhi.n	8010b32 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	0f1b      	lsrs	r3, r3, #28
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	2317      	movs	r3, #23
 8010b1e:	18fb      	adds	r3, r7, r3
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	0019      	movs	r1, r3
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	185b      	adds	r3, r3, r1
 8010b2a:	3230      	adds	r2, #48	@ 0x30
 8010b2c:	b2d2      	uxtb	r2, r2
 8010b2e:	701a      	strb	r2, [r3, #0]
 8010b30:	e00c      	b.n	8010b4c <IntToUnicode+0x5c>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	0f1b      	lsrs	r3, r3, #28
 80119fa:	b2da      	uxtb	r2, r3
 80119fc:	2317      	movs	r3, #23
 80119fe:	18fb      	adds	r3, r7, r3
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	0019      	movs	r1, r3
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	185b      	adds	r3, r3, r1
 8011a0a:	3237      	adds	r2, #55	@ 0x37
 8011a0c:	b2d2      	uxtb	r2, r2
 8011a0e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	011b      	lsls	r3, r3, #4
 8011a14:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011a16:	2117      	movs	r1, #23
 8011a18:	187b      	adds	r3, r7, r1
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	3301      	adds	r3, #1
 8011a20:	68ba      	ldr	r2, [r7, #8]
 8011a22:	18d3      	adds	r3, r2, r3
 8011a24:	2200      	movs	r2, #0
 8011a26:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011a28:	187b      	adds	r3, r7, r1
 8011a2a:	781a      	ldrb	r2, [r3, #0]
 8011a2c:	187b      	adds	r3, r7, r1
 8011a2e:	3201      	adds	r2, #1
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	2317      	movs	r3, #23
 8011a34:	18fa      	adds	r2, r7, r3
 8011a36:	1dfb      	adds	r3, r7, #7
 8011a38:	7812      	ldrb	r2, [r2, #0]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d3c8      	bcc.n	80119d2 <IntToUnicode+0x1e>
  }
}
 8011a40:	46c0      	nop			@ (mov r8, r8)
 8011a42:	46c0      	nop			@ (mov r8, r8)
 8011a44:	46bd      	mov	sp, r7
 8011a46:	b006      	add	sp, #24
 8011a48:	bd80      	pop	{r7, pc}
	...

08011a4c <HAL_PCD_MspInit>:
=======
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	0f1b      	lsrs	r3, r3, #28
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	2317      	movs	r3, #23
 8010b3a:	18fb      	adds	r3, r7, r3
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	0019      	movs	r1, r3
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	185b      	adds	r3, r3, r1
 8010b46:	3237      	adds	r2, #55	@ 0x37
 8010b48:	b2d2      	uxtb	r2, r2
 8010b4a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	011b      	lsls	r3, r3, #4
 8010b50:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010b52:	2117      	movs	r1, #23
 8010b54:	187b      	adds	r3, r7, r1
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	18d3      	adds	r3, r2, r3
 8010b60:	2200      	movs	r2, #0
 8010b62:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010b64:	187b      	adds	r3, r7, r1
 8010b66:	781a      	ldrb	r2, [r3, #0]
 8010b68:	187b      	adds	r3, r7, r1
 8010b6a:	3201      	adds	r2, #1
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	2317      	movs	r3, #23
 8010b70:	18fa      	adds	r2, r7, r3
 8010b72:	1dfb      	adds	r3, r7, #7
 8010b74:	7812      	ldrb	r2, [r2, #0]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d3c8      	bcc.n	8010b0e <IntToUnicode+0x1e>
  }
}
 8010b7c:	46c0      	nop			@ (mov r8, r8)
 8010b7e:	46c0      	nop			@ (mov r8, r8)
 8010b80:	46bd      	mov	sp, r7
 8010b82:	b006      	add	sp, #24
 8010b84:	bd80      	pop	{r7, pc}
	...

08010b88 <HAL_PCD_MspInit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a0e      	ldr	r2, [pc, #56]	@ (8011a94 <HAL_PCD_MspInit+0x48>)
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d115      	bne.n	8011a8a <HAL_PCD_MspInit+0x3e>
=======
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4a0e      	ldr	r2, [pc, #56]	@ (8010bd0 <HAL_PCD_MspInit+0x48>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d115      	bne.n	8010bc6 <HAL_PCD_MspInit+0x3e>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
<<<<<<< HEAD
 8011a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a98 <HAL_PCD_MspInit+0x4c>)
 8011a60:	69da      	ldr	r2, [r3, #28]
 8011a62:	4b0d      	ldr	r3, [pc, #52]	@ (8011a98 <HAL_PCD_MspInit+0x4c>)
 8011a64:	2180      	movs	r1, #128	@ 0x80
 8011a66:	0409      	lsls	r1, r1, #16
 8011a68:	430a      	orrs	r2, r1
 8011a6a:	61da      	str	r2, [r3, #28]
 8011a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a98 <HAL_PCD_MspInit+0x4c>)
 8011a6e:	69da      	ldr	r2, [r3, #28]
 8011a70:	2380      	movs	r3, #128	@ 0x80
 8011a72:	041b      	lsls	r3, r3, #16
 8011a74:	4013      	ands	r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]
 8011a78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	201f      	movs	r0, #31
 8011a80:	f7f3 f97e 	bl	8004d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8011a84:	201f      	movs	r0, #31
 8011a86:	f7f3 f990 	bl	8004daa <HAL_NVIC_EnableIRQ>
=======
 8010b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010bd4 <HAL_PCD_MspInit+0x4c>)
 8010b9c:	69da      	ldr	r2, [r3, #28]
 8010b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd4 <HAL_PCD_MspInit+0x4c>)
 8010ba0:	2180      	movs	r1, #128	@ 0x80
 8010ba2:	0409      	lsls	r1, r1, #16
 8010ba4:	430a      	orrs	r2, r1
 8010ba6:	61da      	str	r2, [r3, #28]
 8010ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd4 <HAL_PCD_MspInit+0x4c>)
 8010baa:	69da      	ldr	r2, [r3, #28]
 8010bac:	2380      	movs	r3, #128	@ 0x80
 8010bae:	041b      	lsls	r3, r3, #16
 8010bb0:	4013      	ands	r3, r2
 8010bb2:	60fb      	str	r3, [r7, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	2100      	movs	r1, #0
 8010bba:	201f      	movs	r0, #31
 8010bbc:	f7f3 f97c 	bl	8003eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8010bc0:	201f      	movs	r0, #31
 8010bc2:	f7f3 f98e 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< HEAD
 8011a8a:	46c0      	nop			@ (mov r8, r8)
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	b004      	add	sp, #16
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	46c0      	nop			@ (mov r8, r8)
 8011a94:	40005c00 	.word	0x40005c00
 8011a98:	40021000 	.word	0x40021000

08011a9c <HAL_PCD_SetupStageCallback>:
=======
 8010bc6:	46c0      	nop			@ (mov r8, r8)
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	b004      	add	sp, #16
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	46c0      	nop			@ (mov r8, r8)
 8010bd0:	40005c00 	.word	0x40005c00
 8010bd4:	40021000 	.word	0x40021000

08010bd8 <HAL_PCD_SetupStageCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	23b6      	movs	r3, #182	@ 0xb6
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	58d2      	ldr	r2, [r2, r3]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	21a6      	movs	r1, #166	@ 0xa6
 8011ab0:	0089      	lsls	r1, r1, #2
 8011ab2:	468c      	mov	ip, r1
 8011ab4:	4463      	add	r3, ip
 8011ab6:	0019      	movs	r1, r3
 8011ab8:	0010      	movs	r0, r2
 8011aba:	f7fb fe29 	bl	800d710 <USBD_LL_SetupStage>
}
 8011abe:	46c0      	nop			@ (mov r8, r8)
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	b002      	add	sp, #8
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <HAL_PCD_DataOutStageCallback>:
=======
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	23b6      	movs	r3, #182	@ 0xb6
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	58d2      	ldr	r2, [r2, r3]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	21a6      	movs	r1, #166	@ 0xa6
 8010bec:	0089      	lsls	r1, r1, #2
 8010bee:	468c      	mov	ip, r1
 8010bf0:	4463      	add	r3, ip
 8010bf2:	0019      	movs	r1, r3
 8010bf4:	0010      	movs	r0, r2
 8010bf6:	f7fb fe29 	bl	800c84c <USBD_LL_SetupStage>
}
 8010bfa:	46c0      	nop			@ (mov r8, r8)
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	b002      	add	sp, #8
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <HAL_PCD_DataOutStageCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011ac6:	b590      	push	{r4, r7, lr}
 8011ac8:	b083      	sub	sp, #12
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	000a      	movs	r2, r1
 8011ad0:	1cfb      	adds	r3, r7, #3
 8011ad2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	23b6      	movs	r3, #182	@ 0xb6
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	58d4      	ldr	r4, [r2, r3]
 8011adc:	1cfb      	adds	r3, r7, #3
 8011ade:	781a      	ldrb	r2, [r3, #0]
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	23b2      	movs	r3, #178	@ 0xb2
 8011ae4:	0059      	lsls	r1, r3, #1
 8011ae6:	0013      	movs	r3, r2
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	189b      	adds	r3, r3, r2
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	18c3      	adds	r3, r0, r3
 8011af0:	185b      	adds	r3, r3, r1
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	1cfb      	adds	r3, r7, #3
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	0019      	movs	r1, r3
 8011afa:	0020      	movs	r0, r4
 8011afc:	f7fb fe66 	bl	800d7cc <USBD_LL_DataOutStage>
}
 8011b00:	46c0      	nop			@ (mov r8, r8)
 8011b02:	46bd      	mov	sp, r7
 8011b04:	b003      	add	sp, #12
 8011b06:	bd90      	pop	{r4, r7, pc}

08011b08 <HAL_PCD_DataInStageCallback>:
=======
 8010c02:	b590      	push	{r4, r7, lr}
 8010c04:	b083      	sub	sp, #12
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	000a      	movs	r2, r1
 8010c0c:	1cfb      	adds	r3, r7, #3
 8010c0e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	23b6      	movs	r3, #182	@ 0xb6
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	58d4      	ldr	r4, [r2, r3]
 8010c18:	1cfb      	adds	r3, r7, #3
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	23b2      	movs	r3, #178	@ 0xb2
 8010c20:	0059      	lsls	r1, r3, #1
 8010c22:	0013      	movs	r3, r2
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	189b      	adds	r3, r3, r2
 8010c28:	00db      	lsls	r3, r3, #3
 8010c2a:	18c3      	adds	r3, r0, r3
 8010c2c:	185b      	adds	r3, r3, r1
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	1cfb      	adds	r3, r7, #3
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	0019      	movs	r1, r3
 8010c36:	0020      	movs	r0, r4
 8010c38:	f7fb fe66 	bl	800c908 <USBD_LL_DataOutStage>
}
 8010c3c:	46c0      	nop			@ (mov r8, r8)
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	b003      	add	sp, #12
 8010c42:	bd90      	pop	{r4, r7, pc}

08010c44 <HAL_PCD_DataInStageCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	000a      	movs	r2, r1
 8011b12:	1cfb      	adds	r3, r7, #3
 8011b14:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	23b6      	movs	r3, #182	@ 0xb6
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	58d0      	ldr	r0, [r2, r3]
 8011b1e:	1cfb      	adds	r3, r7, #3
 8011b20:	781a      	ldrb	r2, [r3, #0]
 8011b22:	6879      	ldr	r1, [r7, #4]
 8011b24:	0013      	movs	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	189b      	adds	r3, r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	18cb      	adds	r3, r1, r3
 8011b2e:	3324      	adds	r3, #36	@ 0x24
 8011b30:	681a      	ldr	r2, [r3, #0]
 8011b32:	1cfb      	adds	r3, r7, #3
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	0019      	movs	r1, r3
 8011b38:	f7fb feca 	bl	800d8d0 <USBD_LL_DataInStage>
}
 8011b3c:	46c0      	nop			@ (mov r8, r8)
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	b002      	add	sp, #8
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <HAL_PCD_SOFCallback>:
=======
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	000a      	movs	r2, r1
 8010c4e:	1cfb      	adds	r3, r7, #3
 8010c50:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	23b6      	movs	r3, #182	@ 0xb6
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	58d0      	ldr	r0, [r2, r3]
 8010c5a:	1cfb      	adds	r3, r7, #3
 8010c5c:	781a      	ldrb	r2, [r3, #0]
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	0013      	movs	r3, r2
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	189b      	adds	r3, r3, r2
 8010c66:	00db      	lsls	r3, r3, #3
 8010c68:	18cb      	adds	r3, r1, r3
 8010c6a:	3324      	adds	r3, #36	@ 0x24
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	1cfb      	adds	r3, r7, #3
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	0019      	movs	r1, r3
 8010c74:	f7fb feca 	bl	800ca0c <USBD_LL_DataInStage>
}
 8010c78:	46c0      	nop			@ (mov r8, r8)
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	b002      	add	sp, #8
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_PCD_SOFCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	23b6      	movs	r3, #182	@ 0xb6
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	58d3      	ldr	r3, [r2, r3]
 8011b54:	0018      	movs	r0, r3
 8011b56:	f7fc f801 	bl	800db5c <USBD_LL_SOF>
}
 8011b5a:	46c0      	nop			@ (mov r8, r8)
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	b002      	add	sp, #8
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <HAL_PCD_ResetCallback>:
=======
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	23b6      	movs	r3, #182	@ 0xb6
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	58d3      	ldr	r3, [r2, r3]
 8010c90:	0018      	movs	r0, r3
 8010c92:	f7fc f801 	bl	800cc98 <USBD_LL_SOF>
}
 8010c96:	46c0      	nop			@ (mov r8, r8)
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	b002      	add	sp, #8
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <HAL_PCD_ResetCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b084      	sub	sp, #16
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b6a:	230f      	movs	r3, #15
 8011b6c:	18fb      	adds	r3, r7, r3
 8011b6e:	2201      	movs	r2, #1
 8011b70:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	795b      	ldrb	r3, [r3, #5]
 8011b76:	2b02      	cmp	r3, #2
 8011b78:	d001      	beq.n	8011b7e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8011b7a:	f7f2 f89f 	bl	8003cbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	23b6      	movs	r3, #182	@ 0xb6
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	58d2      	ldr	r2, [r2, r3]
 8011b86:	230f      	movs	r3, #15
 8011b88:	18fb      	adds	r3, r7, r3
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	0019      	movs	r1, r3
 8011b8e:	0010      	movs	r0, r2
 8011b90:	f7fb ffa3 	bl	800dada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	23b6      	movs	r3, #182	@ 0xb6
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	58d3      	ldr	r3, [r2, r3]
 8011b9c:	0018      	movs	r0, r3
 8011b9e:	f7fb ff54 	bl	800da4a <USBD_LL_Reset>
}
 8011ba2:	46c0      	nop			@ (mov r8, r8)
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	b004      	add	sp, #16
 8011ba8:	bd80      	pop	{r7, pc}
	...

08011bac <HAL_PCD_SuspendCallback>:
=======
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b084      	sub	sp, #16
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ca6:	230f      	movs	r3, #15
 8010ca8:	18fb      	adds	r3, r7, r3
 8010caa:	2201      	movs	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	795b      	ldrb	r3, [r3, #5]
 8010cb2:	2b02      	cmp	r3, #2
 8010cb4:	d001      	beq.n	8010cba <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8010cb6:	f7f1 ffc1 	bl	8002c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	23b6      	movs	r3, #182	@ 0xb6
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	58d2      	ldr	r2, [r2, r3]
 8010cc2:	230f      	movs	r3, #15
 8010cc4:	18fb      	adds	r3, r7, r3
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	0019      	movs	r1, r3
 8010cca:	0010      	movs	r0, r2
 8010ccc:	f7fb ffa3 	bl	800cc16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	23b6      	movs	r3, #182	@ 0xb6
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	58d3      	ldr	r3, [r2, r3]
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f7fb ff54 	bl	800cb86 <USBD_LL_Reset>
}
 8010cde:	46c0      	nop			@ (mov r8, r8)
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	b004      	add	sp, #16
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <HAL_PCD_SuspendCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	23b6      	movs	r3, #182	@ 0xb6
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	58d3      	ldr	r3, [r2, r3]
 8011bbc:	0018      	movs	r0, r3
 8011bbe:	f7fb ff9d 	bl	800dafc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7a5b      	ldrb	r3, [r3, #9]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d005      	beq.n	8011bd6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bca:	4b05      	ldr	r3, [pc, #20]	@ (8011be0 <HAL_PCD_SuspendCallback+0x34>)
 8011bcc:	691a      	ldr	r2, [r3, #16]
 8011bce:	4b04      	ldr	r3, [pc, #16]	@ (8011be0 <HAL_PCD_SuspendCallback+0x34>)
 8011bd0:	2106      	movs	r1, #6
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8011bd6:	46c0      	nop			@ (mov r8, r8)
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	b002      	add	sp, #8
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	46c0      	nop			@ (mov r8, r8)
 8011be0:	e000ed00 	.word	0xe000ed00

08011be4 <HAL_PCD_ResumeCallback>:
=======
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	23b6      	movs	r3, #182	@ 0xb6
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	58d3      	ldr	r3, [r2, r3]
 8010cf8:	0018      	movs	r0, r3
 8010cfa:	f7fb ff9d 	bl	800cc38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7a5b      	ldrb	r3, [r3, #9]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d005      	beq.n	8010d12 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d06:	4b05      	ldr	r3, [pc, #20]	@ (8010d1c <HAL_PCD_SuspendCallback+0x34>)
 8010d08:	691a      	ldr	r2, [r3, #16]
 8010d0a:	4b04      	ldr	r3, [pc, #16]	@ (8010d1c <HAL_PCD_SuspendCallback+0x34>)
 8010d0c:	2106      	movs	r1, #6
 8010d0e:	430a      	orrs	r2, r1
 8010d10:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8010d12:	46c0      	nop			@ (mov r8, r8)
 8010d14:	46bd      	mov	sp, r7
 8010d16:	b002      	add	sp, #8
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	46c0      	nop			@ (mov r8, r8)
 8010d1c:	e000ed00 	.word	0xe000ed00

08010d20 <HAL_PCD_ResumeCallback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	7a5b      	ldrb	r3, [r3, #9]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d007      	beq.n	8011c04 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bf4:	4b09      	ldr	r3, [pc, #36]	@ (8011c1c <HAL_PCD_ResumeCallback+0x38>)
 8011bf6:	691a      	ldr	r2, [r3, #16]
 8011bf8:	4b08      	ldr	r3, [pc, #32]	@ (8011c1c <HAL_PCD_ResumeCallback+0x38>)
 8011bfa:	2106      	movs	r1, #6
 8011bfc:	438a      	bics	r2, r1
 8011bfe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8011c00:	f000 fa42 	bl	8012088 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	23b6      	movs	r3, #182	@ 0xb6
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	58d3      	ldr	r3, [r2, r3]
 8011c0c:	0018      	movs	r0, r3
 8011c0e:	f7fb ff8d 	bl	800db2c <USBD_LL_Resume>
}
 8011c12:	46c0      	nop			@ (mov r8, r8)
 8011c14:	46bd      	mov	sp, r7
 8011c16:	b002      	add	sp, #8
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	46c0      	nop			@ (mov r8, r8)
 8011c1c:	e000ed00 	.word	0xe000ed00

08011c20 <USBD_LL_Init>:
=======
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	7a5b      	ldrb	r3, [r3, #9]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d007      	beq.n	8010d40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d30:	4b09      	ldr	r3, [pc, #36]	@ (8010d58 <HAL_PCD_ResumeCallback+0x38>)
 8010d32:	691a      	ldr	r2, [r3, #16]
 8010d34:	4b08      	ldr	r3, [pc, #32]	@ (8010d58 <HAL_PCD_ResumeCallback+0x38>)
 8010d36:	2106      	movs	r1, #6
 8010d38:	438a      	bics	r2, r1
 8010d3a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8010d3c:	f000 fa42 	bl	80111c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	23b6      	movs	r3, #182	@ 0xb6
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	58d3      	ldr	r3, [r2, r3]
 8010d48:	0018      	movs	r0, r3
 8010d4a:	f7fb ff8d 	bl	800cc68 <USBD_LL_Resume>
}
 8010d4e:	46c0      	nop			@ (mov r8, r8)
 8010d50:	46bd      	mov	sp, r7
 8010d52:	b002      	add	sp, #8
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	46c0      	nop			@ (mov r8, r8)
 8010d58:	e000ed00 	.word	0xe000ed00

08010d5c <USBD_LL_Init>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011c28:	4a2d      	ldr	r2, [pc, #180]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c2a:	23b6      	movs	r3, #182	@ 0xb6
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	6879      	ldr	r1, [r7, #4]
 8011c30:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	23b0      	movs	r3, #176	@ 0xb0
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	4929      	ldr	r1, [pc, #164]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c3a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8011c3c:	4b28      	ldr	r3, [pc, #160]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c3e:	4a29      	ldr	r2, [pc, #164]	@ (8011ce4 <USBD_LL_Init+0xc4>)
 8011c40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011c42:	4b27      	ldr	r3, [pc, #156]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c44:	2208      	movs	r2, #8
 8011c46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011c48:	4b25      	ldr	r3, [pc, #148]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c4e:	4b24      	ldr	r3, [pc, #144]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c50:	2202      	movs	r2, #2
 8011c52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011c54:	4b22      	ldr	r3, [pc, #136]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011c5a:	4b21      	ldr	r3, [pc, #132]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011c60:	4b1f      	ldr	r3, [pc, #124]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011c66:	4b1e      	ldr	r3, [pc, #120]	@ (8011ce0 <USBD_LL_Init+0xc0>)
 8011c68:	0018      	movs	r0, r3
 8011c6a:	f7f3 fcbb 	bl	80055e4 <HAL_PCD_Init>
 8011c6e:	1e03      	subs	r3, r0, #0
 8011c70:	d001      	beq.n	8011c76 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8011c72:	f7f2 f823 	bl	8003cbc <Error_Handler>
=======
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010d64:	4a2d      	ldr	r2, [pc, #180]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d66:	23b6      	movs	r3, #182	@ 0xb6
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	23b0      	movs	r3, #176	@ 0xb0
 8010d72:	009b      	lsls	r3, r3, #2
 8010d74:	4929      	ldr	r1, [pc, #164]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d76:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8010d78:	4b28      	ldr	r3, [pc, #160]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d7a:	4a29      	ldr	r2, [pc, #164]	@ (8010e20 <USBD_LL_Init+0xc4>)
 8010d7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010d7e:	4b27      	ldr	r3, [pc, #156]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d80:	2208      	movs	r2, #8
 8010d82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010d84:	4b25      	ldr	r3, [pc, #148]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d86:	2202      	movs	r2, #2
 8010d88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d8a:	4b24      	ldr	r3, [pc, #144]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d8c:	2202      	movs	r2, #2
 8010d8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010d90:	4b22      	ldr	r3, [pc, #136]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010d96:	4b21      	ldr	r3, [pc, #132]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d98:	2200      	movs	r2, #0
 8010d9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010da2:	4b1e      	ldr	r3, [pc, #120]	@ (8010e1c <USBD_LL_Init+0xc0>)
 8010da4:	0018      	movs	r0, r3
 8010da6:	f7f3 fcb9 	bl	800471c <HAL_PCD_Init>
 8010daa:	1e03      	subs	r3, r0, #0
 8010dac:	d001      	beq.n	8010db2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8010dae:	f7f1 ff45 	bl	8002c3c <Error_Handler>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< HEAD
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	23b0      	movs	r3, #176	@ 0xb0
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	58d0      	ldr	r0, [r2, r3]
 8011c7e:	2318      	movs	r3, #24
 8011c80:	2200      	movs	r2, #0
 8011c82:	2100      	movs	r1, #0
 8011c84:	f7f5 fa6c 	bl	8007160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	23b0      	movs	r3, #176	@ 0xb0
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	58d0      	ldr	r0, [r2, r3]
 8011c90:	2358      	movs	r3, #88	@ 0x58
 8011c92:	2200      	movs	r2, #0
 8011c94:	2180      	movs	r1, #128	@ 0x80
 8011c96:	f7f5 fa63 	bl	8007160 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	23b0      	movs	r3, #176	@ 0xb0
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	58d0      	ldr	r0, [r2, r3]
 8011ca2:	23c0      	movs	r3, #192	@ 0xc0
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	2181      	movs	r1, #129	@ 0x81
 8011ca8:	f7f5 fa5a 	bl	8007160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	23b0      	movs	r3, #176	@ 0xb0
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	58d0      	ldr	r0, [r2, r3]
 8011cb4:	2388      	movs	r3, #136	@ 0x88
 8011cb6:	005b      	lsls	r3, r3, #1
 8011cb8:	2200      	movs	r2, #0
 8011cba:	2101      	movs	r1, #1
 8011cbc:	f7f5 fa50 	bl	8007160 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	23b0      	movs	r3, #176	@ 0xb0
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	58d0      	ldr	r0, [r2, r3]
 8011cc8:	2380      	movs	r3, #128	@ 0x80
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2182      	movs	r1, #130	@ 0x82
 8011cd0:	f7f5 fa46 	bl	8007160 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011cd4:	2300      	movs	r3, #0
}
 8011cd6:	0018      	movs	r0, r3
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	b002      	add	sp, #8
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	46c0      	nop			@ (mov r8, r8)
 8011ce0:	20001924 	.word	0x20001924
 8011ce4:	40005c00 	.word	0x40005c00

08011ce8 <USBD_LL_Start>:
=======
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	23b0      	movs	r3, #176	@ 0xb0
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	58d0      	ldr	r0, [r2, r3]
 8010dba:	2318      	movs	r3, #24
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	f7f5 fa6a 	bl	8006298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	23b0      	movs	r3, #176	@ 0xb0
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	58d0      	ldr	r0, [r2, r3]
 8010dcc:	2358      	movs	r3, #88	@ 0x58
 8010dce:	2200      	movs	r2, #0
 8010dd0:	2180      	movs	r1, #128	@ 0x80
 8010dd2:	f7f5 fa61 	bl	8006298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	23b0      	movs	r3, #176	@ 0xb0
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	58d0      	ldr	r0, [r2, r3]
 8010dde:	23c0      	movs	r3, #192	@ 0xc0
 8010de0:	2200      	movs	r2, #0
 8010de2:	2181      	movs	r1, #129	@ 0x81
 8010de4:	f7f5 fa58 	bl	8006298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	23b0      	movs	r3, #176	@ 0xb0
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	58d0      	ldr	r0, [r2, r3]
 8010df0:	2388      	movs	r3, #136	@ 0x88
 8010df2:	005b      	lsls	r3, r3, #1
 8010df4:	2200      	movs	r2, #0
 8010df6:	2101      	movs	r1, #1
 8010df8:	f7f5 fa4e 	bl	8006298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	23b0      	movs	r3, #176	@ 0xb0
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	58d0      	ldr	r0, [r2, r3]
 8010e04:	2380      	movs	r3, #128	@ 0x80
 8010e06:	005b      	lsls	r3, r3, #1
 8010e08:	2200      	movs	r2, #0
 8010e0a:	2182      	movs	r1, #130	@ 0x82
 8010e0c:	f7f5 fa44 	bl	8006298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	0018      	movs	r0, r3
 8010e14:	46bd      	mov	sp, r7
 8010e16:	b002      	add	sp, #8
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	46c0      	nop			@ (mov r8, r8)
 8010e1c:	2000181c 	.word	0x2000181c
 8010e20:	40005c00 	.word	0x40005c00

08010e24 <USBD_LL_Start>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8011ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cea:	b085      	sub	sp, #20
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf0:	210f      	movs	r1, #15
 8011cf2:	187b      	adds	r3, r7, r1
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf8:	260e      	movs	r6, #14
 8011cfa:	19bb      	adds	r3, r7, r6
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	23b0      	movs	r3, #176	@ 0xb0
 8011d04:	009b      	lsls	r3, r3, #2
 8011d06:	58d3      	ldr	r3, [r2, r3]
 8011d08:	000d      	movs	r5, r1
 8011d0a:	187c      	adds	r4, r7, r1
 8011d0c:	0018      	movs	r0, r3
 8011d0e:	f7f3 fd5d 	bl	80057cc <HAL_PCD_Start>
 8011d12:	0003      	movs	r3, r0
 8011d14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d16:	19bc      	adds	r4, r7, r6
 8011d18:	197b      	adds	r3, r7, r5
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	0018      	movs	r0, r3
 8011d1e:	f000 f9ba 	bl	8012096 <USBD_Get_USB_Status>
 8011d22:	0003      	movs	r3, r0
 8011d24:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011d26:	19bb      	adds	r3, r7, r6
 8011d28:	781b      	ldrb	r3, [r3, #0]
}
 8011d2a:	0018      	movs	r0, r3
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	b005      	add	sp, #20
 8011d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d32 <USBD_LL_OpenEP>:
=======
 8010e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e2c:	210f      	movs	r1, #15
 8010e2e:	187b      	adds	r3, r7, r1
 8010e30:	2200      	movs	r2, #0
 8010e32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e34:	260e      	movs	r6, #14
 8010e36:	19bb      	adds	r3, r7, r6
 8010e38:	2200      	movs	r2, #0
 8010e3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	23b0      	movs	r3, #176	@ 0xb0
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	58d3      	ldr	r3, [r2, r3]
 8010e44:	000d      	movs	r5, r1
 8010e46:	187c      	adds	r4, r7, r1
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f7f3 fd5b 	bl	8004904 <HAL_PCD_Start>
 8010e4e:	0003      	movs	r3, r0
 8010e50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e52:	19bc      	adds	r4, r7, r6
 8010e54:	197b      	adds	r3, r7, r5
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	0018      	movs	r0, r3
 8010e5a:	f000 f9ba 	bl	80111d2 <USBD_Get_USB_Status>
 8010e5e:	0003      	movs	r3, r0
 8010e60:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010e62:	19bb      	adds	r3, r7, r6
 8010e64:	781b      	ldrb	r3, [r3, #0]
}
 8010e66:	0018      	movs	r0, r3
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	b005      	add	sp, #20
 8010e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e6e <USBD_LL_OpenEP>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 8011d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d34:	b085      	sub	sp, #20
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	000c      	movs	r4, r1
 8011d3c:	0010      	movs	r0, r2
 8011d3e:	0019      	movs	r1, r3
 8011d40:	1cfb      	adds	r3, r7, #3
 8011d42:	1c22      	adds	r2, r4, #0
 8011d44:	701a      	strb	r2, [r3, #0]
 8011d46:	1cbb      	adds	r3, r7, #2
 8011d48:	1c02      	adds	r2, r0, #0
 8011d4a:	701a      	strb	r2, [r3, #0]
 8011d4c:	003b      	movs	r3, r7
 8011d4e:	1c0a      	adds	r2, r1, #0
 8011d50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d52:	260f      	movs	r6, #15
 8011d54:	19bb      	adds	r3, r7, r6
 8011d56:	2200      	movs	r2, #0
 8011d58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d5a:	250e      	movs	r5, #14
 8011d5c:	197b      	adds	r3, r7, r5
 8011d5e:	2200      	movs	r2, #0
 8011d60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	23b0      	movs	r3, #176	@ 0xb0
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	58d0      	ldr	r0, [r2, r3]
 8011d6a:	19bc      	adds	r4, r7, r6
 8011d6c:	1cbb      	adds	r3, r7, #2
 8011d6e:	781d      	ldrb	r5, [r3, #0]
 8011d70:	003b      	movs	r3, r7
 8011d72:	881a      	ldrh	r2, [r3, #0]
 8011d74:	1cfb      	adds	r3, r7, #3
 8011d76:	7819      	ldrb	r1, [r3, #0]
 8011d78:	002b      	movs	r3, r5
 8011d7a:	f7f3 febb 	bl	8005af4 <HAL_PCD_EP_Open>
 8011d7e:	0003      	movs	r3, r0
 8011d80:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d82:	250e      	movs	r5, #14
 8011d84:	197c      	adds	r4, r7, r5
 8011d86:	19bb      	adds	r3, r7, r6
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	0018      	movs	r0, r3
 8011d8c:	f000 f983 	bl	8012096 <USBD_Get_USB_Status>
 8011d90:	0003      	movs	r3, r0
 8011d92:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011d94:	197b      	adds	r3, r7, r5
 8011d96:	781b      	ldrb	r3, [r3, #0]
}
 8011d98:	0018      	movs	r0, r3
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	b005      	add	sp, #20
 8011d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011da0 <USBD_LL_CloseEP>:
=======
 8010e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e70:	b085      	sub	sp, #20
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	000c      	movs	r4, r1
 8010e78:	0010      	movs	r0, r2
 8010e7a:	0019      	movs	r1, r3
 8010e7c:	1cfb      	adds	r3, r7, #3
 8010e7e:	1c22      	adds	r2, r4, #0
 8010e80:	701a      	strb	r2, [r3, #0]
 8010e82:	1cbb      	adds	r3, r7, #2
 8010e84:	1c02      	adds	r2, r0, #0
 8010e86:	701a      	strb	r2, [r3, #0]
 8010e88:	003b      	movs	r3, r7
 8010e8a:	1c0a      	adds	r2, r1, #0
 8010e8c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e8e:	260f      	movs	r6, #15
 8010e90:	19bb      	adds	r3, r7, r6
 8010e92:	2200      	movs	r2, #0
 8010e94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e96:	250e      	movs	r5, #14
 8010e98:	197b      	adds	r3, r7, r5
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	23b0      	movs	r3, #176	@ 0xb0
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	58d0      	ldr	r0, [r2, r3]
 8010ea6:	19bc      	adds	r4, r7, r6
 8010ea8:	1cbb      	adds	r3, r7, #2
 8010eaa:	781d      	ldrb	r5, [r3, #0]
 8010eac:	003b      	movs	r3, r7
 8010eae:	881a      	ldrh	r2, [r3, #0]
 8010eb0:	1cfb      	adds	r3, r7, #3
 8010eb2:	7819      	ldrb	r1, [r3, #0]
 8010eb4:	002b      	movs	r3, r5
 8010eb6:	f7f3 feb9 	bl	8004c2c <HAL_PCD_EP_Open>
 8010eba:	0003      	movs	r3, r0
 8010ebc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ebe:	250e      	movs	r5, #14
 8010ec0:	197c      	adds	r4, r7, r5
 8010ec2:	19bb      	adds	r3, r7, r6
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	0018      	movs	r0, r3
 8010ec8:	f000 f983 	bl	80111d2 <USBD_Get_USB_Status>
 8010ecc:	0003      	movs	r3, r0
 8010ece:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010ed0:	197b      	adds	r3, r7, r5
 8010ed2:	781b      	ldrb	r3, [r3, #0]
}
 8010ed4:	0018      	movs	r0, r3
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	b005      	add	sp, #20
 8010eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010edc <USBD_LL_CloseEP>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 8011da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	000a      	movs	r2, r1
 8011daa:	1cfb      	adds	r3, r7, #3
 8011dac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dae:	210f      	movs	r1, #15
 8011db0:	187b      	adds	r3, r7, r1
 8011db2:	2200      	movs	r2, #0
 8011db4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011db6:	260e      	movs	r6, #14
 8011db8:	19bb      	adds	r3, r7, r6
 8011dba:	2200      	movs	r2, #0
 8011dbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	23b0      	movs	r3, #176	@ 0xb0
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	58d2      	ldr	r2, [r2, r3]
 8011dc6:	000d      	movs	r5, r1
 8011dc8:	187c      	adds	r4, r7, r1
 8011dca:	1cfb      	adds	r3, r7, #3
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	0019      	movs	r1, r3
 8011dd0:	0010      	movs	r0, r2
 8011dd2:	f7f3 fefe 	bl	8005bd2 <HAL_PCD_EP_Close>
 8011dd6:	0003      	movs	r3, r0
 8011dd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dda:	19bc      	adds	r4, r7, r6
 8011ddc:	197b      	adds	r3, r7, r5
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	0018      	movs	r0, r3
 8011de2:	f000 f958 	bl	8012096 <USBD_Get_USB_Status>
 8011de6:	0003      	movs	r3, r0
 8011de8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011dea:	19bb      	adds	r3, r7, r6
 8011dec:	781b      	ldrb	r3, [r3, #0]
}
 8011dee:	0018      	movs	r0, r3
 8011df0:	46bd      	mov	sp, r7
 8011df2:	b005      	add	sp, #20
 8011df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011df6 <USBD_LL_StallEP>:
=======
 8010edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ede:	b085      	sub	sp, #20
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	000a      	movs	r2, r1
 8010ee6:	1cfb      	adds	r3, r7, #3
 8010ee8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eea:	210f      	movs	r1, #15
 8010eec:	187b      	adds	r3, r7, r1
 8010eee:	2200      	movs	r2, #0
 8010ef0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ef2:	260e      	movs	r6, #14
 8010ef4:	19bb      	adds	r3, r7, r6
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	23b0      	movs	r3, #176	@ 0xb0
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	58d2      	ldr	r2, [r2, r3]
 8010f02:	000d      	movs	r5, r1
 8010f04:	187c      	adds	r4, r7, r1
 8010f06:	1cfb      	adds	r3, r7, #3
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	0019      	movs	r1, r3
 8010f0c:	0010      	movs	r0, r2
 8010f0e:	f7f3 fefc 	bl	8004d0a <HAL_PCD_EP_Close>
 8010f12:	0003      	movs	r3, r0
 8010f14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f16:	19bc      	adds	r4, r7, r6
 8010f18:	197b      	adds	r3, r7, r5
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	0018      	movs	r0, r3
 8010f1e:	f000 f958 	bl	80111d2 <USBD_Get_USB_Status>
 8010f22:	0003      	movs	r3, r0
 8010f24:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010f26:	19bb      	adds	r3, r7, r6
 8010f28:	781b      	ldrb	r3, [r3, #0]
}
 8010f2a:	0018      	movs	r0, r3
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	b005      	add	sp, #20
 8010f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f32 <USBD_LL_StallEP>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 8011df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011df8:	b085      	sub	sp, #20
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	000a      	movs	r2, r1
 8011e00:	1cfb      	adds	r3, r7, #3
 8011e02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e04:	210f      	movs	r1, #15
 8011e06:	187b      	adds	r3, r7, r1
 8011e08:	2200      	movs	r2, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e0c:	260e      	movs	r6, #14
 8011e0e:	19bb      	adds	r3, r7, r6
 8011e10:	2200      	movs	r2, #0
 8011e12:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	23b0      	movs	r3, #176	@ 0xb0
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	58d2      	ldr	r2, [r2, r3]
 8011e1c:	000d      	movs	r5, r1
 8011e1e:	187c      	adds	r4, r7, r1
 8011e20:	1cfb      	adds	r3, r7, #3
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	0019      	movs	r1, r3
 8011e26:	0010      	movs	r0, r2
 8011e28:	f7f3 ffb0 	bl	8005d8c <HAL_PCD_EP_SetStall>
 8011e2c:	0003      	movs	r3, r0
 8011e2e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e30:	19bc      	adds	r4, r7, r6
 8011e32:	197b      	adds	r3, r7, r5
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	0018      	movs	r0, r3
 8011e38:	f000 f92d 	bl	8012096 <USBD_Get_USB_Status>
 8011e3c:	0003      	movs	r3, r0
 8011e3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011e40:	19bb      	adds	r3, r7, r6
 8011e42:	781b      	ldrb	r3, [r3, #0]
}
 8011e44:	0018      	movs	r0, r3
 8011e46:	46bd      	mov	sp, r7
 8011e48:	b005      	add	sp, #20
 8011e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e4c <USBD_LL_ClearStallEP>:
=======
 8010f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f34:	b085      	sub	sp, #20
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
 8010f3a:	000a      	movs	r2, r1
 8010f3c:	1cfb      	adds	r3, r7, #3
 8010f3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f40:	210f      	movs	r1, #15
 8010f42:	187b      	adds	r3, r7, r1
 8010f44:	2200      	movs	r2, #0
 8010f46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f48:	260e      	movs	r6, #14
 8010f4a:	19bb      	adds	r3, r7, r6
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	23b0      	movs	r3, #176	@ 0xb0
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	58d2      	ldr	r2, [r2, r3]
 8010f58:	000d      	movs	r5, r1
 8010f5a:	187c      	adds	r4, r7, r1
 8010f5c:	1cfb      	adds	r3, r7, #3
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	0019      	movs	r1, r3
 8010f62:	0010      	movs	r0, r2
 8010f64:	f7f3 ffae 	bl	8004ec4 <HAL_PCD_EP_SetStall>
 8010f68:	0003      	movs	r3, r0
 8010f6a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f6c:	19bc      	adds	r4, r7, r6
 8010f6e:	197b      	adds	r3, r7, r5
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	0018      	movs	r0, r3
 8010f74:	f000 f92d 	bl	80111d2 <USBD_Get_USB_Status>
 8010f78:	0003      	movs	r3, r0
 8010f7a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010f7c:	19bb      	adds	r3, r7, r6
 8010f7e:	781b      	ldrb	r3, [r3, #0]
}
 8010f80:	0018      	movs	r0, r3
 8010f82:	46bd      	mov	sp, r7
 8010f84:	b005      	add	sp, #20
 8010f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f88 <USBD_LL_ClearStallEP>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 8011e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	000a      	movs	r2, r1
 8011e56:	1cfb      	adds	r3, r7, #3
 8011e58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e5a:	210f      	movs	r1, #15
 8011e5c:	187b      	adds	r3, r7, r1
 8011e5e:	2200      	movs	r2, #0
 8011e60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e62:	260e      	movs	r6, #14
 8011e64:	19bb      	adds	r3, r7, r6
 8011e66:	2200      	movs	r2, #0
 8011e68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	23b0      	movs	r3, #176	@ 0xb0
 8011e6e:	009b      	lsls	r3, r3, #2
 8011e70:	58d2      	ldr	r2, [r2, r3]
 8011e72:	000d      	movs	r5, r1
 8011e74:	187c      	adds	r4, r7, r1
 8011e76:	1cfb      	adds	r3, r7, #3
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	0019      	movs	r1, r3
 8011e7c:	0010      	movs	r0, r2
 8011e7e:	f7f3 ffe1 	bl	8005e44 <HAL_PCD_EP_ClrStall>
 8011e82:	0003      	movs	r3, r0
 8011e84:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e86:	19bc      	adds	r4, r7, r6
 8011e88:	197b      	adds	r3, r7, r5
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	0018      	movs	r0, r3
 8011e8e:	f000 f902 	bl	8012096 <USBD_Get_USB_Status>
 8011e92:	0003      	movs	r3, r0
 8011e94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011e96:	19bb      	adds	r3, r7, r6
 8011e98:	781b      	ldrb	r3, [r3, #0]
}
 8011e9a:	0018      	movs	r0, r3
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	b005      	add	sp, #20
 8011ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ea2 <USBD_LL_IsStallEP>:
=======
 8010f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	000a      	movs	r2, r1
 8010f92:	1cfb      	adds	r3, r7, #3
 8010f94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f96:	210f      	movs	r1, #15
 8010f98:	187b      	adds	r3, r7, r1
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f9e:	260e      	movs	r6, #14
 8010fa0:	19bb      	adds	r3, r7, r6
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	23b0      	movs	r3, #176	@ 0xb0
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	58d2      	ldr	r2, [r2, r3]
 8010fae:	000d      	movs	r5, r1
 8010fb0:	187c      	adds	r4, r7, r1
 8010fb2:	1cfb      	adds	r3, r7, #3
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	0019      	movs	r1, r3
 8010fb8:	0010      	movs	r0, r2
 8010fba:	f7f3 ffdf 	bl	8004f7c <HAL_PCD_EP_ClrStall>
 8010fbe:	0003      	movs	r3, r0
 8010fc0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fc2:	19bc      	adds	r4, r7, r6
 8010fc4:	197b      	adds	r3, r7, r5
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	0018      	movs	r0, r3
 8010fca:	f000 f902 	bl	80111d2 <USBD_Get_USB_Status>
 8010fce:	0003      	movs	r3, r0
 8010fd0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010fd2:	19bb      	adds	r3, r7, r6
 8010fd4:	781b      	ldrb	r3, [r3, #0]
}
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	b005      	add	sp, #20
 8010fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fde <USBD_LL_IsStallEP>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b084      	sub	sp, #16
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
 8011eaa:	000a      	movs	r2, r1
 8011eac:	1cfb      	adds	r3, r7, #3
 8011eae:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	23b0      	movs	r3, #176	@ 0xb0
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	58d3      	ldr	r3, [r2, r3]
 8011eb8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011eba:	1cfb      	adds	r3, r7, #3
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	b25b      	sxtb	r3, r3
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	da0c      	bge.n	8011ede <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ec4:	1cfb      	adds	r3, r7, #3
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	227f      	movs	r2, #127	@ 0x7f
 8011eca:	401a      	ands	r2, r3
 8011ecc:	68f9      	ldr	r1, [r7, #12]
 8011ece:	0013      	movs	r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	189b      	adds	r3, r3, r2
 8011ed4:	00db      	lsls	r3, r3, #3
 8011ed6:	18cb      	adds	r3, r1, r3
 8011ed8:	3312      	adds	r3, #18
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	e00d      	b.n	8011efa <USBD_LL_IsStallEP+0x58>
=======
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b084      	sub	sp, #16
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	000a      	movs	r2, r1
 8010fe8:	1cfb      	adds	r3, r7, #3
 8010fea:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	23b0      	movs	r3, #176	@ 0xb0
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	58d3      	ldr	r3, [r2, r3]
 8010ff4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ff6:	1cfb      	adds	r3, r7, #3
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	b25b      	sxtb	r3, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	da0c      	bge.n	801101a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011000:	1cfb      	adds	r3, r7, #3
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	227f      	movs	r2, #127	@ 0x7f
 8011006:	401a      	ands	r2, r3
 8011008:	68f9      	ldr	r1, [r7, #12]
 801100a:	0013      	movs	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	189b      	adds	r3, r3, r2
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	18cb      	adds	r3, r1, r3
 8011014:	3312      	adds	r3, #18
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	e00d      	b.n	8011036 <USBD_LL_IsStallEP+0x58>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 8011ede:	1cfb      	adds	r3, r7, #3
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	227f      	movs	r2, #127	@ 0x7f
 8011ee4:	401a      	ands	r2, r3
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	23a9      	movs	r3, #169	@ 0xa9
 8011eea:	0059      	lsls	r1, r3, #1
 8011eec:	0013      	movs	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	189b      	adds	r3, r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	18c3      	adds	r3, r0, r3
 8011ef6:	185b      	adds	r3, r3, r1
 8011ef8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011efa:	0018      	movs	r0, r3
 8011efc:	46bd      	mov	sp, r7
 8011efe:	b004      	add	sp, #16
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <USBD_LL_SetUSBAddress>:
=======
 801101a:	1cfb      	adds	r3, r7, #3
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	227f      	movs	r2, #127	@ 0x7f
 8011020:	401a      	ands	r2, r3
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	23a9      	movs	r3, #169	@ 0xa9
 8011026:	0059      	lsls	r1, r3, #1
 8011028:	0013      	movs	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	189b      	adds	r3, r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	18c3      	adds	r3, r0, r3
 8011032:	185b      	adds	r3, r3, r1
 8011034:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011036:	0018      	movs	r0, r3
 8011038:	46bd      	mov	sp, r7
 801103a:	b004      	add	sp, #16
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_LL_SetUSBAddress>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 8011f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f04:	b085      	sub	sp, #20
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	000a      	movs	r2, r1
 8011f0c:	1cfb      	adds	r3, r7, #3
 8011f0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f10:	210f      	movs	r1, #15
 8011f12:	187b      	adds	r3, r7, r1
 8011f14:	2200      	movs	r2, #0
 8011f16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f18:	260e      	movs	r6, #14
 8011f1a:	19bb      	adds	r3, r7, r6
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	23b0      	movs	r3, #176	@ 0xb0
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	58d2      	ldr	r2, [r2, r3]
 8011f28:	000d      	movs	r5, r1
 8011f2a:	187c      	adds	r4, r7, r1
 8011f2c:	1cfb      	adds	r3, r7, #3
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	0019      	movs	r1, r3
 8011f32:	0010      	movs	r0, r2
 8011f34:	f7f3 fdb4 	bl	8005aa0 <HAL_PCD_SetAddress>
 8011f38:	0003      	movs	r3, r0
 8011f3a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f3c:	19bc      	adds	r4, r7, r6
 8011f3e:	197b      	adds	r3, r7, r5
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	0018      	movs	r0, r3
 8011f44:	f000 f8a7 	bl	8012096 <USBD_Get_USB_Status>
 8011f48:	0003      	movs	r3, r0
 8011f4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011f4c:	19bb      	adds	r3, r7, r6
 8011f4e:	781b      	ldrb	r3, [r3, #0]
}
 8011f50:	0018      	movs	r0, r3
 8011f52:	46bd      	mov	sp, r7
 8011f54:	b005      	add	sp, #20
 8011f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f58 <USBD_LL_Transmit>:
=======
 801103e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011040:	b085      	sub	sp, #20
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	000a      	movs	r2, r1
 8011048:	1cfb      	adds	r3, r7, #3
 801104a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801104c:	210f      	movs	r1, #15
 801104e:	187b      	adds	r3, r7, r1
 8011050:	2200      	movs	r2, #0
 8011052:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011054:	260e      	movs	r6, #14
 8011056:	19bb      	adds	r3, r7, r6
 8011058:	2200      	movs	r2, #0
 801105a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	23b0      	movs	r3, #176	@ 0xb0
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	58d2      	ldr	r2, [r2, r3]
 8011064:	000d      	movs	r5, r1
 8011066:	187c      	adds	r4, r7, r1
 8011068:	1cfb      	adds	r3, r7, #3
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	0019      	movs	r1, r3
 801106e:	0010      	movs	r0, r2
 8011070:	f7f3 fdb2 	bl	8004bd8 <HAL_PCD_SetAddress>
 8011074:	0003      	movs	r3, r0
 8011076:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011078:	19bc      	adds	r4, r7, r6
 801107a:	197b      	adds	r3, r7, r5
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	0018      	movs	r0, r3
 8011080:	f000 f8a7 	bl	80111d2 <USBD_Get_USB_Status>
 8011084:	0003      	movs	r3, r0
 8011086:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011088:	19bb      	adds	r3, r7, r6
 801108a:	781b      	ldrb	r3, [r3, #0]
}
 801108c:	0018      	movs	r0, r3
 801108e:	46bd      	mov	sp, r7
 8011090:	b005      	add	sp, #20
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011094 <USBD_LL_Transmit>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 8011f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f5a:	b087      	sub	sp, #28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	0008      	movs	r0, r1
 8011f62:	607a      	str	r2, [r7, #4]
 8011f64:	0019      	movs	r1, r3
 8011f66:	230b      	movs	r3, #11
 8011f68:	18fb      	adds	r3, r7, r3
 8011f6a:	1c02      	adds	r2, r0, #0
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	2408      	movs	r4, #8
 8011f70:	193b      	adds	r3, r7, r4
 8011f72:	1c0a      	adds	r2, r1, #0
 8011f74:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f76:	2117      	movs	r1, #23
 8011f78:	187b      	adds	r3, r7, r1
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f7e:	2516      	movs	r5, #22
 8011f80:	197b      	adds	r3, r7, r5
 8011f82:	2200      	movs	r2, #0
 8011f84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	23b0      	movs	r3, #176	@ 0xb0
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	58d0      	ldr	r0, [r2, r3]
 8011f8e:	193b      	adds	r3, r7, r4
 8011f90:	881d      	ldrh	r5, [r3, #0]
 8011f92:	000e      	movs	r6, r1
 8011f94:	187c      	adds	r4, r7, r1
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	230b      	movs	r3, #11
 8011f9a:	18fb      	adds	r3, r7, r3
 8011f9c:	7819      	ldrb	r1, [r3, #0]
 8011f9e:	002b      	movs	r3, r5
 8011fa0:	f7f3 feb8 	bl	8005d14 <HAL_PCD_EP_Transmit>
 8011fa4:	0003      	movs	r3, r0
 8011fa6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fa8:	2516      	movs	r5, #22
 8011faa:	197c      	adds	r4, r7, r5
 8011fac:	19bb      	adds	r3, r7, r6
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	0018      	movs	r0, r3
 8011fb2:	f000 f870 	bl	8012096 <USBD_Get_USB_Status>
 8011fb6:	0003      	movs	r3, r0
 8011fb8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011fba:	197b      	adds	r3, r7, r5
 8011fbc:	781b      	ldrb	r3, [r3, #0]
}
 8011fbe:	0018      	movs	r0, r3
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	b007      	add	sp, #28
 8011fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011fc6 <USBD_LL_PrepareReceive>:
=======
 8011094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011096:	b087      	sub	sp, #28
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	0008      	movs	r0, r1
 801109e:	607a      	str	r2, [r7, #4]
 80110a0:	0019      	movs	r1, r3
 80110a2:	230b      	movs	r3, #11
 80110a4:	18fb      	adds	r3, r7, r3
 80110a6:	1c02      	adds	r2, r0, #0
 80110a8:	701a      	strb	r2, [r3, #0]
 80110aa:	2408      	movs	r4, #8
 80110ac:	193b      	adds	r3, r7, r4
 80110ae:	1c0a      	adds	r2, r1, #0
 80110b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110b2:	2117      	movs	r1, #23
 80110b4:	187b      	adds	r3, r7, r1
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110ba:	2516      	movs	r5, #22
 80110bc:	197b      	adds	r3, r7, r5
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80110c2:	68fa      	ldr	r2, [r7, #12]
 80110c4:	23b0      	movs	r3, #176	@ 0xb0
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	58d0      	ldr	r0, [r2, r3]
 80110ca:	193b      	adds	r3, r7, r4
 80110cc:	881d      	ldrh	r5, [r3, #0]
 80110ce:	000e      	movs	r6, r1
 80110d0:	187c      	adds	r4, r7, r1
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	230b      	movs	r3, #11
 80110d6:	18fb      	adds	r3, r7, r3
 80110d8:	7819      	ldrb	r1, [r3, #0]
 80110da:	002b      	movs	r3, r5
 80110dc:	f7f3 feb6 	bl	8004e4c <HAL_PCD_EP_Transmit>
 80110e0:	0003      	movs	r3, r0
 80110e2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110e4:	2516      	movs	r5, #22
 80110e6:	197c      	adds	r4, r7, r5
 80110e8:	19bb      	adds	r3, r7, r6
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	0018      	movs	r0, r3
 80110ee:	f000 f870 	bl	80111d2 <USBD_Get_USB_Status>
 80110f2:	0003      	movs	r3, r0
 80110f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80110f6:	197b      	adds	r3, r7, r5
 80110f8:	781b      	ldrb	r3, [r3, #0]
}
 80110fa:	0018      	movs	r0, r3
 80110fc:	46bd      	mov	sp, r7
 80110fe:	b007      	add	sp, #28
 8011100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011102 <USBD_LL_PrepareReceive>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 8011fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fc8:	b087      	sub	sp, #28
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	60f8      	str	r0, [r7, #12]
 8011fce:	0008      	movs	r0, r1
 8011fd0:	607a      	str	r2, [r7, #4]
 8011fd2:	0019      	movs	r1, r3
 8011fd4:	230b      	movs	r3, #11
 8011fd6:	18fb      	adds	r3, r7, r3
 8011fd8:	1c02      	adds	r2, r0, #0
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	2408      	movs	r4, #8
 8011fde:	193b      	adds	r3, r7, r4
 8011fe0:	1c0a      	adds	r2, r1, #0
 8011fe2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fe4:	2117      	movs	r1, #23
 8011fe6:	187b      	adds	r3, r7, r1
 8011fe8:	2200      	movs	r2, #0
 8011fea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fec:	2516      	movs	r5, #22
 8011fee:	197b      	adds	r3, r7, r5
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	23b0      	movs	r3, #176	@ 0xb0
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	58d0      	ldr	r0, [r2, r3]
 8011ffc:	193b      	adds	r3, r7, r4
 8011ffe:	881d      	ldrh	r5, [r3, #0]
 8012000:	000e      	movs	r6, r1
 8012002:	187c      	adds	r4, r7, r1
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	230b      	movs	r3, #11
 8012008:	18fb      	adds	r3, r7, r3
 801200a:	7819      	ldrb	r1, [r3, #0]
 801200c:	002b      	movs	r3, r5
 801200e:	f7f3 fe31 	bl	8005c74 <HAL_PCD_EP_Receive>
 8012012:	0003      	movs	r3, r0
 8012014:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012016:	2516      	movs	r5, #22
 8012018:	197c      	adds	r4, r7, r5
 801201a:	19bb      	adds	r3, r7, r6
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	0018      	movs	r0, r3
 8012020:	f000 f839 	bl	8012096 <USBD_Get_USB_Status>
 8012024:	0003      	movs	r3, r0
 8012026:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012028:	197b      	adds	r3, r7, r5
 801202a:	781b      	ldrb	r3, [r3, #0]
}
 801202c:	0018      	movs	r0, r3
 801202e:	46bd      	mov	sp, r7
 8012030:	b007      	add	sp, #28
 8012032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012034 <USBD_LL_GetRxDataSize>:
=======
 8011102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011104:	b087      	sub	sp, #28
 8011106:	af00      	add	r7, sp, #0
 8011108:	60f8      	str	r0, [r7, #12]
 801110a:	0008      	movs	r0, r1
 801110c:	607a      	str	r2, [r7, #4]
 801110e:	0019      	movs	r1, r3
 8011110:	230b      	movs	r3, #11
 8011112:	18fb      	adds	r3, r7, r3
 8011114:	1c02      	adds	r2, r0, #0
 8011116:	701a      	strb	r2, [r3, #0]
 8011118:	2408      	movs	r4, #8
 801111a:	193b      	adds	r3, r7, r4
 801111c:	1c0a      	adds	r2, r1, #0
 801111e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011120:	2117      	movs	r1, #23
 8011122:	187b      	adds	r3, r7, r1
 8011124:	2200      	movs	r2, #0
 8011126:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011128:	2516      	movs	r5, #22
 801112a:	197b      	adds	r3, r7, r5
 801112c:	2200      	movs	r2, #0
 801112e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	23b0      	movs	r3, #176	@ 0xb0
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	58d0      	ldr	r0, [r2, r3]
 8011138:	193b      	adds	r3, r7, r4
 801113a:	881d      	ldrh	r5, [r3, #0]
 801113c:	000e      	movs	r6, r1
 801113e:	187c      	adds	r4, r7, r1
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	230b      	movs	r3, #11
 8011144:	18fb      	adds	r3, r7, r3
 8011146:	7819      	ldrb	r1, [r3, #0]
 8011148:	002b      	movs	r3, r5
 801114a:	f7f3 fe2f 	bl	8004dac <HAL_PCD_EP_Receive>
 801114e:	0003      	movs	r3, r0
 8011150:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011152:	2516      	movs	r5, #22
 8011154:	197c      	adds	r4, r7, r5
 8011156:	19bb      	adds	r3, r7, r6
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	0018      	movs	r0, r3
 801115c:	f000 f839 	bl	80111d2 <USBD_Get_USB_Status>
 8011160:	0003      	movs	r3, r0
 8011162:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011164:	197b      	adds	r3, r7, r5
 8011166:	781b      	ldrb	r3, [r3, #0]
}
 8011168:	0018      	movs	r0, r3
 801116a:	46bd      	mov	sp, r7
 801116c:	b007      	add	sp, #28
 801116e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011170 <USBD_LL_GetRxDataSize>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	000a      	movs	r2, r1
 801203e:	1cfb      	adds	r3, r7, #3
 8012040:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012042:	687a      	ldr	r2, [r7, #4]
 8012044:	23b0      	movs	r3, #176	@ 0xb0
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	58d2      	ldr	r2, [r2, r3]
 801204a:	1cfb      	adds	r3, r7, #3
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	0019      	movs	r1, r3
 8012050:	0010      	movs	r0, r2
 8012052:	f7f3 fe46 	bl	8005ce2 <HAL_PCD_EP_GetRxCount>
 8012056:	0003      	movs	r3, r0
}
 8012058:	0018      	movs	r0, r3
 801205a:	46bd      	mov	sp, r7
 801205c:	b002      	add	sp, #8
 801205e:	bd80      	pop	{r7, pc}

08012060 <USBD_static_malloc>:
=======
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	000a      	movs	r2, r1
 801117a:	1cfb      	adds	r3, r7, #3
 801117c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	23b0      	movs	r3, #176	@ 0xb0
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	58d2      	ldr	r2, [r2, r3]
 8011186:	1cfb      	adds	r3, r7, #3
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	0019      	movs	r1, r3
 801118c:	0010      	movs	r0, r2
 801118e:	f7f3 fe44 	bl	8004e1a <HAL_PCD_EP_GetRxCount>
 8011192:	0003      	movs	r3, r0
}
 8011194:	0018      	movs	r0, r3
 8011196:	46bd      	mov	sp, r7
 8011198:	b002      	add	sp, #8
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_static_malloc>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012068:	4b02      	ldr	r3, [pc, #8]	@ (8012074 <USBD_static_malloc+0x14>)
}
 801206a:	0018      	movs	r0, r3
 801206c:	46bd      	mov	sp, r7
 801206e:	b002      	add	sp, #8
 8012070:	bd80      	pop	{r7, pc}
 8012072:	46c0      	nop			@ (mov r8, r8)
 8012074:	20001c00 	.word	0x20001c00

08012078 <USBD_static_free>:
=======
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111a4:	4b02      	ldr	r3, [pc, #8]	@ (80111b0 <USBD_static_malloc+0x14>)
}
 80111a6:	0018      	movs	r0, r3
 80111a8:	46bd      	mov	sp, r7
 80111aa:	b002      	add	sp, #8
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	46c0      	nop			@ (mov r8, r8)
 80111b0:	20001af8 	.word	0x20001af8

080111b4 <USBD_static_free>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]

}
 8012080:	46c0      	nop			@ (mov r8, r8)
 8012082:	46bd      	mov	sp, r7
 8012084:	b002      	add	sp, #8
 8012086:	bd80      	pop	{r7, pc}

08012088 <SystemClockConfig_Resume>:
=======
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]

}
 80111bc:	46c0      	nop			@ (mov r8, r8)
 80111be:	46bd      	mov	sp, r7
 80111c0:	b002      	add	sp, #8
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <SystemClockConfig_Resume>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
<<<<<<< HEAD
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801208c:	f7f1 fab8 	bl	8003600 <SystemClock_Config>
}
 8012090:	46c0      	nop			@ (mov r8, r8)
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <USBD_Get_USB_Status>:
=======
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80111c8:	f7f1 f9da 	bl	8002580 <SystemClock_Config>
}
 80111cc:	46c0      	nop			@ (mov r8, r8)
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <USBD_Get_USB_Status>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 8012096:	b580      	push	{r7, lr}
 8012098:	b084      	sub	sp, #16
 801209a:	af00      	add	r7, sp, #0
 801209c:	0002      	movs	r2, r0
 801209e:	1dfb      	adds	r3, r7, #7
 80120a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120a2:	230f      	movs	r3, #15
 80120a4:	18fb      	adds	r3, r7, r3
 80120a6:	2200      	movs	r2, #0
 80120a8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80120aa:	1dfb      	adds	r3, r7, #7
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	2b03      	cmp	r3, #3
 80120b0:	d017      	beq.n	80120e2 <USBD_Get_USB_Status+0x4c>
 80120b2:	dc1b      	bgt.n	80120ec <USBD_Get_USB_Status+0x56>
 80120b4:	2b02      	cmp	r3, #2
 80120b6:	d00f      	beq.n	80120d8 <USBD_Get_USB_Status+0x42>
 80120b8:	dc18      	bgt.n	80120ec <USBD_Get_USB_Status+0x56>
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <USBD_Get_USB_Status+0x2e>
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d005      	beq.n	80120ce <USBD_Get_USB_Status+0x38>
 80120c2:	e013      	b.n	80120ec <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80120c4:	230f      	movs	r3, #15
 80120c6:	18fb      	adds	r3, r7, r3
 80120c8:	2200      	movs	r2, #0
 80120ca:	701a      	strb	r2, [r3, #0]
    break;
 80120cc:	e013      	b.n	80120f6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80120ce:	230f      	movs	r3, #15
 80120d0:	18fb      	adds	r3, r7, r3
 80120d2:	2202      	movs	r2, #2
 80120d4:	701a      	strb	r2, [r3, #0]
    break;
 80120d6:	e00e      	b.n	80120f6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80120d8:	230f      	movs	r3, #15
 80120da:	18fb      	adds	r3, r7, r3
 80120dc:	2201      	movs	r2, #1
 80120de:	701a      	strb	r2, [r3, #0]
    break;
 80120e0:	e009      	b.n	80120f6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80120e2:	230f      	movs	r3, #15
 80120e4:	18fb      	adds	r3, r7, r3
 80120e6:	2202      	movs	r2, #2
 80120e8:	701a      	strb	r2, [r3, #0]
    break;
 80120ea:	e004      	b.n	80120f6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80120ec:	230f      	movs	r3, #15
 80120ee:	18fb      	adds	r3, r7, r3
 80120f0:	2202      	movs	r2, #2
 80120f2:	701a      	strb	r2, [r3, #0]
    break;
 80120f4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80120f6:	230f      	movs	r3, #15
 80120f8:	18fb      	adds	r3, r7, r3
 80120fa:	781b      	ldrb	r3, [r3, #0]
}
 80120fc:	0018      	movs	r0, r3
 80120fe:	46bd      	mov	sp, r7
 8012100:	b004      	add	sp, #16
 8012102:	bd80      	pop	{r7, pc}

08012104 <dwt_initialise>:
=======
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b084      	sub	sp, #16
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	0002      	movs	r2, r0
 80111da:	1dfb      	adds	r3, r7, #7
 80111dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111de:	230f      	movs	r3, #15
 80111e0:	18fb      	adds	r3, r7, r3
 80111e2:	2200      	movs	r2, #0
 80111e4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80111e6:	1dfb      	adds	r3, r7, #7
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b03      	cmp	r3, #3
 80111ec:	d017      	beq.n	801121e <USBD_Get_USB_Status+0x4c>
 80111ee:	dc1b      	bgt.n	8011228 <USBD_Get_USB_Status+0x56>
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d00f      	beq.n	8011214 <USBD_Get_USB_Status+0x42>
 80111f4:	dc18      	bgt.n	8011228 <USBD_Get_USB_Status+0x56>
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <USBD_Get_USB_Status+0x2e>
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d005      	beq.n	801120a <USBD_Get_USB_Status+0x38>
 80111fe:	e013      	b.n	8011228 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011200:	230f      	movs	r3, #15
 8011202:	18fb      	adds	r3, r7, r3
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
    break;
 8011208:	e013      	b.n	8011232 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801120a:	230f      	movs	r3, #15
 801120c:	18fb      	adds	r3, r7, r3
 801120e:	2202      	movs	r2, #2
 8011210:	701a      	strb	r2, [r3, #0]
    break;
 8011212:	e00e      	b.n	8011232 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011214:	230f      	movs	r3, #15
 8011216:	18fb      	adds	r3, r7, r3
 8011218:	2201      	movs	r2, #1
 801121a:	701a      	strb	r2, [r3, #0]
    break;
 801121c:	e009      	b.n	8011232 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801121e:	230f      	movs	r3, #15
 8011220:	18fb      	adds	r3, r7, r3
 8011222:	2202      	movs	r2, #2
 8011224:	701a      	strb	r2, [r3, #0]
    break;
 8011226:	e004      	b.n	8011232 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8011228:	230f      	movs	r3, #15
 801122a:	18fb      	adds	r3, r7, r3
 801122c:	2202      	movs	r2, #2
 801122e:	701a      	strb	r2, [r3, #0]
    break;
 8011230:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8011232:	230f      	movs	r3, #15
 8011234:	18fb      	adds	r3, r7, r3
 8011236:	781b      	ldrb	r3, [r3, #0]
}
 8011238:	0018      	movs	r0, r3
 801123a:	46bd      	mov	sp, r7
 801123c:	b004      	add	sp, #16
 801123e:	bd80      	pop	{r7, pc}

08011240 <dwt_initialise>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
<<<<<<< HEAD
 8012104:	b5b0      	push	{r4, r5, r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 801210c:	2316      	movs	r3, #22
 801210e:	18fb      	adds	r3, r7, r3
 8012110:	2200      	movs	r2, #0
 8012112:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 8012114:	2300      	movs	r3, #0
 8012116:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8012118:	4ba0      	ldr	r3, [pc, #640]	@ (801239c <dwt_initialise+0x298>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2200      	movs	r2, #0
 801211e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8012120:	4b9e      	ldr	r3, [pc, #632]	@ (801239c <dwt_initialise+0x298>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	2200      	movs	r2, #0
 8012126:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8012128:	4b9c      	ldr	r3, [pc, #624]	@ (801239c <dwt_initialise+0x298>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2200      	movs	r2, #0
 801212e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8012130:	4b9a      	ldr	r3, [pc, #616]	@ (801239c <dwt_initialise+0x298>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2200      	movs	r2, #0
 8012136:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8012138:	4b98      	ldr	r3, [pc, #608]	@ (801239c <dwt_initialise+0x298>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2200      	movs	r2, #0
 801213e:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8012140:	4b96      	ldr	r3, [pc, #600]	@ (801239c <dwt_initialise+0x298>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2200      	movs	r2, #0
 8012146:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8012148:	4b94      	ldr	r3, [pc, #592]	@ (801239c <dwt_initialise+0x298>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2200      	movs	r2, #0
 801214e:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8011240:	b5b0      	push	{r4, r5, r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8011248:	2316      	movs	r3, #22
 801124a:	18fb      	adds	r3, r7, r3
 801124c:	2200      	movs	r2, #0
 801124e:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8011254:	4ba0      	ldr	r3, [pc, #640]	@ (80114d8 <dwt_initialise+0x298>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2200      	movs	r2, #0
 801125a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 801125c:	4b9e      	ldr	r3, [pc, #632]	@ (80114d8 <dwt_initialise+0x298>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2200      	movs	r2, #0
 8011262:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8011264:	4b9c      	ldr	r3, [pc, #624]	@ (80114d8 <dwt_initialise+0x298>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2200      	movs	r2, #0
 801126a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 801126c:	4b9a      	ldr	r3, [pc, #616]	@ (80114d8 <dwt_initialise+0x298>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2200      	movs	r2, #0
 8011272:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8011274:	4b98      	ldr	r3, [pc, #608]	@ (80114d8 <dwt_initialise+0x298>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2200      	movs	r2, #0
 801127a:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 801127c:	4b96      	ldr	r3, [pc, #600]	@ (80114d8 <dwt_initialise+0x298>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2200      	movs	r2, #0
 8011282:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8011284:	4b94      	ldr	r3, [pc, #592]	@ (80114d8 <dwt_initialise+0x298>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	2200      	movs	r2, #0
 801128a:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
<<<<<<< HEAD
 8012150:	f000 f92c 	bl	80123ac <dwt_readdevid>
 8012154:	0003      	movs	r3, r0
 8012156:	4a92      	ldr	r2, [pc, #584]	@ (80123a0 <dwt_initialise+0x29c>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d002      	beq.n	8012162 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 801215c:	2301      	movs	r3, #1
 801215e:	425b      	negs	r3, r3
 8012160:	e118      	b.n	8012394 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2202      	movs	r2, #2
 8012166:	4013      	ands	r3, r2
 8012168:	d101      	bne.n	801216e <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 801216a:	f000 ffd1 	bl	8013110 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2202      	movs	r2, #2
 8012172:	4013      	ands	r3, r2
 8012174:	d003      	beq.n	801217e <dwt_initialise+0x7a>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	22f8      	movs	r2, #248	@ 0xf8
 801217a:	4013      	ands	r3, r2
 801217c:	d102      	bne.n	8012184 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 801217e:	2000      	movs	r0, #0
 8012180:	f000 fdb2 	bl	8012ce8 <_dwt_enableclocks>
=======
 801128c:	f000 f92c 	bl	80114e8 <dwt_readdevid>
 8011290:	0003      	movs	r3, r0
 8011292:	4a92      	ldr	r2, [pc, #584]	@ (80114dc <dwt_initialise+0x29c>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d002      	beq.n	801129e <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8011298:	2301      	movs	r3, #1
 801129a:	425b      	negs	r3, r3
 801129c:	e118      	b.n	80114d0 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2202      	movs	r2, #2
 80112a2:	4013      	ands	r3, r2
 80112a4:	d101      	bne.n	80112aa <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80112a6:	f000 ffd1 	bl	801224c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2202      	movs	r2, #2
 80112ae:	4013      	ands	r3, r2
 80112b0:	d003      	beq.n	80112ba <dwt_initialise+0x7a>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	22f8      	movs	r2, #248	@ 0xf8
 80112b6:	4013      	ands	r3, r2
 80112b8:	d102      	bne.n	80112c0 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80112ba:	2000      	movs	r0, #0
 80112bc:	f000 fdb2 	bl	8011e24 <_dwt_enableclocks>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
<<<<<<< HEAD
 8012184:	2204      	movs	r2, #4
 8012186:	2100      	movs	r1, #0
 8012188:	2024      	movs	r0, #36	@ 0x24
 801218a:	f000 fc95 	bl	8012ab8 <dwt_write8bitoffsetreg>
=======
 80112c0:	2204      	movs	r2, #4
 80112c2:	2100      	movs	r1, #0
 80112c4:	2024      	movs	r0, #36	@ 0x24
 80112c6:	f000 fc95 	bl	8011bf4 <dwt_write8bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
<<<<<<< HEAD
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2202      	movs	r2, #2
 8012192:	4013      	ands	r3, r2
 8012194:	d118      	bne.n	80121c8 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8012196:	2004      	movs	r0, #4
 8012198:	f000 fce8 	bl	8012b6c <_dwt_otpread>
 801219c:	0003      	movs	r3, r0
 801219e:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	22ff      	movs	r2, #255	@ 0xff
 80121a4:	4013      	ands	r3, r2
 80121a6:	d021      	beq.n	80121ec <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80121a8:	2202      	movs	r2, #2
 80121aa:	2112      	movs	r1, #18
 80121ac:	202d      	movs	r0, #45	@ 0x2d
 80121ae:	f000 fc83 	bl	8012ab8 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80121b2:	4b7a      	ldr	r3, [pc, #488]	@ (801239c <dwt_initialise+0x298>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	8ada      	ldrh	r2, [r3, #22]
 80121b8:	4b78      	ldr	r3, [pc, #480]	@ (801239c <dwt_initialise+0x298>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2180      	movs	r1, #128	@ 0x80
 80121be:	0149      	lsls	r1, r1, #5
 80121c0:	430a      	orrs	r2, r1
 80121c2:	b292      	uxth	r2, r2
 80121c4:	82da      	strh	r2, [r3, #22]
 80121c6:	e011      	b.n	80121ec <dwt_initialise+0xe8>
=======
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2202      	movs	r2, #2
 80112ce:	4013      	ands	r3, r2
 80112d0:	d118      	bne.n	8011304 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 80112d2:	2004      	movs	r0, #4
 80112d4:	f000 fce8 	bl	8011ca8 <_dwt_otpread>
 80112d8:	0003      	movs	r3, r0
 80112da:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	22ff      	movs	r2, #255	@ 0xff
 80112e0:	4013      	ands	r3, r2
 80112e2:	d021      	beq.n	8011328 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80112e4:	2202      	movs	r2, #2
 80112e6:	2112      	movs	r1, #18
 80112e8:	202d      	movs	r0, #45	@ 0x2d
 80112ea:	f000 fc83 	bl	8011bf4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80112ee:	4b7a      	ldr	r3, [pc, #488]	@ (80114d8 <dwt_initialise+0x298>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	8ada      	ldrh	r2, [r3, #22]
 80112f4:	4b78      	ldr	r3, [pc, #480]	@ (80114d8 <dwt_initialise+0x298>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2180      	movs	r1, #128	@ 0x80
 80112fa:	0149      	lsls	r1, r1, #5
 80112fc:	430a      	orrs	r2, r1
 80112fe:	b292      	uxth	r2, r2
 8011300:	82da      	strh	r2, [r3, #22]
 8011302:	e011      	b.n	8011328 <dwt_initialise+0xe8>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
<<<<<<< HEAD
 80121c8:	2130      	movs	r1, #48	@ 0x30
 80121ca:	2028      	movs	r0, #40	@ 0x28
 80121cc:	f000 fc16 	bl	80129fc <dwt_read32bitoffsetreg>
 80121d0:	0003      	movs	r3, r0
 80121d2:	4a74      	ldr	r2, [pc, #464]	@ (80123a4 <dwt_initialise+0x2a0>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d009      	beq.n	80121ec <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80121d8:	4b70      	ldr	r3, [pc, #448]	@ (801239c <dwt_initialise+0x298>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	8ada      	ldrh	r2, [r3, #22]
 80121de:	4b6f      	ldr	r3, [pc, #444]	@ (801239c <dwt_initialise+0x298>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2180      	movs	r1, #128	@ 0x80
 80121e4:	0149      	lsls	r1, r1, #5
 80121e6:	430a      	orrs	r2, r1
 80121e8:	b292      	uxth	r2, r2
 80121ea:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2202      	movs	r2, #2
 80121f0:	4013      	ands	r3, r2
 80121f2:	d007      	beq.n	8012204 <dwt_initialise+0x100>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2202      	movs	r2, #2
 80121f8:	4013      	ands	r3, r2
 80121fa:	d013      	beq.n	8012224 <dwt_initialise+0x120>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2208      	movs	r2, #8
 8012200:	4013      	ands	r3, r2
 8012202:	d00f      	beq.n	8012224 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8012204:	201e      	movs	r0, #30
 8012206:	f000 fcb1 	bl	8012b6c <_dwt_otpread>
 801220a:	0002      	movs	r2, r0
 801220c:	2116      	movs	r1, #22
 801220e:	187b      	adds	r3, r7, r1
 8012210:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8012212:	187b      	adds	r3, r7, r1
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	0a1b      	lsrs	r3, r3, #8
 8012218:	b29a      	uxth	r2, r3
 801221a:	4b60      	ldr	r3, [pc, #384]	@ (801239c <dwt_initialise+0x298>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	b2d2      	uxtb	r2, r2
 8012220:	72da      	strb	r2, [r3, #11]
 8012222:	e003      	b.n	801222c <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8012224:	4b5d      	ldr	r3, [pc, #372]	@ (801239c <dwt_initialise+0x298>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2200      	movs	r2, #0
 801222a:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2202      	movs	r2, #2
 8012230:	4013      	ands	r3, r2
 8012232:	d10f      	bne.n	8012254 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8012234:	2116      	movs	r1, #22
 8012236:	187b      	adds	r3, r7, r1
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	221f      	movs	r2, #31
 801223c:	4013      	ands	r3, r2
 801223e:	d102      	bne.n	8012246 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8012240:	187b      	adds	r3, r7, r1
 8012242:	2210      	movs	r2, #16
 8012244:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8012246:	2316      	movs	r3, #22
 8012248:	18fb      	adds	r3, r7, r3
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	b2db      	uxtb	r3, r3
 801224e:	0018      	movs	r0, r3
 8012250:	f000 ff84 	bl	801315c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2210      	movs	r2, #16
 8012258:	4013      	ands	r3, r2
 801225a:	d007      	beq.n	801226c <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 801225c:	4b4f      	ldr	r3, [pc, #316]	@ (801239c <dwt_initialise+0x298>)
 801225e:	681c      	ldr	r4, [r3, #0]
 8012260:	2006      	movs	r0, #6
 8012262:	f000 fc83 	bl	8012b6c <_dwt_otpread>
 8012266:	0003      	movs	r3, r0
 8012268:	6023      	str	r3, [r4, #0]
 801226a:	e003      	b.n	8012274 <dwt_initialise+0x170>
=======
 8011304:	2130      	movs	r1, #48	@ 0x30
 8011306:	2028      	movs	r0, #40	@ 0x28
 8011308:	f000 fc16 	bl	8011b38 <dwt_read32bitoffsetreg>
 801130c:	0003      	movs	r3, r0
 801130e:	4a74      	ldr	r2, [pc, #464]	@ (80114e0 <dwt_initialise+0x2a0>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d009      	beq.n	8011328 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8011314:	4b70      	ldr	r3, [pc, #448]	@ (80114d8 <dwt_initialise+0x298>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	8ada      	ldrh	r2, [r3, #22]
 801131a:	4b6f      	ldr	r3, [pc, #444]	@ (80114d8 <dwt_initialise+0x298>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2180      	movs	r1, #128	@ 0x80
 8011320:	0149      	lsls	r1, r1, #5
 8011322:	430a      	orrs	r2, r1
 8011324:	b292      	uxth	r2, r2
 8011326:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2202      	movs	r2, #2
 801132c:	4013      	ands	r3, r2
 801132e:	d007      	beq.n	8011340 <dwt_initialise+0x100>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2202      	movs	r2, #2
 8011334:	4013      	ands	r3, r2
 8011336:	d013      	beq.n	8011360 <dwt_initialise+0x120>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2208      	movs	r2, #8
 801133c:	4013      	ands	r3, r2
 801133e:	d00f      	beq.n	8011360 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8011340:	201e      	movs	r0, #30
 8011342:	f000 fcb1 	bl	8011ca8 <_dwt_otpread>
 8011346:	0002      	movs	r2, r0
 8011348:	2116      	movs	r1, #22
 801134a:	187b      	adds	r3, r7, r1
 801134c:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 801134e:	187b      	adds	r3, r7, r1
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	0a1b      	lsrs	r3, r3, #8
 8011354:	b29a      	uxth	r2, r3
 8011356:	4b60      	ldr	r3, [pc, #384]	@ (80114d8 <dwt_initialise+0x298>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	b2d2      	uxtb	r2, r2
 801135c:	72da      	strb	r2, [r3, #11]
 801135e:	e003      	b.n	8011368 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8011360:	4b5d      	ldr	r3, [pc, #372]	@ (80114d8 <dwt_initialise+0x298>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2200      	movs	r2, #0
 8011366:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2202      	movs	r2, #2
 801136c:	4013      	ands	r3, r2
 801136e:	d10f      	bne.n	8011390 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8011370:	2116      	movs	r1, #22
 8011372:	187b      	adds	r3, r7, r1
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	221f      	movs	r2, #31
 8011378:	4013      	ands	r3, r2
 801137a:	d102      	bne.n	8011382 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 801137c:	187b      	adds	r3, r7, r1
 801137e:	2210      	movs	r2, #16
 8011380:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8011382:	2316      	movs	r3, #22
 8011384:	18fb      	adds	r3, r7, r3
 8011386:	881b      	ldrh	r3, [r3, #0]
 8011388:	b2db      	uxtb	r3, r3
 801138a:	0018      	movs	r0, r3
 801138c:	f000 ff84 	bl	8012298 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2210      	movs	r2, #16
 8011394:	4013      	ands	r3, r2
 8011396:	d007      	beq.n	80113a8 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8011398:	4b4f      	ldr	r3, [pc, #316]	@ (80114d8 <dwt_initialise+0x298>)
 801139a:	681c      	ldr	r4, [r3, #0]
 801139c:	2006      	movs	r0, #6
 801139e:	f000 fc83 	bl	8011ca8 <_dwt_otpread>
 80113a2:	0003      	movs	r3, r0
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	e003      	b.n	80113b0 <dwt_initialise+0x170>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        pdw1000local->partID = 0;
<<<<<<< HEAD
 801226c:	4b4b      	ldr	r3, [pc, #300]	@ (801239c <dwt_initialise+0x298>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2200      	movs	r2, #0
 8012272:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2220      	movs	r2, #32
 8012278:	4013      	ands	r3, r2
 801227a:	d007      	beq.n	801228c <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 801227c:	4b47      	ldr	r3, [pc, #284]	@ (801239c <dwt_initialise+0x298>)
 801227e:	681c      	ldr	r4, [r3, #0]
 8012280:	2007      	movs	r0, #7
 8012282:	f000 fc73 	bl	8012b6c <_dwt_otpread>
 8012286:	0003      	movs	r3, r0
 8012288:	6063      	str	r3, [r4, #4]
 801228a:	e003      	b.n	8012294 <dwt_initialise+0x190>
=======
 80113a8:	4b4b      	ldr	r3, [pc, #300]	@ (80114d8 <dwt_initialise+0x298>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2220      	movs	r2, #32
 80113b4:	4013      	ands	r3, r2
 80113b6:	d007      	beq.n	80113c8 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80113b8:	4b47      	ldr	r3, [pc, #284]	@ (80114d8 <dwt_initialise+0x298>)
 80113ba:	681c      	ldr	r4, [r3, #0]
 80113bc:	2007      	movs	r0, #7
 80113be:	f000 fc73 	bl	8011ca8 <_dwt_otpread>
 80113c2:	0003      	movs	r3, r0
 80113c4:	6063      	str	r3, [r4, #4]
 80113c6:	e003      	b.n	80113d0 <dwt_initialise+0x190>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        pdw1000local->lotID = 0;
<<<<<<< HEAD
 801228c:	4b43      	ldr	r3, [pc, #268]	@ (801239c <dwt_initialise+0x298>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2200      	movs	r2, #0
 8012292:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2240      	movs	r2, #64	@ 0x40
 8012298:	4013      	ands	r3, r2
 801229a:	d008      	beq.n	80122ae <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 801229c:	2008      	movs	r0, #8
 801229e:	f000 fc65 	bl	8012b6c <_dwt_otpread>
 80122a2:	0002      	movs	r2, r0
 80122a4:	4b3d      	ldr	r3, [pc, #244]	@ (801239c <dwt_initialise+0x298>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	b2d2      	uxtb	r2, r2
 80122aa:	721a      	strb	r2, [r3, #8]
 80122ac:	e003      	b.n	80122b6 <dwt_initialise+0x1b2>
=======
 80113c8:	4b43      	ldr	r3, [pc, #268]	@ (80114d8 <dwt_initialise+0x298>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2200      	movs	r2, #0
 80113ce:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2240      	movs	r2, #64	@ 0x40
 80113d4:	4013      	ands	r3, r2
 80113d6:	d008      	beq.n	80113ea <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 80113d8:	2008      	movs	r0, #8
 80113da:	f000 fc65 	bl	8011ca8 <_dwt_otpread>
 80113de:	0002      	movs	r2, r0
 80113e0:	4b3d      	ldr	r3, [pc, #244]	@ (80114d8 <dwt_initialise+0x298>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	b2d2      	uxtb	r2, r2
 80113e6:	721a      	strb	r2, [r3, #8]
 80113e8:	e003      	b.n	80113f2 <dwt_initialise+0x1b2>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        pdw1000local->vBatP = 0;
<<<<<<< HEAD
 80122ae:	4b3b      	ldr	r3, [pc, #236]	@ (801239c <dwt_initialise+0x298>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2200      	movs	r2, #0
 80122b4:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2280      	movs	r2, #128	@ 0x80
 80122ba:	4013      	ands	r3, r2
 80122bc:	d008      	beq.n	80122d0 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80122be:	2009      	movs	r0, #9
 80122c0:	f000 fc54 	bl	8012b6c <_dwt_otpread>
 80122c4:	0002      	movs	r2, r0
 80122c6:	4b35      	ldr	r3, [pc, #212]	@ (801239c <dwt_initialise+0x298>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	b2d2      	uxtb	r2, r2
 80122cc:	725a      	strb	r2, [r3, #9]
 80122ce:	e003      	b.n	80122d8 <dwt_initialise+0x1d4>
=======
 80113ea:	4b3b      	ldr	r3, [pc, #236]	@ (80114d8 <dwt_initialise+0x298>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2280      	movs	r2, #128	@ 0x80
 80113f6:	4013      	ands	r3, r2
 80113f8:	d008      	beq.n	801140c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80113fa:	2009      	movs	r0, #9
 80113fc:	f000 fc54 	bl	8011ca8 <_dwt_otpread>
 8011400:	0002      	movs	r2, r0
 8011402:	4b35      	ldr	r3, [pc, #212]	@ (80114d8 <dwt_initialise+0x298>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	b2d2      	uxtb	r2, r2
 8011408:	725a      	strb	r2, [r3, #9]
 801140a:	e003      	b.n	8011414 <dwt_initialise+0x1d4>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        pdw1000local->tempP = 0;
<<<<<<< HEAD
 80122d0:	4b32      	ldr	r3, [pc, #200]	@ (801239c <dwt_initialise+0x298>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2200      	movs	r2, #0
 80122d6:	725a      	strb	r2, [r3, #9]
=======
 801140c:	4b32      	ldr	r3, [pc, #200]	@ (80114d8 <dwt_initialise+0x298>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2200      	movs	r2, #0
 8011412:	725a      	strb	r2, [r3, #9]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
<<<<<<< HEAD
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2202      	movs	r2, #2
 80122dc:	4013      	ands	r3, r2
 80122de:	d127      	bne.n	8012330 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2201      	movs	r2, #1
 80122e4:	4013      	ands	r3, r2
 80122e6:	d00c      	beq.n	8012302 <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 80122e8:	f000 fc98 	bl	8012c1c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80122ec:	4b2b      	ldr	r3, [pc, #172]	@ (801239c <dwt_initialise+0x298>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	8ada      	ldrh	r2, [r3, #22]
 80122f2:	4b2a      	ldr	r3, [pc, #168]	@ (801239c <dwt_initialise+0x298>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2180      	movs	r1, #128	@ 0x80
 80122f8:	0109      	lsls	r1, r1, #4
 80122fa:	430a      	orrs	r2, r1
 80122fc:	b292      	uxth	r2, r2
 80122fe:	82da      	strh	r2, [r3, #22]
 8012300:	e024      	b.n	801234c <dwt_initialise+0x248>
=======
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2202      	movs	r2, #2
 8011418:	4013      	ands	r3, r2
 801141a:	d127      	bne.n	801146c <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2201      	movs	r2, #1
 8011420:	4013      	ands	r3, r2
 8011422:	d00c      	beq.n	801143e <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 8011424:	f000 fc98 	bl	8011d58 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8011428:	4b2b      	ldr	r3, [pc, #172]	@ (80114d8 <dwt_initialise+0x298>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	8ada      	ldrh	r2, [r3, #22]
 801142e:	4b2a      	ldr	r3, [pc, #168]	@ (80114d8 <dwt_initialise+0x298>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2180      	movs	r1, #128	@ 0x80
 8011434:	0109      	lsls	r1, r1, #4
 8011436:	430a      	orrs	r2, r1
 8011438:	b292      	uxth	r2, r2
 801143a:	82da      	strh	r2, [r3, #22]
 801143c:	e024      	b.n	8011488 <dwt_initialise+0x248>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
<<<<<<< HEAD
 8012302:	250e      	movs	r5, #14
 8012304:	197c      	adds	r4, r7, r5
 8012306:	2105      	movs	r1, #5
 8012308:	2036      	movs	r0, #54	@ 0x36
 801230a:	f000 fb9e 	bl	8012a4a <dwt_read16bitoffsetreg>
 801230e:	0003      	movs	r3, r0
 8012310:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8012312:	0028      	movs	r0, r5
 8012314:	183b      	adds	r3, r7, r0
 8012316:	183a      	adds	r2, r7, r0
 8012318:	8812      	ldrh	r2, [r2, #0]
 801231a:	4923      	ldr	r1, [pc, #140]	@ (80123a8 <dwt_initialise+0x2a4>)
 801231c:	400a      	ands	r2, r1
 801231e:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8012320:	183b      	adds	r3, r7, r0
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	001a      	movs	r2, r3
 8012326:	2105      	movs	r1, #5
 8012328:	2036      	movs	r0, #54	@ 0x36
 801232a:	f000 fbd8 	bl	8012ade <dwt_write16bitoffsetreg>
 801232e:	e00d      	b.n	801234c <dwt_initialise+0x248>
=======
 801143e:	250e      	movs	r5, #14
 8011440:	197c      	adds	r4, r7, r5
 8011442:	2105      	movs	r1, #5
 8011444:	2036      	movs	r0, #54	@ 0x36
 8011446:	f000 fb9e 	bl	8011b86 <dwt_read16bitoffsetreg>
 801144a:	0003      	movs	r3, r0
 801144c:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 801144e:	0028      	movs	r0, r5
 8011450:	183b      	adds	r3, r7, r0
 8011452:	183a      	adds	r2, r7, r0
 8011454:	8812      	ldrh	r2, [r2, #0]
 8011456:	4923      	ldr	r1, [pc, #140]	@ (80114e4 <dwt_initialise+0x2a4>)
 8011458:	400a      	ands	r2, r1
 801145a:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 801145c:	183b      	adds	r3, r7, r0
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	001a      	movs	r2, r3
 8011462:	2105      	movs	r1, #5
 8011464:	2036      	movs	r0, #54	@ 0x36
 8011466:	f000 fbd8 	bl	8011c1a <dwt_write16bitoffsetreg>
 801146a:	e00d      	b.n	8011488 <dwt_initialise+0x248>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
<<<<<<< HEAD
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2204      	movs	r2, #4
 8012334:	4013      	ands	r3, r2
 8012336:	d109      	bne.n	801234c <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8012338:	4b18      	ldr	r3, [pc, #96]	@ (801239c <dwt_initialise+0x298>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	8ada      	ldrh	r2, [r3, #22]
 801233e:	4b17      	ldr	r3, [pc, #92]	@ (801239c <dwt_initialise+0x298>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2180      	movs	r1, #128	@ 0x80
 8012344:	0109      	lsls	r1, r1, #4
 8012346:	430a      	orrs	r2, r1
 8012348:	b292      	uxth	r2, r2
 801234a:	82da      	strh	r2, [r3, #22]
=======
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2204      	movs	r2, #4
 8011470:	4013      	ands	r3, r2
 8011472:	d109      	bne.n	8011488 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8011474:	4b18      	ldr	r3, [pc, #96]	@ (80114d8 <dwt_initialise+0x298>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	8ada      	ldrh	r2, [r3, #22]
 801147a:	4b17      	ldr	r3, [pc, #92]	@ (80114d8 <dwt_initialise+0x298>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2180      	movs	r1, #128	@ 0x80
 8011480:	0109      	lsls	r1, r1, #4
 8011482:	430a      	orrs	r2, r1
 8011484:	b292      	uxth	r2, r2
 8011486:	82da      	strh	r2, [r3, #22]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
<<<<<<< HEAD
 801234c:	2001      	movs	r0, #1
 801234e:	f000 fccb 	bl	8012ce8 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8012352:	2200      	movs	r2, #0
 8012354:	210a      	movs	r1, #10
 8012356:	202c      	movs	r0, #44	@ 0x2c
 8012358:	f000 fbae 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 801235c:	4b0f      	ldr	r3, [pc, #60]	@ (801239c <dwt_initialise+0x298>)
 801235e:	681c      	ldr	r4, [r3, #0]
 8012360:	2100      	movs	r1, #0
 8012362:	2004      	movs	r0, #4
 8012364:	f000 fb4a 	bl	80129fc <dwt_read32bitoffsetreg>
 8012368:	0003      	movs	r3, r0
 801236a:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 801236c:	4b0b      	ldr	r3, [pc, #44]	@ (801239c <dwt_initialise+0x298>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	691b      	ldr	r3, [r3, #16]
 8012372:	0c1b      	lsrs	r3, r3, #16
 8012374:	b2da      	uxtb	r2, r3
 8012376:	4b09      	ldr	r3, [pc, #36]	@ (801239c <dwt_initialise+0x298>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2103      	movs	r1, #3
 801237c:	400a      	ands	r2, r1
 801237e:	b2d2      	uxtb	r2, r2
 8012380:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8012382:	4b06      	ldr	r3, [pc, #24]	@ (801239c <dwt_initialise+0x298>)
 8012384:	681c      	ldr	r4, [r3, #0]
 8012386:	2100      	movs	r1, #0
 8012388:	2008      	movs	r0, #8
 801238a:	f000 fb37 	bl	80129fc <dwt_read32bitoffsetreg>
 801238e:	0003      	movs	r3, r0
 8012390:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8012392:	2300      	movs	r3, #0

} // end dwt_initialise()
 8012394:	0018      	movs	r0, r3
 8012396:	46bd      	mov	sp, r7
 8012398:	b006      	add	sp, #24
 801239a:	bdb0      	pop	{r4, r5, r7, pc}
 801239c:	200001fc 	.word	0x200001fc
 80123a0:	deca0130 	.word	0xdeca0130
 80123a4:	88888888 	.word	0x88888888
 80123a8:	fffffdff 	.word	0xfffffdff

080123ac <dwt_readdevid>:
=======
 8011488:	2001      	movs	r0, #1
 801148a:	f000 fccb 	bl	8011e24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 801148e:	2200      	movs	r2, #0
 8011490:	210a      	movs	r1, #10
 8011492:	202c      	movs	r0, #44	@ 0x2c
 8011494:	f000 fbae 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8011498:	4b0f      	ldr	r3, [pc, #60]	@ (80114d8 <dwt_initialise+0x298>)
 801149a:	681c      	ldr	r4, [r3, #0]
 801149c:	2100      	movs	r1, #0
 801149e:	2004      	movs	r0, #4
 80114a0:	f000 fb4a 	bl	8011b38 <dwt_read32bitoffsetreg>
 80114a4:	0003      	movs	r3, r0
 80114a6:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80114a8:	4b0b      	ldr	r3, [pc, #44]	@ (80114d8 <dwt_initialise+0x298>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	0c1b      	lsrs	r3, r3, #16
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	4b09      	ldr	r3, [pc, #36]	@ (80114d8 <dwt_initialise+0x298>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2103      	movs	r1, #3
 80114b8:	400a      	ands	r2, r1
 80114ba:	b2d2      	uxtb	r2, r2
 80114bc:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80114be:	4b06      	ldr	r3, [pc, #24]	@ (80114d8 <dwt_initialise+0x298>)
 80114c0:	681c      	ldr	r4, [r3, #0]
 80114c2:	2100      	movs	r1, #0
 80114c4:	2008      	movs	r0, #8
 80114c6:	f000 fb37 	bl	8011b38 <dwt_read32bitoffsetreg>
 80114ca:	0003      	movs	r3, r0
 80114cc:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80114ce:	2300      	movs	r3, #0

} // end dwt_initialise()
 80114d0:	0018      	movs	r0, r3
 80114d2:	46bd      	mov	sp, r7
 80114d4:	b006      	add	sp, #24
 80114d6:	bdb0      	pop	{r4, r5, r7, pc}
 80114d8:	20000204 	.word	0x20000204
 80114dc:	deca0130 	.word	0xdeca0130
 80114e0:	88888888 	.word	0x88888888
 80114e4:	fffffdff 	.word	0xfffffdff

080114e8 <dwt_readdevid>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
<<<<<<< HEAD
 80123ac:	b580      	push	{r7, lr}
 80123ae:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80123b0:	2100      	movs	r1, #0
 80123b2:	2000      	movs	r0, #0
 80123b4:	f000 fb22 	bl	80129fc <dwt_read32bitoffsetreg>
 80123b8:	0003      	movs	r3, r0
}
 80123ba:	0018      	movs	r0, r3
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <dwt_configuretxrf>:
=======
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80114ec:	2100      	movs	r1, #0
 80114ee:	2000      	movs	r0, #0
 80114f0:	f000 fb22 	bl	8011b38 <dwt_read32bitoffsetreg>
 80114f4:	0003      	movs	r3, r0
}
 80114f6:	0018      	movs	r0, r3
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <dwt_configuretxrf>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
<<<<<<< HEAD
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	001a      	movs	r2, r3
 80123ce:	210b      	movs	r1, #11
 80123d0:	202a      	movs	r0, #42	@ 0x2a
 80123d2:	f000 fb71 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	001a      	movs	r2, r3
 80123dc:	2100      	movs	r1, #0
 80123de:	201e      	movs	r0, #30
 80123e0:	f000 fb9d 	bl	8012b1e <dwt_write32bitoffsetreg>

}
 80123e4:	46c0      	nop			@ (mov r8, r8)
 80123e6:	46bd      	mov	sp, r7
 80123e8:	b002      	add	sp, #8
 80123ea:	bd80      	pop	{r7, pc}

080123ec <dwt_configure>:
=======
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	001a      	movs	r2, r3
 801150a:	210b      	movs	r1, #11
 801150c:	202a      	movs	r0, #42	@ 0x2a
 801150e:	f000 fb71 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	001a      	movs	r2, r3
 8011518:	2100      	movs	r1, #0
 801151a:	201e      	movs	r0, #30
 801151c:	f000 fb9d 	bl	8011c5a <dwt_write32bitoffsetreg>

}
 8011520:	46c0      	nop			@ (mov r8, r8)
 8011522:	46bd      	mov	sp, r7
 8011524:	b002      	add	sp, #8
 8011526:	bd80      	pop	{r7, pc}

08011528 <dwt_configure>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
<<<<<<< HEAD
 80123ec:	b5b0      	push	{r4, r5, r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80123f4:	2317      	movs	r3, #23
 80123f6:	18fb      	adds	r3, r7, r3
 80123f8:	2200      	movs	r2, #0
 80123fa:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 80123fc:	2316      	movs	r3, #22
 80123fe:	18fb      	adds	r3, r7, r3
 8012400:	2200      	movs	r2, #0
 8012402:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 8012404:	2013      	movs	r0, #19
 8012406:	183b      	adds	r3, r7, r0
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	7812      	ldrb	r2, [r2, #0]
 801240c:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	795b      	ldrb	r3, [r3, #5]
 8012412:	0019      	movs	r1, r3
 8012414:	2314      	movs	r3, #20
 8012416:	18fb      	adds	r3, r7, r3
 8012418:	4ab6      	ldr	r2, [pc, #728]	@ (80126f4 <dwt_configure+0x308>)
 801241a:	0049      	lsls	r1, r1, #1
 801241c:	5a8a      	ldrh	r2, [r1, r2]
 801241e:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	785a      	ldrb	r2, [r3, #1]
 8012424:	2312      	movs	r3, #18
 8012426:	18fb      	adds	r3, r7, r3
 8012428:	3a01      	subs	r2, #1
 801242a:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 801242c:	183b      	adds	r3, r7, r0
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b04      	cmp	r3, #4
 8012432:	d003      	beq.n	801243c <dwt_configure+0x50>
 8012434:	183b      	adds	r3, r7, r0
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b07      	cmp	r3, #7
 801243a:	d101      	bne.n	8012440 <dwt_configure+0x54>
 801243c:	2201      	movs	r2, #1
 801243e:	e000      	b.n	8012442 <dwt_configure+0x56>
 8012440:	2200      	movs	r2, #0
 8012442:	2311      	movs	r3, #17
 8012444:	18fb      	adds	r3, r7, r3
 8012446:	701a      	strb	r2, [r3, #0]
=======
 8011528:	b5b0      	push	{r4, r5, r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8011530:	2317      	movs	r3, #23
 8011532:	18fb      	adds	r3, r7, r3
 8011534:	2200      	movs	r2, #0
 8011536:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 8011538:	2316      	movs	r3, #22
 801153a:	18fb      	adds	r3, r7, r3
 801153c:	2200      	movs	r2, #0
 801153e:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 8011540:	2013      	movs	r0, #19
 8011542:	183b      	adds	r3, r7, r0
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	7812      	ldrb	r2, [r2, #0]
 8011548:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	795b      	ldrb	r3, [r3, #5]
 801154e:	0019      	movs	r1, r3
 8011550:	2314      	movs	r3, #20
 8011552:	18fb      	adds	r3, r7, r3
 8011554:	4ab6      	ldr	r2, [pc, #728]	@ (8011830 <dwt_configure+0x308>)
 8011556:	0049      	lsls	r1, r1, #1
 8011558:	5a8a      	ldrh	r2, [r1, r2]
 801155a:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	785a      	ldrb	r2, [r3, #1]
 8011560:	2312      	movs	r3, #18
 8011562:	18fb      	adds	r3, r7, r3
 8011564:	3a01      	subs	r2, #1
 8011566:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8011568:	183b      	adds	r3, r7, r0
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b04      	cmp	r3, #4
 801156e:	d003      	beq.n	8011578 <dwt_configure+0x50>
 8011570:	183b      	adds	r3, r7, r0
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b07      	cmp	r3, #7
 8011576:	d101      	bne.n	801157c <dwt_configure+0x54>
 8011578:	2201      	movs	r2, #1
 801157a:	e000      	b.n	801157e <dwt_configure+0x56>
 801157c:	2200      	movs	r2, #0
 801157e:	2311      	movs	r3, #17
 8011580:	18fb      	adds	r3, r7, r3
 8011582:	701a      	strb	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
<<<<<<< HEAD
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	79db      	ldrb	r3, [r3, #7]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10f      	bne.n	8012470 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8012450:	4ba9      	ldr	r3, [pc, #676]	@ (80126f8 <dwt_configure+0x30c>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	691a      	ldr	r2, [r3, #16]
 8012456:	4ba8      	ldr	r3, [pc, #672]	@ (80126f8 <dwt_configure+0x30c>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2180      	movs	r1, #128	@ 0x80
 801245c:	03c9      	lsls	r1, r1, #15
 801245e:	430a      	orrs	r2, r1
 8012460:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8012462:	2214      	movs	r2, #20
 8012464:	18bb      	adds	r3, r7, r2
 8012466:	18ba      	adds	r2, r7, r2
 8012468:	8812      	ldrh	r2, [r2, #0]
 801246a:	08d2      	lsrs	r2, r2, #3
 801246c:	801a      	strh	r2, [r3, #0]
 801246e:	e007      	b.n	8012480 <dwt_configure+0x94>
=======
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	79db      	ldrb	r3, [r3, #7]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10f      	bne.n	80115ac <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 801158c:	4ba9      	ldr	r3, [pc, #676]	@ (8011834 <dwt_configure+0x30c>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	691a      	ldr	r2, [r3, #16]
 8011592:	4ba8      	ldr	r3, [pc, #672]	@ (8011834 <dwt_configure+0x30c>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2180      	movs	r1, #128	@ 0x80
 8011598:	03c9      	lsls	r1, r1, #15
 801159a:	430a      	orrs	r2, r1
 801159c:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 801159e:	2214      	movs	r2, #20
 80115a0:	18bb      	adds	r3, r7, r2
 80115a2:	18ba      	adds	r2, r7, r2
 80115a4:	8812      	ldrh	r2, [r2, #0]
 80115a6:	08d2      	lsrs	r2, r2, #3
 80115a8:	801a      	strh	r2, [r3, #0]
 80115aa:	e007      	b.n	80115bc <dwt_configure+0x94>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
<<<<<<< HEAD
 8012470:	4ba1      	ldr	r3, [pc, #644]	@ (80126f8 <dwt_configure+0x30c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	691a      	ldr	r2, [r3, #16]
 8012476:	4ba0      	ldr	r3, [pc, #640]	@ (80126f8 <dwt_configure+0x30c>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	49a0      	ldr	r1, [pc, #640]	@ (80126fc <dwt_configure+0x310>)
 801247c:	400a      	ands	r2, r1
 801247e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8012480:	4b9d      	ldr	r3, [pc, #628]	@ (80126f8 <dwt_configure+0x30c>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	7a12      	ldrb	r2, [r2, #8]
 8012488:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 801248a:	4b9b      	ldr	r3, [pc, #620]	@ (80126f8 <dwt_configure+0x30c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	691a      	ldr	r2, [r3, #16]
 8012490:	4b99      	ldr	r3, [pc, #612]	@ (80126f8 <dwt_configure+0x30c>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	499a      	ldr	r1, [pc, #616]	@ (8012700 <dwt_configure+0x314>)
 8012496:	400a      	ands	r2, r1
 8012498:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 801249a:	4b97      	ldr	r3, [pc, #604]	@ (80126f8 <dwt_configure+0x30c>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	6919      	ldr	r1, [r3, #16]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	7a1b      	ldrb	r3, [r3, #8]
 80124a4:	041a      	lsls	r2, r3, #16
 80124a6:	23c0      	movs	r3, #192	@ 0xc0
 80124a8:	029b      	lsls	r3, r3, #10
 80124aa:	401a      	ands	r2, r3
 80124ac:	4b92      	ldr	r3, [pc, #584]	@ (80126f8 <dwt_configure+0x30c>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	430a      	orrs	r2, r1
 80124b2:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80124b4:	4b90      	ldr	r3, [pc, #576]	@ (80126f8 <dwt_configure+0x30c>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	691b      	ldr	r3, [r3, #16]
 80124ba:	001a      	movs	r2, r3
 80124bc:	2100      	movs	r1, #0
 80124be:	2004      	movs	r0, #4
 80124c0:	f000 fb2d 	bl	8012b1e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80124c4:	2314      	movs	r3, #20
 80124c6:	18fb      	adds	r3, r7, r3
 80124c8:	881b      	ldrh	r3, [r3, #0]
 80124ca:	498e      	ldr	r1, [pc, #568]	@ (8012704 <dwt_configure+0x318>)
 80124cc:	001a      	movs	r2, r3
 80124ce:	202e      	movs	r0, #46	@ 0x2e
 80124d0:	f000 fb05 	bl	8012ade <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80124d4:	2512      	movs	r5, #18
 80124d6:	197b      	adds	r3, r7, r5
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	0018      	movs	r0, r3
 80124dc:	f000 fb78 	bl	8012bd0 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80124e0:	2413      	movs	r4, #19
 80124e2:	193b      	adds	r3, r7, r4
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	4a88      	ldr	r2, [pc, #544]	@ (8012708 <dwt_configure+0x31c>)
 80124e8:	5cd3      	ldrb	r3, [r2, r3]
 80124ea:	001a      	movs	r2, r3
 80124ec:	4b87      	ldr	r3, [pc, #540]	@ (801270c <dwt_configure+0x320>)
 80124ee:	0092      	lsls	r2, r2, #2
 80124f0:	58d3      	ldr	r3, [r2, r3]
 80124f2:	001a      	movs	r2, r3
 80124f4:	2107      	movs	r1, #7
 80124f6:	202b      	movs	r0, #43	@ 0x2b
 80124f8:	f000 fb11 	bl	8012b1e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 80124fc:	193b      	adds	r3, r7, r4
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	4a81      	ldr	r2, [pc, #516]	@ (8012708 <dwt_configure+0x31c>)
 8012502:	5cd3      	ldrb	r3, [r2, r3]
 8012504:	001a      	movs	r2, r3
 8012506:	4b82      	ldr	r3, [pc, #520]	@ (8012710 <dwt_configure+0x324>)
 8012508:	5c9b      	ldrb	r3, [r3, r2]
 801250a:	001a      	movs	r2, r3
 801250c:	210b      	movs	r1, #11
 801250e:	202b      	movs	r0, #43	@ 0x2b
 8012510:	f000 fad2 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8012514:	2311      	movs	r3, #17
 8012516:	18fb      	adds	r3, r7, r3
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	4a7e      	ldr	r2, [pc, #504]	@ (8012714 <dwt_configure+0x328>)
 801251c:	5cd3      	ldrb	r3, [r2, r3]
 801251e:	001a      	movs	r2, r3
 8012520:	210b      	movs	r1, #11
 8012522:	2028      	movs	r0, #40	@ 0x28
 8012524:	f000 fac8 	bl	8012ab8 <dwt_write8bitoffsetreg>
=======
 80115ac:	4ba1      	ldr	r3, [pc, #644]	@ (8011834 <dwt_configure+0x30c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	691a      	ldr	r2, [r3, #16]
 80115b2:	4ba0      	ldr	r3, [pc, #640]	@ (8011834 <dwt_configure+0x30c>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	49a0      	ldr	r1, [pc, #640]	@ (8011838 <dwt_configure+0x310>)
 80115b8:	400a      	ands	r2, r1
 80115ba:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80115bc:	4b9d      	ldr	r3, [pc, #628]	@ (8011834 <dwt_configure+0x30c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	7a12      	ldrb	r2, [r2, #8]
 80115c4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80115c6:	4b9b      	ldr	r3, [pc, #620]	@ (8011834 <dwt_configure+0x30c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	691a      	ldr	r2, [r3, #16]
 80115cc:	4b99      	ldr	r3, [pc, #612]	@ (8011834 <dwt_configure+0x30c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	499a      	ldr	r1, [pc, #616]	@ (801183c <dwt_configure+0x314>)
 80115d2:	400a      	ands	r2, r1
 80115d4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80115d6:	4b97      	ldr	r3, [pc, #604]	@ (8011834 <dwt_configure+0x30c>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6919      	ldr	r1, [r3, #16]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	7a1b      	ldrb	r3, [r3, #8]
 80115e0:	041a      	lsls	r2, r3, #16
 80115e2:	23c0      	movs	r3, #192	@ 0xc0
 80115e4:	029b      	lsls	r3, r3, #10
 80115e6:	401a      	ands	r2, r3
 80115e8:	4b92      	ldr	r3, [pc, #584]	@ (8011834 <dwt_configure+0x30c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	430a      	orrs	r2, r1
 80115ee:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80115f0:	4b90      	ldr	r3, [pc, #576]	@ (8011834 <dwt_configure+0x30c>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	001a      	movs	r2, r3
 80115f8:	2100      	movs	r1, #0
 80115fa:	2004      	movs	r0, #4
 80115fc:	f000 fb2d 	bl	8011c5a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8011600:	2314      	movs	r3, #20
 8011602:	18fb      	adds	r3, r7, r3
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	498e      	ldr	r1, [pc, #568]	@ (8011840 <dwt_configure+0x318>)
 8011608:	001a      	movs	r2, r3
 801160a:	202e      	movs	r0, #46	@ 0x2e
 801160c:	f000 fb05 	bl	8011c1a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8011610:	2512      	movs	r5, #18
 8011612:	197b      	adds	r3, r7, r5
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	0018      	movs	r0, r3
 8011618:	f000 fb78 	bl	8011d0c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 801161c:	2413      	movs	r4, #19
 801161e:	193b      	adds	r3, r7, r4
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	4a88      	ldr	r2, [pc, #544]	@ (8011844 <dwt_configure+0x31c>)
 8011624:	5cd3      	ldrb	r3, [r2, r3]
 8011626:	001a      	movs	r2, r3
 8011628:	4b87      	ldr	r3, [pc, #540]	@ (8011848 <dwt_configure+0x320>)
 801162a:	0092      	lsls	r2, r2, #2
 801162c:	58d3      	ldr	r3, [r2, r3]
 801162e:	001a      	movs	r2, r3
 8011630:	2107      	movs	r1, #7
 8011632:	202b      	movs	r0, #43	@ 0x2b
 8011634:	f000 fb11 	bl	8011c5a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8011638:	193b      	adds	r3, r7, r4
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	4a81      	ldr	r2, [pc, #516]	@ (8011844 <dwt_configure+0x31c>)
 801163e:	5cd3      	ldrb	r3, [r2, r3]
 8011640:	001a      	movs	r2, r3
 8011642:	4b82      	ldr	r3, [pc, #520]	@ (801184c <dwt_configure+0x324>)
 8011644:	5c9b      	ldrb	r3, [r3, r2]
 8011646:	001a      	movs	r2, r3
 8011648:	210b      	movs	r1, #11
 801164a:	202b      	movs	r0, #43	@ 0x2b
 801164c:	f000 fad2 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8011650:	2311      	movs	r3, #17
 8011652:	18fb      	adds	r3, r7, r3
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	4a7e      	ldr	r2, [pc, #504]	@ (8011850 <dwt_configure+0x328>)
 8011658:	5cd3      	ldrb	r3, [r2, r3]
 801165a:	001a      	movs	r2, r3
 801165c:	210b      	movs	r1, #11
 801165e:	2028      	movs	r0, #40	@ 0x28
 8011660:	f000 fac8 	bl	8011bf4 <dwt_write8bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
<<<<<<< HEAD
 8012528:	193b      	adds	r3, r7, r4
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	4a76      	ldr	r2, [pc, #472]	@ (8012708 <dwt_configure+0x31c>)
 801252e:	5cd3      	ldrb	r3, [r2, r3]
 8012530:	001a      	movs	r2, r3
 8012532:	4b79      	ldr	r3, [pc, #484]	@ (8012718 <dwt_configure+0x32c>)
 8012534:	0092      	lsls	r2, r2, #2
 8012536:	58d3      	ldr	r3, [r2, r3]
 8012538:	001a      	movs	r2, r3
 801253a:	210c      	movs	r1, #12
 801253c:	2028      	movs	r0, #40	@ 0x28
 801253e:	f000 faee 	bl	8012b1e <dwt_write32bitoffsetreg>
=======
 8011664:	193b      	adds	r3, r7, r4
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	4a76      	ldr	r2, [pc, #472]	@ (8011844 <dwt_configure+0x31c>)
 801166a:	5cd3      	ldrb	r3, [r2, r3]
 801166c:	001a      	movs	r2, r3
 801166e:	4b79      	ldr	r3, [pc, #484]	@ (8011854 <dwt_configure+0x32c>)
 8011670:	0092      	lsls	r2, r2, #2
 8011672:	58d3      	ldr	r3, [r2, r3]
 8011674:	001a      	movs	r2, r3
 8011676:	210c      	movs	r1, #12
 8011678:	2028      	movs	r0, #40	@ 0x28
 801167a:	f000 faee 	bl	8011c5a <dwt_write32bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
<<<<<<< HEAD
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	79db      	ldrb	r3, [r3, #7]
 8012546:	001a      	movs	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	799b      	ldrb	r3, [r3, #6]
 801254c:	0019      	movs	r1, r3
 801254e:	4b73      	ldr	r3, [pc, #460]	@ (801271c <dwt_configure+0x330>)
 8012550:	0052      	lsls	r2, r2, #1
 8012552:	1852      	adds	r2, r2, r1
 8012554:	0052      	lsls	r2, r2, #1
 8012556:	5ad3      	ldrh	r3, [r2, r3]
 8012558:	001a      	movs	r2, r3
 801255a:	2102      	movs	r1, #2
 801255c:	2027      	movs	r0, #39	@ 0x27
 801255e:	f000 fabe 	bl	8012ade <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8012562:	197b      	adds	r3, r7, r5
 8012564:	781a      	ldrb	r2, [r3, #0]
 8012566:	4b6e      	ldr	r3, [pc, #440]	@ (8012720 <dwt_configure+0x334>)
 8012568:	0052      	lsls	r2, r2, #1
 801256a:	5ad3      	ldrh	r3, [r2, r3]
 801256c:	001a      	movs	r2, r3
 801256e:	2104      	movs	r1, #4
 8012570:	2027      	movs	r0, #39	@ 0x27
 8012572:	f000 fab4 	bl	8012ade <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	79db      	ldrb	r3, [r3, #7]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d105      	bne.n	801258a <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 801257e:	2264      	movs	r2, #100	@ 0x64
 8012580:	2106      	movs	r1, #6
 8012582:	2027      	movs	r0, #39	@ 0x27
 8012584:	f000 faab 	bl	8012ade <dwt_write16bitoffsetreg>
 8012588:	e018      	b.n	80125bc <dwt_configure+0x1d0>
=======
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	79db      	ldrb	r3, [r3, #7]
 8011682:	001a      	movs	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	799b      	ldrb	r3, [r3, #6]
 8011688:	0019      	movs	r1, r3
 801168a:	4b73      	ldr	r3, [pc, #460]	@ (8011858 <dwt_configure+0x330>)
 801168c:	0052      	lsls	r2, r2, #1
 801168e:	1852      	adds	r2, r2, r1
 8011690:	0052      	lsls	r2, r2, #1
 8011692:	5ad3      	ldrh	r3, [r2, r3]
 8011694:	001a      	movs	r2, r3
 8011696:	2102      	movs	r1, #2
 8011698:	2027      	movs	r0, #39	@ 0x27
 801169a:	f000 fabe 	bl	8011c1a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 801169e:	197b      	adds	r3, r7, r5
 80116a0:	781a      	ldrb	r2, [r3, #0]
 80116a2:	4b6e      	ldr	r3, [pc, #440]	@ (801185c <dwt_configure+0x334>)
 80116a4:	0052      	lsls	r2, r2, #1
 80116a6:	5ad3      	ldrh	r3, [r2, r3]
 80116a8:	001a      	movs	r2, r3
 80116aa:	2104      	movs	r1, #4
 80116ac:	2027      	movs	r0, #39	@ 0x27
 80116ae:	f000 fab4 	bl	8011c1a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	79db      	ldrb	r3, [r3, #7]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d105      	bne.n	80116c6 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80116ba:	2264      	movs	r2, #100	@ 0x64
 80116bc:	2106      	movs	r1, #6
 80116be:	2027      	movs	r0, #39	@ 0x27
 80116c0:	f000 faab 	bl	8011c1a <dwt_write16bitoffsetreg>
 80116c4:	e018      	b.n	80116f8 <dwt_configure+0x1d0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
<<<<<<< HEAD
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	789b      	ldrb	r3, [r3, #2]
 801258e:	2b04      	cmp	r3, #4
 8012590:	d10a      	bne.n	80125a8 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8012592:	2210      	movs	r2, #16
 8012594:	2106      	movs	r1, #6
 8012596:	2027      	movs	r0, #39	@ 0x27
 8012598:	f000 faa1 	bl	8012ade <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 801259c:	2210      	movs	r2, #16
 801259e:	2126      	movs	r1, #38	@ 0x26
 80125a0:	2027      	movs	r0, #39	@ 0x27
 80125a2:	f000 fa89 	bl	8012ab8 <dwt_write8bitoffsetreg>
 80125a6:	e009      	b.n	80125bc <dwt_configure+0x1d0>
=======
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	789b      	ldrb	r3, [r3, #2]
 80116ca:	2b04      	cmp	r3, #4
 80116cc:	d10a      	bne.n	80116e4 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80116ce:	2210      	movs	r2, #16
 80116d0:	2106      	movs	r1, #6
 80116d2:	2027      	movs	r0, #39	@ 0x27
 80116d4:	f000 faa1 	bl	8011c1a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80116d8:	2210      	movs	r2, #16
 80116da:	2126      	movs	r1, #38	@ 0x26
 80116dc:	2027      	movs	r0, #39	@ 0x27
 80116de:	f000 fa89 	bl	8011bf4 <dwt_write8bitoffsetreg>
 80116e2:	e009      	b.n	80116f8 <dwt_configure+0x1d0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
<<<<<<< HEAD
 80125a8:	2220      	movs	r2, #32
 80125aa:	2106      	movs	r1, #6
 80125ac:	2027      	movs	r0, #39	@ 0x27
 80125ae:	f000 fa96 	bl	8012ade <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80125b2:	2228      	movs	r2, #40	@ 0x28
 80125b4:	2126      	movs	r1, #38	@ 0x26
 80125b6:	2027      	movs	r0, #39	@ 0x27
 80125b8:	f000 fa7e 	bl	8012ab8 <dwt_write8bitoffsetreg>
=======
 80116e4:	2220      	movs	r2, #32
 80116e6:	2106      	movs	r1, #6
 80116e8:	2027      	movs	r0, #39	@ 0x27
 80116ea:	f000 fa96 	bl	8011c1a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80116ee:	2228      	movs	r2, #40	@ 0x28
 80116f0:	2126      	movs	r1, #38	@ 0x26
 80116f2:	2027      	movs	r0, #39	@ 0x27
 80116f4:	f000 fa7e 	bl	8011bf4 <dwt_write8bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
<<<<<<< HEAD
 80125bc:	2312      	movs	r3, #18
 80125be:	18fb      	adds	r3, r7, r3
 80125c0:	781a      	ldrb	r2, [r3, #0]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	78db      	ldrb	r3, [r3, #3]
 80125c6:	0019      	movs	r1, r3
 80125c8:	4b56      	ldr	r3, [pc, #344]	@ (8012724 <dwt_configure+0x338>)
 80125ca:	0092      	lsls	r2, r2, #2
 80125cc:	1852      	adds	r2, r2, r1
 80125ce:	0092      	lsls	r2, r2, #2
 80125d0:	58d3      	ldr	r3, [r2, r3]
 80125d2:	001a      	movs	r2, r3
 80125d4:	2108      	movs	r1, #8
 80125d6:	2027      	movs	r0, #39	@ 0x27
 80125d8:	f000 faa1 	bl	8012b1e <dwt_write32bitoffsetreg>
=======
 80116f8:	2312      	movs	r3, #18
 80116fa:	18fb      	adds	r3, r7, r3
 80116fc:	781a      	ldrb	r2, [r3, #0]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	78db      	ldrb	r3, [r3, #3]
 8011702:	0019      	movs	r1, r3
 8011704:	4b56      	ldr	r3, [pc, #344]	@ (8011860 <dwt_configure+0x338>)
 8011706:	0092      	lsls	r2, r2, #2
 8011708:	1852      	adds	r2, r2, r1
 801170a:	0092      	lsls	r2, r2, #2
 801170c:	58d3      	ldr	r3, [r2, r3]
 801170e:	001a      	movs	r2, r3
 8011710:	2108      	movs	r1, #8
 8011712:	2027      	movs	r0, #39	@ 0x27
 8011714:	f000 faa1 	bl	8011c5a <dwt_write32bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
<<<<<<< HEAD
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	895b      	ldrh	r3, [r3, #10]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d102      	bne.n	80125ea <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4a50      	ldr	r2, [pc, #320]	@ (8012728 <dwt_configure+0x33c>)
 80125e8:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	895b      	ldrh	r3, [r3, #10]
 80125ee:	001a      	movs	r2, r3
 80125f0:	2120      	movs	r1, #32
 80125f2:	2027      	movs	r0, #39	@ 0x27
 80125f4:	f000 fa73 	bl	8012ade <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80125f8:	4b4c      	ldr	r3, [pc, #304]	@ (801272c <dwt_configure+0x340>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	001a      	movs	r2, r3
 80125fe:	210c      	movs	r1, #12
 8012600:	2023      	movs	r0, #35	@ 0x23
 8012602:	f000 fa8c 	bl	8012b1e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8012606:	2312      	movs	r3, #18
 8012608:	18fb      	adds	r3, r7, r3
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	4a47      	ldr	r2, [pc, #284]	@ (801272c <dwt_configure+0x340>)
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	18d3      	adds	r3, r2, r3
 8012612:	3304      	adds	r3, #4
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	001a      	movs	r2, r3
 8012618:	2104      	movs	r1, #4
 801261a:	2023      	movs	r0, #35	@ 0x23
 801261c:	f000 fa5f 	bl	8012ade <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	799b      	ldrb	r3, [r3, #6]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d011      	beq.n	801264c <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	79db      	ldrb	r3, [r3, #7]
 801262c:	001a      	movs	r2, r3
 801262e:	4b40      	ldr	r3, [pc, #256]	@ (8012730 <dwt_configure+0x344>)
 8012630:	5c9b      	ldrb	r3, [r3, r2]
 8012632:	001a      	movs	r2, r3
 8012634:	2100      	movs	r1, #0
 8012636:	2021      	movs	r0, #33	@ 0x21
 8012638:	f000 fa3e 	bl	8012ab8 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 801263c:	2317      	movs	r3, #23
 801263e:	18fb      	adds	r3, r7, r3
 8012640:	2203      	movs	r2, #3
 8012642:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 8012644:	2316      	movs	r3, #22
 8012646:	18fb      	adds	r3, r7, r3
 8012648:	2201      	movs	r2, #1
 801264a:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 801264c:	2113      	movs	r1, #19
 801264e:	187b      	adds	r3, r7, r1
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	220f      	movs	r2, #15
 8012654:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8012656:	187b      	adds	r3, r7, r1
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	011b      	lsls	r3, r3, #4
 801265c:	21ff      	movs	r1, #255	@ 0xff
 801265e:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8012660:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	785b      	ldrb	r3, [r3, #1]
 8012666:	0499      	lsls	r1, r3, #18
 8012668:	23c0      	movs	r3, #192	@ 0xc0
 801266a:	031b      	lsls	r3, r3, #12
 801266c:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 801266e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8012670:	2317      	movs	r3, #23
 8012672:	18fb      	adds	r3, r7, r3
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	0519      	lsls	r1, r3, #20
 8012678:	23c0      	movs	r3, #192	@ 0xc0
 801267a:	039b      	lsls	r3, r3, #14
 801267c:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 801267e:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8012680:	2316      	movs	r3, #22
 8012682:	18fb      	adds	r3, r7, r3
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	0459      	lsls	r1, r3, #17
 8012688:	2380      	movs	r3, #128	@ 0x80
 801268a:	029b      	lsls	r3, r3, #10
 801268c:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 801268e:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	791b      	ldrb	r3, [r3, #4]
 8012694:	0599      	lsls	r1, r3, #22
 8012696:	23f8      	movs	r3, #248	@ 0xf8
 8012698:	04db      	lsls	r3, r3, #19
 801269a:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 801269c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	795b      	ldrb	r3, [r3, #5]
 80126a2:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80126a4:	4313      	orrs	r3, r2
 80126a6:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	001a      	movs	r2, r3
 80126ac:	2100      	movs	r1, #0
 80126ae:	201f      	movs	r0, #31
 80126b0:	f000 fa35 	bl	8012b1e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	789a      	ldrb	r2, [r3, #2]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	785b      	ldrb	r3, [r3, #1]
 80126bc:	4313      	orrs	r3, r2
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	0419      	lsls	r1, r3, #16
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	79db      	ldrb	r3, [r3, #7]
 80126c6:	035a      	lsls	r2, r3, #13
 80126c8:	4b0b      	ldr	r3, [pc, #44]	@ (80126f8 <dwt_configure+0x30c>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	430a      	orrs	r2, r1
 80126ce:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80126d0:	4b09      	ldr	r3, [pc, #36]	@ (80126f8 <dwt_configure+0x30c>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	68db      	ldr	r3, [r3, #12]
 80126d6:	001a      	movs	r2, r3
 80126d8:	2100      	movs	r1, #0
 80126da:	2008      	movs	r0, #8
 80126dc:	f000 fa1f 	bl	8012b1e <dwt_write32bitoffsetreg>
=======
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	895b      	ldrh	r3, [r3, #10]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4a50      	ldr	r2, [pc, #320]	@ (8011864 <dwt_configure+0x33c>)
 8011724:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	895b      	ldrh	r3, [r3, #10]
 801172a:	001a      	movs	r2, r3
 801172c:	2120      	movs	r1, #32
 801172e:	2027      	movs	r0, #39	@ 0x27
 8011730:	f000 fa73 	bl	8011c1a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8011734:	4b4c      	ldr	r3, [pc, #304]	@ (8011868 <dwt_configure+0x340>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	001a      	movs	r2, r3
 801173a:	210c      	movs	r1, #12
 801173c:	2023      	movs	r0, #35	@ 0x23
 801173e:	f000 fa8c 	bl	8011c5a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8011742:	2312      	movs	r3, #18
 8011744:	18fb      	adds	r3, r7, r3
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	4a47      	ldr	r2, [pc, #284]	@ (8011868 <dwt_configure+0x340>)
 801174a:	005b      	lsls	r3, r3, #1
 801174c:	18d3      	adds	r3, r2, r3
 801174e:	3304      	adds	r3, #4
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	001a      	movs	r2, r3
 8011754:	2104      	movs	r1, #4
 8011756:	2023      	movs	r0, #35	@ 0x23
 8011758:	f000 fa5f 	bl	8011c1a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	799b      	ldrb	r3, [r3, #6]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d011      	beq.n	8011788 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	79db      	ldrb	r3, [r3, #7]
 8011768:	001a      	movs	r2, r3
 801176a:	4b40      	ldr	r3, [pc, #256]	@ (801186c <dwt_configure+0x344>)
 801176c:	5c9b      	ldrb	r3, [r3, r2]
 801176e:	001a      	movs	r2, r3
 8011770:	2100      	movs	r1, #0
 8011772:	2021      	movs	r0, #33	@ 0x21
 8011774:	f000 fa3e 	bl	8011bf4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8011778:	2317      	movs	r3, #23
 801177a:	18fb      	adds	r3, r7, r3
 801177c:	2203      	movs	r2, #3
 801177e:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 8011780:	2316      	movs	r3, #22
 8011782:	18fb      	adds	r3, r7, r3
 8011784:	2201      	movs	r2, #1
 8011786:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8011788:	2113      	movs	r1, #19
 801178a:	187b      	adds	r3, r7, r1
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	220f      	movs	r2, #15
 8011790:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8011792:	187b      	adds	r3, r7, r1
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	011b      	lsls	r3, r3, #4
 8011798:	21ff      	movs	r1, #255	@ 0xff
 801179a:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 801179c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	785b      	ldrb	r3, [r3, #1]
 80117a2:	0499      	lsls	r1, r3, #18
 80117a4:	23c0      	movs	r3, #192	@ 0xc0
 80117a6:	031b      	lsls	r3, r3, #12
 80117a8:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80117aa:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80117ac:	2317      	movs	r3, #23
 80117ae:	18fb      	adds	r3, r7, r3
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	0519      	lsls	r1, r3, #20
 80117b4:	23c0      	movs	r3, #192	@ 0xc0
 80117b6:	039b      	lsls	r3, r3, #14
 80117b8:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80117ba:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80117bc:	2316      	movs	r3, #22
 80117be:	18fb      	adds	r3, r7, r3
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	0459      	lsls	r1, r3, #17
 80117c4:	2380      	movs	r3, #128	@ 0x80
 80117c6:	029b      	lsls	r3, r3, #10
 80117c8:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80117ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	791b      	ldrb	r3, [r3, #4]
 80117d0:	0599      	lsls	r1, r3, #22
 80117d2:	23f8      	movs	r3, #248	@ 0xf8
 80117d4:	04db      	lsls	r3, r3, #19
 80117d6:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80117d8:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	795b      	ldrb	r3, [r3, #5]
 80117de:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80117e0:	4313      	orrs	r3, r2
 80117e2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	001a      	movs	r2, r3
 80117e8:	2100      	movs	r1, #0
 80117ea:	201f      	movs	r0, #31
 80117ec:	f000 fa35 	bl	8011c5a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	789a      	ldrb	r2, [r3, #2]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	785b      	ldrb	r3, [r3, #1]
 80117f8:	4313      	orrs	r3, r2
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	0419      	lsls	r1, r3, #16
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	79db      	ldrb	r3, [r3, #7]
 8011802:	035a      	lsls	r2, r3, #13
 8011804:	4b0b      	ldr	r3, [pc, #44]	@ (8011834 <dwt_configure+0x30c>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	430a      	orrs	r2, r1
 801180a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 801180c:	4b09      	ldr	r3, [pc, #36]	@ (8011834 <dwt_configure+0x30c>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	001a      	movs	r2, r3
 8011814:	2100      	movs	r1, #0
 8011816:	2008      	movs	r0, #8
 8011818:	f000 fa1f 	bl	8011c5a <dwt_write32bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
<<<<<<< HEAD
 80126e0:	2242      	movs	r2, #66	@ 0x42
 80126e2:	2100      	movs	r1, #0
 80126e4:	200d      	movs	r0, #13
 80126e6:	f000 f9e7 	bl	8012ab8 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80126ea:	46c0      	nop			@ (mov r8, r8)
 80126ec:	46bd      	mov	sp, r7
 80126ee:	b006      	add	sp, #24
 80126f0:	bdb0      	pop	{r4, r5, r7, pc}
 80126f2:	46c0      	nop			@ (mov r8, r8)
 80126f4:	08019f34 	.word	0x08019f34
 80126f8:	200001fc 	.word	0x200001fc
 80126fc:	ffbfffff 	.word	0xffbfffff
 8012700:	fffcffff 	.word	0xfffcffff
 8012704:	00002804 	.word	0x00002804
 8012708:	08019eb4 	.word	0x08019eb4
 801270c:	08019ed4 	.word	0x08019ed4
 8012710:	08019eec 	.word	0x08019eec
 8012714:	08019ef4 	.word	0x08019ef4
 8012718:	08019ebc 	.word	0x08019ebc
 801271c:	08019f04 	.word	0x08019f04
 8012720:	08019f10 	.word	0x08019f10
 8012724:	08019f14 	.word	0x08019f14
 8012728:	00001041 	.word	0x00001041
 801272c:	08019ef8 	.word	0x08019ef8
 8012730:	08019f00 	.word	0x08019f00

08012734 <dwt_setrxantennadelay>:
=======
 801181c:	2242      	movs	r2, #66	@ 0x42
 801181e:	2100      	movs	r1, #0
 8011820:	200d      	movs	r0, #13
 8011822:	f000 f9e7 	bl	8011bf4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8011826:	46c0      	nop			@ (mov r8, r8)
 8011828:	46bd      	mov	sp, r7
 801182a:	b006      	add	sp, #24
 801182c:	bdb0      	pop	{r4, r5, r7, pc}
 801182e:	46c0      	nop			@ (mov r8, r8)
 8011830:	08018950 	.word	0x08018950
 8011834:	20000204 	.word	0x20000204
 8011838:	ffbfffff 	.word	0xffbfffff
 801183c:	fffcffff 	.word	0xfffcffff
 8011840:	00002804 	.word	0x00002804
 8011844:	080188d0 	.word	0x080188d0
 8011848:	080188f0 	.word	0x080188f0
 801184c:	08018908 	.word	0x08018908
 8011850:	08018910 	.word	0x08018910
 8011854:	080188d8 	.word	0x080188d8
 8011858:	08018920 	.word	0x08018920
 801185c:	0801892c 	.word	0x0801892c
 8011860:	08018930 	.word	0x08018930
 8011864:	00001041 	.word	0x00001041
 8011868:	08018914 	.word	0x08018914
 801186c:	0801891c 	.word	0x0801891c

08011870 <dwt_setrxantennadelay>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
<<<<<<< HEAD
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	0002      	movs	r2, r0
 801273c:	1dbb      	adds	r3, r7, #6
 801273e:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8012740:	1dbb      	adds	r3, r7, #6
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	4904      	ldr	r1, [pc, #16]	@ (8012758 <dwt_setrxantennadelay+0x24>)
 8012746:	001a      	movs	r2, r3
 8012748:	202e      	movs	r0, #46	@ 0x2e
 801274a:	f000 f9c8 	bl	8012ade <dwt_write16bitoffsetreg>
}
 801274e:	46c0      	nop			@ (mov r8, r8)
 8012750:	46bd      	mov	sp, r7
 8012752:	b002      	add	sp, #8
 8012754:	bd80      	pop	{r7, pc}
 8012756:	46c0      	nop			@ (mov r8, r8)
 8012758:	00001804 	.word	0x00001804

0801275c <dwt_settxantennadelay>:
=======
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	0002      	movs	r2, r0
 8011878:	1dbb      	adds	r3, r7, #6
 801187a:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 801187c:	1dbb      	adds	r3, r7, #6
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	4904      	ldr	r1, [pc, #16]	@ (8011894 <dwt_setrxantennadelay+0x24>)
 8011882:	001a      	movs	r2, r3
 8011884:	202e      	movs	r0, #46	@ 0x2e
 8011886:	f000 f9c8 	bl	8011c1a <dwt_write16bitoffsetreg>
}
 801188a:	46c0      	nop			@ (mov r8, r8)
 801188c:	46bd      	mov	sp, r7
 801188e:	b002      	add	sp, #8
 8011890:	bd80      	pop	{r7, pc}
 8011892:	46c0      	nop			@ (mov r8, r8)
 8011894:	00001804 	.word	0x00001804

08011898 <dwt_settxantennadelay>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
<<<<<<< HEAD
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	0002      	movs	r2, r0
 8012764:	1dbb      	adds	r3, r7, #6
 8012766:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8012768:	1dbb      	adds	r3, r7, #6
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	001a      	movs	r2, r3
 801276e:	2100      	movs	r1, #0
 8012770:	2018      	movs	r0, #24
 8012772:	f000 f9b4 	bl	8012ade <dwt_write16bitoffsetreg>
}
 8012776:	46c0      	nop			@ (mov r8, r8)
 8012778:	46bd      	mov	sp, r7
 801277a:	b002      	add	sp, #8
 801277c:	bd80      	pop	{r7, pc}

0801277e <dwt_writetxdata>:
=======
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	0002      	movs	r2, r0
 80118a0:	1dbb      	adds	r3, r7, #6
 80118a2:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80118a4:	1dbb      	adds	r3, r7, #6
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	001a      	movs	r2, r3
 80118aa:	2100      	movs	r1, #0
 80118ac:	2018      	movs	r0, #24
 80118ae:	f000 f9b4 	bl	8011c1a <dwt_write16bitoffsetreg>
}
 80118b2:	46c0      	nop			@ (mov r8, r8)
 80118b4:	46bd      	mov	sp, r7
 80118b6:	b002      	add	sp, #8
 80118b8:	bd80      	pop	{r7, pc}

080118ba <dwt_writetxdata>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
<<<<<<< HEAD
 801277e:	b580      	push	{r7, lr}
 8012780:	b082      	sub	sp, #8
 8012782:	af00      	add	r7, sp, #0
 8012784:	6039      	str	r1, [r7, #0]
 8012786:	0011      	movs	r1, r2
 8012788:	1dbb      	adds	r3, r7, #6
 801278a:	1c02      	adds	r2, r0, #0
 801278c:	801a      	strh	r2, [r3, #0]
 801278e:	1d3b      	adds	r3, r7, #4
 8012790:	1c0a      	adds	r2, r1, #0
 8012792:	801a      	strh	r2, [r3, #0]
=======
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b082      	sub	sp, #8
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	0011      	movs	r1, r2
 80118c4:	1dbb      	adds	r3, r7, #6
 80118c6:	1c02      	adds	r2, r0, #0
 80118c8:	801a      	strh	r2, [r3, #0]
 80118ca:	1d3b      	adds	r3, r7, #4
 80118cc:	1c0a      	adds	r2, r1, #0
 80118ce:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
<<<<<<< HEAD
 8012794:	1d3b      	adds	r3, r7, #4
 8012796:	881a      	ldrh	r2, [r3, #0]
 8012798:	1dbb      	adds	r3, r7, #6
 801279a:	881b      	ldrh	r3, [r3, #0]
 801279c:	18d2      	adds	r2, r2, r3
 801279e:	2380      	movs	r3, #128	@ 0x80
 80127a0:	00db      	lsls	r3, r3, #3
 80127a2:	429a      	cmp	r2, r3
 80127a4:	dc0d      	bgt.n	80127c2 <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80127a6:	1dbb      	adds	r3, r7, #6
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	3b02      	subs	r3, #2
 80127ac:	0018      	movs	r0, r3
 80127ae:	683a      	ldr	r2, [r7, #0]
 80127b0:	1d3b      	adds	r3, r7, #4
 80127b2:	8819      	ldrh	r1, [r3, #0]
 80127b4:	0013      	movs	r3, r2
 80127b6:	0002      	movs	r2, r0
 80127b8:	2009      	movs	r0, #9
 80127ba:	f000 f862 	bl	8012882 <dwt_writetodevice>
        return DWT_SUCCESS;
 80127be:	2300      	movs	r3, #0
 80127c0:	e001      	b.n	80127c6 <dwt_writetxdata+0x48>
=======
 80118d0:	1d3b      	adds	r3, r7, #4
 80118d2:	881a      	ldrh	r2, [r3, #0]
 80118d4:	1dbb      	adds	r3, r7, #6
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	18d2      	adds	r2, r2, r3
 80118da:	2380      	movs	r3, #128	@ 0x80
 80118dc:	00db      	lsls	r3, r3, #3
 80118de:	429a      	cmp	r2, r3
 80118e0:	dc0d      	bgt.n	80118fe <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80118e2:	1dbb      	adds	r3, r7, #6
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	3b02      	subs	r3, #2
 80118e8:	0018      	movs	r0, r3
 80118ea:	683a      	ldr	r2, [r7, #0]
 80118ec:	1d3b      	adds	r3, r7, #4
 80118ee:	8819      	ldrh	r1, [r3, #0]
 80118f0:	0013      	movs	r3, r2
 80118f2:	0002      	movs	r2, r0
 80118f4:	2009      	movs	r0, #9
 80118f6:	f000 f862 	bl	80119be <dwt_writetodevice>
        return DWT_SUCCESS;
 80118fa:	2300      	movs	r3, #0
 80118fc:	e001      	b.n	8011902 <dwt_writetxdata+0x48>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        return DWT_ERROR;
<<<<<<< HEAD
 80127c2:	2301      	movs	r3, #1
 80127c4:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 80127c6:	0018      	movs	r0, r3
 80127c8:	46bd      	mov	sp, r7
 80127ca:	b002      	add	sp, #8
 80127cc:	bd80      	pop	{r7, pc}
	...

080127d0 <dwt_writetxfctrl>:
=======
 80118fe:	2301      	movs	r3, #1
 8011900:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 8011902:	0018      	movs	r0, r3
 8011904:	46bd      	mov	sp, r7
 8011906:	b002      	add	sp, #8
 8011908:	bd80      	pop	{r7, pc}
	...

0801190c <dwt_writetxfctrl>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
<<<<<<< HEAD
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	603a      	str	r2, [r7, #0]
 80127d8:	1dbb      	adds	r3, r7, #6
 80127da:	1c02      	adds	r2, r0, #0
 80127dc:	801a      	strh	r2, [r3, #0]
 80127de:	1d3b      	adds	r3, r7, #4
 80127e0:	1c0a      	adds	r2, r1, #0
 80127e2:	801a      	strh	r2, [r3, #0]
=======
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	603a      	str	r2, [r7, #0]
 8011914:	1dbb      	adds	r3, r7, #6
 8011916:	1c02      	adds	r2, r0, #0
 8011918:	801a      	strh	r2, [r3, #0]
 801191a:	1d3b      	adds	r3, r7, #4
 801191c:	1c0a      	adds	r2, r1, #0
 801191e:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
<<<<<<< HEAD
 80127e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012814 <dwt_writetxfctrl+0x44>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	68da      	ldr	r2, [r3, #12]
 80127ea:	1dbb      	adds	r3, r7, #6
 80127ec:	881b      	ldrh	r3, [r3, #0]
 80127ee:	431a      	orrs	r2, r3
 80127f0:	1d3b      	adds	r3, r7, #4
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	059b      	lsls	r3, r3, #22
 80127f6:	431a      	orrs	r2, r3
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	03db      	lsls	r3, r3, #15
 80127fc:	4313      	orrs	r3, r2
 80127fe:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	001a      	movs	r2, r3
 8012804:	2100      	movs	r1, #0
 8012806:	2008      	movs	r0, #8
 8012808:	f000 f989 	bl	8012b1e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 801280c:	46c0      	nop			@ (mov r8, r8)
 801280e:	46bd      	mov	sp, r7
 8012810:	b004      	add	sp, #16
 8012812:	bd80      	pop	{r7, pc}
 8012814:	200001fc 	.word	0x200001fc

08012818 <dwt_readrxdata>:
=======
 8011920:	4b0b      	ldr	r3, [pc, #44]	@ (8011950 <dwt_writetxfctrl+0x44>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	68da      	ldr	r2, [r3, #12]
 8011926:	1dbb      	adds	r3, r7, #6
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	431a      	orrs	r2, r3
 801192c:	1d3b      	adds	r3, r7, #4
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	059b      	lsls	r3, r3, #22
 8011932:	431a      	orrs	r2, r3
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	03db      	lsls	r3, r3, #15
 8011938:	4313      	orrs	r3, r2
 801193a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	001a      	movs	r2, r3
 8011940:	2100      	movs	r1, #0
 8011942:	2008      	movs	r0, #8
 8011944:	f000 f989 	bl	8011c5a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8011948:	46c0      	nop			@ (mov r8, r8)
 801194a:	46bd      	mov	sp, r7
 801194c:	b004      	add	sp, #16
 801194e:	bd80      	pop	{r7, pc}
 8011950:	20000204 	.word	0x20000204

08011954 <dwt_readrxdata>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
<<<<<<< HEAD
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	0008      	movs	r0, r1
 8012822:	0011      	movs	r1, r2
 8012824:	1cbb      	adds	r3, r7, #2
 8012826:	1c02      	adds	r2, r0, #0
 8012828:	801a      	strh	r2, [r3, #0]
 801282a:	003b      	movs	r3, r7
 801282c:	1c0a      	adds	r2, r1, #0
 801282e:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8012830:	1cbb      	adds	r3, r7, #2
 8012832:	881a      	ldrh	r2, [r3, #0]
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	003b      	movs	r3, r7
 8012838:	8819      	ldrh	r1, [r3, #0]
 801283a:	0003      	movs	r3, r0
 801283c:	2011      	movs	r0, #17
 801283e:	f000 f881 	bl	8012944 <dwt_readfromdevice>
}
 8012842:	46c0      	nop			@ (mov r8, r8)
 8012844:	46bd      	mov	sp, r7
 8012846:	b002      	add	sp, #8
 8012848:	bd80      	pop	{r7, pc}

0801284a <dwt_readtxtimestamp>:
=======
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	0008      	movs	r0, r1
 801195e:	0011      	movs	r1, r2
 8011960:	1cbb      	adds	r3, r7, #2
 8011962:	1c02      	adds	r2, r0, #0
 8011964:	801a      	strh	r2, [r3, #0]
 8011966:	003b      	movs	r3, r7
 8011968:	1c0a      	adds	r2, r1, #0
 801196a:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 801196c:	1cbb      	adds	r3, r7, #2
 801196e:	881a      	ldrh	r2, [r3, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	003b      	movs	r3, r7
 8011974:	8819      	ldrh	r1, [r3, #0]
 8011976:	0003      	movs	r3, r0
 8011978:	2011      	movs	r0, #17
 801197a:	f000 f881 	bl	8011a80 <dwt_readfromdevice>
}
 801197e:	46c0      	nop			@ (mov r8, r8)
 8011980:	46bd      	mov	sp, r7
 8011982:	b002      	add	sp, #8
 8011984:	bd80      	pop	{r7, pc}

08011986 <dwt_readtxtimestamp>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
<<<<<<< HEAD
 801284a:	b580      	push	{r7, lr}
 801284c:	b082      	sub	sp, #8
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2205      	movs	r2, #5
 8012856:	2100      	movs	r1, #0
 8012858:	2017      	movs	r0, #23
 801285a:	f000 f873 	bl	8012944 <dwt_readfromdevice>
}
 801285e:	46c0      	nop			@ (mov r8, r8)
 8012860:	46bd      	mov	sp, r7
 8012862:	b002      	add	sp, #8
 8012864:	bd80      	pop	{r7, pc}

08012866 <dwt_readrxtimestamp>:
=======
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2205      	movs	r2, #5
 8011992:	2100      	movs	r1, #0
 8011994:	2017      	movs	r0, #23
 8011996:	f000 f873 	bl	8011a80 <dwt_readfromdevice>
}
 801199a:	46c0      	nop			@ (mov r8, r8)
 801199c:	46bd      	mov	sp, r7
 801199e:	b002      	add	sp, #8
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <dwt_readrxtimestamp>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
<<<<<<< HEAD
 8012866:	b580      	push	{r7, lr}
 8012868:	b082      	sub	sp, #8
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2205      	movs	r2, #5
 8012872:	2100      	movs	r1, #0
 8012874:	2015      	movs	r0, #21
 8012876:	f000 f865 	bl	8012944 <dwt_readfromdevice>
}
 801287a:	46c0      	nop			@ (mov r8, r8)
 801287c:	46bd      	mov	sp, r7
 801287e:	b002      	add	sp, #8
 8012880:	bd80      	pop	{r7, pc}

08012882 <dwt_writetodevice>:
=======
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b082      	sub	sp, #8
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2205      	movs	r2, #5
 80119ae:	2100      	movs	r1, #0
 80119b0:	2015      	movs	r0, #21
 80119b2:	f000 f865 	bl	8011a80 <dwt_readfromdevice>
}
 80119b6:	46c0      	nop			@ (mov r8, r8)
 80119b8:	46bd      	mov	sp, r7
 80119ba:	b002      	add	sp, #8
 80119bc:	bd80      	pop	{r7, pc}

080119be <dwt_writetodevice>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
<<<<<<< HEAD
 8012882:	b590      	push	{r4, r7, lr}
 8012884:	b087      	sub	sp, #28
 8012886:	af00      	add	r7, sp, #0
 8012888:	60ba      	str	r2, [r7, #8]
 801288a:	607b      	str	r3, [r7, #4]
 801288c:	240e      	movs	r4, #14
 801288e:	193b      	adds	r3, r7, r4
 8012890:	1c02      	adds	r2, r0, #0
 8012892:	801a      	strh	r2, [r3, #0]
 8012894:	200c      	movs	r0, #12
 8012896:	183b      	adds	r3, r7, r0
 8012898:	1c0a      	adds	r2, r1, #0
 801289a:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 801289c:	2300      	movs	r3, #0
 801289e:	617b      	str	r3, [r7, #20]
=======
 80119be:	b590      	push	{r4, r7, lr}
 80119c0:	b087      	sub	sp, #28
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	60ba      	str	r2, [r7, #8]
 80119c6:	607b      	str	r3, [r7, #4]
 80119c8:	240e      	movs	r4, #14
 80119ca:	193b      	adds	r3, r7, r4
 80119cc:	1c02      	adds	r2, r0, #0
 80119ce:	801a      	strh	r2, [r3, #0]
 80119d0:	200c      	movs	r0, #12
 80119d2:	183b      	adds	r3, r7, r0
 80119d4:	1c0a      	adds	r2, r1, #0
 80119d6:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80119d8:	2300      	movs	r3, #0
 80119da:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
<<<<<<< HEAD
 80128a0:	183b      	adds	r3, r7, r0
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d10d      	bne.n	80128c4 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80128a8:	193b      	adds	r3, r7, r4
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	b2da      	uxtb	r2, r3
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	1c59      	adds	r1, r3, #1
 80128b2:	6179      	str	r1, [r7, #20]
 80128b4:	2180      	movs	r1, #128	@ 0x80
 80128b6:	4249      	negs	r1, r1
 80128b8:	430a      	orrs	r2, r1
 80128ba:	b2d1      	uxtb	r1, r2
 80128bc:	2210      	movs	r2, #16
 80128be:	18ba      	adds	r2, r7, r2
 80128c0:	54d1      	strb	r1, [r2, r3]
 80128c2:	e033      	b.n	801292c <dwt_writetodevice+0xaa>
=======
 80119dc:	183b      	adds	r3, r7, r0
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10d      	bne.n	8011a00 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80119e4:	193b      	adds	r3, r7, r4
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	1c59      	adds	r1, r3, #1
 80119ee:	6179      	str	r1, [r7, #20]
 80119f0:	2180      	movs	r1, #128	@ 0x80
 80119f2:	4249      	negs	r1, r1
 80119f4:	430a      	orrs	r2, r1
 80119f6:	b2d1      	uxtb	r1, r2
 80119f8:	2210      	movs	r2, #16
 80119fa:	18ba      	adds	r2, r7, r2
 80119fc:	54d1      	strb	r1, [r2, r3]
 80119fe:	e033      	b.n	8011a68 <dwt_writetodevice+0xaa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
<<<<<<< HEAD
 80128c4:	230e      	movs	r3, #14
 80128c6:	18fb      	adds	r3, r7, r3
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	1c59      	adds	r1, r3, #1
 80128d0:	6179      	str	r1, [r7, #20]
 80128d2:	2140      	movs	r1, #64	@ 0x40
 80128d4:	4249      	negs	r1, r1
 80128d6:	430a      	orrs	r2, r1
 80128d8:	b2d1      	uxtb	r1, r2
 80128da:	2010      	movs	r0, #16
 80128dc:	183a      	adds	r2, r7, r0
 80128de:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80128e0:	210c      	movs	r1, #12
 80128e2:	187b      	adds	r3, r7, r1
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80128e8:	d808      	bhi.n	80128fc <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	1c5a      	adds	r2, r3, #1
 80128ee:	617a      	str	r2, [r7, #20]
 80128f0:	187a      	adds	r2, r7, r1
 80128f2:	8812      	ldrh	r2, [r2, #0]
 80128f4:	b2d1      	uxtb	r1, r2
 80128f6:	183a      	adds	r2, r7, r0
 80128f8:	54d1      	strb	r1, [r2, r3]
 80128fa:	e017      	b.n	801292c <dwt_writetodevice+0xaa>
=======
 8011a00:	230e      	movs	r3, #14
 8011a02:	18fb      	adds	r3, r7, r3
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	1c59      	adds	r1, r3, #1
 8011a0c:	6179      	str	r1, [r7, #20]
 8011a0e:	2140      	movs	r1, #64	@ 0x40
 8011a10:	4249      	negs	r1, r1
 8011a12:	430a      	orrs	r2, r1
 8011a14:	b2d1      	uxtb	r1, r2
 8011a16:	2010      	movs	r0, #16
 8011a18:	183a      	adds	r2, r7, r0
 8011a1a:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8011a1c:	210c      	movs	r1, #12
 8011a1e:	187b      	adds	r3, r7, r1
 8011a20:	881b      	ldrh	r3, [r3, #0]
 8011a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a24:	d808      	bhi.n	8011a38 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	617a      	str	r2, [r7, #20]
 8011a2c:	187a      	adds	r2, r7, r1
 8011a2e:	8812      	ldrh	r2, [r2, #0]
 8011a30:	b2d1      	uxtb	r1, r2
 8011a32:	183a      	adds	r2, r7, r0
 8011a34:	54d1      	strb	r1, [r2, r3]
 8011a36:	e017      	b.n	8011a68 <dwt_writetodevice+0xaa>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
<<<<<<< HEAD
 80128fc:	200c      	movs	r0, #12
 80128fe:	183b      	adds	r3, r7, r0
 8012900:	881b      	ldrh	r3, [r3, #0]
 8012902:	b2da      	uxtb	r2, r3
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	1c59      	adds	r1, r3, #1
 8012908:	6179      	str	r1, [r7, #20]
 801290a:	2180      	movs	r1, #128	@ 0x80
 801290c:	4249      	negs	r1, r1
 801290e:	430a      	orrs	r2, r1
 8012910:	b2d1      	uxtb	r1, r2
 8012912:	2410      	movs	r4, #16
 8012914:	193a      	adds	r2, r7, r4
 8012916:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8012918:	183b      	adds	r3, r7, r0
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	09db      	lsrs	r3, r3, #7
 801291e:	b299      	uxth	r1, r3
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	617a      	str	r2, [r7, #20]
 8012926:	b2c9      	uxtb	r1, r1
 8012928:	193a      	adds	r2, r7, r4
 801292a:	54d1      	strb	r1, [r2, r3]
=======
 8011a38:	200c      	movs	r0, #12
 8011a3a:	183b      	adds	r3, r7, r0
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	1c59      	adds	r1, r3, #1
 8011a44:	6179      	str	r1, [r7, #20]
 8011a46:	2180      	movs	r1, #128	@ 0x80
 8011a48:	4249      	negs	r1, r1
 8011a4a:	430a      	orrs	r2, r1
 8011a4c:	b2d1      	uxtb	r1, r2
 8011a4e:	2410      	movs	r4, #16
 8011a50:	193a      	adds	r2, r7, r4
 8011a52:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8011a54:	183b      	adds	r3, r7, r0
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	09db      	lsrs	r3, r3, #7
 8011a5a:	b299      	uxth	r1, r3
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	1c5a      	adds	r2, r3, #1
 8011a60:	617a      	str	r2, [r7, #20]
 8011a62:	b2c9      	uxtb	r1, r1
 8011a64:	193a      	adds	r2, r7, r4
 8011a66:	54d1      	strb	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
<<<<<<< HEAD
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	b298      	uxth	r0, r3
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	2110      	movs	r1, #16
 8012936:	1879      	adds	r1, r7, r1
 8012938:	f000 fc58 	bl	80131ec <writetospi>
} // end dwt_writetodevice()
 801293c:	46c0      	nop			@ (mov r8, r8)
 801293e:	46bd      	mov	sp, r7
 8012940:	b007      	add	sp, #28
 8012942:	bd90      	pop	{r4, r7, pc}

08012944 <dwt_readfromdevice>:
=======
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	b298      	uxth	r0, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	68ba      	ldr	r2, [r7, #8]
 8011a70:	2110      	movs	r1, #16
 8011a72:	1879      	adds	r1, r7, r1
 8011a74:	f000 fc58 	bl	8012328 <writetospi>
} // end dwt_writetodevice()
 8011a78:	46c0      	nop			@ (mov r8, r8)
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	b007      	add	sp, #28
 8011a7e:	bd90      	pop	{r4, r7, pc}

08011a80 <dwt_readfromdevice>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
<<<<<<< HEAD
 8012944:	b590      	push	{r4, r7, lr}
 8012946:	b087      	sub	sp, #28
 8012948:	af00      	add	r7, sp, #0
 801294a:	60ba      	str	r2, [r7, #8]
 801294c:	607b      	str	r3, [r7, #4]
 801294e:	240e      	movs	r4, #14
 8012950:	193b      	adds	r3, r7, r4
 8012952:	1c02      	adds	r2, r0, #0
 8012954:	801a      	strh	r2, [r3, #0]
 8012956:	200c      	movs	r0, #12
 8012958:	183b      	adds	r3, r7, r0
 801295a:	1c0a      	adds	r2, r1, #0
 801295c:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]
=======
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	b087      	sub	sp, #28
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60ba      	str	r2, [r7, #8]
 8011a88:	607b      	str	r3, [r7, #4]
 8011a8a:	240e      	movs	r4, #14
 8011a8c:	193b      	adds	r3, r7, r4
 8011a8e:	1c02      	adds	r2, r0, #0
 8011a90:	801a      	strh	r2, [r3, #0]
 8011a92:	200c      	movs	r0, #12
 8011a94:	183b      	adds	r3, r7, r0
 8011a96:	1c0a      	adds	r2, r1, #0
 8011a98:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
<<<<<<< HEAD
 8012962:	183b      	adds	r3, r7, r0
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d109      	bne.n	801297e <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	617a      	str	r2, [r7, #20]
 8012970:	193a      	adds	r2, r7, r4
 8012972:	8812      	ldrh	r2, [r2, #0]
 8012974:	b2d1      	uxtb	r1, r2
 8012976:	2210      	movs	r2, #16
 8012978:	18ba      	adds	r2, r7, r2
 801297a:	54d1      	strb	r1, [r2, r3]
 801297c:	e032      	b.n	80129e4 <dwt_readfromdevice+0xa0>
=======
 8011a9e:	183b      	adds	r3, r7, r0
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d109      	bne.n	8011aba <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	617a      	str	r2, [r7, #20]
 8011aac:	193a      	adds	r2, r7, r4
 8011aae:	8812      	ldrh	r2, [r2, #0]
 8011ab0:	b2d1      	uxtb	r1, r2
 8011ab2:	2210      	movs	r2, #16
 8011ab4:	18ba      	adds	r2, r7, r2
 8011ab6:	54d1      	strb	r1, [r2, r3]
 8011ab8:	e032      	b.n	8011b20 <dwt_readfromdevice+0xa0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
<<<<<<< HEAD
 801297e:	230e      	movs	r3, #14
 8012980:	18fb      	adds	r3, r7, r3
 8012982:	881b      	ldrh	r3, [r3, #0]
 8012984:	b2da      	uxtb	r2, r3
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	1c59      	adds	r1, r3, #1
 801298a:	6179      	str	r1, [r7, #20]
 801298c:	2140      	movs	r1, #64	@ 0x40
 801298e:	430a      	orrs	r2, r1
 8012990:	b2d1      	uxtb	r1, r2
 8012992:	2010      	movs	r0, #16
 8012994:	183a      	adds	r2, r7, r0
 8012996:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8012998:	210c      	movs	r1, #12
 801299a:	187b      	adds	r3, r7, r1
 801299c:	881b      	ldrh	r3, [r3, #0]
 801299e:	2b7f      	cmp	r3, #127	@ 0x7f
 80129a0:	d808      	bhi.n	80129b4 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	1c5a      	adds	r2, r3, #1
 80129a6:	617a      	str	r2, [r7, #20]
 80129a8:	187a      	adds	r2, r7, r1
 80129aa:	8812      	ldrh	r2, [r2, #0]
 80129ac:	b2d1      	uxtb	r1, r2
 80129ae:	183a      	adds	r2, r7, r0
 80129b0:	54d1      	strb	r1, [r2, r3]
 80129b2:	e017      	b.n	80129e4 <dwt_readfromdevice+0xa0>
=======
 8011aba:	230e      	movs	r3, #14
 8011abc:	18fb      	adds	r3, r7, r3
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	1c59      	adds	r1, r3, #1
 8011ac6:	6179      	str	r1, [r7, #20]
 8011ac8:	2140      	movs	r1, #64	@ 0x40
 8011aca:	430a      	orrs	r2, r1
 8011acc:	b2d1      	uxtb	r1, r2
 8011ace:	2010      	movs	r0, #16
 8011ad0:	183a      	adds	r2, r7, r0
 8011ad2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8011ad4:	210c      	movs	r1, #12
 8011ad6:	187b      	adds	r3, r7, r1
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8011adc:	d808      	bhi.n	8011af0 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	617a      	str	r2, [r7, #20]
 8011ae4:	187a      	adds	r2, r7, r1
 8011ae6:	8812      	ldrh	r2, [r2, #0]
 8011ae8:	b2d1      	uxtb	r1, r2
 8011aea:	183a      	adds	r2, r7, r0
 8011aec:	54d1      	strb	r1, [r2, r3]
 8011aee:	e017      	b.n	8011b20 <dwt_readfromdevice+0xa0>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
<<<<<<< HEAD
 80129b4:	200c      	movs	r0, #12
 80129b6:	183b      	adds	r3, r7, r0
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	b2da      	uxtb	r2, r3
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	1c59      	adds	r1, r3, #1
 80129c0:	6179      	str	r1, [r7, #20]
 80129c2:	2180      	movs	r1, #128	@ 0x80
 80129c4:	4249      	negs	r1, r1
 80129c6:	430a      	orrs	r2, r1
 80129c8:	b2d1      	uxtb	r1, r2
 80129ca:	2410      	movs	r4, #16
 80129cc:	193a      	adds	r2, r7, r4
 80129ce:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80129d0:	183b      	adds	r3, r7, r0
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	09db      	lsrs	r3, r3, #7
 80129d6:	b299      	uxth	r1, r3
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	1c5a      	adds	r2, r3, #1
 80129dc:	617a      	str	r2, [r7, #20]
 80129de:	b2c9      	uxtb	r1, r1
 80129e0:	193a      	adds	r2, r7, r4
 80129e2:	54d1      	strb	r1, [r2, r3]
=======
 8011af0:	200c      	movs	r0, #12
 8011af2:	183b      	adds	r3, r7, r0
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	1c59      	adds	r1, r3, #1
 8011afc:	6179      	str	r1, [r7, #20]
 8011afe:	2180      	movs	r1, #128	@ 0x80
 8011b00:	4249      	negs	r1, r1
 8011b02:	430a      	orrs	r2, r1
 8011b04:	b2d1      	uxtb	r1, r2
 8011b06:	2410      	movs	r4, #16
 8011b08:	193a      	adds	r2, r7, r4
 8011b0a:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8011b0c:	183b      	adds	r3, r7, r0
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	09db      	lsrs	r3, r3, #7
 8011b12:	b299      	uxth	r1, r3
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	617a      	str	r2, [r7, #20]
 8011b1a:	b2c9      	uxtb	r1, r1
 8011b1c:	193a      	adds	r2, r7, r4
 8011b1e:	54d1      	strb	r1, [r2, r3]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
<<<<<<< HEAD
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	b298      	uxth	r0, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	68ba      	ldr	r2, [r7, #8]
 80129ec:	2110      	movs	r1, #16
 80129ee:	1879      	adds	r1, r7, r1
 80129f0:	f000 fc34 	bl	801325c <readfromspi>
} // end dwt_readfromdevice()
 80129f4:	46c0      	nop			@ (mov r8, r8)
 80129f6:	46bd      	mov	sp, r7
 80129f8:	b007      	add	sp, #28
 80129fa:	bd90      	pop	{r4, r7, pc}

080129fc <dwt_read32bitoffsetreg>:
=======
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	b298      	uxth	r0, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	2110      	movs	r1, #16
 8011b2a:	1879      	adds	r1, r7, r1
 8011b2c:	f000 fc34 	bl	8012398 <readfromspi>
} // end dwt_readfromdevice()
 8011b30:	46c0      	nop			@ (mov r8, r8)
 8011b32:	46bd      	mov	sp, r7
 8011b34:	b007      	add	sp, #28
 8011b36:	bd90      	pop	{r4, r7, pc}

08011b38 <dwt_read32bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
<<<<<<< HEAD
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b086      	sub	sp, #24
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8012a06:	2300      	movs	r3, #0
 8012a08:	617b      	str	r3, [r7, #20]
=======
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8011b42:	2300      	movs	r3, #0
 8011b44:	617b      	str	r3, [r7, #20]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
<<<<<<< HEAD
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	b298      	uxth	r0, r3
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	b299      	uxth	r1, r3
 8012a12:	230c      	movs	r3, #12
 8012a14:	18fb      	adds	r3, r7, r3
 8012a16:	2204      	movs	r2, #4
 8012a18:	f7ff ff94 	bl	8012944 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8012a1c:	2303      	movs	r3, #3
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	e00b      	b.n	8012a3a <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	021b      	lsls	r3, r3, #8
 8012a26:	220c      	movs	r2, #12
 8012a28:	18b9      	adds	r1, r7, r2
 8012a2a:	693a      	ldr	r2, [r7, #16]
 8012a2c:	188a      	adds	r2, r1, r2
 8012a2e:	7812      	ldrb	r2, [r2, #0]
 8012a30:	189b      	adds	r3, r3, r2
 8012a32:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	3b01      	subs	r3, #1
 8012a38:	613b      	str	r3, [r7, #16]
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	daf0      	bge.n	8012a22 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8012a40:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8012a42:	0018      	movs	r0, r3
 8012a44:	46bd      	mov	sp, r7
 8012a46:	b006      	add	sp, #24
 8012a48:	bd80      	pop	{r7, pc}

08012a4a <dwt_read16bitoffsetreg>:
=======
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	b298      	uxth	r0, r3
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	b299      	uxth	r1, r3
 8011b4e:	230c      	movs	r3, #12
 8011b50:	18fb      	adds	r3, r7, r3
 8011b52:	2204      	movs	r2, #4
 8011b54:	f7ff ff94 	bl	8011a80 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8011b58:	2303      	movs	r3, #3
 8011b5a:	613b      	str	r3, [r7, #16]
 8011b5c:	e00b      	b.n	8011b76 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	021b      	lsls	r3, r3, #8
 8011b62:	220c      	movs	r2, #12
 8011b64:	18b9      	adds	r1, r7, r2
 8011b66:	693a      	ldr	r2, [r7, #16]
 8011b68:	188a      	adds	r2, r1, r2
 8011b6a:	7812      	ldrb	r2, [r2, #0]
 8011b6c:	189b      	adds	r3, r3, r2
 8011b6e:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	3b01      	subs	r3, #1
 8011b74:	613b      	str	r3, [r7, #16]
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	daf0      	bge.n	8011b5e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8011b7c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8011b7e:	0018      	movs	r0, r3
 8011b80:	46bd      	mov	sp, r7
 8011b82:	b006      	add	sp, #24
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <dwt_read16bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
<<<<<<< HEAD
 8012a4a:	b5b0      	push	{r4, r5, r7, lr}
 8012a4c:	b084      	sub	sp, #16
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8012a54:	240e      	movs	r4, #14
 8012a56:	193b      	adds	r3, r7, r4
 8012a58:	2200      	movs	r2, #0
 8012a5a:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	b298      	uxth	r0, r3
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	b299      	uxth	r1, r3
 8012a64:	250c      	movs	r5, #12
 8012a66:	197b      	adds	r3, r7, r5
 8012a68:	2202      	movs	r2, #2
 8012a6a:	f7ff ff6b 	bl	8012944 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8012a6e:	0029      	movs	r1, r5
 8012a70:	187b      	adds	r3, r7, r1
 8012a72:	785b      	ldrb	r3, [r3, #1]
 8012a74:	021b      	lsls	r3, r3, #8
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	187b      	adds	r3, r7, r1
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	0019      	movs	r1, r3
 8012a7e:	193b      	adds	r3, r7, r4
 8012a80:	1852      	adds	r2, r2, r1
 8012a82:	801a      	strh	r2, [r3, #0]
    return regval ;
 8012a84:	193b      	adds	r3, r7, r4
 8012a86:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 8012a88:	0018      	movs	r0, r3
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	b004      	add	sp, #16
 8012a8e:	bdb0      	pop	{r4, r5, r7, pc}

08012a90 <dwt_read8bitoffsetreg>:
=======
 8011b86:	b5b0      	push	{r4, r5, r7, lr}
 8011b88:	b084      	sub	sp, #16
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8011b90:	240e      	movs	r4, #14
 8011b92:	193b      	adds	r3, r7, r4
 8011b94:	2200      	movs	r2, #0
 8011b96:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	b298      	uxth	r0, r3
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	b299      	uxth	r1, r3
 8011ba0:	250c      	movs	r5, #12
 8011ba2:	197b      	adds	r3, r7, r5
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	f7ff ff6b 	bl	8011a80 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8011baa:	0029      	movs	r1, r5
 8011bac:	187b      	adds	r3, r7, r1
 8011bae:	785b      	ldrb	r3, [r3, #1]
 8011bb0:	021b      	lsls	r3, r3, #8
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	187b      	adds	r3, r7, r1
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	0019      	movs	r1, r3
 8011bba:	193b      	adds	r3, r7, r4
 8011bbc:	1852      	adds	r2, r2, r1
 8011bbe:	801a      	strh	r2, [r3, #0]
    return regval ;
 8011bc0:	193b      	adds	r3, r7, r4
 8011bc2:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 8011bc4:	0018      	movs	r0, r3
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	b004      	add	sp, #16
 8011bca:	bdb0      	pop	{r4, r5, r7, pc}

08011bcc <dwt_read8bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
<<<<<<< HEAD
 8012a90:	b590      	push	{r4, r7, lr}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	b298      	uxth	r0, r3
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	b299      	uxth	r1, r3
 8012aa2:	240f      	movs	r4, #15
 8012aa4:	193b      	adds	r3, r7, r4
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	f7ff ff4c 	bl	8012944 <dwt_readfromdevice>

    return regval ;
 8012aac:	193b      	adds	r3, r7, r4
 8012aae:	781b      	ldrb	r3, [r3, #0]
}
 8012ab0:	0018      	movs	r0, r3
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	b005      	add	sp, #20
 8012ab6:	bd90      	pop	{r4, r7, pc}

08012ab8 <dwt_write8bitoffsetreg>:
=======
 8011bcc:	b590      	push	{r4, r7, lr}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	b298      	uxth	r0, r3
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	b299      	uxth	r1, r3
 8011bde:	240f      	movs	r4, #15
 8011be0:	193b      	adds	r3, r7, r4
 8011be2:	2201      	movs	r2, #1
 8011be4:	f7ff ff4c 	bl	8011a80 <dwt_readfromdevice>

    return regval ;
 8011be8:	193b      	adds	r3, r7, r4
 8011bea:	781b      	ldrb	r3, [r3, #0]
}
 8011bec:	0018      	movs	r0, r3
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	b005      	add	sp, #20
 8011bf2:	bd90      	pop	{r4, r7, pc}

08011bf4 <dwt_write8bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
<<<<<<< HEAD
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	1dfb      	adds	r3, r7, #7
 8012ac4:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	b298      	uxth	r0, r3
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	b299      	uxth	r1, r3
 8012ace:	1dfb      	adds	r3, r7, #7
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	f7ff fed6 	bl	8012882 <dwt_writetodevice>
}
 8012ad6:	46c0      	nop			@ (mov r8, r8)
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	b004      	add	sp, #16
 8012adc:	bd80      	pop	{r7, pc}

08012ade <dwt_write16bitoffsetreg>:
=======
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b084      	sub	sp, #16
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	1dfb      	adds	r3, r7, #7
 8011c00:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	b298      	uxth	r0, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	b299      	uxth	r1, r3
 8011c0a:	1dfb      	adds	r3, r7, #7
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f7ff fed6 	bl	80119be <dwt_writetodevice>
}
 8011c12:	46c0      	nop			@ (mov r8, r8)
 8011c14:	46bd      	mov	sp, r7
 8011c16:	b004      	add	sp, #16
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <dwt_write16bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
<<<<<<< HEAD
 8012ade:	b590      	push	{r4, r7, lr}
 8012ae0:	b087      	sub	sp, #28
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	60f8      	str	r0, [r7, #12]
 8012ae6:	60b9      	str	r1, [r7, #8]
 8012ae8:	1dbb      	adds	r3, r7, #6
 8012aea:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8012aec:	1dbb      	adds	r3, r7, #6
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	2414      	movs	r4, #20
 8012af4:	193b      	adds	r3, r7, r4
 8012af6:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 8012af8:	1dbb      	adds	r3, r7, #6
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	0a1b      	lsrs	r3, r3, #8
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	b2da      	uxtb	r2, r3
 8012b02:	193b      	adds	r3, r7, r4
 8012b04:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	b298      	uxth	r0, r3
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	b299      	uxth	r1, r3
 8012b0e:	193b      	adds	r3, r7, r4
 8012b10:	2202      	movs	r2, #2
 8012b12:	f7ff feb6 	bl	8012882 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8012b16:	46c0      	nop			@ (mov r8, r8)
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	b007      	add	sp, #28
 8012b1c:	bd90      	pop	{r4, r7, pc}

08012b1e <dwt_write32bitoffsetreg>:
=======
 8011c1a:	b590      	push	{r4, r7, lr}
 8011c1c:	b087      	sub	sp, #28
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	60f8      	str	r0, [r7, #12]
 8011c22:	60b9      	str	r1, [r7, #8]
 8011c24:	1dbb      	adds	r3, r7, #6
 8011c26:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8011c28:	1dbb      	adds	r3, r7, #6
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b2da      	uxtb	r2, r3
 8011c2e:	2414      	movs	r4, #20
 8011c30:	193b      	adds	r3, r7, r4
 8011c32:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 8011c34:	1dbb      	adds	r3, r7, #6
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	0a1b      	lsrs	r3, r3, #8
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	b2da      	uxtb	r2, r3
 8011c3e:	193b      	adds	r3, r7, r4
 8011c40:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	b298      	uxth	r0, r3
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	b299      	uxth	r1, r3
 8011c4a:	193b      	adds	r3, r7, r4
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	f7ff feb6 	bl	80119be <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	46bd      	mov	sp, r7
 8011c56:	b007      	add	sp, #28
 8011c58:	bd90      	pop	{r4, r7, pc}

08011c5a <dwt_write32bitoffsetreg>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
<<<<<<< HEAD
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b086      	sub	sp, #24
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
=======
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b086      	sub	sp, #24
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
<<<<<<< HEAD
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	617b      	str	r3, [r7, #20]
 8012b2e:	e00d      	b.n	8012b4c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	b2d9      	uxtb	r1, r3
 8012b34:	2310      	movs	r3, #16
 8012b36:	18fa      	adds	r2, r7, r3
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	18d3      	adds	r3, r2, r3
 8012b3c:	1c0a      	adds	r2, r1, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	0a1b      	lsrs	r3, r3, #8
 8012b44:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	617b      	str	r3, [r7, #20]
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	2b03      	cmp	r3, #3
 8012b50:	ddee      	ble.n	8012b30 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	b298      	uxth	r0, r3
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	b299      	uxth	r1, r3
 8012b5a:	2310      	movs	r3, #16
 8012b5c:	18fb      	adds	r3, r7, r3
 8012b5e:	2204      	movs	r2, #4
 8012b60:	f7ff fe8f 	bl	8012882 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8012b64:	46c0      	nop			@ (mov r8, r8)
 8012b66:	46bd      	mov	sp, r7
 8012b68:	b006      	add	sp, #24
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <_dwt_otpread>:
=======
 8011c66:	2300      	movs	r3, #0
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	e00d      	b.n	8011c88 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	b2d9      	uxtb	r1, r3
 8011c70:	2310      	movs	r3, #16
 8011c72:	18fa      	adds	r2, r7, r3
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	18d3      	adds	r3, r2, r3
 8011c78:	1c0a      	adds	r2, r1, #0
 8011c7a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	0a1b      	lsrs	r3, r3, #8
 8011c80:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	3301      	adds	r3, #1
 8011c86:	617b      	str	r3, [r7, #20]
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	ddee      	ble.n	8011c6c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	b298      	uxth	r0, r3
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	b299      	uxth	r1, r3
 8011c96:	2310      	movs	r3, #16
 8011c98:	18fb      	adds	r3, r7, r3
 8011c9a:	2204      	movs	r2, #4
 8011c9c:	f7ff fe8f 	bl	80119be <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8011ca0:	46c0      	nop			@ (mov r8, r8)
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	b006      	add	sp, #24
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <_dwt_otpread>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
<<<<<<< HEAD
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	0002      	movs	r2, r0
 8012b74:	1dbb      	adds	r3, r7, #6
 8012b76:	801a      	strh	r2, [r3, #0]
=======
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	0002      	movs	r2, r0
 8011cb0:	1dbb      	adds	r3, r7, #6
 8011cb2:	801a      	strh	r2, [r3, #0]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
<<<<<<< HEAD
 8012b78:	1dbb      	adds	r3, r7, #6
 8012b7a:	881b      	ldrh	r3, [r3, #0]
 8012b7c:	001a      	movs	r2, r3
 8012b7e:	2104      	movs	r1, #4
 8012b80:	202d      	movs	r0, #45	@ 0x2d
 8012b82:	f7ff ffac 	bl	8012ade <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8012b86:	2203      	movs	r2, #3
 8012b88:	2106      	movs	r1, #6
 8012b8a:	202d      	movs	r0, #45	@ 0x2d
 8012b8c:	f7ff ff94 	bl	8012ab8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8012b90:	2200      	movs	r2, #0
 8012b92:	2106      	movs	r1, #6
 8012b94:	202d      	movs	r0, #45	@ 0x2d
 8012b96:	f7ff ff8f 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8012b9a:	210a      	movs	r1, #10
 8012b9c:	202d      	movs	r0, #45	@ 0x2d
 8012b9e:	f7ff ff2d 	bl	80129fc <dwt_read32bitoffsetreg>
 8012ba2:	0003      	movs	r3, r0
 8012ba4:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
}
 8012ba8:	0018      	movs	r0, r3
 8012baa:	46bd      	mov	sp, r7
 8012bac:	b004      	add	sp, #16
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_dwt_aonarrayupload>:
=======
 8011cb4:	1dbb      	adds	r3, r7, #6
 8011cb6:	881b      	ldrh	r3, [r3, #0]
 8011cb8:	001a      	movs	r2, r3
 8011cba:	2104      	movs	r1, #4
 8011cbc:	202d      	movs	r0, #45	@ 0x2d
 8011cbe:	f7ff ffac 	bl	8011c1a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8011cc2:	2203      	movs	r2, #3
 8011cc4:	2106      	movs	r1, #6
 8011cc6:	202d      	movs	r0, #45	@ 0x2d
 8011cc8:	f7ff ff94 	bl	8011bf4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2106      	movs	r1, #6
 8011cd0:	202d      	movs	r0, #45	@ 0x2d
 8011cd2:	f7ff ff8f 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8011cd6:	210a      	movs	r1, #10
 8011cd8:	202d      	movs	r0, #45	@ 0x2d
 8011cda:	f7ff ff2d 	bl	8011b38 <dwt_read32bitoffsetreg>
 8011cde:	0003      	movs	r3, r0
 8011ce0:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
}
 8011ce4:	0018      	movs	r0, r3
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	b004      	add	sp, #16
 8011cea:	bd80      	pop	{r7, pc}

08011cec <_dwt_aonarrayupload>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
<<<<<<< HEAD
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	2102      	movs	r1, #2
 8012bb8:	202c      	movs	r0, #44	@ 0x2c
 8012bba:	f7ff ff7d 	bl	8012ab8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	2102      	movs	r1, #2
 8012bc2:	202c      	movs	r0, #44	@ 0x2c
 8012bc4:	f7ff ff78 	bl	8012ab8 <dwt_write8bitoffsetreg>
}
 8012bc8:	46c0      	nop			@ (mov r8, r8)
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
	...

08012bd0 <_dwt_configlde>:
=======
 8011cec:	b580      	push	{r7, lr}
 8011cee:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2102      	movs	r1, #2
 8011cf4:	202c      	movs	r0, #44	@ 0x2c
 8011cf6:	f7ff ff7d 	bl	8011bf4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	2102      	movs	r1, #2
 8011cfe:	202c      	movs	r0, #44	@ 0x2c
 8011d00:	f7ff ff78 	bl	8011bf4 <dwt_write8bitoffsetreg>
}
 8011d04:	46c0      	nop			@ (mov r8, r8)
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
	...

08011d0c <_dwt_configlde>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
<<<<<<< HEAD
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8012bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8012c0c <_dwt_configlde+0x3c>)
 8012bda:	226d      	movs	r2, #109	@ 0x6d
 8012bdc:	0019      	movs	r1, r3
 8012bde:	202e      	movs	r0, #46	@ 0x2e
 8012be0:	f7ff ff6a 	bl	8012ab8 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d006      	beq.n	8012bf8 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8012bea:	4a09      	ldr	r2, [pc, #36]	@ (8012c10 <_dwt_configlde+0x40>)
 8012bec:	4b09      	ldr	r3, [pc, #36]	@ (8012c14 <_dwt_configlde+0x44>)
 8012bee:	0019      	movs	r1, r3
 8012bf0:	202e      	movs	r0, #46	@ 0x2e
 8012bf2:	f7ff ff74 	bl	8012ade <dwt_write16bitoffsetreg>
=======
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8011d14:	4b0c      	ldr	r3, [pc, #48]	@ (8011d48 <_dwt_configlde+0x3c>)
 8011d16:	226d      	movs	r2, #109	@ 0x6d
 8011d18:	0019      	movs	r1, r3
 8011d1a:	202e      	movs	r0, #46	@ 0x2e
 8011d1c:	f7ff ff6a 	bl	8011bf4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d006      	beq.n	8011d34 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8011d26:	4a09      	ldr	r2, [pc, #36]	@ (8011d4c <_dwt_configlde+0x40>)
 8011d28:	4b09      	ldr	r3, [pc, #36]	@ (8011d50 <_dwt_configlde+0x44>)
 8011d2a:	0019      	movs	r1, r3
 8011d2c:	202e      	movs	r0, #46	@ 0x2e
 8011d2e:	f7ff ff74 	bl	8011c1a <dwt_write16bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
<<<<<<< HEAD
 8012bf6:	e005      	b.n	8012c04 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8012bf8:	4a07      	ldr	r2, [pc, #28]	@ (8012c18 <_dwt_configlde+0x48>)
 8012bfa:	4b06      	ldr	r3, [pc, #24]	@ (8012c14 <_dwt_configlde+0x44>)
 8012bfc:	0019      	movs	r1, r3
 8012bfe:	202e      	movs	r0, #46	@ 0x2e
 8012c00:	f7ff ff6d 	bl	8012ade <dwt_write16bitoffsetreg>
}
 8012c04:	46c0      	nop			@ (mov r8, r8)
 8012c06:	46bd      	mov	sp, r7
 8012c08:	b002      	add	sp, #8
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	00000806 	.word	0x00000806
 8012c10:	00000607 	.word	0x00000607
 8012c14:	00001806 	.word	0x00001806
 8012c18:	00001607 	.word	0x00001607

08012c1c <_dwt_loaducodefromrom>:
=======
 8011d32:	e005      	b.n	8011d40 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8011d34:	4a07      	ldr	r2, [pc, #28]	@ (8011d54 <_dwt_configlde+0x48>)
 8011d36:	4b06      	ldr	r3, [pc, #24]	@ (8011d50 <_dwt_configlde+0x44>)
 8011d38:	0019      	movs	r1, r3
 8011d3a:	202e      	movs	r0, #46	@ 0x2e
 8011d3c:	f7ff ff6d 	bl	8011c1a <dwt_write16bitoffsetreg>
}
 8011d40:	46c0      	nop			@ (mov r8, r8)
 8011d42:	46bd      	mov	sp, r7
 8011d44:	b002      	add	sp, #8
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	00000806 	.word	0x00000806
 8011d4c:	00000607 	.word	0x00000607
 8011d50:	00001806 	.word	0x00001806
 8011d54:	00001607 	.word	0x00001607

08011d58 <_dwt_loaducodefromrom>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
<<<<<<< HEAD
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8012c20:	200e      	movs	r0, #14
 8012c22:	f000 f861 	bl	8012ce8 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8012c26:	2380      	movs	r3, #128	@ 0x80
 8012c28:	021b      	lsls	r3, r3, #8
 8012c2a:	001a      	movs	r2, r3
 8012c2c:	2106      	movs	r1, #6
 8012c2e:	202d      	movs	r0, #45	@ 0x2d
 8012c30:	f7ff ff55 	bl	8012ade <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8012c34:	2001      	movs	r0, #1
 8012c36:	f000 facc 	bl	80131d2 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8012c3a:	2001      	movs	r0, #1
 8012c3c:	f000 f854 	bl	8012ce8 <_dwt_enableclocks>
}
 8012c40:	46c0      	nop			@ (mov r8, r8)
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
	...

08012c48 <dwt_setdblrxbuffmode>:
=======
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8011d5c:	200e      	movs	r0, #14
 8011d5e:	f000 f861 	bl	8011e24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8011d62:	2380      	movs	r3, #128	@ 0x80
 8011d64:	021b      	lsls	r3, r3, #8
 8011d66:	001a      	movs	r2, r3
 8011d68:	2106      	movs	r1, #6
 8011d6a:	202d      	movs	r0, #45	@ 0x2d
 8011d6c:	f7ff ff55 	bl	8011c1a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8011d70:	2001      	movs	r0, #1
 8011d72:	f000 facc 	bl	801230e <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8011d76:	2001      	movs	r0, #1
 8011d78:	f000 f854 	bl	8011e24 <_dwt_enableclocks>
}
 8011d7c:	46c0      	nop			@ (mov r8, r8)
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
	...

08011d84 <dwt_setdblrxbuffmode>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
<<<<<<< HEAD
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
    if(enable)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00c      	beq.n	8012c70 <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 8012c56:	4b13      	ldr	r3, [pc, #76]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	691a      	ldr	r2, [r3, #16]
 8012c5c:	4b11      	ldr	r3, [pc, #68]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4911      	ldr	r1, [pc, #68]	@ (8012ca8 <dwt_setdblrxbuffmode+0x60>)
 8012c62:	400a      	ands	r2, r1
 8012c64:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 8012c66:	4b0f      	ldr	r3, [pc, #60]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	751a      	strb	r2, [r3, #20]
 8012c6e:	e00c      	b.n	8012c8a <dwt_setdblrxbuffmode+0x42>
=======
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
    if(enable)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00c      	beq.n	8011dac <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 8011d92:	4b13      	ldr	r3, [pc, #76]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	691a      	ldr	r2, [r3, #16]
 8011d98:	4b11      	ldr	r3, [pc, #68]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4911      	ldr	r1, [pc, #68]	@ (8011de4 <dwt_setdblrxbuffmode+0x60>)
 8011d9e:	400a      	ands	r2, r1
 8011da0:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 8011da2:	4b0f      	ldr	r3, [pc, #60]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2201      	movs	r2, #1
 8011da8:	751a      	strb	r2, [r3, #20]
 8011daa:	e00c      	b.n	8011dc6 <dwt_setdblrxbuffmode+0x42>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
<<<<<<< HEAD
 8012c70:	4b0c      	ldr	r3, [pc, #48]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	691a      	ldr	r2, [r3, #16]
 8012c76:	4b0b      	ldr	r3, [pc, #44]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	2180      	movs	r1, #128	@ 0x80
 8012c7c:	0149      	lsls	r1, r1, #5
 8012c7e:	430a      	orrs	r2, r1
 8012c80:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 8012c82:	4b08      	ldr	r3, [pc, #32]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2200      	movs	r2, #0
 8012c88:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8012c8a:	4b06      	ldr	r3, [pc, #24]	@ (8012ca4 <dwt_setdblrxbuffmode+0x5c>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	001a      	movs	r2, r3
 8012c92:	2100      	movs	r1, #0
 8012c94:	2004      	movs	r0, #4
 8012c96:	f7ff ff42 	bl	8012b1e <dwt_write32bitoffsetreg>
}
 8012c9a:	46c0      	nop			@ (mov r8, r8)
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	b002      	add	sp, #8
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	46c0      	nop			@ (mov r8, r8)
 8012ca4:	200001fc 	.word	0x200001fc
 8012ca8:	ffffefff 	.word	0xffffefff

08012cac <dwt_setrxaftertxdelay>:
=======
 8011dac:	4b0c      	ldr	r3, [pc, #48]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	691a      	ldr	r2, [r3, #16]
 8011db2:	4b0b      	ldr	r3, [pc, #44]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2180      	movs	r1, #128	@ 0x80
 8011db8:	0149      	lsls	r1, r1, #5
 8011dba:	430a      	orrs	r2, r1
 8011dbc:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 8011dbe:	4b08      	ldr	r3, [pc, #32]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8011dc6:	4b06      	ldr	r3, [pc, #24]	@ (8011de0 <dwt_setdblrxbuffmode+0x5c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	691b      	ldr	r3, [r3, #16]
 8011dcc:	001a      	movs	r2, r3
 8011dce:	2100      	movs	r1, #0
 8011dd0:	2004      	movs	r0, #4
 8011dd2:	f7ff ff42 	bl	8011c5a <dwt_write32bitoffsetreg>
}
 8011dd6:	46c0      	nop			@ (mov r8, r8)
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	b002      	add	sp, #8
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	46c0      	nop			@ (mov r8, r8)
 8011de0:	20000204 	.word	0x20000204
 8011de4:	ffffefff 	.word	0xffffefff

08011de8 <dwt_setrxaftertxdelay>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
<<<<<<< HEAD
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	201a      	movs	r0, #26
 8012cb8:	f7ff fea0 	bl	80129fc <dwt_read32bitoffsetreg>
 8012cbc:	0003      	movs	r3, r0
 8012cbe:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	0d1b      	lsrs	r3, r3, #20
 8012cc4:	051b      	lsls	r3, r3, #20
 8012cc6:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	031b      	lsls	r3, r3, #12
 8012ccc:	0b1b      	lsrs	r3, r3, #12
 8012cce:	68fa      	ldr	r2, [r7, #12]
 8012cd0:	4313      	orrs	r3, r2
 8012cd2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	001a      	movs	r2, r3
 8012cd8:	2100      	movs	r1, #0
 8012cda:	201a      	movs	r0, #26
 8012cdc:	f7ff ff1f 	bl	8012b1e <dwt_write32bitoffsetreg>
}
 8012ce0:	46c0      	nop			@ (mov r8, r8)
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	b004      	add	sp, #16
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <_dwt_enableclocks>:
=======
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8011df0:	2100      	movs	r1, #0
 8011df2:	201a      	movs	r0, #26
 8011df4:	f7ff fea0 	bl	8011b38 <dwt_read32bitoffsetreg>
 8011df8:	0003      	movs	r3, r0
 8011dfa:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	0d1b      	lsrs	r3, r3, #20
 8011e00:	051b      	lsls	r3, r3, #20
 8011e02:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	031b      	lsls	r3, r3, #12
 8011e08:	0b1b      	lsrs	r3, r3, #12
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	001a      	movs	r2, r3
 8011e14:	2100      	movs	r1, #0
 8011e16:	201a      	movs	r0, #26
 8011e18:	f7ff ff1f 	bl	8011c5a <dwt_write32bitoffsetreg>
}
 8011e1c:	46c0      	nop			@ (mov r8, r8)
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	b004      	add	sp, #16
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <_dwt_enableclocks>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
<<<<<<< HEAD
 8012ce8:	b590      	push	{r4, r7, lr}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8012cf0:	230c      	movs	r3, #12
 8012cf2:	18fb      	adds	r3, r7, r3
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	2100      	movs	r1, #0
 8012cf8:	2036      	movs	r0, #54	@ 0x36
 8012cfa:	f7ff fe23 	bl	8012944 <dwt_readfromdevice>
    switch(clocks)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2b0e      	cmp	r3, #14
 8012d02:	d900      	bls.n	8012d06 <_dwt_enableclocks+0x1e>
 8012d04:	e07b      	b.n	8012dfe <_dwt_enableclocks+0x116>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	009a      	lsls	r2, r3, #2
 8012d0a:	4b46      	ldr	r3, [pc, #280]	@ (8012e24 <_dwt_enableclocks+0x13c>)
 8012d0c:	18d3      	adds	r3, r2, r3
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	469f      	mov	pc, r3
=======
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8011e2c:	230c      	movs	r3, #12
 8011e2e:	18fb      	adds	r3, r7, r3
 8011e30:	2202      	movs	r2, #2
 8011e32:	2100      	movs	r1, #0
 8011e34:	2036      	movs	r0, #54	@ 0x36
 8011e36:	f7ff fe23 	bl	8011a80 <dwt_readfromdevice>
    switch(clocks)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b0e      	cmp	r3, #14
 8011e3e:	d900      	bls.n	8011e42 <_dwt_enableclocks+0x1e>
 8011e40:	e07b      	b.n	8011f3a <_dwt_enableclocks+0x116>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	009a      	lsls	r2, r3, #2
 8011e46:	4b46      	ldr	r3, [pc, #280]	@ (8011f60 <_dwt_enableclocks+0x13c>)
 8011e48:	18d3      	adds	r3, r2, r3
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	469f      	mov	pc, r3
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
<<<<<<< HEAD
 8012d12:	210c      	movs	r1, #12
 8012d14:	187b      	adds	r3, r7, r1
 8012d16:	2200      	movs	r2, #0
 8012d18:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 8012d1a:	187b      	adds	r3, r7, r1
 8012d1c:	785b      	ldrb	r3, [r3, #1]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	4393      	bics	r3, r2
 8012d22:	b2da      	uxtb	r2, r3
 8012d24:	187b      	adds	r3, r7, r1
 8012d26:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012d28:	e06a      	b.n	8012e00 <_dwt_enableclocks+0x118>
=======
 8011e4e:	210c      	movs	r1, #12
 8011e50:	187b      	adds	r3, r7, r1
 8011e52:	2200      	movs	r2, #0
 8011e54:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 8011e56:	187b      	adds	r3, r7, r1
 8011e58:	785b      	ldrb	r3, [r3, #1]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	4393      	bics	r3, r2
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	187b      	adds	r3, r7, r1
 8011e62:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011e64:	e06a      	b.n	8011f3c <_dwt_enableclocks+0x118>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
<<<<<<< HEAD
 8012d2a:	210c      	movs	r1, #12
 8012d2c:	187b      	adds	r3, r7, r1
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	b25b      	sxtb	r3, r3
 8012d32:	2203      	movs	r2, #3
 8012d34:	4393      	bics	r3, r2
 8012d36:	b25b      	sxtb	r3, r3
 8012d38:	2201      	movs	r2, #1
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	b25b      	sxtb	r3, r3
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	187b      	adds	r3, r7, r1
 8012d42:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012d44:	e05c      	b.n	8012e00 <_dwt_enableclocks+0x118>
=======
 8011e66:	210c      	movs	r1, #12
 8011e68:	187b      	adds	r3, r7, r1
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	b25b      	sxtb	r3, r3
 8011e6e:	2203      	movs	r2, #3
 8011e70:	4393      	bics	r3, r2
 8011e72:	b25b      	sxtb	r3, r3
 8011e74:	2201      	movs	r2, #1
 8011e76:	4313      	orrs	r3, r2
 8011e78:	b25b      	sxtb	r3, r3
 8011e7a:	b2da      	uxtb	r2, r3
 8011e7c:	187b      	adds	r3, r7, r1
 8011e7e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8011e80:	e05c      	b.n	8011f3c <_dwt_enableclocks+0x118>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
<<<<<<< HEAD
 8012d46:	210c      	movs	r1, #12
 8012d48:	187b      	adds	r3, r7, r1
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	b25b      	sxtb	r3, r3
 8012d4e:	2203      	movs	r2, #3
 8012d50:	4393      	bics	r3, r2
 8012d52:	b25b      	sxtb	r3, r3
 8012d54:	2202      	movs	r2, #2
 8012d56:	4313      	orrs	r3, r2
 8012d58:	b25b      	sxtb	r3, r3
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	187b      	adds	r3, r7, r1
 8012d5e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012d60:	e04e      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8012d62:	210c      	movs	r1, #12
 8012d64:	187b      	adds	r3, r7, r1
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	b25b      	sxtb	r3, r3
 8012d6a:	224c      	movs	r2, #76	@ 0x4c
 8012d6c:	4393      	bics	r3, r2
 8012d6e:	b25b      	sxtb	r3, r3
 8012d70:	2248      	movs	r2, #72	@ 0x48
 8012d72:	4313      	orrs	r3, r2
 8012d74:	b25b      	sxtb	r3, r3
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	187b      	adds	r3, r7, r1
 8012d7a:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 8012d7c:	187b      	adds	r3, r7, r1
 8012d7e:	785b      	ldrb	r3, [r3, #1]
 8012d80:	2280      	movs	r2, #128	@ 0x80
 8012d82:	4252      	negs	r2, r2
 8012d84:	4313      	orrs	r3, r2
 8012d86:	b2da      	uxtb	r2, r3
 8012d88:	187b      	adds	r3, r7, r1
 8012d8a:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012d8c:	e038      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8012d8e:	210c      	movs	r1, #12
 8012d90:	187b      	adds	r3, r7, r1
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	224c      	movs	r2, #76	@ 0x4c
 8012d96:	4393      	bics	r3, r2
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	187b      	adds	r3, r7, r1
 8012d9c:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8012d9e:	187b      	adds	r3, r7, r1
 8012da0:	785b      	ldrb	r3, [r3, #1]
 8012da2:	227f      	movs	r2, #127	@ 0x7f
 8012da4:	4013      	ands	r3, r2
 8012da6:	b2da      	uxtb	r2, r3
 8012da8:	187b      	adds	r3, r7, r1
 8012daa:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012dac:	e028      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8012dae:	210c      	movs	r1, #12
 8012db0:	187b      	adds	r3, r7, r1
 8012db2:	785b      	ldrb	r3, [r3, #1]
 8012db4:	2202      	movs	r2, #2
 8012db6:	4313      	orrs	r3, r2
 8012db8:	b2da      	uxtb	r2, r3
 8012dba:	187b      	adds	r3, r7, r1
 8012dbc:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012dbe:	e01f      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8012dc0:	210c      	movs	r1, #12
 8012dc2:	187b      	adds	r3, r7, r1
 8012dc4:	785b      	ldrb	r3, [r3, #1]
 8012dc6:	2202      	movs	r2, #2
 8012dc8:	4393      	bics	r3, r2
 8012dca:	b2da      	uxtb	r2, r3
 8012dcc:	187b      	adds	r3, r7, r1
 8012dce:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012dd0:	e016      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8012dd2:	210c      	movs	r1, #12
 8012dd4:	187b      	adds	r3, r7, r1
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	b25b      	sxtb	r3, r3
 8012dda:	2230      	movs	r2, #48	@ 0x30
 8012ddc:	4393      	bics	r3, r2
 8012dde:	b25b      	sxtb	r3, r3
 8012de0:	2220      	movs	r2, #32
 8012de2:	4313      	orrs	r3, r2
 8012de4:	b25b      	sxtb	r3, r3
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	187b      	adds	r3, r7, r1
 8012dea:	701a      	strb	r2, [r3, #0]
        }
        break;
 8012dec:	e008      	b.n	8012e00 <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8012dee:	210c      	movs	r1, #12
 8012df0:	187b      	adds	r3, r7, r1
 8012df2:	2201      	movs	r2, #1
 8012df4:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8012df6:	187b      	adds	r3, r7, r1
 8012df8:	2203      	movs	r2, #3
 8012dfa:	705a      	strb	r2, [r3, #1]
        }
        break;
 8012dfc:	e000      	b.n	8012e00 <_dwt_enableclocks+0x118>
        default:
        break;
 8012dfe:	46c0      	nop			@ (mov r8, r8)
=======
 8011e82:	210c      	movs	r1, #12
 8011e84:	187b      	adds	r3, r7, r1
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	b25b      	sxtb	r3, r3
 8011e8a:	2203      	movs	r2, #3
 8011e8c:	4393      	bics	r3, r2
 8011e8e:	b25b      	sxtb	r3, r3
 8011e90:	2202      	movs	r2, #2
 8011e92:	4313      	orrs	r3, r2
 8011e94:	b25b      	sxtb	r3, r3
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	187b      	adds	r3, r7, r1
 8011e9a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8011e9c:	e04e      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8011e9e:	210c      	movs	r1, #12
 8011ea0:	187b      	adds	r3, r7, r1
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	b25b      	sxtb	r3, r3
 8011ea6:	224c      	movs	r2, #76	@ 0x4c
 8011ea8:	4393      	bics	r3, r2
 8011eaa:	b25b      	sxtb	r3, r3
 8011eac:	2248      	movs	r2, #72	@ 0x48
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	b25b      	sxtb	r3, r3
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	187b      	adds	r3, r7, r1
 8011eb6:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 8011eb8:	187b      	adds	r3, r7, r1
 8011eba:	785b      	ldrb	r3, [r3, #1]
 8011ebc:	2280      	movs	r2, #128	@ 0x80
 8011ebe:	4252      	negs	r2, r2
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	187b      	adds	r3, r7, r1
 8011ec6:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011ec8:	e038      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8011eca:	210c      	movs	r1, #12
 8011ecc:	187b      	adds	r3, r7, r1
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	224c      	movs	r2, #76	@ 0x4c
 8011ed2:	4393      	bics	r3, r2
 8011ed4:	b2da      	uxtb	r2, r3
 8011ed6:	187b      	adds	r3, r7, r1
 8011ed8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8011eda:	187b      	adds	r3, r7, r1
 8011edc:	785b      	ldrb	r3, [r3, #1]
 8011ede:	227f      	movs	r2, #127	@ 0x7f
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	187b      	adds	r3, r7, r1
 8011ee6:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011ee8:	e028      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8011eea:	210c      	movs	r1, #12
 8011eec:	187b      	adds	r3, r7, r1
 8011eee:	785b      	ldrb	r3, [r3, #1]
 8011ef0:	2202      	movs	r2, #2
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	187b      	adds	r3, r7, r1
 8011ef8:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011efa:	e01f      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8011efc:	210c      	movs	r1, #12
 8011efe:	187b      	adds	r3, r7, r1
 8011f00:	785b      	ldrb	r3, [r3, #1]
 8011f02:	2202      	movs	r2, #2
 8011f04:	4393      	bics	r3, r2
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	187b      	adds	r3, r7, r1
 8011f0a:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011f0c:	e016      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8011f0e:	210c      	movs	r1, #12
 8011f10:	187b      	adds	r3, r7, r1
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	b25b      	sxtb	r3, r3
 8011f16:	2230      	movs	r2, #48	@ 0x30
 8011f18:	4393      	bics	r3, r2
 8011f1a:	b25b      	sxtb	r3, r3
 8011f1c:	2220      	movs	r2, #32
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	b25b      	sxtb	r3, r3
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	187b      	adds	r3, r7, r1
 8011f26:	701a      	strb	r2, [r3, #0]
        }
        break;
 8011f28:	e008      	b.n	8011f3c <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8011f2a:	210c      	movs	r1, #12
 8011f2c:	187b      	adds	r3, r7, r1
 8011f2e:	2201      	movs	r2, #1
 8011f30:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8011f32:	187b      	adds	r3, r7, r1
 8011f34:	2203      	movs	r2, #3
 8011f36:	705a      	strb	r2, [r3, #1]
        }
        break;
 8011f38:	e000      	b.n	8011f3c <_dwt_enableclocks+0x118>
        default:
        break;
 8011f3a:	46c0      	nop			@ (mov r8, r8)
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
<<<<<<< HEAD
 8012e00:	240c      	movs	r4, #12
 8012e02:	193b      	adds	r3, r7, r4
 8012e04:	2201      	movs	r2, #1
 8012e06:	2100      	movs	r1, #0
 8012e08:	2036      	movs	r0, #54	@ 0x36
 8012e0a:	f7ff fd3a 	bl	8012882 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8012e0e:	193b      	adds	r3, r7, r4
 8012e10:	3301      	adds	r3, #1
 8012e12:	2201      	movs	r2, #1
 8012e14:	2101      	movs	r1, #1
 8012e16:	2036      	movs	r0, #54	@ 0x36
 8012e18:	f7ff fd33 	bl	8012882 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8012e1c:	46c0      	nop			@ (mov r8, r8)
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	b005      	add	sp, #20
 8012e22:	bd90      	pop	{r4, r7, pc}
 8012e24:	08019e78 	.word	0x08019e78

08012e28 <_dwt_disablesequencing>:
=======
 8011f3c:	240c      	movs	r4, #12
 8011f3e:	193b      	adds	r3, r7, r4
 8011f40:	2201      	movs	r2, #1
 8011f42:	2100      	movs	r1, #0
 8011f44:	2036      	movs	r0, #54	@ 0x36
 8011f46:	f7ff fd3a 	bl	80119be <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8011f4a:	193b      	adds	r3, r7, r4
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	2201      	movs	r2, #1
 8011f50:	2101      	movs	r1, #1
 8011f52:	2036      	movs	r0, #54	@ 0x36
 8011f54:	f7ff fd33 	bl	80119be <dwt_writetodevice>

} // end _dwt_enableclocks()
 8011f58:	46c0      	nop			@ (mov r8, r8)
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	b005      	add	sp, #20
 8011f5e:	bd90      	pop	{r4, r7, pc}
 8011f60:	08018894 	.word	0x08018894

08011f64 <_dwt_disablesequencing>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
<<<<<<< HEAD
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8012e2c:	2000      	movs	r0, #0
 8012e2e:	f7ff ff5b 	bl	8012ce8 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8012e32:	2200      	movs	r2, #0
 8012e34:	2104      	movs	r1, #4
 8012e36:	2036      	movs	r0, #54	@ 0x36
 8012e38:	f7ff fe51 	bl	8012ade <dwt_write16bitoffsetreg>
}
 8012e3c:	46c0      	nop			@ (mov r8, r8)
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <dwt_setdelayedtrxtime>:
=======
 8011f64:	b580      	push	{r7, lr}
 8011f66:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8011f68:	2000      	movs	r0, #0
 8011f6a:	f7ff ff5b 	bl	8011e24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8011f6e:	2200      	movs	r2, #0
 8011f70:	2104      	movs	r1, #4
 8011f72:	2036      	movs	r0, #54	@ 0x36
 8011f74:	f7ff fe51 	bl	8011c1a <dwt_write16bitoffsetreg>
}
 8011f78:	46c0      	nop			@ (mov r8, r8)
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <dwt_setdelayedtrxtime>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
<<<<<<< HEAD
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b082      	sub	sp, #8
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	001a      	movs	r2, r3
 8012e4e:	2101      	movs	r1, #1
 8012e50:	200a      	movs	r0, #10
 8012e52:	f7ff fe64 	bl	8012b1e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8012e56:	46c0      	nop			@ (mov r8, r8)
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	b002      	add	sp, #8
 8012e5c:	bd80      	pop	{r7, pc}
	...

08012e60 <dwt_starttx>:
=======
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b082      	sub	sp, #8
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	001a      	movs	r2, r3
 8011f8a:	2101      	movs	r1, #1
 8011f8c:	200a      	movs	r0, #10
 8011f8e:	f7ff fe64 	bl	8011c5a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8011f92:	46c0      	nop			@ (mov r8, r8)
 8011f94:	46bd      	mov	sp, r7
 8011f96:	b002      	add	sp, #8
 8011f98:	bd80      	pop	{r7, pc}
	...

08011f9c <dwt_starttx>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
<<<<<<< HEAD
 8012e60:	b5b0      	push	{r4, r5, r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	0002      	movs	r2, r0
 8012e68:	1dfb      	adds	r3, r7, #7
 8012e6a:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8012e70:	210b      	movs	r1, #11
 8012e72:	187b      	adds	r3, r7, r1
 8012e74:	2200      	movs	r2, #0
 8012e76:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 8012e78:	2308      	movs	r3, #8
 8012e7a:	18fb      	adds	r3, r7, r3
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 8012e80:	1dfb      	adds	r3, r7, #7
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2202      	movs	r2, #2
 8012e86:	4013      	ands	r3, r2
 8012e88:	d006      	beq.n	8012e98 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8012e8a:	187b      	adds	r3, r7, r1
 8012e8c:	2280      	movs	r2, #128	@ 0x80
 8012e8e:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 8012e90:	4b21      	ldr	r3, [pc, #132]	@ (8012f18 <dwt_starttx+0xb8>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2201      	movs	r2, #1
 8012e96:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8012e98:	1dfb      	adds	r3, r7, #7
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	4013      	ands	r3, r2
 8012ea0:	d027      	beq.n	8012ef2 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8012ea2:	200b      	movs	r0, #11
 8012ea4:	183b      	adds	r3, r7, r0
 8012ea6:	183a      	adds	r2, r7, r0
 8012ea8:	7812      	ldrb	r2, [r2, #0]
 8012eaa:	2106      	movs	r1, #6
 8012eac:	430a      	orrs	r2, r1
 8012eae:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012eb0:	183b      	adds	r3, r7, r0
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	001a      	movs	r2, r3
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	200d      	movs	r0, #13
 8012eba:	f7ff fdfd 	bl	8012ab8 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8012ebe:	2508      	movs	r5, #8
 8012ec0:	197c      	adds	r4, r7, r5
 8012ec2:	2103      	movs	r1, #3
 8012ec4:	200f      	movs	r0, #15
 8012ec6:	f7ff fdc0 	bl	8012a4a <dwt_read16bitoffsetreg>
 8012eca:	0003      	movs	r3, r0
 8012ecc:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8012ece:	197b      	adds	r3, r7, r5
 8012ed0:	881a      	ldrh	r2, [r3, #0]
 8012ed2:	2381      	movs	r3, #129	@ 0x81
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	4013      	ands	r3, r2
 8012ed8:	d102      	bne.n	8012ee0 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 8012eda:	2300      	movs	r3, #0
 8012edc:	60fb      	str	r3, [r7, #12]
 8012ede:	e016      	b.n	8012f0e <dwt_starttx+0xae>
=======
 8011f9c:	b5b0      	push	{r4, r5, r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	0002      	movs	r2, r0
 8011fa4:	1dfb      	adds	r3, r7, #7
 8011fa6:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8011fac:	210b      	movs	r1, #11
 8011fae:	187b      	adds	r3, r7, r1
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 8011fb4:	2308      	movs	r3, #8
 8011fb6:	18fb      	adds	r3, r7, r3
 8011fb8:	2200      	movs	r2, #0
 8011fba:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 8011fbc:	1dfb      	adds	r3, r7, #7
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2202      	movs	r2, #2
 8011fc2:	4013      	ands	r3, r2
 8011fc4:	d006      	beq.n	8011fd4 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8011fc6:	187b      	adds	r3, r7, r1
 8011fc8:	2280      	movs	r2, #128	@ 0x80
 8011fca:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 8011fcc:	4b21      	ldr	r3, [pc, #132]	@ (8012054 <dwt_starttx+0xb8>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8011fd4:	1dfb      	adds	r3, r7, #7
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	4013      	ands	r3, r2
 8011fdc:	d027      	beq.n	801202e <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8011fde:	200b      	movs	r0, #11
 8011fe0:	183b      	adds	r3, r7, r0
 8011fe2:	183a      	adds	r2, r7, r0
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	2106      	movs	r1, #6
 8011fe8:	430a      	orrs	r2, r1
 8011fea:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011fec:	183b      	adds	r3, r7, r0
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	001a      	movs	r2, r3
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	200d      	movs	r0, #13
 8011ff6:	f7ff fdfd 	bl	8011bf4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8011ffa:	2508      	movs	r5, #8
 8011ffc:	197c      	adds	r4, r7, r5
 8011ffe:	2103      	movs	r1, #3
 8012000:	200f      	movs	r0, #15
 8012002:	f7ff fdc0 	bl	8011b86 <dwt_read16bitoffsetreg>
 8012006:	0003      	movs	r3, r0
 8012008:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 801200a:	197b      	adds	r3, r7, r5
 801200c:	881a      	ldrh	r2, [r3, #0]
 801200e:	2381      	movs	r3, #129	@ 0x81
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	4013      	ands	r3, r2
 8012014:	d102      	bne.n	801201c <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 8012016:	2300      	movs	r3, #0
 8012018:	60fb      	str	r3, [r7, #12]
 801201a:	e016      	b.n	801204a <dwt_starttx+0xae>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
<<<<<<< HEAD
 8012ee0:	2240      	movs	r2, #64	@ 0x40
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	200d      	movs	r0, #13
 8012ee6:	f7ff fde7 	bl	8012ab8 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8012eea:	2301      	movs	r3, #1
 8012eec:	425b      	negs	r3, r3
 8012eee:	60fb      	str	r3, [r7, #12]
 8012ef0:	e00d      	b.n	8012f0e <dwt_starttx+0xae>
=======
 801201c:	2240      	movs	r2, #64	@ 0x40
 801201e:	2100      	movs	r1, #0
 8012020:	200d      	movs	r0, #13
 8012022:	f7ff fde7 	bl	8011bf4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8012026:	2301      	movs	r3, #1
 8012028:	425b      	negs	r3, r3
 801202a:	60fb      	str	r3, [r7, #12]
 801202c:	e00d      	b.n	801204a <dwt_starttx+0xae>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
<<<<<<< HEAD
 8012ef2:	200b      	movs	r0, #11
 8012ef4:	183b      	adds	r3, r7, r0
 8012ef6:	183a      	adds	r2, r7, r0
 8012ef8:	7812      	ldrb	r2, [r2, #0]
 8012efa:	2102      	movs	r1, #2
 8012efc:	430a      	orrs	r2, r1
 8012efe:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012f00:	183b      	adds	r3, r7, r0
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	001a      	movs	r2, r3
 8012f06:	2100      	movs	r1, #0
 8012f08:	200d      	movs	r0, #13
 8012f0a:	f7ff fdd5 	bl	8012ab8 <dwt_write8bitoffsetreg>
    }

    return retval;
 8012f0e:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8012f10:	0018      	movs	r0, r3
 8012f12:	46bd      	mov	sp, r7
 8012f14:	b004      	add	sp, #16
 8012f16:	bdb0      	pop	{r4, r5, r7, pc}
 8012f18:	200001fc 	.word	0x200001fc

08012f1c <dwt_forcetrxoff>:
=======
 801202e:	200b      	movs	r0, #11
 8012030:	183b      	adds	r3, r7, r0
 8012032:	183a      	adds	r2, r7, r0
 8012034:	7812      	ldrb	r2, [r2, #0]
 8012036:	2102      	movs	r1, #2
 8012038:	430a      	orrs	r2, r1
 801203a:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 801203c:	183b      	adds	r3, r7, r0
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	001a      	movs	r2, r3
 8012042:	2100      	movs	r1, #0
 8012044:	200d      	movs	r0, #13
 8012046:	f7ff fdd5 	bl	8011bf4 <dwt_write8bitoffsetreg>
    }

    return retval;
 801204a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 801204c:	0018      	movs	r0, r3
 801204e:	46bd      	mov	sp, r7
 8012050:	b004      	add	sp, #16
 8012052:	bdb0      	pop	{r4, r5, r7, pc}
 8012054:	20000204 	.word	0x20000204

08012058 <dwt_forcetrxoff>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
<<<<<<< HEAD
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
=======
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
<<<<<<< HEAD
 8012f22:	2100      	movs	r1, #0
 8012f24:	200e      	movs	r0, #14
 8012f26:	f7ff fd69 	bl	80129fc <dwt_read32bitoffsetreg>
 8012f2a:	0003      	movs	r3, r0
 8012f2c:	607b      	str	r3, [r7, #4]
=======
 801205e:	2100      	movs	r1, #0
 8012060:	200e      	movs	r0, #14
 8012062:	f7ff fd69 	bl	8011b38 <dwt_read32bitoffsetreg>
 8012066:	0003      	movs	r3, r0
 8012068:	607b      	str	r3, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
<<<<<<< HEAD
 8012f2e:	f000 f932 	bl	8013196 <decamutexon>
 8012f32:	0003      	movs	r3, r0
 8012f34:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8012f36:	2200      	movs	r2, #0
 8012f38:	2100      	movs	r1, #0
 8012f3a:	200e      	movs	r0, #14
 8012f3c:	f7ff fdef 	bl	8012b1e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8012f40:	2240      	movs	r2, #64	@ 0x40
 8012f42:	2100      	movs	r1, #0
 8012f44:	200d      	movs	r0, #13
 8012f46:	f7ff fdb7 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8012f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012f80 <dwt_forcetrxoff+0x64>)
 8012f4c:	001a      	movs	r2, r3
 8012f4e:	2100      	movs	r1, #0
 8012f50:	200f      	movs	r0, #15
 8012f52:	f7ff fde4 	bl	8012b1e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8012f56:	f000 f817 	bl	8012f88 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	001a      	movs	r2, r3
 8012f5e:	2100      	movs	r1, #0
 8012f60:	200e      	movs	r0, #14
 8012f62:	f7ff fddc 	bl	8012b1e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	0018      	movs	r0, r3
 8012f6a:	f000 f925 	bl	80131b8 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8012f6e:	4b05      	ldr	r3, [pc, #20]	@ (8012f84 <dwt_forcetrxoff+0x68>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8012f76:	46c0      	nop			@ (mov r8, r8)
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	b002      	add	sp, #8
 8012f7c:	bd80      	pop	{r7, pc}
 8012f7e:	46c0      	nop			@ (mov r8, r8)
 8012f80:	2427fff8 	.word	0x2427fff8
 8012f84:	200001fc 	.word	0x200001fc

08012f88 <dwt_syncrxbufptrs>:
=======
 801206a:	f000 f932 	bl	80122d2 <decamutexon>
 801206e:	0003      	movs	r3, r0
 8012070:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8012072:	2200      	movs	r2, #0
 8012074:	2100      	movs	r1, #0
 8012076:	200e      	movs	r0, #14
 8012078:	f7ff fdef 	bl	8011c5a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 801207c:	2240      	movs	r2, #64	@ 0x40
 801207e:	2100      	movs	r1, #0
 8012080:	200d      	movs	r0, #13
 8012082:	f7ff fdb7 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8012086:	4b0d      	ldr	r3, [pc, #52]	@ (80120bc <dwt_forcetrxoff+0x64>)
 8012088:	001a      	movs	r2, r3
 801208a:	2100      	movs	r1, #0
 801208c:	200f      	movs	r0, #15
 801208e:	f7ff fde4 	bl	8011c5a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8012092:	f000 f817 	bl	80120c4 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	001a      	movs	r2, r3
 801209a:	2100      	movs	r1, #0
 801209c:	200e      	movs	r0, #14
 801209e:	f7ff fddc 	bl	8011c5a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	0018      	movs	r0, r3
 80120a6:	f000 f925 	bl	80122f4 <decamutexoff>
    pdw1000local->wait4resp = 0;
 80120aa:	4b05      	ldr	r3, [pc, #20]	@ (80120c0 <dwt_forcetrxoff+0x68>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2200      	movs	r2, #0
 80120b0:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 80120b2:	46c0      	nop			@ (mov r8, r8)
 80120b4:	46bd      	mov	sp, r7
 80120b6:	b002      	add	sp, #8
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	46c0      	nop			@ (mov r8, r8)
 80120bc:	2427fff8 	.word	0x2427fff8
 80120c0:	20000204 	.word	0x20000204

080120c4 <dwt_syncrxbufptrs>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
<<<<<<< HEAD
 8012f88:	b590      	push	{r4, r7, lr}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8012f8e:	1dfc      	adds	r4, r7, #7
 8012f90:	2103      	movs	r1, #3
 8012f92:	200f      	movs	r0, #15
 8012f94:	f7ff fd7c 	bl	8012a90 <dwt_read8bitoffsetreg>
 8012f98:	0003      	movs	r3, r0
 8012f9a:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8012f9c:	1dfb      	adds	r3, r7, #7
 8012f9e:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8012fa0:	1dfb      	adds	r3, r7, #7
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8012fa6:	4053      	eors	r3, r2
 8012fa8:	2280      	movs	r2, #128	@ 0x80
 8012faa:	4013      	ands	r3, r2
 8012fac:	d004      	beq.n	8012fb8 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8012fae:	2201      	movs	r2, #1
 8012fb0:	2103      	movs	r1, #3
 8012fb2:	200d      	movs	r0, #13
 8012fb4:	f7ff fd80 	bl	8012ab8 <dwt_write8bitoffsetreg>
    }
}
 8012fb8:	46c0      	nop			@ (mov r8, r8)
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	b003      	add	sp, #12
 8012fbe:	bd90      	pop	{r4, r7, pc}

08012fc0 <dwt_rxenable>:
=======
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80120ca:	1dfc      	adds	r4, r7, #7
 80120cc:	2103      	movs	r1, #3
 80120ce:	200f      	movs	r0, #15
 80120d0:	f7ff fd7c 	bl	8011bcc <dwt_read8bitoffsetreg>
 80120d4:	0003      	movs	r3, r0
 80120d6:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80120d8:	1dfb      	adds	r3, r7, #7
 80120da:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 80120dc:	1dfb      	adds	r3, r7, #7
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80120e2:	4053      	eors	r3, r2
 80120e4:	2280      	movs	r2, #128	@ 0x80
 80120e6:	4013      	ands	r3, r2
 80120e8:	d004      	beq.n	80120f4 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 80120ea:	2201      	movs	r2, #1
 80120ec:	2103      	movs	r1, #3
 80120ee:	200d      	movs	r0, #13
 80120f0:	f7ff fd80 	bl	8011bf4 <dwt_write8bitoffsetreg>
    }
}
 80120f4:	46c0      	nop			@ (mov r8, r8)
 80120f6:	46bd      	mov	sp, r7
 80120f8:	b003      	add	sp, #12
 80120fa:	bd90      	pop	{r4, r7, pc}

080120fc <dwt_rxenable>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
<<<<<<< HEAD
 8012fc0:	b5b0      	push	{r4, r5, r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
=======
 80120fc:	b5b0      	push	{r4, r5, r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
<<<<<<< HEAD
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2204      	movs	r2, #4
 8012fcc:	4013      	ands	r3, r2
 8012fce:	d101      	bne.n	8012fd4 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 8012fd0:	f7ff ffda 	bl	8012f88 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8012fd4:	210e      	movs	r1, #14
 8012fd6:	187b      	adds	r3, r7, r1
 8012fd8:	2280      	movs	r2, #128	@ 0x80
 8012fda:	0052      	lsls	r2, r2, #1
 8012fdc:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	d006      	beq.n	8012ff4 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8012fe6:	187b      	adds	r3, r7, r1
 8012fe8:	187a      	adds	r2, r7, r1
 8012fea:	8812      	ldrh	r2, [r2, #0]
 8012fec:	2180      	movs	r1, #128	@ 0x80
 8012fee:	0089      	lsls	r1, r1, #2
 8012ff0:	430a      	orrs	r2, r1
 8012ff2:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012ff4:	230e      	movs	r3, #14
 8012ff6:	18fb      	adds	r3, r7, r3
 8012ff8:	881b      	ldrh	r3, [r3, #0]
 8012ffa:	001a      	movs	r2, r3
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	200d      	movs	r0, #13
 8013000:	f7ff fd6d 	bl	8012ade <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2201      	movs	r2, #1
 8013008:	4013      	ands	r3, r2
 801300a:	d01c      	beq.n	8013046 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 801300c:	250d      	movs	r5, #13
 801300e:	197c      	adds	r4, r7, r5
 8013010:	2103      	movs	r1, #3
 8013012:	200f      	movs	r0, #15
 8013014:	f7ff fd3c 	bl	8012a90 <dwt_read8bitoffsetreg>
 8013018:	0003      	movs	r3, r0
 801301a:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 801301c:	197b      	adds	r3, r7, r5
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	2208      	movs	r2, #8
 8013022:	4013      	ands	r3, r2
 8013024:	d00f      	beq.n	8013046 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8013026:	f7ff ff79 	bl	8012f1c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2202      	movs	r2, #2
 801302e:	4013      	ands	r3, r2
 8013030:	d106      	bne.n	8013040 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8013032:	2380      	movs	r3, #128	@ 0x80
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	001a      	movs	r2, r3
 8013038:	2100      	movs	r1, #0
 801303a:	200d      	movs	r0, #13
 801303c:	f7ff fd4f 	bl	8012ade <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8013040:	2301      	movs	r3, #1
 8013042:	425b      	negs	r3, r3
 8013044:	e000      	b.n	8013048 <dwt_rxenable+0x88>
=======
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2204      	movs	r2, #4
 8012108:	4013      	ands	r3, r2
 801210a:	d101      	bne.n	8012110 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 801210c:	f7ff ffda 	bl	80120c4 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8012110:	210e      	movs	r1, #14
 8012112:	187b      	adds	r3, r7, r1
 8012114:	2280      	movs	r2, #128	@ 0x80
 8012116:	0052      	lsls	r2, r2, #1
 8012118:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2201      	movs	r2, #1
 801211e:	4013      	ands	r3, r2
 8012120:	d006      	beq.n	8012130 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8012122:	187b      	adds	r3, r7, r1
 8012124:	187a      	adds	r2, r7, r1
 8012126:	8812      	ldrh	r2, [r2, #0]
 8012128:	2180      	movs	r1, #128	@ 0x80
 801212a:	0089      	lsls	r1, r1, #2
 801212c:	430a      	orrs	r2, r1
 801212e:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8012130:	230e      	movs	r3, #14
 8012132:	18fb      	adds	r3, r7, r3
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	001a      	movs	r2, r3
 8012138:	2100      	movs	r1, #0
 801213a:	200d      	movs	r0, #13
 801213c:	f7ff fd6d 	bl	8011c1a <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2201      	movs	r2, #1
 8012144:	4013      	ands	r3, r2
 8012146:	d01c      	beq.n	8012182 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8012148:	250d      	movs	r5, #13
 801214a:	197c      	adds	r4, r7, r5
 801214c:	2103      	movs	r1, #3
 801214e:	200f      	movs	r0, #15
 8012150:	f7ff fd3c 	bl	8011bcc <dwt_read8bitoffsetreg>
 8012154:	0003      	movs	r3, r0
 8012156:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8012158:	197b      	adds	r3, r7, r5
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2208      	movs	r2, #8
 801215e:	4013      	ands	r3, r2
 8012160:	d00f      	beq.n	8012182 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8012162:	f7ff ff79 	bl	8012058 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2202      	movs	r2, #2
 801216a:	4013      	ands	r3, r2
 801216c:	d106      	bne.n	801217c <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 801216e:	2380      	movs	r3, #128	@ 0x80
 8012170:	005b      	lsls	r3, r3, #1
 8012172:	001a      	movs	r2, r3
 8012174:	2100      	movs	r1, #0
 8012176:	200d      	movs	r0, #13
 8012178:	f7ff fd4f 	bl	8011c1a <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 801217c:	2301      	movs	r3, #1
 801217e:	425b      	negs	r3, r3
 8012180:	e000      	b.n	8012184 <dwt_rxenable+0x88>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        }
    }

    return DWT_SUCCESS;
<<<<<<< HEAD
 8013046:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8013048:	0018      	movs	r0, r3
 801304a:	46bd      	mov	sp, r7
 801304c:	b004      	add	sp, #16
 801304e:	bdb0      	pop	{r4, r5, r7, pc}

08013050 <dwt_setrxtimeout>:
=======
 8012182:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8012184:	0018      	movs	r0, r3
 8012186:	46bd      	mov	sp, r7
 8012188:	b004      	add	sp, #16
 801218a:	bdb0      	pop	{r4, r5, r7, pc}

0801218c <dwt_setrxtimeout>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
<<<<<<< HEAD
 8013050:	b5b0      	push	{r4, r5, r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	0002      	movs	r2, r0
 8013058:	1dbb      	adds	r3, r7, #6
 801305a:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 801305c:	250f      	movs	r5, #15
 801305e:	197c      	adds	r4, r7, r5
 8013060:	2103      	movs	r1, #3
 8013062:	2004      	movs	r0, #4
 8013064:	f7ff fd14 	bl	8012a90 <dwt_read8bitoffsetreg>
 8013068:	0003      	movs	r3, r0
 801306a:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 801306c:	1dbb      	adds	r3, r7, #6
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d01e      	beq.n	80130b2 <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8013074:	1dbb      	adds	r3, r7, #6
 8013076:	881b      	ldrh	r3, [r3, #0]
 8013078:	001a      	movs	r2, r3
 801307a:	2100      	movs	r1, #0
 801307c:	200c      	movs	r0, #12
 801307e:	f7ff fd2e 	bl	8012ade <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8013082:	0028      	movs	r0, r5
 8013084:	183b      	adds	r3, r7, r0
 8013086:	183a      	adds	r2, r7, r0
 8013088:	7812      	ldrb	r2, [r2, #0]
 801308a:	2110      	movs	r1, #16
 801308c:	430a      	orrs	r2, r1
 801308e:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8013090:	4b15      	ldr	r3, [pc, #84]	@ (80130e8 <dwt_setrxtimeout+0x98>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	691a      	ldr	r2, [r3, #16]
 8013096:	4b14      	ldr	r3, [pc, #80]	@ (80130e8 <dwt_setrxtimeout+0x98>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2180      	movs	r1, #128	@ 0x80
 801309c:	0549      	lsls	r1, r1, #21
 801309e:	430a      	orrs	r2, r1
 80130a0:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80130a2:	183b      	adds	r3, r7, r0
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	001a      	movs	r2, r3
 80130a8:	2103      	movs	r1, #3
 80130aa:	2004      	movs	r0, #4
 80130ac:	f7ff fd04 	bl	8012ab8 <dwt_write8bitoffsetreg>
=======
 801218c:	b5b0      	push	{r4, r5, r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	0002      	movs	r2, r0
 8012194:	1dbb      	adds	r3, r7, #6
 8012196:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8012198:	250f      	movs	r5, #15
 801219a:	197c      	adds	r4, r7, r5
 801219c:	2103      	movs	r1, #3
 801219e:	2004      	movs	r0, #4
 80121a0:	f7ff fd14 	bl	8011bcc <dwt_read8bitoffsetreg>
 80121a4:	0003      	movs	r3, r0
 80121a6:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 80121a8:	1dbb      	adds	r3, r7, #6
 80121aa:	881b      	ldrh	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d01e      	beq.n	80121ee <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80121b0:	1dbb      	adds	r3, r7, #6
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	001a      	movs	r2, r3
 80121b6:	2100      	movs	r1, #0
 80121b8:	200c      	movs	r0, #12
 80121ba:	f7ff fd2e 	bl	8011c1a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80121be:	0028      	movs	r0, r5
 80121c0:	183b      	adds	r3, r7, r0
 80121c2:	183a      	adds	r2, r7, r0
 80121c4:	7812      	ldrb	r2, [r2, #0]
 80121c6:	2110      	movs	r1, #16
 80121c8:	430a      	orrs	r2, r1
 80121ca:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80121cc:	4b15      	ldr	r3, [pc, #84]	@ (8012224 <dwt_setrxtimeout+0x98>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	691a      	ldr	r2, [r3, #16]
 80121d2:	4b14      	ldr	r3, [pc, #80]	@ (8012224 <dwt_setrxtimeout+0x98>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2180      	movs	r1, #128	@ 0x80
 80121d8:	0549      	lsls	r1, r1, #21
 80121da:	430a      	orrs	r2, r1
 80121dc:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80121de:	183b      	adds	r3, r7, r0
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	001a      	movs	r2, r3
 80121e4:	2103      	movs	r1, #3
 80121e6:	2004      	movs	r0, #4
 80121e8:	f7ff fd04 	bl	8011bf4 <dwt_write8bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
<<<<<<< HEAD
 80130b0:	e015      	b.n	80130de <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80130b2:	200f      	movs	r0, #15
 80130b4:	183b      	adds	r3, r7, r0
 80130b6:	183a      	adds	r2, r7, r0
 80130b8:	7812      	ldrb	r2, [r2, #0]
 80130ba:	2110      	movs	r1, #16
 80130bc:	438a      	bics	r2, r1
 80130be:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80130c0:	4b09      	ldr	r3, [pc, #36]	@ (80130e8 <dwt_setrxtimeout+0x98>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	691a      	ldr	r2, [r3, #16]
 80130c6:	4b08      	ldr	r3, [pc, #32]	@ (80130e8 <dwt_setrxtimeout+0x98>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4908      	ldr	r1, [pc, #32]	@ (80130ec <dwt_setrxtimeout+0x9c>)
 80130cc:	400a      	ands	r2, r1
 80130ce:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80130d0:	183b      	adds	r3, r7, r0
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	001a      	movs	r2, r3
 80130d6:	2103      	movs	r1, #3
 80130d8:	2004      	movs	r0, #4
 80130da:	f7ff fced 	bl	8012ab8 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 80130de:	46c0      	nop			@ (mov r8, r8)
 80130e0:	46bd      	mov	sp, r7
 80130e2:	b004      	add	sp, #16
 80130e4:	bdb0      	pop	{r4, r5, r7, pc}
 80130e6:	46c0      	nop			@ (mov r8, r8)
 80130e8:	200001fc 	.word	0x200001fc
 80130ec:	efffffff 	.word	0xefffffff

080130f0 <dwt_rxreset>:
=======
 80121ec:	e015      	b.n	801221a <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80121ee:	200f      	movs	r0, #15
 80121f0:	183b      	adds	r3, r7, r0
 80121f2:	183a      	adds	r2, r7, r0
 80121f4:	7812      	ldrb	r2, [r2, #0]
 80121f6:	2110      	movs	r1, #16
 80121f8:	438a      	bics	r2, r1
 80121fa:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80121fc:	4b09      	ldr	r3, [pc, #36]	@ (8012224 <dwt_setrxtimeout+0x98>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	691a      	ldr	r2, [r3, #16]
 8012202:	4b08      	ldr	r3, [pc, #32]	@ (8012224 <dwt_setrxtimeout+0x98>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4908      	ldr	r1, [pc, #32]	@ (8012228 <dwt_setrxtimeout+0x9c>)
 8012208:	400a      	ands	r2, r1
 801220a:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 801220c:	183b      	adds	r3, r7, r0
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	001a      	movs	r2, r3
 8012212:	2103      	movs	r1, #3
 8012214:	2004      	movs	r0, #4
 8012216:	f7ff fced 	bl	8011bf4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 801221a:	46c0      	nop			@ (mov r8, r8)
 801221c:	46bd      	mov	sp, r7
 801221e:	b004      	add	sp, #16
 8012220:	bdb0      	pop	{r4, r5, r7, pc}
 8012222:	46c0      	nop			@ (mov r8, r8)
 8012224:	20000204 	.word	0x20000204
 8012228:	efffffff 	.word	0xefffffff

0801222c <dwt_rxreset>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
<<<<<<< HEAD
 80130f0:	b580      	push	{r7, lr}
 80130f2:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80130f4:	22e0      	movs	r2, #224	@ 0xe0
 80130f6:	2103      	movs	r1, #3
 80130f8:	2036      	movs	r0, #54	@ 0x36
 80130fa:	f7ff fcdd 	bl	8012ab8 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80130fe:	22f0      	movs	r2, #240	@ 0xf0
 8013100:	2103      	movs	r1, #3
 8013102:	2036      	movs	r0, #54	@ 0x36
 8013104:	f7ff fcd8 	bl	8012ab8 <dwt_write8bitoffsetreg>
}
 8013108:	46c0      	nop			@ (mov r8, r8)
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
	...

08013110 <dwt_softreset>:
=======
 801222c:	b580      	push	{r7, lr}
 801222e:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8012230:	22e0      	movs	r2, #224	@ 0xe0
 8012232:	2103      	movs	r1, #3
 8012234:	2036      	movs	r0, #54	@ 0x36
 8012236:	f7ff fcdd 	bl	8011bf4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 801223a:	22f0      	movs	r2, #240	@ 0xf0
 801223c:	2103      	movs	r1, #3
 801223e:	2036      	movs	r0, #54	@ 0x36
 8012240:	f7ff fcd8 	bl	8011bf4 <dwt_write8bitoffsetreg>
}
 8012244:	46c0      	nop			@ (mov r8, r8)
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
	...

0801224c <dwt_softreset>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
<<<<<<< HEAD
 8013110:	b580      	push	{r7, lr}
 8013112:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8013114:	f7ff fe88 	bl	8012e28 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8013118:	2200      	movs	r2, #0
 801311a:	2100      	movs	r1, #0
 801311c:	202c      	movs	r0, #44	@ 0x2c
 801311e:	f7ff fcde 	bl	8012ade <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8013122:	2200      	movs	r2, #0
 8013124:	2106      	movs	r1, #6
 8013126:	202c      	movs	r0, #44	@ 0x2c
 8013128:	f7ff fcc6 	bl	8012ab8 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 801312c:	f7ff fd40 	bl	8012bb0 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8013130:	2200      	movs	r2, #0
 8013132:	2103      	movs	r1, #3
 8013134:	2036      	movs	r0, #54	@ 0x36
 8013136:	f7ff fcbf 	bl	8012ab8 <dwt_write8bitoffsetreg>
=======
 801224c:	b580      	push	{r7, lr}
 801224e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8012250:	f7ff fe88 	bl	8011f64 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8012254:	2200      	movs	r2, #0
 8012256:	2100      	movs	r1, #0
 8012258:	202c      	movs	r0, #44	@ 0x2c
 801225a:	f7ff fcde 	bl	8011c1a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 801225e:	2200      	movs	r2, #0
 8012260:	2106      	movs	r1, #6
 8012262:	202c      	movs	r0, #44	@ 0x2c
 8012264:	f7ff fcc6 	bl	8011bf4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8012268:	f7ff fd40 	bl	8011cec <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 801226c:	2200      	movs	r2, #0
 801226e:	2103      	movs	r1, #3
 8012270:	2036      	movs	r0, #54	@ 0x36
 8012272:	f7ff fcbf 	bl	8011bf4 <dwt_write8bitoffsetreg>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
<<<<<<< HEAD
 801313a:	2001      	movs	r0, #1
 801313c:	f000 f849 	bl	80131d2 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8013140:	22f0      	movs	r2, #240	@ 0xf0
 8013142:	2103      	movs	r1, #3
 8013144:	2036      	movs	r0, #54	@ 0x36
 8013146:	f7ff fcb7 	bl	8012ab8 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 801314a:	4b03      	ldr	r3, [pc, #12]	@ (8013158 <dwt_softreset+0x48>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2200      	movs	r2, #0
 8013150:	755a      	strb	r2, [r3, #21]
}
 8013152:	46c0      	nop			@ (mov r8, r8)
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	200001fc 	.word	0x200001fc

0801315c <dwt_setxtaltrim>:
=======
 8012276:	2001      	movs	r0, #1
 8012278:	f000 f849 	bl	801230e <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 801227c:	22f0      	movs	r2, #240	@ 0xf0
 801227e:	2103      	movs	r1, #3
 8012280:	2036      	movs	r0, #54	@ 0x36
 8012282:	f7ff fcb7 	bl	8011bf4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8012286:	4b03      	ldr	r3, [pc, #12]	@ (8012294 <dwt_softreset+0x48>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2200      	movs	r2, #0
 801228c:	755a      	strb	r2, [r3, #21]
}
 801228e:	46c0      	nop			@ (mov r8, r8)
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	20000204 	.word	0x20000204

08012298 <dwt_setxtaltrim>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
<<<<<<< HEAD
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	0002      	movs	r2, r0
 8013164:	1dfb      	adds	r3, r7, #7
 8013166:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8013168:	1dfb      	adds	r3, r7, #7
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	b25b      	sxtb	r3, r3
 801316e:	221f      	movs	r2, #31
 8013170:	4013      	ands	r3, r2
 8013172:	b25b      	sxtb	r3, r3
 8013174:	2260      	movs	r2, #96	@ 0x60
 8013176:	4313      	orrs	r3, r2
 8013178:	b25a      	sxtb	r2, r3
 801317a:	210f      	movs	r1, #15
 801317c:	187b      	adds	r3, r7, r1
 801317e:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8013180:	187b      	adds	r3, r7, r1
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	001a      	movs	r2, r3
 8013186:	210e      	movs	r1, #14
 8013188:	202b      	movs	r0, #43	@ 0x2b
 801318a:	f7ff fc95 	bl	8012ab8 <dwt_write8bitoffsetreg>
}
 801318e:	46c0      	nop			@ (mov r8, r8)
 8013190:	46bd      	mov	sp, r7
 8013192:	b004      	add	sp, #16
 8013194:	bd80      	pop	{r7, pc}

08013196 <decamutexon>:
=======
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	0002      	movs	r2, r0
 80122a0:	1dfb      	adds	r3, r7, #7
 80122a2:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 80122a4:	1dfb      	adds	r3, r7, #7
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	b25b      	sxtb	r3, r3
 80122aa:	221f      	movs	r2, #31
 80122ac:	4013      	ands	r3, r2
 80122ae:	b25b      	sxtb	r3, r3
 80122b0:	2260      	movs	r2, #96	@ 0x60
 80122b2:	4313      	orrs	r3, r2
 80122b4:	b25a      	sxtb	r2, r3
 80122b6:	210f      	movs	r1, #15
 80122b8:	187b      	adds	r3, r7, r1
 80122ba:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 80122bc:	187b      	adds	r3, r7, r1
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	001a      	movs	r2, r3
 80122c2:	210e      	movs	r1, #14
 80122c4:	202b      	movs	r0, #43	@ 0x2b
 80122c6:	f7ff fc95 	bl	8011bf4 <dwt_write8bitoffsetreg>
}
 80122ca:	46c0      	nop			@ (mov r8, r8)
 80122cc:	46bd      	mov	sp, r7
 80122ce:	b004      	add	sp, #16
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <decamutexon>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
<<<<<<< HEAD
 8013196:	b580      	push	{r7, lr}
 8013198:	b082      	sub	sp, #8
 801319a:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 801319c:	f000 f9e2 	bl	8013564 <port_GetEXT_IRQStatus>
 80131a0:	0003      	movs	r3, r0
 80131a2:	607b      	str	r3, [r7, #4]

	if(s) {
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d001      	beq.n	80131ae <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80131aa:	f000 f9cb 	bl	8013544 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80131ae:	687b      	ldr	r3, [r7, #4]
}
 80131b0:	0018      	movs	r0, r3
 80131b2:	46bd      	mov	sp, r7
 80131b4:	b002      	add	sp, #8
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <decamutexoff>:
=======
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b082      	sub	sp, #8
 80122d6:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80122d8:	f000 f9e2 	bl	80126a0 <port_GetEXT_IRQStatus>
 80122dc:	0003      	movs	r3, r0
 80122de:	607b      	str	r3, [r7, #4]

	if(s) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d001      	beq.n	80122ea <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80122e6:	f000 f9cb 	bl	8012680 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80122ea:	687b      	ldr	r3, [r7, #4]
}
 80122ec:	0018      	movs	r0, r3
 80122ee:	46bd      	mov	sp, r7
 80122f0:	b002      	add	sp, #8
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <decamutexoff>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
<<<<<<< HEAD
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d001      	beq.n	80131ca <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80131c6:	f000 f9c5 	bl	8013554 <port_EnableEXT_IRQ>
	}
}
 80131ca:	46c0      	nop			@ (mov r8, r8)
 80131cc:	46bd      	mov	sp, r7
 80131ce:	b002      	add	sp, #8
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <deca_sleep>:
=======
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d001      	beq.n	8012306 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8012302:	f000 f9c5 	bl	8012690 <port_EnableEXT_IRQ>
	}
}
 8012306:	46c0      	nop			@ (mov r8, r8)
 8012308:	46bd      	mov	sp, r7
 801230a:	b002      	add	sp, #8
 801230c:	bd80      	pop	{r7, pc}

0801230e <deca_sleep>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
<<<<<<< HEAD
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b082      	sub	sp, #8
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	0018      	movs	r0, r3
 80131de:	f000 f8e2 	bl	80133a6 <Sleep>
}
 80131e2:	46c0      	nop			@ (mov r8, r8)
 80131e4:	46bd      	mov	sp, r7
 80131e6:	b002      	add	sp, #8
 80131e8:	bd80      	pop	{r7, pc}
	...

080131ec <writetospi>:
=======
 801230e:	b580      	push	{r7, lr}
 8012310:	b082      	sub	sp, #8
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	0018      	movs	r0, r3
 801231a:	f000 f8e2 	bl	80124e2 <Sleep>
}
 801231e:	46c0      	nop			@ (mov r8, r8)
 8012320:	46bd      	mov	sp, r7
 8012322:	b002      	add	sp, #8
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <writetospi>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
<<<<<<< HEAD
 80131ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ee:	46d6      	mov	lr, sl
 80131f0:	4646      	mov	r6, r8
 80131f2:	464f      	mov	r7, r9
 80131f4:	b5c0      	push	{r6, r7, lr}
 80131f6:	4682      	mov	sl, r0
 80131f8:	4689      	mov	r9, r1
 80131fa:	0015      	movs	r5, r2
 80131fc:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80131fe:	f7ff ffca 	bl	8013196 <decamutexon>
 8013202:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8013204:	4c14      	ldr	r4, [pc, #80]	@ (8013258 <writetospi+0x6c>)
 8013206:	0020      	movs	r0, r4
 8013208:	f7f5 fc84 	bl	8008b14 <HAL_SPI_GetState>
 801320c:	2801      	cmp	r0, #1
 801320e:	d1fa      	bne.n	8013206 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8013210:	308f      	adds	r0, #143	@ 0x8f
 8013212:	2200      	movs	r2, #0
 8013214:	2110      	movs	r1, #16
 8013216:	05c0      	lsls	r0, r0, #23
 8013218:	f7f2 f9ab 	bl	8005572 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 801321c:	2301      	movs	r3, #1
 801321e:	4652      	mov	r2, sl
 8013220:	4649      	mov	r1, r9
 8013222:	0020      	movs	r0, r4
 8013224:	425b      	negs	r3, r3
 8013226:	f7f4 fec7 	bl	8007fb8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 801322a:	2301      	movs	r3, #1
 801322c:	4641      	mov	r1, r8
 801322e:	b2aa      	uxth	r2, r5
 8013230:	425b      	negs	r3, r3
 8013232:	0020      	movs	r0, r4
 8013234:	f7f4 fec0 	bl	8007fb8 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8013238:	2090      	movs	r0, #144	@ 0x90
 801323a:	2201      	movs	r2, #1
 801323c:	2110      	movs	r1, #16
 801323e:	05c0      	lsls	r0, r0, #23
 8013240:	f7f2 f997 	bl	8005572 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8013244:	0030      	movs	r0, r6
 8013246:	f7ff ffb7 	bl	80131b8 <decamutexoff>

    return 0;
} // end writetospi()
 801324a:	2000      	movs	r0, #0
 801324c:	bce0      	pop	{r5, r6, r7}
 801324e:	46ba      	mov	sl, r7
 8013250:	46b1      	mov	r9, r6
 8013252:	46a8      	mov	r8, r5
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013256:	46c0      	nop			@ (mov r8, r8)
 8013258:	20000568 	.word	0x20000568

0801325c <readfromspi>:
=======
 8012328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801232a:	46d6      	mov	lr, sl
 801232c:	4646      	mov	r6, r8
 801232e:	464f      	mov	r7, r9
 8012330:	b5c0      	push	{r6, r7, lr}
 8012332:	4682      	mov	sl, r0
 8012334:	4689      	mov	r9, r1
 8012336:	0015      	movs	r5, r2
 8012338:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 801233a:	f7ff ffca 	bl	80122d2 <decamutexon>
 801233e:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8012340:	4c14      	ldr	r4, [pc, #80]	@ (8012394 <writetospi+0x6c>)
 8012342:	0020      	movs	r0, r4
 8012344:	f7f5 fc82 	bl	8007c4c <HAL_SPI_GetState>
 8012348:	2801      	cmp	r0, #1
 801234a:	d1fa      	bne.n	8012342 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 801234c:	308f      	adds	r0, #143	@ 0x8f
 801234e:	2200      	movs	r2, #0
 8012350:	2110      	movs	r1, #16
 8012352:	05c0      	lsls	r0, r0, #23
 8012354:	f7f2 f9a9 	bl	80046aa <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8012358:	2301      	movs	r3, #1
 801235a:	4652      	mov	r2, sl
 801235c:	4649      	mov	r1, r9
 801235e:	0020      	movs	r0, r4
 8012360:	425b      	negs	r3, r3
 8012362:	f7f4 fec5 	bl	80070f0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8012366:	2301      	movs	r3, #1
 8012368:	4641      	mov	r1, r8
 801236a:	b2aa      	uxth	r2, r5
 801236c:	425b      	negs	r3, r3
 801236e:	0020      	movs	r0, r4
 8012370:	f7f4 febe 	bl	80070f0 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8012374:	2090      	movs	r0, #144	@ 0x90
 8012376:	2201      	movs	r2, #1
 8012378:	2110      	movs	r1, #16
 801237a:	05c0      	lsls	r0, r0, #23
 801237c:	f7f2 f995 	bl	80046aa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8012380:	0030      	movs	r0, r6
 8012382:	f7ff ffb7 	bl	80122f4 <decamutexoff>

    return 0;
} // end writetospi()
 8012386:	2000      	movs	r0, #0
 8012388:	bce0      	pop	{r5, r6, r7}
 801238a:	46ba      	mov	sl, r7
 801238c:	46b1      	mov	r9, r6
 801238e:	46a8      	mov	r8, r5
 8012390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012392:	46c0      	nop			@ (mov r8, r8)
 8012394:	2000042c 	.word	0x2000042c

08012398 <readfromspi>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
<<<<<<< HEAD
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	46de      	mov	lr, fp
 8013260:	4656      	mov	r6, sl
 8013262:	464d      	mov	r5, r9
 8013264:	4644      	mov	r4, r8
 8013266:	b570      	push	{r4, r5, r6, lr}
 8013268:	4688      	mov	r8, r1
 801326a:	0006      	movs	r6, r0
 801326c:	4691      	mov	r9, r2
 801326e:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8013270:	f7ff ff91 	bl	8013196 <decamutexon>
 8013274:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8013276:	4d18      	ldr	r5, [pc, #96]	@ (80132d8 <readfromspi+0x7c>)
 8013278:	0028      	movs	r0, r5
 801327a:	f7f5 fc4b 	bl	8008b14 <HAL_SPI_GetState>
 801327e:	2801      	cmp	r0, #1
 8013280:	d1fa      	bne.n	8013278 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8013282:	308f      	adds	r0, #143	@ 0x8f
 8013284:	2200      	movs	r2, #0
 8013286:	2110      	movs	r1, #16
 8013288:	05c0      	lsls	r0, r0, #23
 801328a:	f7f2 f972 	bl	8005572 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 801328e:	2e00      	cmp	r6, #0
 8013290:	d00b      	beq.n	80132aa <readfromspi+0x4e>
 8013292:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8013294:	4642      	mov	r2, r8
 8013296:	2301      	movs	r3, #1
 8013298:	1911      	adds	r1, r2, r4
 801329a:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 801329c:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 801329e:	2201      	movs	r2, #1
 80132a0:	425b      	negs	r3, r3
 80132a2:	f7f4 fe89 	bl	8007fb8 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80132a6:	42b4      	cmp	r4, r6
 80132a8:	dbf4      	blt.n	8013294 <readfromspi+0x38>
=======
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	46de      	mov	lr, fp
 801239c:	4656      	mov	r6, sl
 801239e:	464d      	mov	r5, r9
 80123a0:	4644      	mov	r4, r8
 80123a2:	b570      	push	{r4, r5, r6, lr}
 80123a4:	4688      	mov	r8, r1
 80123a6:	0006      	movs	r6, r0
 80123a8:	4691      	mov	r9, r2
 80123aa:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80123ac:	f7ff ff91 	bl	80122d2 <decamutexon>
 80123b0:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80123b2:	4d18      	ldr	r5, [pc, #96]	@ (8012414 <readfromspi+0x7c>)
 80123b4:	0028      	movs	r0, r5
 80123b6:	f7f5 fc49 	bl	8007c4c <HAL_SPI_GetState>
 80123ba:	2801      	cmp	r0, #1
 80123bc:	d1fa      	bne.n	80123b4 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80123be:	308f      	adds	r0, #143	@ 0x8f
 80123c0:	2200      	movs	r2, #0
 80123c2:	2110      	movs	r1, #16
 80123c4:	05c0      	lsls	r0, r0, #23
 80123c6:	f7f2 f970 	bl	80046aa <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80123ca:	2e00      	cmp	r6, #0
 80123cc:	d00b      	beq.n	80123e6 <readfromspi+0x4e>
 80123ce:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80123d0:	4642      	mov	r2, r8
 80123d2:	2301      	movs	r3, #1
 80123d4:	1911      	adds	r1, r2, r4
 80123d6:	0028      	movs	r0, r5
 80123d8:	2201      	movs	r2, #1
 80123da:	425b      	negs	r3, r3
    for(i=0; i<headerLength; i++)
 80123dc:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80123de:	f7f4 fe87 	bl	80070f0 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80123e2:	42b4      	cmp	r4, r6
 80123e4:	dbf4      	blt.n	80123d0 <readfromspi+0x38>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
<<<<<<< HEAD
 80132aa:	464b      	mov	r3, r9
 80132ac:	4659      	mov	r1, fp
 80132ae:	0028      	movs	r0, r5
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	2364      	movs	r3, #100	@ 0x64
 80132b4:	f7f4 ffe0 	bl	8008278 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80132b8:	2090      	movs	r0, #144	@ 0x90
 80132ba:	2201      	movs	r2, #1
 80132bc:	2110      	movs	r1, #16
 80132be:	05c0      	lsls	r0, r0, #23
 80132c0:	f7f2 f957 	bl	8005572 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80132c4:	4650      	mov	r0, sl
 80132c6:	f7ff ff77 	bl	80131b8 <decamutexoff>

    return 0;
} // end readfromspi()
 80132ca:	2000      	movs	r0, #0
 80132cc:	bc78      	pop	{r3, r4, r5, r6}
 80132ce:	46b3      	mov	fp, r6
 80132d0:	46aa      	mov	sl, r5
 80132d2:	46a1      	mov	r9, r4
 80132d4:	4698      	mov	r8, r3
 80132d6:	bd70      	pop	{r4, r5, r6, pc}
 80132d8:	20000568 	.word	0x20000568

080132dc <__NVIC_EnableIRQ>:
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	0002      	movs	r2, r0
 80132e4:	1dfb      	adds	r3, r7, #7
 80132e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80132e8:	1dfb      	adds	r3, r7, #7
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80132ee:	d809      	bhi.n	8013304 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80132f0:	1dfb      	adds	r3, r7, #7
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	001a      	movs	r2, r3
 80132f6:	231f      	movs	r3, #31
 80132f8:	401a      	ands	r2, r3
 80132fa:	4b04      	ldr	r3, [pc, #16]	@ (801330c <__NVIC_EnableIRQ+0x30>)
 80132fc:	2101      	movs	r1, #1
 80132fe:	4091      	lsls	r1, r2
 8013300:	000a      	movs	r2, r1
 8013302:	601a      	str	r2, [r3, #0]
}
 8013304:	46c0      	nop			@ (mov r8, r8)
 8013306:	46bd      	mov	sp, r7
 8013308:	b002      	add	sp, #8
 801330a:	bd80      	pop	{r7, pc}
 801330c:	e000e100 	.word	0xe000e100

08013310 <__NVIC_DisableIRQ>:
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	0002      	movs	r2, r0
 8013318:	1dfb      	adds	r3, r7, #7
 801331a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801331c:	1dfb      	adds	r3, r7, #7
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b7f      	cmp	r3, #127	@ 0x7f
 8013322:	d810      	bhi.n	8013346 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013324:	1dfb      	adds	r3, r7, #7
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	001a      	movs	r2, r3
 801332a:	231f      	movs	r3, #31
 801332c:	4013      	ands	r3, r2
 801332e:	4908      	ldr	r1, [pc, #32]	@ (8013350 <__NVIC_DisableIRQ+0x40>)
 8013330:	2201      	movs	r2, #1
 8013332:	409a      	lsls	r2, r3
 8013334:	0013      	movs	r3, r2
 8013336:	2280      	movs	r2, #128	@ 0x80
 8013338:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 801333a:	f3bf 8f4f 	dsb	sy
}
 801333e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8013340:	f3bf 8f6f 	isb	sy
}
 8013344:	46c0      	nop			@ (mov r8, r8)
}
 8013346:	46c0      	nop			@ (mov r8, r8)
 8013348:	46bd      	mov	sp, r7
 801334a:	b002      	add	sp, #8
 801334c:	bd80      	pop	{r7, pc}
 801334e:	46c0      	nop			@ (mov r8, r8)
 8013350:	e000e100 	.word	0xe000e100

08013354 <usleep>:
=======
 80123e6:	464b      	mov	r3, r9
 80123e8:	4659      	mov	r1, fp
 80123ea:	0028      	movs	r0, r5
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	2364      	movs	r3, #100	@ 0x64
 80123f0:	f7f4 ffde 	bl	80073b0 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80123f4:	2090      	movs	r0, #144	@ 0x90
 80123f6:	2201      	movs	r2, #1
 80123f8:	2110      	movs	r1, #16
 80123fa:	05c0      	lsls	r0, r0, #23
 80123fc:	f7f2 f955 	bl	80046aa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8012400:	4650      	mov	r0, sl
 8012402:	f7ff ff77 	bl	80122f4 <decamutexoff>

    return 0;
} // end readfromspi()
 8012406:	2000      	movs	r0, #0
 8012408:	bc78      	pop	{r3, r4, r5, r6}
 801240a:	46b3      	mov	fp, r6
 801240c:	46aa      	mov	sl, r5
 801240e:	46a1      	mov	r9, r4
 8012410:	4698      	mov	r8, r3
 8012412:	bd70      	pop	{r4, r5, r6, pc}
 8012414:	2000042c 	.word	0x2000042c

08012418 <__NVIC_EnableIRQ>:
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	0002      	movs	r2, r0
 8012420:	1dfb      	adds	r3, r7, #7
 8012422:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012424:	1dfb      	adds	r3, r7, #7
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	2b7f      	cmp	r3, #127	@ 0x7f
 801242a:	d809      	bhi.n	8012440 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801242c:	1dfb      	adds	r3, r7, #7
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	001a      	movs	r2, r3
 8012432:	231f      	movs	r3, #31
 8012434:	401a      	ands	r2, r3
 8012436:	4b04      	ldr	r3, [pc, #16]	@ (8012448 <__NVIC_EnableIRQ+0x30>)
 8012438:	2101      	movs	r1, #1
 801243a:	4091      	lsls	r1, r2
 801243c:	000a      	movs	r2, r1
 801243e:	601a      	str	r2, [r3, #0]
}
 8012440:	46c0      	nop			@ (mov r8, r8)
 8012442:	46bd      	mov	sp, r7
 8012444:	b002      	add	sp, #8
 8012446:	bd80      	pop	{r7, pc}
 8012448:	e000e100 	.word	0xe000e100

0801244c <__NVIC_DisableIRQ>:
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	0002      	movs	r2, r0
 8012454:	1dfb      	adds	r3, r7, #7
 8012456:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012458:	1dfb      	adds	r3, r7, #7
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	2b7f      	cmp	r3, #127	@ 0x7f
 801245e:	d810      	bhi.n	8012482 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012460:	1dfb      	adds	r3, r7, #7
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	001a      	movs	r2, r3
 8012466:	231f      	movs	r3, #31
 8012468:	4013      	ands	r3, r2
 801246a:	4908      	ldr	r1, [pc, #32]	@ (801248c <__NVIC_DisableIRQ+0x40>)
 801246c:	2201      	movs	r2, #1
 801246e:	409a      	lsls	r2, r3
 8012470:	0013      	movs	r3, r2
 8012472:	2280      	movs	r2, #128	@ 0x80
 8012474:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012476:	f3bf 8f4f 	dsb	sy
}
 801247a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801247c:	f3bf 8f6f 	isb	sy
}
 8012480:	46c0      	nop			@ (mov r8, r8)
}
 8012482:	46c0      	nop			@ (mov r8, r8)
 8012484:	46bd      	mov	sp, r7
 8012486:	b002      	add	sp, #8
 8012488:	bd80      	pop	{r7, pc}
 801248a:	46c0      	nop			@ (mov r8, r8)
 801248c:	e000e100 	.word	0xe000e100

08012490 <usleep>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
<<<<<<< HEAD
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 801335c:	2300      	movs	r3, #0
 801335e:	60fb      	str	r3, [r7, #12]
 8013360:	e014      	b.n	801338c <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8013362:	2300      	movs	r3, #0
 8013364:	60bb      	str	r3, [r7, #8]
 8013366:	e004      	b.n	8013372 <usleep+0x1e>
        {
            __NOP();
 8013368:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 801336a:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	3301      	adds	r3, #1
 8013370:	60bb      	str	r3, [r7, #8]
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	2201      	movs	r2, #1
 8013376:	0fd8      	lsrs	r0, r3, #31
 8013378:	17d1      	asrs	r1, r2, #31
 801337a:	429a      	cmp	r2, r3
 801337c:	4148      	adcs	r0, r1
 801337e:	0003      	movs	r3, r0
 8013380:	b2db      	uxtb	r3, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	d1f0      	bne.n	8013368 <usleep+0x14>
    for(i=0;i<usec;i++)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3301      	adds	r3, #1
 801338a:	60fb      	str	r3, [r7, #12]
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	429a      	cmp	r2, r3
 8013392:	419b      	sbcs	r3, r3
 8013394:	425b      	negs	r3, r3
 8013396:	b2db      	uxtb	r3, r3
 8013398:	2b00      	cmp	r3, #0
 801339a:	d1e2      	bne.n	8013362 <usleep+0xe>
        }
    }
    return 0;
 801339c:	2300      	movs	r3, #0
}
 801339e:	0018      	movs	r0, r3
 80133a0:	46bd      	mov	sp, r7
 80133a2:	b004      	add	sp, #16
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <Sleep>:
=======
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8012498:	2300      	movs	r3, #0
 801249a:	60fb      	str	r3, [r7, #12]
 801249c:	e014      	b.n	80124c8 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 801249e:	2300      	movs	r3, #0
 80124a0:	60bb      	str	r3, [r7, #8]
 80124a2:	e004      	b.n	80124ae <usleep+0x1e>
        {
            __NOP();
 80124a4:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 80124a6:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	3301      	adds	r3, #1
 80124ac:	60bb      	str	r3, [r7, #8]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2201      	movs	r2, #1
 80124b2:	0fd8      	lsrs	r0, r3, #31
 80124b4:	17d1      	asrs	r1, r2, #31
 80124b6:	429a      	cmp	r2, r3
 80124b8:	4148      	adcs	r0, r1
 80124ba:	0003      	movs	r3, r0
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1f0      	bne.n	80124a4 <usleep+0x14>
    for(i=0;i<usec;i++)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	3301      	adds	r3, #1
 80124c6:	60fb      	str	r3, [r7, #12]
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	429a      	cmp	r2, r3
 80124ce:	419b      	sbcs	r3, r3
 80124d0:	425b      	negs	r3, r3
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d1e2      	bne.n	801249e <usleep+0xe>
        }
    }
    return 0;
 80124d8:	2300      	movs	r3, #0
}
 80124da:	0018      	movs	r0, r3
 80124dc:	46bd      	mov	sp, r7
 80124de:	b004      	add	sp, #16
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <Sleep>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
<<<<<<< HEAD
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b082      	sub	sp, #8
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	0018      	movs	r0, r3
 80133b2:	f7f1 f829 	bl	8004408 <HAL_Delay>
}
 80133b6:	46c0      	nop			@ (mov r8, r8)
 80133b8:	46bd      	mov	sp, r7
 80133ba:	b002      	add	sp, #8
 80133bc:	bd80      	pop	{r7, pc}
	...

080133c0 <EXTI_GetITEnStatus>:
=======
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b082      	sub	sp, #8
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	0018      	movs	r0, r3
 80124ee:	f7f1 f9a3 	bl	8003838 <HAL_Delay>
}
 80124f2:	46c0      	nop			@ (mov r8, r8)
 80124f4:	46bd      	mov	sp, r7
 80124f6:	b002      	add	sp, #8
 80124f8:	bd80      	pop	{r7, pc}
	...

080124fc <EXTI_GetITEnStatus>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
<<<<<<< HEAD
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80133c8:	4a09      	ldr	r2, [pc, #36]	@ (80133f0 <EXTI_GetITEnStatus+0x30>)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	095b      	lsrs	r3, r3, #5
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	211f      	movs	r1, #31
 80133d6:	400b      	ands	r3, r1
 80133d8:	40da      	lsrs	r2, r3
 80133da:	0013      	movs	r3, r2
 80133dc:	2201      	movs	r2, #1
 80133de:	4013      	ands	r3, r2
 80133e0:	1e5a      	subs	r2, r3, #1
 80133e2:	4193      	sbcs	r3, r2
 80133e4:	b2db      	uxtb	r3, r3
}
 80133e6:	0018      	movs	r0, r3
 80133e8:	46bd      	mov	sp, r7
 80133ea:	b002      	add	sp, #8
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	46c0      	nop			@ (mov r8, r8)
 80133f0:	e000e100 	.word	0xe000e100

080133f4 <reset_DW1000>:
=======
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8012504:	4a09      	ldr	r2, [pc, #36]	@ (801252c <EXTI_GetITEnStatus+0x30>)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	095b      	lsrs	r3, r3, #5
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	211f      	movs	r1, #31
 8012512:	400b      	ands	r3, r1
 8012514:	40da      	lsrs	r2, r3
 8012516:	0013      	movs	r3, r2
 8012518:	2201      	movs	r2, #1
 801251a:	4013      	ands	r3, r2
 801251c:	1e5a      	subs	r2, r3, #1
 801251e:	4193      	sbcs	r3, r2
 8012520:	b2db      	uxtb	r3, r3
}
 8012522:	0018      	movs	r0, r3
 8012524:	46bd      	mov	sp, r7
 8012526:	b002      	add	sp, #8
 8012528:	bd80      	pop	{r7, pc}
 801252a:	46c0      	nop			@ (mov r8, r8)
 801252c:	e000e100 	.word	0xe000e100

08012530 <reset_DW1000>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
<<<<<<< HEAD
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b086      	sub	sp, #24
 80133f8:	af00      	add	r7, sp, #0
=======
 8012530:	b580      	push	{r7, lr}
 8012532:	b086      	sub	sp, #24
 8012534:	af00      	add	r7, sp, #0
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
<<<<<<< HEAD
 80133fa:	1d3b      	adds	r3, r7, #4
 80133fc:	2204      	movs	r2, #4
 80133fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013400:	1d3b      	adds	r3, r7, #4
 8013402:	2211      	movs	r2, #17
 8013404:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013406:	1d3b      	adds	r3, r7, #4
 8013408:	2200      	movs	r2, #0
 801340a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 801340c:	1d3a      	adds	r2, r7, #4
 801340e:	2390      	movs	r3, #144	@ 0x90
 8013410:	05db      	lsls	r3, r3, #23
 8013412:	0011      	movs	r1, r2
 8013414:	0018      	movs	r0, r3
 8013416:	f7f1 ff17 	bl	8005248 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 801341a:	2390      	movs	r3, #144	@ 0x90
 801341c:	05db      	lsls	r3, r3, #23
 801341e:	2200      	movs	r2, #0
 8013420:	2104      	movs	r1, #4
 8013422:	0018      	movs	r0, r3
 8013424:	f7f2 f8a5 	bl	8005572 <HAL_GPIO_WritePin>

    usleep(1);
 8013428:	2001      	movs	r0, #1
 801342a:	f7ff ff93 	bl	8013354 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 801342e:	2000      	movs	r0, #0
 8013430:	f000 f807 	bl	8013442 <setup_DW1000RSTnIRQ>
=======
 8012536:	1d3b      	adds	r3, r7, #4
 8012538:	2204      	movs	r2, #4
 801253a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801253c:	1d3b      	adds	r3, r7, #4
 801253e:	2211      	movs	r2, #17
 8012540:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012542:	1d3b      	adds	r3, r7, #4
 8012544:	2200      	movs	r2, #0
 8012546:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8012548:	1d3a      	adds	r2, r7, #4
 801254a:	2390      	movs	r3, #144	@ 0x90
 801254c:	05db      	lsls	r3, r3, #23
 801254e:	0011      	movs	r1, r2
 8012550:	0018      	movs	r0, r3
 8012552:	f7f1 ff15 	bl	8004380 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8012556:	2390      	movs	r3, #144	@ 0x90
 8012558:	05db      	lsls	r3, r3, #23
 801255a:	2200      	movs	r2, #0
 801255c:	2104      	movs	r1, #4
 801255e:	0018      	movs	r0, r3
 8012560:	f7f2 f8a3 	bl	80046aa <HAL_GPIO_WritePin>

    usleep(1);
 8012564:	2001      	movs	r0, #1
 8012566:	f7ff ff93 	bl	8012490 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 801256a:	2000      	movs	r0, #0
 801256c:	f000 f807 	bl	801257e <setup_DW1000RSTnIRQ>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4



    Sleep(2);
<<<<<<< HEAD
 8013434:	2002      	movs	r0, #2
 8013436:	f7ff ffb6 	bl	80133a6 <Sleep>
}
 801343a:	46c0      	nop			@ (mov r8, r8)
 801343c:	46bd      	mov	sp, r7
 801343e:	b006      	add	sp, #24
 8013440:	bd80      	pop	{r7, pc}

08013442 <setup_DW1000RSTnIRQ>:
=======
 8012570:	2002      	movs	r0, #2
 8012572:	f7ff ffb6 	bl	80124e2 <Sleep>
}
 8012576:	46c0      	nop			@ (mov r8, r8)
 8012578:	46bd      	mov	sp, r7
 801257a:	b006      	add	sp, #24
 801257c:	bd80      	pop	{r7, pc}

0801257e <setup_DW1000RSTnIRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
<<<<<<< HEAD
 8013442:	b580      	push	{r7, lr}
 8013444:	b088      	sub	sp, #32
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01a      	beq.n	8013486 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8013450:	210c      	movs	r1, #12
 8013452:	187b      	adds	r3, r7, r1
 8013454:	2204      	movs	r2, #4
 8013456:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013458:	187b      	adds	r3, r7, r1
 801345a:	2288      	movs	r2, #136	@ 0x88
 801345c:	0352      	lsls	r2, r2, #13
 801345e:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013460:	187b      	adds	r3, r7, r1
 8013462:	2200      	movs	r2, #0
 8013464:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8013466:	187a      	adds	r2, r7, r1
 8013468:	2390      	movs	r3, #144	@ 0x90
 801346a:	05db      	lsls	r3, r3, #23
 801346c:	0011      	movs	r1, r2
 801346e:	0018      	movs	r0, r3
 8013470:	f7f1 feea 	bl	8005248 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 8013474:	2006      	movs	r0, #6
 8013476:	f7f1 fc98 	bl	8004daa <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 801347a:	2200      	movs	r2, #0
 801347c:	2105      	movs	r1, #5
 801347e:	2006      	movs	r0, #6
 8013480:	f7f1 fc7e 	bl	8004d80 <HAL_NVIC_SetPriority>
=======
 801257e:	b580      	push	{r7, lr}
 8012580:	b088      	sub	sp, #32
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d01a      	beq.n	80125c2 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 801258c:	210c      	movs	r1, #12
 801258e:	187b      	adds	r3, r7, r1
 8012590:	2204      	movs	r2, #4
 8012592:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012594:	187b      	adds	r3, r7, r1
 8012596:	2288      	movs	r2, #136	@ 0x88
 8012598:	0352      	lsls	r2, r2, #13
 801259a:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 801259c:	187b      	adds	r3, r7, r1
 801259e:	2200      	movs	r2, #0
 80125a0:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80125a2:	187a      	adds	r2, r7, r1
 80125a4:	2390      	movs	r3, #144	@ 0x90
 80125a6:	05db      	lsls	r3, r3, #23
 80125a8:	0011      	movs	r1, r2
 80125aa:	0018      	movs	r0, r3
 80125ac:	f7f1 fee8 	bl	8004380 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 80125b0:	2006      	movs	r0, #6
 80125b2:	f7f1 fc96 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80125b6:	2200      	movs	r2, #0
 80125b8:	2105      	movs	r1, #5
 80125ba:	2006      	movs	r0, #6
 80125bc:	f7f1 fc7c 	bl	8003eb8 <HAL_NVIC_SetPriority>
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
<<<<<<< HEAD
 8013484:	e01d      	b.n	80134c2 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 8013486:	2006      	movs	r0, #6
 8013488:	f7f1 fc9f 	bl	8004dca <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 801348c:	210c      	movs	r1, #12
 801348e:	187b      	adds	r3, r7, r1
 8013490:	2204      	movs	r2, #4
 8013492:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013494:	187b      	adds	r3, r7, r1
 8013496:	2211      	movs	r2, #17
 8013498:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 801349a:	187b      	adds	r3, r7, r1
 801349c:	2200      	movs	r2, #0
 801349e:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80134a0:	187b      	adds	r3, r7, r1
 80134a2:	2203      	movs	r2, #3
 80134a4:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80134a6:	187a      	adds	r2, r7, r1
 80134a8:	2390      	movs	r3, #144	@ 0x90
 80134aa:	05db      	lsls	r3, r3, #23
 80134ac:	0011      	movs	r1, r2
 80134ae:	0018      	movs	r0, r3
 80134b0:	f7f1 feca 	bl	8005248 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80134b4:	2390      	movs	r3, #144	@ 0x90
 80134b6:	05db      	lsls	r3, r3, #23
 80134b8:	2201      	movs	r2, #1
 80134ba:	2104      	movs	r1, #4
 80134bc:	0018      	movs	r0, r3
 80134be:	f7f2 f858 	bl	8005572 <HAL_GPIO_WritePin>
}
 80134c2:	46c0      	nop			@ (mov r8, r8)
 80134c4:	46bd      	mov	sp, r7
 80134c6:	b008      	add	sp, #32
 80134c8:	bd80      	pop	{r7, pc}
	...

080134cc <port_set_dw1000_slowrate>:
=======
 80125c0:	e01d      	b.n	80125fe <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 80125c2:	2006      	movs	r0, #6
 80125c4:	f7f1 fc9d 	bl	8003f02 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80125c8:	210c      	movs	r1, #12
 80125ca:	187b      	adds	r3, r7, r1
 80125cc:	2204      	movs	r2, #4
 80125ce:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80125d0:	187b      	adds	r3, r7, r1
 80125d2:	2211      	movs	r2, #17
 80125d4:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125d6:	187b      	adds	r3, r7, r1
 80125d8:	2200      	movs	r2, #0
 80125da:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80125dc:	187b      	adds	r3, r7, r1
 80125de:	2203      	movs	r2, #3
 80125e0:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80125e2:	187a      	adds	r2, r7, r1
 80125e4:	2390      	movs	r3, #144	@ 0x90
 80125e6:	05db      	lsls	r3, r3, #23
 80125e8:	0011      	movs	r1, r2
 80125ea:	0018      	movs	r0, r3
 80125ec:	f7f1 fec8 	bl	8004380 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80125f0:	2390      	movs	r3, #144	@ 0x90
 80125f2:	05db      	lsls	r3, r3, #23
 80125f4:	2201      	movs	r2, #1
 80125f6:	2104      	movs	r1, #4
 80125f8:	0018      	movs	r0, r3
 80125fa:	f7f2 f856 	bl	80046aa <HAL_GPIO_WritePin>
}
 80125fe:	46c0      	nop			@ (mov r8, r8)
 8012600:	46bd      	mov	sp, r7
 8012602:	b008      	add	sp, #32
 8012604:	bd80      	pop	{r7, pc}
	...

08012608 <port_set_dw1000_slowrate>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
<<<<<<< HEAD
 80134cc:	b580      	push	{r7, lr}
 80134ce:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80134d0:	4b04      	ldr	r3, [pc, #16]	@ (80134e4 <port_set_dw1000_slowrate+0x18>)
 80134d2:	2218      	movs	r2, #24
 80134d4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80134d6:	4b03      	ldr	r3, [pc, #12]	@ (80134e4 <port_set_dw1000_slowrate+0x18>)
 80134d8:	0018      	movs	r0, r3
 80134da:	f7f4 fcb5 	bl	8007e48 <HAL_SPI_Init>
}
 80134de:	46c0      	nop			@ (mov r8, r8)
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	20000568 	.word	0x20000568

080134e8 <port_set_dw1000_fastrate>:
=======
 8012608:	b580      	push	{r7, lr}
 801260a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801260c:	4b04      	ldr	r3, [pc, #16]	@ (8012620 <port_set_dw1000_slowrate+0x18>)
 801260e:	2218      	movs	r2, #24
 8012610:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8012612:	4b03      	ldr	r3, [pc, #12]	@ (8012620 <port_set_dw1000_slowrate+0x18>)
 8012614:	0018      	movs	r0, r3
 8012616:	f7f4 fcb3 	bl	8006f80 <HAL_SPI_Init>
}
 801261a:	46c0      	nop			@ (mov r8, r8)
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	2000042c 	.word	0x2000042c

08012624 <port_set_dw1000_fastrate>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
<<<<<<< HEAD
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80134ec:	4b04      	ldr	r3, [pc, #16]	@ (8013500 <port_set_dw1000_fastrate+0x18>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80134f2:	4b03      	ldr	r3, [pc, #12]	@ (8013500 <port_set_dw1000_fastrate+0x18>)
 80134f4:	0018      	movs	r0, r3
 80134f6:	f7f4 fca7 	bl	8007e48 <HAL_SPI_Init>
}
 80134fa:	46c0      	nop			@ (mov r8, r8)
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	20000568 	.word	0x20000568

08013504 <HAL_GPIO_EXTI_Callback>:
=======
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012628:	4b04      	ldr	r3, [pc, #16]	@ (801263c <port_set_dw1000_fastrate+0x18>)
 801262a:	2200      	movs	r2, #0
 801262c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 801262e:	4b03      	ldr	r3, [pc, #12]	@ (801263c <port_set_dw1000_fastrate+0x18>)
 8012630:	0018      	movs	r0, r3
 8012632:	f7f4 fca5 	bl	8006f80 <HAL_SPI_Init>
}
 8012636:	46c0      	nop			@ (mov r8, r8)
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	2000042c 	.word	0x2000042c

08012640 <HAL_GPIO_EXTI_Callback>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	0002      	movs	r2, r0
 801350c:	1dbb      	adds	r3, r7, #6
 801350e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 8013510:	1dbb      	adds	r3, r7, #6
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	2b20      	cmp	r3, #32
 8013516:	d101      	bne.n	801351c <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 8013518:	f000 f804 	bl	8013524 <process_deca_irq>
    }
}
 801351c:	46c0      	nop			@ (mov r8, r8)
 801351e:	46bd      	mov	sp, r7
 8013520:	b002      	add	sp, #8
 8013522:	bd80      	pop	{r7, pc}

08013524 <process_deca_irq>:
=======
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	0002      	movs	r2, r0
 8012648:	1dbb      	adds	r3, r7, #6
 801264a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 801264c:	1dbb      	adds	r3, r7, #6
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	2b20      	cmp	r3, #32
 8012652:	d101      	bne.n	8012658 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 8012654:	f000 f804 	bl	8012660 <process_deca_irq>
    }
}
 8012658:	46c0      	nop			@ (mov r8, r8)
 801265a:	46bd      	mov	sp, r7
 801265c:	b002      	add	sp, #8
 801265e:	bd80      	pop	{r7, pc}

08012660 <process_deca_irq>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
<<<<<<< HEAD
 8013524:	b580      	push	{r7, lr}
 8013526:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8013528:	e002      	b.n	8013530 <process_deca_irq+0xc>
    {

        port_deca_isr();
 801352a:	4b05      	ldr	r3, [pc, #20]	@ (8013540 <process_deca_irq+0x1c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8013530:	f000 f822 	bl	8013578 <port_CheckEXT_IRQ>
 8013534:	1e03      	subs	r3, r0, #0
 8013536:	d1f8      	bne.n	801352a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8013538:	46c0      	nop			@ (mov r8, r8)
 801353a:	46c0      	nop			@ (mov r8, r8)
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20001e58 	.word	0x20001e58

08013544 <port_DisableEXT_IRQ>:
=======
 8012660:	b580      	push	{r7, lr}
 8012662:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8012664:	e002      	b.n	801266c <process_deca_irq+0xc>
    {

        port_deca_isr();
 8012666:	4b05      	ldr	r3, [pc, #20]	@ (801267c <process_deca_irq+0x1c>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 801266c:	f000 f822 	bl	80126b4 <port_CheckEXT_IRQ>
 8012670:	1e03      	subs	r3, r0, #0
 8012672:	d1f8      	bne.n	8012666 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8012674:	46c0      	nop			@ (mov r8, r8)
 8012676:	46c0      	nop			@ (mov r8, r8)
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	20001d50 	.word	0x20001d50

08012680 <port_DisableEXT_IRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
<<<<<<< HEAD
 8013544:	b580      	push	{r7, lr}
 8013546:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8013548:	2007      	movs	r0, #7
 801354a:	f7ff fee1 	bl	8013310 <__NVIC_DisableIRQ>
}
 801354e:	46c0      	nop			@ (mov r8, r8)
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <port_EnableEXT_IRQ>:
=======
 8012680:	b580      	push	{r7, lr}
 8012682:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8012684:	2007      	movs	r0, #7
 8012686:	f7ff fee1 	bl	801244c <__NVIC_DisableIRQ>
}
 801268a:	46c0      	nop			@ (mov r8, r8)
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <port_EnableEXT_IRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
<<<<<<< HEAD
 8013554:	b580      	push	{r7, lr}
 8013556:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8013558:	2007      	movs	r0, #7
 801355a:	f7ff febf 	bl	80132dc <__NVIC_EnableIRQ>
}
 801355e:	46c0      	nop			@ (mov r8, r8)
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <port_GetEXT_IRQStatus>:
=======
 8012690:	b580      	push	{r7, lr}
 8012692:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8012694:	2007      	movs	r0, #7
 8012696:	f7ff febf 	bl	8012418 <__NVIC_EnableIRQ>
}
 801269a:	46c0      	nop			@ (mov r8, r8)
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <port_GetEXT_IRQStatus>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
<<<<<<< HEAD
 8013564:	b580      	push	{r7, lr}
 8013566:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8013568:	2007      	movs	r0, #7
 801356a:	f7ff ff29 	bl	80133c0 <EXTI_GetITEnStatus>
 801356e:	0003      	movs	r3, r0
}
 8013570:	0018      	movs	r0, r3
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
	...

08013578 <port_CheckEXT_IRQ>:
=======
 80126a0:	b580      	push	{r7, lr}
 80126a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80126a4:	2007      	movs	r0, #7
 80126a6:	f7ff ff29 	bl	80124fc <EXTI_GetITEnStatus>
 80126aa:	0003      	movs	r3, r0
}
 80126ac:	0018      	movs	r0, r3
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
	...

080126b4 <port_CheckEXT_IRQ>:
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
<<<<<<< HEAD
 8013578:	b580      	push	{r7, lr}
 801357a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 801357c:	4b04      	ldr	r3, [pc, #16]	@ (8013590 <port_CheckEXT_IRQ+0x18>)
 801357e:	2120      	movs	r1, #32
 8013580:	0018      	movs	r0, r3
 8013582:	f7f1 ffd9 	bl	8005538 <HAL_GPIO_ReadPin>
 8013586:	0003      	movs	r3, r0
}
 8013588:	0018      	movs	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	46c0      	nop			@ (mov r8, r8)
 8013590:	48000400 	.word	0x48000400

08013594 <__cvt>:
 8013594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013596:	001f      	movs	r7, r3
 8013598:	2300      	movs	r3, #0
 801359a:	0016      	movs	r6, r2
 801359c:	b08b      	sub	sp, #44	@ 0x2c
 801359e:	429f      	cmp	r7, r3
 80135a0:	da04      	bge.n	80135ac <__cvt+0x18>
 80135a2:	2180      	movs	r1, #128	@ 0x80
 80135a4:	0609      	lsls	r1, r1, #24
 80135a6:	187b      	adds	r3, r7, r1
 80135a8:	001f      	movs	r7, r3
 80135aa:	232d      	movs	r3, #45	@ 0x2d
 80135ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80135ae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80135b0:	7013      	strb	r3, [r2, #0]
 80135b2:	2320      	movs	r3, #32
 80135b4:	2203      	movs	r2, #3
 80135b6:	439d      	bics	r5, r3
 80135b8:	2d46      	cmp	r5, #70	@ 0x46
 80135ba:	d007      	beq.n	80135cc <__cvt+0x38>
 80135bc:	002b      	movs	r3, r5
 80135be:	3b45      	subs	r3, #69	@ 0x45
 80135c0:	4259      	negs	r1, r3
 80135c2:	414b      	adcs	r3, r1
 80135c4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80135c6:	3a01      	subs	r2, #1
 80135c8:	18cb      	adds	r3, r1, r3
 80135ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80135cc:	ab09      	add	r3, sp, #36	@ 0x24
 80135ce:	9304      	str	r3, [sp, #16]
 80135d0:	ab08      	add	r3, sp, #32
 80135d2:	9303      	str	r3, [sp, #12]
 80135d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80135d6:	9200      	str	r2, [sp, #0]
 80135d8:	9302      	str	r3, [sp, #8]
 80135da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135dc:	0032      	movs	r2, r6
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	003b      	movs	r3, r7
 80135e2:	f000 fea1 	bl	8014328 <_dtoa_r>
 80135e6:	0004      	movs	r4, r0
 80135e8:	2d47      	cmp	r5, #71	@ 0x47
 80135ea:	d11b      	bne.n	8013624 <__cvt+0x90>
 80135ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135ee:	07db      	lsls	r3, r3, #31
 80135f0:	d511      	bpl.n	8013616 <__cvt+0x82>
 80135f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135f4:	18c3      	adds	r3, r0, r3
 80135f6:	9307      	str	r3, [sp, #28]
 80135f8:	2200      	movs	r2, #0
 80135fa:	2300      	movs	r3, #0
 80135fc:	0030      	movs	r0, r6
 80135fe:	0039      	movs	r1, r7
 8013600:	f7ec ff24 	bl	800044c <__aeabi_dcmpeq>
 8013604:	2800      	cmp	r0, #0
 8013606:	d001      	beq.n	801360c <__cvt+0x78>
 8013608:	9b07      	ldr	r3, [sp, #28]
 801360a:	9309      	str	r3, [sp, #36]	@ 0x24
 801360c:	2230      	movs	r2, #48	@ 0x30
 801360e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013610:	9907      	ldr	r1, [sp, #28]
 8013612:	428b      	cmp	r3, r1
 8013614:	d320      	bcc.n	8013658 <__cvt+0xc4>
 8013616:	0020      	movs	r0, r4
 8013618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801361a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801361c:	1b1b      	subs	r3, r3, r4
 801361e:	6013      	str	r3, [r2, #0]
 8013620:	b00b      	add	sp, #44	@ 0x2c
 8013622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013626:	18c3      	adds	r3, r0, r3
 8013628:	9307      	str	r3, [sp, #28]
 801362a:	2d46      	cmp	r5, #70	@ 0x46
 801362c:	d1e4      	bne.n	80135f8 <__cvt+0x64>
 801362e:	7803      	ldrb	r3, [r0, #0]
 8013630:	2b30      	cmp	r3, #48	@ 0x30
 8013632:	d10c      	bne.n	801364e <__cvt+0xba>
 8013634:	2200      	movs	r2, #0
 8013636:	2300      	movs	r3, #0
 8013638:	0030      	movs	r0, r6
 801363a:	0039      	movs	r1, r7
 801363c:	f7ec ff06 	bl	800044c <__aeabi_dcmpeq>
 8013640:	2800      	cmp	r0, #0
 8013642:	d104      	bne.n	801364e <__cvt+0xba>
 8013644:	2301      	movs	r3, #1
 8013646:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013648:	1a9b      	subs	r3, r3, r2
 801364a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801364c:	6013      	str	r3, [r2, #0]
 801364e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013650:	9a07      	ldr	r2, [sp, #28]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	18d3      	adds	r3, r2, r3
 8013656:	e7ce      	b.n	80135f6 <__cvt+0x62>
 8013658:	1c59      	adds	r1, r3, #1
 801365a:	9109      	str	r1, [sp, #36]	@ 0x24
 801365c:	701a      	strb	r2, [r3, #0]
 801365e:	e7d6      	b.n	801360e <__cvt+0x7a>

08013660 <__exponent>:
 8013660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013662:	232b      	movs	r3, #43	@ 0x2b
 8013664:	0005      	movs	r5, r0
 8013666:	000c      	movs	r4, r1
 8013668:	b085      	sub	sp, #20
 801366a:	7002      	strb	r2, [r0, #0]
 801366c:	2900      	cmp	r1, #0
 801366e:	da01      	bge.n	8013674 <__exponent+0x14>
 8013670:	424c      	negs	r4, r1
 8013672:	3302      	adds	r3, #2
 8013674:	706b      	strb	r3, [r5, #1]
 8013676:	2c09      	cmp	r4, #9
 8013678:	dd2c      	ble.n	80136d4 <__exponent+0x74>
 801367a:	ab02      	add	r3, sp, #8
 801367c:	1dde      	adds	r6, r3, #7
 801367e:	0020      	movs	r0, r4
 8013680:	210a      	movs	r1, #10
 8013682:	f7ec fecd 	bl	8000420 <__aeabi_idivmod>
 8013686:	0037      	movs	r7, r6
 8013688:	3130      	adds	r1, #48	@ 0x30
 801368a:	3e01      	subs	r6, #1
 801368c:	0020      	movs	r0, r4
 801368e:	7031      	strb	r1, [r6, #0]
 8013690:	210a      	movs	r1, #10
 8013692:	9401      	str	r4, [sp, #4]
 8013694:	f7ec fdde 	bl	8000254 <__divsi3>
 8013698:	9b01      	ldr	r3, [sp, #4]
 801369a:	0004      	movs	r4, r0
 801369c:	2b63      	cmp	r3, #99	@ 0x63
 801369e:	dcee      	bgt.n	801367e <__exponent+0x1e>
 80136a0:	1eba      	subs	r2, r7, #2
 80136a2:	1ca8      	adds	r0, r5, #2
 80136a4:	0001      	movs	r1, r0
 80136a6:	0013      	movs	r3, r2
 80136a8:	3430      	adds	r4, #48	@ 0x30
 80136aa:	7014      	strb	r4, [r2, #0]
 80136ac:	ac02      	add	r4, sp, #8
 80136ae:	3407      	adds	r4, #7
 80136b0:	429c      	cmp	r4, r3
 80136b2:	d80a      	bhi.n	80136ca <__exponent+0x6a>
 80136b4:	2300      	movs	r3, #0
 80136b6:	42a2      	cmp	r2, r4
 80136b8:	d803      	bhi.n	80136c2 <__exponent+0x62>
 80136ba:	3309      	adds	r3, #9
 80136bc:	aa02      	add	r2, sp, #8
 80136be:	189b      	adds	r3, r3, r2
 80136c0:	1bdb      	subs	r3, r3, r7
 80136c2:	18c0      	adds	r0, r0, r3
 80136c4:	1b40      	subs	r0, r0, r5
 80136c6:	b005      	add	sp, #20
 80136c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136ca:	781c      	ldrb	r4, [r3, #0]
 80136cc:	3301      	adds	r3, #1
 80136ce:	700c      	strb	r4, [r1, #0]
 80136d0:	3101      	adds	r1, #1
 80136d2:	e7eb      	b.n	80136ac <__exponent+0x4c>
 80136d4:	2330      	movs	r3, #48	@ 0x30
 80136d6:	18e4      	adds	r4, r4, r3
 80136d8:	70ab      	strb	r3, [r5, #2]
 80136da:	1d28      	adds	r0, r5, #4
 80136dc:	70ec      	strb	r4, [r5, #3]
 80136de:	e7f1      	b.n	80136c4 <__exponent+0x64>

080136e0 <_printf_float>:
 80136e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e2:	b097      	sub	sp, #92	@ 0x5c
 80136e4:	000d      	movs	r5, r1
 80136e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80136e8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80136ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80136ee:	f000 fcf9 	bl	80140e4 <_localeconv_r>
 80136f2:	6803      	ldr	r3, [r0, #0]
 80136f4:	0018      	movs	r0, r3
 80136f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80136f8:	f7ec fd06 	bl	8000108 <strlen>
 80136fc:	2300      	movs	r3, #0
 80136fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013700:	9314      	str	r3, [sp, #80]	@ 0x50
 8013702:	7e2b      	ldrb	r3, [r5, #24]
 8013704:	2207      	movs	r2, #7
 8013706:	930c      	str	r3, [sp, #48]	@ 0x30
 8013708:	682b      	ldr	r3, [r5, #0]
 801370a:	930e      	str	r3, [sp, #56]	@ 0x38
 801370c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801370e:	6823      	ldr	r3, [r4, #0]
 8013710:	05c9      	lsls	r1, r1, #23
 8013712:	d545      	bpl.n	80137a0 <_printf_float+0xc0>
 8013714:	189b      	adds	r3, r3, r2
 8013716:	4393      	bics	r3, r2
 8013718:	001a      	movs	r2, r3
 801371a:	3208      	adds	r2, #8
 801371c:	6022      	str	r2, [r4, #0]
 801371e:	2201      	movs	r2, #1
 8013720:	681e      	ldr	r6, [r3, #0]
 8013722:	685f      	ldr	r7, [r3, #4]
 8013724:	007b      	lsls	r3, r7, #1
 8013726:	085b      	lsrs	r3, r3, #1
 8013728:	9311      	str	r3, [sp, #68]	@ 0x44
 801372a:	9610      	str	r6, [sp, #64]	@ 0x40
 801372c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801372e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8013730:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013732:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013734:	4ba7      	ldr	r3, [pc, #668]	@ (80139d4 <_printf_float+0x2f4>)
 8013736:	4252      	negs	r2, r2
 8013738:	f7ee ffd0 	bl	80026dc <__aeabi_dcmpun>
 801373c:	2800      	cmp	r0, #0
 801373e:	d131      	bne.n	80137a4 <_printf_float+0xc4>
 8013740:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013742:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013744:	2201      	movs	r2, #1
 8013746:	4ba3      	ldr	r3, [pc, #652]	@ (80139d4 <_printf_float+0x2f4>)
 8013748:	4252      	negs	r2, r2
 801374a:	f7ec fe8f 	bl	800046c <__aeabi_dcmple>
 801374e:	2800      	cmp	r0, #0
 8013750:	d128      	bne.n	80137a4 <_printf_float+0xc4>
 8013752:	2200      	movs	r2, #0
 8013754:	2300      	movs	r3, #0
 8013756:	0030      	movs	r0, r6
 8013758:	0039      	movs	r1, r7
 801375a:	f7ec fe7d 	bl	8000458 <__aeabi_dcmplt>
 801375e:	2800      	cmp	r0, #0
 8013760:	d003      	beq.n	801376a <_printf_float+0x8a>
 8013762:	002b      	movs	r3, r5
 8013764:	222d      	movs	r2, #45	@ 0x2d
 8013766:	3343      	adds	r3, #67	@ 0x43
 8013768:	701a      	strb	r2, [r3, #0]
 801376a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801376c:	4f9a      	ldr	r7, [pc, #616]	@ (80139d8 <_printf_float+0x2f8>)
 801376e:	2b47      	cmp	r3, #71	@ 0x47
 8013770:	d900      	bls.n	8013774 <_printf_float+0x94>
 8013772:	4f9a      	ldr	r7, [pc, #616]	@ (80139dc <_printf_float+0x2fc>)
 8013774:	2303      	movs	r3, #3
 8013776:	2400      	movs	r4, #0
 8013778:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801377a:	612b      	str	r3, [r5, #16]
 801377c:	3301      	adds	r3, #1
 801377e:	439a      	bics	r2, r3
 8013780:	602a      	str	r2, [r5, #0]
 8013782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013784:	0029      	movs	r1, r5
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801378a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801378c:	aa15      	add	r2, sp, #84	@ 0x54
 801378e:	f000 f9e5 	bl	8013b5c <_printf_common>
 8013792:	3001      	adds	r0, #1
 8013794:	d000      	beq.n	8013798 <_printf_float+0xb8>
 8013796:	e09f      	b.n	80138d8 <_printf_float+0x1f8>
 8013798:	2001      	movs	r0, #1
 801379a:	4240      	negs	r0, r0
 801379c:	b017      	add	sp, #92	@ 0x5c
 801379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137a0:	3307      	adds	r3, #7
 80137a2:	e7b8      	b.n	8013716 <_printf_float+0x36>
 80137a4:	0032      	movs	r2, r6
 80137a6:	003b      	movs	r3, r7
 80137a8:	0030      	movs	r0, r6
 80137aa:	0039      	movs	r1, r7
 80137ac:	f7ee ff96 	bl	80026dc <__aeabi_dcmpun>
 80137b0:	2800      	cmp	r0, #0
 80137b2:	d00b      	beq.n	80137cc <_printf_float+0xec>
 80137b4:	2f00      	cmp	r7, #0
 80137b6:	da03      	bge.n	80137c0 <_printf_float+0xe0>
 80137b8:	002b      	movs	r3, r5
 80137ba:	222d      	movs	r2, #45	@ 0x2d
 80137bc:	3343      	adds	r3, #67	@ 0x43
 80137be:	701a      	strb	r2, [r3, #0]
 80137c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c2:	4f87      	ldr	r7, [pc, #540]	@ (80139e0 <_printf_float+0x300>)
 80137c4:	2b47      	cmp	r3, #71	@ 0x47
 80137c6:	d9d5      	bls.n	8013774 <_printf_float+0x94>
 80137c8:	4f86      	ldr	r7, [pc, #536]	@ (80139e4 <_printf_float+0x304>)
 80137ca:	e7d3      	b.n	8013774 <_printf_float+0x94>
 80137cc:	2220      	movs	r2, #32
 80137ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80137d0:	686b      	ldr	r3, [r5, #4]
 80137d2:	4394      	bics	r4, r2
 80137d4:	1c5a      	adds	r2, r3, #1
 80137d6:	d146      	bne.n	8013866 <_printf_float+0x186>
 80137d8:	3307      	adds	r3, #7
 80137da:	606b      	str	r3, [r5, #4]
 80137dc:	2380      	movs	r3, #128	@ 0x80
 80137de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137e0:	00db      	lsls	r3, r3, #3
 80137e2:	4313      	orrs	r3, r2
 80137e4:	2200      	movs	r2, #0
 80137e6:	602b      	str	r3, [r5, #0]
 80137e8:	9206      	str	r2, [sp, #24]
 80137ea:	aa14      	add	r2, sp, #80	@ 0x50
 80137ec:	9205      	str	r2, [sp, #20]
 80137ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80137f0:	a90a      	add	r1, sp, #40	@ 0x28
 80137f2:	9204      	str	r2, [sp, #16]
 80137f4:	aa13      	add	r2, sp, #76	@ 0x4c
 80137f6:	9203      	str	r2, [sp, #12]
 80137f8:	2223      	movs	r2, #35	@ 0x23
 80137fa:	1852      	adds	r2, r2, r1
 80137fc:	9202      	str	r2, [sp, #8]
 80137fe:	9301      	str	r3, [sp, #4]
 8013800:	686b      	ldr	r3, [r5, #4]
 8013802:	0032      	movs	r2, r6
 8013804:	9300      	str	r3, [sp, #0]
 8013806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013808:	003b      	movs	r3, r7
 801380a:	f7ff fec3 	bl	8013594 <__cvt>
 801380e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013810:	0007      	movs	r7, r0
 8013812:	2c47      	cmp	r4, #71	@ 0x47
 8013814:	d12d      	bne.n	8013872 <_printf_float+0x192>
 8013816:	1cd3      	adds	r3, r2, #3
 8013818:	db02      	blt.n	8013820 <_printf_float+0x140>
 801381a:	686b      	ldr	r3, [r5, #4]
 801381c:	429a      	cmp	r2, r3
 801381e:	dd48      	ble.n	80138b2 <_printf_float+0x1d2>
 8013820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013822:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013824:	3b02      	subs	r3, #2
 8013826:	b2db      	uxtb	r3, r3
 8013828:	930c      	str	r3, [sp, #48]	@ 0x30
 801382a:	0028      	movs	r0, r5
 801382c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801382e:	3901      	subs	r1, #1
 8013830:	3050      	adds	r0, #80	@ 0x50
 8013832:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013834:	f7ff ff14 	bl	8013660 <__exponent>
 8013838:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801383a:	0004      	movs	r4, r0
 801383c:	1813      	adds	r3, r2, r0
 801383e:	612b      	str	r3, [r5, #16]
 8013840:	2a01      	cmp	r2, #1
 8013842:	dc02      	bgt.n	801384a <_printf_float+0x16a>
 8013844:	682a      	ldr	r2, [r5, #0]
 8013846:	07d2      	lsls	r2, r2, #31
 8013848:	d501      	bpl.n	801384e <_printf_float+0x16e>
 801384a:	3301      	adds	r3, #1
 801384c:	612b      	str	r3, [r5, #16]
 801384e:	2323      	movs	r3, #35	@ 0x23
 8013850:	aa0a      	add	r2, sp, #40	@ 0x28
 8013852:	189b      	adds	r3, r3, r2
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d100      	bne.n	801385c <_printf_float+0x17c>
 801385a:	e792      	b.n	8013782 <_printf_float+0xa2>
 801385c:	002b      	movs	r3, r5
 801385e:	222d      	movs	r2, #45	@ 0x2d
 8013860:	3343      	adds	r3, #67	@ 0x43
 8013862:	701a      	strb	r2, [r3, #0]
 8013864:	e78d      	b.n	8013782 <_printf_float+0xa2>
 8013866:	2c47      	cmp	r4, #71	@ 0x47
 8013868:	d1b8      	bne.n	80137dc <_printf_float+0xfc>
 801386a:	2b00      	cmp	r3, #0
 801386c:	d1b6      	bne.n	80137dc <_printf_float+0xfc>
 801386e:	3301      	adds	r3, #1
 8013870:	e7b3      	b.n	80137da <_printf_float+0xfa>
 8013872:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013874:	0011      	movs	r1, r2
 8013876:	2b65      	cmp	r3, #101	@ 0x65
 8013878:	d9d7      	bls.n	801382a <_printf_float+0x14a>
 801387a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801387c:	2b66      	cmp	r3, #102	@ 0x66
 801387e:	d11a      	bne.n	80138b6 <_printf_float+0x1d6>
 8013880:	686b      	ldr	r3, [r5, #4]
 8013882:	2a00      	cmp	r2, #0
 8013884:	dd09      	ble.n	801389a <_printf_float+0x1ba>
 8013886:	612a      	str	r2, [r5, #16]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <_printf_float+0x1b2>
 801388c:	6829      	ldr	r1, [r5, #0]
 801388e:	07c9      	lsls	r1, r1, #31
 8013890:	d50b      	bpl.n	80138aa <_printf_float+0x1ca>
 8013892:	3301      	adds	r3, #1
 8013894:	189b      	adds	r3, r3, r2
 8013896:	612b      	str	r3, [r5, #16]
 8013898:	e007      	b.n	80138aa <_printf_float+0x1ca>
 801389a:	2b00      	cmp	r3, #0
 801389c:	d103      	bne.n	80138a6 <_printf_float+0x1c6>
 801389e:	2201      	movs	r2, #1
 80138a0:	6829      	ldr	r1, [r5, #0]
 80138a2:	4211      	tst	r1, r2
 80138a4:	d000      	beq.n	80138a8 <_printf_float+0x1c8>
 80138a6:	1c9a      	adds	r2, r3, #2
 80138a8:	612a      	str	r2, [r5, #16]
 80138aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80138ac:	2400      	movs	r4, #0
 80138ae:	65ab      	str	r3, [r5, #88]	@ 0x58
 80138b0:	e7cd      	b.n	801384e <_printf_float+0x16e>
 80138b2:	2367      	movs	r3, #103	@ 0x67
 80138b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80138b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80138b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80138ba:	4299      	cmp	r1, r3
 80138bc:	db06      	blt.n	80138cc <_printf_float+0x1ec>
 80138be:	682b      	ldr	r3, [r5, #0]
 80138c0:	6129      	str	r1, [r5, #16]
 80138c2:	07db      	lsls	r3, r3, #31
 80138c4:	d5f1      	bpl.n	80138aa <_printf_float+0x1ca>
 80138c6:	3101      	adds	r1, #1
 80138c8:	6129      	str	r1, [r5, #16]
 80138ca:	e7ee      	b.n	80138aa <_printf_float+0x1ca>
 80138cc:	2201      	movs	r2, #1
 80138ce:	2900      	cmp	r1, #0
 80138d0:	dce0      	bgt.n	8013894 <_printf_float+0x1b4>
 80138d2:	1892      	adds	r2, r2, r2
 80138d4:	1a52      	subs	r2, r2, r1
 80138d6:	e7dd      	b.n	8013894 <_printf_float+0x1b4>
 80138d8:	682a      	ldr	r2, [r5, #0]
 80138da:	0553      	lsls	r3, r2, #21
 80138dc:	d408      	bmi.n	80138f0 <_printf_float+0x210>
 80138de:	692b      	ldr	r3, [r5, #16]
 80138e0:	003a      	movs	r2, r7
 80138e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80138e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80138e8:	47a0      	blx	r4
 80138ea:	3001      	adds	r0, #1
 80138ec:	d129      	bne.n	8013942 <_printf_float+0x262>
 80138ee:	e753      	b.n	8013798 <_printf_float+0xb8>
 80138f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138f2:	2b65      	cmp	r3, #101	@ 0x65
 80138f4:	d800      	bhi.n	80138f8 <_printf_float+0x218>
 80138f6:	e0da      	b.n	8013aae <_printf_float+0x3ce>
 80138f8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80138fa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80138fc:	2200      	movs	r2, #0
 80138fe:	2300      	movs	r3, #0
 8013900:	f7ec fda4 	bl	800044c <__aeabi_dcmpeq>
 8013904:	2800      	cmp	r0, #0
 8013906:	d033      	beq.n	8013970 <_printf_float+0x290>
 8013908:	2301      	movs	r3, #1
 801390a:	4a37      	ldr	r2, [pc, #220]	@ (80139e8 <_printf_float+0x308>)
 801390c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801390e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013910:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013912:	47a0      	blx	r4
 8013914:	3001      	adds	r0, #1
 8013916:	d100      	bne.n	801391a <_printf_float+0x23a>
 8013918:	e73e      	b.n	8013798 <_printf_float+0xb8>
 801391a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801391c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801391e:	42b3      	cmp	r3, r6
 8013920:	db02      	blt.n	8013928 <_printf_float+0x248>
 8013922:	682b      	ldr	r3, [r5, #0]
 8013924:	07db      	lsls	r3, r3, #31
 8013926:	d50c      	bpl.n	8013942 <_printf_float+0x262>
 8013928:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801392a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801392c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801392e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013930:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013932:	47a0      	blx	r4
 8013934:	2400      	movs	r4, #0
 8013936:	3001      	adds	r0, #1
 8013938:	d100      	bne.n	801393c <_printf_float+0x25c>
 801393a:	e72d      	b.n	8013798 <_printf_float+0xb8>
 801393c:	1e73      	subs	r3, r6, #1
 801393e:	42a3      	cmp	r3, r4
 8013940:	dc0a      	bgt.n	8013958 <_printf_float+0x278>
 8013942:	682b      	ldr	r3, [r5, #0]
 8013944:	079b      	lsls	r3, r3, #30
 8013946:	d500      	bpl.n	801394a <_printf_float+0x26a>
 8013948:	e105      	b.n	8013b56 <_printf_float+0x476>
 801394a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801394c:	68e8      	ldr	r0, [r5, #12]
 801394e:	4298      	cmp	r0, r3
 8013950:	db00      	blt.n	8013954 <_printf_float+0x274>
 8013952:	e723      	b.n	801379c <_printf_float+0xbc>
 8013954:	0018      	movs	r0, r3
 8013956:	e721      	b.n	801379c <_printf_float+0xbc>
 8013958:	002a      	movs	r2, r5
 801395a:	2301      	movs	r3, #1
 801395c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801395e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013960:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013962:	321a      	adds	r2, #26
 8013964:	47b8      	blx	r7
 8013966:	3001      	adds	r0, #1
 8013968:	d100      	bne.n	801396c <_printf_float+0x28c>
 801396a:	e715      	b.n	8013798 <_printf_float+0xb8>
 801396c:	3401      	adds	r4, #1
 801396e:	e7e5      	b.n	801393c <_printf_float+0x25c>
 8013970:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013972:	2b00      	cmp	r3, #0
 8013974:	dc3a      	bgt.n	80139ec <_printf_float+0x30c>
 8013976:	2301      	movs	r3, #1
 8013978:	4a1b      	ldr	r2, [pc, #108]	@ (80139e8 <_printf_float+0x308>)
 801397a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801397c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801397e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013980:	47a0      	blx	r4
 8013982:	3001      	adds	r0, #1
 8013984:	d100      	bne.n	8013988 <_printf_float+0x2a8>
 8013986:	e707      	b.n	8013798 <_printf_float+0xb8>
 8013988:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801398a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801398c:	4333      	orrs	r3, r6
 801398e:	d102      	bne.n	8013996 <_printf_float+0x2b6>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	07db      	lsls	r3, r3, #31
 8013994:	d5d5      	bpl.n	8013942 <_printf_float+0x262>
 8013996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801399a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801399c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801399e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80139a0:	47a0      	blx	r4
 80139a2:	2300      	movs	r3, #0
 80139a4:	3001      	adds	r0, #1
 80139a6:	d100      	bne.n	80139aa <_printf_float+0x2ca>
 80139a8:	e6f6      	b.n	8013798 <_printf_float+0xb8>
 80139aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80139ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80139b0:	425b      	negs	r3, r3
 80139b2:	4293      	cmp	r3, r2
 80139b4:	dc01      	bgt.n	80139ba <_printf_float+0x2da>
 80139b6:	0033      	movs	r3, r6
 80139b8:	e792      	b.n	80138e0 <_printf_float+0x200>
 80139ba:	002a      	movs	r2, r5
 80139bc:	2301      	movs	r3, #1
 80139be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80139c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80139c4:	321a      	adds	r2, #26
 80139c6:	47a0      	blx	r4
 80139c8:	3001      	adds	r0, #1
 80139ca:	d100      	bne.n	80139ce <_printf_float+0x2ee>
 80139cc:	e6e4      	b.n	8013798 <_printf_float+0xb8>
 80139ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139d0:	3301      	adds	r3, #1
 80139d2:	e7ea      	b.n	80139aa <_printf_float+0x2ca>
 80139d4:	7fefffff 	.word	0x7fefffff
 80139d8:	08019f66 	.word	0x08019f66
 80139dc:	08019f6a 	.word	0x08019f6a
 80139e0:	08019f6e 	.word	0x08019f6e
 80139e4:	08019f72 	.word	0x08019f72
 80139e8:	08019f76 	.word	0x08019f76
 80139ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80139f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80139f2:	429e      	cmp	r6, r3
 80139f4:	dd00      	ble.n	80139f8 <_printf_float+0x318>
 80139f6:	001e      	movs	r6, r3
 80139f8:	2e00      	cmp	r6, #0
 80139fa:	dc31      	bgt.n	8013a60 <_printf_float+0x380>
 80139fc:	43f3      	mvns	r3, r6
 80139fe:	2400      	movs	r4, #0
 8013a00:	17db      	asrs	r3, r3, #31
 8013a02:	4033      	ands	r3, r6
 8013a04:	930e      	str	r3, [sp, #56]	@ 0x38
 8013a06:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8013a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a0a:	1af3      	subs	r3, r6, r3
 8013a0c:	42a3      	cmp	r3, r4
 8013a0e:	dc30      	bgt.n	8013a72 <_printf_float+0x392>
 8013a10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a12:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a14:	429a      	cmp	r2, r3
 8013a16:	dc38      	bgt.n	8013a8a <_printf_float+0x3aa>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	07db      	lsls	r3, r3, #31
 8013a1c:	d435      	bmi.n	8013a8a <_printf_float+0x3aa>
 8013a1e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a24:	1b9b      	subs	r3, r3, r6
 8013a26:	1b14      	subs	r4, r2, r4
 8013a28:	429c      	cmp	r4, r3
 8013a2a:	dd00      	ble.n	8013a2e <_printf_float+0x34e>
 8013a2c:	001c      	movs	r4, r3
 8013a2e:	2c00      	cmp	r4, #0
 8013a30:	dc34      	bgt.n	8013a9c <_printf_float+0x3bc>
 8013a32:	43e3      	mvns	r3, r4
 8013a34:	2600      	movs	r6, #0
 8013a36:	17db      	asrs	r3, r3, #31
 8013a38:	401c      	ands	r4, r3
 8013a3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	1b1b      	subs	r3, r3, r4
 8013a42:	42b3      	cmp	r3, r6
 8013a44:	dc00      	bgt.n	8013a48 <_printf_float+0x368>
 8013a46:	e77c      	b.n	8013942 <_printf_float+0x262>
 8013a48:	002a      	movs	r2, r5
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013a52:	321a      	adds	r2, #26
 8013a54:	47b8      	blx	r7
 8013a56:	3001      	adds	r0, #1
 8013a58:	d100      	bne.n	8013a5c <_printf_float+0x37c>
 8013a5a:	e69d      	b.n	8013798 <_printf_float+0xb8>
 8013a5c:	3601      	adds	r6, #1
 8013a5e:	e7ec      	b.n	8013a3a <_printf_float+0x35a>
 8013a60:	0033      	movs	r3, r6
 8013a62:	003a      	movs	r2, r7
 8013a64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013a6a:	47a0      	blx	r4
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	d1c5      	bne.n	80139fc <_printf_float+0x31c>
 8013a70:	e692      	b.n	8013798 <_printf_float+0xb8>
 8013a72:	002a      	movs	r2, r5
 8013a74:	2301      	movs	r3, #1
 8013a76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a7a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013a7c:	321a      	adds	r2, #26
 8013a7e:	47b0      	blx	r6
 8013a80:	3001      	adds	r0, #1
 8013a82:	d100      	bne.n	8013a86 <_printf_float+0x3a6>
 8013a84:	e688      	b.n	8013798 <_printf_float+0xb8>
 8013a86:	3401      	adds	r4, #1
 8013a88:	e7bd      	b.n	8013a06 <_printf_float+0x326>
 8013a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013a90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013a94:	47a0      	blx	r4
 8013a96:	3001      	adds	r0, #1
 8013a98:	d1c1      	bne.n	8013a1e <_printf_float+0x33e>
 8013a9a:	e67d      	b.n	8013798 <_printf_float+0xb8>
 8013a9c:	19ba      	adds	r2, r7, r6
 8013a9e:	0023      	movs	r3, r4
 8013aa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013aa4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013aa6:	47b0      	blx	r6
 8013aa8:	3001      	adds	r0, #1
 8013aaa:	d1c2      	bne.n	8013a32 <_printf_float+0x352>
 8013aac:	e674      	b.n	8013798 <_printf_float+0xb8>
 8013aae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013ab0:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	dc02      	bgt.n	8013abc <_printf_float+0x3dc>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	421a      	tst	r2, r3
 8013aba:	d039      	beq.n	8013b30 <_printf_float+0x450>
 8013abc:	2301      	movs	r3, #1
 8013abe:	003a      	movs	r2, r7
 8013ac0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ac4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ac6:	47b0      	blx	r6
 8013ac8:	3001      	adds	r0, #1
 8013aca:	d100      	bne.n	8013ace <_printf_float+0x3ee>
 8013acc:	e664      	b.n	8013798 <_printf_float+0xb8>
 8013ace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ad4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ad6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ad8:	47b0      	blx	r6
 8013ada:	3001      	adds	r0, #1
 8013adc:	d100      	bne.n	8013ae0 <_printf_float+0x400>
 8013ade:	e65b      	b.n	8013798 <_printf_float+0xb8>
 8013ae0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8013ae2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013ae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	930c      	str	r3, [sp, #48]	@ 0x30
 8013aec:	2300      	movs	r3, #0
 8013aee:	f7ec fcad 	bl	800044c <__aeabi_dcmpeq>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d11a      	bne.n	8013b2c <_printf_float+0x44c>
 8013af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013af8:	1c7a      	adds	r2, r7, #1
 8013afa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013afc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013afe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013b00:	47b0      	blx	r6
 8013b02:	3001      	adds	r0, #1
 8013b04:	d10e      	bne.n	8013b24 <_printf_float+0x444>
 8013b06:	e647      	b.n	8013798 <_printf_float+0xb8>
 8013b08:	002a      	movs	r2, r5
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013b12:	321a      	adds	r2, #26
 8013b14:	47b8      	blx	r7
 8013b16:	3001      	adds	r0, #1
 8013b18:	d100      	bne.n	8013b1c <_printf_float+0x43c>
 8013b1a:	e63d      	b.n	8013798 <_printf_float+0xb8>
 8013b1c:	3601      	adds	r6, #1
 8013b1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b20:	429e      	cmp	r6, r3
 8013b22:	dbf1      	blt.n	8013b08 <_printf_float+0x428>
 8013b24:	002a      	movs	r2, r5
 8013b26:	0023      	movs	r3, r4
 8013b28:	3250      	adds	r2, #80	@ 0x50
 8013b2a:	e6da      	b.n	80138e2 <_printf_float+0x202>
 8013b2c:	2600      	movs	r6, #0
 8013b2e:	e7f6      	b.n	8013b1e <_printf_float+0x43e>
 8013b30:	003a      	movs	r2, r7
 8013b32:	e7e2      	b.n	8013afa <_printf_float+0x41a>
 8013b34:	002a      	movs	r2, r5
 8013b36:	2301      	movs	r3, #1
 8013b38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013b3e:	3219      	adds	r2, #25
 8013b40:	47b0      	blx	r6
 8013b42:	3001      	adds	r0, #1
 8013b44:	d100      	bne.n	8013b48 <_printf_float+0x468>
 8013b46:	e627      	b.n	8013798 <_printf_float+0xb8>
 8013b48:	3401      	adds	r4, #1
 8013b4a:	68eb      	ldr	r3, [r5, #12]
 8013b4c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	42a3      	cmp	r3, r4
 8013b52:	dcef      	bgt.n	8013b34 <_printf_float+0x454>
 8013b54:	e6f9      	b.n	801394a <_printf_float+0x26a>
 8013b56:	2400      	movs	r4, #0
 8013b58:	e7f7      	b.n	8013b4a <_printf_float+0x46a>
 8013b5a:	46c0      	nop			@ (mov r8, r8)

08013b5c <_printf_common>:
 8013b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b5e:	0016      	movs	r6, r2
 8013b60:	9301      	str	r3, [sp, #4]
 8013b62:	688a      	ldr	r2, [r1, #8]
 8013b64:	690b      	ldr	r3, [r1, #16]
 8013b66:	000c      	movs	r4, r1
 8013b68:	9000      	str	r0, [sp, #0]
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	da00      	bge.n	8013b70 <_printf_common+0x14>
 8013b6e:	0013      	movs	r3, r2
 8013b70:	0022      	movs	r2, r4
 8013b72:	6033      	str	r3, [r6, #0]
 8013b74:	3243      	adds	r2, #67	@ 0x43
 8013b76:	7812      	ldrb	r2, [r2, #0]
 8013b78:	2a00      	cmp	r2, #0
 8013b7a:	d001      	beq.n	8013b80 <_printf_common+0x24>
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	6033      	str	r3, [r6, #0]
 8013b80:	6823      	ldr	r3, [r4, #0]
 8013b82:	069b      	lsls	r3, r3, #26
 8013b84:	d502      	bpl.n	8013b8c <_printf_common+0x30>
 8013b86:	6833      	ldr	r3, [r6, #0]
 8013b88:	3302      	adds	r3, #2
 8013b8a:	6033      	str	r3, [r6, #0]
 8013b8c:	6822      	ldr	r2, [r4, #0]
 8013b8e:	2306      	movs	r3, #6
 8013b90:	0015      	movs	r5, r2
 8013b92:	401d      	ands	r5, r3
 8013b94:	421a      	tst	r2, r3
 8013b96:	d027      	beq.n	8013be8 <_printf_common+0x8c>
 8013b98:	0023      	movs	r3, r4
 8013b9a:	3343      	adds	r3, #67	@ 0x43
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	1e5a      	subs	r2, r3, #1
 8013ba0:	4193      	sbcs	r3, r2
 8013ba2:	6822      	ldr	r2, [r4, #0]
 8013ba4:	0692      	lsls	r2, r2, #26
 8013ba6:	d430      	bmi.n	8013c0a <_printf_common+0xae>
 8013ba8:	0022      	movs	r2, r4
 8013baa:	9901      	ldr	r1, [sp, #4]
 8013bac:	9800      	ldr	r0, [sp, #0]
 8013bae:	9d08      	ldr	r5, [sp, #32]
 8013bb0:	3243      	adds	r2, #67	@ 0x43
 8013bb2:	47a8      	blx	r5
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d025      	beq.n	8013c04 <_printf_common+0xa8>
 8013bb8:	2206      	movs	r2, #6
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	2500      	movs	r5, #0
 8013bbe:	4013      	ands	r3, r2
 8013bc0:	2b04      	cmp	r3, #4
 8013bc2:	d105      	bne.n	8013bd0 <_printf_common+0x74>
 8013bc4:	6833      	ldr	r3, [r6, #0]
 8013bc6:	68e5      	ldr	r5, [r4, #12]
 8013bc8:	1aed      	subs	r5, r5, r3
 8013bca:	43eb      	mvns	r3, r5
 8013bcc:	17db      	asrs	r3, r3, #31
 8013bce:	401d      	ands	r5, r3
 8013bd0:	68a3      	ldr	r3, [r4, #8]
 8013bd2:	6922      	ldr	r2, [r4, #16]
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	dd01      	ble.n	8013bdc <_printf_common+0x80>
 8013bd8:	1a9b      	subs	r3, r3, r2
 8013bda:	18ed      	adds	r5, r5, r3
 8013bdc:	2600      	movs	r6, #0
 8013bde:	42b5      	cmp	r5, r6
 8013be0:	d120      	bne.n	8013c24 <_printf_common+0xc8>
 8013be2:	2000      	movs	r0, #0
 8013be4:	e010      	b.n	8013c08 <_printf_common+0xac>
 8013be6:	3501      	adds	r5, #1
 8013be8:	68e3      	ldr	r3, [r4, #12]
 8013bea:	6832      	ldr	r2, [r6, #0]
 8013bec:	1a9b      	subs	r3, r3, r2
 8013bee:	42ab      	cmp	r3, r5
 8013bf0:	ddd2      	ble.n	8013b98 <_printf_common+0x3c>
 8013bf2:	0022      	movs	r2, r4
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	9901      	ldr	r1, [sp, #4]
 8013bf8:	9800      	ldr	r0, [sp, #0]
 8013bfa:	9f08      	ldr	r7, [sp, #32]
 8013bfc:	3219      	adds	r2, #25
 8013bfe:	47b8      	blx	r7
 8013c00:	3001      	adds	r0, #1
 8013c02:	d1f0      	bne.n	8013be6 <_printf_common+0x8a>
 8013c04:	2001      	movs	r0, #1
 8013c06:	4240      	negs	r0, r0
 8013c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013c0a:	2030      	movs	r0, #48	@ 0x30
 8013c0c:	18e1      	adds	r1, r4, r3
 8013c0e:	3143      	adds	r1, #67	@ 0x43
 8013c10:	7008      	strb	r0, [r1, #0]
 8013c12:	0021      	movs	r1, r4
 8013c14:	1c5a      	adds	r2, r3, #1
 8013c16:	3145      	adds	r1, #69	@ 0x45
 8013c18:	7809      	ldrb	r1, [r1, #0]
 8013c1a:	18a2      	adds	r2, r4, r2
 8013c1c:	3243      	adds	r2, #67	@ 0x43
 8013c1e:	3302      	adds	r3, #2
 8013c20:	7011      	strb	r1, [r2, #0]
 8013c22:	e7c1      	b.n	8013ba8 <_printf_common+0x4c>
 8013c24:	0022      	movs	r2, r4
 8013c26:	2301      	movs	r3, #1
 8013c28:	9901      	ldr	r1, [sp, #4]
 8013c2a:	9800      	ldr	r0, [sp, #0]
 8013c2c:	9f08      	ldr	r7, [sp, #32]
 8013c2e:	321a      	adds	r2, #26
 8013c30:	47b8      	blx	r7
 8013c32:	3001      	adds	r0, #1
 8013c34:	d0e6      	beq.n	8013c04 <_printf_common+0xa8>
 8013c36:	3601      	adds	r6, #1
 8013c38:	e7d1      	b.n	8013bde <_printf_common+0x82>
	...

08013c3c <_printf_i>:
 8013c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c3e:	b08b      	sub	sp, #44	@ 0x2c
 8013c40:	9206      	str	r2, [sp, #24]
 8013c42:	000a      	movs	r2, r1
 8013c44:	3243      	adds	r2, #67	@ 0x43
 8013c46:	9307      	str	r3, [sp, #28]
 8013c48:	9005      	str	r0, [sp, #20]
 8013c4a:	9203      	str	r2, [sp, #12]
 8013c4c:	7e0a      	ldrb	r2, [r1, #24]
 8013c4e:	000c      	movs	r4, r1
 8013c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c52:	2a78      	cmp	r2, #120	@ 0x78
 8013c54:	d809      	bhi.n	8013c6a <_printf_i+0x2e>
 8013c56:	2a62      	cmp	r2, #98	@ 0x62
 8013c58:	d80b      	bhi.n	8013c72 <_printf_i+0x36>
 8013c5a:	2a00      	cmp	r2, #0
 8013c5c:	d100      	bne.n	8013c60 <_printf_i+0x24>
 8013c5e:	e0bc      	b.n	8013dda <_printf_i+0x19e>
 8013c60:	497b      	ldr	r1, [pc, #492]	@ (8013e50 <_printf_i+0x214>)
 8013c62:	9104      	str	r1, [sp, #16]
 8013c64:	2a58      	cmp	r2, #88	@ 0x58
 8013c66:	d100      	bne.n	8013c6a <_printf_i+0x2e>
 8013c68:	e090      	b.n	8013d8c <_printf_i+0x150>
 8013c6a:	0025      	movs	r5, r4
 8013c6c:	3542      	adds	r5, #66	@ 0x42
 8013c6e:	702a      	strb	r2, [r5, #0]
 8013c70:	e022      	b.n	8013cb8 <_printf_i+0x7c>
 8013c72:	0010      	movs	r0, r2
 8013c74:	3863      	subs	r0, #99	@ 0x63
 8013c76:	2815      	cmp	r0, #21
 8013c78:	d8f7      	bhi.n	8013c6a <_printf_i+0x2e>
 8013c7a:	f7ec fa57 	bl	800012c <__gnu_thumb1_case_shi>
 8013c7e:	0016      	.short	0x0016
 8013c80:	fff6001f 	.word	0xfff6001f
 8013c84:	fff6fff6 	.word	0xfff6fff6
 8013c88:	001ffff6 	.word	0x001ffff6
 8013c8c:	fff6fff6 	.word	0xfff6fff6
 8013c90:	fff6fff6 	.word	0xfff6fff6
 8013c94:	003600a1 	.word	0x003600a1
 8013c98:	fff60080 	.word	0xfff60080
 8013c9c:	00b2fff6 	.word	0x00b2fff6
 8013ca0:	0036fff6 	.word	0x0036fff6
 8013ca4:	fff6fff6 	.word	0xfff6fff6
 8013ca8:	0084      	.short	0x0084
 8013caa:	0025      	movs	r5, r4
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	3542      	adds	r5, #66	@ 0x42
 8013cb0:	1d11      	adds	r1, r2, #4
 8013cb2:	6019      	str	r1, [r3, #0]
 8013cb4:	6813      	ldr	r3, [r2, #0]
 8013cb6:	702b      	strb	r3, [r5, #0]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	e0a0      	b.n	8013dfe <_printf_i+0x1c2>
 8013cbc:	6818      	ldr	r0, [r3, #0]
 8013cbe:	6809      	ldr	r1, [r1, #0]
 8013cc0:	1d02      	adds	r2, r0, #4
 8013cc2:	060d      	lsls	r5, r1, #24
 8013cc4:	d50b      	bpl.n	8013cde <_printf_i+0xa2>
 8013cc6:	6806      	ldr	r6, [r0, #0]
 8013cc8:	601a      	str	r2, [r3, #0]
 8013cca:	2e00      	cmp	r6, #0
 8013ccc:	da03      	bge.n	8013cd6 <_printf_i+0x9a>
 8013cce:	232d      	movs	r3, #45	@ 0x2d
 8013cd0:	9a03      	ldr	r2, [sp, #12]
 8013cd2:	4276      	negs	r6, r6
 8013cd4:	7013      	strb	r3, [r2, #0]
 8013cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8013e50 <_printf_i+0x214>)
 8013cd8:	270a      	movs	r7, #10
 8013cda:	9304      	str	r3, [sp, #16]
 8013cdc:	e018      	b.n	8013d10 <_printf_i+0xd4>
 8013cde:	6806      	ldr	r6, [r0, #0]
 8013ce0:	601a      	str	r2, [r3, #0]
 8013ce2:	0649      	lsls	r1, r1, #25
 8013ce4:	d5f1      	bpl.n	8013cca <_printf_i+0x8e>
 8013ce6:	b236      	sxth	r6, r6
 8013ce8:	e7ef      	b.n	8013cca <_printf_i+0x8e>
 8013cea:	6808      	ldr	r0, [r1, #0]
 8013cec:	6819      	ldr	r1, [r3, #0]
 8013cee:	c940      	ldmia	r1!, {r6}
 8013cf0:	0605      	lsls	r5, r0, #24
 8013cf2:	d402      	bmi.n	8013cfa <_printf_i+0xbe>
 8013cf4:	0640      	lsls	r0, r0, #25
 8013cf6:	d500      	bpl.n	8013cfa <_printf_i+0xbe>
 8013cf8:	b2b6      	uxth	r6, r6
 8013cfa:	6019      	str	r1, [r3, #0]
 8013cfc:	4b54      	ldr	r3, [pc, #336]	@ (8013e50 <_printf_i+0x214>)
 8013cfe:	270a      	movs	r7, #10
 8013d00:	9304      	str	r3, [sp, #16]
 8013d02:	2a6f      	cmp	r2, #111	@ 0x6f
 8013d04:	d100      	bne.n	8013d08 <_printf_i+0xcc>
 8013d06:	3f02      	subs	r7, #2
 8013d08:	0023      	movs	r3, r4
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	3343      	adds	r3, #67	@ 0x43
 8013d0e:	701a      	strb	r2, [r3, #0]
 8013d10:	6863      	ldr	r3, [r4, #4]
 8013d12:	60a3      	str	r3, [r4, #8]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	db03      	blt.n	8013d20 <_printf_i+0xe4>
 8013d18:	2104      	movs	r1, #4
 8013d1a:	6822      	ldr	r2, [r4, #0]
 8013d1c:	438a      	bics	r2, r1
 8013d1e:	6022      	str	r2, [r4, #0]
 8013d20:	2e00      	cmp	r6, #0
 8013d22:	d102      	bne.n	8013d2a <_printf_i+0xee>
 8013d24:	9d03      	ldr	r5, [sp, #12]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00c      	beq.n	8013d44 <_printf_i+0x108>
 8013d2a:	9d03      	ldr	r5, [sp, #12]
 8013d2c:	0030      	movs	r0, r6
 8013d2e:	0039      	movs	r1, r7
 8013d30:	f7ec fa8c 	bl	800024c <__aeabi_uidivmod>
 8013d34:	9b04      	ldr	r3, [sp, #16]
 8013d36:	3d01      	subs	r5, #1
 8013d38:	5c5b      	ldrb	r3, [r3, r1]
 8013d3a:	702b      	strb	r3, [r5, #0]
 8013d3c:	0033      	movs	r3, r6
 8013d3e:	0006      	movs	r6, r0
 8013d40:	429f      	cmp	r7, r3
 8013d42:	d9f3      	bls.n	8013d2c <_printf_i+0xf0>
 8013d44:	2f08      	cmp	r7, #8
 8013d46:	d109      	bne.n	8013d5c <_printf_i+0x120>
 8013d48:	6823      	ldr	r3, [r4, #0]
 8013d4a:	07db      	lsls	r3, r3, #31
 8013d4c:	d506      	bpl.n	8013d5c <_printf_i+0x120>
 8013d4e:	6862      	ldr	r2, [r4, #4]
 8013d50:	6923      	ldr	r3, [r4, #16]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	dc02      	bgt.n	8013d5c <_printf_i+0x120>
 8013d56:	2330      	movs	r3, #48	@ 0x30
 8013d58:	3d01      	subs	r5, #1
 8013d5a:	702b      	strb	r3, [r5, #0]
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	1b5b      	subs	r3, r3, r5
 8013d60:	6123      	str	r3, [r4, #16]
 8013d62:	9b07      	ldr	r3, [sp, #28]
 8013d64:	0021      	movs	r1, r4
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	9805      	ldr	r0, [sp, #20]
 8013d6a:	9b06      	ldr	r3, [sp, #24]
 8013d6c:	aa09      	add	r2, sp, #36	@ 0x24
 8013d6e:	f7ff fef5 	bl	8013b5c <_printf_common>
 8013d72:	3001      	adds	r0, #1
 8013d74:	d148      	bne.n	8013e08 <_printf_i+0x1cc>
 8013d76:	2001      	movs	r0, #1
 8013d78:	4240      	negs	r0, r0
 8013d7a:	b00b      	add	sp, #44	@ 0x2c
 8013d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d7e:	2220      	movs	r2, #32
 8013d80:	6809      	ldr	r1, [r1, #0]
 8013d82:	430a      	orrs	r2, r1
 8013d84:	6022      	str	r2, [r4, #0]
 8013d86:	2278      	movs	r2, #120	@ 0x78
 8013d88:	4932      	ldr	r1, [pc, #200]	@ (8013e54 <_printf_i+0x218>)
 8013d8a:	9104      	str	r1, [sp, #16]
 8013d8c:	0021      	movs	r1, r4
 8013d8e:	3145      	adds	r1, #69	@ 0x45
 8013d90:	700a      	strb	r2, [r1, #0]
 8013d92:	6819      	ldr	r1, [r3, #0]
 8013d94:	6822      	ldr	r2, [r4, #0]
 8013d96:	c940      	ldmia	r1!, {r6}
 8013d98:	0610      	lsls	r0, r2, #24
 8013d9a:	d402      	bmi.n	8013da2 <_printf_i+0x166>
 8013d9c:	0650      	lsls	r0, r2, #25
 8013d9e:	d500      	bpl.n	8013da2 <_printf_i+0x166>
 8013da0:	b2b6      	uxth	r6, r6
 8013da2:	6019      	str	r1, [r3, #0]
 8013da4:	07d3      	lsls	r3, r2, #31
 8013da6:	d502      	bpl.n	8013dae <_printf_i+0x172>
 8013da8:	2320      	movs	r3, #32
 8013daa:	4313      	orrs	r3, r2
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	2e00      	cmp	r6, #0
 8013db0:	d001      	beq.n	8013db6 <_printf_i+0x17a>
 8013db2:	2710      	movs	r7, #16
 8013db4:	e7a8      	b.n	8013d08 <_printf_i+0xcc>
 8013db6:	2220      	movs	r2, #32
 8013db8:	6823      	ldr	r3, [r4, #0]
 8013dba:	4393      	bics	r3, r2
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	e7f8      	b.n	8013db2 <_printf_i+0x176>
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	680d      	ldr	r5, [r1, #0]
 8013dc4:	1d10      	adds	r0, r2, #4
 8013dc6:	6949      	ldr	r1, [r1, #20]
 8013dc8:	6018      	str	r0, [r3, #0]
 8013dca:	6813      	ldr	r3, [r2, #0]
 8013dcc:	062e      	lsls	r6, r5, #24
 8013dce:	d501      	bpl.n	8013dd4 <_printf_i+0x198>
 8013dd0:	6019      	str	r1, [r3, #0]
 8013dd2:	e002      	b.n	8013dda <_printf_i+0x19e>
 8013dd4:	066d      	lsls	r5, r5, #25
 8013dd6:	d5fb      	bpl.n	8013dd0 <_printf_i+0x194>
 8013dd8:	8019      	strh	r1, [r3, #0]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	9d03      	ldr	r5, [sp, #12]
 8013dde:	6123      	str	r3, [r4, #16]
 8013de0:	e7bf      	b.n	8013d62 <_printf_i+0x126>
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	1d11      	adds	r1, r2, #4
 8013de6:	6019      	str	r1, [r3, #0]
 8013de8:	6815      	ldr	r5, [r2, #0]
 8013dea:	2100      	movs	r1, #0
 8013dec:	0028      	movs	r0, r5
 8013dee:	6862      	ldr	r2, [r4, #4]
 8013df0:	f000 f9f7 	bl	80141e2 <memchr>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	d001      	beq.n	8013dfc <_printf_i+0x1c0>
 8013df8:	1b40      	subs	r0, r0, r5
 8013dfa:	6060      	str	r0, [r4, #4]
 8013dfc:	6863      	ldr	r3, [r4, #4]
 8013dfe:	6123      	str	r3, [r4, #16]
 8013e00:	2300      	movs	r3, #0
 8013e02:	9a03      	ldr	r2, [sp, #12]
 8013e04:	7013      	strb	r3, [r2, #0]
 8013e06:	e7ac      	b.n	8013d62 <_printf_i+0x126>
 8013e08:	002a      	movs	r2, r5
 8013e0a:	6923      	ldr	r3, [r4, #16]
 8013e0c:	9906      	ldr	r1, [sp, #24]
 8013e0e:	9805      	ldr	r0, [sp, #20]
 8013e10:	9d07      	ldr	r5, [sp, #28]
 8013e12:	47a8      	blx	r5
 8013e14:	3001      	adds	r0, #1
 8013e16:	d0ae      	beq.n	8013d76 <_printf_i+0x13a>
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	079b      	lsls	r3, r3, #30
 8013e1c:	d415      	bmi.n	8013e4a <_printf_i+0x20e>
 8013e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e20:	68e0      	ldr	r0, [r4, #12]
 8013e22:	4298      	cmp	r0, r3
 8013e24:	daa9      	bge.n	8013d7a <_printf_i+0x13e>
 8013e26:	0018      	movs	r0, r3
 8013e28:	e7a7      	b.n	8013d7a <_printf_i+0x13e>
 8013e2a:	0022      	movs	r2, r4
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	9906      	ldr	r1, [sp, #24]
 8013e30:	9805      	ldr	r0, [sp, #20]
 8013e32:	9e07      	ldr	r6, [sp, #28]
 8013e34:	3219      	adds	r2, #25
 8013e36:	47b0      	blx	r6
 8013e38:	3001      	adds	r0, #1
 8013e3a:	d09c      	beq.n	8013d76 <_printf_i+0x13a>
 8013e3c:	3501      	adds	r5, #1
 8013e3e:	68e3      	ldr	r3, [r4, #12]
 8013e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e42:	1a9b      	subs	r3, r3, r2
 8013e44:	42ab      	cmp	r3, r5
 8013e46:	dcf0      	bgt.n	8013e2a <_printf_i+0x1ee>
 8013e48:	e7e9      	b.n	8013e1e <_printf_i+0x1e2>
 8013e4a:	2500      	movs	r5, #0
 8013e4c:	e7f7      	b.n	8013e3e <_printf_i+0x202>
 8013e4e:	46c0      	nop			@ (mov r8, r8)
 8013e50:	08019f78 	.word	0x08019f78
 8013e54:	08019f89 	.word	0x08019f89

08013e58 <std>:
 8013e58:	2300      	movs	r3, #0
 8013e5a:	b510      	push	{r4, lr}
 8013e5c:	0004      	movs	r4, r0
 8013e5e:	6003      	str	r3, [r0, #0]
 8013e60:	6043      	str	r3, [r0, #4]
 8013e62:	6083      	str	r3, [r0, #8]
 8013e64:	8181      	strh	r1, [r0, #12]
 8013e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8013e68:	81c2      	strh	r2, [r0, #14]
 8013e6a:	6103      	str	r3, [r0, #16]
 8013e6c:	6143      	str	r3, [r0, #20]
 8013e6e:	6183      	str	r3, [r0, #24]
 8013e70:	0019      	movs	r1, r3
 8013e72:	2208      	movs	r2, #8
 8013e74:	305c      	adds	r0, #92	@ 0x5c
 8013e76:	f000 f92d 	bl	80140d4 <memset>
 8013e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8013ea8 <std+0x50>)
 8013e7c:	6224      	str	r4, [r4, #32]
 8013e7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8013e80:	4b0a      	ldr	r3, [pc, #40]	@ (8013eac <std+0x54>)
 8013e82:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013e84:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb0 <std+0x58>)
 8013e86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013e88:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb4 <std+0x5c>)
 8013e8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8013e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb8 <std+0x60>)
 8013e8e:	429c      	cmp	r4, r3
 8013e90:	d005      	beq.n	8013e9e <std+0x46>
 8013e92:	4b0a      	ldr	r3, [pc, #40]	@ (8013ebc <std+0x64>)
 8013e94:	429c      	cmp	r4, r3
 8013e96:	d002      	beq.n	8013e9e <std+0x46>
 8013e98:	4b09      	ldr	r3, [pc, #36]	@ (8013ec0 <std+0x68>)
 8013e9a:	429c      	cmp	r4, r3
 8013e9c:	d103      	bne.n	8013ea6 <std+0x4e>
 8013e9e:	0020      	movs	r0, r4
 8013ea0:	3058      	adds	r0, #88	@ 0x58
 8013ea2:	f000 f99b 	bl	80141dc <__retarget_lock_init_recursive>
 8013ea6:	bd10      	pop	{r4, pc}
 8013ea8:	08014021 	.word	0x08014021
 8013eac:	08014049 	.word	0x08014049
 8013eb0:	08014081 	.word	0x08014081
 8013eb4:	080140ad 	.word	0x080140ad
 8013eb8:	20001e5c 	.word	0x20001e5c
 8013ebc:	20001ec4 	.word	0x20001ec4
 8013ec0:	20001f2c 	.word	0x20001f2c

08013ec4 <stdio_exit_handler>:
 8013ec4:	b510      	push	{r4, lr}
 8013ec6:	4a03      	ldr	r2, [pc, #12]	@ (8013ed4 <stdio_exit_handler+0x10>)
 8013ec8:	4903      	ldr	r1, [pc, #12]	@ (8013ed8 <stdio_exit_handler+0x14>)
 8013eca:	4804      	ldr	r0, [pc, #16]	@ (8013edc <stdio_exit_handler+0x18>)
 8013ecc:	f000 f86c 	bl	8013fa8 <_fwalk_sglue>
 8013ed0:	bd10      	pop	{r4, pc}
 8013ed2:	46c0      	nop			@ (mov r8, r8)
 8013ed4:	20000200 	.word	0x20000200
 8013ed8:	08015c2d 	.word	0x08015c2d
 8013edc:	20000210 	.word	0x20000210

08013ee0 <cleanup_stdio>:
 8013ee0:	6841      	ldr	r1, [r0, #4]
 8013ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8013f10 <cleanup_stdio+0x30>)
 8013ee4:	b510      	push	{r4, lr}
 8013ee6:	0004      	movs	r4, r0
 8013ee8:	4299      	cmp	r1, r3
 8013eea:	d001      	beq.n	8013ef0 <cleanup_stdio+0x10>
 8013eec:	f001 fe9e 	bl	8015c2c <_fflush_r>
 8013ef0:	68a1      	ldr	r1, [r4, #8]
 8013ef2:	4b08      	ldr	r3, [pc, #32]	@ (8013f14 <cleanup_stdio+0x34>)
 8013ef4:	4299      	cmp	r1, r3
 8013ef6:	d002      	beq.n	8013efe <cleanup_stdio+0x1e>
 8013ef8:	0020      	movs	r0, r4
 8013efa:	f001 fe97 	bl	8015c2c <_fflush_r>
 8013efe:	68e1      	ldr	r1, [r4, #12]
 8013f00:	4b05      	ldr	r3, [pc, #20]	@ (8013f18 <cleanup_stdio+0x38>)
 8013f02:	4299      	cmp	r1, r3
 8013f04:	d002      	beq.n	8013f0c <cleanup_stdio+0x2c>
 8013f06:	0020      	movs	r0, r4
 8013f08:	f001 fe90 	bl	8015c2c <_fflush_r>
 8013f0c:	bd10      	pop	{r4, pc}
 8013f0e:	46c0      	nop			@ (mov r8, r8)
 8013f10:	20001e5c 	.word	0x20001e5c
 8013f14:	20001ec4 	.word	0x20001ec4
 8013f18:	20001f2c 	.word	0x20001f2c

08013f1c <global_stdio_init.part.0>:
 8013f1c:	b510      	push	{r4, lr}
 8013f1e:	4b09      	ldr	r3, [pc, #36]	@ (8013f44 <global_stdio_init.part.0+0x28>)
 8013f20:	4a09      	ldr	r2, [pc, #36]	@ (8013f48 <global_stdio_init.part.0+0x2c>)
 8013f22:	2104      	movs	r1, #4
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	4809      	ldr	r0, [pc, #36]	@ (8013f4c <global_stdio_init.part.0+0x30>)
 8013f28:	2200      	movs	r2, #0
 8013f2a:	f7ff ff95 	bl	8013e58 <std>
 8013f2e:	2201      	movs	r2, #1
 8013f30:	2109      	movs	r1, #9
 8013f32:	4807      	ldr	r0, [pc, #28]	@ (8013f50 <global_stdio_init.part.0+0x34>)
 8013f34:	f7ff ff90 	bl	8013e58 <std>
 8013f38:	2202      	movs	r2, #2
 8013f3a:	2112      	movs	r1, #18
 8013f3c:	4805      	ldr	r0, [pc, #20]	@ (8013f54 <global_stdio_init.part.0+0x38>)
 8013f3e:	f7ff ff8b 	bl	8013e58 <std>
 8013f42:	bd10      	pop	{r4, pc}
 8013f44:	20001f94 	.word	0x20001f94
 8013f48:	08013ec5 	.word	0x08013ec5
 8013f4c:	20001e5c 	.word	0x20001e5c
 8013f50:	20001ec4 	.word	0x20001ec4
 8013f54:	20001f2c 	.word	0x20001f2c

08013f58 <__sfp_lock_acquire>:
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	4802      	ldr	r0, [pc, #8]	@ (8013f64 <__sfp_lock_acquire+0xc>)
 8013f5c:	f000 f93f 	bl	80141de <__retarget_lock_acquire_recursive>
 8013f60:	bd10      	pop	{r4, pc}
 8013f62:	46c0      	nop			@ (mov r8, r8)
 8013f64:	20001f9d 	.word	0x20001f9d

08013f68 <__sfp_lock_release>:
 8013f68:	b510      	push	{r4, lr}
 8013f6a:	4802      	ldr	r0, [pc, #8]	@ (8013f74 <__sfp_lock_release+0xc>)
 8013f6c:	f000 f938 	bl	80141e0 <__retarget_lock_release_recursive>
 8013f70:	bd10      	pop	{r4, pc}
 8013f72:	46c0      	nop			@ (mov r8, r8)
 8013f74:	20001f9d 	.word	0x20001f9d

08013f78 <__sinit>:
 8013f78:	b510      	push	{r4, lr}
 8013f7a:	0004      	movs	r4, r0
 8013f7c:	f7ff ffec 	bl	8013f58 <__sfp_lock_acquire>
 8013f80:	6a23      	ldr	r3, [r4, #32]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d002      	beq.n	8013f8c <__sinit+0x14>
 8013f86:	f7ff ffef 	bl	8013f68 <__sfp_lock_release>
 8013f8a:	bd10      	pop	{r4, pc}
 8013f8c:	4b04      	ldr	r3, [pc, #16]	@ (8013fa0 <__sinit+0x28>)
 8013f8e:	6223      	str	r3, [r4, #32]
 8013f90:	4b04      	ldr	r3, [pc, #16]	@ (8013fa4 <__sinit+0x2c>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d1f6      	bne.n	8013f86 <__sinit+0xe>
 8013f98:	f7ff ffc0 	bl	8013f1c <global_stdio_init.part.0>
 8013f9c:	e7f3      	b.n	8013f86 <__sinit+0xe>
 8013f9e:	46c0      	nop			@ (mov r8, r8)
 8013fa0:	08013ee1 	.word	0x08013ee1
 8013fa4:	20001f94 	.word	0x20001f94

08013fa8 <_fwalk_sglue>:
 8013fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013faa:	0014      	movs	r4, r2
 8013fac:	2600      	movs	r6, #0
 8013fae:	9000      	str	r0, [sp, #0]
 8013fb0:	9101      	str	r1, [sp, #4]
 8013fb2:	68a5      	ldr	r5, [r4, #8]
 8013fb4:	6867      	ldr	r7, [r4, #4]
 8013fb6:	3f01      	subs	r7, #1
 8013fb8:	d504      	bpl.n	8013fc4 <_fwalk_sglue+0x1c>
 8013fba:	6824      	ldr	r4, [r4, #0]
 8013fbc:	2c00      	cmp	r4, #0
 8013fbe:	d1f8      	bne.n	8013fb2 <_fwalk_sglue+0xa>
 8013fc0:	0030      	movs	r0, r6
 8013fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013fc4:	89ab      	ldrh	r3, [r5, #12]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d908      	bls.n	8013fdc <_fwalk_sglue+0x34>
 8013fca:	220e      	movs	r2, #14
 8013fcc:	5eab      	ldrsh	r3, [r5, r2]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	d004      	beq.n	8013fdc <_fwalk_sglue+0x34>
 8013fd2:	0029      	movs	r1, r5
 8013fd4:	9800      	ldr	r0, [sp, #0]
 8013fd6:	9b01      	ldr	r3, [sp, #4]
 8013fd8:	4798      	blx	r3
 8013fda:	4306      	orrs	r6, r0
 8013fdc:	3568      	adds	r5, #104	@ 0x68
 8013fde:	e7ea      	b.n	8013fb6 <_fwalk_sglue+0xe>

08013fe0 <siprintf>:
 8013fe0:	b40e      	push	{r1, r2, r3}
 8013fe2:	b500      	push	{lr}
 8013fe4:	490b      	ldr	r1, [pc, #44]	@ (8014014 <siprintf+0x34>)
 8013fe6:	b09c      	sub	sp, #112	@ 0x70
 8013fe8:	ab1d      	add	r3, sp, #116	@ 0x74
 8013fea:	9002      	str	r0, [sp, #8]
 8013fec:	9006      	str	r0, [sp, #24]
 8013fee:	9107      	str	r1, [sp, #28]
 8013ff0:	9104      	str	r1, [sp, #16]
 8013ff2:	4809      	ldr	r0, [pc, #36]	@ (8014018 <siprintf+0x38>)
 8013ff4:	4909      	ldr	r1, [pc, #36]	@ (801401c <siprintf+0x3c>)
 8013ff6:	cb04      	ldmia	r3!, {r2}
 8013ff8:	9105      	str	r1, [sp, #20]
 8013ffa:	6800      	ldr	r0, [r0, #0]
 8013ffc:	a902      	add	r1, sp, #8
 8013ffe:	9301      	str	r3, [sp, #4]
 8014000:	f001 fc90 	bl	8015924 <_svfiprintf_r>
 8014004:	2200      	movs	r2, #0
 8014006:	9b02      	ldr	r3, [sp, #8]
 8014008:	701a      	strb	r2, [r3, #0]
 801400a:	b01c      	add	sp, #112	@ 0x70
 801400c:	bc08      	pop	{r3}
 801400e:	b003      	add	sp, #12
 8014010:	4718      	bx	r3
 8014012:	46c0      	nop			@ (mov r8, r8)
 8014014:	7fffffff 	.word	0x7fffffff
 8014018:	2000020c 	.word	0x2000020c
 801401c:	ffff0208 	.word	0xffff0208

08014020 <__sread>:
 8014020:	b570      	push	{r4, r5, r6, lr}
 8014022:	000c      	movs	r4, r1
 8014024:	250e      	movs	r5, #14
 8014026:	5f49      	ldrsh	r1, [r1, r5]
 8014028:	f000 f886 	bl	8014138 <_read_r>
 801402c:	2800      	cmp	r0, #0
 801402e:	db03      	blt.n	8014038 <__sread+0x18>
 8014030:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014032:	181b      	adds	r3, r3, r0
 8014034:	6563      	str	r3, [r4, #84]	@ 0x54
 8014036:	bd70      	pop	{r4, r5, r6, pc}
 8014038:	89a3      	ldrh	r3, [r4, #12]
 801403a:	4a02      	ldr	r2, [pc, #8]	@ (8014044 <__sread+0x24>)
 801403c:	4013      	ands	r3, r2
 801403e:	81a3      	strh	r3, [r4, #12]
 8014040:	e7f9      	b.n	8014036 <__sread+0x16>
 8014042:	46c0      	nop			@ (mov r8, r8)
 8014044:	ffffefff 	.word	0xffffefff

08014048 <__swrite>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	001f      	movs	r7, r3
 801404c:	898b      	ldrh	r3, [r1, #12]
 801404e:	0005      	movs	r5, r0
 8014050:	000c      	movs	r4, r1
 8014052:	0016      	movs	r6, r2
 8014054:	05db      	lsls	r3, r3, #23
 8014056:	d505      	bpl.n	8014064 <__swrite+0x1c>
 8014058:	230e      	movs	r3, #14
 801405a:	5ec9      	ldrsh	r1, [r1, r3]
 801405c:	2200      	movs	r2, #0
 801405e:	2302      	movs	r3, #2
 8014060:	f000 f856 	bl	8014110 <_lseek_r>
 8014064:	89a3      	ldrh	r3, [r4, #12]
 8014066:	4a05      	ldr	r2, [pc, #20]	@ (801407c <__swrite+0x34>)
 8014068:	0028      	movs	r0, r5
 801406a:	4013      	ands	r3, r2
 801406c:	81a3      	strh	r3, [r4, #12]
 801406e:	0032      	movs	r2, r6
 8014070:	230e      	movs	r3, #14
 8014072:	5ee1      	ldrsh	r1, [r4, r3]
 8014074:	003b      	movs	r3, r7
 8014076:	f000 f873 	bl	8014160 <_write_r>
 801407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801407c:	ffffefff 	.word	0xffffefff

08014080 <__sseek>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	000c      	movs	r4, r1
 8014084:	250e      	movs	r5, #14
 8014086:	5f49      	ldrsh	r1, [r1, r5]
 8014088:	f000 f842 	bl	8014110 <_lseek_r>
 801408c:	89a3      	ldrh	r3, [r4, #12]
 801408e:	1c42      	adds	r2, r0, #1
 8014090:	d103      	bne.n	801409a <__sseek+0x1a>
 8014092:	4a05      	ldr	r2, [pc, #20]	@ (80140a8 <__sseek+0x28>)
 8014094:	4013      	ands	r3, r2
 8014096:	81a3      	strh	r3, [r4, #12]
 8014098:	bd70      	pop	{r4, r5, r6, pc}
 801409a:	2280      	movs	r2, #128	@ 0x80
 801409c:	0152      	lsls	r2, r2, #5
 801409e:	4313      	orrs	r3, r2
 80140a0:	81a3      	strh	r3, [r4, #12]
 80140a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80140a4:	e7f8      	b.n	8014098 <__sseek+0x18>
 80140a6:	46c0      	nop			@ (mov r8, r8)
 80140a8:	ffffefff 	.word	0xffffefff

080140ac <__sclose>:
 80140ac:	b510      	push	{r4, lr}
 80140ae:	230e      	movs	r3, #14
 80140b0:	5ec9      	ldrsh	r1, [r1, r3]
 80140b2:	f000 f81b 	bl	80140ec <_close_r>
 80140b6:	bd10      	pop	{r4, pc}

080140b8 <memcmp>:
 80140b8:	b530      	push	{r4, r5, lr}
 80140ba:	2400      	movs	r4, #0
 80140bc:	3901      	subs	r1, #1
 80140be:	42a2      	cmp	r2, r4
 80140c0:	d101      	bne.n	80140c6 <memcmp+0xe>
 80140c2:	2000      	movs	r0, #0
 80140c4:	e005      	b.n	80140d2 <memcmp+0x1a>
 80140c6:	5d03      	ldrb	r3, [r0, r4]
 80140c8:	3401      	adds	r4, #1
 80140ca:	5d0d      	ldrb	r5, [r1, r4]
 80140cc:	42ab      	cmp	r3, r5
 80140ce:	d0f6      	beq.n	80140be <memcmp+0x6>
 80140d0:	1b58      	subs	r0, r3, r5
 80140d2:	bd30      	pop	{r4, r5, pc}

080140d4 <memset>:
 80140d4:	0003      	movs	r3, r0
 80140d6:	1882      	adds	r2, r0, r2
 80140d8:	4293      	cmp	r3, r2
 80140da:	d100      	bne.n	80140de <memset+0xa>
 80140dc:	4770      	bx	lr
 80140de:	7019      	strb	r1, [r3, #0]
 80140e0:	3301      	adds	r3, #1
 80140e2:	e7f9      	b.n	80140d8 <memset+0x4>

080140e4 <_localeconv_r>:
 80140e4:	4800      	ldr	r0, [pc, #0]	@ (80140e8 <_localeconv_r+0x4>)
 80140e6:	4770      	bx	lr
 80140e8:	2000034c 	.word	0x2000034c

080140ec <_close_r>:
 80140ec:	2300      	movs	r3, #0
 80140ee:	b570      	push	{r4, r5, r6, lr}
 80140f0:	4d06      	ldr	r5, [pc, #24]	@ (801410c <_close_r+0x20>)
 80140f2:	0004      	movs	r4, r0
 80140f4:	0008      	movs	r0, r1
 80140f6:	602b      	str	r3, [r5, #0]
 80140f8:	f7f0 f890 	bl	800421c <_close>
 80140fc:	1c43      	adds	r3, r0, #1
 80140fe:	d103      	bne.n	8014108 <_close_r+0x1c>
 8014100:	682b      	ldr	r3, [r5, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d000      	beq.n	8014108 <_close_r+0x1c>
 8014106:	6023      	str	r3, [r4, #0]
 8014108:	bd70      	pop	{r4, r5, r6, pc}
 801410a:	46c0      	nop			@ (mov r8, r8)
 801410c:	20001f98 	.word	0x20001f98

08014110 <_lseek_r>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	0004      	movs	r4, r0
 8014114:	0008      	movs	r0, r1
 8014116:	0011      	movs	r1, r2
 8014118:	001a      	movs	r2, r3
 801411a:	2300      	movs	r3, #0
 801411c:	4d05      	ldr	r5, [pc, #20]	@ (8014134 <_lseek_r+0x24>)
 801411e:	602b      	str	r3, [r5, #0]
 8014120:	f7f0 f89d 	bl	800425e <_lseek>
 8014124:	1c43      	adds	r3, r0, #1
 8014126:	d103      	bne.n	8014130 <_lseek_r+0x20>
 8014128:	682b      	ldr	r3, [r5, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d000      	beq.n	8014130 <_lseek_r+0x20>
 801412e:	6023      	str	r3, [r4, #0]
 8014130:	bd70      	pop	{r4, r5, r6, pc}
 8014132:	46c0      	nop			@ (mov r8, r8)
 8014134:	20001f98 	.word	0x20001f98

08014138 <_read_r>:
 8014138:	b570      	push	{r4, r5, r6, lr}
 801413a:	0004      	movs	r4, r0
 801413c:	0008      	movs	r0, r1
 801413e:	0011      	movs	r1, r2
 8014140:	001a      	movs	r2, r3
 8014142:	2300      	movs	r3, #0
 8014144:	4d05      	ldr	r5, [pc, #20]	@ (801415c <_read_r+0x24>)
 8014146:	602b      	str	r3, [r5, #0]
 8014148:	f7f0 f82f 	bl	80041aa <_read>
 801414c:	1c43      	adds	r3, r0, #1
 801414e:	d103      	bne.n	8014158 <_read_r+0x20>
 8014150:	682b      	ldr	r3, [r5, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d000      	beq.n	8014158 <_read_r+0x20>
 8014156:	6023      	str	r3, [r4, #0]
 8014158:	bd70      	pop	{r4, r5, r6, pc}
 801415a:	46c0      	nop			@ (mov r8, r8)
 801415c:	20001f98 	.word	0x20001f98

08014160 <_write_r>:
 8014160:	b570      	push	{r4, r5, r6, lr}
 8014162:	0004      	movs	r4, r0
 8014164:	0008      	movs	r0, r1
 8014166:	0011      	movs	r1, r2
 8014168:	001a      	movs	r2, r3
 801416a:	2300      	movs	r3, #0
 801416c:	4d05      	ldr	r5, [pc, #20]	@ (8014184 <_write_r+0x24>)
 801416e:	602b      	str	r3, [r5, #0]
 8014170:	f7f0 f838 	bl	80041e4 <_write>
 8014174:	1c43      	adds	r3, r0, #1
 8014176:	d103      	bne.n	8014180 <_write_r+0x20>
 8014178:	682b      	ldr	r3, [r5, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d000      	beq.n	8014180 <_write_r+0x20>
 801417e:	6023      	str	r3, [r4, #0]
 8014180:	bd70      	pop	{r4, r5, r6, pc}
 8014182:	46c0      	nop			@ (mov r8, r8)
 8014184:	20001f98 	.word	0x20001f98

08014188 <__errno>:
 8014188:	4b01      	ldr	r3, [pc, #4]	@ (8014190 <__errno+0x8>)
 801418a:	6818      	ldr	r0, [r3, #0]
 801418c:	4770      	bx	lr
 801418e:	46c0      	nop			@ (mov r8, r8)
 8014190:	2000020c 	.word	0x2000020c

08014194 <__libc_init_array>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	2600      	movs	r6, #0
 8014198:	4c0c      	ldr	r4, [pc, #48]	@ (80141cc <__libc_init_array+0x38>)
 801419a:	4d0d      	ldr	r5, [pc, #52]	@ (80141d0 <__libc_init_array+0x3c>)
 801419c:	1b64      	subs	r4, r4, r5
 801419e:	10a4      	asrs	r4, r4, #2
 80141a0:	42a6      	cmp	r6, r4
 80141a2:	d109      	bne.n	80141b8 <__libc_init_array+0x24>
 80141a4:	2600      	movs	r6, #0
 80141a6:	f002 fa15 	bl	80165d4 <_init>
 80141aa:	4c0a      	ldr	r4, [pc, #40]	@ (80141d4 <__libc_init_array+0x40>)
 80141ac:	4d0a      	ldr	r5, [pc, #40]	@ (80141d8 <__libc_init_array+0x44>)
 80141ae:	1b64      	subs	r4, r4, r5
 80141b0:	10a4      	asrs	r4, r4, #2
 80141b2:	42a6      	cmp	r6, r4
 80141b4:	d105      	bne.n	80141c2 <__libc_init_array+0x2e>
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	00b3      	lsls	r3, r6, #2
 80141ba:	58eb      	ldr	r3, [r5, r3]
 80141bc:	4798      	blx	r3
 80141be:	3601      	adds	r6, #1
 80141c0:	e7ee      	b.n	80141a0 <__libc_init_array+0xc>
 80141c2:	00b3      	lsls	r3, r6, #2
 80141c4:	58eb      	ldr	r3, [r5, r3]
 80141c6:	4798      	blx	r3
 80141c8:	3601      	adds	r6, #1
 80141ca:	e7f2      	b.n	80141b2 <__libc_init_array+0x1e>
 80141cc:	0801a2d8 	.word	0x0801a2d8
 80141d0:	0801a2d8 	.word	0x0801a2d8
 80141d4:	0801a2dc 	.word	0x0801a2dc
 80141d8:	0801a2d8 	.word	0x0801a2d8

080141dc <__retarget_lock_init_recursive>:
 80141dc:	4770      	bx	lr

080141de <__retarget_lock_acquire_recursive>:
 80141de:	4770      	bx	lr

080141e0 <__retarget_lock_release_recursive>:
 80141e0:	4770      	bx	lr

080141e2 <memchr>:
 80141e2:	b2c9      	uxtb	r1, r1
 80141e4:	1882      	adds	r2, r0, r2
 80141e6:	4290      	cmp	r0, r2
 80141e8:	d101      	bne.n	80141ee <memchr+0xc>
 80141ea:	2000      	movs	r0, #0
 80141ec:	4770      	bx	lr
 80141ee:	7803      	ldrb	r3, [r0, #0]
 80141f0:	428b      	cmp	r3, r1
 80141f2:	d0fb      	beq.n	80141ec <memchr+0xa>
 80141f4:	3001      	adds	r0, #1
 80141f6:	e7f6      	b.n	80141e6 <memchr+0x4>

080141f8 <memcpy>:
 80141f8:	2300      	movs	r3, #0
 80141fa:	b510      	push	{r4, lr}
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d100      	bne.n	8014202 <memcpy+0xa>
 8014200:	bd10      	pop	{r4, pc}
 8014202:	5ccc      	ldrb	r4, [r1, r3]
 8014204:	54c4      	strb	r4, [r0, r3]
 8014206:	3301      	adds	r3, #1
 8014208:	e7f8      	b.n	80141fc <memcpy+0x4>

0801420a <quorem>:
 801420a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801420c:	6902      	ldr	r2, [r0, #16]
 801420e:	690f      	ldr	r7, [r1, #16]
 8014210:	b087      	sub	sp, #28
 8014212:	0006      	movs	r6, r0
 8014214:	000b      	movs	r3, r1
 8014216:	2000      	movs	r0, #0
 8014218:	9102      	str	r1, [sp, #8]
 801421a:	42ba      	cmp	r2, r7
 801421c:	db6d      	blt.n	80142fa <quorem+0xf0>
 801421e:	3f01      	subs	r7, #1
 8014220:	00bc      	lsls	r4, r7, #2
 8014222:	3314      	adds	r3, #20
 8014224:	9305      	str	r3, [sp, #20]
 8014226:	191b      	adds	r3, r3, r4
 8014228:	9303      	str	r3, [sp, #12]
 801422a:	0033      	movs	r3, r6
 801422c:	3314      	adds	r3, #20
 801422e:	191c      	adds	r4, r3, r4
 8014230:	9301      	str	r3, [sp, #4]
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	9304      	str	r3, [sp, #16]
 8014236:	9b03      	ldr	r3, [sp, #12]
 8014238:	9804      	ldr	r0, [sp, #16]
 801423a:	681d      	ldr	r5, [r3, #0]
 801423c:	3501      	adds	r5, #1
 801423e:	0029      	movs	r1, r5
 8014240:	f7eb ff7e 	bl	8000140 <__udivsi3>
 8014244:	9b04      	ldr	r3, [sp, #16]
 8014246:	9000      	str	r0, [sp, #0]
 8014248:	42ab      	cmp	r3, r5
 801424a:	d32b      	bcc.n	80142a4 <quorem+0x9a>
 801424c:	9b05      	ldr	r3, [sp, #20]
 801424e:	9d01      	ldr	r5, [sp, #4]
 8014250:	469c      	mov	ip, r3
 8014252:	2300      	movs	r3, #0
 8014254:	9305      	str	r3, [sp, #20]
 8014256:	9304      	str	r3, [sp, #16]
 8014258:	4662      	mov	r2, ip
 801425a:	ca08      	ldmia	r2!, {r3}
 801425c:	6828      	ldr	r0, [r5, #0]
 801425e:	4694      	mov	ip, r2
 8014260:	9a00      	ldr	r2, [sp, #0]
 8014262:	b299      	uxth	r1, r3
 8014264:	4351      	muls	r1, r2
 8014266:	9a05      	ldr	r2, [sp, #20]
 8014268:	0c1b      	lsrs	r3, r3, #16
 801426a:	1889      	adds	r1, r1, r2
 801426c:	9a00      	ldr	r2, [sp, #0]
 801426e:	4353      	muls	r3, r2
 8014270:	0c0a      	lsrs	r2, r1, #16
 8014272:	189b      	adds	r3, r3, r2
 8014274:	0c1a      	lsrs	r2, r3, #16
 8014276:	b289      	uxth	r1, r1
 8014278:	9205      	str	r2, [sp, #20]
 801427a:	b282      	uxth	r2, r0
 801427c:	1a52      	subs	r2, r2, r1
 801427e:	9904      	ldr	r1, [sp, #16]
 8014280:	0c00      	lsrs	r0, r0, #16
 8014282:	1852      	adds	r2, r2, r1
 8014284:	b29b      	uxth	r3, r3
 8014286:	1411      	asrs	r1, r2, #16
 8014288:	1ac3      	subs	r3, r0, r3
 801428a:	185b      	adds	r3, r3, r1
 801428c:	1419      	asrs	r1, r3, #16
 801428e:	b292      	uxth	r2, r2
 8014290:	041b      	lsls	r3, r3, #16
 8014292:	431a      	orrs	r2, r3
 8014294:	9b03      	ldr	r3, [sp, #12]
 8014296:	9104      	str	r1, [sp, #16]
 8014298:	c504      	stmia	r5!, {r2}
 801429a:	4563      	cmp	r3, ip
 801429c:	d2dc      	bcs.n	8014258 <quorem+0x4e>
 801429e:	6823      	ldr	r3, [r4, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d030      	beq.n	8014306 <quorem+0xfc>
 80142a4:	0030      	movs	r0, r6
 80142a6:	9902      	ldr	r1, [sp, #8]
 80142a8:	f001 f9c6 	bl	8015638 <__mcmp>
 80142ac:	2800      	cmp	r0, #0
 80142ae:	db23      	blt.n	80142f8 <quorem+0xee>
 80142b0:	0034      	movs	r4, r6
 80142b2:	2500      	movs	r5, #0
 80142b4:	9902      	ldr	r1, [sp, #8]
 80142b6:	3414      	adds	r4, #20
 80142b8:	3114      	adds	r1, #20
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	c901      	ldmia	r1!, {r0}
 80142be:	9302      	str	r3, [sp, #8]
 80142c0:	466b      	mov	r3, sp
 80142c2:	891b      	ldrh	r3, [r3, #8]
 80142c4:	b282      	uxth	r2, r0
 80142c6:	1a9a      	subs	r2, r3, r2
 80142c8:	9b02      	ldr	r3, [sp, #8]
 80142ca:	1952      	adds	r2, r2, r5
 80142cc:	0c00      	lsrs	r0, r0, #16
 80142ce:	0c1b      	lsrs	r3, r3, #16
 80142d0:	1a1b      	subs	r3, r3, r0
 80142d2:	1410      	asrs	r0, r2, #16
 80142d4:	181b      	adds	r3, r3, r0
 80142d6:	141d      	asrs	r5, r3, #16
 80142d8:	b292      	uxth	r2, r2
 80142da:	041b      	lsls	r3, r3, #16
 80142dc:	431a      	orrs	r2, r3
 80142de:	9b03      	ldr	r3, [sp, #12]
 80142e0:	c404      	stmia	r4!, {r2}
 80142e2:	428b      	cmp	r3, r1
 80142e4:	d2e9      	bcs.n	80142ba <quorem+0xb0>
 80142e6:	9a01      	ldr	r2, [sp, #4]
 80142e8:	00bb      	lsls	r3, r7, #2
 80142ea:	18d3      	adds	r3, r2, r3
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	2a00      	cmp	r2, #0
 80142f0:	d013      	beq.n	801431a <quorem+0x110>
 80142f2:	9b00      	ldr	r3, [sp, #0]
 80142f4:	3301      	adds	r3, #1
 80142f6:	9300      	str	r3, [sp, #0]
 80142f8:	9800      	ldr	r0, [sp, #0]
 80142fa:	b007      	add	sp, #28
 80142fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d104      	bne.n	801430e <quorem+0x104>
 8014304:	3f01      	subs	r7, #1
 8014306:	9b01      	ldr	r3, [sp, #4]
 8014308:	3c04      	subs	r4, #4
 801430a:	42a3      	cmp	r3, r4
 801430c:	d3f7      	bcc.n	80142fe <quorem+0xf4>
 801430e:	6137      	str	r7, [r6, #16]
 8014310:	e7c8      	b.n	80142a4 <quorem+0x9a>
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	2a00      	cmp	r2, #0
 8014316:	d104      	bne.n	8014322 <quorem+0x118>
 8014318:	3f01      	subs	r7, #1
 801431a:	9a01      	ldr	r2, [sp, #4]
 801431c:	3b04      	subs	r3, #4
 801431e:	429a      	cmp	r2, r3
 8014320:	d3f7      	bcc.n	8014312 <quorem+0x108>
 8014322:	6137      	str	r7, [r6, #16]
 8014324:	e7e5      	b.n	80142f2 <quorem+0xe8>
	...

08014328 <_dtoa_r>:
 8014328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432a:	0014      	movs	r4, r2
 801432c:	001d      	movs	r5, r3
 801432e:	69c6      	ldr	r6, [r0, #28]
 8014330:	b09d      	sub	sp, #116	@ 0x74
 8014332:	940a      	str	r4, [sp, #40]	@ 0x28
 8014334:	950b      	str	r5, [sp, #44]	@ 0x2c
 8014336:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8014338:	9003      	str	r0, [sp, #12]
 801433a:	2e00      	cmp	r6, #0
 801433c:	d10f      	bne.n	801435e <_dtoa_r+0x36>
 801433e:	2010      	movs	r0, #16
 8014340:	f000 fe30 	bl	8014fa4 <malloc>
 8014344:	9b03      	ldr	r3, [sp, #12]
 8014346:	1e02      	subs	r2, r0, #0
 8014348:	61d8      	str	r0, [r3, #28]
 801434a:	d104      	bne.n	8014356 <_dtoa_r+0x2e>
 801434c:	21ef      	movs	r1, #239	@ 0xef
 801434e:	4bc7      	ldr	r3, [pc, #796]	@ (801466c <_dtoa_r+0x344>)
 8014350:	48c7      	ldr	r0, [pc, #796]	@ (8014670 <_dtoa_r+0x348>)
 8014352:	f001 fcbb 	bl	8015ccc <__assert_func>
 8014356:	6046      	str	r6, [r0, #4]
 8014358:	6086      	str	r6, [r0, #8]
 801435a:	6006      	str	r6, [r0, #0]
 801435c:	60c6      	str	r6, [r0, #12]
 801435e:	9b03      	ldr	r3, [sp, #12]
 8014360:	69db      	ldr	r3, [r3, #28]
 8014362:	6819      	ldr	r1, [r3, #0]
 8014364:	2900      	cmp	r1, #0
 8014366:	d00b      	beq.n	8014380 <_dtoa_r+0x58>
 8014368:	685a      	ldr	r2, [r3, #4]
 801436a:	2301      	movs	r3, #1
 801436c:	4093      	lsls	r3, r2
 801436e:	604a      	str	r2, [r1, #4]
 8014370:	608b      	str	r3, [r1, #8]
 8014372:	9803      	ldr	r0, [sp, #12]
 8014374:	f000 ff16 	bl	80151a4 <_Bfree>
 8014378:	2200      	movs	r2, #0
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	69db      	ldr	r3, [r3, #28]
 801437e:	601a      	str	r2, [r3, #0]
 8014380:	2d00      	cmp	r5, #0
 8014382:	da1e      	bge.n	80143c2 <_dtoa_r+0x9a>
 8014384:	2301      	movs	r3, #1
 8014386:	603b      	str	r3, [r7, #0]
 8014388:	006b      	lsls	r3, r5, #1
 801438a:	085b      	lsrs	r3, r3, #1
 801438c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801438e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014390:	4bb8      	ldr	r3, [pc, #736]	@ (8014674 <_dtoa_r+0x34c>)
 8014392:	4ab8      	ldr	r2, [pc, #736]	@ (8014674 <_dtoa_r+0x34c>)
 8014394:	403b      	ands	r3, r7
 8014396:	4293      	cmp	r3, r2
 8014398:	d116      	bne.n	80143c8 <_dtoa_r+0xa0>
 801439a:	4bb7      	ldr	r3, [pc, #732]	@ (8014678 <_dtoa_r+0x350>)
 801439c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801439e:	6013      	str	r3, [r2, #0]
 80143a0:	033b      	lsls	r3, r7, #12
 80143a2:	0b1b      	lsrs	r3, r3, #12
 80143a4:	4323      	orrs	r3, r4
 80143a6:	d101      	bne.n	80143ac <_dtoa_r+0x84>
 80143a8:	f000 fd83 	bl	8014eb2 <_dtoa_r+0xb8a>
 80143ac:	4bb3      	ldr	r3, [pc, #716]	@ (801467c <_dtoa_r+0x354>)
 80143ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143b0:	9308      	str	r3, [sp, #32]
 80143b2:	2a00      	cmp	r2, #0
 80143b4:	d002      	beq.n	80143bc <_dtoa_r+0x94>
 80143b6:	4bb2      	ldr	r3, [pc, #712]	@ (8014680 <_dtoa_r+0x358>)
 80143b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143ba:	6013      	str	r3, [r2, #0]
 80143bc:	9808      	ldr	r0, [sp, #32]
 80143be:	b01d      	add	sp, #116	@ 0x74
 80143c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143c2:	2300      	movs	r3, #0
 80143c4:	603b      	str	r3, [r7, #0]
 80143c6:	e7e2      	b.n	801438e <_dtoa_r+0x66>
 80143c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80143ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80143ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80143d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80143d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80143d4:	2200      	movs	r2, #0
 80143d6:	2300      	movs	r3, #0
 80143d8:	f7ec f838 	bl	800044c <__aeabi_dcmpeq>
 80143dc:	1e06      	subs	r6, r0, #0
 80143de:	d00b      	beq.n	80143f8 <_dtoa_r+0xd0>
 80143e0:	2301      	movs	r3, #1
 80143e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <_dtoa_r+0xca>
 80143ec:	4ba5      	ldr	r3, [pc, #660]	@ (8014684 <_dtoa_r+0x35c>)
 80143ee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80143f0:	6013      	str	r3, [r2, #0]
 80143f2:	4ba5      	ldr	r3, [pc, #660]	@ (8014688 <_dtoa_r+0x360>)
 80143f4:	9308      	str	r3, [sp, #32]
 80143f6:	e7e1      	b.n	80143bc <_dtoa_r+0x94>
 80143f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80143fa:	9301      	str	r3, [sp, #4]
 80143fc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	9803      	ldr	r0, [sp, #12]
 8014402:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014406:	f001 f9cd 	bl	80157a4 <__d2b>
 801440a:	007a      	lsls	r2, r7, #1
 801440c:	9005      	str	r0, [sp, #20]
 801440e:	0d52      	lsrs	r2, r2, #21
 8014410:	d100      	bne.n	8014414 <_dtoa_r+0xec>
 8014412:	e07b      	b.n	801450c <_dtoa_r+0x1e4>
 8014414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014416:	9618      	str	r6, [sp, #96]	@ 0x60
 8014418:	0319      	lsls	r1, r3, #12
 801441a:	4b9c      	ldr	r3, [pc, #624]	@ (801468c <_dtoa_r+0x364>)
 801441c:	0b09      	lsrs	r1, r1, #12
 801441e:	430b      	orrs	r3, r1
 8014420:	499b      	ldr	r1, [pc, #620]	@ (8014690 <_dtoa_r+0x368>)
 8014422:	1857      	adds	r7, r2, r1
 8014424:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014426:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014428:	0019      	movs	r1, r3
 801442a:	2200      	movs	r2, #0
 801442c:	4b99      	ldr	r3, [pc, #612]	@ (8014694 <_dtoa_r+0x36c>)
 801442e:	f7ed fdb9 	bl	8001fa4 <__aeabi_dsub>
 8014432:	4a99      	ldr	r2, [pc, #612]	@ (8014698 <_dtoa_r+0x370>)
 8014434:	4b99      	ldr	r3, [pc, #612]	@ (801469c <_dtoa_r+0x374>)
 8014436:	f7ed faed 	bl	8001a14 <__aeabi_dmul>
 801443a:	4a99      	ldr	r2, [pc, #612]	@ (80146a0 <_dtoa_r+0x378>)
 801443c:	4b99      	ldr	r3, [pc, #612]	@ (80146a4 <_dtoa_r+0x37c>)
 801443e:	f7ec fb41 	bl	8000ac4 <__aeabi_dadd>
 8014442:	0004      	movs	r4, r0
 8014444:	0038      	movs	r0, r7
 8014446:	000d      	movs	r5, r1
 8014448:	f7ee f9a6 	bl	8002798 <__aeabi_i2d>
 801444c:	4a96      	ldr	r2, [pc, #600]	@ (80146a8 <_dtoa_r+0x380>)
 801444e:	4b97      	ldr	r3, [pc, #604]	@ (80146ac <_dtoa_r+0x384>)
 8014450:	f7ed fae0 	bl	8001a14 <__aeabi_dmul>
 8014454:	0002      	movs	r2, r0
 8014456:	000b      	movs	r3, r1
 8014458:	0020      	movs	r0, r4
 801445a:	0029      	movs	r1, r5
 801445c:	f7ec fb32 	bl	8000ac4 <__aeabi_dadd>
 8014460:	0004      	movs	r4, r0
 8014462:	000d      	movs	r5, r1
 8014464:	f7ee f95c 	bl	8002720 <__aeabi_d2iz>
 8014468:	2200      	movs	r2, #0
 801446a:	9004      	str	r0, [sp, #16]
 801446c:	2300      	movs	r3, #0
 801446e:	0020      	movs	r0, r4
 8014470:	0029      	movs	r1, r5
 8014472:	f7eb fff1 	bl	8000458 <__aeabi_dcmplt>
 8014476:	2800      	cmp	r0, #0
 8014478:	d00b      	beq.n	8014492 <_dtoa_r+0x16a>
 801447a:	9804      	ldr	r0, [sp, #16]
 801447c:	f7ee f98c 	bl	8002798 <__aeabi_i2d>
 8014480:	002b      	movs	r3, r5
 8014482:	0022      	movs	r2, r4
 8014484:	f7eb ffe2 	bl	800044c <__aeabi_dcmpeq>
 8014488:	4243      	negs	r3, r0
 801448a:	4158      	adcs	r0, r3
 801448c:	9b04      	ldr	r3, [sp, #16]
 801448e:	1a1b      	subs	r3, r3, r0
 8014490:	9304      	str	r3, [sp, #16]
 8014492:	2301      	movs	r3, #1
 8014494:	9315      	str	r3, [sp, #84]	@ 0x54
 8014496:	9b04      	ldr	r3, [sp, #16]
 8014498:	2b16      	cmp	r3, #22
 801449a:	d810      	bhi.n	80144be <_dtoa_r+0x196>
 801449c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801449e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80144a0:	9a04      	ldr	r2, [sp, #16]
 80144a2:	4b83      	ldr	r3, [pc, #524]	@ (80146b0 <_dtoa_r+0x388>)
 80144a4:	00d2      	lsls	r2, r2, #3
 80144a6:	189b      	adds	r3, r3, r2
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	f7eb ffd4 	bl	8000458 <__aeabi_dcmplt>
 80144b0:	2800      	cmp	r0, #0
 80144b2:	d047      	beq.n	8014544 <_dtoa_r+0x21c>
 80144b4:	9b04      	ldr	r3, [sp, #16]
 80144b6:	3b01      	subs	r3, #1
 80144b8:	9304      	str	r3, [sp, #16]
 80144ba:	2300      	movs	r3, #0
 80144bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80144be:	2200      	movs	r2, #0
 80144c0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80144c2:	9206      	str	r2, [sp, #24]
 80144c4:	1bdb      	subs	r3, r3, r7
 80144c6:	1e5a      	subs	r2, r3, #1
 80144c8:	d53e      	bpl.n	8014548 <_dtoa_r+0x220>
 80144ca:	2201      	movs	r2, #1
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	9306      	str	r3, [sp, #24]
 80144d0:	2300      	movs	r3, #0
 80144d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80144d4:	9b04      	ldr	r3, [sp, #16]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	db38      	blt.n	801454c <_dtoa_r+0x224>
 80144da:	9a04      	ldr	r2, [sp, #16]
 80144dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144de:	4694      	mov	ip, r2
 80144e0:	4463      	add	r3, ip
 80144e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80144e4:	2300      	movs	r3, #0
 80144e6:	9214      	str	r2, [sp, #80]	@ 0x50
 80144e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80144ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80144ec:	2401      	movs	r4, #1
 80144ee:	2b09      	cmp	r3, #9
 80144f0:	d867      	bhi.n	80145c2 <_dtoa_r+0x29a>
 80144f2:	2b05      	cmp	r3, #5
 80144f4:	dd02      	ble.n	80144fc <_dtoa_r+0x1d4>
 80144f6:	2400      	movs	r4, #0
 80144f8:	3b04      	subs	r3, #4
 80144fa:	9322      	str	r3, [sp, #136]	@ 0x88
 80144fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80144fe:	1e98      	subs	r0, r3, #2
 8014500:	2803      	cmp	r0, #3
 8014502:	d867      	bhi.n	80145d4 <_dtoa_r+0x2ac>
 8014504:	f7eb fe08 	bl	8000118 <__gnu_thumb1_case_uqi>
 8014508:	5b383a2b 	.word	0x5b383a2b
 801450c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801450e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8014510:	18f6      	adds	r6, r6, r3
 8014512:	4b68      	ldr	r3, [pc, #416]	@ (80146b4 <_dtoa_r+0x38c>)
 8014514:	18f2      	adds	r2, r6, r3
 8014516:	2a20      	cmp	r2, #32
 8014518:	dd0f      	ble.n	801453a <_dtoa_r+0x212>
 801451a:	2340      	movs	r3, #64	@ 0x40
 801451c:	1a9b      	subs	r3, r3, r2
 801451e:	409f      	lsls	r7, r3
 8014520:	4b65      	ldr	r3, [pc, #404]	@ (80146b8 <_dtoa_r+0x390>)
 8014522:	0038      	movs	r0, r7
 8014524:	18f3      	adds	r3, r6, r3
 8014526:	40dc      	lsrs	r4, r3
 8014528:	4320      	orrs	r0, r4
 801452a:	f7ee f963 	bl	80027f4 <__aeabi_ui2d>
 801452e:	2201      	movs	r2, #1
 8014530:	4b62      	ldr	r3, [pc, #392]	@ (80146bc <_dtoa_r+0x394>)
 8014532:	1e77      	subs	r7, r6, #1
 8014534:	18cb      	adds	r3, r1, r3
 8014536:	9218      	str	r2, [sp, #96]	@ 0x60
 8014538:	e776      	b.n	8014428 <_dtoa_r+0x100>
 801453a:	2320      	movs	r3, #32
 801453c:	0020      	movs	r0, r4
 801453e:	1a9b      	subs	r3, r3, r2
 8014540:	4098      	lsls	r0, r3
 8014542:	e7f2      	b.n	801452a <_dtoa_r+0x202>
 8014544:	9015      	str	r0, [sp, #84]	@ 0x54
 8014546:	e7ba      	b.n	80144be <_dtoa_r+0x196>
 8014548:	920d      	str	r2, [sp, #52]	@ 0x34
 801454a:	e7c3      	b.n	80144d4 <_dtoa_r+0x1ac>
 801454c:	9b06      	ldr	r3, [sp, #24]
 801454e:	9a04      	ldr	r2, [sp, #16]
 8014550:	1a9b      	subs	r3, r3, r2
 8014552:	9306      	str	r3, [sp, #24]
 8014554:	4253      	negs	r3, r2
 8014556:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014558:	2300      	movs	r3, #0
 801455a:	9314      	str	r3, [sp, #80]	@ 0x50
 801455c:	e7c5      	b.n	80144ea <_dtoa_r+0x1c2>
 801455e:	2300      	movs	r3, #0
 8014560:	9310      	str	r3, [sp, #64]	@ 0x40
 8014562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014564:	930e      	str	r3, [sp, #56]	@ 0x38
 8014566:	9309      	str	r3, [sp, #36]	@ 0x24
 8014568:	2b00      	cmp	r3, #0
 801456a:	dc13      	bgt.n	8014594 <_dtoa_r+0x26c>
 801456c:	2301      	movs	r3, #1
 801456e:	001a      	movs	r2, r3
 8014570:	930e      	str	r3, [sp, #56]	@ 0x38
 8014572:	9309      	str	r3, [sp, #36]	@ 0x24
 8014574:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014576:	e00d      	b.n	8014594 <_dtoa_r+0x26c>
 8014578:	2301      	movs	r3, #1
 801457a:	e7f1      	b.n	8014560 <_dtoa_r+0x238>
 801457c:	2300      	movs	r3, #0
 801457e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014580:	9310      	str	r3, [sp, #64]	@ 0x40
 8014582:	4694      	mov	ip, r2
 8014584:	9b04      	ldr	r3, [sp, #16]
 8014586:	4463      	add	r3, ip
 8014588:	930e      	str	r3, [sp, #56]	@ 0x38
 801458a:	3301      	adds	r3, #1
 801458c:	9309      	str	r3, [sp, #36]	@ 0x24
 801458e:	2b00      	cmp	r3, #0
 8014590:	dc00      	bgt.n	8014594 <_dtoa_r+0x26c>
 8014592:	2301      	movs	r3, #1
 8014594:	9a03      	ldr	r2, [sp, #12]
 8014596:	2100      	movs	r1, #0
 8014598:	69d0      	ldr	r0, [r2, #28]
 801459a:	2204      	movs	r2, #4
 801459c:	0015      	movs	r5, r2
 801459e:	3514      	adds	r5, #20
 80145a0:	429d      	cmp	r5, r3
 80145a2:	d91b      	bls.n	80145dc <_dtoa_r+0x2b4>
 80145a4:	6041      	str	r1, [r0, #4]
 80145a6:	9803      	ldr	r0, [sp, #12]
 80145a8:	f000 fdb8 	bl	801511c <_Balloc>
 80145ac:	9008      	str	r0, [sp, #32]
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d117      	bne.n	80145e2 <_dtoa_r+0x2ba>
 80145b2:	21b0      	movs	r1, #176	@ 0xb0
 80145b4:	4b42      	ldr	r3, [pc, #264]	@ (80146c0 <_dtoa_r+0x398>)
 80145b6:	482e      	ldr	r0, [pc, #184]	@ (8014670 <_dtoa_r+0x348>)
 80145b8:	9a08      	ldr	r2, [sp, #32]
 80145ba:	31ff      	adds	r1, #255	@ 0xff
 80145bc:	e6c9      	b.n	8014352 <_dtoa_r+0x2a>
 80145be:	2301      	movs	r3, #1
 80145c0:	e7dd      	b.n	801457e <_dtoa_r+0x256>
 80145c2:	2300      	movs	r3, #0
 80145c4:	9410      	str	r4, [sp, #64]	@ 0x40
 80145c6:	9322      	str	r3, [sp, #136]	@ 0x88
 80145c8:	3b01      	subs	r3, #1
 80145ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80145cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80145ce:	2200      	movs	r2, #0
 80145d0:	3313      	adds	r3, #19
 80145d2:	e7cf      	b.n	8014574 <_dtoa_r+0x24c>
 80145d4:	2301      	movs	r3, #1
 80145d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80145d8:	3b02      	subs	r3, #2
 80145da:	e7f6      	b.n	80145ca <_dtoa_r+0x2a2>
 80145dc:	3101      	adds	r1, #1
 80145de:	0052      	lsls	r2, r2, #1
 80145e0:	e7dc      	b.n	801459c <_dtoa_r+0x274>
 80145e2:	9b03      	ldr	r3, [sp, #12]
 80145e4:	9a08      	ldr	r2, [sp, #32]
 80145e6:	69db      	ldr	r3, [r3, #28]
 80145e8:	601a      	str	r2, [r3, #0]
 80145ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ec:	2b0e      	cmp	r3, #14
 80145ee:	d900      	bls.n	80145f2 <_dtoa_r+0x2ca>
 80145f0:	e0d9      	b.n	80147a6 <_dtoa_r+0x47e>
 80145f2:	2c00      	cmp	r4, #0
 80145f4:	d100      	bne.n	80145f8 <_dtoa_r+0x2d0>
 80145f6:	e0d6      	b.n	80147a6 <_dtoa_r+0x47e>
 80145f8:	9b04      	ldr	r3, [sp, #16]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	dd64      	ble.n	80146c8 <_dtoa_r+0x3a0>
 80145fe:	210f      	movs	r1, #15
 8014600:	9a04      	ldr	r2, [sp, #16]
 8014602:	4b2b      	ldr	r3, [pc, #172]	@ (80146b0 <_dtoa_r+0x388>)
 8014604:	400a      	ands	r2, r1
 8014606:	00d2      	lsls	r2, r2, #3
 8014608:	189b      	adds	r3, r3, r2
 801460a:	681e      	ldr	r6, [r3, #0]
 801460c:	685f      	ldr	r7, [r3, #4]
 801460e:	9b04      	ldr	r3, [sp, #16]
 8014610:	2402      	movs	r4, #2
 8014612:	111d      	asrs	r5, r3, #4
 8014614:	05db      	lsls	r3, r3, #23
 8014616:	d50a      	bpl.n	801462e <_dtoa_r+0x306>
 8014618:	4b2a      	ldr	r3, [pc, #168]	@ (80146c4 <_dtoa_r+0x39c>)
 801461a:	400d      	ands	r5, r1
 801461c:	6a1a      	ldr	r2, [r3, #32]
 801461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014620:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014622:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014624:	f7ec fdb2 	bl	800118c <__aeabi_ddiv>
 8014628:	900a      	str	r0, [sp, #40]	@ 0x28
 801462a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801462c:	3401      	adds	r4, #1
 801462e:	4b25      	ldr	r3, [pc, #148]	@ (80146c4 <_dtoa_r+0x39c>)
 8014630:	930c      	str	r3, [sp, #48]	@ 0x30
 8014632:	2d00      	cmp	r5, #0
 8014634:	d108      	bne.n	8014648 <_dtoa_r+0x320>
 8014636:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801463a:	0032      	movs	r2, r6
 801463c:	003b      	movs	r3, r7
 801463e:	f7ec fda5 	bl	800118c <__aeabi_ddiv>
 8014642:	900a      	str	r0, [sp, #40]	@ 0x28
 8014644:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014646:	e05a      	b.n	80146fe <_dtoa_r+0x3d6>
 8014648:	2301      	movs	r3, #1
 801464a:	421d      	tst	r5, r3
 801464c:	d009      	beq.n	8014662 <_dtoa_r+0x33a>
 801464e:	18e4      	adds	r4, r4, r3
 8014650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014652:	0030      	movs	r0, r6
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	0039      	movs	r1, r7
 801465a:	f7ed f9db 	bl	8001a14 <__aeabi_dmul>
 801465e:	0006      	movs	r6, r0
 8014660:	000f      	movs	r7, r1
 8014662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014664:	106d      	asrs	r5, r5, #1
 8014666:	3308      	adds	r3, #8
 8014668:	e7e2      	b.n	8014630 <_dtoa_r+0x308>
 801466a:	46c0      	nop			@ (mov r8, r8)
 801466c:	08019fa7 	.word	0x08019fa7
 8014670:	08019fbe 	.word	0x08019fbe
 8014674:	7ff00000 	.word	0x7ff00000
 8014678:	0000270f 	.word	0x0000270f
 801467c:	08019fa3 	.word	0x08019fa3
 8014680:	08019fa6 	.word	0x08019fa6
 8014684:	08019f77 	.word	0x08019f77
 8014688:	08019f76 	.word	0x08019f76
 801468c:	3ff00000 	.word	0x3ff00000
 8014690:	fffffc01 	.word	0xfffffc01
 8014694:	3ff80000 	.word	0x3ff80000
 8014698:	636f4361 	.word	0x636f4361
 801469c:	3fd287a7 	.word	0x3fd287a7
 80146a0:	8b60c8b3 	.word	0x8b60c8b3
 80146a4:	3fc68a28 	.word	0x3fc68a28
 80146a8:	509f79fb 	.word	0x509f79fb
 80146ac:	3fd34413 	.word	0x3fd34413
 80146b0:	0801a0b8 	.word	0x0801a0b8
 80146b4:	00000432 	.word	0x00000432
 80146b8:	00000412 	.word	0x00000412
 80146bc:	fe100000 	.word	0xfe100000
 80146c0:	0801a016 	.word	0x0801a016
 80146c4:	0801a090 	.word	0x0801a090
 80146c8:	9b04      	ldr	r3, [sp, #16]
 80146ca:	2402      	movs	r4, #2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d016      	beq.n	80146fe <_dtoa_r+0x3d6>
 80146d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80146d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80146d4:	220f      	movs	r2, #15
 80146d6:	425d      	negs	r5, r3
 80146d8:	402a      	ands	r2, r5
 80146da:	4bd7      	ldr	r3, [pc, #860]	@ (8014a38 <_dtoa_r+0x710>)
 80146dc:	00d2      	lsls	r2, r2, #3
 80146de:	189b      	adds	r3, r3, r2
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	f7ed f996 	bl	8001a14 <__aeabi_dmul>
 80146e8:	2701      	movs	r7, #1
 80146ea:	2300      	movs	r3, #0
 80146ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80146ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 80146f0:	4ed2      	ldr	r6, [pc, #840]	@ (8014a3c <_dtoa_r+0x714>)
 80146f2:	112d      	asrs	r5, r5, #4
 80146f4:	2d00      	cmp	r5, #0
 80146f6:	d000      	beq.n	80146fa <_dtoa_r+0x3d2>
 80146f8:	e0ba      	b.n	8014870 <_dtoa_r+0x548>
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1a1      	bne.n	8014642 <_dtoa_r+0x31a>
 80146fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014700:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014702:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014704:	2b00      	cmp	r3, #0
 8014706:	d100      	bne.n	801470a <_dtoa_r+0x3e2>
 8014708:	e0bd      	b.n	8014886 <_dtoa_r+0x55e>
 801470a:	2200      	movs	r2, #0
 801470c:	0030      	movs	r0, r6
 801470e:	0039      	movs	r1, r7
 8014710:	4bcb      	ldr	r3, [pc, #812]	@ (8014a40 <_dtoa_r+0x718>)
 8014712:	f7eb fea1 	bl	8000458 <__aeabi_dcmplt>
 8014716:	2800      	cmp	r0, #0
 8014718:	d100      	bne.n	801471c <_dtoa_r+0x3f4>
 801471a:	e0b4      	b.n	8014886 <_dtoa_r+0x55e>
 801471c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801471e:	2b00      	cmp	r3, #0
 8014720:	d100      	bne.n	8014724 <_dtoa_r+0x3fc>
 8014722:	e0b0      	b.n	8014886 <_dtoa_r+0x55e>
 8014724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014726:	2b00      	cmp	r3, #0
 8014728:	dd39      	ble.n	801479e <_dtoa_r+0x476>
 801472a:	9b04      	ldr	r3, [sp, #16]
 801472c:	2200      	movs	r2, #0
 801472e:	3b01      	subs	r3, #1
 8014730:	930c      	str	r3, [sp, #48]	@ 0x30
 8014732:	0030      	movs	r0, r6
 8014734:	4bc3      	ldr	r3, [pc, #780]	@ (8014a44 <_dtoa_r+0x71c>)
 8014736:	0039      	movs	r1, r7
 8014738:	f7ed f96c 	bl	8001a14 <__aeabi_dmul>
 801473c:	900a      	str	r0, [sp, #40]	@ 0x28
 801473e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014742:	3401      	adds	r4, #1
 8014744:	0020      	movs	r0, r4
 8014746:	9311      	str	r3, [sp, #68]	@ 0x44
 8014748:	f7ee f826 	bl	8002798 <__aeabi_i2d>
 801474c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801474e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014750:	f7ed f960 	bl	8001a14 <__aeabi_dmul>
 8014754:	4bbc      	ldr	r3, [pc, #752]	@ (8014a48 <_dtoa_r+0x720>)
 8014756:	2200      	movs	r2, #0
 8014758:	f7ec f9b4 	bl	8000ac4 <__aeabi_dadd>
 801475c:	4bbb      	ldr	r3, [pc, #748]	@ (8014a4c <_dtoa_r+0x724>)
 801475e:	0006      	movs	r6, r0
 8014760:	18cf      	adds	r7, r1, r3
 8014762:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014764:	2b00      	cmp	r3, #0
 8014766:	d000      	beq.n	801476a <_dtoa_r+0x442>
 8014768:	e091      	b.n	801488e <_dtoa_r+0x566>
 801476a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801476c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801476e:	2200      	movs	r2, #0
 8014770:	4bb7      	ldr	r3, [pc, #732]	@ (8014a50 <_dtoa_r+0x728>)
 8014772:	f7ed fc17 	bl	8001fa4 <__aeabi_dsub>
 8014776:	0032      	movs	r2, r6
 8014778:	003b      	movs	r3, r7
 801477a:	0004      	movs	r4, r0
 801477c:	000d      	movs	r5, r1
 801477e:	f7eb fe7f 	bl	8000480 <__aeabi_dcmpgt>
 8014782:	2800      	cmp	r0, #0
 8014784:	d000      	beq.n	8014788 <_dtoa_r+0x460>
 8014786:	e29d      	b.n	8014cc4 <_dtoa_r+0x99c>
 8014788:	2180      	movs	r1, #128	@ 0x80
 801478a:	0609      	lsls	r1, r1, #24
 801478c:	187b      	adds	r3, r7, r1
 801478e:	0032      	movs	r2, r6
 8014790:	0020      	movs	r0, r4
 8014792:	0029      	movs	r1, r5
 8014794:	f7eb fe60 	bl	8000458 <__aeabi_dcmplt>
 8014798:	2800      	cmp	r0, #0
 801479a:	d000      	beq.n	801479e <_dtoa_r+0x476>
 801479c:	e130      	b.n	8014a00 <_dtoa_r+0x6d8>
 801479e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80147a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80147a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80147a4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80147a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	da00      	bge.n	80147ae <_dtoa_r+0x486>
 80147ac:	e177      	b.n	8014a9e <_dtoa_r+0x776>
 80147ae:	9a04      	ldr	r2, [sp, #16]
 80147b0:	2a0e      	cmp	r2, #14
 80147b2:	dd00      	ble.n	80147b6 <_dtoa_r+0x48e>
 80147b4:	e173      	b.n	8014a9e <_dtoa_r+0x776>
 80147b6:	4ba0      	ldr	r3, [pc, #640]	@ (8014a38 <_dtoa_r+0x710>)
 80147b8:	00d2      	lsls	r2, r2, #3
 80147ba:	189b      	adds	r3, r3, r2
 80147bc:	685c      	ldr	r4, [r3, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	9306      	str	r3, [sp, #24]
 80147c2:	9407      	str	r4, [sp, #28]
 80147c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da03      	bge.n	80147d2 <_dtoa_r+0x4aa>
 80147ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	dc00      	bgt.n	80147d2 <_dtoa_r+0x4aa>
 80147d0:	e106      	b.n	80149e0 <_dtoa_r+0x6b8>
 80147d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80147d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80147d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147d8:	9d08      	ldr	r5, [sp, #32]
 80147da:	3b01      	subs	r3, #1
 80147dc:	195b      	adds	r3, r3, r5
 80147de:	930a      	str	r3, [sp, #40]	@ 0x28
 80147e0:	9a06      	ldr	r2, [sp, #24]
 80147e2:	9b07      	ldr	r3, [sp, #28]
 80147e4:	0030      	movs	r0, r6
 80147e6:	0039      	movs	r1, r7
 80147e8:	f7ec fcd0 	bl	800118c <__aeabi_ddiv>
 80147ec:	f7ed ff98 	bl	8002720 <__aeabi_d2iz>
 80147f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80147f2:	f7ed ffd1 	bl	8002798 <__aeabi_i2d>
 80147f6:	9a06      	ldr	r2, [sp, #24]
 80147f8:	9b07      	ldr	r3, [sp, #28]
 80147fa:	f7ed f90b 	bl	8001a14 <__aeabi_dmul>
 80147fe:	0002      	movs	r2, r0
 8014800:	000b      	movs	r3, r1
 8014802:	0030      	movs	r0, r6
 8014804:	0039      	movs	r1, r7
 8014806:	f7ed fbcd 	bl	8001fa4 <__aeabi_dsub>
 801480a:	002b      	movs	r3, r5
 801480c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801480e:	3501      	adds	r5, #1
 8014810:	3230      	adds	r2, #48	@ 0x30
 8014812:	701a      	strb	r2, [r3, #0]
 8014814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014816:	002c      	movs	r4, r5
 8014818:	429a      	cmp	r2, r3
 801481a:	d000      	beq.n	801481e <_dtoa_r+0x4f6>
 801481c:	e131      	b.n	8014a82 <_dtoa_r+0x75a>
 801481e:	0002      	movs	r2, r0
 8014820:	000b      	movs	r3, r1
 8014822:	f7ec f94f 	bl	8000ac4 <__aeabi_dadd>
 8014826:	9a06      	ldr	r2, [sp, #24]
 8014828:	9b07      	ldr	r3, [sp, #28]
 801482a:	0006      	movs	r6, r0
 801482c:	000f      	movs	r7, r1
 801482e:	f7eb fe27 	bl	8000480 <__aeabi_dcmpgt>
 8014832:	2800      	cmp	r0, #0
 8014834:	d000      	beq.n	8014838 <_dtoa_r+0x510>
 8014836:	e10f      	b.n	8014a58 <_dtoa_r+0x730>
 8014838:	9a06      	ldr	r2, [sp, #24]
 801483a:	9b07      	ldr	r3, [sp, #28]
 801483c:	0030      	movs	r0, r6
 801483e:	0039      	movs	r1, r7
 8014840:	f7eb fe04 	bl	800044c <__aeabi_dcmpeq>
 8014844:	2800      	cmp	r0, #0
 8014846:	d003      	beq.n	8014850 <_dtoa_r+0x528>
 8014848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801484a:	07dd      	lsls	r5, r3, #31
 801484c:	d500      	bpl.n	8014850 <_dtoa_r+0x528>
 801484e:	e103      	b.n	8014a58 <_dtoa_r+0x730>
 8014850:	9905      	ldr	r1, [sp, #20]
 8014852:	9803      	ldr	r0, [sp, #12]
 8014854:	f000 fca6 	bl	80151a4 <_Bfree>
 8014858:	2300      	movs	r3, #0
 801485a:	7023      	strb	r3, [r4, #0]
 801485c:	9b04      	ldr	r3, [sp, #16]
 801485e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8014860:	3301      	adds	r3, #1
 8014862:	6013      	str	r3, [r2, #0]
 8014864:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8014866:	2b00      	cmp	r3, #0
 8014868:	d100      	bne.n	801486c <_dtoa_r+0x544>
 801486a:	e5a7      	b.n	80143bc <_dtoa_r+0x94>
 801486c:	601c      	str	r4, [r3, #0]
 801486e:	e5a5      	b.n	80143bc <_dtoa_r+0x94>
 8014870:	423d      	tst	r5, r7
 8014872:	d005      	beq.n	8014880 <_dtoa_r+0x558>
 8014874:	6832      	ldr	r2, [r6, #0]
 8014876:	6873      	ldr	r3, [r6, #4]
 8014878:	f7ed f8cc 	bl	8001a14 <__aeabi_dmul>
 801487c:	003b      	movs	r3, r7
 801487e:	3401      	adds	r4, #1
 8014880:	106d      	asrs	r5, r5, #1
 8014882:	3608      	adds	r6, #8
 8014884:	e736      	b.n	80146f4 <_dtoa_r+0x3cc>
 8014886:	9b04      	ldr	r3, [sp, #16]
 8014888:	930c      	str	r3, [sp, #48]	@ 0x30
 801488a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801488c:	e75a      	b.n	8014744 <_dtoa_r+0x41c>
 801488e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014890:	4b69      	ldr	r3, [pc, #420]	@ (8014a38 <_dtoa_r+0x710>)
 8014892:	3a01      	subs	r2, #1
 8014894:	00d2      	lsls	r2, r2, #3
 8014896:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014898:	189b      	adds	r3, r3, r2
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	2900      	cmp	r1, #0
 80148a0:	d04c      	beq.n	801493c <_dtoa_r+0x614>
 80148a2:	2000      	movs	r0, #0
 80148a4:	496b      	ldr	r1, [pc, #428]	@ (8014a54 <_dtoa_r+0x72c>)
 80148a6:	f7ec fc71 	bl	800118c <__aeabi_ddiv>
 80148aa:	0032      	movs	r2, r6
 80148ac:	003b      	movs	r3, r7
 80148ae:	f7ed fb79 	bl	8001fa4 <__aeabi_dsub>
 80148b2:	9a08      	ldr	r2, [sp, #32]
 80148b4:	0006      	movs	r6, r0
 80148b6:	4694      	mov	ip, r2
 80148b8:	000f      	movs	r7, r1
 80148ba:	9b08      	ldr	r3, [sp, #32]
 80148bc:	9316      	str	r3, [sp, #88]	@ 0x58
 80148be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80148c0:	4463      	add	r3, ip
 80148c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80148c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80148c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80148c8:	f7ed ff2a 	bl	8002720 <__aeabi_d2iz>
 80148cc:	0005      	movs	r5, r0
 80148ce:	f7ed ff63 	bl	8002798 <__aeabi_i2d>
 80148d2:	0002      	movs	r2, r0
 80148d4:	000b      	movs	r3, r1
 80148d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80148d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80148da:	f7ed fb63 	bl	8001fa4 <__aeabi_dsub>
 80148de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80148e0:	3530      	adds	r5, #48	@ 0x30
 80148e2:	1c5c      	adds	r4, r3, #1
 80148e4:	701d      	strb	r5, [r3, #0]
 80148e6:	0032      	movs	r2, r6
 80148e8:	003b      	movs	r3, r7
 80148ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80148ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80148ee:	f7eb fdb3 	bl	8000458 <__aeabi_dcmplt>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d16a      	bne.n	80149cc <_dtoa_r+0x6a4>
 80148f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80148f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148fa:	2000      	movs	r0, #0
 80148fc:	4950      	ldr	r1, [pc, #320]	@ (8014a40 <_dtoa_r+0x718>)
 80148fe:	f7ed fb51 	bl	8001fa4 <__aeabi_dsub>
 8014902:	0032      	movs	r2, r6
 8014904:	003b      	movs	r3, r7
 8014906:	f7eb fda7 	bl	8000458 <__aeabi_dcmplt>
 801490a:	2800      	cmp	r0, #0
 801490c:	d000      	beq.n	8014910 <_dtoa_r+0x5e8>
 801490e:	e0a5      	b.n	8014a5c <_dtoa_r+0x734>
 8014910:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014912:	42a3      	cmp	r3, r4
 8014914:	d100      	bne.n	8014918 <_dtoa_r+0x5f0>
 8014916:	e742      	b.n	801479e <_dtoa_r+0x476>
 8014918:	2200      	movs	r2, #0
 801491a:	0030      	movs	r0, r6
 801491c:	0039      	movs	r1, r7
 801491e:	4b49      	ldr	r3, [pc, #292]	@ (8014a44 <_dtoa_r+0x71c>)
 8014920:	f7ed f878 	bl	8001a14 <__aeabi_dmul>
 8014924:	2200      	movs	r2, #0
 8014926:	0006      	movs	r6, r0
 8014928:	000f      	movs	r7, r1
 801492a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801492c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801492e:	4b45      	ldr	r3, [pc, #276]	@ (8014a44 <_dtoa_r+0x71c>)
 8014930:	f7ed f870 	bl	8001a14 <__aeabi_dmul>
 8014934:	9416      	str	r4, [sp, #88]	@ 0x58
 8014936:	900a      	str	r0, [sp, #40]	@ 0x28
 8014938:	910b      	str	r1, [sp, #44]	@ 0x2c
 801493a:	e7c3      	b.n	80148c4 <_dtoa_r+0x59c>
 801493c:	0030      	movs	r0, r6
 801493e:	0039      	movs	r1, r7
 8014940:	f7ed f868 	bl	8001a14 <__aeabi_dmul>
 8014944:	9d08      	ldr	r5, [sp, #32]
 8014946:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014948:	002b      	movs	r3, r5
 801494a:	4694      	mov	ip, r2
 801494c:	9016      	str	r0, [sp, #88]	@ 0x58
 801494e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8014950:	4463      	add	r3, ip
 8014952:	9319      	str	r3, [sp, #100]	@ 0x64
 8014954:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014956:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014958:	f7ed fee2 	bl	8002720 <__aeabi_d2iz>
 801495c:	0004      	movs	r4, r0
 801495e:	f7ed ff1b 	bl	8002798 <__aeabi_i2d>
 8014962:	000b      	movs	r3, r1
 8014964:	0002      	movs	r2, r0
 8014966:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801496a:	f7ed fb1b 	bl	8001fa4 <__aeabi_dsub>
 801496e:	3430      	adds	r4, #48	@ 0x30
 8014970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014972:	702c      	strb	r4, [r5, #0]
 8014974:	3501      	adds	r5, #1
 8014976:	0006      	movs	r6, r0
 8014978:	000f      	movs	r7, r1
 801497a:	42ab      	cmp	r3, r5
 801497c:	d129      	bne.n	80149d2 <_dtoa_r+0x6aa>
 801497e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8014980:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014982:	9b08      	ldr	r3, [sp, #32]
 8014984:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8014986:	469c      	mov	ip, r3
 8014988:	2200      	movs	r2, #0
 801498a:	4b32      	ldr	r3, [pc, #200]	@ (8014a54 <_dtoa_r+0x72c>)
 801498c:	4464      	add	r4, ip
 801498e:	f7ec f899 	bl	8000ac4 <__aeabi_dadd>
 8014992:	0002      	movs	r2, r0
 8014994:	000b      	movs	r3, r1
 8014996:	0030      	movs	r0, r6
 8014998:	0039      	movs	r1, r7
 801499a:	f7eb fd71 	bl	8000480 <__aeabi_dcmpgt>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d15c      	bne.n	8014a5c <_dtoa_r+0x734>
 80149a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80149a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80149a6:	2000      	movs	r0, #0
 80149a8:	492a      	ldr	r1, [pc, #168]	@ (8014a54 <_dtoa_r+0x72c>)
 80149aa:	f7ed fafb 	bl	8001fa4 <__aeabi_dsub>
 80149ae:	0002      	movs	r2, r0
 80149b0:	000b      	movs	r3, r1
 80149b2:	0030      	movs	r0, r6
 80149b4:	0039      	movs	r1, r7
 80149b6:	f7eb fd4f 	bl	8000458 <__aeabi_dcmplt>
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d100      	bne.n	80149c0 <_dtoa_r+0x698>
 80149be:	e6ee      	b.n	801479e <_dtoa_r+0x476>
 80149c0:	0023      	movs	r3, r4
 80149c2:	3c01      	subs	r4, #1
 80149c4:	7822      	ldrb	r2, [r4, #0]
 80149c6:	2a30      	cmp	r2, #48	@ 0x30
 80149c8:	d0fa      	beq.n	80149c0 <_dtoa_r+0x698>
 80149ca:	001c      	movs	r4, r3
 80149cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149ce:	9304      	str	r3, [sp, #16]
 80149d0:	e73e      	b.n	8014850 <_dtoa_r+0x528>
 80149d2:	2200      	movs	r2, #0
 80149d4:	4b1b      	ldr	r3, [pc, #108]	@ (8014a44 <_dtoa_r+0x71c>)
 80149d6:	f7ed f81d 	bl	8001a14 <__aeabi_dmul>
 80149da:	900a      	str	r0, [sp, #40]	@ 0x28
 80149dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80149de:	e7b9      	b.n	8014954 <_dtoa_r+0x62c>
 80149e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d10c      	bne.n	8014a00 <_dtoa_r+0x6d8>
 80149e6:	9806      	ldr	r0, [sp, #24]
 80149e8:	9907      	ldr	r1, [sp, #28]
 80149ea:	2200      	movs	r2, #0
 80149ec:	4b18      	ldr	r3, [pc, #96]	@ (8014a50 <_dtoa_r+0x728>)
 80149ee:	f7ed f811 	bl	8001a14 <__aeabi_dmul>
 80149f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80149f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80149f6:	f7eb fd4d 	bl	8000494 <__aeabi_dcmpge>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d100      	bne.n	8014a00 <_dtoa_r+0x6d8>
 80149fe:	e164      	b.n	8014cca <_dtoa_r+0x9a2>
 8014a00:	2600      	movs	r6, #0
 8014a02:	0037      	movs	r7, r6
 8014a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014a06:	9c08      	ldr	r4, [sp, #32]
 8014a08:	43db      	mvns	r3, r3
 8014a0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	9304      	str	r3, [sp, #16]
 8014a10:	0031      	movs	r1, r6
 8014a12:	9803      	ldr	r0, [sp, #12]
 8014a14:	f000 fbc6 	bl	80151a4 <_Bfree>
 8014a18:	2f00      	cmp	r7, #0
 8014a1a:	d0d7      	beq.n	80149cc <_dtoa_r+0x6a4>
 8014a1c:	9b04      	ldr	r3, [sp, #16]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d005      	beq.n	8014a2e <_dtoa_r+0x706>
 8014a22:	42bb      	cmp	r3, r7
 8014a24:	d003      	beq.n	8014a2e <_dtoa_r+0x706>
 8014a26:	0019      	movs	r1, r3
 8014a28:	9803      	ldr	r0, [sp, #12]
 8014a2a:	f000 fbbb 	bl	80151a4 <_Bfree>
 8014a2e:	0039      	movs	r1, r7
 8014a30:	9803      	ldr	r0, [sp, #12]
 8014a32:	f000 fbb7 	bl	80151a4 <_Bfree>
 8014a36:	e7c9      	b.n	80149cc <_dtoa_r+0x6a4>
 8014a38:	0801a0b8 	.word	0x0801a0b8
 8014a3c:	0801a090 	.word	0x0801a090
 8014a40:	3ff00000 	.word	0x3ff00000
 8014a44:	40240000 	.word	0x40240000
 8014a48:	401c0000 	.word	0x401c0000
 8014a4c:	fcc00000 	.word	0xfcc00000
 8014a50:	40140000 	.word	0x40140000
 8014a54:	3fe00000 	.word	0x3fe00000
 8014a58:	9b04      	ldr	r3, [sp, #16]
 8014a5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8014a5c:	0023      	movs	r3, r4
 8014a5e:	001c      	movs	r4, r3
 8014a60:	3b01      	subs	r3, #1
 8014a62:	781a      	ldrb	r2, [r3, #0]
 8014a64:	2a39      	cmp	r2, #57	@ 0x39
 8014a66:	d108      	bne.n	8014a7a <_dtoa_r+0x752>
 8014a68:	9a08      	ldr	r2, [sp, #32]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d1f7      	bne.n	8014a5e <_dtoa_r+0x736>
 8014a6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014a70:	9908      	ldr	r1, [sp, #32]
 8014a72:	3201      	adds	r2, #1
 8014a74:	920c      	str	r2, [sp, #48]	@ 0x30
 8014a76:	2230      	movs	r2, #48	@ 0x30
 8014a78:	700a      	strb	r2, [r1, #0]
 8014a7a:	781a      	ldrb	r2, [r3, #0]
 8014a7c:	3201      	adds	r2, #1
 8014a7e:	701a      	strb	r2, [r3, #0]
 8014a80:	e7a4      	b.n	80149cc <_dtoa_r+0x6a4>
 8014a82:	2200      	movs	r2, #0
 8014a84:	4bc6      	ldr	r3, [pc, #792]	@ (8014da0 <_dtoa_r+0xa78>)
 8014a86:	f7ec ffc5 	bl	8001a14 <__aeabi_dmul>
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	0006      	movs	r6, r0
 8014a90:	000f      	movs	r7, r1
 8014a92:	f7eb fcdb 	bl	800044c <__aeabi_dcmpeq>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d100      	bne.n	8014a9c <_dtoa_r+0x774>
 8014a9a:	e6a1      	b.n	80147e0 <_dtoa_r+0x4b8>
 8014a9c:	e6d8      	b.n	8014850 <_dtoa_r+0x528>
 8014a9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014aa0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014aa2:	9c06      	ldr	r4, [sp, #24]
 8014aa4:	2f00      	cmp	r7, #0
 8014aa6:	d014      	beq.n	8014ad2 <_dtoa_r+0x7aa>
 8014aa8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014aaa:	2a01      	cmp	r2, #1
 8014aac:	dd00      	ble.n	8014ab0 <_dtoa_r+0x788>
 8014aae:	e0c8      	b.n	8014c42 <_dtoa_r+0x91a>
 8014ab0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014ab2:	2a00      	cmp	r2, #0
 8014ab4:	d100      	bne.n	8014ab8 <_dtoa_r+0x790>
 8014ab6:	e0be      	b.n	8014c36 <_dtoa_r+0x90e>
 8014ab8:	4aba      	ldr	r2, [pc, #744]	@ (8014da4 <_dtoa_r+0xa7c>)
 8014aba:	189b      	adds	r3, r3, r2
 8014abc:	9a06      	ldr	r2, [sp, #24]
 8014abe:	2101      	movs	r1, #1
 8014ac0:	18d2      	adds	r2, r2, r3
 8014ac2:	9206      	str	r2, [sp, #24]
 8014ac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ac6:	9803      	ldr	r0, [sp, #12]
 8014ac8:	18d3      	adds	r3, r2, r3
 8014aca:	930d      	str	r3, [sp, #52]	@ 0x34
 8014acc:	f000 fc22 	bl	8015314 <__i2b>
 8014ad0:	0007      	movs	r7, r0
 8014ad2:	2c00      	cmp	r4, #0
 8014ad4:	d00e      	beq.n	8014af4 <_dtoa_r+0x7cc>
 8014ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	dd0b      	ble.n	8014af4 <_dtoa_r+0x7cc>
 8014adc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ade:	0023      	movs	r3, r4
 8014ae0:	4294      	cmp	r4, r2
 8014ae2:	dd00      	ble.n	8014ae6 <_dtoa_r+0x7be>
 8014ae4:	0013      	movs	r3, r2
 8014ae6:	9a06      	ldr	r2, [sp, #24]
 8014ae8:	1ae4      	subs	r4, r4, r3
 8014aea:	1ad2      	subs	r2, r2, r3
 8014aec:	9206      	str	r2, [sp, #24]
 8014aee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014af0:	1ad3      	subs	r3, r2, r3
 8014af2:	930d      	str	r3, [sp, #52]	@ 0x34
 8014af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d01f      	beq.n	8014b3a <_dtoa_r+0x812>
 8014afa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d100      	bne.n	8014b02 <_dtoa_r+0x7da>
 8014b00:	e0b5      	b.n	8014c6e <_dtoa_r+0x946>
 8014b02:	2d00      	cmp	r5, #0
 8014b04:	d010      	beq.n	8014b28 <_dtoa_r+0x800>
 8014b06:	0039      	movs	r1, r7
 8014b08:	002a      	movs	r2, r5
 8014b0a:	9803      	ldr	r0, [sp, #12]
 8014b0c:	f000 fccc 	bl	80154a8 <__pow5mult>
 8014b10:	9a05      	ldr	r2, [sp, #20]
 8014b12:	0001      	movs	r1, r0
 8014b14:	0007      	movs	r7, r0
 8014b16:	9803      	ldr	r0, [sp, #12]
 8014b18:	f000 fc14 	bl	8015344 <__multiply>
 8014b1c:	0006      	movs	r6, r0
 8014b1e:	9905      	ldr	r1, [sp, #20]
 8014b20:	9803      	ldr	r0, [sp, #12]
 8014b22:	f000 fb3f 	bl	80151a4 <_Bfree>
 8014b26:	9605      	str	r6, [sp, #20]
 8014b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b2a:	1b5a      	subs	r2, r3, r5
 8014b2c:	42ab      	cmp	r3, r5
 8014b2e:	d004      	beq.n	8014b3a <_dtoa_r+0x812>
 8014b30:	9905      	ldr	r1, [sp, #20]
 8014b32:	9803      	ldr	r0, [sp, #12]
 8014b34:	f000 fcb8 	bl	80154a8 <__pow5mult>
 8014b38:	9005      	str	r0, [sp, #20]
 8014b3a:	2101      	movs	r1, #1
 8014b3c:	9803      	ldr	r0, [sp, #12]
 8014b3e:	f000 fbe9 	bl	8015314 <__i2b>
 8014b42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014b44:	0006      	movs	r6, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d100      	bne.n	8014b4c <_dtoa_r+0x824>
 8014b4a:	e1bc      	b.n	8014ec6 <_dtoa_r+0xb9e>
 8014b4c:	001a      	movs	r2, r3
 8014b4e:	0001      	movs	r1, r0
 8014b50:	9803      	ldr	r0, [sp, #12]
 8014b52:	f000 fca9 	bl	80154a8 <__pow5mult>
 8014b56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014b58:	0006      	movs	r6, r0
 8014b5a:	2500      	movs	r5, #0
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	dc16      	bgt.n	8014b8e <_dtoa_r+0x866>
 8014b60:	2500      	movs	r5, #0
 8014b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b64:	42ab      	cmp	r3, r5
 8014b66:	d10e      	bne.n	8014b86 <_dtoa_r+0x85e>
 8014b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b6a:	031b      	lsls	r3, r3, #12
 8014b6c:	42ab      	cmp	r3, r5
 8014b6e:	d10a      	bne.n	8014b86 <_dtoa_r+0x85e>
 8014b70:	4b8d      	ldr	r3, [pc, #564]	@ (8014da8 <_dtoa_r+0xa80>)
 8014b72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014b74:	4213      	tst	r3, r2
 8014b76:	d006      	beq.n	8014b86 <_dtoa_r+0x85e>
 8014b78:	9b06      	ldr	r3, [sp, #24]
 8014b7a:	3501      	adds	r5, #1
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	9306      	str	r3, [sp, #24]
 8014b80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b82:	3301      	adds	r3, #1
 8014b84:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014b88:	2001      	movs	r0, #1
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d008      	beq.n	8014ba0 <_dtoa_r+0x878>
 8014b8e:	6933      	ldr	r3, [r6, #16]
 8014b90:	3303      	adds	r3, #3
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	18f3      	adds	r3, r6, r3
 8014b96:	6858      	ldr	r0, [r3, #4]
 8014b98:	f000 fb6c 	bl	8015274 <__hi0bits>
 8014b9c:	2320      	movs	r3, #32
 8014b9e:	1a18      	subs	r0, r3, r0
 8014ba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ba2:	1818      	adds	r0, r3, r0
 8014ba4:	0002      	movs	r2, r0
 8014ba6:	231f      	movs	r3, #31
 8014ba8:	401a      	ands	r2, r3
 8014baa:	4218      	tst	r0, r3
 8014bac:	d065      	beq.n	8014c7a <_dtoa_r+0x952>
 8014bae:	3301      	adds	r3, #1
 8014bb0:	1a9b      	subs	r3, r3, r2
 8014bb2:	2b04      	cmp	r3, #4
 8014bb4:	dd5d      	ble.n	8014c72 <_dtoa_r+0x94a>
 8014bb6:	231c      	movs	r3, #28
 8014bb8:	1a9b      	subs	r3, r3, r2
 8014bba:	9a06      	ldr	r2, [sp, #24]
 8014bbc:	18e4      	adds	r4, r4, r3
 8014bbe:	18d2      	adds	r2, r2, r3
 8014bc0:	9206      	str	r2, [sp, #24]
 8014bc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014bc4:	18d3      	adds	r3, r2, r3
 8014bc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8014bc8:	9b06      	ldr	r3, [sp, #24]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	dd05      	ble.n	8014bda <_dtoa_r+0x8b2>
 8014bce:	001a      	movs	r2, r3
 8014bd0:	9905      	ldr	r1, [sp, #20]
 8014bd2:	9803      	ldr	r0, [sp, #12]
 8014bd4:	f000 fcc4 	bl	8015560 <__lshift>
 8014bd8:	9005      	str	r0, [sp, #20]
 8014bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	dd05      	ble.n	8014bec <_dtoa_r+0x8c4>
 8014be0:	0031      	movs	r1, r6
 8014be2:	001a      	movs	r2, r3
 8014be4:	9803      	ldr	r0, [sp, #12]
 8014be6:	f000 fcbb 	bl	8015560 <__lshift>
 8014bea:	0006      	movs	r6, r0
 8014bec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d045      	beq.n	8014c7e <_dtoa_r+0x956>
 8014bf2:	0031      	movs	r1, r6
 8014bf4:	9805      	ldr	r0, [sp, #20]
 8014bf6:	f000 fd1f 	bl	8015638 <__mcmp>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	da3f      	bge.n	8014c7e <_dtoa_r+0x956>
 8014bfe:	9b04      	ldr	r3, [sp, #16]
 8014c00:	220a      	movs	r2, #10
 8014c02:	3b01      	subs	r3, #1
 8014c04:	930c      	str	r3, [sp, #48]	@ 0x30
 8014c06:	9905      	ldr	r1, [sp, #20]
 8014c08:	2300      	movs	r3, #0
 8014c0a:	9803      	ldr	r0, [sp, #12]
 8014c0c:	f000 faee 	bl	80151ec <__multadd>
 8014c10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c12:	9005      	str	r0, [sp, #20]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d100      	bne.n	8014c1a <_dtoa_r+0x8f2>
 8014c18:	e15c      	b.n	8014ed4 <_dtoa_r+0xbac>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	0039      	movs	r1, r7
 8014c1e:	220a      	movs	r2, #10
 8014c20:	9803      	ldr	r0, [sp, #12]
 8014c22:	f000 fae3 	bl	80151ec <__multadd>
 8014c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c28:	0007      	movs	r7, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	dc55      	bgt.n	8014cda <_dtoa_r+0x9b2>
 8014c2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	dc2d      	bgt.n	8014c90 <_dtoa_r+0x968>
 8014c34:	e051      	b.n	8014cda <_dtoa_r+0x9b2>
 8014c36:	2336      	movs	r3, #54	@ 0x36
 8014c38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014c3a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014c3c:	9c06      	ldr	r4, [sp, #24]
 8014c3e:	1a9b      	subs	r3, r3, r2
 8014c40:	e73c      	b.n	8014abc <_dtoa_r+0x794>
 8014c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c44:	1e5d      	subs	r5, r3, #1
 8014c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c48:	42ab      	cmp	r3, r5
 8014c4a:	db08      	blt.n	8014c5e <_dtoa_r+0x936>
 8014c4c:	1b5d      	subs	r5, r3, r5
 8014c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c50:	9c06      	ldr	r4, [sp, #24]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	db00      	blt.n	8014c58 <_dtoa_r+0x930>
 8014c56:	e731      	b.n	8014abc <_dtoa_r+0x794>
 8014c58:	1ae4      	subs	r4, r4, r3
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	e72e      	b.n	8014abc <_dtoa_r+0x794>
 8014c5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014c62:	1aeb      	subs	r3, r5, r3
 8014c64:	18d3      	adds	r3, r2, r3
 8014c66:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014c68:	9314      	str	r3, [sp, #80]	@ 0x50
 8014c6a:	2500      	movs	r5, #0
 8014c6c:	e7ef      	b.n	8014c4e <_dtoa_r+0x926>
 8014c6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014c70:	e75e      	b.n	8014b30 <_dtoa_r+0x808>
 8014c72:	2b04      	cmp	r3, #4
 8014c74:	d0a8      	beq.n	8014bc8 <_dtoa_r+0x8a0>
 8014c76:	331c      	adds	r3, #28
 8014c78:	e79f      	b.n	8014bba <_dtoa_r+0x892>
 8014c7a:	0013      	movs	r3, r2
 8014c7c:	e7fb      	b.n	8014c76 <_dtoa_r+0x94e>
 8014c7e:	9b04      	ldr	r3, [sp, #16]
 8014c80:	930c      	str	r3, [sp, #48]	@ 0x30
 8014c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c84:	930e      	str	r3, [sp, #56]	@ 0x38
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	dc23      	bgt.n	8014cd2 <_dtoa_r+0x9aa>
 8014c8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014c8c:	2b02      	cmp	r3, #2
 8014c8e:	dd20      	ble.n	8014cd2 <_dtoa_r+0x9aa>
 8014c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d000      	beq.n	8014c98 <_dtoa_r+0x970>
 8014c96:	e6b5      	b.n	8014a04 <_dtoa_r+0x6dc>
 8014c98:	0031      	movs	r1, r6
 8014c9a:	2205      	movs	r2, #5
 8014c9c:	9803      	ldr	r0, [sp, #12]
 8014c9e:	f000 faa5 	bl	80151ec <__multadd>
 8014ca2:	0006      	movs	r6, r0
 8014ca4:	0001      	movs	r1, r0
 8014ca6:	9805      	ldr	r0, [sp, #20]
 8014ca8:	f000 fcc6 	bl	8015638 <__mcmp>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	dc00      	bgt.n	8014cb2 <_dtoa_r+0x98a>
 8014cb0:	e6a8      	b.n	8014a04 <_dtoa_r+0x6dc>
 8014cb2:	9b08      	ldr	r3, [sp, #32]
 8014cb4:	9a08      	ldr	r2, [sp, #32]
 8014cb6:	1c5c      	adds	r4, r3, #1
 8014cb8:	2331      	movs	r3, #49	@ 0x31
 8014cba:	7013      	strb	r3, [r2, #0]
 8014cbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8014cc2:	e6a3      	b.n	8014a0c <_dtoa_r+0x6e4>
 8014cc4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014cc6:	0037      	movs	r7, r6
 8014cc8:	e7f3      	b.n	8014cb2 <_dtoa_r+0x98a>
 8014cca:	9b04      	ldr	r3, [sp, #16]
 8014ccc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8014cce:	930c      	str	r3, [sp, #48]	@ 0x30
 8014cd0:	e7f9      	b.n	8014cc6 <_dtoa_r+0x99e>
 8014cd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d100      	bne.n	8014cda <_dtoa_r+0x9b2>
 8014cd8:	e100      	b.n	8014edc <_dtoa_r+0xbb4>
 8014cda:	2c00      	cmp	r4, #0
 8014cdc:	dd05      	ble.n	8014cea <_dtoa_r+0x9c2>
 8014cde:	0039      	movs	r1, r7
 8014ce0:	0022      	movs	r2, r4
 8014ce2:	9803      	ldr	r0, [sp, #12]
 8014ce4:	f000 fc3c 	bl	8015560 <__lshift>
 8014ce8:	0007      	movs	r7, r0
 8014cea:	0038      	movs	r0, r7
 8014cec:	2d00      	cmp	r5, #0
 8014cee:	d018      	beq.n	8014d22 <_dtoa_r+0x9fa>
 8014cf0:	6879      	ldr	r1, [r7, #4]
 8014cf2:	9803      	ldr	r0, [sp, #12]
 8014cf4:	f000 fa12 	bl	801511c <_Balloc>
 8014cf8:	1e04      	subs	r4, r0, #0
 8014cfa:	d105      	bne.n	8014d08 <_dtoa_r+0x9e0>
 8014cfc:	0022      	movs	r2, r4
 8014cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8014dac <_dtoa_r+0xa84>)
 8014d00:	482b      	ldr	r0, [pc, #172]	@ (8014db0 <_dtoa_r+0xa88>)
 8014d02:	492c      	ldr	r1, [pc, #176]	@ (8014db4 <_dtoa_r+0xa8c>)
 8014d04:	f7ff fb25 	bl	8014352 <_dtoa_r+0x2a>
 8014d08:	0039      	movs	r1, r7
 8014d0a:	693a      	ldr	r2, [r7, #16]
 8014d0c:	310c      	adds	r1, #12
 8014d0e:	3202      	adds	r2, #2
 8014d10:	0092      	lsls	r2, r2, #2
 8014d12:	300c      	adds	r0, #12
 8014d14:	f7ff fa70 	bl	80141f8 <memcpy>
 8014d18:	2201      	movs	r2, #1
 8014d1a:	0021      	movs	r1, r4
 8014d1c:	9803      	ldr	r0, [sp, #12]
 8014d1e:	f000 fc1f 	bl	8015560 <__lshift>
 8014d22:	9b08      	ldr	r3, [sp, #32]
 8014d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d26:	9306      	str	r3, [sp, #24]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	189b      	adds	r3, r3, r2
 8014d2c:	2201      	movs	r2, #1
 8014d2e:	9704      	str	r7, [sp, #16]
 8014d30:	0007      	movs	r7, r0
 8014d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d36:	4013      	ands	r3, r2
 8014d38:	930e      	str	r3, [sp, #56]	@ 0x38
 8014d3a:	0031      	movs	r1, r6
 8014d3c:	9805      	ldr	r0, [sp, #20]
 8014d3e:	f7ff fa64 	bl	801420a <quorem>
 8014d42:	9904      	ldr	r1, [sp, #16]
 8014d44:	0005      	movs	r5, r0
 8014d46:	900a      	str	r0, [sp, #40]	@ 0x28
 8014d48:	9805      	ldr	r0, [sp, #20]
 8014d4a:	f000 fc75 	bl	8015638 <__mcmp>
 8014d4e:	003a      	movs	r2, r7
 8014d50:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d52:	0031      	movs	r1, r6
 8014d54:	9803      	ldr	r0, [sp, #12]
 8014d56:	f000 fc8b 	bl	8015670 <__mdiff>
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	68c3      	ldr	r3, [r0, #12]
 8014d5e:	0004      	movs	r4, r0
 8014d60:	3530      	adds	r5, #48	@ 0x30
 8014d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d104      	bne.n	8014d72 <_dtoa_r+0xa4a>
 8014d68:	0001      	movs	r1, r0
 8014d6a:	9805      	ldr	r0, [sp, #20]
 8014d6c:	f000 fc64 	bl	8015638 <__mcmp>
 8014d70:	9009      	str	r0, [sp, #36]	@ 0x24
 8014d72:	0021      	movs	r1, r4
 8014d74:	9803      	ldr	r0, [sp, #12]
 8014d76:	f000 fa15 	bl	80151a4 <_Bfree>
 8014d7a:	9b06      	ldr	r3, [sp, #24]
 8014d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d7e:	1c5c      	adds	r4, r3, #1
 8014d80:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014d82:	4313      	orrs	r3, r2
 8014d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d86:	4313      	orrs	r3, r2
 8014d88:	d116      	bne.n	8014db8 <_dtoa_r+0xa90>
 8014d8a:	2d39      	cmp	r5, #57	@ 0x39
 8014d8c:	d02f      	beq.n	8014dee <_dtoa_r+0xac6>
 8014d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	dd01      	ble.n	8014d98 <_dtoa_r+0xa70>
 8014d94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014d96:	3531      	adds	r5, #49	@ 0x31
 8014d98:	9b06      	ldr	r3, [sp, #24]
 8014d9a:	701d      	strb	r5, [r3, #0]
 8014d9c:	e638      	b.n	8014a10 <_dtoa_r+0x6e8>
 8014d9e:	46c0      	nop			@ (mov r8, r8)
 8014da0:	40240000 	.word	0x40240000
 8014da4:	00000433 	.word	0x00000433
 8014da8:	7ff00000 	.word	0x7ff00000
 8014dac:	0801a016 	.word	0x0801a016
 8014db0:	08019fbe 	.word	0x08019fbe
 8014db4:	000002ef 	.word	0x000002ef
 8014db8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	db04      	blt.n	8014dc8 <_dtoa_r+0xaa0>
 8014dbe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014dc0:	4313      	orrs	r3, r2
 8014dc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014dc4:	4313      	orrs	r3, r2
 8014dc6:	d11e      	bne.n	8014e06 <_dtoa_r+0xade>
 8014dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	dde4      	ble.n	8014d98 <_dtoa_r+0xa70>
 8014dce:	9905      	ldr	r1, [sp, #20]
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	9803      	ldr	r0, [sp, #12]
 8014dd4:	f000 fbc4 	bl	8015560 <__lshift>
 8014dd8:	0031      	movs	r1, r6
 8014dda:	9005      	str	r0, [sp, #20]
 8014ddc:	f000 fc2c 	bl	8015638 <__mcmp>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	dc02      	bgt.n	8014dea <_dtoa_r+0xac2>
 8014de4:	d1d8      	bne.n	8014d98 <_dtoa_r+0xa70>
 8014de6:	07eb      	lsls	r3, r5, #31
 8014de8:	d5d6      	bpl.n	8014d98 <_dtoa_r+0xa70>
 8014dea:	2d39      	cmp	r5, #57	@ 0x39
 8014dec:	d1d2      	bne.n	8014d94 <_dtoa_r+0xa6c>
 8014dee:	2339      	movs	r3, #57	@ 0x39
 8014df0:	9a06      	ldr	r2, [sp, #24]
 8014df2:	7013      	strb	r3, [r2, #0]
 8014df4:	0023      	movs	r3, r4
 8014df6:	001c      	movs	r4, r3
 8014df8:	3b01      	subs	r3, #1
 8014dfa:	781a      	ldrb	r2, [r3, #0]
 8014dfc:	2a39      	cmp	r2, #57	@ 0x39
 8014dfe:	d04f      	beq.n	8014ea0 <_dtoa_r+0xb78>
 8014e00:	3201      	adds	r2, #1
 8014e02:	701a      	strb	r2, [r3, #0]
 8014e04:	e604      	b.n	8014a10 <_dtoa_r+0x6e8>
 8014e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	dd03      	ble.n	8014e14 <_dtoa_r+0xaec>
 8014e0c:	2d39      	cmp	r5, #57	@ 0x39
 8014e0e:	d0ee      	beq.n	8014dee <_dtoa_r+0xac6>
 8014e10:	3501      	adds	r5, #1
 8014e12:	e7c1      	b.n	8014d98 <_dtoa_r+0xa70>
 8014e14:	9b06      	ldr	r3, [sp, #24]
 8014e16:	9a06      	ldr	r2, [sp, #24]
 8014e18:	701d      	strb	r5, [r3, #0]
 8014e1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d02a      	beq.n	8014e76 <_dtoa_r+0xb4e>
 8014e20:	2300      	movs	r3, #0
 8014e22:	220a      	movs	r2, #10
 8014e24:	9905      	ldr	r1, [sp, #20]
 8014e26:	9803      	ldr	r0, [sp, #12]
 8014e28:	f000 f9e0 	bl	80151ec <__multadd>
 8014e2c:	9b04      	ldr	r3, [sp, #16]
 8014e2e:	9005      	str	r0, [sp, #20]
 8014e30:	42bb      	cmp	r3, r7
 8014e32:	d109      	bne.n	8014e48 <_dtoa_r+0xb20>
 8014e34:	2300      	movs	r3, #0
 8014e36:	220a      	movs	r2, #10
 8014e38:	9904      	ldr	r1, [sp, #16]
 8014e3a:	9803      	ldr	r0, [sp, #12]
 8014e3c:	f000 f9d6 	bl	80151ec <__multadd>
 8014e40:	9004      	str	r0, [sp, #16]
 8014e42:	0007      	movs	r7, r0
 8014e44:	9406      	str	r4, [sp, #24]
 8014e46:	e778      	b.n	8014d3a <_dtoa_r+0xa12>
 8014e48:	9904      	ldr	r1, [sp, #16]
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	220a      	movs	r2, #10
 8014e4e:	9803      	ldr	r0, [sp, #12]
 8014e50:	f000 f9cc 	bl	80151ec <__multadd>
 8014e54:	2300      	movs	r3, #0
 8014e56:	9004      	str	r0, [sp, #16]
 8014e58:	220a      	movs	r2, #10
 8014e5a:	0039      	movs	r1, r7
 8014e5c:	9803      	ldr	r0, [sp, #12]
 8014e5e:	f000 f9c5 	bl	80151ec <__multadd>
 8014e62:	e7ee      	b.n	8014e42 <_dtoa_r+0xb1a>
 8014e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e66:	2401      	movs	r4, #1
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	dd00      	ble.n	8014e6e <_dtoa_r+0xb46>
 8014e6c:	001c      	movs	r4, r3
 8014e6e:	9b08      	ldr	r3, [sp, #32]
 8014e70:	191c      	adds	r4, r3, r4
 8014e72:	2300      	movs	r3, #0
 8014e74:	9304      	str	r3, [sp, #16]
 8014e76:	9905      	ldr	r1, [sp, #20]
 8014e78:	2201      	movs	r2, #1
 8014e7a:	9803      	ldr	r0, [sp, #12]
 8014e7c:	f000 fb70 	bl	8015560 <__lshift>
 8014e80:	0031      	movs	r1, r6
 8014e82:	9005      	str	r0, [sp, #20]
 8014e84:	f000 fbd8 	bl	8015638 <__mcmp>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	dcb3      	bgt.n	8014df4 <_dtoa_r+0xacc>
 8014e8c:	d101      	bne.n	8014e92 <_dtoa_r+0xb6a>
 8014e8e:	07ed      	lsls	r5, r5, #31
 8014e90:	d4b0      	bmi.n	8014df4 <_dtoa_r+0xacc>
 8014e92:	0023      	movs	r3, r4
 8014e94:	001c      	movs	r4, r3
 8014e96:	3b01      	subs	r3, #1
 8014e98:	781a      	ldrb	r2, [r3, #0]
 8014e9a:	2a30      	cmp	r2, #48	@ 0x30
 8014e9c:	d0fa      	beq.n	8014e94 <_dtoa_r+0xb6c>
 8014e9e:	e5b7      	b.n	8014a10 <_dtoa_r+0x6e8>
 8014ea0:	9a08      	ldr	r2, [sp, #32]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d1a7      	bne.n	8014df6 <_dtoa_r+0xace>
 8014ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8014eac:	2331      	movs	r3, #49	@ 0x31
 8014eae:	7013      	strb	r3, [r2, #0]
 8014eb0:	e5ae      	b.n	8014a10 <_dtoa_r+0x6e8>
 8014eb2:	4b15      	ldr	r3, [pc, #84]	@ (8014f08 <_dtoa_r+0xbe0>)
 8014eb4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8014eb6:	9308      	str	r3, [sp, #32]
 8014eb8:	4b14      	ldr	r3, [pc, #80]	@ (8014f0c <_dtoa_r+0xbe4>)
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	d001      	beq.n	8014ec2 <_dtoa_r+0xb9a>
 8014ebe:	f7ff fa7b 	bl	80143b8 <_dtoa_r+0x90>
 8014ec2:	f7ff fa7b 	bl	80143bc <_dtoa_r+0x94>
 8014ec6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	dc00      	bgt.n	8014ece <_dtoa_r+0xba6>
 8014ecc:	e648      	b.n	8014b60 <_dtoa_r+0x838>
 8014ece:	2001      	movs	r0, #1
 8014ed0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8014ed2:	e665      	b.n	8014ba0 <_dtoa_r+0x878>
 8014ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	dc00      	bgt.n	8014edc <_dtoa_r+0xbb4>
 8014eda:	e6d6      	b.n	8014c8a <_dtoa_r+0x962>
 8014edc:	2400      	movs	r4, #0
 8014ede:	0031      	movs	r1, r6
 8014ee0:	9805      	ldr	r0, [sp, #20]
 8014ee2:	f7ff f992 	bl	801420a <quorem>
 8014ee6:	9b08      	ldr	r3, [sp, #32]
 8014ee8:	3030      	adds	r0, #48	@ 0x30
 8014eea:	5518      	strb	r0, [r3, r4]
 8014eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eee:	3401      	adds	r4, #1
 8014ef0:	0005      	movs	r5, r0
 8014ef2:	429c      	cmp	r4, r3
 8014ef4:	dab6      	bge.n	8014e64 <_dtoa_r+0xb3c>
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	220a      	movs	r2, #10
 8014efa:	9905      	ldr	r1, [sp, #20]
 8014efc:	9803      	ldr	r0, [sp, #12]
 8014efe:	f000 f975 	bl	80151ec <__multadd>
 8014f02:	9005      	str	r0, [sp, #20]
 8014f04:	e7eb      	b.n	8014ede <_dtoa_r+0xbb6>
 8014f06:	46c0      	nop			@ (mov r8, r8)
 8014f08:	08019f9a 	.word	0x08019f9a
 8014f0c:	08019fa2 	.word	0x08019fa2

08014f10 <_free_r>:
 8014f10:	b570      	push	{r4, r5, r6, lr}
 8014f12:	0005      	movs	r5, r0
 8014f14:	1e0c      	subs	r4, r1, #0
 8014f16:	d010      	beq.n	8014f3a <_free_r+0x2a>
 8014f18:	3c04      	subs	r4, #4
 8014f1a:	6823      	ldr	r3, [r4, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	da00      	bge.n	8014f22 <_free_r+0x12>
 8014f20:	18e4      	adds	r4, r4, r3
 8014f22:	0028      	movs	r0, r5
 8014f24:	f000 f8ea 	bl	80150fc <__malloc_lock>
 8014f28:	4a1d      	ldr	r2, [pc, #116]	@ (8014fa0 <_free_r+0x90>)
 8014f2a:	6813      	ldr	r3, [r2, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d105      	bne.n	8014f3c <_free_r+0x2c>
 8014f30:	6063      	str	r3, [r4, #4]
 8014f32:	6014      	str	r4, [r2, #0]
 8014f34:	0028      	movs	r0, r5
 8014f36:	f000 f8e9 	bl	801510c <__malloc_unlock>
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	42a3      	cmp	r3, r4
 8014f3e:	d908      	bls.n	8014f52 <_free_r+0x42>
 8014f40:	6820      	ldr	r0, [r4, #0]
 8014f42:	1821      	adds	r1, r4, r0
 8014f44:	428b      	cmp	r3, r1
 8014f46:	d1f3      	bne.n	8014f30 <_free_r+0x20>
 8014f48:	6819      	ldr	r1, [r3, #0]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	1809      	adds	r1, r1, r0
 8014f4e:	6021      	str	r1, [r4, #0]
 8014f50:	e7ee      	b.n	8014f30 <_free_r+0x20>
 8014f52:	001a      	movs	r2, r3
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d001      	beq.n	8014f5e <_free_r+0x4e>
 8014f5a:	42a3      	cmp	r3, r4
 8014f5c:	d9f9      	bls.n	8014f52 <_free_r+0x42>
 8014f5e:	6811      	ldr	r1, [r2, #0]
 8014f60:	1850      	adds	r0, r2, r1
 8014f62:	42a0      	cmp	r0, r4
 8014f64:	d10b      	bne.n	8014f7e <_free_r+0x6e>
 8014f66:	6820      	ldr	r0, [r4, #0]
 8014f68:	1809      	adds	r1, r1, r0
 8014f6a:	1850      	adds	r0, r2, r1
 8014f6c:	6011      	str	r1, [r2, #0]
 8014f6e:	4283      	cmp	r3, r0
 8014f70:	d1e0      	bne.n	8014f34 <_free_r+0x24>
 8014f72:	6818      	ldr	r0, [r3, #0]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	1841      	adds	r1, r0, r1
 8014f78:	6011      	str	r1, [r2, #0]
 8014f7a:	6053      	str	r3, [r2, #4]
 8014f7c:	e7da      	b.n	8014f34 <_free_r+0x24>
 8014f7e:	42a0      	cmp	r0, r4
 8014f80:	d902      	bls.n	8014f88 <_free_r+0x78>
 8014f82:	230c      	movs	r3, #12
 8014f84:	602b      	str	r3, [r5, #0]
 8014f86:	e7d5      	b.n	8014f34 <_free_r+0x24>
 8014f88:	6820      	ldr	r0, [r4, #0]
 8014f8a:	1821      	adds	r1, r4, r0
 8014f8c:	428b      	cmp	r3, r1
 8014f8e:	d103      	bne.n	8014f98 <_free_r+0x88>
 8014f90:	6819      	ldr	r1, [r3, #0]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	1809      	adds	r1, r1, r0
 8014f96:	6021      	str	r1, [r4, #0]
 8014f98:	6063      	str	r3, [r4, #4]
 8014f9a:	6054      	str	r4, [r2, #4]
 8014f9c:	e7ca      	b.n	8014f34 <_free_r+0x24>
 8014f9e:	46c0      	nop			@ (mov r8, r8)
 8014fa0:	20001fa4 	.word	0x20001fa4

08014fa4 <malloc>:
 8014fa4:	b510      	push	{r4, lr}
 8014fa6:	4b03      	ldr	r3, [pc, #12]	@ (8014fb4 <malloc+0x10>)
 8014fa8:	0001      	movs	r1, r0
 8014faa:	6818      	ldr	r0, [r3, #0]
 8014fac:	f000 f826 	bl	8014ffc <_malloc_r>
 8014fb0:	bd10      	pop	{r4, pc}
 8014fb2:	46c0      	nop			@ (mov r8, r8)
 8014fb4:	2000020c 	.word	0x2000020c

08014fb8 <sbrk_aligned>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	4e0f      	ldr	r6, [pc, #60]	@ (8014ff8 <sbrk_aligned+0x40>)
 8014fbc:	000d      	movs	r5, r1
 8014fbe:	6831      	ldr	r1, [r6, #0]
 8014fc0:	0004      	movs	r4, r0
 8014fc2:	2900      	cmp	r1, #0
 8014fc4:	d102      	bne.n	8014fcc <sbrk_aligned+0x14>
 8014fc6:	f000 fe6f 	bl	8015ca8 <_sbrk_r>
 8014fca:	6030      	str	r0, [r6, #0]
 8014fcc:	0029      	movs	r1, r5
 8014fce:	0020      	movs	r0, r4
 8014fd0:	f000 fe6a 	bl	8015ca8 <_sbrk_r>
 8014fd4:	1c43      	adds	r3, r0, #1
 8014fd6:	d103      	bne.n	8014fe0 <sbrk_aligned+0x28>
 8014fd8:	2501      	movs	r5, #1
 8014fda:	426d      	negs	r5, r5
 8014fdc:	0028      	movs	r0, r5
 8014fde:	bd70      	pop	{r4, r5, r6, pc}
 8014fe0:	2303      	movs	r3, #3
 8014fe2:	1cc5      	adds	r5, r0, #3
 8014fe4:	439d      	bics	r5, r3
 8014fe6:	42a8      	cmp	r0, r5
 8014fe8:	d0f8      	beq.n	8014fdc <sbrk_aligned+0x24>
 8014fea:	1a29      	subs	r1, r5, r0
 8014fec:	0020      	movs	r0, r4
 8014fee:	f000 fe5b 	bl	8015ca8 <_sbrk_r>
 8014ff2:	3001      	adds	r0, #1
 8014ff4:	d1f2      	bne.n	8014fdc <sbrk_aligned+0x24>
 8014ff6:	e7ef      	b.n	8014fd8 <sbrk_aligned+0x20>
 8014ff8:	20001fa0 	.word	0x20001fa0

08014ffc <_malloc_r>:
 8014ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ffe:	2203      	movs	r2, #3
 8015000:	1ccb      	adds	r3, r1, #3
 8015002:	4393      	bics	r3, r2
 8015004:	3308      	adds	r3, #8
 8015006:	0005      	movs	r5, r0
 8015008:	001f      	movs	r7, r3
 801500a:	2b0c      	cmp	r3, #12
 801500c:	d234      	bcs.n	8015078 <_malloc_r+0x7c>
 801500e:	270c      	movs	r7, #12
 8015010:	42b9      	cmp	r1, r7
 8015012:	d833      	bhi.n	801507c <_malloc_r+0x80>
 8015014:	0028      	movs	r0, r5
 8015016:	f000 f871 	bl	80150fc <__malloc_lock>
 801501a:	4e37      	ldr	r6, [pc, #220]	@ (80150f8 <_malloc_r+0xfc>)
 801501c:	6833      	ldr	r3, [r6, #0]
 801501e:	001c      	movs	r4, r3
 8015020:	2c00      	cmp	r4, #0
 8015022:	d12f      	bne.n	8015084 <_malloc_r+0x88>
 8015024:	0039      	movs	r1, r7
 8015026:	0028      	movs	r0, r5
 8015028:	f7ff ffc6 	bl	8014fb8 <sbrk_aligned>
 801502c:	0004      	movs	r4, r0
 801502e:	1c43      	adds	r3, r0, #1
 8015030:	d15f      	bne.n	80150f2 <_malloc_r+0xf6>
 8015032:	6834      	ldr	r4, [r6, #0]
 8015034:	9400      	str	r4, [sp, #0]
 8015036:	9b00      	ldr	r3, [sp, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d14a      	bne.n	80150d2 <_malloc_r+0xd6>
 801503c:	2c00      	cmp	r4, #0
 801503e:	d052      	beq.n	80150e6 <_malloc_r+0xea>
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	0028      	movs	r0, r5
 8015044:	18e3      	adds	r3, r4, r3
 8015046:	9900      	ldr	r1, [sp, #0]
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	f000 fe2d 	bl	8015ca8 <_sbrk_r>
 801504e:	9b01      	ldr	r3, [sp, #4]
 8015050:	4283      	cmp	r3, r0
 8015052:	d148      	bne.n	80150e6 <_malloc_r+0xea>
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	0028      	movs	r0, r5
 8015058:	1aff      	subs	r7, r7, r3
 801505a:	0039      	movs	r1, r7
 801505c:	f7ff ffac 	bl	8014fb8 <sbrk_aligned>
 8015060:	3001      	adds	r0, #1
 8015062:	d040      	beq.n	80150e6 <_malloc_r+0xea>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	19db      	adds	r3, r3, r7
 8015068:	6023      	str	r3, [r4, #0]
 801506a:	6833      	ldr	r3, [r6, #0]
 801506c:	685a      	ldr	r2, [r3, #4]
 801506e:	2a00      	cmp	r2, #0
 8015070:	d133      	bne.n	80150da <_malloc_r+0xde>
 8015072:	9b00      	ldr	r3, [sp, #0]
 8015074:	6033      	str	r3, [r6, #0]
 8015076:	e019      	b.n	80150ac <_malloc_r+0xb0>
 8015078:	2b00      	cmp	r3, #0
 801507a:	dac9      	bge.n	8015010 <_malloc_r+0x14>
 801507c:	230c      	movs	r3, #12
 801507e:	602b      	str	r3, [r5, #0]
 8015080:	2000      	movs	r0, #0
 8015082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015084:	6821      	ldr	r1, [r4, #0]
 8015086:	1bc9      	subs	r1, r1, r7
 8015088:	d420      	bmi.n	80150cc <_malloc_r+0xd0>
 801508a:	290b      	cmp	r1, #11
 801508c:	d90a      	bls.n	80150a4 <_malloc_r+0xa8>
 801508e:	19e2      	adds	r2, r4, r7
 8015090:	6027      	str	r7, [r4, #0]
 8015092:	42a3      	cmp	r3, r4
 8015094:	d104      	bne.n	80150a0 <_malloc_r+0xa4>
 8015096:	6032      	str	r2, [r6, #0]
 8015098:	6863      	ldr	r3, [r4, #4]
 801509a:	6011      	str	r1, [r2, #0]
 801509c:	6053      	str	r3, [r2, #4]
 801509e:	e005      	b.n	80150ac <_malloc_r+0xb0>
 80150a0:	605a      	str	r2, [r3, #4]
 80150a2:	e7f9      	b.n	8015098 <_malloc_r+0x9c>
 80150a4:	6862      	ldr	r2, [r4, #4]
 80150a6:	42a3      	cmp	r3, r4
 80150a8:	d10e      	bne.n	80150c8 <_malloc_r+0xcc>
 80150aa:	6032      	str	r2, [r6, #0]
 80150ac:	0028      	movs	r0, r5
 80150ae:	f000 f82d 	bl	801510c <__malloc_unlock>
 80150b2:	0020      	movs	r0, r4
 80150b4:	2207      	movs	r2, #7
 80150b6:	300b      	adds	r0, #11
 80150b8:	1d23      	adds	r3, r4, #4
 80150ba:	4390      	bics	r0, r2
 80150bc:	1ac2      	subs	r2, r0, r3
 80150be:	4298      	cmp	r0, r3
 80150c0:	d0df      	beq.n	8015082 <_malloc_r+0x86>
 80150c2:	1a1b      	subs	r3, r3, r0
 80150c4:	50a3      	str	r3, [r4, r2]
 80150c6:	e7dc      	b.n	8015082 <_malloc_r+0x86>
 80150c8:	605a      	str	r2, [r3, #4]
 80150ca:	e7ef      	b.n	80150ac <_malloc_r+0xb0>
 80150cc:	0023      	movs	r3, r4
 80150ce:	6864      	ldr	r4, [r4, #4]
 80150d0:	e7a6      	b.n	8015020 <_malloc_r+0x24>
 80150d2:	9c00      	ldr	r4, [sp, #0]
 80150d4:	6863      	ldr	r3, [r4, #4]
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	e7ad      	b.n	8015036 <_malloc_r+0x3a>
 80150da:	001a      	movs	r2, r3
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	42a3      	cmp	r3, r4
 80150e0:	d1fb      	bne.n	80150da <_malloc_r+0xde>
 80150e2:	2300      	movs	r3, #0
 80150e4:	e7da      	b.n	801509c <_malloc_r+0xa0>
 80150e6:	230c      	movs	r3, #12
 80150e8:	0028      	movs	r0, r5
 80150ea:	602b      	str	r3, [r5, #0]
 80150ec:	f000 f80e 	bl	801510c <__malloc_unlock>
 80150f0:	e7c6      	b.n	8015080 <_malloc_r+0x84>
 80150f2:	6007      	str	r7, [r0, #0]
 80150f4:	e7da      	b.n	80150ac <_malloc_r+0xb0>
 80150f6:	46c0      	nop			@ (mov r8, r8)
 80150f8:	20001fa4 	.word	0x20001fa4

080150fc <__malloc_lock>:
 80150fc:	b510      	push	{r4, lr}
 80150fe:	4802      	ldr	r0, [pc, #8]	@ (8015108 <__malloc_lock+0xc>)
 8015100:	f7ff f86d 	bl	80141de <__retarget_lock_acquire_recursive>
 8015104:	bd10      	pop	{r4, pc}
 8015106:	46c0      	nop			@ (mov r8, r8)
 8015108:	20001f9c 	.word	0x20001f9c

0801510c <__malloc_unlock>:
 801510c:	b510      	push	{r4, lr}
 801510e:	4802      	ldr	r0, [pc, #8]	@ (8015118 <__malloc_unlock+0xc>)
 8015110:	f7ff f866 	bl	80141e0 <__retarget_lock_release_recursive>
 8015114:	bd10      	pop	{r4, pc}
 8015116:	46c0      	nop			@ (mov r8, r8)
 8015118:	20001f9c 	.word	0x20001f9c

0801511c <_Balloc>:
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	69c5      	ldr	r5, [r0, #28]
 8015120:	0006      	movs	r6, r0
 8015122:	000c      	movs	r4, r1
 8015124:	2d00      	cmp	r5, #0
 8015126:	d10e      	bne.n	8015146 <_Balloc+0x2a>
 8015128:	2010      	movs	r0, #16
 801512a:	f7ff ff3b 	bl	8014fa4 <malloc>
 801512e:	1e02      	subs	r2, r0, #0
 8015130:	61f0      	str	r0, [r6, #28]
 8015132:	d104      	bne.n	801513e <_Balloc+0x22>
 8015134:	216b      	movs	r1, #107	@ 0x6b
 8015136:	4b19      	ldr	r3, [pc, #100]	@ (801519c <_Balloc+0x80>)
 8015138:	4819      	ldr	r0, [pc, #100]	@ (80151a0 <_Balloc+0x84>)
 801513a:	f000 fdc7 	bl	8015ccc <__assert_func>
 801513e:	6045      	str	r5, [r0, #4]
 8015140:	6085      	str	r5, [r0, #8]
 8015142:	6005      	str	r5, [r0, #0]
 8015144:	60c5      	str	r5, [r0, #12]
 8015146:	69f5      	ldr	r5, [r6, #28]
 8015148:	68eb      	ldr	r3, [r5, #12]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d013      	beq.n	8015176 <_Balloc+0x5a>
 801514e:	69f3      	ldr	r3, [r6, #28]
 8015150:	00a2      	lsls	r2, r4, #2
 8015152:	68db      	ldr	r3, [r3, #12]
 8015154:	189b      	adds	r3, r3, r2
 8015156:	6818      	ldr	r0, [r3, #0]
 8015158:	2800      	cmp	r0, #0
 801515a:	d118      	bne.n	801518e <_Balloc+0x72>
 801515c:	2101      	movs	r1, #1
 801515e:	000d      	movs	r5, r1
 8015160:	40a5      	lsls	r5, r4
 8015162:	1d6a      	adds	r2, r5, #5
 8015164:	0030      	movs	r0, r6
 8015166:	0092      	lsls	r2, r2, #2
 8015168:	f000 fdce 	bl	8015d08 <_calloc_r>
 801516c:	2800      	cmp	r0, #0
 801516e:	d00c      	beq.n	801518a <_Balloc+0x6e>
 8015170:	6044      	str	r4, [r0, #4]
 8015172:	6085      	str	r5, [r0, #8]
 8015174:	e00d      	b.n	8015192 <_Balloc+0x76>
 8015176:	2221      	movs	r2, #33	@ 0x21
 8015178:	2104      	movs	r1, #4
 801517a:	0030      	movs	r0, r6
 801517c:	f000 fdc4 	bl	8015d08 <_calloc_r>
 8015180:	69f3      	ldr	r3, [r6, #28]
 8015182:	60e8      	str	r0, [r5, #12]
 8015184:	68db      	ldr	r3, [r3, #12]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d1e1      	bne.n	801514e <_Balloc+0x32>
 801518a:	2000      	movs	r0, #0
 801518c:	bd70      	pop	{r4, r5, r6, pc}
 801518e:	6802      	ldr	r2, [r0, #0]
 8015190:	601a      	str	r2, [r3, #0]
 8015192:	2300      	movs	r3, #0
 8015194:	6103      	str	r3, [r0, #16]
 8015196:	60c3      	str	r3, [r0, #12]
 8015198:	e7f8      	b.n	801518c <_Balloc+0x70>
 801519a:	46c0      	nop			@ (mov r8, r8)
 801519c:	08019fa7 	.word	0x08019fa7
 80151a0:	0801a027 	.word	0x0801a027

080151a4 <_Bfree>:
 80151a4:	b570      	push	{r4, r5, r6, lr}
 80151a6:	69c6      	ldr	r6, [r0, #28]
 80151a8:	0005      	movs	r5, r0
 80151aa:	000c      	movs	r4, r1
 80151ac:	2e00      	cmp	r6, #0
 80151ae:	d10e      	bne.n	80151ce <_Bfree+0x2a>
 80151b0:	2010      	movs	r0, #16
 80151b2:	f7ff fef7 	bl	8014fa4 <malloc>
 80151b6:	1e02      	subs	r2, r0, #0
 80151b8:	61e8      	str	r0, [r5, #28]
 80151ba:	d104      	bne.n	80151c6 <_Bfree+0x22>
 80151bc:	218f      	movs	r1, #143	@ 0x8f
 80151be:	4b09      	ldr	r3, [pc, #36]	@ (80151e4 <_Bfree+0x40>)
 80151c0:	4809      	ldr	r0, [pc, #36]	@ (80151e8 <_Bfree+0x44>)
 80151c2:	f000 fd83 	bl	8015ccc <__assert_func>
 80151c6:	6046      	str	r6, [r0, #4]
 80151c8:	6086      	str	r6, [r0, #8]
 80151ca:	6006      	str	r6, [r0, #0]
 80151cc:	60c6      	str	r6, [r0, #12]
 80151ce:	2c00      	cmp	r4, #0
 80151d0:	d007      	beq.n	80151e2 <_Bfree+0x3e>
 80151d2:	69eb      	ldr	r3, [r5, #28]
 80151d4:	6862      	ldr	r2, [r4, #4]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	0092      	lsls	r2, r2, #2
 80151da:	189b      	adds	r3, r3, r2
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	6022      	str	r2, [r4, #0]
 80151e0:	601c      	str	r4, [r3, #0]
 80151e2:	bd70      	pop	{r4, r5, r6, pc}
 80151e4:	08019fa7 	.word	0x08019fa7
 80151e8:	0801a027 	.word	0x0801a027

080151ec <__multadd>:
 80151ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151ee:	000f      	movs	r7, r1
 80151f0:	9001      	str	r0, [sp, #4]
 80151f2:	000c      	movs	r4, r1
 80151f4:	001e      	movs	r6, r3
 80151f6:	2000      	movs	r0, #0
 80151f8:	690d      	ldr	r5, [r1, #16]
 80151fa:	3714      	adds	r7, #20
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	3001      	adds	r0, #1
 8015200:	b299      	uxth	r1, r3
 8015202:	4351      	muls	r1, r2
 8015204:	0c1b      	lsrs	r3, r3, #16
 8015206:	4353      	muls	r3, r2
 8015208:	1989      	adds	r1, r1, r6
 801520a:	0c0e      	lsrs	r6, r1, #16
 801520c:	199b      	adds	r3, r3, r6
 801520e:	0c1e      	lsrs	r6, r3, #16
 8015210:	b289      	uxth	r1, r1
 8015212:	041b      	lsls	r3, r3, #16
 8015214:	185b      	adds	r3, r3, r1
 8015216:	c708      	stmia	r7!, {r3}
 8015218:	4285      	cmp	r5, r0
 801521a:	dcef      	bgt.n	80151fc <__multadd+0x10>
 801521c:	2e00      	cmp	r6, #0
 801521e:	d022      	beq.n	8015266 <__multadd+0x7a>
 8015220:	68a3      	ldr	r3, [r4, #8]
 8015222:	42ab      	cmp	r3, r5
 8015224:	dc19      	bgt.n	801525a <__multadd+0x6e>
 8015226:	6861      	ldr	r1, [r4, #4]
 8015228:	9801      	ldr	r0, [sp, #4]
 801522a:	3101      	adds	r1, #1
 801522c:	f7ff ff76 	bl	801511c <_Balloc>
 8015230:	1e07      	subs	r7, r0, #0
 8015232:	d105      	bne.n	8015240 <__multadd+0x54>
 8015234:	003a      	movs	r2, r7
 8015236:	21ba      	movs	r1, #186	@ 0xba
 8015238:	4b0c      	ldr	r3, [pc, #48]	@ (801526c <__multadd+0x80>)
 801523a:	480d      	ldr	r0, [pc, #52]	@ (8015270 <__multadd+0x84>)
 801523c:	f000 fd46 	bl	8015ccc <__assert_func>
 8015240:	0021      	movs	r1, r4
 8015242:	6922      	ldr	r2, [r4, #16]
 8015244:	310c      	adds	r1, #12
 8015246:	3202      	adds	r2, #2
 8015248:	0092      	lsls	r2, r2, #2
 801524a:	300c      	adds	r0, #12
 801524c:	f7fe ffd4 	bl	80141f8 <memcpy>
 8015250:	0021      	movs	r1, r4
 8015252:	9801      	ldr	r0, [sp, #4]
 8015254:	f7ff ffa6 	bl	80151a4 <_Bfree>
 8015258:	003c      	movs	r4, r7
 801525a:	1d2b      	adds	r3, r5, #4
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	18e3      	adds	r3, r4, r3
 8015260:	3501      	adds	r5, #1
 8015262:	605e      	str	r6, [r3, #4]
 8015264:	6125      	str	r5, [r4, #16]
 8015266:	0020      	movs	r0, r4
 8015268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801526a:	46c0      	nop			@ (mov r8, r8)
 801526c:	0801a016 	.word	0x0801a016
 8015270:	0801a027 	.word	0x0801a027

08015274 <__hi0bits>:
 8015274:	2280      	movs	r2, #128	@ 0x80
 8015276:	0003      	movs	r3, r0
 8015278:	0252      	lsls	r2, r2, #9
 801527a:	2000      	movs	r0, #0
 801527c:	4293      	cmp	r3, r2
 801527e:	d201      	bcs.n	8015284 <__hi0bits+0x10>
 8015280:	041b      	lsls	r3, r3, #16
 8015282:	3010      	adds	r0, #16
 8015284:	2280      	movs	r2, #128	@ 0x80
 8015286:	0452      	lsls	r2, r2, #17
 8015288:	4293      	cmp	r3, r2
 801528a:	d201      	bcs.n	8015290 <__hi0bits+0x1c>
 801528c:	3008      	adds	r0, #8
 801528e:	021b      	lsls	r3, r3, #8
 8015290:	2280      	movs	r2, #128	@ 0x80
 8015292:	0552      	lsls	r2, r2, #21
 8015294:	4293      	cmp	r3, r2
 8015296:	d201      	bcs.n	801529c <__hi0bits+0x28>
 8015298:	3004      	adds	r0, #4
 801529a:	011b      	lsls	r3, r3, #4
 801529c:	2280      	movs	r2, #128	@ 0x80
 801529e:	05d2      	lsls	r2, r2, #23
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d201      	bcs.n	80152a8 <__hi0bits+0x34>
 80152a4:	3002      	adds	r0, #2
 80152a6:	009b      	lsls	r3, r3, #2
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	db03      	blt.n	80152b4 <__hi0bits+0x40>
 80152ac:	3001      	adds	r0, #1
 80152ae:	4213      	tst	r3, r2
 80152b0:	d100      	bne.n	80152b4 <__hi0bits+0x40>
 80152b2:	2020      	movs	r0, #32
 80152b4:	4770      	bx	lr

080152b6 <__lo0bits>:
 80152b6:	6803      	ldr	r3, [r0, #0]
 80152b8:	0001      	movs	r1, r0
 80152ba:	2207      	movs	r2, #7
 80152bc:	0018      	movs	r0, r3
 80152be:	4010      	ands	r0, r2
 80152c0:	4213      	tst	r3, r2
 80152c2:	d00d      	beq.n	80152e0 <__lo0bits+0x2a>
 80152c4:	3a06      	subs	r2, #6
 80152c6:	2000      	movs	r0, #0
 80152c8:	4213      	tst	r3, r2
 80152ca:	d105      	bne.n	80152d8 <__lo0bits+0x22>
 80152cc:	3002      	adds	r0, #2
 80152ce:	4203      	tst	r3, r0
 80152d0:	d003      	beq.n	80152da <__lo0bits+0x24>
 80152d2:	40d3      	lsrs	r3, r2
 80152d4:	0010      	movs	r0, r2
 80152d6:	600b      	str	r3, [r1, #0]
 80152d8:	4770      	bx	lr
 80152da:	089b      	lsrs	r3, r3, #2
 80152dc:	600b      	str	r3, [r1, #0]
 80152de:	e7fb      	b.n	80152d8 <__lo0bits+0x22>
 80152e0:	b29a      	uxth	r2, r3
 80152e2:	2a00      	cmp	r2, #0
 80152e4:	d101      	bne.n	80152ea <__lo0bits+0x34>
 80152e6:	2010      	movs	r0, #16
 80152e8:	0c1b      	lsrs	r3, r3, #16
 80152ea:	b2da      	uxtb	r2, r3
 80152ec:	2a00      	cmp	r2, #0
 80152ee:	d101      	bne.n	80152f4 <__lo0bits+0x3e>
 80152f0:	3008      	adds	r0, #8
 80152f2:	0a1b      	lsrs	r3, r3, #8
 80152f4:	071a      	lsls	r2, r3, #28
 80152f6:	d101      	bne.n	80152fc <__lo0bits+0x46>
 80152f8:	3004      	adds	r0, #4
 80152fa:	091b      	lsrs	r3, r3, #4
 80152fc:	079a      	lsls	r2, r3, #30
 80152fe:	d101      	bne.n	8015304 <__lo0bits+0x4e>
 8015300:	3002      	adds	r0, #2
 8015302:	089b      	lsrs	r3, r3, #2
 8015304:	07da      	lsls	r2, r3, #31
 8015306:	d4e9      	bmi.n	80152dc <__lo0bits+0x26>
 8015308:	3001      	adds	r0, #1
 801530a:	085b      	lsrs	r3, r3, #1
 801530c:	d1e6      	bne.n	80152dc <__lo0bits+0x26>
 801530e:	2020      	movs	r0, #32
 8015310:	e7e2      	b.n	80152d8 <__lo0bits+0x22>
	...

08015314 <__i2b>:
 8015314:	b510      	push	{r4, lr}
 8015316:	000c      	movs	r4, r1
 8015318:	2101      	movs	r1, #1
 801531a:	f7ff feff 	bl	801511c <_Balloc>
 801531e:	2800      	cmp	r0, #0
 8015320:	d107      	bne.n	8015332 <__i2b+0x1e>
 8015322:	2146      	movs	r1, #70	@ 0x46
 8015324:	4c05      	ldr	r4, [pc, #20]	@ (801533c <__i2b+0x28>)
 8015326:	0002      	movs	r2, r0
 8015328:	4b05      	ldr	r3, [pc, #20]	@ (8015340 <__i2b+0x2c>)
 801532a:	0020      	movs	r0, r4
 801532c:	31ff      	adds	r1, #255	@ 0xff
 801532e:	f000 fccd 	bl	8015ccc <__assert_func>
 8015332:	2301      	movs	r3, #1
 8015334:	6144      	str	r4, [r0, #20]
 8015336:	6103      	str	r3, [r0, #16]
 8015338:	bd10      	pop	{r4, pc}
 801533a:	46c0      	nop			@ (mov r8, r8)
 801533c:	0801a027 	.word	0x0801a027
 8015340:	0801a016 	.word	0x0801a016

08015344 <__multiply>:
 8015344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015346:	0014      	movs	r4, r2
 8015348:	690a      	ldr	r2, [r1, #16]
 801534a:	6923      	ldr	r3, [r4, #16]
 801534c:	000d      	movs	r5, r1
 801534e:	b08b      	sub	sp, #44	@ 0x2c
 8015350:	429a      	cmp	r2, r3
 8015352:	db02      	blt.n	801535a <__multiply+0x16>
 8015354:	0023      	movs	r3, r4
 8015356:	000c      	movs	r4, r1
 8015358:	001d      	movs	r5, r3
 801535a:	6927      	ldr	r7, [r4, #16]
 801535c:	692e      	ldr	r6, [r5, #16]
 801535e:	6861      	ldr	r1, [r4, #4]
 8015360:	19bb      	adds	r3, r7, r6
 8015362:	9303      	str	r3, [sp, #12]
 8015364:	68a3      	ldr	r3, [r4, #8]
 8015366:	19ba      	adds	r2, r7, r6
 8015368:	4293      	cmp	r3, r2
 801536a:	da00      	bge.n	801536e <__multiply+0x2a>
 801536c:	3101      	adds	r1, #1
 801536e:	f7ff fed5 	bl	801511c <_Balloc>
 8015372:	9002      	str	r0, [sp, #8]
 8015374:	2800      	cmp	r0, #0
 8015376:	d106      	bne.n	8015386 <__multiply+0x42>
 8015378:	21b1      	movs	r1, #177	@ 0xb1
 801537a:	4b49      	ldr	r3, [pc, #292]	@ (80154a0 <__multiply+0x15c>)
 801537c:	4849      	ldr	r0, [pc, #292]	@ (80154a4 <__multiply+0x160>)
 801537e:	9a02      	ldr	r2, [sp, #8]
 8015380:	0049      	lsls	r1, r1, #1
 8015382:	f000 fca3 	bl	8015ccc <__assert_func>
 8015386:	9b02      	ldr	r3, [sp, #8]
 8015388:	2200      	movs	r2, #0
 801538a:	3314      	adds	r3, #20
 801538c:	469c      	mov	ip, r3
 801538e:	19bb      	adds	r3, r7, r6
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	4463      	add	r3, ip
 8015394:	9304      	str	r3, [sp, #16]
 8015396:	4663      	mov	r3, ip
 8015398:	9904      	ldr	r1, [sp, #16]
 801539a:	428b      	cmp	r3, r1
 801539c:	d32a      	bcc.n	80153f4 <__multiply+0xb0>
 801539e:	0023      	movs	r3, r4
 80153a0:	00bf      	lsls	r7, r7, #2
 80153a2:	3314      	adds	r3, #20
 80153a4:	3514      	adds	r5, #20
 80153a6:	9308      	str	r3, [sp, #32]
 80153a8:	00b6      	lsls	r6, r6, #2
 80153aa:	19db      	adds	r3, r3, r7
 80153ac:	9305      	str	r3, [sp, #20]
 80153ae:	19ab      	adds	r3, r5, r6
 80153b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80153b2:	2304      	movs	r3, #4
 80153b4:	9306      	str	r3, [sp, #24]
 80153b6:	0023      	movs	r3, r4
 80153b8:	9a05      	ldr	r2, [sp, #20]
 80153ba:	3315      	adds	r3, #21
 80153bc:	9501      	str	r5, [sp, #4]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d305      	bcc.n	80153ce <__multiply+0x8a>
 80153c2:	1b13      	subs	r3, r2, r4
 80153c4:	3b15      	subs	r3, #21
 80153c6:	089b      	lsrs	r3, r3, #2
 80153c8:	3301      	adds	r3, #1
 80153ca:	009b      	lsls	r3, r3, #2
 80153cc:	9306      	str	r3, [sp, #24]
 80153ce:	9b01      	ldr	r3, [sp, #4]
 80153d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d310      	bcc.n	80153f8 <__multiply+0xb4>
 80153d6:	9b03      	ldr	r3, [sp, #12]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	dd05      	ble.n	80153e8 <__multiply+0xa4>
 80153dc:	9b04      	ldr	r3, [sp, #16]
 80153de:	3b04      	subs	r3, #4
 80153e0:	9304      	str	r3, [sp, #16]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d056      	beq.n	8015496 <__multiply+0x152>
 80153e8:	9b02      	ldr	r3, [sp, #8]
 80153ea:	9a03      	ldr	r2, [sp, #12]
 80153ec:	0018      	movs	r0, r3
 80153ee:	611a      	str	r2, [r3, #16]
 80153f0:	b00b      	add	sp, #44	@ 0x2c
 80153f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f4:	c304      	stmia	r3!, {r2}
 80153f6:	e7cf      	b.n	8015398 <__multiply+0x54>
 80153f8:	9b01      	ldr	r3, [sp, #4]
 80153fa:	6818      	ldr	r0, [r3, #0]
 80153fc:	b280      	uxth	r0, r0
 80153fe:	2800      	cmp	r0, #0
 8015400:	d01e      	beq.n	8015440 <__multiply+0xfc>
 8015402:	4667      	mov	r7, ip
 8015404:	2500      	movs	r5, #0
 8015406:	9e08      	ldr	r6, [sp, #32]
 8015408:	ce02      	ldmia	r6!, {r1}
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	9307      	str	r3, [sp, #28]
 801540e:	b28b      	uxth	r3, r1
 8015410:	4343      	muls	r3, r0
 8015412:	001a      	movs	r2, r3
 8015414:	466b      	mov	r3, sp
 8015416:	0c09      	lsrs	r1, r1, #16
 8015418:	8b9b      	ldrh	r3, [r3, #28]
 801541a:	4341      	muls	r1, r0
 801541c:	18d3      	adds	r3, r2, r3
 801541e:	9a07      	ldr	r2, [sp, #28]
 8015420:	195b      	adds	r3, r3, r5
 8015422:	0c12      	lsrs	r2, r2, #16
 8015424:	1889      	adds	r1, r1, r2
 8015426:	0c1a      	lsrs	r2, r3, #16
 8015428:	188a      	adds	r2, r1, r2
 801542a:	b29b      	uxth	r3, r3
 801542c:	0c15      	lsrs	r5, r2, #16
 801542e:	0412      	lsls	r2, r2, #16
 8015430:	431a      	orrs	r2, r3
 8015432:	9b05      	ldr	r3, [sp, #20]
 8015434:	c704      	stmia	r7!, {r2}
 8015436:	42b3      	cmp	r3, r6
 8015438:	d8e6      	bhi.n	8015408 <__multiply+0xc4>
 801543a:	4663      	mov	r3, ip
 801543c:	9a06      	ldr	r2, [sp, #24]
 801543e:	509d      	str	r5, [r3, r2]
 8015440:	9b01      	ldr	r3, [sp, #4]
 8015442:	6818      	ldr	r0, [r3, #0]
 8015444:	0c00      	lsrs	r0, r0, #16
 8015446:	d020      	beq.n	801548a <__multiply+0x146>
 8015448:	4663      	mov	r3, ip
 801544a:	0025      	movs	r5, r4
 801544c:	4661      	mov	r1, ip
 801544e:	2700      	movs	r7, #0
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	3514      	adds	r5, #20
 8015454:	682a      	ldr	r2, [r5, #0]
 8015456:	680e      	ldr	r6, [r1, #0]
 8015458:	b292      	uxth	r2, r2
 801545a:	4342      	muls	r2, r0
 801545c:	0c36      	lsrs	r6, r6, #16
 801545e:	1992      	adds	r2, r2, r6
 8015460:	19d2      	adds	r2, r2, r7
 8015462:	0416      	lsls	r6, r2, #16
 8015464:	b29b      	uxth	r3, r3
 8015466:	431e      	orrs	r6, r3
 8015468:	600e      	str	r6, [r1, #0]
 801546a:	cd40      	ldmia	r5!, {r6}
 801546c:	684b      	ldr	r3, [r1, #4]
 801546e:	0c36      	lsrs	r6, r6, #16
 8015470:	4346      	muls	r6, r0
 8015472:	b29b      	uxth	r3, r3
 8015474:	0c12      	lsrs	r2, r2, #16
 8015476:	18f3      	adds	r3, r6, r3
 8015478:	189b      	adds	r3, r3, r2
 801547a:	9a05      	ldr	r2, [sp, #20]
 801547c:	0c1f      	lsrs	r7, r3, #16
 801547e:	3104      	adds	r1, #4
 8015480:	42aa      	cmp	r2, r5
 8015482:	d8e7      	bhi.n	8015454 <__multiply+0x110>
 8015484:	4662      	mov	r2, ip
 8015486:	9906      	ldr	r1, [sp, #24]
 8015488:	5053      	str	r3, [r2, r1]
 801548a:	9b01      	ldr	r3, [sp, #4]
 801548c:	3304      	adds	r3, #4
 801548e:	9301      	str	r3, [sp, #4]
 8015490:	2304      	movs	r3, #4
 8015492:	449c      	add	ip, r3
 8015494:	e79b      	b.n	80153ce <__multiply+0x8a>
 8015496:	9b03      	ldr	r3, [sp, #12]
 8015498:	3b01      	subs	r3, #1
 801549a:	9303      	str	r3, [sp, #12]
 801549c:	e79b      	b.n	80153d6 <__multiply+0x92>
 801549e:	46c0      	nop			@ (mov r8, r8)
 80154a0:	0801a016 	.word	0x0801a016
 80154a4:	0801a027 	.word	0x0801a027

080154a8 <__pow5mult>:
 80154a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154aa:	2303      	movs	r3, #3
 80154ac:	0015      	movs	r5, r2
 80154ae:	0007      	movs	r7, r0
 80154b0:	000e      	movs	r6, r1
 80154b2:	401a      	ands	r2, r3
 80154b4:	421d      	tst	r5, r3
 80154b6:	d008      	beq.n	80154ca <__pow5mult+0x22>
 80154b8:	4925      	ldr	r1, [pc, #148]	@ (8015550 <__pow5mult+0xa8>)
 80154ba:	3a01      	subs	r2, #1
 80154bc:	0092      	lsls	r2, r2, #2
 80154be:	5852      	ldr	r2, [r2, r1]
 80154c0:	2300      	movs	r3, #0
 80154c2:	0031      	movs	r1, r6
 80154c4:	f7ff fe92 	bl	80151ec <__multadd>
 80154c8:	0006      	movs	r6, r0
 80154ca:	10ad      	asrs	r5, r5, #2
 80154cc:	d03d      	beq.n	801554a <__pow5mult+0xa2>
 80154ce:	69fc      	ldr	r4, [r7, #28]
 80154d0:	2c00      	cmp	r4, #0
 80154d2:	d10f      	bne.n	80154f4 <__pow5mult+0x4c>
 80154d4:	2010      	movs	r0, #16
 80154d6:	f7ff fd65 	bl	8014fa4 <malloc>
 80154da:	1e02      	subs	r2, r0, #0
 80154dc:	61f8      	str	r0, [r7, #28]
 80154de:	d105      	bne.n	80154ec <__pow5mult+0x44>
 80154e0:	21b4      	movs	r1, #180	@ 0xb4
 80154e2:	4b1c      	ldr	r3, [pc, #112]	@ (8015554 <__pow5mult+0xac>)
 80154e4:	481c      	ldr	r0, [pc, #112]	@ (8015558 <__pow5mult+0xb0>)
 80154e6:	31ff      	adds	r1, #255	@ 0xff
 80154e8:	f000 fbf0 	bl	8015ccc <__assert_func>
 80154ec:	6044      	str	r4, [r0, #4]
 80154ee:	6084      	str	r4, [r0, #8]
 80154f0:	6004      	str	r4, [r0, #0]
 80154f2:	60c4      	str	r4, [r0, #12]
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	689c      	ldr	r4, [r3, #8]
 80154f8:	9301      	str	r3, [sp, #4]
 80154fa:	2c00      	cmp	r4, #0
 80154fc:	d108      	bne.n	8015510 <__pow5mult+0x68>
 80154fe:	0038      	movs	r0, r7
 8015500:	4916      	ldr	r1, [pc, #88]	@ (801555c <__pow5mult+0xb4>)
 8015502:	f7ff ff07 	bl	8015314 <__i2b>
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	0004      	movs	r4, r0
 801550a:	6098      	str	r0, [r3, #8]
 801550c:	2300      	movs	r3, #0
 801550e:	6003      	str	r3, [r0, #0]
 8015510:	2301      	movs	r3, #1
 8015512:	421d      	tst	r5, r3
 8015514:	d00a      	beq.n	801552c <__pow5mult+0x84>
 8015516:	0031      	movs	r1, r6
 8015518:	0022      	movs	r2, r4
 801551a:	0038      	movs	r0, r7
 801551c:	f7ff ff12 	bl	8015344 <__multiply>
 8015520:	0031      	movs	r1, r6
 8015522:	9001      	str	r0, [sp, #4]
 8015524:	0038      	movs	r0, r7
 8015526:	f7ff fe3d 	bl	80151a4 <_Bfree>
 801552a:	9e01      	ldr	r6, [sp, #4]
 801552c:	106d      	asrs	r5, r5, #1
 801552e:	d00c      	beq.n	801554a <__pow5mult+0xa2>
 8015530:	6820      	ldr	r0, [r4, #0]
 8015532:	2800      	cmp	r0, #0
 8015534:	d107      	bne.n	8015546 <__pow5mult+0x9e>
 8015536:	0022      	movs	r2, r4
 8015538:	0021      	movs	r1, r4
 801553a:	0038      	movs	r0, r7
 801553c:	f7ff ff02 	bl	8015344 <__multiply>
 8015540:	2300      	movs	r3, #0
 8015542:	6020      	str	r0, [r4, #0]
 8015544:	6003      	str	r3, [r0, #0]
 8015546:	0004      	movs	r4, r0
 8015548:	e7e2      	b.n	8015510 <__pow5mult+0x68>
 801554a:	0030      	movs	r0, r6
 801554c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801554e:	46c0      	nop			@ (mov r8, r8)
 8015550:	0801a080 	.word	0x0801a080
 8015554:	08019fa7 	.word	0x08019fa7
 8015558:	0801a027 	.word	0x0801a027
 801555c:	00000271 	.word	0x00000271

08015560 <__lshift>:
 8015560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015562:	000c      	movs	r4, r1
 8015564:	0016      	movs	r6, r2
 8015566:	6923      	ldr	r3, [r4, #16]
 8015568:	1157      	asrs	r7, r2, #5
 801556a:	b085      	sub	sp, #20
 801556c:	18fb      	adds	r3, r7, r3
 801556e:	9301      	str	r3, [sp, #4]
 8015570:	3301      	adds	r3, #1
 8015572:	9300      	str	r3, [sp, #0]
 8015574:	6849      	ldr	r1, [r1, #4]
 8015576:	68a3      	ldr	r3, [r4, #8]
 8015578:	9002      	str	r0, [sp, #8]
 801557a:	9a00      	ldr	r2, [sp, #0]
 801557c:	4293      	cmp	r3, r2
 801557e:	db10      	blt.n	80155a2 <__lshift+0x42>
 8015580:	9802      	ldr	r0, [sp, #8]
 8015582:	f7ff fdcb 	bl	801511c <_Balloc>
 8015586:	2300      	movs	r3, #0
 8015588:	0001      	movs	r1, r0
 801558a:	0005      	movs	r5, r0
 801558c:	001a      	movs	r2, r3
 801558e:	3114      	adds	r1, #20
 8015590:	4298      	cmp	r0, r3
 8015592:	d10c      	bne.n	80155ae <__lshift+0x4e>
 8015594:	21ef      	movs	r1, #239	@ 0xef
 8015596:	002a      	movs	r2, r5
 8015598:	4b25      	ldr	r3, [pc, #148]	@ (8015630 <__lshift+0xd0>)
 801559a:	4826      	ldr	r0, [pc, #152]	@ (8015634 <__lshift+0xd4>)
 801559c:	0049      	lsls	r1, r1, #1
 801559e:	f000 fb95 	bl	8015ccc <__assert_func>
 80155a2:	3101      	adds	r1, #1
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	e7e8      	b.n	801557a <__lshift+0x1a>
 80155a8:	0098      	lsls	r0, r3, #2
 80155aa:	500a      	str	r2, [r1, r0]
 80155ac:	3301      	adds	r3, #1
 80155ae:	42bb      	cmp	r3, r7
 80155b0:	dbfa      	blt.n	80155a8 <__lshift+0x48>
 80155b2:	43fb      	mvns	r3, r7
 80155b4:	17db      	asrs	r3, r3, #31
 80155b6:	401f      	ands	r7, r3
 80155b8:	00bf      	lsls	r7, r7, #2
 80155ba:	0023      	movs	r3, r4
 80155bc:	201f      	movs	r0, #31
 80155be:	19c9      	adds	r1, r1, r7
 80155c0:	0037      	movs	r7, r6
 80155c2:	6922      	ldr	r2, [r4, #16]
 80155c4:	3314      	adds	r3, #20
 80155c6:	0092      	lsls	r2, r2, #2
 80155c8:	189a      	adds	r2, r3, r2
 80155ca:	4007      	ands	r7, r0
 80155cc:	4206      	tst	r6, r0
 80155ce:	d029      	beq.n	8015624 <__lshift+0xc4>
 80155d0:	3001      	adds	r0, #1
 80155d2:	1bc0      	subs	r0, r0, r7
 80155d4:	9003      	str	r0, [sp, #12]
 80155d6:	468c      	mov	ip, r1
 80155d8:	2000      	movs	r0, #0
 80155da:	681e      	ldr	r6, [r3, #0]
 80155dc:	40be      	lsls	r6, r7
 80155de:	4306      	orrs	r6, r0
 80155e0:	4660      	mov	r0, ip
 80155e2:	c040      	stmia	r0!, {r6}
 80155e4:	4684      	mov	ip, r0
 80155e6:	9e03      	ldr	r6, [sp, #12]
 80155e8:	cb01      	ldmia	r3!, {r0}
 80155ea:	40f0      	lsrs	r0, r6
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d8f4      	bhi.n	80155da <__lshift+0x7a>
 80155f0:	0026      	movs	r6, r4
 80155f2:	3615      	adds	r6, #21
 80155f4:	2304      	movs	r3, #4
 80155f6:	42b2      	cmp	r2, r6
 80155f8:	d304      	bcc.n	8015604 <__lshift+0xa4>
 80155fa:	1b13      	subs	r3, r2, r4
 80155fc:	3b15      	subs	r3, #21
 80155fe:	089b      	lsrs	r3, r3, #2
 8015600:	3301      	adds	r3, #1
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	50c8      	str	r0, [r1, r3]
 8015606:	2800      	cmp	r0, #0
 8015608:	d002      	beq.n	8015610 <__lshift+0xb0>
 801560a:	9b01      	ldr	r3, [sp, #4]
 801560c:	3302      	adds	r3, #2
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	9b00      	ldr	r3, [sp, #0]
 8015612:	9802      	ldr	r0, [sp, #8]
 8015614:	3b01      	subs	r3, #1
 8015616:	0021      	movs	r1, r4
 8015618:	612b      	str	r3, [r5, #16]
 801561a:	f7ff fdc3 	bl	80151a4 <_Bfree>
 801561e:	0028      	movs	r0, r5
 8015620:	b005      	add	sp, #20
 8015622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015624:	cb01      	ldmia	r3!, {r0}
 8015626:	c101      	stmia	r1!, {r0}
 8015628:	429a      	cmp	r2, r3
 801562a:	d8fb      	bhi.n	8015624 <__lshift+0xc4>
 801562c:	e7f0      	b.n	8015610 <__lshift+0xb0>
 801562e:	46c0      	nop			@ (mov r8, r8)
 8015630:	0801a016 	.word	0x0801a016
 8015634:	0801a027 	.word	0x0801a027

08015638 <__mcmp>:
 8015638:	b530      	push	{r4, r5, lr}
 801563a:	690b      	ldr	r3, [r1, #16]
 801563c:	6904      	ldr	r4, [r0, #16]
 801563e:	0002      	movs	r2, r0
 8015640:	1ae0      	subs	r0, r4, r3
 8015642:	429c      	cmp	r4, r3
 8015644:	d10f      	bne.n	8015666 <__mcmp+0x2e>
 8015646:	3214      	adds	r2, #20
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	3114      	adds	r1, #20
 801564c:	0014      	movs	r4, r2
 801564e:	18c9      	adds	r1, r1, r3
 8015650:	18d2      	adds	r2, r2, r3
 8015652:	3a04      	subs	r2, #4
 8015654:	3904      	subs	r1, #4
 8015656:	6815      	ldr	r5, [r2, #0]
 8015658:	680b      	ldr	r3, [r1, #0]
 801565a:	429d      	cmp	r5, r3
 801565c:	d004      	beq.n	8015668 <__mcmp+0x30>
 801565e:	2001      	movs	r0, #1
 8015660:	429d      	cmp	r5, r3
 8015662:	d200      	bcs.n	8015666 <__mcmp+0x2e>
 8015664:	3802      	subs	r0, #2
 8015666:	bd30      	pop	{r4, r5, pc}
 8015668:	4294      	cmp	r4, r2
 801566a:	d3f2      	bcc.n	8015652 <__mcmp+0x1a>
 801566c:	e7fb      	b.n	8015666 <__mcmp+0x2e>
	...

08015670 <__mdiff>:
 8015670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015672:	000c      	movs	r4, r1
 8015674:	b087      	sub	sp, #28
 8015676:	9000      	str	r0, [sp, #0]
 8015678:	0011      	movs	r1, r2
 801567a:	0020      	movs	r0, r4
 801567c:	0017      	movs	r7, r2
 801567e:	f7ff ffdb 	bl	8015638 <__mcmp>
 8015682:	1e05      	subs	r5, r0, #0
 8015684:	d110      	bne.n	80156a8 <__mdiff+0x38>
 8015686:	0001      	movs	r1, r0
 8015688:	9800      	ldr	r0, [sp, #0]
 801568a:	f7ff fd47 	bl	801511c <_Balloc>
 801568e:	1e02      	subs	r2, r0, #0
 8015690:	d104      	bne.n	801569c <__mdiff+0x2c>
 8015692:	4b40      	ldr	r3, [pc, #256]	@ (8015794 <__mdiff+0x124>)
 8015694:	4840      	ldr	r0, [pc, #256]	@ (8015798 <__mdiff+0x128>)
 8015696:	4941      	ldr	r1, [pc, #260]	@ (801579c <__mdiff+0x12c>)
 8015698:	f000 fb18 	bl	8015ccc <__assert_func>
 801569c:	2301      	movs	r3, #1
 801569e:	6145      	str	r5, [r0, #20]
 80156a0:	6103      	str	r3, [r0, #16]
 80156a2:	0010      	movs	r0, r2
 80156a4:	b007      	add	sp, #28
 80156a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a8:	2600      	movs	r6, #0
 80156aa:	42b0      	cmp	r0, r6
 80156ac:	da03      	bge.n	80156b6 <__mdiff+0x46>
 80156ae:	0023      	movs	r3, r4
 80156b0:	003c      	movs	r4, r7
 80156b2:	001f      	movs	r7, r3
 80156b4:	3601      	adds	r6, #1
 80156b6:	6861      	ldr	r1, [r4, #4]
 80156b8:	9800      	ldr	r0, [sp, #0]
 80156ba:	f7ff fd2f 	bl	801511c <_Balloc>
 80156be:	1e02      	subs	r2, r0, #0
 80156c0:	d103      	bne.n	80156ca <__mdiff+0x5a>
 80156c2:	4b34      	ldr	r3, [pc, #208]	@ (8015794 <__mdiff+0x124>)
 80156c4:	4834      	ldr	r0, [pc, #208]	@ (8015798 <__mdiff+0x128>)
 80156c6:	4936      	ldr	r1, [pc, #216]	@ (80157a0 <__mdiff+0x130>)
 80156c8:	e7e6      	b.n	8015698 <__mdiff+0x28>
 80156ca:	6923      	ldr	r3, [r4, #16]
 80156cc:	3414      	adds	r4, #20
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	18e3      	adds	r3, r4, r3
 80156d4:	0021      	movs	r1, r4
 80156d6:	9401      	str	r4, [sp, #4]
 80156d8:	003c      	movs	r4, r7
 80156da:	9302      	str	r3, [sp, #8]
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	3414      	adds	r4, #20
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	18e3      	adds	r3, r4, r3
 80156e4:	9303      	str	r3, [sp, #12]
 80156e6:	0003      	movs	r3, r0
 80156e8:	60c6      	str	r6, [r0, #12]
 80156ea:	468c      	mov	ip, r1
 80156ec:	2000      	movs	r0, #0
 80156ee:	3314      	adds	r3, #20
 80156f0:	9304      	str	r3, [sp, #16]
 80156f2:	9305      	str	r3, [sp, #20]
 80156f4:	4663      	mov	r3, ip
 80156f6:	cb20      	ldmia	r3!, {r5}
 80156f8:	b2a9      	uxth	r1, r5
 80156fa:	000e      	movs	r6, r1
 80156fc:	469c      	mov	ip, r3
 80156fe:	cc08      	ldmia	r4!, {r3}
 8015700:	0c2d      	lsrs	r5, r5, #16
 8015702:	b299      	uxth	r1, r3
 8015704:	1a71      	subs	r1, r6, r1
 8015706:	1809      	adds	r1, r1, r0
 8015708:	0c1b      	lsrs	r3, r3, #16
 801570a:	1408      	asrs	r0, r1, #16
 801570c:	1aeb      	subs	r3, r5, r3
 801570e:	181b      	adds	r3, r3, r0
 8015710:	1418      	asrs	r0, r3, #16
 8015712:	b289      	uxth	r1, r1
 8015714:	041b      	lsls	r3, r3, #16
 8015716:	4319      	orrs	r1, r3
 8015718:	9b05      	ldr	r3, [sp, #20]
 801571a:	c302      	stmia	r3!, {r1}
 801571c:	9305      	str	r3, [sp, #20]
 801571e:	9b03      	ldr	r3, [sp, #12]
 8015720:	42a3      	cmp	r3, r4
 8015722:	d8e7      	bhi.n	80156f4 <__mdiff+0x84>
 8015724:	0039      	movs	r1, r7
 8015726:	9c03      	ldr	r4, [sp, #12]
 8015728:	3115      	adds	r1, #21
 801572a:	2304      	movs	r3, #4
 801572c:	428c      	cmp	r4, r1
 801572e:	d304      	bcc.n	801573a <__mdiff+0xca>
 8015730:	1be3      	subs	r3, r4, r7
 8015732:	3b15      	subs	r3, #21
 8015734:	089b      	lsrs	r3, r3, #2
 8015736:	3301      	adds	r3, #1
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	9901      	ldr	r1, [sp, #4]
 801573c:	18cd      	adds	r5, r1, r3
 801573e:	9904      	ldr	r1, [sp, #16]
 8015740:	002e      	movs	r6, r5
 8015742:	18cb      	adds	r3, r1, r3
 8015744:	001f      	movs	r7, r3
 8015746:	9902      	ldr	r1, [sp, #8]
 8015748:	428e      	cmp	r6, r1
 801574a:	d311      	bcc.n	8015770 <__mdiff+0x100>
 801574c:	9c02      	ldr	r4, [sp, #8]
 801574e:	1ee9      	subs	r1, r5, #3
 8015750:	2000      	movs	r0, #0
 8015752:	428c      	cmp	r4, r1
 8015754:	d304      	bcc.n	8015760 <__mdiff+0xf0>
 8015756:	0021      	movs	r1, r4
 8015758:	3103      	adds	r1, #3
 801575a:	1b49      	subs	r1, r1, r5
 801575c:	0889      	lsrs	r1, r1, #2
 801575e:	0088      	lsls	r0, r1, #2
 8015760:	181b      	adds	r3, r3, r0
 8015762:	3b04      	subs	r3, #4
 8015764:	6819      	ldr	r1, [r3, #0]
 8015766:	2900      	cmp	r1, #0
 8015768:	d010      	beq.n	801578c <__mdiff+0x11c>
 801576a:	9b00      	ldr	r3, [sp, #0]
 801576c:	6113      	str	r3, [r2, #16]
 801576e:	e798      	b.n	80156a2 <__mdiff+0x32>
 8015770:	4684      	mov	ip, r0
 8015772:	ce02      	ldmia	r6!, {r1}
 8015774:	b288      	uxth	r0, r1
 8015776:	4460      	add	r0, ip
 8015778:	1400      	asrs	r0, r0, #16
 801577a:	0c0c      	lsrs	r4, r1, #16
 801577c:	1904      	adds	r4, r0, r4
 801577e:	4461      	add	r1, ip
 8015780:	1420      	asrs	r0, r4, #16
 8015782:	b289      	uxth	r1, r1
 8015784:	0424      	lsls	r4, r4, #16
 8015786:	4321      	orrs	r1, r4
 8015788:	c702      	stmia	r7!, {r1}
 801578a:	e7dc      	b.n	8015746 <__mdiff+0xd6>
 801578c:	9900      	ldr	r1, [sp, #0]
 801578e:	3901      	subs	r1, #1
 8015790:	9100      	str	r1, [sp, #0]
 8015792:	e7e6      	b.n	8015762 <__mdiff+0xf2>
 8015794:	0801a016 	.word	0x0801a016
 8015798:	0801a027 	.word	0x0801a027
 801579c:	00000237 	.word	0x00000237
 80157a0:	00000245 	.word	0x00000245

080157a4 <__d2b>:
 80157a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157a6:	2101      	movs	r1, #1
 80157a8:	0016      	movs	r6, r2
 80157aa:	001f      	movs	r7, r3
 80157ac:	f7ff fcb6 	bl	801511c <_Balloc>
 80157b0:	1e04      	subs	r4, r0, #0
 80157b2:	d105      	bne.n	80157c0 <__d2b+0x1c>
 80157b4:	0022      	movs	r2, r4
 80157b6:	4b25      	ldr	r3, [pc, #148]	@ (801584c <__d2b+0xa8>)
 80157b8:	4825      	ldr	r0, [pc, #148]	@ (8015850 <__d2b+0xac>)
 80157ba:	4926      	ldr	r1, [pc, #152]	@ (8015854 <__d2b+0xb0>)
 80157bc:	f000 fa86 	bl	8015ccc <__assert_func>
 80157c0:	033b      	lsls	r3, r7, #12
 80157c2:	007d      	lsls	r5, r7, #1
 80157c4:	0b1b      	lsrs	r3, r3, #12
 80157c6:	0d6d      	lsrs	r5, r5, #21
 80157c8:	d002      	beq.n	80157d0 <__d2b+0x2c>
 80157ca:	2280      	movs	r2, #128	@ 0x80
 80157cc:	0352      	lsls	r2, r2, #13
 80157ce:	4313      	orrs	r3, r2
 80157d0:	9301      	str	r3, [sp, #4]
 80157d2:	2e00      	cmp	r6, #0
 80157d4:	d025      	beq.n	8015822 <__d2b+0x7e>
 80157d6:	4668      	mov	r0, sp
 80157d8:	9600      	str	r6, [sp, #0]
 80157da:	f7ff fd6c 	bl	80152b6 <__lo0bits>
 80157de:	9b01      	ldr	r3, [sp, #4]
 80157e0:	9900      	ldr	r1, [sp, #0]
 80157e2:	2800      	cmp	r0, #0
 80157e4:	d01b      	beq.n	801581e <__d2b+0x7a>
 80157e6:	2220      	movs	r2, #32
 80157e8:	001e      	movs	r6, r3
 80157ea:	1a12      	subs	r2, r2, r0
 80157ec:	4096      	lsls	r6, r2
 80157ee:	0032      	movs	r2, r6
 80157f0:	40c3      	lsrs	r3, r0
 80157f2:	430a      	orrs	r2, r1
 80157f4:	6162      	str	r2, [r4, #20]
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	9e01      	ldr	r6, [sp, #4]
 80157fa:	61a6      	str	r6, [r4, #24]
 80157fc:	1e73      	subs	r3, r6, #1
 80157fe:	419e      	sbcs	r6, r3
 8015800:	3601      	adds	r6, #1
 8015802:	6126      	str	r6, [r4, #16]
 8015804:	2d00      	cmp	r5, #0
 8015806:	d014      	beq.n	8015832 <__d2b+0x8e>
 8015808:	2635      	movs	r6, #53	@ 0x35
 801580a:	4b13      	ldr	r3, [pc, #76]	@ (8015858 <__d2b+0xb4>)
 801580c:	18ed      	adds	r5, r5, r3
 801580e:	9b08      	ldr	r3, [sp, #32]
 8015810:	182d      	adds	r5, r5, r0
 8015812:	601d      	str	r5, [r3, #0]
 8015814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015816:	1a36      	subs	r6, r6, r0
 8015818:	601e      	str	r6, [r3, #0]
 801581a:	0020      	movs	r0, r4
 801581c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801581e:	6161      	str	r1, [r4, #20]
 8015820:	e7ea      	b.n	80157f8 <__d2b+0x54>
 8015822:	a801      	add	r0, sp, #4
 8015824:	f7ff fd47 	bl	80152b6 <__lo0bits>
 8015828:	9b01      	ldr	r3, [sp, #4]
 801582a:	2601      	movs	r6, #1
 801582c:	6163      	str	r3, [r4, #20]
 801582e:	3020      	adds	r0, #32
 8015830:	e7e7      	b.n	8015802 <__d2b+0x5e>
 8015832:	4b0a      	ldr	r3, [pc, #40]	@ (801585c <__d2b+0xb8>)
 8015834:	18c0      	adds	r0, r0, r3
 8015836:	9b08      	ldr	r3, [sp, #32]
 8015838:	6018      	str	r0, [r3, #0]
 801583a:	4b09      	ldr	r3, [pc, #36]	@ (8015860 <__d2b+0xbc>)
 801583c:	18f3      	adds	r3, r6, r3
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	18e3      	adds	r3, r4, r3
 8015842:	6958      	ldr	r0, [r3, #20]
 8015844:	f7ff fd16 	bl	8015274 <__hi0bits>
 8015848:	0176      	lsls	r6, r6, #5
 801584a:	e7e3      	b.n	8015814 <__d2b+0x70>
 801584c:	0801a016 	.word	0x0801a016
 8015850:	0801a027 	.word	0x0801a027
 8015854:	0000030f 	.word	0x0000030f
 8015858:	fffffbcd 	.word	0xfffffbcd
 801585c:	fffffbce 	.word	0xfffffbce
 8015860:	3fffffff 	.word	0x3fffffff

08015864 <__ssputs_r>:
 8015864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015866:	688e      	ldr	r6, [r1, #8]
 8015868:	b085      	sub	sp, #20
 801586a:	001f      	movs	r7, r3
 801586c:	000c      	movs	r4, r1
 801586e:	680b      	ldr	r3, [r1, #0]
 8015870:	9002      	str	r0, [sp, #8]
 8015872:	9203      	str	r2, [sp, #12]
 8015874:	42be      	cmp	r6, r7
 8015876:	d830      	bhi.n	80158da <__ssputs_r+0x76>
 8015878:	210c      	movs	r1, #12
 801587a:	5e62      	ldrsh	r2, [r4, r1]
 801587c:	2190      	movs	r1, #144	@ 0x90
 801587e:	00c9      	lsls	r1, r1, #3
 8015880:	420a      	tst	r2, r1
 8015882:	d028      	beq.n	80158d6 <__ssputs_r+0x72>
 8015884:	2003      	movs	r0, #3
 8015886:	6921      	ldr	r1, [r4, #16]
 8015888:	1a5b      	subs	r3, r3, r1
 801588a:	9301      	str	r3, [sp, #4]
 801588c:	6963      	ldr	r3, [r4, #20]
 801588e:	4343      	muls	r3, r0
 8015890:	9801      	ldr	r0, [sp, #4]
 8015892:	0fdd      	lsrs	r5, r3, #31
 8015894:	18ed      	adds	r5, r5, r3
 8015896:	1c7b      	adds	r3, r7, #1
 8015898:	181b      	adds	r3, r3, r0
 801589a:	106d      	asrs	r5, r5, #1
 801589c:	42ab      	cmp	r3, r5
 801589e:	d900      	bls.n	80158a2 <__ssputs_r+0x3e>
 80158a0:	001d      	movs	r5, r3
 80158a2:	0552      	lsls	r2, r2, #21
 80158a4:	d528      	bpl.n	80158f8 <__ssputs_r+0x94>
 80158a6:	0029      	movs	r1, r5
 80158a8:	9802      	ldr	r0, [sp, #8]
 80158aa:	f7ff fba7 	bl	8014ffc <_malloc_r>
 80158ae:	1e06      	subs	r6, r0, #0
 80158b0:	d02c      	beq.n	801590c <__ssputs_r+0xa8>
 80158b2:	9a01      	ldr	r2, [sp, #4]
 80158b4:	6921      	ldr	r1, [r4, #16]
 80158b6:	f7fe fc9f 	bl	80141f8 <memcpy>
 80158ba:	89a2      	ldrh	r2, [r4, #12]
 80158bc:	4b18      	ldr	r3, [pc, #96]	@ (8015920 <__ssputs_r+0xbc>)
 80158be:	401a      	ands	r2, r3
 80158c0:	2380      	movs	r3, #128	@ 0x80
 80158c2:	4313      	orrs	r3, r2
 80158c4:	81a3      	strh	r3, [r4, #12]
 80158c6:	9b01      	ldr	r3, [sp, #4]
 80158c8:	6126      	str	r6, [r4, #16]
 80158ca:	18f6      	adds	r6, r6, r3
 80158cc:	6026      	str	r6, [r4, #0]
 80158ce:	003e      	movs	r6, r7
 80158d0:	6165      	str	r5, [r4, #20]
 80158d2:	1aed      	subs	r5, r5, r3
 80158d4:	60a5      	str	r5, [r4, #8]
 80158d6:	42be      	cmp	r6, r7
 80158d8:	d900      	bls.n	80158dc <__ssputs_r+0x78>
 80158da:	003e      	movs	r6, r7
 80158dc:	0032      	movs	r2, r6
 80158de:	9903      	ldr	r1, [sp, #12]
 80158e0:	6820      	ldr	r0, [r4, #0]
 80158e2:	f000 f9ce 	bl	8015c82 <memmove>
 80158e6:	2000      	movs	r0, #0
 80158e8:	68a3      	ldr	r3, [r4, #8]
 80158ea:	1b9b      	subs	r3, r3, r6
 80158ec:	60a3      	str	r3, [r4, #8]
 80158ee:	6823      	ldr	r3, [r4, #0]
 80158f0:	199b      	adds	r3, r3, r6
 80158f2:	6023      	str	r3, [r4, #0]
 80158f4:	b005      	add	sp, #20
 80158f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158f8:	002a      	movs	r2, r5
 80158fa:	9802      	ldr	r0, [sp, #8]
 80158fc:	f000 fa43 	bl	8015d86 <_realloc_r>
 8015900:	1e06      	subs	r6, r0, #0
 8015902:	d1e0      	bne.n	80158c6 <__ssputs_r+0x62>
 8015904:	6921      	ldr	r1, [r4, #16]
 8015906:	9802      	ldr	r0, [sp, #8]
 8015908:	f7ff fb02 	bl	8014f10 <_free_r>
 801590c:	230c      	movs	r3, #12
 801590e:	2001      	movs	r0, #1
 8015910:	9a02      	ldr	r2, [sp, #8]
 8015912:	4240      	negs	r0, r0
 8015914:	6013      	str	r3, [r2, #0]
 8015916:	89a2      	ldrh	r2, [r4, #12]
 8015918:	3334      	adds	r3, #52	@ 0x34
 801591a:	4313      	orrs	r3, r2
 801591c:	81a3      	strh	r3, [r4, #12]
 801591e:	e7e9      	b.n	80158f4 <__ssputs_r+0x90>
 8015920:	fffffb7f 	.word	0xfffffb7f

08015924 <_svfiprintf_r>:
 8015924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015926:	b0a1      	sub	sp, #132	@ 0x84
 8015928:	9003      	str	r0, [sp, #12]
 801592a:	001d      	movs	r5, r3
 801592c:	898b      	ldrh	r3, [r1, #12]
 801592e:	000f      	movs	r7, r1
 8015930:	0016      	movs	r6, r2
 8015932:	061b      	lsls	r3, r3, #24
 8015934:	d511      	bpl.n	801595a <_svfiprintf_r+0x36>
 8015936:	690b      	ldr	r3, [r1, #16]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d10e      	bne.n	801595a <_svfiprintf_r+0x36>
 801593c:	2140      	movs	r1, #64	@ 0x40
 801593e:	f7ff fb5d 	bl	8014ffc <_malloc_r>
 8015942:	6038      	str	r0, [r7, #0]
 8015944:	6138      	str	r0, [r7, #16]
 8015946:	2800      	cmp	r0, #0
 8015948:	d105      	bne.n	8015956 <_svfiprintf_r+0x32>
 801594a:	230c      	movs	r3, #12
 801594c:	9a03      	ldr	r2, [sp, #12]
 801594e:	6013      	str	r3, [r2, #0]
 8015950:	2001      	movs	r0, #1
 8015952:	4240      	negs	r0, r0
 8015954:	e0cf      	b.n	8015af6 <_svfiprintf_r+0x1d2>
 8015956:	2340      	movs	r3, #64	@ 0x40
 8015958:	617b      	str	r3, [r7, #20]
 801595a:	2300      	movs	r3, #0
 801595c:	ac08      	add	r4, sp, #32
 801595e:	6163      	str	r3, [r4, #20]
 8015960:	3320      	adds	r3, #32
 8015962:	7663      	strb	r3, [r4, #25]
 8015964:	3310      	adds	r3, #16
 8015966:	76a3      	strb	r3, [r4, #26]
 8015968:	9507      	str	r5, [sp, #28]
 801596a:	0035      	movs	r5, r6
 801596c:	782b      	ldrb	r3, [r5, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <_svfiprintf_r+0x52>
 8015972:	2b25      	cmp	r3, #37	@ 0x25
 8015974:	d148      	bne.n	8015a08 <_svfiprintf_r+0xe4>
 8015976:	1bab      	subs	r3, r5, r6
 8015978:	9305      	str	r3, [sp, #20]
 801597a:	42b5      	cmp	r5, r6
 801597c:	d00b      	beq.n	8015996 <_svfiprintf_r+0x72>
 801597e:	0032      	movs	r2, r6
 8015980:	0039      	movs	r1, r7
 8015982:	9803      	ldr	r0, [sp, #12]
 8015984:	f7ff ff6e 	bl	8015864 <__ssputs_r>
 8015988:	3001      	adds	r0, #1
 801598a:	d100      	bne.n	801598e <_svfiprintf_r+0x6a>
 801598c:	e0ae      	b.n	8015aec <_svfiprintf_r+0x1c8>
 801598e:	6963      	ldr	r3, [r4, #20]
 8015990:	9a05      	ldr	r2, [sp, #20]
 8015992:	189b      	adds	r3, r3, r2
 8015994:	6163      	str	r3, [r4, #20]
 8015996:	782b      	ldrb	r3, [r5, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d100      	bne.n	801599e <_svfiprintf_r+0x7a>
 801599c:	e0a6      	b.n	8015aec <_svfiprintf_r+0x1c8>
 801599e:	2201      	movs	r2, #1
 80159a0:	2300      	movs	r3, #0
 80159a2:	4252      	negs	r2, r2
 80159a4:	6062      	str	r2, [r4, #4]
 80159a6:	a904      	add	r1, sp, #16
 80159a8:	3254      	adds	r2, #84	@ 0x54
 80159aa:	1852      	adds	r2, r2, r1
 80159ac:	1c6e      	adds	r6, r5, #1
 80159ae:	6023      	str	r3, [r4, #0]
 80159b0:	60e3      	str	r3, [r4, #12]
 80159b2:	60a3      	str	r3, [r4, #8]
 80159b4:	7013      	strb	r3, [r2, #0]
 80159b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80159b8:	4b54      	ldr	r3, [pc, #336]	@ (8015b0c <_svfiprintf_r+0x1e8>)
 80159ba:	2205      	movs	r2, #5
 80159bc:	0018      	movs	r0, r3
 80159be:	7831      	ldrb	r1, [r6, #0]
 80159c0:	9305      	str	r3, [sp, #20]
 80159c2:	f7fe fc0e 	bl	80141e2 <memchr>
 80159c6:	1c75      	adds	r5, r6, #1
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d11f      	bne.n	8015a0c <_svfiprintf_r+0xe8>
 80159cc:	6822      	ldr	r2, [r4, #0]
 80159ce:	06d3      	lsls	r3, r2, #27
 80159d0:	d504      	bpl.n	80159dc <_svfiprintf_r+0xb8>
 80159d2:	2353      	movs	r3, #83	@ 0x53
 80159d4:	a904      	add	r1, sp, #16
 80159d6:	185b      	adds	r3, r3, r1
 80159d8:	2120      	movs	r1, #32
 80159da:	7019      	strb	r1, [r3, #0]
 80159dc:	0713      	lsls	r3, r2, #28
 80159de:	d504      	bpl.n	80159ea <_svfiprintf_r+0xc6>
 80159e0:	2353      	movs	r3, #83	@ 0x53
 80159e2:	a904      	add	r1, sp, #16
 80159e4:	185b      	adds	r3, r3, r1
 80159e6:	212b      	movs	r1, #43	@ 0x2b
 80159e8:	7019      	strb	r1, [r3, #0]
 80159ea:	7833      	ldrb	r3, [r6, #0]
 80159ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80159ee:	d016      	beq.n	8015a1e <_svfiprintf_r+0xfa>
 80159f0:	0035      	movs	r5, r6
 80159f2:	2100      	movs	r1, #0
 80159f4:	200a      	movs	r0, #10
 80159f6:	68e3      	ldr	r3, [r4, #12]
 80159f8:	782a      	ldrb	r2, [r5, #0]
 80159fa:	1c6e      	adds	r6, r5, #1
 80159fc:	3a30      	subs	r2, #48	@ 0x30
 80159fe:	2a09      	cmp	r2, #9
 8015a00:	d950      	bls.n	8015aa4 <_svfiprintf_r+0x180>
 8015a02:	2900      	cmp	r1, #0
 8015a04:	d111      	bne.n	8015a2a <_svfiprintf_r+0x106>
 8015a06:	e017      	b.n	8015a38 <_svfiprintf_r+0x114>
 8015a08:	3501      	adds	r5, #1
 8015a0a:	e7af      	b.n	801596c <_svfiprintf_r+0x48>
 8015a0c:	9b05      	ldr	r3, [sp, #20]
 8015a0e:	6822      	ldr	r2, [r4, #0]
 8015a10:	1ac0      	subs	r0, r0, r3
 8015a12:	2301      	movs	r3, #1
 8015a14:	4083      	lsls	r3, r0
 8015a16:	4313      	orrs	r3, r2
 8015a18:	002e      	movs	r6, r5
 8015a1a:	6023      	str	r3, [r4, #0]
 8015a1c:	e7cc      	b.n	80159b8 <_svfiprintf_r+0x94>
 8015a1e:	9b07      	ldr	r3, [sp, #28]
 8015a20:	1d19      	adds	r1, r3, #4
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	9107      	str	r1, [sp, #28]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	db01      	blt.n	8015a2e <_svfiprintf_r+0x10a>
 8015a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a2c:	e004      	b.n	8015a38 <_svfiprintf_r+0x114>
 8015a2e:	425b      	negs	r3, r3
 8015a30:	60e3      	str	r3, [r4, #12]
 8015a32:	2302      	movs	r3, #2
 8015a34:	4313      	orrs	r3, r2
 8015a36:	6023      	str	r3, [r4, #0]
 8015a38:	782b      	ldrb	r3, [r5, #0]
 8015a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a3c:	d10c      	bne.n	8015a58 <_svfiprintf_r+0x134>
 8015a3e:	786b      	ldrb	r3, [r5, #1]
 8015a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a42:	d134      	bne.n	8015aae <_svfiprintf_r+0x18a>
 8015a44:	9b07      	ldr	r3, [sp, #28]
 8015a46:	3502      	adds	r5, #2
 8015a48:	1d1a      	adds	r2, r3, #4
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	9207      	str	r2, [sp, #28]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	da01      	bge.n	8015a56 <_svfiprintf_r+0x132>
 8015a52:	2301      	movs	r3, #1
 8015a54:	425b      	negs	r3, r3
 8015a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a58:	4e2d      	ldr	r6, [pc, #180]	@ (8015b10 <_svfiprintf_r+0x1ec>)
 8015a5a:	2203      	movs	r2, #3
 8015a5c:	0030      	movs	r0, r6
 8015a5e:	7829      	ldrb	r1, [r5, #0]
 8015a60:	f7fe fbbf 	bl	80141e2 <memchr>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d006      	beq.n	8015a76 <_svfiprintf_r+0x152>
 8015a68:	2340      	movs	r3, #64	@ 0x40
 8015a6a:	1b80      	subs	r0, r0, r6
 8015a6c:	4083      	lsls	r3, r0
 8015a6e:	6822      	ldr	r2, [r4, #0]
 8015a70:	3501      	adds	r5, #1
 8015a72:	4313      	orrs	r3, r2
 8015a74:	6023      	str	r3, [r4, #0]
 8015a76:	7829      	ldrb	r1, [r5, #0]
 8015a78:	2206      	movs	r2, #6
 8015a7a:	4826      	ldr	r0, [pc, #152]	@ (8015b14 <_svfiprintf_r+0x1f0>)
 8015a7c:	1c6e      	adds	r6, r5, #1
 8015a7e:	7621      	strb	r1, [r4, #24]
 8015a80:	f7fe fbaf 	bl	80141e2 <memchr>
 8015a84:	2800      	cmp	r0, #0
 8015a86:	d038      	beq.n	8015afa <_svfiprintf_r+0x1d6>
 8015a88:	4b23      	ldr	r3, [pc, #140]	@ (8015b18 <_svfiprintf_r+0x1f4>)
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d122      	bne.n	8015ad4 <_svfiprintf_r+0x1b0>
 8015a8e:	2207      	movs	r2, #7
 8015a90:	9b07      	ldr	r3, [sp, #28]
 8015a92:	3307      	adds	r3, #7
 8015a94:	4393      	bics	r3, r2
 8015a96:	3308      	adds	r3, #8
 8015a98:	9307      	str	r3, [sp, #28]
 8015a9a:	6963      	ldr	r3, [r4, #20]
 8015a9c:	9a04      	ldr	r2, [sp, #16]
 8015a9e:	189b      	adds	r3, r3, r2
 8015aa0:	6163      	str	r3, [r4, #20]
 8015aa2:	e762      	b.n	801596a <_svfiprintf_r+0x46>
 8015aa4:	4343      	muls	r3, r0
 8015aa6:	0035      	movs	r5, r6
 8015aa8:	2101      	movs	r1, #1
 8015aaa:	189b      	adds	r3, r3, r2
 8015aac:	e7a4      	b.n	80159f8 <_svfiprintf_r+0xd4>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	200a      	movs	r0, #10
 8015ab2:	0019      	movs	r1, r3
 8015ab4:	3501      	adds	r5, #1
 8015ab6:	6063      	str	r3, [r4, #4]
 8015ab8:	782a      	ldrb	r2, [r5, #0]
 8015aba:	1c6e      	adds	r6, r5, #1
 8015abc:	3a30      	subs	r2, #48	@ 0x30
 8015abe:	2a09      	cmp	r2, #9
 8015ac0:	d903      	bls.n	8015aca <_svfiprintf_r+0x1a6>
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d0c8      	beq.n	8015a58 <_svfiprintf_r+0x134>
 8015ac6:	9109      	str	r1, [sp, #36]	@ 0x24
 8015ac8:	e7c6      	b.n	8015a58 <_svfiprintf_r+0x134>
 8015aca:	4341      	muls	r1, r0
 8015acc:	0035      	movs	r5, r6
 8015ace:	2301      	movs	r3, #1
 8015ad0:	1889      	adds	r1, r1, r2
 8015ad2:	e7f1      	b.n	8015ab8 <_svfiprintf_r+0x194>
 8015ad4:	aa07      	add	r2, sp, #28
 8015ad6:	9200      	str	r2, [sp, #0]
 8015ad8:	0021      	movs	r1, r4
 8015ada:	003a      	movs	r2, r7
 8015adc:	4b0f      	ldr	r3, [pc, #60]	@ (8015b1c <_svfiprintf_r+0x1f8>)
 8015ade:	9803      	ldr	r0, [sp, #12]
 8015ae0:	f7fd fdfe 	bl	80136e0 <_printf_float>
 8015ae4:	9004      	str	r0, [sp, #16]
 8015ae6:	9b04      	ldr	r3, [sp, #16]
 8015ae8:	3301      	adds	r3, #1
 8015aea:	d1d6      	bne.n	8015a9a <_svfiprintf_r+0x176>
 8015aec:	89bb      	ldrh	r3, [r7, #12]
 8015aee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8015af0:	065b      	lsls	r3, r3, #25
 8015af2:	d500      	bpl.n	8015af6 <_svfiprintf_r+0x1d2>
 8015af4:	e72c      	b.n	8015950 <_svfiprintf_r+0x2c>
 8015af6:	b021      	add	sp, #132	@ 0x84
 8015af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afa:	aa07      	add	r2, sp, #28
 8015afc:	9200      	str	r2, [sp, #0]
 8015afe:	0021      	movs	r1, r4
 8015b00:	003a      	movs	r2, r7
 8015b02:	4b06      	ldr	r3, [pc, #24]	@ (8015b1c <_svfiprintf_r+0x1f8>)
 8015b04:	9803      	ldr	r0, [sp, #12]
 8015b06:	f7fe f899 	bl	8013c3c <_printf_i>
 8015b0a:	e7eb      	b.n	8015ae4 <_svfiprintf_r+0x1c0>
 8015b0c:	0801a180 	.word	0x0801a180
 8015b10:	0801a186 	.word	0x0801a186
 8015b14:	0801a18a 	.word	0x0801a18a
 8015b18:	080136e1 	.word	0x080136e1
 8015b1c:	08015865 	.word	0x08015865

08015b20 <__sflush_r>:
 8015b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b22:	220c      	movs	r2, #12
 8015b24:	5e8b      	ldrsh	r3, [r1, r2]
 8015b26:	0005      	movs	r5, r0
 8015b28:	000c      	movs	r4, r1
 8015b2a:	071a      	lsls	r2, r3, #28
 8015b2c:	d456      	bmi.n	8015bdc <__sflush_r+0xbc>
 8015b2e:	684a      	ldr	r2, [r1, #4]
 8015b30:	2a00      	cmp	r2, #0
 8015b32:	dc02      	bgt.n	8015b3a <__sflush_r+0x1a>
 8015b34:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8015b36:	2a00      	cmp	r2, #0
 8015b38:	dd4e      	ble.n	8015bd8 <__sflush_r+0xb8>
 8015b3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	d04b      	beq.n	8015bd8 <__sflush_r+0xb8>
 8015b40:	2200      	movs	r2, #0
 8015b42:	2080      	movs	r0, #128	@ 0x80
 8015b44:	682e      	ldr	r6, [r5, #0]
 8015b46:	602a      	str	r2, [r5, #0]
 8015b48:	001a      	movs	r2, r3
 8015b4a:	0140      	lsls	r0, r0, #5
 8015b4c:	6a21      	ldr	r1, [r4, #32]
 8015b4e:	4002      	ands	r2, r0
 8015b50:	4203      	tst	r3, r0
 8015b52:	d033      	beq.n	8015bbc <__sflush_r+0x9c>
 8015b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015b56:	89a3      	ldrh	r3, [r4, #12]
 8015b58:	075b      	lsls	r3, r3, #29
 8015b5a:	d506      	bpl.n	8015b6a <__sflush_r+0x4a>
 8015b5c:	6863      	ldr	r3, [r4, #4]
 8015b5e:	1ad2      	subs	r2, r2, r3
 8015b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d001      	beq.n	8015b6a <__sflush_r+0x4a>
 8015b66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015b68:	1ad2      	subs	r2, r2, r3
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	0028      	movs	r0, r5
 8015b6e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015b70:	6a21      	ldr	r1, [r4, #32]
 8015b72:	47b8      	blx	r7
 8015b74:	89a2      	ldrh	r2, [r4, #12]
 8015b76:	1c43      	adds	r3, r0, #1
 8015b78:	d106      	bne.n	8015b88 <__sflush_r+0x68>
 8015b7a:	6829      	ldr	r1, [r5, #0]
 8015b7c:	291d      	cmp	r1, #29
 8015b7e:	d846      	bhi.n	8015c0e <__sflush_r+0xee>
 8015b80:	4b29      	ldr	r3, [pc, #164]	@ (8015c28 <__sflush_r+0x108>)
 8015b82:	410b      	asrs	r3, r1
 8015b84:	07db      	lsls	r3, r3, #31
 8015b86:	d442      	bmi.n	8015c0e <__sflush_r+0xee>
 8015b88:	2300      	movs	r3, #0
 8015b8a:	6063      	str	r3, [r4, #4]
 8015b8c:	6923      	ldr	r3, [r4, #16]
 8015b8e:	6023      	str	r3, [r4, #0]
 8015b90:	04d2      	lsls	r2, r2, #19
 8015b92:	d505      	bpl.n	8015ba0 <__sflush_r+0x80>
 8015b94:	1c43      	adds	r3, r0, #1
 8015b96:	d102      	bne.n	8015b9e <__sflush_r+0x7e>
 8015b98:	682b      	ldr	r3, [r5, #0]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d100      	bne.n	8015ba0 <__sflush_r+0x80>
 8015b9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015ba2:	602e      	str	r6, [r5, #0]
 8015ba4:	2900      	cmp	r1, #0
 8015ba6:	d017      	beq.n	8015bd8 <__sflush_r+0xb8>
 8015ba8:	0023      	movs	r3, r4
 8015baa:	3344      	adds	r3, #68	@ 0x44
 8015bac:	4299      	cmp	r1, r3
 8015bae:	d002      	beq.n	8015bb6 <__sflush_r+0x96>
 8015bb0:	0028      	movs	r0, r5
 8015bb2:	f7ff f9ad 	bl	8014f10 <_free_r>
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8015bba:	e00d      	b.n	8015bd8 <__sflush_r+0xb8>
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	0028      	movs	r0, r5
 8015bc0:	47b8      	blx	r7
 8015bc2:	0002      	movs	r2, r0
 8015bc4:	1c43      	adds	r3, r0, #1
 8015bc6:	d1c6      	bne.n	8015b56 <__sflush_r+0x36>
 8015bc8:	682b      	ldr	r3, [r5, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d0c3      	beq.n	8015b56 <__sflush_r+0x36>
 8015bce:	2b1d      	cmp	r3, #29
 8015bd0:	d001      	beq.n	8015bd6 <__sflush_r+0xb6>
 8015bd2:	2b16      	cmp	r3, #22
 8015bd4:	d11a      	bne.n	8015c0c <__sflush_r+0xec>
 8015bd6:	602e      	str	r6, [r5, #0]
 8015bd8:	2000      	movs	r0, #0
 8015bda:	e01e      	b.n	8015c1a <__sflush_r+0xfa>
 8015bdc:	690e      	ldr	r6, [r1, #16]
 8015bde:	2e00      	cmp	r6, #0
 8015be0:	d0fa      	beq.n	8015bd8 <__sflush_r+0xb8>
 8015be2:	680f      	ldr	r7, [r1, #0]
 8015be4:	600e      	str	r6, [r1, #0]
 8015be6:	1bba      	subs	r2, r7, r6
 8015be8:	9201      	str	r2, [sp, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	079b      	lsls	r3, r3, #30
 8015bee:	d100      	bne.n	8015bf2 <__sflush_r+0xd2>
 8015bf0:	694a      	ldr	r2, [r1, #20]
 8015bf2:	60a2      	str	r2, [r4, #8]
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	ddee      	ble.n	8015bd8 <__sflush_r+0xb8>
 8015bfa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015bfc:	0032      	movs	r2, r6
 8015bfe:	001f      	movs	r7, r3
 8015c00:	0028      	movs	r0, r5
 8015c02:	9b01      	ldr	r3, [sp, #4]
 8015c04:	6a21      	ldr	r1, [r4, #32]
 8015c06:	47b8      	blx	r7
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	dc07      	bgt.n	8015c1c <__sflush_r+0xfc>
 8015c0c:	89a2      	ldrh	r2, [r4, #12]
 8015c0e:	2340      	movs	r3, #64	@ 0x40
 8015c10:	2001      	movs	r0, #1
 8015c12:	4313      	orrs	r3, r2
 8015c14:	b21b      	sxth	r3, r3
 8015c16:	81a3      	strh	r3, [r4, #12]
 8015c18:	4240      	negs	r0, r0
 8015c1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015c1c:	9b01      	ldr	r3, [sp, #4]
 8015c1e:	1836      	adds	r6, r6, r0
 8015c20:	1a1b      	subs	r3, r3, r0
 8015c22:	9301      	str	r3, [sp, #4]
 8015c24:	e7e6      	b.n	8015bf4 <__sflush_r+0xd4>
 8015c26:	46c0      	nop			@ (mov r8, r8)
 8015c28:	dfbffffe 	.word	0xdfbffffe

08015c2c <_fflush_r>:
 8015c2c:	690b      	ldr	r3, [r1, #16]
 8015c2e:	b570      	push	{r4, r5, r6, lr}
 8015c30:	0005      	movs	r5, r0
 8015c32:	000c      	movs	r4, r1
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <_fflush_r+0x12>
 8015c38:	2500      	movs	r5, #0
 8015c3a:	0028      	movs	r0, r5
 8015c3c:	bd70      	pop	{r4, r5, r6, pc}
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	d004      	beq.n	8015c4c <_fflush_r+0x20>
 8015c42:	6a03      	ldr	r3, [r0, #32]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <_fflush_r+0x20>
 8015c48:	f7fe f996 	bl	8013f78 <__sinit>
 8015c4c:	220c      	movs	r2, #12
 8015c4e:	5ea3      	ldrsh	r3, [r4, r2]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d0f1      	beq.n	8015c38 <_fflush_r+0xc>
 8015c54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015c56:	07d2      	lsls	r2, r2, #31
 8015c58:	d404      	bmi.n	8015c64 <_fflush_r+0x38>
 8015c5a:	059b      	lsls	r3, r3, #22
 8015c5c:	d402      	bmi.n	8015c64 <_fflush_r+0x38>
 8015c5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c60:	f7fe fabd 	bl	80141de <__retarget_lock_acquire_recursive>
 8015c64:	0028      	movs	r0, r5
 8015c66:	0021      	movs	r1, r4
 8015c68:	f7ff ff5a 	bl	8015b20 <__sflush_r>
 8015c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015c6e:	0005      	movs	r5, r0
 8015c70:	07db      	lsls	r3, r3, #31
 8015c72:	d4e2      	bmi.n	8015c3a <_fflush_r+0xe>
 8015c74:	89a3      	ldrh	r3, [r4, #12]
 8015c76:	059b      	lsls	r3, r3, #22
 8015c78:	d4df      	bmi.n	8015c3a <_fflush_r+0xe>
 8015c7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c7c:	f7fe fab0 	bl	80141e0 <__retarget_lock_release_recursive>
 8015c80:	e7db      	b.n	8015c3a <_fflush_r+0xe>

08015c82 <memmove>:
 8015c82:	b510      	push	{r4, lr}
 8015c84:	4288      	cmp	r0, r1
 8015c86:	d806      	bhi.n	8015c96 <memmove+0x14>
 8015c88:	2300      	movs	r3, #0
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d008      	beq.n	8015ca0 <memmove+0x1e>
 8015c8e:	5ccc      	ldrb	r4, [r1, r3]
 8015c90:	54c4      	strb	r4, [r0, r3]
 8015c92:	3301      	adds	r3, #1
 8015c94:	e7f9      	b.n	8015c8a <memmove+0x8>
 8015c96:	188b      	adds	r3, r1, r2
 8015c98:	4298      	cmp	r0, r3
 8015c9a:	d2f5      	bcs.n	8015c88 <memmove+0x6>
 8015c9c:	3a01      	subs	r2, #1
 8015c9e:	d200      	bcs.n	8015ca2 <memmove+0x20>
 8015ca0:	bd10      	pop	{r4, pc}
 8015ca2:	5c8b      	ldrb	r3, [r1, r2]
 8015ca4:	5483      	strb	r3, [r0, r2]
 8015ca6:	e7f9      	b.n	8015c9c <memmove+0x1a>

08015ca8 <_sbrk_r>:
 8015ca8:	2300      	movs	r3, #0
 8015caa:	b570      	push	{r4, r5, r6, lr}
 8015cac:	4d06      	ldr	r5, [pc, #24]	@ (8015cc8 <_sbrk_r+0x20>)
 8015cae:	0004      	movs	r4, r0
 8015cb0:	0008      	movs	r0, r1
 8015cb2:	602b      	str	r3, [r5, #0]
 8015cb4:	f7ee fade 	bl	8004274 <_sbrk>
 8015cb8:	1c43      	adds	r3, r0, #1
 8015cba:	d103      	bne.n	8015cc4 <_sbrk_r+0x1c>
 8015cbc:	682b      	ldr	r3, [r5, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d000      	beq.n	8015cc4 <_sbrk_r+0x1c>
 8015cc2:	6023      	str	r3, [r4, #0]
 8015cc4:	bd70      	pop	{r4, r5, r6, pc}
 8015cc6:	46c0      	nop			@ (mov r8, r8)
 8015cc8:	20001f98 	.word	0x20001f98

08015ccc <__assert_func>:
 8015ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015cce:	0014      	movs	r4, r2
 8015cd0:	001a      	movs	r2, r3
 8015cd2:	4b09      	ldr	r3, [pc, #36]	@ (8015cf8 <__assert_func+0x2c>)
 8015cd4:	0005      	movs	r5, r0
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	000e      	movs	r6, r1
 8015cda:	68d8      	ldr	r0, [r3, #12]
 8015cdc:	4b07      	ldr	r3, [pc, #28]	@ (8015cfc <__assert_func+0x30>)
 8015cde:	2c00      	cmp	r4, #0
 8015ce0:	d101      	bne.n	8015ce6 <__assert_func+0x1a>
 8015ce2:	4b07      	ldr	r3, [pc, #28]	@ (8015d00 <__assert_func+0x34>)
 8015ce4:	001c      	movs	r4, r3
 8015ce6:	4907      	ldr	r1, [pc, #28]	@ (8015d04 <__assert_func+0x38>)
 8015ce8:	9301      	str	r3, [sp, #4]
 8015cea:	9402      	str	r4, [sp, #8]
 8015cec:	002b      	movs	r3, r5
 8015cee:	9600      	str	r6, [sp, #0]
 8015cf0:	f000 f886 	bl	8015e00 <fiprintf>
 8015cf4:	f000 f894 	bl	8015e20 <abort>
 8015cf8:	2000020c 	.word	0x2000020c
 8015cfc:	0801a19b 	.word	0x0801a19b
 8015d00:	0801a1d6 	.word	0x0801a1d6
 8015d04:	0801a1a8 	.word	0x0801a1a8

08015d08 <_calloc_r>:
 8015d08:	b570      	push	{r4, r5, r6, lr}
 8015d0a:	0c0b      	lsrs	r3, r1, #16
 8015d0c:	0c15      	lsrs	r5, r2, #16
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d11e      	bne.n	8015d50 <_calloc_r+0x48>
 8015d12:	2d00      	cmp	r5, #0
 8015d14:	d10c      	bne.n	8015d30 <_calloc_r+0x28>
 8015d16:	b289      	uxth	r1, r1
 8015d18:	b294      	uxth	r4, r2
 8015d1a:	434c      	muls	r4, r1
 8015d1c:	0021      	movs	r1, r4
 8015d1e:	f7ff f96d 	bl	8014ffc <_malloc_r>
 8015d22:	1e05      	subs	r5, r0, #0
 8015d24:	d01a      	beq.n	8015d5c <_calloc_r+0x54>
 8015d26:	0022      	movs	r2, r4
 8015d28:	2100      	movs	r1, #0
 8015d2a:	f7fe f9d3 	bl	80140d4 <memset>
 8015d2e:	e016      	b.n	8015d5e <_calloc_r+0x56>
 8015d30:	1c2b      	adds	r3, r5, #0
 8015d32:	1c0c      	adds	r4, r1, #0
 8015d34:	b289      	uxth	r1, r1
 8015d36:	b292      	uxth	r2, r2
 8015d38:	434a      	muls	r2, r1
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	b2a1      	uxth	r1, r4
 8015d3e:	4359      	muls	r1, r3
 8015d40:	0c14      	lsrs	r4, r2, #16
 8015d42:	190c      	adds	r4, r1, r4
 8015d44:	0c23      	lsrs	r3, r4, #16
 8015d46:	d107      	bne.n	8015d58 <_calloc_r+0x50>
 8015d48:	0424      	lsls	r4, r4, #16
 8015d4a:	b292      	uxth	r2, r2
 8015d4c:	4314      	orrs	r4, r2
 8015d4e:	e7e5      	b.n	8015d1c <_calloc_r+0x14>
 8015d50:	2d00      	cmp	r5, #0
 8015d52:	d101      	bne.n	8015d58 <_calloc_r+0x50>
 8015d54:	1c14      	adds	r4, r2, #0
 8015d56:	e7ed      	b.n	8015d34 <_calloc_r+0x2c>
 8015d58:	230c      	movs	r3, #12
 8015d5a:	6003      	str	r3, [r0, #0]
 8015d5c:	2500      	movs	r5, #0
 8015d5e:	0028      	movs	r0, r5
 8015d60:	bd70      	pop	{r4, r5, r6, pc}

08015d62 <__ascii_mbtowc>:
 8015d62:	b082      	sub	sp, #8
 8015d64:	2900      	cmp	r1, #0
 8015d66:	d100      	bne.n	8015d6a <__ascii_mbtowc+0x8>
 8015d68:	a901      	add	r1, sp, #4
 8015d6a:	1e10      	subs	r0, r2, #0
 8015d6c:	d006      	beq.n	8015d7c <__ascii_mbtowc+0x1a>
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d006      	beq.n	8015d80 <__ascii_mbtowc+0x1e>
 8015d72:	7813      	ldrb	r3, [r2, #0]
 8015d74:	600b      	str	r3, [r1, #0]
 8015d76:	7810      	ldrb	r0, [r2, #0]
 8015d78:	1e43      	subs	r3, r0, #1
 8015d7a:	4198      	sbcs	r0, r3
 8015d7c:	b002      	add	sp, #8
 8015d7e:	4770      	bx	lr
 8015d80:	2002      	movs	r0, #2
 8015d82:	4240      	negs	r0, r0
 8015d84:	e7fa      	b.n	8015d7c <__ascii_mbtowc+0x1a>

08015d86 <_realloc_r>:
 8015d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d88:	0006      	movs	r6, r0
 8015d8a:	000c      	movs	r4, r1
 8015d8c:	0015      	movs	r5, r2
 8015d8e:	2900      	cmp	r1, #0
 8015d90:	d105      	bne.n	8015d9e <_realloc_r+0x18>
 8015d92:	0011      	movs	r1, r2
 8015d94:	f7ff f932 	bl	8014ffc <_malloc_r>
 8015d98:	0004      	movs	r4, r0
 8015d9a:	0020      	movs	r0, r4
 8015d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015d9e:	2a00      	cmp	r2, #0
 8015da0:	d103      	bne.n	8015daa <_realloc_r+0x24>
 8015da2:	f7ff f8b5 	bl	8014f10 <_free_r>
 8015da6:	2400      	movs	r4, #0
 8015da8:	e7f7      	b.n	8015d9a <_realloc_r+0x14>
 8015daa:	f000 f840 	bl	8015e2e <_malloc_usable_size_r>
 8015dae:	0007      	movs	r7, r0
 8015db0:	4285      	cmp	r5, r0
 8015db2:	d802      	bhi.n	8015dba <_realloc_r+0x34>
 8015db4:	0843      	lsrs	r3, r0, #1
 8015db6:	42ab      	cmp	r3, r5
 8015db8:	d3ef      	bcc.n	8015d9a <_realloc_r+0x14>
 8015dba:	0029      	movs	r1, r5
 8015dbc:	0030      	movs	r0, r6
 8015dbe:	f7ff f91d 	bl	8014ffc <_malloc_r>
 8015dc2:	9001      	str	r0, [sp, #4]
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d0ee      	beq.n	8015da6 <_realloc_r+0x20>
 8015dc8:	002a      	movs	r2, r5
 8015dca:	42bd      	cmp	r5, r7
 8015dcc:	d900      	bls.n	8015dd0 <_realloc_r+0x4a>
 8015dce:	003a      	movs	r2, r7
 8015dd0:	0021      	movs	r1, r4
 8015dd2:	9801      	ldr	r0, [sp, #4]
 8015dd4:	f7fe fa10 	bl	80141f8 <memcpy>
 8015dd8:	0021      	movs	r1, r4
 8015dda:	0030      	movs	r0, r6
 8015ddc:	f7ff f898 	bl	8014f10 <_free_r>
 8015de0:	9c01      	ldr	r4, [sp, #4]
 8015de2:	e7da      	b.n	8015d9a <_realloc_r+0x14>

08015de4 <__ascii_wctomb>:
 8015de4:	0003      	movs	r3, r0
 8015de6:	1e08      	subs	r0, r1, #0
 8015de8:	d005      	beq.n	8015df6 <__ascii_wctomb+0x12>
 8015dea:	2aff      	cmp	r2, #255	@ 0xff
 8015dec:	d904      	bls.n	8015df8 <__ascii_wctomb+0x14>
 8015dee:	228a      	movs	r2, #138	@ 0x8a
 8015df0:	2001      	movs	r0, #1
 8015df2:	601a      	str	r2, [r3, #0]
 8015df4:	4240      	negs	r0, r0
 8015df6:	4770      	bx	lr
 8015df8:	2001      	movs	r0, #1
 8015dfa:	700a      	strb	r2, [r1, #0]
 8015dfc:	e7fb      	b.n	8015df6 <__ascii_wctomb+0x12>
	...

08015e00 <fiprintf>:
 8015e00:	b40e      	push	{r1, r2, r3}
 8015e02:	b517      	push	{r0, r1, r2, r4, lr}
 8015e04:	4c05      	ldr	r4, [pc, #20]	@ (8015e1c <fiprintf+0x1c>)
 8015e06:	ab05      	add	r3, sp, #20
 8015e08:	cb04      	ldmia	r3!, {r2}
 8015e0a:	0001      	movs	r1, r0
 8015e0c:	6820      	ldr	r0, [r4, #0]
 8015e0e:	9301      	str	r3, [sp, #4]
 8015e10:	f000 f83c 	bl	8015e8c <_vfiprintf_r>
 8015e14:	bc1e      	pop	{r1, r2, r3, r4}
 8015e16:	bc08      	pop	{r3}
 8015e18:	b003      	add	sp, #12
 8015e1a:	4718      	bx	r3
 8015e1c:	2000020c 	.word	0x2000020c

08015e20 <abort>:
 8015e20:	2006      	movs	r0, #6
 8015e22:	b510      	push	{r4, lr}
 8015e24:	f000 fa18 	bl	8016258 <raise>
 8015e28:	2001      	movs	r0, #1
 8015e2a:	f7ee f9b1 	bl	8004190 <_exit>

08015e2e <_malloc_usable_size_r>:
 8015e2e:	1f0b      	subs	r3, r1, #4
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	1f18      	subs	r0, r3, #4
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	da01      	bge.n	8015e3c <_malloc_usable_size_r+0xe>
 8015e38:	580b      	ldr	r3, [r1, r0]
 8015e3a:	18c0      	adds	r0, r0, r3
 8015e3c:	4770      	bx	lr

08015e3e <__sfputc_r>:
 8015e3e:	6893      	ldr	r3, [r2, #8]
 8015e40:	b510      	push	{r4, lr}
 8015e42:	3b01      	subs	r3, #1
 8015e44:	6093      	str	r3, [r2, #8]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	da04      	bge.n	8015e54 <__sfputc_r+0x16>
 8015e4a:	6994      	ldr	r4, [r2, #24]
 8015e4c:	42a3      	cmp	r3, r4
 8015e4e:	db07      	blt.n	8015e60 <__sfputc_r+0x22>
 8015e50:	290a      	cmp	r1, #10
 8015e52:	d005      	beq.n	8015e60 <__sfputc_r+0x22>
 8015e54:	6813      	ldr	r3, [r2, #0]
 8015e56:	1c58      	adds	r0, r3, #1
 8015e58:	6010      	str	r0, [r2, #0]
 8015e5a:	7019      	strb	r1, [r3, #0]
 8015e5c:	0008      	movs	r0, r1
 8015e5e:	bd10      	pop	{r4, pc}
 8015e60:	f000 f930 	bl	80160c4 <__swbuf_r>
 8015e64:	0001      	movs	r1, r0
 8015e66:	e7f9      	b.n	8015e5c <__sfputc_r+0x1e>

08015e68 <__sfputs_r>:
 8015e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6a:	0006      	movs	r6, r0
 8015e6c:	000f      	movs	r7, r1
 8015e6e:	0014      	movs	r4, r2
 8015e70:	18d5      	adds	r5, r2, r3
 8015e72:	42ac      	cmp	r4, r5
 8015e74:	d101      	bne.n	8015e7a <__sfputs_r+0x12>
 8015e76:	2000      	movs	r0, #0
 8015e78:	e007      	b.n	8015e8a <__sfputs_r+0x22>
 8015e7a:	7821      	ldrb	r1, [r4, #0]
 8015e7c:	003a      	movs	r2, r7
 8015e7e:	0030      	movs	r0, r6
 8015e80:	f7ff ffdd 	bl	8015e3e <__sfputc_r>
 8015e84:	3401      	adds	r4, #1
 8015e86:	1c43      	adds	r3, r0, #1
 8015e88:	d1f3      	bne.n	8015e72 <__sfputs_r+0xa>
 8015e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e8c <_vfiprintf_r>:
 8015e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e8e:	b0a1      	sub	sp, #132	@ 0x84
 8015e90:	000f      	movs	r7, r1
 8015e92:	0015      	movs	r5, r2
 8015e94:	001e      	movs	r6, r3
 8015e96:	9003      	str	r0, [sp, #12]
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d004      	beq.n	8015ea6 <_vfiprintf_r+0x1a>
 8015e9c:	6a03      	ldr	r3, [r0, #32]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d101      	bne.n	8015ea6 <_vfiprintf_r+0x1a>
 8015ea2:	f7fe f869 	bl	8013f78 <__sinit>
 8015ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ea8:	07db      	lsls	r3, r3, #31
 8015eaa:	d405      	bmi.n	8015eb8 <_vfiprintf_r+0x2c>
 8015eac:	89bb      	ldrh	r3, [r7, #12]
 8015eae:	059b      	lsls	r3, r3, #22
 8015eb0:	d402      	bmi.n	8015eb8 <_vfiprintf_r+0x2c>
 8015eb2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015eb4:	f7fe f993 	bl	80141de <__retarget_lock_acquire_recursive>
 8015eb8:	89bb      	ldrh	r3, [r7, #12]
 8015eba:	071b      	lsls	r3, r3, #28
 8015ebc:	d502      	bpl.n	8015ec4 <_vfiprintf_r+0x38>
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d113      	bne.n	8015eec <_vfiprintf_r+0x60>
 8015ec4:	0039      	movs	r1, r7
 8015ec6:	9803      	ldr	r0, [sp, #12]
 8015ec8:	f000 f93e 	bl	8016148 <__swsetup_r>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d00d      	beq.n	8015eec <_vfiprintf_r+0x60>
 8015ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ed2:	07db      	lsls	r3, r3, #31
 8015ed4:	d503      	bpl.n	8015ede <_vfiprintf_r+0x52>
 8015ed6:	2001      	movs	r0, #1
 8015ed8:	4240      	negs	r0, r0
 8015eda:	b021      	add	sp, #132	@ 0x84
 8015edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ede:	89bb      	ldrh	r3, [r7, #12]
 8015ee0:	059b      	lsls	r3, r3, #22
 8015ee2:	d4f8      	bmi.n	8015ed6 <_vfiprintf_r+0x4a>
 8015ee4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015ee6:	f7fe f97b 	bl	80141e0 <__retarget_lock_release_recursive>
 8015eea:	e7f4      	b.n	8015ed6 <_vfiprintf_r+0x4a>
 8015eec:	2300      	movs	r3, #0
 8015eee:	ac08      	add	r4, sp, #32
 8015ef0:	6163      	str	r3, [r4, #20]
 8015ef2:	3320      	adds	r3, #32
 8015ef4:	7663      	strb	r3, [r4, #25]
 8015ef6:	3310      	adds	r3, #16
 8015ef8:	76a3      	strb	r3, [r4, #26]
 8015efa:	9607      	str	r6, [sp, #28]
 8015efc:	002e      	movs	r6, r5
 8015efe:	7833      	ldrb	r3, [r6, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <_vfiprintf_r+0x7c>
 8015f04:	2b25      	cmp	r3, #37	@ 0x25
 8015f06:	d148      	bne.n	8015f9a <_vfiprintf_r+0x10e>
 8015f08:	1b73      	subs	r3, r6, r5
 8015f0a:	9305      	str	r3, [sp, #20]
 8015f0c:	42ae      	cmp	r6, r5
 8015f0e:	d00b      	beq.n	8015f28 <_vfiprintf_r+0x9c>
 8015f10:	002a      	movs	r2, r5
 8015f12:	0039      	movs	r1, r7
 8015f14:	9803      	ldr	r0, [sp, #12]
 8015f16:	f7ff ffa7 	bl	8015e68 <__sfputs_r>
 8015f1a:	3001      	adds	r0, #1
 8015f1c:	d100      	bne.n	8015f20 <_vfiprintf_r+0x94>
 8015f1e:	e0ae      	b.n	801607e <_vfiprintf_r+0x1f2>
 8015f20:	6963      	ldr	r3, [r4, #20]
 8015f22:	9a05      	ldr	r2, [sp, #20]
 8015f24:	189b      	adds	r3, r3, r2
 8015f26:	6163      	str	r3, [r4, #20]
 8015f28:	7833      	ldrb	r3, [r6, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d100      	bne.n	8015f30 <_vfiprintf_r+0xa4>
 8015f2e:	e0a6      	b.n	801607e <_vfiprintf_r+0x1f2>
 8015f30:	2201      	movs	r2, #1
 8015f32:	2300      	movs	r3, #0
 8015f34:	4252      	negs	r2, r2
 8015f36:	6062      	str	r2, [r4, #4]
 8015f38:	a904      	add	r1, sp, #16
 8015f3a:	3254      	adds	r2, #84	@ 0x54
 8015f3c:	1852      	adds	r2, r2, r1
 8015f3e:	1c75      	adds	r5, r6, #1
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	60e3      	str	r3, [r4, #12]
 8015f44:	60a3      	str	r3, [r4, #8]
 8015f46:	7013      	strb	r3, [r2, #0]
 8015f48:	65a3      	str	r3, [r4, #88]	@ 0x58
 8015f4a:	4b59      	ldr	r3, [pc, #356]	@ (80160b0 <_vfiprintf_r+0x224>)
 8015f4c:	2205      	movs	r2, #5
 8015f4e:	0018      	movs	r0, r3
 8015f50:	7829      	ldrb	r1, [r5, #0]
 8015f52:	9305      	str	r3, [sp, #20]
 8015f54:	f7fe f945 	bl	80141e2 <memchr>
 8015f58:	1c6e      	adds	r6, r5, #1
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d11f      	bne.n	8015f9e <_vfiprintf_r+0x112>
 8015f5e:	6822      	ldr	r2, [r4, #0]
 8015f60:	06d3      	lsls	r3, r2, #27
 8015f62:	d504      	bpl.n	8015f6e <_vfiprintf_r+0xe2>
 8015f64:	2353      	movs	r3, #83	@ 0x53
 8015f66:	a904      	add	r1, sp, #16
 8015f68:	185b      	adds	r3, r3, r1
 8015f6a:	2120      	movs	r1, #32
 8015f6c:	7019      	strb	r1, [r3, #0]
 8015f6e:	0713      	lsls	r3, r2, #28
 8015f70:	d504      	bpl.n	8015f7c <_vfiprintf_r+0xf0>
 8015f72:	2353      	movs	r3, #83	@ 0x53
 8015f74:	a904      	add	r1, sp, #16
 8015f76:	185b      	adds	r3, r3, r1
 8015f78:	212b      	movs	r1, #43	@ 0x2b
 8015f7a:	7019      	strb	r1, [r3, #0]
 8015f7c:	782b      	ldrb	r3, [r5, #0]
 8015f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f80:	d016      	beq.n	8015fb0 <_vfiprintf_r+0x124>
 8015f82:	002e      	movs	r6, r5
 8015f84:	2100      	movs	r1, #0
 8015f86:	200a      	movs	r0, #10
 8015f88:	68e3      	ldr	r3, [r4, #12]
 8015f8a:	7832      	ldrb	r2, [r6, #0]
 8015f8c:	1c75      	adds	r5, r6, #1
 8015f8e:	3a30      	subs	r2, #48	@ 0x30
 8015f90:	2a09      	cmp	r2, #9
 8015f92:	d950      	bls.n	8016036 <_vfiprintf_r+0x1aa>
 8015f94:	2900      	cmp	r1, #0
 8015f96:	d111      	bne.n	8015fbc <_vfiprintf_r+0x130>
 8015f98:	e017      	b.n	8015fca <_vfiprintf_r+0x13e>
 8015f9a:	3601      	adds	r6, #1
 8015f9c:	e7af      	b.n	8015efe <_vfiprintf_r+0x72>
 8015f9e:	9b05      	ldr	r3, [sp, #20]
 8015fa0:	6822      	ldr	r2, [r4, #0]
 8015fa2:	1ac0      	subs	r0, r0, r3
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	4083      	lsls	r3, r0
 8015fa8:	4313      	orrs	r3, r2
 8015faa:	0035      	movs	r5, r6
 8015fac:	6023      	str	r3, [r4, #0]
 8015fae:	e7cc      	b.n	8015f4a <_vfiprintf_r+0xbe>
 8015fb0:	9b07      	ldr	r3, [sp, #28]
 8015fb2:	1d19      	adds	r1, r3, #4
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	9107      	str	r1, [sp, #28]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	db01      	blt.n	8015fc0 <_vfiprintf_r+0x134>
 8015fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015fbe:	e004      	b.n	8015fca <_vfiprintf_r+0x13e>
 8015fc0:	425b      	negs	r3, r3
 8015fc2:	60e3      	str	r3, [r4, #12]
 8015fc4:	2302      	movs	r3, #2
 8015fc6:	4313      	orrs	r3, r2
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	7833      	ldrb	r3, [r6, #0]
 8015fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8015fce:	d10c      	bne.n	8015fea <_vfiprintf_r+0x15e>
 8015fd0:	7873      	ldrb	r3, [r6, #1]
 8015fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fd4:	d134      	bne.n	8016040 <_vfiprintf_r+0x1b4>
 8015fd6:	9b07      	ldr	r3, [sp, #28]
 8015fd8:	3602      	adds	r6, #2
 8015fda:	1d1a      	adds	r2, r3, #4
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	9207      	str	r2, [sp, #28]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	da01      	bge.n	8015fe8 <_vfiprintf_r+0x15c>
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	425b      	negs	r3, r3
 8015fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fea:	4d32      	ldr	r5, [pc, #200]	@ (80160b4 <_vfiprintf_r+0x228>)
 8015fec:	2203      	movs	r2, #3
 8015fee:	0028      	movs	r0, r5
 8015ff0:	7831      	ldrb	r1, [r6, #0]
 8015ff2:	f7fe f8f6 	bl	80141e2 <memchr>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	d006      	beq.n	8016008 <_vfiprintf_r+0x17c>
 8015ffa:	2340      	movs	r3, #64	@ 0x40
 8015ffc:	1b40      	subs	r0, r0, r5
 8015ffe:	4083      	lsls	r3, r0
 8016000:	6822      	ldr	r2, [r4, #0]
 8016002:	3601      	adds	r6, #1
 8016004:	4313      	orrs	r3, r2
 8016006:	6023      	str	r3, [r4, #0]
 8016008:	7831      	ldrb	r1, [r6, #0]
 801600a:	2206      	movs	r2, #6
 801600c:	482a      	ldr	r0, [pc, #168]	@ (80160b8 <_vfiprintf_r+0x22c>)
 801600e:	1c75      	adds	r5, r6, #1
 8016010:	7621      	strb	r1, [r4, #24]
 8016012:	f7fe f8e6 	bl	80141e2 <memchr>
 8016016:	2800      	cmp	r0, #0
 8016018:	d040      	beq.n	801609c <_vfiprintf_r+0x210>
 801601a:	4b28      	ldr	r3, [pc, #160]	@ (80160bc <_vfiprintf_r+0x230>)
 801601c:	2b00      	cmp	r3, #0
 801601e:	d122      	bne.n	8016066 <_vfiprintf_r+0x1da>
 8016020:	2207      	movs	r2, #7
 8016022:	9b07      	ldr	r3, [sp, #28]
 8016024:	3307      	adds	r3, #7
 8016026:	4393      	bics	r3, r2
 8016028:	3308      	adds	r3, #8
 801602a:	9307      	str	r3, [sp, #28]
 801602c:	6963      	ldr	r3, [r4, #20]
 801602e:	9a04      	ldr	r2, [sp, #16]
 8016030:	189b      	adds	r3, r3, r2
 8016032:	6163      	str	r3, [r4, #20]
 8016034:	e762      	b.n	8015efc <_vfiprintf_r+0x70>
 8016036:	4343      	muls	r3, r0
 8016038:	002e      	movs	r6, r5
 801603a:	2101      	movs	r1, #1
 801603c:	189b      	adds	r3, r3, r2
 801603e:	e7a4      	b.n	8015f8a <_vfiprintf_r+0xfe>
 8016040:	2300      	movs	r3, #0
 8016042:	200a      	movs	r0, #10
 8016044:	0019      	movs	r1, r3
 8016046:	3601      	adds	r6, #1
 8016048:	6063      	str	r3, [r4, #4]
 801604a:	7832      	ldrb	r2, [r6, #0]
 801604c:	1c75      	adds	r5, r6, #1
 801604e:	3a30      	subs	r2, #48	@ 0x30
 8016050:	2a09      	cmp	r2, #9
 8016052:	d903      	bls.n	801605c <_vfiprintf_r+0x1d0>
 8016054:	2b00      	cmp	r3, #0
 8016056:	d0c8      	beq.n	8015fea <_vfiprintf_r+0x15e>
 8016058:	9109      	str	r1, [sp, #36]	@ 0x24
 801605a:	e7c6      	b.n	8015fea <_vfiprintf_r+0x15e>
 801605c:	4341      	muls	r1, r0
 801605e:	002e      	movs	r6, r5
 8016060:	2301      	movs	r3, #1
 8016062:	1889      	adds	r1, r1, r2
 8016064:	e7f1      	b.n	801604a <_vfiprintf_r+0x1be>
 8016066:	aa07      	add	r2, sp, #28
 8016068:	9200      	str	r2, [sp, #0]
 801606a:	0021      	movs	r1, r4
 801606c:	003a      	movs	r2, r7
 801606e:	4b14      	ldr	r3, [pc, #80]	@ (80160c0 <_vfiprintf_r+0x234>)
 8016070:	9803      	ldr	r0, [sp, #12]
 8016072:	f7fd fb35 	bl	80136e0 <_printf_float>
 8016076:	9004      	str	r0, [sp, #16]
 8016078:	9b04      	ldr	r3, [sp, #16]
 801607a:	3301      	adds	r3, #1
 801607c:	d1d6      	bne.n	801602c <_vfiprintf_r+0x1a0>
 801607e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016080:	07db      	lsls	r3, r3, #31
 8016082:	d405      	bmi.n	8016090 <_vfiprintf_r+0x204>
 8016084:	89bb      	ldrh	r3, [r7, #12]
 8016086:	059b      	lsls	r3, r3, #22
 8016088:	d402      	bmi.n	8016090 <_vfiprintf_r+0x204>
 801608a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801608c:	f7fe f8a8 	bl	80141e0 <__retarget_lock_release_recursive>
 8016090:	89bb      	ldrh	r3, [r7, #12]
 8016092:	065b      	lsls	r3, r3, #25
 8016094:	d500      	bpl.n	8016098 <_vfiprintf_r+0x20c>
 8016096:	e71e      	b.n	8015ed6 <_vfiprintf_r+0x4a>
 8016098:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801609a:	e71e      	b.n	8015eda <_vfiprintf_r+0x4e>
 801609c:	aa07      	add	r2, sp, #28
 801609e:	9200      	str	r2, [sp, #0]
 80160a0:	0021      	movs	r1, r4
 80160a2:	003a      	movs	r2, r7
 80160a4:	4b06      	ldr	r3, [pc, #24]	@ (80160c0 <_vfiprintf_r+0x234>)
 80160a6:	9803      	ldr	r0, [sp, #12]
 80160a8:	f7fd fdc8 	bl	8013c3c <_printf_i>
 80160ac:	e7e3      	b.n	8016076 <_vfiprintf_r+0x1ea>
 80160ae:	46c0      	nop			@ (mov r8, r8)
 80160b0:	0801a180 	.word	0x0801a180
 80160b4:	0801a186 	.word	0x0801a186
 80160b8:	0801a18a 	.word	0x0801a18a
 80160bc:	080136e1 	.word	0x080136e1
 80160c0:	08015e69 	.word	0x08015e69

080160c4 <__swbuf_r>:
 80160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c6:	0006      	movs	r6, r0
 80160c8:	000d      	movs	r5, r1
 80160ca:	0014      	movs	r4, r2
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d004      	beq.n	80160da <__swbuf_r+0x16>
 80160d0:	6a03      	ldr	r3, [r0, #32]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d101      	bne.n	80160da <__swbuf_r+0x16>
 80160d6:	f7fd ff4f 	bl	8013f78 <__sinit>
 80160da:	69a3      	ldr	r3, [r4, #24]
 80160dc:	60a3      	str	r3, [r4, #8]
 80160de:	89a3      	ldrh	r3, [r4, #12]
 80160e0:	071b      	lsls	r3, r3, #28
 80160e2:	d502      	bpl.n	80160ea <__swbuf_r+0x26>
 80160e4:	6923      	ldr	r3, [r4, #16]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d109      	bne.n	80160fe <__swbuf_r+0x3a>
 80160ea:	0021      	movs	r1, r4
 80160ec:	0030      	movs	r0, r6
 80160ee:	f000 f82b 	bl	8016148 <__swsetup_r>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d003      	beq.n	80160fe <__swbuf_r+0x3a>
 80160f6:	2501      	movs	r5, #1
 80160f8:	426d      	negs	r5, r5
 80160fa:	0028      	movs	r0, r5
 80160fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160fe:	6923      	ldr	r3, [r4, #16]
 8016100:	6820      	ldr	r0, [r4, #0]
 8016102:	b2ef      	uxtb	r7, r5
 8016104:	1ac0      	subs	r0, r0, r3
 8016106:	6963      	ldr	r3, [r4, #20]
 8016108:	b2ed      	uxtb	r5, r5
 801610a:	4283      	cmp	r3, r0
 801610c:	dc05      	bgt.n	801611a <__swbuf_r+0x56>
 801610e:	0021      	movs	r1, r4
 8016110:	0030      	movs	r0, r6
 8016112:	f7ff fd8b 	bl	8015c2c <_fflush_r>
 8016116:	2800      	cmp	r0, #0
 8016118:	d1ed      	bne.n	80160f6 <__swbuf_r+0x32>
 801611a:	68a3      	ldr	r3, [r4, #8]
 801611c:	3001      	adds	r0, #1
 801611e:	3b01      	subs	r3, #1
 8016120:	60a3      	str	r3, [r4, #8]
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	1c5a      	adds	r2, r3, #1
 8016126:	6022      	str	r2, [r4, #0]
 8016128:	701f      	strb	r7, [r3, #0]
 801612a:	6963      	ldr	r3, [r4, #20]
 801612c:	4283      	cmp	r3, r0
 801612e:	d004      	beq.n	801613a <__swbuf_r+0x76>
 8016130:	89a3      	ldrh	r3, [r4, #12]
 8016132:	07db      	lsls	r3, r3, #31
 8016134:	d5e1      	bpl.n	80160fa <__swbuf_r+0x36>
 8016136:	2d0a      	cmp	r5, #10
 8016138:	d1df      	bne.n	80160fa <__swbuf_r+0x36>
 801613a:	0021      	movs	r1, r4
 801613c:	0030      	movs	r0, r6
 801613e:	f7ff fd75 	bl	8015c2c <_fflush_r>
 8016142:	2800      	cmp	r0, #0
 8016144:	d0d9      	beq.n	80160fa <__swbuf_r+0x36>
 8016146:	e7d6      	b.n	80160f6 <__swbuf_r+0x32>

08016148 <__swsetup_r>:
 8016148:	4b2d      	ldr	r3, [pc, #180]	@ (8016200 <__swsetup_r+0xb8>)
 801614a:	b570      	push	{r4, r5, r6, lr}
 801614c:	0005      	movs	r5, r0
 801614e:	6818      	ldr	r0, [r3, #0]
 8016150:	000c      	movs	r4, r1
 8016152:	2800      	cmp	r0, #0
 8016154:	d004      	beq.n	8016160 <__swsetup_r+0x18>
 8016156:	6a03      	ldr	r3, [r0, #32]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d101      	bne.n	8016160 <__swsetup_r+0x18>
 801615c:	f7fd ff0c 	bl	8013f78 <__sinit>
 8016160:	230c      	movs	r3, #12
 8016162:	5ee2      	ldrsh	r2, [r4, r3]
 8016164:	0713      	lsls	r3, r2, #28
 8016166:	d423      	bmi.n	80161b0 <__swsetup_r+0x68>
 8016168:	06d3      	lsls	r3, r2, #27
 801616a:	d407      	bmi.n	801617c <__swsetup_r+0x34>
 801616c:	2309      	movs	r3, #9
 801616e:	602b      	str	r3, [r5, #0]
 8016170:	2340      	movs	r3, #64	@ 0x40
 8016172:	2001      	movs	r0, #1
 8016174:	4313      	orrs	r3, r2
 8016176:	81a3      	strh	r3, [r4, #12]
 8016178:	4240      	negs	r0, r0
 801617a:	e03a      	b.n	80161f2 <__swsetup_r+0xaa>
 801617c:	0752      	lsls	r2, r2, #29
 801617e:	d513      	bpl.n	80161a8 <__swsetup_r+0x60>
 8016180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016182:	2900      	cmp	r1, #0
 8016184:	d008      	beq.n	8016198 <__swsetup_r+0x50>
 8016186:	0023      	movs	r3, r4
 8016188:	3344      	adds	r3, #68	@ 0x44
 801618a:	4299      	cmp	r1, r3
 801618c:	d002      	beq.n	8016194 <__swsetup_r+0x4c>
 801618e:	0028      	movs	r0, r5
 8016190:	f7fe febe 	bl	8014f10 <_free_r>
 8016194:	2300      	movs	r3, #0
 8016196:	6363      	str	r3, [r4, #52]	@ 0x34
 8016198:	2224      	movs	r2, #36	@ 0x24
 801619a:	89a3      	ldrh	r3, [r4, #12]
 801619c:	4393      	bics	r3, r2
 801619e:	81a3      	strh	r3, [r4, #12]
 80161a0:	2300      	movs	r3, #0
 80161a2:	6063      	str	r3, [r4, #4]
 80161a4:	6923      	ldr	r3, [r4, #16]
 80161a6:	6023      	str	r3, [r4, #0]
 80161a8:	2308      	movs	r3, #8
 80161aa:	89a2      	ldrh	r2, [r4, #12]
 80161ac:	4313      	orrs	r3, r2
 80161ae:	81a3      	strh	r3, [r4, #12]
 80161b0:	6923      	ldr	r3, [r4, #16]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d10b      	bne.n	80161ce <__swsetup_r+0x86>
 80161b6:	21a0      	movs	r1, #160	@ 0xa0
 80161b8:	2280      	movs	r2, #128	@ 0x80
 80161ba:	89a3      	ldrh	r3, [r4, #12]
 80161bc:	0089      	lsls	r1, r1, #2
 80161be:	0092      	lsls	r2, r2, #2
 80161c0:	400b      	ands	r3, r1
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d003      	beq.n	80161ce <__swsetup_r+0x86>
 80161c6:	0021      	movs	r1, r4
 80161c8:	0028      	movs	r0, r5
 80161ca:	f000 f88f 	bl	80162ec <__smakebuf_r>
 80161ce:	230c      	movs	r3, #12
 80161d0:	5ee2      	ldrsh	r2, [r4, r3]
 80161d2:	2101      	movs	r1, #1
 80161d4:	0013      	movs	r3, r2
 80161d6:	400b      	ands	r3, r1
 80161d8:	420a      	tst	r2, r1
 80161da:	d00b      	beq.n	80161f4 <__swsetup_r+0xac>
 80161dc:	2300      	movs	r3, #0
 80161de:	60a3      	str	r3, [r4, #8]
 80161e0:	6963      	ldr	r3, [r4, #20]
 80161e2:	425b      	negs	r3, r3
 80161e4:	61a3      	str	r3, [r4, #24]
 80161e6:	2000      	movs	r0, #0
 80161e8:	6923      	ldr	r3, [r4, #16]
 80161ea:	4283      	cmp	r3, r0
 80161ec:	d101      	bne.n	80161f2 <__swsetup_r+0xaa>
 80161ee:	0613      	lsls	r3, r2, #24
 80161f0:	d4be      	bmi.n	8016170 <__swsetup_r+0x28>
 80161f2:	bd70      	pop	{r4, r5, r6, pc}
 80161f4:	0791      	lsls	r1, r2, #30
 80161f6:	d400      	bmi.n	80161fa <__swsetup_r+0xb2>
 80161f8:	6963      	ldr	r3, [r4, #20]
 80161fa:	60a3      	str	r3, [r4, #8]
 80161fc:	e7f3      	b.n	80161e6 <__swsetup_r+0x9e>
 80161fe:	46c0      	nop			@ (mov r8, r8)
 8016200:	2000020c 	.word	0x2000020c

08016204 <_raise_r>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	0004      	movs	r4, r0
 8016208:	000d      	movs	r5, r1
 801620a:	291f      	cmp	r1, #31
 801620c:	d904      	bls.n	8016218 <_raise_r+0x14>
 801620e:	2316      	movs	r3, #22
 8016210:	6003      	str	r3, [r0, #0]
 8016212:	2001      	movs	r0, #1
 8016214:	4240      	negs	r0, r0
 8016216:	bd70      	pop	{r4, r5, r6, pc}
 8016218:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801621a:	2b00      	cmp	r3, #0
 801621c:	d004      	beq.n	8016228 <_raise_r+0x24>
 801621e:	008a      	lsls	r2, r1, #2
 8016220:	189b      	adds	r3, r3, r2
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	2a00      	cmp	r2, #0
 8016226:	d108      	bne.n	801623a <_raise_r+0x36>
 8016228:	0020      	movs	r0, r4
 801622a:	f000 f831 	bl	8016290 <_getpid_r>
 801622e:	002a      	movs	r2, r5
 8016230:	0001      	movs	r1, r0
 8016232:	0020      	movs	r0, r4
 8016234:	f000 f81a 	bl	801626c <_kill_r>
 8016238:	e7ed      	b.n	8016216 <_raise_r+0x12>
 801623a:	2a01      	cmp	r2, #1
 801623c:	d009      	beq.n	8016252 <_raise_r+0x4e>
 801623e:	1c51      	adds	r1, r2, #1
 8016240:	d103      	bne.n	801624a <_raise_r+0x46>
 8016242:	2316      	movs	r3, #22
 8016244:	6003      	str	r3, [r0, #0]
 8016246:	2001      	movs	r0, #1
 8016248:	e7e5      	b.n	8016216 <_raise_r+0x12>
 801624a:	2100      	movs	r1, #0
 801624c:	0028      	movs	r0, r5
 801624e:	6019      	str	r1, [r3, #0]
 8016250:	4790      	blx	r2
 8016252:	2000      	movs	r0, #0
 8016254:	e7df      	b.n	8016216 <_raise_r+0x12>
	...

08016258 <raise>:
 8016258:	b510      	push	{r4, lr}
 801625a:	4b03      	ldr	r3, [pc, #12]	@ (8016268 <raise+0x10>)
 801625c:	0001      	movs	r1, r0
 801625e:	6818      	ldr	r0, [r3, #0]
 8016260:	f7ff ffd0 	bl	8016204 <_raise_r>
 8016264:	bd10      	pop	{r4, pc}
 8016266:	46c0      	nop			@ (mov r8, r8)
 8016268:	2000020c 	.word	0x2000020c

0801626c <_kill_r>:
 801626c:	2300      	movs	r3, #0
 801626e:	b570      	push	{r4, r5, r6, lr}
 8016270:	4d06      	ldr	r5, [pc, #24]	@ (801628c <_kill_r+0x20>)
 8016272:	0004      	movs	r4, r0
 8016274:	0008      	movs	r0, r1
 8016276:	0011      	movs	r1, r2
 8016278:	602b      	str	r3, [r5, #0]
 801627a:	f7ed ff79 	bl	8004170 <_kill>
 801627e:	1c43      	adds	r3, r0, #1
 8016280:	d103      	bne.n	801628a <_kill_r+0x1e>
 8016282:	682b      	ldr	r3, [r5, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d000      	beq.n	801628a <_kill_r+0x1e>
 8016288:	6023      	str	r3, [r4, #0]
 801628a:	bd70      	pop	{r4, r5, r6, pc}
 801628c:	20001f98 	.word	0x20001f98

08016290 <_getpid_r>:
 8016290:	b510      	push	{r4, lr}
 8016292:	f7ed ff67 	bl	8004164 <_getpid>
 8016296:	bd10      	pop	{r4, pc}

08016298 <__swhatbuf_r>:
 8016298:	b570      	push	{r4, r5, r6, lr}
 801629a:	000e      	movs	r6, r1
 801629c:	001d      	movs	r5, r3
 801629e:	230e      	movs	r3, #14
 80162a0:	5ec9      	ldrsh	r1, [r1, r3]
 80162a2:	0014      	movs	r4, r2
 80162a4:	b096      	sub	sp, #88	@ 0x58
 80162a6:	2900      	cmp	r1, #0
 80162a8:	da0c      	bge.n	80162c4 <__swhatbuf_r+0x2c>
 80162aa:	89b2      	ldrh	r2, [r6, #12]
 80162ac:	2380      	movs	r3, #128	@ 0x80
 80162ae:	0011      	movs	r1, r2
 80162b0:	4019      	ands	r1, r3
 80162b2:	421a      	tst	r2, r3
 80162b4:	d114      	bne.n	80162e0 <__swhatbuf_r+0x48>
 80162b6:	2380      	movs	r3, #128	@ 0x80
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	2000      	movs	r0, #0
 80162bc:	6029      	str	r1, [r5, #0]
 80162be:	6023      	str	r3, [r4, #0]
 80162c0:	b016      	add	sp, #88	@ 0x58
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	466a      	mov	r2, sp
 80162c6:	f000 f853 	bl	8016370 <_fstat_r>
 80162ca:	2800      	cmp	r0, #0
 80162cc:	dbed      	blt.n	80162aa <__swhatbuf_r+0x12>
 80162ce:	23f0      	movs	r3, #240	@ 0xf0
 80162d0:	9901      	ldr	r1, [sp, #4]
 80162d2:	021b      	lsls	r3, r3, #8
 80162d4:	4019      	ands	r1, r3
 80162d6:	4b04      	ldr	r3, [pc, #16]	@ (80162e8 <__swhatbuf_r+0x50>)
 80162d8:	18c9      	adds	r1, r1, r3
 80162da:	424b      	negs	r3, r1
 80162dc:	4159      	adcs	r1, r3
 80162de:	e7ea      	b.n	80162b6 <__swhatbuf_r+0x1e>
 80162e0:	2100      	movs	r1, #0
 80162e2:	2340      	movs	r3, #64	@ 0x40
 80162e4:	e7e9      	b.n	80162ba <__swhatbuf_r+0x22>
 80162e6:	46c0      	nop			@ (mov r8, r8)
 80162e8:	ffffe000 	.word	0xffffe000

080162ec <__smakebuf_r>:
 80162ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ee:	2602      	movs	r6, #2
 80162f0:	898b      	ldrh	r3, [r1, #12]
 80162f2:	0005      	movs	r5, r0
 80162f4:	000c      	movs	r4, r1
 80162f6:	b085      	sub	sp, #20
 80162f8:	4233      	tst	r3, r6
 80162fa:	d007      	beq.n	801630c <__smakebuf_r+0x20>
 80162fc:	0023      	movs	r3, r4
 80162fe:	3347      	adds	r3, #71	@ 0x47
 8016300:	6023      	str	r3, [r4, #0]
 8016302:	6123      	str	r3, [r4, #16]
 8016304:	2301      	movs	r3, #1
 8016306:	6163      	str	r3, [r4, #20]
 8016308:	b005      	add	sp, #20
 801630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801630c:	ab03      	add	r3, sp, #12
 801630e:	aa02      	add	r2, sp, #8
 8016310:	f7ff ffc2 	bl	8016298 <__swhatbuf_r>
 8016314:	9f02      	ldr	r7, [sp, #8]
 8016316:	9001      	str	r0, [sp, #4]
 8016318:	0039      	movs	r1, r7
 801631a:	0028      	movs	r0, r5
 801631c:	f7fe fe6e 	bl	8014ffc <_malloc_r>
 8016320:	2800      	cmp	r0, #0
 8016322:	d108      	bne.n	8016336 <__smakebuf_r+0x4a>
 8016324:	220c      	movs	r2, #12
 8016326:	5ea3      	ldrsh	r3, [r4, r2]
 8016328:	059a      	lsls	r2, r3, #22
 801632a:	d4ed      	bmi.n	8016308 <__smakebuf_r+0x1c>
 801632c:	2203      	movs	r2, #3
 801632e:	4393      	bics	r3, r2
 8016330:	431e      	orrs	r6, r3
 8016332:	81a6      	strh	r6, [r4, #12]
 8016334:	e7e2      	b.n	80162fc <__smakebuf_r+0x10>
 8016336:	2380      	movs	r3, #128	@ 0x80
 8016338:	89a2      	ldrh	r2, [r4, #12]
 801633a:	6020      	str	r0, [r4, #0]
 801633c:	4313      	orrs	r3, r2
 801633e:	81a3      	strh	r3, [r4, #12]
 8016340:	9b03      	ldr	r3, [sp, #12]
 8016342:	6120      	str	r0, [r4, #16]
 8016344:	6167      	str	r7, [r4, #20]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d00c      	beq.n	8016364 <__smakebuf_r+0x78>
 801634a:	0028      	movs	r0, r5
 801634c:	230e      	movs	r3, #14
 801634e:	5ee1      	ldrsh	r1, [r4, r3]
 8016350:	f000 f820 	bl	8016394 <_isatty_r>
 8016354:	2800      	cmp	r0, #0
 8016356:	d005      	beq.n	8016364 <__smakebuf_r+0x78>
 8016358:	2303      	movs	r3, #3
 801635a:	89a2      	ldrh	r2, [r4, #12]
 801635c:	439a      	bics	r2, r3
 801635e:	3b02      	subs	r3, #2
 8016360:	4313      	orrs	r3, r2
 8016362:	81a3      	strh	r3, [r4, #12]
 8016364:	89a3      	ldrh	r3, [r4, #12]
 8016366:	9a01      	ldr	r2, [sp, #4]
 8016368:	4313      	orrs	r3, r2
 801636a:	81a3      	strh	r3, [r4, #12]
 801636c:	e7cc      	b.n	8016308 <__smakebuf_r+0x1c>
	...

08016370 <_fstat_r>:
 8016370:	2300      	movs	r3, #0
 8016372:	b570      	push	{r4, r5, r6, lr}
 8016374:	4d06      	ldr	r5, [pc, #24]	@ (8016390 <_fstat_r+0x20>)
 8016376:	0004      	movs	r4, r0
 8016378:	0008      	movs	r0, r1
 801637a:	0011      	movs	r1, r2
 801637c:	602b      	str	r3, [r5, #0]
 801637e:	f7ed ff57 	bl	8004230 <_fstat>
 8016382:	1c43      	adds	r3, r0, #1
 8016384:	d103      	bne.n	801638e <_fstat_r+0x1e>
 8016386:	682b      	ldr	r3, [r5, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d000      	beq.n	801638e <_fstat_r+0x1e>
 801638c:	6023      	str	r3, [r4, #0]
 801638e:	bd70      	pop	{r4, r5, r6, pc}
 8016390:	20001f98 	.word	0x20001f98

08016394 <_isatty_r>:
 8016394:	2300      	movs	r3, #0
 8016396:	b570      	push	{r4, r5, r6, lr}
 8016398:	4d06      	ldr	r5, [pc, #24]	@ (80163b4 <_isatty_r+0x20>)
 801639a:	0004      	movs	r4, r0
 801639c:	0008      	movs	r0, r1
 801639e:	602b      	str	r3, [r5, #0]
 80163a0:	f7ed ff54 	bl	800424c <_isatty>
 80163a4:	1c43      	adds	r3, r0, #1
 80163a6:	d103      	bne.n	80163b0 <_isatty_r+0x1c>
 80163a8:	682b      	ldr	r3, [r5, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d000      	beq.n	80163b0 <_isatty_r+0x1c>
 80163ae:	6023      	str	r3, [r4, #0]
 80163b0:	bd70      	pop	{r4, r5, r6, pc}
 80163b2:	46c0      	nop			@ (mov r8, r8)
 80163b4:	20001f98 	.word	0x20001f98

080163b8 <sqrt>:
 80163b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ba:	0004      	movs	r4, r0
 80163bc:	000d      	movs	r5, r1
 80163be:	f000 f821 	bl	8016404 <__ieee754_sqrt>
 80163c2:	0022      	movs	r2, r4
 80163c4:	0006      	movs	r6, r0
 80163c6:	000f      	movs	r7, r1
 80163c8:	002b      	movs	r3, r5
 80163ca:	0020      	movs	r0, r4
 80163cc:	0029      	movs	r1, r5
 80163ce:	f7ec f985 	bl	80026dc <__aeabi_dcmpun>
 80163d2:	2800      	cmp	r0, #0
 80163d4:	d113      	bne.n	80163fe <sqrt+0x46>
 80163d6:	2200      	movs	r2, #0
 80163d8:	2300      	movs	r3, #0
 80163da:	0020      	movs	r0, r4
 80163dc:	0029      	movs	r1, r5
 80163de:	f7ea f83b 	bl	8000458 <__aeabi_dcmplt>
 80163e2:	2800      	cmp	r0, #0
 80163e4:	d00b      	beq.n	80163fe <sqrt+0x46>
 80163e6:	f7fd fecf 	bl	8014188 <__errno>
 80163ea:	2321      	movs	r3, #33	@ 0x21
 80163ec:	2200      	movs	r2, #0
 80163ee:	6003      	str	r3, [r0, #0]
 80163f0:	2300      	movs	r3, #0
 80163f2:	0010      	movs	r0, r2
 80163f4:	0019      	movs	r1, r3
 80163f6:	f7ea fec9 	bl	800118c <__aeabi_ddiv>
 80163fa:	0006      	movs	r6, r0
 80163fc:	000f      	movs	r7, r1
 80163fe:	0030      	movs	r0, r6
 8016400:	0039      	movs	r1, r7
 8016402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016404 <__ieee754_sqrt>:
 8016404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016406:	000a      	movs	r2, r1
 8016408:	000d      	movs	r5, r1
 801640a:	496d      	ldr	r1, [pc, #436]	@ (80165c0 <__ieee754_sqrt+0x1bc>)
 801640c:	0004      	movs	r4, r0
 801640e:	0003      	movs	r3, r0
 8016410:	0008      	movs	r0, r1
 8016412:	b087      	sub	sp, #28
 8016414:	4028      	ands	r0, r5
 8016416:	4288      	cmp	r0, r1
 8016418:	d111      	bne.n	801643e <__ieee754_sqrt+0x3a>
 801641a:	0022      	movs	r2, r4
 801641c:	002b      	movs	r3, r5
 801641e:	0020      	movs	r0, r4
 8016420:	0029      	movs	r1, r5
 8016422:	f7eb faf7 	bl	8001a14 <__aeabi_dmul>
 8016426:	0002      	movs	r2, r0
 8016428:	000b      	movs	r3, r1
 801642a:	0020      	movs	r0, r4
 801642c:	0029      	movs	r1, r5
 801642e:	f7ea fb49 	bl	8000ac4 <__aeabi_dadd>
 8016432:	0004      	movs	r4, r0
 8016434:	000d      	movs	r5, r1
 8016436:	0020      	movs	r0, r4
 8016438:	0029      	movs	r1, r5
 801643a:	b007      	add	sp, #28
 801643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801643e:	2d00      	cmp	r5, #0
 8016440:	dc11      	bgt.n	8016466 <__ieee754_sqrt+0x62>
 8016442:	0069      	lsls	r1, r5, #1
 8016444:	0849      	lsrs	r1, r1, #1
 8016446:	4321      	orrs	r1, r4
 8016448:	d0f5      	beq.n	8016436 <__ieee754_sqrt+0x32>
 801644a:	2000      	movs	r0, #0
 801644c:	4285      	cmp	r5, r0
 801644e:	d010      	beq.n	8016472 <__ieee754_sqrt+0x6e>
 8016450:	0022      	movs	r2, r4
 8016452:	002b      	movs	r3, r5
 8016454:	0020      	movs	r0, r4
 8016456:	0029      	movs	r1, r5
 8016458:	f7eb fda4 	bl	8001fa4 <__aeabi_dsub>
 801645c:	0002      	movs	r2, r0
 801645e:	000b      	movs	r3, r1
 8016460:	f7ea fe94 	bl	800118c <__aeabi_ddiv>
 8016464:	e7e5      	b.n	8016432 <__ieee754_sqrt+0x2e>
 8016466:	1528      	asrs	r0, r5, #20
 8016468:	d115      	bne.n	8016496 <__ieee754_sqrt+0x92>
 801646a:	2480      	movs	r4, #128	@ 0x80
 801646c:	2100      	movs	r1, #0
 801646e:	0364      	lsls	r4, r4, #13
 8016470:	e007      	b.n	8016482 <__ieee754_sqrt+0x7e>
 8016472:	0ada      	lsrs	r2, r3, #11
 8016474:	3815      	subs	r0, #21
 8016476:	055b      	lsls	r3, r3, #21
 8016478:	2a00      	cmp	r2, #0
 801647a:	d0fa      	beq.n	8016472 <__ieee754_sqrt+0x6e>
 801647c:	e7f5      	b.n	801646a <__ieee754_sqrt+0x66>
 801647e:	0052      	lsls	r2, r2, #1
 8016480:	3101      	adds	r1, #1
 8016482:	4222      	tst	r2, r4
 8016484:	d0fb      	beq.n	801647e <__ieee754_sqrt+0x7a>
 8016486:	1e4c      	subs	r4, r1, #1
 8016488:	1b00      	subs	r0, r0, r4
 801648a:	2420      	movs	r4, #32
 801648c:	001d      	movs	r5, r3
 801648e:	1a64      	subs	r4, r4, r1
 8016490:	40e5      	lsrs	r5, r4
 8016492:	408b      	lsls	r3, r1
 8016494:	432a      	orrs	r2, r5
 8016496:	494b      	ldr	r1, [pc, #300]	@ (80165c4 <__ieee754_sqrt+0x1c0>)
 8016498:	0312      	lsls	r2, r2, #12
 801649a:	1844      	adds	r4, r0, r1
 801649c:	2180      	movs	r1, #128	@ 0x80
 801649e:	0b12      	lsrs	r2, r2, #12
 80164a0:	0349      	lsls	r1, r1, #13
 80164a2:	4311      	orrs	r1, r2
 80164a4:	07c0      	lsls	r0, r0, #31
 80164a6:	d403      	bmi.n	80164b0 <__ieee754_sqrt+0xac>
 80164a8:	0fda      	lsrs	r2, r3, #31
 80164aa:	0049      	lsls	r1, r1, #1
 80164ac:	1851      	adds	r1, r2, r1
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	2500      	movs	r5, #0
 80164b2:	1062      	asrs	r2, r4, #1
 80164b4:	0049      	lsls	r1, r1, #1
 80164b6:	2480      	movs	r4, #128	@ 0x80
 80164b8:	9205      	str	r2, [sp, #20]
 80164ba:	0fda      	lsrs	r2, r3, #31
 80164bc:	1852      	adds	r2, r2, r1
 80164be:	2016      	movs	r0, #22
 80164c0:	0029      	movs	r1, r5
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	03a4      	lsls	r4, r4, #14
 80164c6:	190e      	adds	r6, r1, r4
 80164c8:	4296      	cmp	r6, r2
 80164ca:	dc02      	bgt.n	80164d2 <__ieee754_sqrt+0xce>
 80164cc:	1931      	adds	r1, r6, r4
 80164ce:	1b92      	subs	r2, r2, r6
 80164d0:	192d      	adds	r5, r5, r4
 80164d2:	0fde      	lsrs	r6, r3, #31
 80164d4:	0052      	lsls	r2, r2, #1
 80164d6:	3801      	subs	r0, #1
 80164d8:	1992      	adds	r2, r2, r6
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	0864      	lsrs	r4, r4, #1
 80164de:	2800      	cmp	r0, #0
 80164e0:	d1f1      	bne.n	80164c6 <__ieee754_sqrt+0xc2>
 80164e2:	2620      	movs	r6, #32
 80164e4:	2780      	movs	r7, #128	@ 0x80
 80164e6:	0004      	movs	r4, r0
 80164e8:	9604      	str	r6, [sp, #16]
 80164ea:	063f      	lsls	r7, r7, #24
 80164ec:	19c6      	adds	r6, r0, r7
 80164ee:	46b4      	mov	ip, r6
 80164f0:	4291      	cmp	r1, r2
 80164f2:	db02      	blt.n	80164fa <__ieee754_sqrt+0xf6>
 80164f4:	d114      	bne.n	8016520 <__ieee754_sqrt+0x11c>
 80164f6:	429e      	cmp	r6, r3
 80164f8:	d812      	bhi.n	8016520 <__ieee754_sqrt+0x11c>
 80164fa:	4660      	mov	r0, ip
 80164fc:	4666      	mov	r6, ip
 80164fe:	19c0      	adds	r0, r0, r7
 8016500:	9100      	str	r1, [sp, #0]
 8016502:	2e00      	cmp	r6, #0
 8016504:	da03      	bge.n	801650e <__ieee754_sqrt+0x10a>
 8016506:	43c6      	mvns	r6, r0
 8016508:	0ff6      	lsrs	r6, r6, #31
 801650a:	198e      	adds	r6, r1, r6
 801650c:	9600      	str	r6, [sp, #0]
 801650e:	1a52      	subs	r2, r2, r1
 8016510:	4563      	cmp	r3, ip
 8016512:	4189      	sbcs	r1, r1
 8016514:	4249      	negs	r1, r1
 8016516:	1a52      	subs	r2, r2, r1
 8016518:	4661      	mov	r1, ip
 801651a:	1a5b      	subs	r3, r3, r1
 801651c:	9900      	ldr	r1, [sp, #0]
 801651e:	19e4      	adds	r4, r4, r7
 8016520:	0fde      	lsrs	r6, r3, #31
 8016522:	0052      	lsls	r2, r2, #1
 8016524:	1992      	adds	r2, r2, r6
 8016526:	9e04      	ldr	r6, [sp, #16]
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	3e01      	subs	r6, #1
 801652c:	087f      	lsrs	r7, r7, #1
 801652e:	9604      	str	r6, [sp, #16]
 8016530:	2e00      	cmp	r6, #0
 8016532:	d1db      	bne.n	80164ec <__ieee754_sqrt+0xe8>
 8016534:	431a      	orrs	r2, r3
 8016536:	d01f      	beq.n	8016578 <__ieee754_sqrt+0x174>
 8016538:	4e23      	ldr	r6, [pc, #140]	@ (80165c8 <__ieee754_sqrt+0x1c4>)
 801653a:	4f24      	ldr	r7, [pc, #144]	@ (80165cc <__ieee754_sqrt+0x1c8>)
 801653c:	6830      	ldr	r0, [r6, #0]
 801653e:	6871      	ldr	r1, [r6, #4]
 8016540:	683a      	ldr	r2, [r7, #0]
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	9200      	str	r2, [sp, #0]
 8016546:	9301      	str	r3, [sp, #4]
 8016548:	6832      	ldr	r2, [r6, #0]
 801654a:	6873      	ldr	r3, [r6, #4]
 801654c:	9202      	str	r2, [sp, #8]
 801654e:	9303      	str	r3, [sp, #12]
 8016550:	9a00      	ldr	r2, [sp, #0]
 8016552:	9b01      	ldr	r3, [sp, #4]
 8016554:	f7eb fd26 	bl	8001fa4 <__aeabi_dsub>
 8016558:	0002      	movs	r2, r0
 801655a:	000b      	movs	r3, r1
 801655c:	9802      	ldr	r0, [sp, #8]
 801655e:	9903      	ldr	r1, [sp, #12]
 8016560:	f7e9 ff84 	bl	800046c <__aeabi_dcmple>
 8016564:	2800      	cmp	r0, #0
 8016566:	d007      	beq.n	8016578 <__ieee754_sqrt+0x174>
 8016568:	6830      	ldr	r0, [r6, #0]
 801656a:	6871      	ldr	r1, [r6, #4]
 801656c:	683a      	ldr	r2, [r7, #0]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	1c67      	adds	r7, r4, #1
 8016572:	d10f      	bne.n	8016594 <__ieee754_sqrt+0x190>
 8016574:	9c04      	ldr	r4, [sp, #16]
 8016576:	3501      	adds	r5, #1
 8016578:	4b15      	ldr	r3, [pc, #84]	@ (80165d0 <__ieee754_sqrt+0x1cc>)
 801657a:	106a      	asrs	r2, r5, #1
 801657c:	18d2      	adds	r2, r2, r3
 801657e:	0863      	lsrs	r3, r4, #1
 8016580:	07ed      	lsls	r5, r5, #31
 8016582:	d502      	bpl.n	801658a <__ieee754_sqrt+0x186>
 8016584:	2180      	movs	r1, #128	@ 0x80
 8016586:	0609      	lsls	r1, r1, #24
 8016588:	430b      	orrs	r3, r1
 801658a:	9905      	ldr	r1, [sp, #20]
 801658c:	001c      	movs	r4, r3
 801658e:	0509      	lsls	r1, r1, #20
 8016590:	188d      	adds	r5, r1, r2
 8016592:	e750      	b.n	8016436 <__ieee754_sqrt+0x32>
 8016594:	f7ea fa96 	bl	8000ac4 <__aeabi_dadd>
 8016598:	6877      	ldr	r7, [r6, #4]
 801659a:	6836      	ldr	r6, [r6, #0]
 801659c:	0002      	movs	r2, r0
 801659e:	000b      	movs	r3, r1
 80165a0:	0030      	movs	r0, r6
 80165a2:	0039      	movs	r1, r7
 80165a4:	f7e9 ff58 	bl	8000458 <__aeabi_dcmplt>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	d004      	beq.n	80165b6 <__ieee754_sqrt+0x1b2>
 80165ac:	3402      	adds	r4, #2
 80165ae:	4263      	negs	r3, r4
 80165b0:	4163      	adcs	r3, r4
 80165b2:	18ed      	adds	r5, r5, r3
 80165b4:	e7e0      	b.n	8016578 <__ieee754_sqrt+0x174>
 80165b6:	2301      	movs	r3, #1
 80165b8:	3401      	adds	r4, #1
 80165ba:	439c      	bics	r4, r3
 80165bc:	e7dc      	b.n	8016578 <__ieee754_sqrt+0x174>
 80165be:	46c0      	nop			@ (mov r8, r8)
 80165c0:	7ff00000 	.word	0x7ff00000
 80165c4:	fffffc01 	.word	0xfffffc01
 80165c8:	200003d0 	.word	0x200003d0
 80165cc:	200003c8 	.word	0x200003c8
 80165d0:	3fe00000 	.word	0x3fe00000

080165d4 <_init>:
 80165d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165d6:	46c0      	nop			@ (mov r8, r8)
 80165d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165da:	bc08      	pop	{r3}
 80165dc:	469e      	mov	lr, r3
 80165de:	4770      	bx	lr

080165e0 <_fini>:
 80165e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165e2:	46c0      	nop			@ (mov r8, r8)
 80165e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165e6:	bc08      	pop	{r3}
 80165e8:	469e      	mov	lr, r3
 80165ea:	4770      	bx	lr
=======
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 80126b8:	4b04      	ldr	r3, [pc, #16]	@ (80126cc <port_CheckEXT_IRQ+0x18>)
 80126ba:	2120      	movs	r1, #32
 80126bc:	0018      	movs	r0, r3
 80126be:	f7f1 ffd7 	bl	8004670 <HAL_GPIO_ReadPin>
 80126c2:	0003      	movs	r3, r0
}
 80126c4:	0018      	movs	r0, r3
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	46c0      	nop			@ (mov r8, r8)
 80126cc:	48000400 	.word	0x48000400

080126d0 <__cvt>:
 80126d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126d2:	001f      	movs	r7, r3
 80126d4:	2300      	movs	r3, #0
 80126d6:	0016      	movs	r6, r2
 80126d8:	b08b      	sub	sp, #44	@ 0x2c
 80126da:	429f      	cmp	r7, r3
 80126dc:	da04      	bge.n	80126e8 <__cvt+0x18>
 80126de:	2180      	movs	r1, #128	@ 0x80
 80126e0:	0609      	lsls	r1, r1, #24
 80126e2:	187b      	adds	r3, r7, r1
 80126e4:	001f      	movs	r7, r3
 80126e6:	232d      	movs	r3, #45	@ 0x2d
 80126e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80126ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80126ec:	7013      	strb	r3, [r2, #0]
 80126ee:	2320      	movs	r3, #32
 80126f0:	2203      	movs	r2, #3
 80126f2:	439d      	bics	r5, r3
 80126f4:	2d46      	cmp	r5, #70	@ 0x46
 80126f6:	d007      	beq.n	8012708 <__cvt+0x38>
 80126f8:	002b      	movs	r3, r5
 80126fa:	3b45      	subs	r3, #69	@ 0x45
 80126fc:	4259      	negs	r1, r3
 80126fe:	414b      	adcs	r3, r1
 8012700:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012702:	3a01      	subs	r2, #1
 8012704:	18cb      	adds	r3, r1, r3
 8012706:	9310      	str	r3, [sp, #64]	@ 0x40
 8012708:	ab09      	add	r3, sp, #36	@ 0x24
 801270a:	9304      	str	r3, [sp, #16]
 801270c:	ab08      	add	r3, sp, #32
 801270e:	9303      	str	r3, [sp, #12]
 8012710:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012712:	9200      	str	r2, [sp, #0]
 8012714:	9302      	str	r3, [sp, #8]
 8012716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012718:	0032      	movs	r2, r6
 801271a:	9301      	str	r3, [sp, #4]
 801271c:	003b      	movs	r3, r7
 801271e:	f000 fe75 	bl	801340c <_dtoa_r>
 8012722:	0004      	movs	r4, r0
 8012724:	2d47      	cmp	r5, #71	@ 0x47
 8012726:	d11b      	bne.n	8012760 <__cvt+0x90>
 8012728:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801272a:	07db      	lsls	r3, r3, #31
 801272c:	d511      	bpl.n	8012752 <__cvt+0x82>
 801272e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012730:	18c3      	adds	r3, r0, r3
 8012732:	9307      	str	r3, [sp, #28]
 8012734:	2200      	movs	r2, #0
 8012736:	2300      	movs	r3, #0
 8012738:	0030      	movs	r0, r6
 801273a:	0039      	movs	r1, r7
 801273c:	f7ed fe86 	bl	800044c <__aeabi_dcmpeq>
 8012740:	2800      	cmp	r0, #0
 8012742:	d001      	beq.n	8012748 <__cvt+0x78>
 8012744:	9b07      	ldr	r3, [sp, #28]
 8012746:	9309      	str	r3, [sp, #36]	@ 0x24
 8012748:	2230      	movs	r2, #48	@ 0x30
 801274a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801274c:	9907      	ldr	r1, [sp, #28]
 801274e:	428b      	cmp	r3, r1
 8012750:	d320      	bcc.n	8012794 <__cvt+0xc4>
 8012752:	0020      	movs	r0, r4
 8012754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012756:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012758:	1b1b      	subs	r3, r3, r4
 801275a:	6013      	str	r3, [r2, #0]
 801275c:	b00b      	add	sp, #44	@ 0x2c
 801275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012762:	18c3      	adds	r3, r0, r3
 8012764:	9307      	str	r3, [sp, #28]
 8012766:	2d46      	cmp	r5, #70	@ 0x46
 8012768:	d1e4      	bne.n	8012734 <__cvt+0x64>
 801276a:	7803      	ldrb	r3, [r0, #0]
 801276c:	2b30      	cmp	r3, #48	@ 0x30
 801276e:	d10c      	bne.n	801278a <__cvt+0xba>
 8012770:	2200      	movs	r2, #0
 8012772:	2300      	movs	r3, #0
 8012774:	0030      	movs	r0, r6
 8012776:	0039      	movs	r1, r7
 8012778:	f7ed fe68 	bl	800044c <__aeabi_dcmpeq>
 801277c:	2800      	cmp	r0, #0
 801277e:	d104      	bne.n	801278a <__cvt+0xba>
 8012780:	2301      	movs	r3, #1
 8012782:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012784:	1a9b      	subs	r3, r3, r2
 8012786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801278c:	9a07      	ldr	r2, [sp, #28]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	18d3      	adds	r3, r2, r3
 8012792:	e7ce      	b.n	8012732 <__cvt+0x62>
 8012794:	1c59      	adds	r1, r3, #1
 8012796:	9109      	str	r1, [sp, #36]	@ 0x24
 8012798:	701a      	strb	r2, [r3, #0]
 801279a:	e7d6      	b.n	801274a <__cvt+0x7a>

0801279c <__exponent>:
 801279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801279e:	232b      	movs	r3, #43	@ 0x2b
 80127a0:	b085      	sub	sp, #20
 80127a2:	0005      	movs	r5, r0
 80127a4:	1e0c      	subs	r4, r1, #0
 80127a6:	7002      	strb	r2, [r0, #0]
 80127a8:	da01      	bge.n	80127ae <__exponent+0x12>
 80127aa:	424c      	negs	r4, r1
 80127ac:	3302      	adds	r3, #2
 80127ae:	706b      	strb	r3, [r5, #1]
 80127b0:	2c09      	cmp	r4, #9
 80127b2:	dd2c      	ble.n	801280e <__exponent+0x72>
 80127b4:	ab02      	add	r3, sp, #8
 80127b6:	1dde      	adds	r6, r3, #7
 80127b8:	0020      	movs	r0, r4
 80127ba:	210a      	movs	r1, #10
 80127bc:	f7ed fe30 	bl	8000420 <__aeabi_idivmod>
 80127c0:	0037      	movs	r7, r6
 80127c2:	3130      	adds	r1, #48	@ 0x30
 80127c4:	3e01      	subs	r6, #1
 80127c6:	0020      	movs	r0, r4
 80127c8:	7031      	strb	r1, [r6, #0]
 80127ca:	210a      	movs	r1, #10
 80127cc:	9401      	str	r4, [sp, #4]
 80127ce:	f7ed fd41 	bl	8000254 <__divsi3>
 80127d2:	9b01      	ldr	r3, [sp, #4]
 80127d4:	0004      	movs	r4, r0
 80127d6:	2b63      	cmp	r3, #99	@ 0x63
 80127d8:	dcee      	bgt.n	80127b8 <__exponent+0x1c>
 80127da:	1eba      	subs	r2, r7, #2
 80127dc:	1ca8      	adds	r0, r5, #2
 80127de:	0001      	movs	r1, r0
 80127e0:	0013      	movs	r3, r2
 80127e2:	3430      	adds	r4, #48	@ 0x30
 80127e4:	7014      	strb	r4, [r2, #0]
 80127e6:	ac02      	add	r4, sp, #8
 80127e8:	3407      	adds	r4, #7
 80127ea:	429c      	cmp	r4, r3
 80127ec:	d80a      	bhi.n	8012804 <__exponent+0x68>
 80127ee:	2300      	movs	r3, #0
 80127f0:	4294      	cmp	r4, r2
 80127f2:	d303      	bcc.n	80127fc <__exponent+0x60>
 80127f4:	3309      	adds	r3, #9
 80127f6:	aa02      	add	r2, sp, #8
 80127f8:	189b      	adds	r3, r3, r2
 80127fa:	1bdb      	subs	r3, r3, r7
 80127fc:	18c0      	adds	r0, r0, r3
 80127fe:	1b40      	subs	r0, r0, r5
 8012800:	b005      	add	sp, #20
 8012802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012804:	781c      	ldrb	r4, [r3, #0]
 8012806:	3301      	adds	r3, #1
 8012808:	700c      	strb	r4, [r1, #0]
 801280a:	3101      	adds	r1, #1
 801280c:	e7eb      	b.n	80127e6 <__exponent+0x4a>
 801280e:	2330      	movs	r3, #48	@ 0x30
 8012810:	18e4      	adds	r4, r4, r3
 8012812:	70ab      	strb	r3, [r5, #2]
 8012814:	1d28      	adds	r0, r5, #4
 8012816:	70ec      	strb	r4, [r5, #3]
 8012818:	e7f1      	b.n	80127fe <__exponent+0x62>
	...

0801281c <_printf_float>:
 801281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801281e:	b097      	sub	sp, #92	@ 0x5c
 8012820:	000d      	movs	r5, r1
 8012822:	920a      	str	r2, [sp, #40]	@ 0x28
 8012824:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8012826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012828:	9009      	str	r0, [sp, #36]	@ 0x24
 801282a:	f000 fcd7 	bl	80131dc <_localeconv_r>
 801282e:	6803      	ldr	r3, [r0, #0]
 8012830:	0018      	movs	r0, r3
 8012832:	930d      	str	r3, [sp, #52]	@ 0x34
 8012834:	f7ed fc68 	bl	8000108 <strlen>
 8012838:	2300      	movs	r3, #0
 801283a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801283c:	9314      	str	r3, [sp, #80]	@ 0x50
 801283e:	7e2b      	ldrb	r3, [r5, #24]
 8012840:	2207      	movs	r2, #7
 8012842:	930c      	str	r3, [sp, #48]	@ 0x30
 8012844:	682b      	ldr	r3, [r5, #0]
 8012846:	930e      	str	r3, [sp, #56]	@ 0x38
 8012848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801284a:	6823      	ldr	r3, [r4, #0]
 801284c:	05c9      	lsls	r1, r1, #23
 801284e:	d545      	bpl.n	80128dc <_printf_float+0xc0>
 8012850:	189b      	adds	r3, r3, r2
 8012852:	4393      	bics	r3, r2
 8012854:	001a      	movs	r2, r3
 8012856:	3208      	adds	r2, #8
 8012858:	6022      	str	r2, [r4, #0]
 801285a:	2201      	movs	r2, #1
 801285c:	681e      	ldr	r6, [r3, #0]
 801285e:	685f      	ldr	r7, [r3, #4]
 8012860:	007b      	lsls	r3, r7, #1
 8012862:	085b      	lsrs	r3, r3, #1
 8012864:	9311      	str	r3, [sp, #68]	@ 0x44
 8012866:	9610      	str	r6, [sp, #64]	@ 0x40
 8012868:	64ae      	str	r6, [r5, #72]	@ 0x48
 801286a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801286c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801286e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012870:	4ba7      	ldr	r3, [pc, #668]	@ (8012b10 <_printf_float+0x2f4>)
 8012872:	4252      	negs	r2, r2
 8012874:	f7ef fd08 	bl	8002288 <__aeabi_dcmpun>
 8012878:	2800      	cmp	r0, #0
 801287a:	d131      	bne.n	80128e0 <_printf_float+0xc4>
 801287c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801287e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012880:	2201      	movs	r2, #1
 8012882:	4ba3      	ldr	r3, [pc, #652]	@ (8012b10 <_printf_float+0x2f4>)
 8012884:	4252      	negs	r2, r2
 8012886:	f7ed fdf1 	bl	800046c <__aeabi_dcmple>
 801288a:	2800      	cmp	r0, #0
 801288c:	d128      	bne.n	80128e0 <_printf_float+0xc4>
 801288e:	2200      	movs	r2, #0
 8012890:	2300      	movs	r3, #0
 8012892:	0030      	movs	r0, r6
 8012894:	0039      	movs	r1, r7
 8012896:	f7ed fddf 	bl	8000458 <__aeabi_dcmplt>
 801289a:	2800      	cmp	r0, #0
 801289c:	d003      	beq.n	80128a6 <_printf_float+0x8a>
 801289e:	002b      	movs	r3, r5
 80128a0:	222d      	movs	r2, #45	@ 0x2d
 80128a2:	3343      	adds	r3, #67	@ 0x43
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128a8:	4f9a      	ldr	r7, [pc, #616]	@ (8012b14 <_printf_float+0x2f8>)
 80128aa:	2b47      	cmp	r3, #71	@ 0x47
 80128ac:	d800      	bhi.n	80128b0 <_printf_float+0x94>
 80128ae:	4f9a      	ldr	r7, [pc, #616]	@ (8012b18 <_printf_float+0x2fc>)
 80128b0:	2303      	movs	r3, #3
 80128b2:	2400      	movs	r4, #0
 80128b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128b6:	612b      	str	r3, [r5, #16]
 80128b8:	3301      	adds	r3, #1
 80128ba:	439a      	bics	r2, r3
 80128bc:	602a      	str	r2, [r5, #0]
 80128be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128c0:	0029      	movs	r1, r5
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128c8:	aa15      	add	r2, sp, #84	@ 0x54
 80128ca:	f000 f9e5 	bl	8012c98 <_printf_common>
 80128ce:	3001      	adds	r0, #1
 80128d0:	d000      	beq.n	80128d4 <_printf_float+0xb8>
 80128d2:	e09e      	b.n	8012a12 <_printf_float+0x1f6>
 80128d4:	2001      	movs	r0, #1
 80128d6:	4240      	negs	r0, r0
 80128d8:	b017      	add	sp, #92	@ 0x5c
 80128da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128dc:	3307      	adds	r3, #7
 80128de:	e7b8      	b.n	8012852 <_printf_float+0x36>
 80128e0:	0032      	movs	r2, r6
 80128e2:	003b      	movs	r3, r7
 80128e4:	0030      	movs	r0, r6
 80128e6:	0039      	movs	r1, r7
 80128e8:	f7ef fcce 	bl	8002288 <__aeabi_dcmpun>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d00b      	beq.n	8012908 <_printf_float+0xec>
 80128f0:	2f00      	cmp	r7, #0
 80128f2:	da03      	bge.n	80128fc <_printf_float+0xe0>
 80128f4:	002b      	movs	r3, r5
 80128f6:	222d      	movs	r2, #45	@ 0x2d
 80128f8:	3343      	adds	r3, #67	@ 0x43
 80128fa:	701a      	strb	r2, [r3, #0]
 80128fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128fe:	4f87      	ldr	r7, [pc, #540]	@ (8012b1c <_printf_float+0x300>)
 8012900:	2b47      	cmp	r3, #71	@ 0x47
 8012902:	d8d5      	bhi.n	80128b0 <_printf_float+0x94>
 8012904:	4f86      	ldr	r7, [pc, #536]	@ (8012b20 <_printf_float+0x304>)
 8012906:	e7d3      	b.n	80128b0 <_printf_float+0x94>
 8012908:	2220      	movs	r2, #32
 801290a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801290c:	686b      	ldr	r3, [r5, #4]
 801290e:	4394      	bics	r4, r2
 8012910:	1c5a      	adds	r2, r3, #1
 8012912:	d146      	bne.n	80129a2 <_printf_float+0x186>
 8012914:	3307      	adds	r3, #7
 8012916:	606b      	str	r3, [r5, #4]
 8012918:	2380      	movs	r3, #128	@ 0x80
 801291a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801291c:	00db      	lsls	r3, r3, #3
 801291e:	4313      	orrs	r3, r2
 8012920:	2200      	movs	r2, #0
 8012922:	602b      	str	r3, [r5, #0]
 8012924:	9206      	str	r2, [sp, #24]
 8012926:	aa14      	add	r2, sp, #80	@ 0x50
 8012928:	9205      	str	r2, [sp, #20]
 801292a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801292c:	a90a      	add	r1, sp, #40	@ 0x28
 801292e:	9204      	str	r2, [sp, #16]
 8012930:	aa13      	add	r2, sp, #76	@ 0x4c
 8012932:	9203      	str	r2, [sp, #12]
 8012934:	2223      	movs	r2, #35	@ 0x23
 8012936:	1852      	adds	r2, r2, r1
 8012938:	9202      	str	r2, [sp, #8]
 801293a:	9301      	str	r3, [sp, #4]
 801293c:	686b      	ldr	r3, [r5, #4]
 801293e:	0032      	movs	r2, r6
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012944:	003b      	movs	r3, r7
 8012946:	f7ff fec3 	bl	80126d0 <__cvt>
 801294a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801294c:	0007      	movs	r7, r0
 801294e:	2c47      	cmp	r4, #71	@ 0x47
 8012950:	d12d      	bne.n	80129ae <_printf_float+0x192>
 8012952:	1cd3      	adds	r3, r2, #3
 8012954:	db02      	blt.n	801295c <_printf_float+0x140>
 8012956:	686b      	ldr	r3, [r5, #4]
 8012958:	429a      	cmp	r2, r3
 801295a:	dd47      	ble.n	80129ec <_printf_float+0x1d0>
 801295c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801295e:	3b02      	subs	r3, #2
 8012960:	b2db      	uxtb	r3, r3
 8012962:	930c      	str	r3, [sp, #48]	@ 0x30
 8012964:	0028      	movs	r0, r5
 8012966:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012968:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801296a:	3901      	subs	r1, #1
 801296c:	3050      	adds	r0, #80	@ 0x50
 801296e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012970:	f7ff ff14 	bl	801279c <__exponent>
 8012974:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012976:	0004      	movs	r4, r0
 8012978:	1813      	adds	r3, r2, r0
 801297a:	612b      	str	r3, [r5, #16]
 801297c:	2a01      	cmp	r2, #1
 801297e:	dc02      	bgt.n	8012986 <_printf_float+0x16a>
 8012980:	682a      	ldr	r2, [r5, #0]
 8012982:	07d2      	lsls	r2, r2, #31
 8012984:	d501      	bpl.n	801298a <_printf_float+0x16e>
 8012986:	3301      	adds	r3, #1
 8012988:	612b      	str	r3, [r5, #16]
 801298a:	2323      	movs	r3, #35	@ 0x23
 801298c:	aa0a      	add	r2, sp, #40	@ 0x28
 801298e:	189b      	adds	r3, r3, r2
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d100      	bne.n	8012998 <_printf_float+0x17c>
 8012996:	e792      	b.n	80128be <_printf_float+0xa2>
 8012998:	002b      	movs	r3, r5
 801299a:	222d      	movs	r2, #45	@ 0x2d
 801299c:	3343      	adds	r3, #67	@ 0x43
 801299e:	701a      	strb	r2, [r3, #0]
 80129a0:	e78d      	b.n	80128be <_printf_float+0xa2>
 80129a2:	2c47      	cmp	r4, #71	@ 0x47
 80129a4:	d1b8      	bne.n	8012918 <_printf_float+0xfc>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1b6      	bne.n	8012918 <_printf_float+0xfc>
 80129aa:	3301      	adds	r3, #1
 80129ac:	e7b3      	b.n	8012916 <_printf_float+0xfa>
 80129ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129b0:	2b65      	cmp	r3, #101	@ 0x65
 80129b2:	d9d7      	bls.n	8012964 <_printf_float+0x148>
 80129b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129b6:	2b66      	cmp	r3, #102	@ 0x66
 80129b8:	d11a      	bne.n	80129f0 <_printf_float+0x1d4>
 80129ba:	686b      	ldr	r3, [r5, #4]
 80129bc:	2a00      	cmp	r2, #0
 80129be:	dd09      	ble.n	80129d4 <_printf_float+0x1b8>
 80129c0:	612a      	str	r2, [r5, #16]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d102      	bne.n	80129cc <_printf_float+0x1b0>
 80129c6:	6829      	ldr	r1, [r5, #0]
 80129c8:	07c9      	lsls	r1, r1, #31
 80129ca:	d50b      	bpl.n	80129e4 <_printf_float+0x1c8>
 80129cc:	3301      	adds	r3, #1
 80129ce:	189b      	adds	r3, r3, r2
 80129d0:	612b      	str	r3, [r5, #16]
 80129d2:	e007      	b.n	80129e4 <_printf_float+0x1c8>
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d103      	bne.n	80129e0 <_printf_float+0x1c4>
 80129d8:	2201      	movs	r2, #1
 80129da:	6829      	ldr	r1, [r5, #0]
 80129dc:	4211      	tst	r1, r2
 80129de:	d000      	beq.n	80129e2 <_printf_float+0x1c6>
 80129e0:	1c9a      	adds	r2, r3, #2
 80129e2:	612a      	str	r2, [r5, #16]
 80129e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80129e6:	2400      	movs	r4, #0
 80129e8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80129ea:	e7ce      	b.n	801298a <_printf_float+0x16e>
 80129ec:	2367      	movs	r3, #103	@ 0x67
 80129ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80129f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80129f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80129f4:	4299      	cmp	r1, r3
 80129f6:	db06      	blt.n	8012a06 <_printf_float+0x1ea>
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	6129      	str	r1, [r5, #16]
 80129fc:	07db      	lsls	r3, r3, #31
 80129fe:	d5f1      	bpl.n	80129e4 <_printf_float+0x1c8>
 8012a00:	3101      	adds	r1, #1
 8012a02:	6129      	str	r1, [r5, #16]
 8012a04:	e7ee      	b.n	80129e4 <_printf_float+0x1c8>
 8012a06:	2201      	movs	r2, #1
 8012a08:	2900      	cmp	r1, #0
 8012a0a:	dce0      	bgt.n	80129ce <_printf_float+0x1b2>
 8012a0c:	1892      	adds	r2, r2, r2
 8012a0e:	1a52      	subs	r2, r2, r1
 8012a10:	e7dd      	b.n	80129ce <_printf_float+0x1b2>
 8012a12:	682a      	ldr	r2, [r5, #0]
 8012a14:	0553      	lsls	r3, r2, #21
 8012a16:	d408      	bmi.n	8012a2a <_printf_float+0x20e>
 8012a18:	692b      	ldr	r3, [r5, #16]
 8012a1a:	003a      	movs	r2, r7
 8012a1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012a22:	47a0      	blx	r4
 8012a24:	3001      	adds	r0, #1
 8012a26:	d129      	bne.n	8012a7c <_printf_float+0x260>
 8012a28:	e754      	b.n	80128d4 <_printf_float+0xb8>
 8012a2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a2c:	2b65      	cmp	r3, #101	@ 0x65
 8012a2e:	d800      	bhi.n	8012a32 <_printf_float+0x216>
 8012a30:	e0db      	b.n	8012bea <_printf_float+0x3ce>
 8012a32:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8012a34:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012a36:	2200      	movs	r2, #0
 8012a38:	2300      	movs	r3, #0
 8012a3a:	f7ed fd07 	bl	800044c <__aeabi_dcmpeq>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d033      	beq.n	8012aaa <_printf_float+0x28e>
 8012a42:	2301      	movs	r3, #1
 8012a44:	4a37      	ldr	r2, [pc, #220]	@ (8012b24 <_printf_float+0x308>)
 8012a46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012a4c:	47a0      	blx	r4
 8012a4e:	3001      	adds	r0, #1
 8012a50:	d100      	bne.n	8012a54 <_printf_float+0x238>
 8012a52:	e73f      	b.n	80128d4 <_printf_float+0xb8>
 8012a54:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012a56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012a58:	42b3      	cmp	r3, r6
 8012a5a:	db02      	blt.n	8012a62 <_printf_float+0x246>
 8012a5c:	682b      	ldr	r3, [r5, #0]
 8012a5e:	07db      	lsls	r3, r3, #31
 8012a60:	d50c      	bpl.n	8012a7c <_printf_float+0x260>
 8012a62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a6c:	47a0      	blx	r4
 8012a6e:	2400      	movs	r4, #0
 8012a70:	3001      	adds	r0, #1
 8012a72:	d100      	bne.n	8012a76 <_printf_float+0x25a>
 8012a74:	e72e      	b.n	80128d4 <_printf_float+0xb8>
 8012a76:	1e73      	subs	r3, r6, #1
 8012a78:	42a3      	cmp	r3, r4
 8012a7a:	dc0a      	bgt.n	8012a92 <_printf_float+0x276>
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	079b      	lsls	r3, r3, #30
 8012a80:	d500      	bpl.n	8012a84 <_printf_float+0x268>
 8012a82:	e106      	b.n	8012c92 <_printf_float+0x476>
 8012a84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012a86:	68e8      	ldr	r0, [r5, #12]
 8012a88:	4298      	cmp	r0, r3
 8012a8a:	db00      	blt.n	8012a8e <_printf_float+0x272>
 8012a8c:	e724      	b.n	80128d8 <_printf_float+0xbc>
 8012a8e:	0018      	movs	r0, r3
 8012a90:	e722      	b.n	80128d8 <_printf_float+0xbc>
 8012a92:	002a      	movs	r2, r5
 8012a94:	2301      	movs	r3, #1
 8012a96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012a9c:	321a      	adds	r2, #26
 8012a9e:	47b8      	blx	r7
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	d100      	bne.n	8012aa6 <_printf_float+0x28a>
 8012aa4:	e716      	b.n	80128d4 <_printf_float+0xb8>
 8012aa6:	3401      	adds	r4, #1
 8012aa8:	e7e5      	b.n	8012a76 <_printf_float+0x25a>
 8012aaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dc3b      	bgt.n	8012b28 <_printf_float+0x30c>
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8012b24 <_printf_float+0x308>)
 8012ab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ab8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012aba:	47a0      	blx	r4
 8012abc:	3001      	adds	r0, #1
 8012abe:	d100      	bne.n	8012ac2 <_printf_float+0x2a6>
 8012ac0:	e708      	b.n	80128d4 <_printf_float+0xb8>
 8012ac2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012ac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012ac6:	4333      	orrs	r3, r6
 8012ac8:	d102      	bne.n	8012ad0 <_printf_float+0x2b4>
 8012aca:	682b      	ldr	r3, [r5, #0]
 8012acc:	07db      	lsls	r3, r3, #31
 8012ace:	d5d5      	bpl.n	8012a7c <_printf_float+0x260>
 8012ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ad2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ad8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012ada:	47a0      	blx	r4
 8012adc:	2300      	movs	r3, #0
 8012ade:	3001      	adds	r0, #1
 8012ae0:	d100      	bne.n	8012ae4 <_printf_float+0x2c8>
 8012ae2:	e6f7      	b.n	80128d4 <_printf_float+0xb8>
 8012ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ae6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012ae8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012aea:	425b      	negs	r3, r3
 8012aec:	4293      	cmp	r3, r2
 8012aee:	dc01      	bgt.n	8012af4 <_printf_float+0x2d8>
 8012af0:	0033      	movs	r3, r6
 8012af2:	e792      	b.n	8012a1a <_printf_float+0x1fe>
 8012af4:	002a      	movs	r2, r5
 8012af6:	2301      	movs	r3, #1
 8012af8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012afc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012afe:	321a      	adds	r2, #26
 8012b00:	47a0      	blx	r4
 8012b02:	3001      	adds	r0, #1
 8012b04:	d100      	bne.n	8012b08 <_printf_float+0x2ec>
 8012b06:	e6e5      	b.n	80128d4 <_printf_float+0xb8>
 8012b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	e7ea      	b.n	8012ae4 <_printf_float+0x2c8>
 8012b0e:	46c0      	nop			@ (mov r8, r8)
 8012b10:	7fefffff 	.word	0x7fefffff
 8012b14:	08018986 	.word	0x08018986
 8012b18:	08018982 	.word	0x08018982
 8012b1c:	0801898e 	.word	0x0801898e
 8012b20:	0801898a 	.word	0x0801898a
 8012b24:	08018992 	.word	0x08018992
 8012b28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012b2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8012b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b2e:	429e      	cmp	r6, r3
 8012b30:	dd00      	ble.n	8012b34 <_printf_float+0x318>
 8012b32:	001e      	movs	r6, r3
 8012b34:	2e00      	cmp	r6, #0
 8012b36:	dc31      	bgt.n	8012b9c <_printf_float+0x380>
 8012b38:	43f3      	mvns	r3, r6
 8012b3a:	2400      	movs	r4, #0
 8012b3c:	17db      	asrs	r3, r3, #31
 8012b3e:	4033      	ands	r3, r6
 8012b40:	930e      	str	r3, [sp, #56]	@ 0x38
 8012b42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8012b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b46:	1af3      	subs	r3, r6, r3
 8012b48:	42a3      	cmp	r3, r4
 8012b4a:	dc30      	bgt.n	8012bae <_printf_float+0x392>
 8012b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012b4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012b50:	429a      	cmp	r2, r3
 8012b52:	dc38      	bgt.n	8012bc6 <_printf_float+0x3aa>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	07db      	lsls	r3, r3, #31
 8012b58:	d435      	bmi.n	8012bc6 <_printf_float+0x3aa>
 8012b5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8012b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012b60:	1b9b      	subs	r3, r3, r6
 8012b62:	1b14      	subs	r4, r2, r4
 8012b64:	429c      	cmp	r4, r3
 8012b66:	dd00      	ble.n	8012b6a <_printf_float+0x34e>
 8012b68:	001c      	movs	r4, r3
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	dc34      	bgt.n	8012bd8 <_printf_float+0x3bc>
 8012b6e:	43e3      	mvns	r3, r4
 8012b70:	2600      	movs	r6, #0
 8012b72:	17db      	asrs	r3, r3, #31
 8012b74:	401c      	ands	r4, r3
 8012b76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012b78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	1b1b      	subs	r3, r3, r4
 8012b7e:	42b3      	cmp	r3, r6
 8012b80:	dc00      	bgt.n	8012b84 <_printf_float+0x368>
 8012b82:	e77b      	b.n	8012a7c <_printf_float+0x260>
 8012b84:	002a      	movs	r2, r5
 8012b86:	2301      	movs	r3, #1
 8012b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012b8e:	321a      	adds	r2, #26
 8012b90:	47b8      	blx	r7
 8012b92:	3001      	adds	r0, #1
 8012b94:	d100      	bne.n	8012b98 <_printf_float+0x37c>
 8012b96:	e69d      	b.n	80128d4 <_printf_float+0xb8>
 8012b98:	3601      	adds	r6, #1
 8012b9a:	e7ec      	b.n	8012b76 <_printf_float+0x35a>
 8012b9c:	0033      	movs	r3, r6
 8012b9e:	003a      	movs	r2, r7
 8012ba0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ba4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012ba6:	47a0      	blx	r4
 8012ba8:	3001      	adds	r0, #1
 8012baa:	d1c5      	bne.n	8012b38 <_printf_float+0x31c>
 8012bac:	e692      	b.n	80128d4 <_printf_float+0xb8>
 8012bae:	002a      	movs	r2, r5
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bb6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012bb8:	321a      	adds	r2, #26
 8012bba:	47b0      	blx	r6
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	d100      	bne.n	8012bc2 <_printf_float+0x3a6>
 8012bc0:	e688      	b.n	80128d4 <_printf_float+0xb8>
 8012bc2:	3401      	adds	r4, #1
 8012bc4:	e7bd      	b.n	8012b42 <_printf_float+0x326>
 8012bc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012bd0:	47a0      	blx	r4
 8012bd2:	3001      	adds	r0, #1
 8012bd4:	d1c1      	bne.n	8012b5a <_printf_float+0x33e>
 8012bd6:	e67d      	b.n	80128d4 <_printf_float+0xb8>
 8012bd8:	19ba      	adds	r2, r7, r6
 8012bda:	0023      	movs	r3, r4
 8012bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012be0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012be2:	47b0      	blx	r6
 8012be4:	3001      	adds	r0, #1
 8012be6:	d1c2      	bne.n	8012b6e <_printf_float+0x352>
 8012be8:	e674      	b.n	80128d4 <_printf_float+0xb8>
 8012bea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012bec:	930c      	str	r3, [sp, #48]	@ 0x30
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	dc02      	bgt.n	8012bf8 <_printf_float+0x3dc>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	421a      	tst	r2, r3
 8012bf6:	d039      	beq.n	8012c6c <_printf_float+0x450>
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	003a      	movs	r2, r7
 8012bfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012c02:	47b0      	blx	r6
 8012c04:	3001      	adds	r0, #1
 8012c06:	d100      	bne.n	8012c0a <_printf_float+0x3ee>
 8012c08:	e664      	b.n	80128d4 <_printf_float+0xb8>
 8012c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c12:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012c14:	47b0      	blx	r6
 8012c16:	3001      	adds	r0, #1
 8012c18:	d100      	bne.n	8012c1c <_printf_float+0x400>
 8012c1a:	e65b      	b.n	80128d4 <_printf_float+0xb8>
 8012c1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8012c1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c22:	2200      	movs	r2, #0
 8012c24:	3b01      	subs	r3, #1
 8012c26:	930c      	str	r3, [sp, #48]	@ 0x30
 8012c28:	2300      	movs	r3, #0
 8012c2a:	f7ed fc0f 	bl	800044c <__aeabi_dcmpeq>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d11a      	bne.n	8012c68 <_printf_float+0x44c>
 8012c32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c34:	1c7a      	adds	r2, r7, #1
 8012c36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012c3c:	47b0      	blx	r6
 8012c3e:	3001      	adds	r0, #1
 8012c40:	d10e      	bne.n	8012c60 <_printf_float+0x444>
 8012c42:	e647      	b.n	80128d4 <_printf_float+0xb8>
 8012c44:	002a      	movs	r2, r5
 8012c46:	2301      	movs	r3, #1
 8012c48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012c4e:	321a      	adds	r2, #26
 8012c50:	47b8      	blx	r7
 8012c52:	3001      	adds	r0, #1
 8012c54:	d100      	bne.n	8012c58 <_printf_float+0x43c>
 8012c56:	e63d      	b.n	80128d4 <_printf_float+0xb8>
 8012c58:	3601      	adds	r6, #1
 8012c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c5c:	429e      	cmp	r6, r3
 8012c5e:	dbf1      	blt.n	8012c44 <_printf_float+0x428>
 8012c60:	002a      	movs	r2, r5
 8012c62:	0023      	movs	r3, r4
 8012c64:	3250      	adds	r2, #80	@ 0x50
 8012c66:	e6d9      	b.n	8012a1c <_printf_float+0x200>
 8012c68:	2600      	movs	r6, #0
 8012c6a:	e7f6      	b.n	8012c5a <_printf_float+0x43e>
 8012c6c:	003a      	movs	r2, r7
 8012c6e:	e7e2      	b.n	8012c36 <_printf_float+0x41a>
 8012c70:	002a      	movs	r2, r5
 8012c72:	2301      	movs	r3, #1
 8012c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012c7a:	3219      	adds	r2, #25
 8012c7c:	47b0      	blx	r6
 8012c7e:	3001      	adds	r0, #1
 8012c80:	d100      	bne.n	8012c84 <_printf_float+0x468>
 8012c82:	e627      	b.n	80128d4 <_printf_float+0xb8>
 8012c84:	3401      	adds	r4, #1
 8012c86:	68eb      	ldr	r3, [r5, #12]
 8012c88:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012c8a:	1a9b      	subs	r3, r3, r2
 8012c8c:	42a3      	cmp	r3, r4
 8012c8e:	dcef      	bgt.n	8012c70 <_printf_float+0x454>
 8012c90:	e6f8      	b.n	8012a84 <_printf_float+0x268>
 8012c92:	2400      	movs	r4, #0
 8012c94:	e7f7      	b.n	8012c86 <_printf_float+0x46a>
 8012c96:	46c0      	nop			@ (mov r8, r8)

08012c98 <_printf_common>:
 8012c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c9a:	0016      	movs	r6, r2
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	688a      	ldr	r2, [r1, #8]
 8012ca0:	690b      	ldr	r3, [r1, #16]
 8012ca2:	000c      	movs	r4, r1
 8012ca4:	9000      	str	r0, [sp, #0]
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	da00      	bge.n	8012cac <_printf_common+0x14>
 8012caa:	0013      	movs	r3, r2
 8012cac:	0022      	movs	r2, r4
 8012cae:	6033      	str	r3, [r6, #0]
 8012cb0:	3243      	adds	r2, #67	@ 0x43
 8012cb2:	7812      	ldrb	r2, [r2, #0]
 8012cb4:	2a00      	cmp	r2, #0
 8012cb6:	d001      	beq.n	8012cbc <_printf_common+0x24>
 8012cb8:	3301      	adds	r3, #1
 8012cba:	6033      	str	r3, [r6, #0]
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	069b      	lsls	r3, r3, #26
 8012cc0:	d502      	bpl.n	8012cc8 <_printf_common+0x30>
 8012cc2:	6833      	ldr	r3, [r6, #0]
 8012cc4:	3302      	adds	r3, #2
 8012cc6:	6033      	str	r3, [r6, #0]
 8012cc8:	6822      	ldr	r2, [r4, #0]
 8012cca:	2306      	movs	r3, #6
 8012ccc:	0015      	movs	r5, r2
 8012cce:	401d      	ands	r5, r3
 8012cd0:	421a      	tst	r2, r3
 8012cd2:	d027      	beq.n	8012d24 <_printf_common+0x8c>
 8012cd4:	0023      	movs	r3, r4
 8012cd6:	3343      	adds	r3, #67	@ 0x43
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	1e5a      	subs	r2, r3, #1
 8012cdc:	4193      	sbcs	r3, r2
 8012cde:	6822      	ldr	r2, [r4, #0]
 8012ce0:	0692      	lsls	r2, r2, #26
 8012ce2:	d430      	bmi.n	8012d46 <_printf_common+0xae>
 8012ce4:	0022      	movs	r2, r4
 8012ce6:	9901      	ldr	r1, [sp, #4]
 8012ce8:	9800      	ldr	r0, [sp, #0]
 8012cea:	9d08      	ldr	r5, [sp, #32]
 8012cec:	3243      	adds	r2, #67	@ 0x43
 8012cee:	47a8      	blx	r5
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d025      	beq.n	8012d40 <_printf_common+0xa8>
 8012cf4:	2206      	movs	r2, #6
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	2500      	movs	r5, #0
 8012cfa:	4013      	ands	r3, r2
 8012cfc:	2b04      	cmp	r3, #4
 8012cfe:	d105      	bne.n	8012d0c <_printf_common+0x74>
 8012d00:	6833      	ldr	r3, [r6, #0]
 8012d02:	68e5      	ldr	r5, [r4, #12]
 8012d04:	1aed      	subs	r5, r5, r3
 8012d06:	43eb      	mvns	r3, r5
 8012d08:	17db      	asrs	r3, r3, #31
 8012d0a:	401d      	ands	r5, r3
 8012d0c:	68a3      	ldr	r3, [r4, #8]
 8012d0e:	6922      	ldr	r2, [r4, #16]
 8012d10:	4293      	cmp	r3, r2
 8012d12:	dd01      	ble.n	8012d18 <_printf_common+0x80>
 8012d14:	1a9b      	subs	r3, r3, r2
 8012d16:	18ed      	adds	r5, r5, r3
 8012d18:	2600      	movs	r6, #0
 8012d1a:	42b5      	cmp	r5, r6
 8012d1c:	d120      	bne.n	8012d60 <_printf_common+0xc8>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	e010      	b.n	8012d44 <_printf_common+0xac>
 8012d22:	3501      	adds	r5, #1
 8012d24:	68e3      	ldr	r3, [r4, #12]
 8012d26:	6832      	ldr	r2, [r6, #0]
 8012d28:	1a9b      	subs	r3, r3, r2
 8012d2a:	42ab      	cmp	r3, r5
 8012d2c:	ddd2      	ble.n	8012cd4 <_printf_common+0x3c>
 8012d2e:	0022      	movs	r2, r4
 8012d30:	2301      	movs	r3, #1
 8012d32:	9901      	ldr	r1, [sp, #4]
 8012d34:	9800      	ldr	r0, [sp, #0]
 8012d36:	9f08      	ldr	r7, [sp, #32]
 8012d38:	3219      	adds	r2, #25
 8012d3a:	47b8      	blx	r7
 8012d3c:	3001      	adds	r0, #1
 8012d3e:	d1f0      	bne.n	8012d22 <_printf_common+0x8a>
 8012d40:	2001      	movs	r0, #1
 8012d42:	4240      	negs	r0, r0
 8012d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012d46:	2030      	movs	r0, #48	@ 0x30
 8012d48:	18e1      	adds	r1, r4, r3
 8012d4a:	3143      	adds	r1, #67	@ 0x43
 8012d4c:	7008      	strb	r0, [r1, #0]
 8012d4e:	0021      	movs	r1, r4
 8012d50:	1c5a      	adds	r2, r3, #1
 8012d52:	3145      	adds	r1, #69	@ 0x45
 8012d54:	7809      	ldrb	r1, [r1, #0]
 8012d56:	18a2      	adds	r2, r4, r2
 8012d58:	3243      	adds	r2, #67	@ 0x43
 8012d5a:	3302      	adds	r3, #2
 8012d5c:	7011      	strb	r1, [r2, #0]
 8012d5e:	e7c1      	b.n	8012ce4 <_printf_common+0x4c>
 8012d60:	0022      	movs	r2, r4
 8012d62:	2301      	movs	r3, #1
 8012d64:	9901      	ldr	r1, [sp, #4]
 8012d66:	9800      	ldr	r0, [sp, #0]
 8012d68:	9f08      	ldr	r7, [sp, #32]
 8012d6a:	321a      	adds	r2, #26
 8012d6c:	47b8      	blx	r7
 8012d6e:	3001      	adds	r0, #1
 8012d70:	d0e6      	beq.n	8012d40 <_printf_common+0xa8>
 8012d72:	3601      	adds	r6, #1
 8012d74:	e7d1      	b.n	8012d1a <_printf_common+0x82>
	...

08012d78 <_printf_i>:
 8012d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d7a:	b08b      	sub	sp, #44	@ 0x2c
 8012d7c:	9206      	str	r2, [sp, #24]
 8012d7e:	000a      	movs	r2, r1
 8012d80:	3243      	adds	r2, #67	@ 0x43
 8012d82:	9307      	str	r3, [sp, #28]
 8012d84:	9005      	str	r0, [sp, #20]
 8012d86:	9203      	str	r2, [sp, #12]
 8012d88:	7e0a      	ldrb	r2, [r1, #24]
 8012d8a:	000c      	movs	r4, r1
 8012d8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d8e:	2a78      	cmp	r2, #120	@ 0x78
 8012d90:	d809      	bhi.n	8012da6 <_printf_i+0x2e>
 8012d92:	2a62      	cmp	r2, #98	@ 0x62
 8012d94:	d80b      	bhi.n	8012dae <_printf_i+0x36>
 8012d96:	2a00      	cmp	r2, #0
 8012d98:	d100      	bne.n	8012d9c <_printf_i+0x24>
 8012d9a:	e0ba      	b.n	8012f12 <_printf_i+0x19a>
 8012d9c:	497a      	ldr	r1, [pc, #488]	@ (8012f88 <_printf_i+0x210>)
 8012d9e:	9104      	str	r1, [sp, #16]
 8012da0:	2a58      	cmp	r2, #88	@ 0x58
 8012da2:	d100      	bne.n	8012da6 <_printf_i+0x2e>
 8012da4:	e08e      	b.n	8012ec4 <_printf_i+0x14c>
 8012da6:	0025      	movs	r5, r4
 8012da8:	3542      	adds	r5, #66	@ 0x42
 8012daa:	702a      	strb	r2, [r5, #0]
 8012dac:	e022      	b.n	8012df4 <_printf_i+0x7c>
 8012dae:	0010      	movs	r0, r2
 8012db0:	3863      	subs	r0, #99	@ 0x63
 8012db2:	2815      	cmp	r0, #21
 8012db4:	d8f7      	bhi.n	8012da6 <_printf_i+0x2e>
 8012db6:	f7ed f9b9 	bl	800012c <__gnu_thumb1_case_shi>
 8012dba:	0016      	.short	0x0016
 8012dbc:	fff6001f 	.word	0xfff6001f
 8012dc0:	fff6fff6 	.word	0xfff6fff6
 8012dc4:	001ffff6 	.word	0x001ffff6
 8012dc8:	fff6fff6 	.word	0xfff6fff6
 8012dcc:	fff6fff6 	.word	0xfff6fff6
 8012dd0:	0036009f 	.word	0x0036009f
 8012dd4:	fff6007e 	.word	0xfff6007e
 8012dd8:	00b0fff6 	.word	0x00b0fff6
 8012ddc:	0036fff6 	.word	0x0036fff6
 8012de0:	fff6fff6 	.word	0xfff6fff6
 8012de4:	0082      	.short	0x0082
 8012de6:	0025      	movs	r5, r4
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	3542      	adds	r5, #66	@ 0x42
 8012dec:	1d11      	adds	r1, r2, #4
 8012dee:	6019      	str	r1, [r3, #0]
 8012df0:	6813      	ldr	r3, [r2, #0]
 8012df2:	702b      	strb	r3, [r5, #0]
 8012df4:	2301      	movs	r3, #1
 8012df6:	e09e      	b.n	8012f36 <_printf_i+0x1be>
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	6809      	ldr	r1, [r1, #0]
 8012dfc:	1d02      	adds	r2, r0, #4
 8012dfe:	060d      	lsls	r5, r1, #24
 8012e00:	d50b      	bpl.n	8012e1a <_printf_i+0xa2>
 8012e02:	6806      	ldr	r6, [r0, #0]
 8012e04:	601a      	str	r2, [r3, #0]
 8012e06:	2e00      	cmp	r6, #0
 8012e08:	da03      	bge.n	8012e12 <_printf_i+0x9a>
 8012e0a:	232d      	movs	r3, #45	@ 0x2d
 8012e0c:	9a03      	ldr	r2, [sp, #12]
 8012e0e:	4276      	negs	r6, r6
 8012e10:	7013      	strb	r3, [r2, #0]
 8012e12:	4b5d      	ldr	r3, [pc, #372]	@ (8012f88 <_printf_i+0x210>)
 8012e14:	270a      	movs	r7, #10
 8012e16:	9304      	str	r3, [sp, #16]
 8012e18:	e018      	b.n	8012e4c <_printf_i+0xd4>
 8012e1a:	6806      	ldr	r6, [r0, #0]
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	0649      	lsls	r1, r1, #25
 8012e20:	d5f1      	bpl.n	8012e06 <_printf_i+0x8e>
 8012e22:	b236      	sxth	r6, r6
 8012e24:	e7ef      	b.n	8012e06 <_printf_i+0x8e>
 8012e26:	6808      	ldr	r0, [r1, #0]
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	c940      	ldmia	r1!, {r6}
 8012e2c:	0605      	lsls	r5, r0, #24
 8012e2e:	d402      	bmi.n	8012e36 <_printf_i+0xbe>
 8012e30:	0640      	lsls	r0, r0, #25
 8012e32:	d500      	bpl.n	8012e36 <_printf_i+0xbe>
 8012e34:	b2b6      	uxth	r6, r6
 8012e36:	6019      	str	r1, [r3, #0]
 8012e38:	4b53      	ldr	r3, [pc, #332]	@ (8012f88 <_printf_i+0x210>)
 8012e3a:	270a      	movs	r7, #10
 8012e3c:	9304      	str	r3, [sp, #16]
 8012e3e:	2a6f      	cmp	r2, #111	@ 0x6f
 8012e40:	d100      	bne.n	8012e44 <_printf_i+0xcc>
 8012e42:	3f02      	subs	r7, #2
 8012e44:	0023      	movs	r3, r4
 8012e46:	2200      	movs	r2, #0
 8012e48:	3343      	adds	r3, #67	@ 0x43
 8012e4a:	701a      	strb	r2, [r3, #0]
 8012e4c:	6863      	ldr	r3, [r4, #4]
 8012e4e:	60a3      	str	r3, [r4, #8]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	db06      	blt.n	8012e62 <_printf_i+0xea>
 8012e54:	2104      	movs	r1, #4
 8012e56:	6822      	ldr	r2, [r4, #0]
 8012e58:	9d03      	ldr	r5, [sp, #12]
 8012e5a:	438a      	bics	r2, r1
 8012e5c:	6022      	str	r2, [r4, #0]
 8012e5e:	4333      	orrs	r3, r6
 8012e60:	d00c      	beq.n	8012e7c <_printf_i+0x104>
 8012e62:	9d03      	ldr	r5, [sp, #12]
 8012e64:	0030      	movs	r0, r6
 8012e66:	0039      	movs	r1, r7
 8012e68:	f7ed f9f0 	bl	800024c <__aeabi_uidivmod>
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	3d01      	subs	r5, #1
 8012e70:	5c5b      	ldrb	r3, [r3, r1]
 8012e72:	702b      	strb	r3, [r5, #0]
 8012e74:	0033      	movs	r3, r6
 8012e76:	0006      	movs	r6, r0
 8012e78:	429f      	cmp	r7, r3
 8012e7a:	d9f3      	bls.n	8012e64 <_printf_i+0xec>
 8012e7c:	2f08      	cmp	r7, #8
 8012e7e:	d109      	bne.n	8012e94 <_printf_i+0x11c>
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	07db      	lsls	r3, r3, #31
 8012e84:	d506      	bpl.n	8012e94 <_printf_i+0x11c>
 8012e86:	6862      	ldr	r2, [r4, #4]
 8012e88:	6923      	ldr	r3, [r4, #16]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	dc02      	bgt.n	8012e94 <_printf_i+0x11c>
 8012e8e:	2330      	movs	r3, #48	@ 0x30
 8012e90:	3d01      	subs	r5, #1
 8012e92:	702b      	strb	r3, [r5, #0]
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	1b5b      	subs	r3, r3, r5
 8012e98:	6123      	str	r3, [r4, #16]
 8012e9a:	9b07      	ldr	r3, [sp, #28]
 8012e9c:	0021      	movs	r1, r4
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	9805      	ldr	r0, [sp, #20]
 8012ea2:	9b06      	ldr	r3, [sp, #24]
 8012ea4:	aa09      	add	r2, sp, #36	@ 0x24
 8012ea6:	f7ff fef7 	bl	8012c98 <_printf_common>
 8012eaa:	3001      	adds	r0, #1
 8012eac:	d148      	bne.n	8012f40 <_printf_i+0x1c8>
 8012eae:	2001      	movs	r0, #1
 8012eb0:	4240      	negs	r0, r0
 8012eb2:	b00b      	add	sp, #44	@ 0x2c
 8012eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb6:	2220      	movs	r2, #32
 8012eb8:	6809      	ldr	r1, [r1, #0]
 8012eba:	430a      	orrs	r2, r1
 8012ebc:	6022      	str	r2, [r4, #0]
 8012ebe:	2278      	movs	r2, #120	@ 0x78
 8012ec0:	4932      	ldr	r1, [pc, #200]	@ (8012f8c <_printf_i+0x214>)
 8012ec2:	9104      	str	r1, [sp, #16]
 8012ec4:	0021      	movs	r1, r4
 8012ec6:	3145      	adds	r1, #69	@ 0x45
 8012ec8:	700a      	strb	r2, [r1, #0]
 8012eca:	6819      	ldr	r1, [r3, #0]
 8012ecc:	6822      	ldr	r2, [r4, #0]
 8012ece:	c940      	ldmia	r1!, {r6}
 8012ed0:	0610      	lsls	r0, r2, #24
 8012ed2:	d402      	bmi.n	8012eda <_printf_i+0x162>
 8012ed4:	0650      	lsls	r0, r2, #25
 8012ed6:	d500      	bpl.n	8012eda <_printf_i+0x162>
 8012ed8:	b2b6      	uxth	r6, r6
 8012eda:	6019      	str	r1, [r3, #0]
 8012edc:	07d3      	lsls	r3, r2, #31
 8012ede:	d502      	bpl.n	8012ee6 <_printf_i+0x16e>
 8012ee0:	2320      	movs	r3, #32
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	2e00      	cmp	r6, #0
 8012ee8:	d001      	beq.n	8012eee <_printf_i+0x176>
 8012eea:	2710      	movs	r7, #16
 8012eec:	e7aa      	b.n	8012e44 <_printf_i+0xcc>
 8012eee:	2220      	movs	r2, #32
 8012ef0:	6823      	ldr	r3, [r4, #0]
 8012ef2:	4393      	bics	r3, r2
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	e7f8      	b.n	8012eea <_printf_i+0x172>
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	680d      	ldr	r5, [r1, #0]
 8012efc:	1d10      	adds	r0, r2, #4
 8012efe:	6949      	ldr	r1, [r1, #20]
 8012f00:	6018      	str	r0, [r3, #0]
 8012f02:	6813      	ldr	r3, [r2, #0]
 8012f04:	062e      	lsls	r6, r5, #24
 8012f06:	d501      	bpl.n	8012f0c <_printf_i+0x194>
 8012f08:	6019      	str	r1, [r3, #0]
 8012f0a:	e002      	b.n	8012f12 <_printf_i+0x19a>
 8012f0c:	066d      	lsls	r5, r5, #25
 8012f0e:	d5fb      	bpl.n	8012f08 <_printf_i+0x190>
 8012f10:	8019      	strh	r1, [r3, #0]
 8012f12:	2300      	movs	r3, #0
 8012f14:	9d03      	ldr	r5, [sp, #12]
 8012f16:	6123      	str	r3, [r4, #16]
 8012f18:	e7bf      	b.n	8012e9a <_printf_i+0x122>
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	1d11      	adds	r1, r2, #4
 8012f1e:	6019      	str	r1, [r3, #0]
 8012f20:	6815      	ldr	r5, [r2, #0]
 8012f22:	2100      	movs	r1, #0
 8012f24:	0028      	movs	r0, r5
 8012f26:	6862      	ldr	r2, [r4, #4]
 8012f28:	f000 f9d7 	bl	80132da <memchr>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d001      	beq.n	8012f34 <_printf_i+0x1bc>
 8012f30:	1b40      	subs	r0, r0, r5
 8012f32:	6060      	str	r0, [r4, #4]
 8012f34:	6863      	ldr	r3, [r4, #4]
 8012f36:	6123      	str	r3, [r4, #16]
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9a03      	ldr	r2, [sp, #12]
 8012f3c:	7013      	strb	r3, [r2, #0]
 8012f3e:	e7ac      	b.n	8012e9a <_printf_i+0x122>
 8012f40:	002a      	movs	r2, r5
 8012f42:	6923      	ldr	r3, [r4, #16]
 8012f44:	9906      	ldr	r1, [sp, #24]
 8012f46:	9805      	ldr	r0, [sp, #20]
 8012f48:	9d07      	ldr	r5, [sp, #28]
 8012f4a:	47a8      	blx	r5
 8012f4c:	3001      	adds	r0, #1
 8012f4e:	d0ae      	beq.n	8012eae <_printf_i+0x136>
 8012f50:	6823      	ldr	r3, [r4, #0]
 8012f52:	079b      	lsls	r3, r3, #30
 8012f54:	d415      	bmi.n	8012f82 <_printf_i+0x20a>
 8012f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f58:	68e0      	ldr	r0, [r4, #12]
 8012f5a:	4298      	cmp	r0, r3
 8012f5c:	daa9      	bge.n	8012eb2 <_printf_i+0x13a>
 8012f5e:	0018      	movs	r0, r3
 8012f60:	e7a7      	b.n	8012eb2 <_printf_i+0x13a>
 8012f62:	0022      	movs	r2, r4
 8012f64:	2301      	movs	r3, #1
 8012f66:	9906      	ldr	r1, [sp, #24]
 8012f68:	9805      	ldr	r0, [sp, #20]
 8012f6a:	9e07      	ldr	r6, [sp, #28]
 8012f6c:	3219      	adds	r2, #25
 8012f6e:	47b0      	blx	r6
 8012f70:	3001      	adds	r0, #1
 8012f72:	d09c      	beq.n	8012eae <_printf_i+0x136>
 8012f74:	3501      	adds	r5, #1
 8012f76:	68e3      	ldr	r3, [r4, #12]
 8012f78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f7a:	1a9b      	subs	r3, r3, r2
 8012f7c:	42ab      	cmp	r3, r5
 8012f7e:	dcf0      	bgt.n	8012f62 <_printf_i+0x1ea>
 8012f80:	e7e9      	b.n	8012f56 <_printf_i+0x1de>
 8012f82:	2500      	movs	r5, #0
 8012f84:	e7f7      	b.n	8012f76 <_printf_i+0x1fe>
 8012f86:	46c0      	nop			@ (mov r8, r8)
 8012f88:	08018994 	.word	0x08018994
 8012f8c:	080189a5 	.word	0x080189a5

08012f90 <std>:
 8012f90:	2300      	movs	r3, #0
 8012f92:	b510      	push	{r4, lr}
 8012f94:	0004      	movs	r4, r0
 8012f96:	6003      	str	r3, [r0, #0]
 8012f98:	6043      	str	r3, [r0, #4]
 8012f9a:	6083      	str	r3, [r0, #8]
 8012f9c:	8181      	strh	r1, [r0, #12]
 8012f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012fa0:	81c2      	strh	r2, [r0, #14]
 8012fa2:	6103      	str	r3, [r0, #16]
 8012fa4:	6143      	str	r3, [r0, #20]
 8012fa6:	6183      	str	r3, [r0, #24]
 8012fa8:	0019      	movs	r1, r3
 8012faa:	2208      	movs	r2, #8
 8012fac:	305c      	adds	r0, #92	@ 0x5c
 8012fae:	f000 f90d 	bl	80131cc <memset>
 8012fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8012fe0 <std+0x50>)
 8012fb4:	6224      	str	r4, [r4, #32]
 8012fb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8012fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe4 <std+0x54>)
 8012fba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe8 <std+0x58>)
 8012fbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8012fec <std+0x5c>)
 8012fc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8012fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8012ff0 <std+0x60>)
 8012fc6:	429c      	cmp	r4, r3
 8012fc8:	d005      	beq.n	8012fd6 <std+0x46>
 8012fca:	4b0a      	ldr	r3, [pc, #40]	@ (8012ff4 <std+0x64>)
 8012fcc:	429c      	cmp	r4, r3
 8012fce:	d002      	beq.n	8012fd6 <std+0x46>
 8012fd0:	4b09      	ldr	r3, [pc, #36]	@ (8012ff8 <std+0x68>)
 8012fd2:	429c      	cmp	r4, r3
 8012fd4:	d103      	bne.n	8012fde <std+0x4e>
 8012fd6:	0020      	movs	r0, r4
 8012fd8:	3058      	adds	r0, #88	@ 0x58
 8012fda:	f000 f97b 	bl	80132d4 <__retarget_lock_init_recursive>
 8012fde:	bd10      	pop	{r4, pc}
 8012fe0:	08013119 	.word	0x08013119
 8012fe4:	08013141 	.word	0x08013141
 8012fe8:	08013179 	.word	0x08013179
 8012fec:	080131a5 	.word	0x080131a5
 8012ff0:	20001d54 	.word	0x20001d54
 8012ff4:	20001dbc 	.word	0x20001dbc
 8012ff8:	20001e24 	.word	0x20001e24

08012ffc <stdio_exit_handler>:
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	4a03      	ldr	r2, [pc, #12]	@ (801300c <stdio_exit_handler+0x10>)
 8013000:	4903      	ldr	r1, [pc, #12]	@ (8013010 <stdio_exit_handler+0x14>)
 8013002:	4804      	ldr	r0, [pc, #16]	@ (8013014 <stdio_exit_handler+0x18>)
 8013004:	f000 f86c 	bl	80130e0 <_fwalk_sglue>
 8013008:	bd10      	pop	{r4, pc}
 801300a:	46c0      	nop			@ (mov r8, r8)
 801300c:	20000208 	.word	0x20000208
 8013010:	08014a3d 	.word	0x08014a3d
 8013014:	20000218 	.word	0x20000218

08013018 <cleanup_stdio>:
 8013018:	6841      	ldr	r1, [r0, #4]
 801301a:	4b0b      	ldr	r3, [pc, #44]	@ (8013048 <cleanup_stdio+0x30>)
 801301c:	b510      	push	{r4, lr}
 801301e:	0004      	movs	r4, r0
 8013020:	4299      	cmp	r1, r3
 8013022:	d001      	beq.n	8013028 <cleanup_stdio+0x10>
 8013024:	f001 fd0a 	bl	8014a3c <_fflush_r>
 8013028:	68a1      	ldr	r1, [r4, #8]
 801302a:	4b08      	ldr	r3, [pc, #32]	@ (801304c <cleanup_stdio+0x34>)
 801302c:	4299      	cmp	r1, r3
 801302e:	d002      	beq.n	8013036 <cleanup_stdio+0x1e>
 8013030:	0020      	movs	r0, r4
 8013032:	f001 fd03 	bl	8014a3c <_fflush_r>
 8013036:	68e1      	ldr	r1, [r4, #12]
 8013038:	4b05      	ldr	r3, [pc, #20]	@ (8013050 <cleanup_stdio+0x38>)
 801303a:	4299      	cmp	r1, r3
 801303c:	d002      	beq.n	8013044 <cleanup_stdio+0x2c>
 801303e:	0020      	movs	r0, r4
 8013040:	f001 fcfc 	bl	8014a3c <_fflush_r>
 8013044:	bd10      	pop	{r4, pc}
 8013046:	46c0      	nop			@ (mov r8, r8)
 8013048:	20001d54 	.word	0x20001d54
 801304c:	20001dbc 	.word	0x20001dbc
 8013050:	20001e24 	.word	0x20001e24

08013054 <global_stdio_init.part.0>:
 8013054:	b510      	push	{r4, lr}
 8013056:	4b09      	ldr	r3, [pc, #36]	@ (801307c <global_stdio_init.part.0+0x28>)
 8013058:	4a09      	ldr	r2, [pc, #36]	@ (8013080 <global_stdio_init.part.0+0x2c>)
 801305a:	2104      	movs	r1, #4
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	4809      	ldr	r0, [pc, #36]	@ (8013084 <global_stdio_init.part.0+0x30>)
 8013060:	2200      	movs	r2, #0
 8013062:	f7ff ff95 	bl	8012f90 <std>
 8013066:	2201      	movs	r2, #1
 8013068:	2109      	movs	r1, #9
 801306a:	4807      	ldr	r0, [pc, #28]	@ (8013088 <global_stdio_init.part.0+0x34>)
 801306c:	f7ff ff90 	bl	8012f90 <std>
 8013070:	2202      	movs	r2, #2
 8013072:	2112      	movs	r1, #18
 8013074:	4805      	ldr	r0, [pc, #20]	@ (801308c <global_stdio_init.part.0+0x38>)
 8013076:	f7ff ff8b 	bl	8012f90 <std>
 801307a:	bd10      	pop	{r4, pc}
 801307c:	20001e8c 	.word	0x20001e8c
 8013080:	08012ffd 	.word	0x08012ffd
 8013084:	20001d54 	.word	0x20001d54
 8013088:	20001dbc 	.word	0x20001dbc
 801308c:	20001e24 	.word	0x20001e24

08013090 <__sfp_lock_acquire>:
 8013090:	b510      	push	{r4, lr}
 8013092:	4802      	ldr	r0, [pc, #8]	@ (801309c <__sfp_lock_acquire+0xc>)
 8013094:	f000 f91f 	bl	80132d6 <__retarget_lock_acquire_recursive>
 8013098:	bd10      	pop	{r4, pc}
 801309a:	46c0      	nop			@ (mov r8, r8)
 801309c:	20001e95 	.word	0x20001e95

080130a0 <__sfp_lock_release>:
 80130a0:	b510      	push	{r4, lr}
 80130a2:	4802      	ldr	r0, [pc, #8]	@ (80130ac <__sfp_lock_release+0xc>)
 80130a4:	f000 f918 	bl	80132d8 <__retarget_lock_release_recursive>
 80130a8:	bd10      	pop	{r4, pc}
 80130aa:	46c0      	nop			@ (mov r8, r8)
 80130ac:	20001e95 	.word	0x20001e95

080130b0 <__sinit>:
 80130b0:	b510      	push	{r4, lr}
 80130b2:	0004      	movs	r4, r0
 80130b4:	f7ff ffec 	bl	8013090 <__sfp_lock_acquire>
 80130b8:	6a23      	ldr	r3, [r4, #32]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d002      	beq.n	80130c4 <__sinit+0x14>
 80130be:	f7ff ffef 	bl	80130a0 <__sfp_lock_release>
 80130c2:	bd10      	pop	{r4, pc}
 80130c4:	4b04      	ldr	r3, [pc, #16]	@ (80130d8 <__sinit+0x28>)
 80130c6:	6223      	str	r3, [r4, #32]
 80130c8:	4b04      	ldr	r3, [pc, #16]	@ (80130dc <__sinit+0x2c>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d1f6      	bne.n	80130be <__sinit+0xe>
 80130d0:	f7ff ffc0 	bl	8013054 <global_stdio_init.part.0>
 80130d4:	e7f3      	b.n	80130be <__sinit+0xe>
 80130d6:	46c0      	nop			@ (mov r8, r8)
 80130d8:	08013019 	.word	0x08013019
 80130dc:	20001e8c 	.word	0x20001e8c

080130e0 <_fwalk_sglue>:
 80130e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130e2:	0014      	movs	r4, r2
 80130e4:	2600      	movs	r6, #0
 80130e6:	9000      	str	r0, [sp, #0]
 80130e8:	9101      	str	r1, [sp, #4]
 80130ea:	68a5      	ldr	r5, [r4, #8]
 80130ec:	6867      	ldr	r7, [r4, #4]
 80130ee:	3f01      	subs	r7, #1
 80130f0:	d504      	bpl.n	80130fc <_fwalk_sglue+0x1c>
 80130f2:	6824      	ldr	r4, [r4, #0]
 80130f4:	2c00      	cmp	r4, #0
 80130f6:	d1f8      	bne.n	80130ea <_fwalk_sglue+0xa>
 80130f8:	0030      	movs	r0, r6
 80130fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80130fc:	89ab      	ldrh	r3, [r5, #12]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d908      	bls.n	8013114 <_fwalk_sglue+0x34>
 8013102:	220e      	movs	r2, #14
 8013104:	5eab      	ldrsh	r3, [r5, r2]
 8013106:	3301      	adds	r3, #1
 8013108:	d004      	beq.n	8013114 <_fwalk_sglue+0x34>
 801310a:	0029      	movs	r1, r5
 801310c:	9800      	ldr	r0, [sp, #0]
 801310e:	9b01      	ldr	r3, [sp, #4]
 8013110:	4798      	blx	r3
 8013112:	4306      	orrs	r6, r0
 8013114:	3568      	adds	r5, #104	@ 0x68
 8013116:	e7ea      	b.n	80130ee <_fwalk_sglue+0xe>

08013118 <__sread>:
 8013118:	b570      	push	{r4, r5, r6, lr}
 801311a:	000c      	movs	r4, r1
 801311c:	250e      	movs	r5, #14
 801311e:	5f49      	ldrsh	r1, [r1, r5]
 8013120:	f000 f886 	bl	8013230 <_read_r>
 8013124:	2800      	cmp	r0, #0
 8013126:	db03      	blt.n	8013130 <__sread+0x18>
 8013128:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801312a:	181b      	adds	r3, r3, r0
 801312c:	6563      	str	r3, [r4, #84]	@ 0x54
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	4a02      	ldr	r2, [pc, #8]	@ (801313c <__sread+0x24>)
 8013134:	4013      	ands	r3, r2
 8013136:	81a3      	strh	r3, [r4, #12]
 8013138:	e7f9      	b.n	801312e <__sread+0x16>
 801313a:	46c0      	nop			@ (mov r8, r8)
 801313c:	ffffefff 	.word	0xffffefff

08013140 <__swrite>:
 8013140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013142:	001f      	movs	r7, r3
 8013144:	898b      	ldrh	r3, [r1, #12]
 8013146:	0005      	movs	r5, r0
 8013148:	000c      	movs	r4, r1
 801314a:	0016      	movs	r6, r2
 801314c:	05db      	lsls	r3, r3, #23
 801314e:	d505      	bpl.n	801315c <__swrite+0x1c>
 8013150:	230e      	movs	r3, #14
 8013152:	5ec9      	ldrsh	r1, [r1, r3]
 8013154:	2200      	movs	r2, #0
 8013156:	2302      	movs	r3, #2
 8013158:	f000 f856 	bl	8013208 <_lseek_r>
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	4a05      	ldr	r2, [pc, #20]	@ (8013174 <__swrite+0x34>)
 8013160:	0028      	movs	r0, r5
 8013162:	4013      	ands	r3, r2
 8013164:	81a3      	strh	r3, [r4, #12]
 8013166:	0032      	movs	r2, r6
 8013168:	230e      	movs	r3, #14
 801316a:	5ee1      	ldrsh	r1, [r4, r3]
 801316c:	003b      	movs	r3, r7
 801316e:	f000 f873 	bl	8013258 <_write_r>
 8013172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013174:	ffffefff 	.word	0xffffefff

08013178 <__sseek>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	000c      	movs	r4, r1
 801317c:	250e      	movs	r5, #14
 801317e:	5f49      	ldrsh	r1, [r1, r5]
 8013180:	f000 f842 	bl	8013208 <_lseek_r>
 8013184:	89a3      	ldrh	r3, [r4, #12]
 8013186:	1c42      	adds	r2, r0, #1
 8013188:	d103      	bne.n	8013192 <__sseek+0x1a>
 801318a:	4a05      	ldr	r2, [pc, #20]	@ (80131a0 <__sseek+0x28>)
 801318c:	4013      	ands	r3, r2
 801318e:	81a3      	strh	r3, [r4, #12]
 8013190:	bd70      	pop	{r4, r5, r6, pc}
 8013192:	2280      	movs	r2, #128	@ 0x80
 8013194:	0152      	lsls	r2, r2, #5
 8013196:	4313      	orrs	r3, r2
 8013198:	81a3      	strh	r3, [r4, #12]
 801319a:	6560      	str	r0, [r4, #84]	@ 0x54
 801319c:	e7f8      	b.n	8013190 <__sseek+0x18>
 801319e:	46c0      	nop			@ (mov r8, r8)
 80131a0:	ffffefff 	.word	0xffffefff

080131a4 <__sclose>:
 80131a4:	b510      	push	{r4, lr}
 80131a6:	230e      	movs	r3, #14
 80131a8:	5ec9      	ldrsh	r1, [r1, r3]
 80131aa:	f000 f81b 	bl	80131e4 <_close_r>
 80131ae:	bd10      	pop	{r4, pc}

080131b0 <memcmp>:
 80131b0:	b530      	push	{r4, r5, lr}
 80131b2:	2400      	movs	r4, #0
 80131b4:	3901      	subs	r1, #1
 80131b6:	42a2      	cmp	r2, r4
 80131b8:	d101      	bne.n	80131be <memcmp+0xe>
 80131ba:	2000      	movs	r0, #0
 80131bc:	e005      	b.n	80131ca <memcmp+0x1a>
 80131be:	5d03      	ldrb	r3, [r0, r4]
 80131c0:	3401      	adds	r4, #1
 80131c2:	5d0d      	ldrb	r5, [r1, r4]
 80131c4:	42ab      	cmp	r3, r5
 80131c6:	d0f6      	beq.n	80131b6 <memcmp+0x6>
 80131c8:	1b58      	subs	r0, r3, r5
 80131ca:	bd30      	pop	{r4, r5, pc}

080131cc <memset>:
 80131cc:	0003      	movs	r3, r0
 80131ce:	1882      	adds	r2, r0, r2
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d100      	bne.n	80131d6 <memset+0xa>
 80131d4:	4770      	bx	lr
 80131d6:	7019      	strb	r1, [r3, #0]
 80131d8:	3301      	adds	r3, #1
 80131da:	e7f9      	b.n	80131d0 <memset+0x4>

080131dc <_localeconv_r>:
 80131dc:	4800      	ldr	r0, [pc, #0]	@ (80131e0 <_localeconv_r+0x4>)
 80131de:	4770      	bx	lr
 80131e0:	20000354 	.word	0x20000354

080131e4 <_close_r>:
 80131e4:	2300      	movs	r3, #0
 80131e6:	b570      	push	{r4, r5, r6, lr}
 80131e8:	4d06      	ldr	r5, [pc, #24]	@ (8013204 <_close_r+0x20>)
 80131ea:	0004      	movs	r4, r0
 80131ec:	0008      	movs	r0, r1
 80131ee:	602b      	str	r3, [r5, #0]
 80131f0:	f7ef ffd4 	bl	800319c <_close>
 80131f4:	1c43      	adds	r3, r0, #1
 80131f6:	d103      	bne.n	8013200 <_close_r+0x1c>
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d000      	beq.n	8013200 <_close_r+0x1c>
 80131fe:	6023      	str	r3, [r4, #0]
 8013200:	bd70      	pop	{r4, r5, r6, pc}
 8013202:	46c0      	nop			@ (mov r8, r8)
 8013204:	20001e90 	.word	0x20001e90

08013208 <_lseek_r>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	0004      	movs	r4, r0
 801320c:	0008      	movs	r0, r1
 801320e:	0011      	movs	r1, r2
 8013210:	001a      	movs	r2, r3
 8013212:	2300      	movs	r3, #0
 8013214:	4d05      	ldr	r5, [pc, #20]	@ (801322c <_lseek_r+0x24>)
 8013216:	602b      	str	r3, [r5, #0]
 8013218:	f7ef ffe1 	bl	80031de <_lseek>
 801321c:	1c43      	adds	r3, r0, #1
 801321e:	d103      	bne.n	8013228 <_lseek_r+0x20>
 8013220:	682b      	ldr	r3, [r5, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d000      	beq.n	8013228 <_lseek_r+0x20>
 8013226:	6023      	str	r3, [r4, #0]
 8013228:	bd70      	pop	{r4, r5, r6, pc}
 801322a:	46c0      	nop			@ (mov r8, r8)
 801322c:	20001e90 	.word	0x20001e90

08013230 <_read_r>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	0004      	movs	r4, r0
 8013234:	0008      	movs	r0, r1
 8013236:	0011      	movs	r1, r2
 8013238:	001a      	movs	r2, r3
 801323a:	2300      	movs	r3, #0
 801323c:	4d05      	ldr	r5, [pc, #20]	@ (8013254 <_read_r+0x24>)
 801323e:	602b      	str	r3, [r5, #0]
 8013240:	f7ef ff73 	bl	800312a <_read>
 8013244:	1c43      	adds	r3, r0, #1
 8013246:	d103      	bne.n	8013250 <_read_r+0x20>
 8013248:	682b      	ldr	r3, [r5, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d000      	beq.n	8013250 <_read_r+0x20>
 801324e:	6023      	str	r3, [r4, #0]
 8013250:	bd70      	pop	{r4, r5, r6, pc}
 8013252:	46c0      	nop			@ (mov r8, r8)
 8013254:	20001e90 	.word	0x20001e90

08013258 <_write_r>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	0004      	movs	r4, r0
 801325c:	0008      	movs	r0, r1
 801325e:	0011      	movs	r1, r2
 8013260:	001a      	movs	r2, r3
 8013262:	2300      	movs	r3, #0
 8013264:	4d05      	ldr	r5, [pc, #20]	@ (801327c <_write_r+0x24>)
 8013266:	602b      	str	r3, [r5, #0]
 8013268:	f7ef ff7c 	bl	8003164 <_write>
 801326c:	1c43      	adds	r3, r0, #1
 801326e:	d103      	bne.n	8013278 <_write_r+0x20>
 8013270:	682b      	ldr	r3, [r5, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d000      	beq.n	8013278 <_write_r+0x20>
 8013276:	6023      	str	r3, [r4, #0]
 8013278:	bd70      	pop	{r4, r5, r6, pc}
 801327a:	46c0      	nop			@ (mov r8, r8)
 801327c:	20001e90 	.word	0x20001e90

08013280 <__errno>:
 8013280:	4b01      	ldr	r3, [pc, #4]	@ (8013288 <__errno+0x8>)
 8013282:	6818      	ldr	r0, [r3, #0]
 8013284:	4770      	bx	lr
 8013286:	46c0      	nop			@ (mov r8, r8)
 8013288:	20000214 	.word	0x20000214

0801328c <__libc_init_array>:
 801328c:	b570      	push	{r4, r5, r6, lr}
 801328e:	2600      	movs	r6, #0
 8013290:	4c0c      	ldr	r4, [pc, #48]	@ (80132c4 <__libc_init_array+0x38>)
 8013292:	4d0d      	ldr	r5, [pc, #52]	@ (80132c8 <__libc_init_array+0x3c>)
 8013294:	1b64      	subs	r4, r4, r5
 8013296:	10a4      	asrs	r4, r4, #2
 8013298:	42a6      	cmp	r6, r4
 801329a:	d109      	bne.n	80132b0 <__libc_init_array+0x24>
 801329c:	2600      	movs	r6, #0
 801329e:	f001 ff49 	bl	8015134 <_init>
 80132a2:	4c0a      	ldr	r4, [pc, #40]	@ (80132cc <__libc_init_array+0x40>)
 80132a4:	4d0a      	ldr	r5, [pc, #40]	@ (80132d0 <__libc_init_array+0x44>)
 80132a6:	1b64      	subs	r4, r4, r5
 80132a8:	10a4      	asrs	r4, r4, #2
 80132aa:	42a6      	cmp	r6, r4
 80132ac:	d105      	bne.n	80132ba <__libc_init_array+0x2e>
 80132ae:	bd70      	pop	{r4, r5, r6, pc}
 80132b0:	00b3      	lsls	r3, r6, #2
 80132b2:	58eb      	ldr	r3, [r5, r3]
 80132b4:	4798      	blx	r3
 80132b6:	3601      	adds	r6, #1
 80132b8:	e7ee      	b.n	8013298 <__libc_init_array+0xc>
 80132ba:	00b3      	lsls	r3, r6, #2
 80132bc:	58eb      	ldr	r3, [r5, r3]
 80132be:	4798      	blx	r3
 80132c0:	3601      	adds	r6, #1
 80132c2:	e7f2      	b.n	80132aa <__libc_init_array+0x1e>
 80132c4:	08018cf4 	.word	0x08018cf4
 80132c8:	08018cf4 	.word	0x08018cf4
 80132cc:	08018cf8 	.word	0x08018cf8
 80132d0:	08018cf4 	.word	0x08018cf4

080132d4 <__retarget_lock_init_recursive>:
 80132d4:	4770      	bx	lr

080132d6 <__retarget_lock_acquire_recursive>:
 80132d6:	4770      	bx	lr

080132d8 <__retarget_lock_release_recursive>:
 80132d8:	4770      	bx	lr

080132da <memchr>:
 80132da:	b2c9      	uxtb	r1, r1
 80132dc:	1882      	adds	r2, r0, r2
 80132de:	4290      	cmp	r0, r2
 80132e0:	d101      	bne.n	80132e6 <memchr+0xc>
 80132e2:	2000      	movs	r0, #0
 80132e4:	4770      	bx	lr
 80132e6:	7803      	ldrb	r3, [r0, #0]
 80132e8:	428b      	cmp	r3, r1
 80132ea:	d0fb      	beq.n	80132e4 <memchr+0xa>
 80132ec:	3001      	adds	r0, #1
 80132ee:	e7f6      	b.n	80132de <memchr+0x4>

080132f0 <memcpy>:
 80132f0:	2300      	movs	r3, #0
 80132f2:	b510      	push	{r4, lr}
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d100      	bne.n	80132fa <memcpy+0xa>
 80132f8:	bd10      	pop	{r4, pc}
 80132fa:	5ccc      	ldrb	r4, [r1, r3]
 80132fc:	54c4      	strb	r4, [r0, r3]
 80132fe:	3301      	adds	r3, #1
 8013300:	e7f8      	b.n	80132f4 <memcpy+0x4>

08013302 <quorem>:
 8013302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013304:	6903      	ldr	r3, [r0, #16]
 8013306:	690c      	ldr	r4, [r1, #16]
 8013308:	b089      	sub	sp, #36	@ 0x24
 801330a:	9003      	str	r0, [sp, #12]
 801330c:	9106      	str	r1, [sp, #24]
 801330e:	2000      	movs	r0, #0
 8013310:	42a3      	cmp	r3, r4
 8013312:	db63      	blt.n	80133dc <quorem+0xda>
 8013314:	000b      	movs	r3, r1
 8013316:	3c01      	subs	r4, #1
 8013318:	3314      	adds	r3, #20
 801331a:	00a5      	lsls	r5, r4, #2
 801331c:	9304      	str	r3, [sp, #16]
 801331e:	195b      	adds	r3, r3, r5
 8013320:	9305      	str	r3, [sp, #20]
 8013322:	9b03      	ldr	r3, [sp, #12]
 8013324:	3314      	adds	r3, #20
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	195d      	adds	r5, r3, r5
 801332a:	9b05      	ldr	r3, [sp, #20]
 801332c:	682f      	ldr	r7, [r5, #0]
 801332e:	681e      	ldr	r6, [r3, #0]
 8013330:	0038      	movs	r0, r7
 8013332:	3601      	adds	r6, #1
 8013334:	0031      	movs	r1, r6
 8013336:	f7ec ff03 	bl	8000140 <__udivsi3>
 801333a:	9002      	str	r0, [sp, #8]
 801333c:	42b7      	cmp	r7, r6
 801333e:	d327      	bcc.n	8013390 <quorem+0x8e>
 8013340:	9b04      	ldr	r3, [sp, #16]
 8013342:	2700      	movs	r7, #0
 8013344:	469c      	mov	ip, r3
 8013346:	9e01      	ldr	r6, [sp, #4]
 8013348:	9707      	str	r7, [sp, #28]
 801334a:	4662      	mov	r2, ip
 801334c:	ca08      	ldmia	r2!, {r3}
 801334e:	6830      	ldr	r0, [r6, #0]
 8013350:	4694      	mov	ip, r2
 8013352:	9a02      	ldr	r2, [sp, #8]
 8013354:	b299      	uxth	r1, r3
 8013356:	4351      	muls	r1, r2
 8013358:	0c1b      	lsrs	r3, r3, #16
 801335a:	4353      	muls	r3, r2
 801335c:	19c9      	adds	r1, r1, r7
 801335e:	0c0a      	lsrs	r2, r1, #16
 8013360:	189b      	adds	r3, r3, r2
 8013362:	b289      	uxth	r1, r1
 8013364:	b282      	uxth	r2, r0
 8013366:	1a52      	subs	r2, r2, r1
 8013368:	9907      	ldr	r1, [sp, #28]
 801336a:	0c1f      	lsrs	r7, r3, #16
 801336c:	1852      	adds	r2, r2, r1
 801336e:	0c00      	lsrs	r0, r0, #16
 8013370:	b29b      	uxth	r3, r3
 8013372:	1411      	asrs	r1, r2, #16
 8013374:	1ac3      	subs	r3, r0, r3
 8013376:	185b      	adds	r3, r3, r1
 8013378:	1419      	asrs	r1, r3, #16
 801337a:	b292      	uxth	r2, r2
 801337c:	041b      	lsls	r3, r3, #16
 801337e:	431a      	orrs	r2, r3
 8013380:	9b05      	ldr	r3, [sp, #20]
 8013382:	9107      	str	r1, [sp, #28]
 8013384:	c604      	stmia	r6!, {r2}
 8013386:	4563      	cmp	r3, ip
 8013388:	d2df      	bcs.n	801334a <quorem+0x48>
 801338a:	682b      	ldr	r3, [r5, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d02b      	beq.n	80133e8 <quorem+0xe6>
 8013390:	9906      	ldr	r1, [sp, #24]
 8013392:	9803      	ldr	r0, [sp, #12]
 8013394:	f001 f9b6 	bl	8014704 <__mcmp>
 8013398:	2800      	cmp	r0, #0
 801339a:	db1e      	blt.n	80133da <quorem+0xd8>
 801339c:	2600      	movs	r6, #0
 801339e:	9d01      	ldr	r5, [sp, #4]
 80133a0:	9904      	ldr	r1, [sp, #16]
 80133a2:	c901      	ldmia	r1!, {r0}
 80133a4:	682b      	ldr	r3, [r5, #0]
 80133a6:	b287      	uxth	r7, r0
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	1bd2      	subs	r2, r2, r7
 80133ac:	1992      	adds	r2, r2, r6
 80133ae:	0c00      	lsrs	r0, r0, #16
 80133b0:	0c1b      	lsrs	r3, r3, #16
 80133b2:	1a1b      	subs	r3, r3, r0
 80133b4:	1410      	asrs	r0, r2, #16
 80133b6:	181b      	adds	r3, r3, r0
 80133b8:	141e      	asrs	r6, r3, #16
 80133ba:	b292      	uxth	r2, r2
 80133bc:	041b      	lsls	r3, r3, #16
 80133be:	431a      	orrs	r2, r3
 80133c0:	9b05      	ldr	r3, [sp, #20]
 80133c2:	c504      	stmia	r5!, {r2}
 80133c4:	428b      	cmp	r3, r1
 80133c6:	d2ec      	bcs.n	80133a2 <quorem+0xa0>
 80133c8:	9a01      	ldr	r2, [sp, #4]
 80133ca:	00a3      	lsls	r3, r4, #2
 80133cc:	18d3      	adds	r3, r2, r3
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	2a00      	cmp	r2, #0
 80133d2:	d014      	beq.n	80133fe <quorem+0xfc>
 80133d4:	9b02      	ldr	r3, [sp, #8]
 80133d6:	3301      	adds	r3, #1
 80133d8:	9302      	str	r3, [sp, #8]
 80133da:	9802      	ldr	r0, [sp, #8]
 80133dc:	b009      	add	sp, #36	@ 0x24
 80133de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133e0:	682b      	ldr	r3, [r5, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d104      	bne.n	80133f0 <quorem+0xee>
 80133e6:	3c01      	subs	r4, #1
 80133e8:	9b01      	ldr	r3, [sp, #4]
 80133ea:	3d04      	subs	r5, #4
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	d3f7      	bcc.n	80133e0 <quorem+0xde>
 80133f0:	9b03      	ldr	r3, [sp, #12]
 80133f2:	611c      	str	r4, [r3, #16]
 80133f4:	e7cc      	b.n	8013390 <quorem+0x8e>
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	2a00      	cmp	r2, #0
 80133fa:	d104      	bne.n	8013406 <quorem+0x104>
 80133fc:	3c01      	subs	r4, #1
 80133fe:	9a01      	ldr	r2, [sp, #4]
 8013400:	3b04      	subs	r3, #4
 8013402:	429a      	cmp	r2, r3
 8013404:	d3f7      	bcc.n	80133f6 <quorem+0xf4>
 8013406:	9b03      	ldr	r3, [sp, #12]
 8013408:	611c      	str	r4, [r3, #16]
 801340a:	e7e3      	b.n	80133d4 <quorem+0xd2>

0801340c <_dtoa_r>:
 801340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801340e:	0014      	movs	r4, r2
 8013410:	001d      	movs	r5, r3
 8013412:	69c6      	ldr	r6, [r0, #28]
 8013414:	b09d      	sub	sp, #116	@ 0x74
 8013416:	940a      	str	r4, [sp, #40]	@ 0x28
 8013418:	950b      	str	r5, [sp, #44]	@ 0x2c
 801341a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801341c:	9003      	str	r0, [sp, #12]
 801341e:	2e00      	cmp	r6, #0
 8013420:	d10f      	bne.n	8013442 <_dtoa_r+0x36>
 8013422:	2010      	movs	r0, #16
 8013424:	f000 fe2c 	bl	8014080 <malloc>
 8013428:	9b03      	ldr	r3, [sp, #12]
 801342a:	1e02      	subs	r2, r0, #0
 801342c:	61d8      	str	r0, [r3, #28]
 801342e:	d104      	bne.n	801343a <_dtoa_r+0x2e>
 8013430:	21ef      	movs	r1, #239	@ 0xef
 8013432:	4bc7      	ldr	r3, [pc, #796]	@ (8013750 <_dtoa_r+0x344>)
 8013434:	48c7      	ldr	r0, [pc, #796]	@ (8013754 <_dtoa_r+0x348>)
 8013436:	f001 fb3f 	bl	8014ab8 <__assert_func>
 801343a:	6046      	str	r6, [r0, #4]
 801343c:	6086      	str	r6, [r0, #8]
 801343e:	6006      	str	r6, [r0, #0]
 8013440:	60c6      	str	r6, [r0, #12]
 8013442:	9b03      	ldr	r3, [sp, #12]
 8013444:	69db      	ldr	r3, [r3, #28]
 8013446:	6819      	ldr	r1, [r3, #0]
 8013448:	2900      	cmp	r1, #0
 801344a:	d00b      	beq.n	8013464 <_dtoa_r+0x58>
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	2301      	movs	r3, #1
 8013450:	4093      	lsls	r3, r2
 8013452:	604a      	str	r2, [r1, #4]
 8013454:	608b      	str	r3, [r1, #8]
 8013456:	9803      	ldr	r0, [sp, #12]
 8013458:	f000 ff12 	bl	8014280 <_Bfree>
 801345c:	2200      	movs	r2, #0
 801345e:	9b03      	ldr	r3, [sp, #12]
 8013460:	69db      	ldr	r3, [r3, #28]
 8013462:	601a      	str	r2, [r3, #0]
 8013464:	2d00      	cmp	r5, #0
 8013466:	da1e      	bge.n	80134a6 <_dtoa_r+0x9a>
 8013468:	2301      	movs	r3, #1
 801346a:	603b      	str	r3, [r7, #0]
 801346c:	006b      	lsls	r3, r5, #1
 801346e:	085b      	lsrs	r3, r3, #1
 8013470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013472:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013474:	4bb8      	ldr	r3, [pc, #736]	@ (8013758 <_dtoa_r+0x34c>)
 8013476:	4ab8      	ldr	r2, [pc, #736]	@ (8013758 <_dtoa_r+0x34c>)
 8013478:	403b      	ands	r3, r7
 801347a:	4293      	cmp	r3, r2
 801347c:	d116      	bne.n	80134ac <_dtoa_r+0xa0>
 801347e:	4bb7      	ldr	r3, [pc, #732]	@ (801375c <_dtoa_r+0x350>)
 8013480:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013482:	6013      	str	r3, [r2, #0]
 8013484:	033b      	lsls	r3, r7, #12
 8013486:	0b1b      	lsrs	r3, r3, #12
 8013488:	4323      	orrs	r3, r4
 801348a:	d101      	bne.n	8013490 <_dtoa_r+0x84>
 801348c:	f000 fd80 	bl	8013f90 <_dtoa_r+0xb84>
 8013490:	4bb3      	ldr	r3, [pc, #716]	@ (8013760 <_dtoa_r+0x354>)
 8013492:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013494:	9308      	str	r3, [sp, #32]
 8013496:	2a00      	cmp	r2, #0
 8013498:	d002      	beq.n	80134a0 <_dtoa_r+0x94>
 801349a:	4bb2      	ldr	r3, [pc, #712]	@ (8013764 <_dtoa_r+0x358>)
 801349c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801349e:	6013      	str	r3, [r2, #0]
 80134a0:	9808      	ldr	r0, [sp, #32]
 80134a2:	b01d      	add	sp, #116	@ 0x74
 80134a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a6:	2300      	movs	r3, #0
 80134a8:	603b      	str	r3, [r7, #0]
 80134aa:	e7e2      	b.n	8013472 <_dtoa_r+0x66>
 80134ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80134ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80134b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80134b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80134b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80134b8:	2200      	movs	r2, #0
 80134ba:	2300      	movs	r3, #0
 80134bc:	f7ec ffc6 	bl	800044c <__aeabi_dcmpeq>
 80134c0:	1e06      	subs	r6, r0, #0
 80134c2:	d00b      	beq.n	80134dc <_dtoa_r+0xd0>
 80134c4:	2301      	movs	r3, #1
 80134c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80134c8:	6013      	str	r3, [r2, #0]
 80134ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <_dtoa_r+0xca>
 80134d0:	4ba5      	ldr	r3, [pc, #660]	@ (8013768 <_dtoa_r+0x35c>)
 80134d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80134d4:	6013      	str	r3, [r2, #0]
 80134d6:	4ba5      	ldr	r3, [pc, #660]	@ (801376c <_dtoa_r+0x360>)
 80134d8:	9308      	str	r3, [sp, #32]
 80134da:	e7e1      	b.n	80134a0 <_dtoa_r+0x94>
 80134dc:	ab1a      	add	r3, sp, #104	@ 0x68
 80134de:	9301      	str	r3, [sp, #4]
 80134e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	9803      	ldr	r0, [sp, #12]
 80134e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80134e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80134ea:	f001 f9c1 	bl	8014870 <__d2b>
 80134ee:	007a      	lsls	r2, r7, #1
 80134f0:	9005      	str	r0, [sp, #20]
 80134f2:	0d52      	lsrs	r2, r2, #21
 80134f4:	d100      	bne.n	80134f8 <_dtoa_r+0xec>
 80134f6:	e07b      	b.n	80135f0 <_dtoa_r+0x1e4>
 80134f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80134fa:	9618      	str	r6, [sp, #96]	@ 0x60
 80134fc:	0319      	lsls	r1, r3, #12
 80134fe:	4b9c      	ldr	r3, [pc, #624]	@ (8013770 <_dtoa_r+0x364>)
 8013500:	0b09      	lsrs	r1, r1, #12
 8013502:	430b      	orrs	r3, r1
 8013504:	499b      	ldr	r1, [pc, #620]	@ (8013774 <_dtoa_r+0x368>)
 8013506:	1857      	adds	r7, r2, r1
 8013508:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801350a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801350c:	0019      	movs	r1, r3
 801350e:	2200      	movs	r2, #0
 8013510:	4b99      	ldr	r3, [pc, #612]	@ (8013778 <_dtoa_r+0x36c>)
 8013512:	f7ee faaf 	bl	8001a74 <__aeabi_dsub>
 8013516:	4a99      	ldr	r2, [pc, #612]	@ (801377c <_dtoa_r+0x370>)
 8013518:	4b99      	ldr	r3, [pc, #612]	@ (8013780 <_dtoa_r+0x374>)
 801351a:	f7ed ffc5 	bl	80014a8 <__aeabi_dmul>
 801351e:	4a99      	ldr	r2, [pc, #612]	@ (8013784 <_dtoa_r+0x378>)
 8013520:	4b99      	ldr	r3, [pc, #612]	@ (8013788 <_dtoa_r+0x37c>)
 8013522:	f7ec ffc1 	bl	80004a8 <__aeabi_dadd>
 8013526:	0004      	movs	r4, r0
 8013528:	0038      	movs	r0, r7
 801352a:	000d      	movs	r5, r1
 801352c:	f7ee ff0a 	bl	8002344 <__aeabi_i2d>
 8013530:	4a96      	ldr	r2, [pc, #600]	@ (801378c <_dtoa_r+0x380>)
 8013532:	4b97      	ldr	r3, [pc, #604]	@ (8013790 <_dtoa_r+0x384>)
 8013534:	f7ed ffb8 	bl	80014a8 <__aeabi_dmul>
 8013538:	0002      	movs	r2, r0
 801353a:	000b      	movs	r3, r1
 801353c:	0020      	movs	r0, r4
 801353e:	0029      	movs	r1, r5
 8013540:	f7ec ffb2 	bl	80004a8 <__aeabi_dadd>
 8013544:	0004      	movs	r4, r0
 8013546:	000d      	movs	r5, r1
 8013548:	f7ee fec0 	bl	80022cc <__aeabi_d2iz>
 801354c:	2200      	movs	r2, #0
 801354e:	9004      	str	r0, [sp, #16]
 8013550:	2300      	movs	r3, #0
 8013552:	0020      	movs	r0, r4
 8013554:	0029      	movs	r1, r5
 8013556:	f7ec ff7f 	bl	8000458 <__aeabi_dcmplt>
 801355a:	2800      	cmp	r0, #0
 801355c:	d00b      	beq.n	8013576 <_dtoa_r+0x16a>
 801355e:	9804      	ldr	r0, [sp, #16]
 8013560:	f7ee fef0 	bl	8002344 <__aeabi_i2d>
 8013564:	002b      	movs	r3, r5
 8013566:	0022      	movs	r2, r4
 8013568:	f7ec ff70 	bl	800044c <__aeabi_dcmpeq>
 801356c:	4243      	negs	r3, r0
 801356e:	4158      	adcs	r0, r3
 8013570:	9b04      	ldr	r3, [sp, #16]
 8013572:	1a1b      	subs	r3, r3, r0
 8013574:	9304      	str	r3, [sp, #16]
 8013576:	2301      	movs	r3, #1
 8013578:	9315      	str	r3, [sp, #84]	@ 0x54
 801357a:	9b04      	ldr	r3, [sp, #16]
 801357c:	2b16      	cmp	r3, #22
 801357e:	d810      	bhi.n	80135a2 <_dtoa_r+0x196>
 8013580:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013582:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013584:	9a04      	ldr	r2, [sp, #16]
 8013586:	4b83      	ldr	r3, [pc, #524]	@ (8013794 <_dtoa_r+0x388>)
 8013588:	00d2      	lsls	r2, r2, #3
 801358a:	189b      	adds	r3, r3, r2
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	f7ec ff62 	bl	8000458 <__aeabi_dcmplt>
 8013594:	2800      	cmp	r0, #0
 8013596:	d047      	beq.n	8013628 <_dtoa_r+0x21c>
 8013598:	9b04      	ldr	r3, [sp, #16]
 801359a:	3b01      	subs	r3, #1
 801359c:	9304      	str	r3, [sp, #16]
 801359e:	2300      	movs	r3, #0
 80135a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80135a2:	2200      	movs	r2, #0
 80135a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80135a6:	9206      	str	r2, [sp, #24]
 80135a8:	1bdb      	subs	r3, r3, r7
 80135aa:	1e5a      	subs	r2, r3, #1
 80135ac:	d53e      	bpl.n	801362c <_dtoa_r+0x220>
 80135ae:	2201      	movs	r2, #1
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	9306      	str	r3, [sp, #24]
 80135b4:	2300      	movs	r3, #0
 80135b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80135b8:	9b04      	ldr	r3, [sp, #16]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	db38      	blt.n	8013630 <_dtoa_r+0x224>
 80135be:	9a04      	ldr	r2, [sp, #16]
 80135c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135c2:	4694      	mov	ip, r2
 80135c4:	4463      	add	r3, ip
 80135c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80135c8:	2300      	movs	r3, #0
 80135ca:	9214      	str	r2, [sp, #80]	@ 0x50
 80135cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80135ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80135d0:	2401      	movs	r4, #1
 80135d2:	2b09      	cmp	r3, #9
 80135d4:	d862      	bhi.n	801369c <_dtoa_r+0x290>
 80135d6:	2b05      	cmp	r3, #5
 80135d8:	dd02      	ble.n	80135e0 <_dtoa_r+0x1d4>
 80135da:	2400      	movs	r4, #0
 80135dc:	3b04      	subs	r3, #4
 80135de:	9322      	str	r3, [sp, #136]	@ 0x88
 80135e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80135e2:	1e98      	subs	r0, r3, #2
 80135e4:	2803      	cmp	r0, #3
 80135e6:	d863      	bhi.n	80136b0 <_dtoa_r+0x2a4>
 80135e8:	f7ec fd96 	bl	8000118 <__gnu_thumb1_case_uqi>
 80135ec:	2b385654 	.word	0x2b385654
 80135f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80135f4:	18f6      	adds	r6, r6, r3
 80135f6:	4b68      	ldr	r3, [pc, #416]	@ (8013798 <_dtoa_r+0x38c>)
 80135f8:	18f2      	adds	r2, r6, r3
 80135fa:	2a20      	cmp	r2, #32
 80135fc:	dd0f      	ble.n	801361e <_dtoa_r+0x212>
 80135fe:	2340      	movs	r3, #64	@ 0x40
 8013600:	1a9b      	subs	r3, r3, r2
 8013602:	409f      	lsls	r7, r3
 8013604:	4b65      	ldr	r3, [pc, #404]	@ (801379c <_dtoa_r+0x390>)
 8013606:	0038      	movs	r0, r7
 8013608:	18f3      	adds	r3, r6, r3
 801360a:	40dc      	lsrs	r4, r3
 801360c:	4320      	orrs	r0, r4
 801360e:	f7ee fec7 	bl	80023a0 <__aeabi_ui2d>
 8013612:	2201      	movs	r2, #1
 8013614:	4b62      	ldr	r3, [pc, #392]	@ (80137a0 <_dtoa_r+0x394>)
 8013616:	1e77      	subs	r7, r6, #1
 8013618:	18cb      	adds	r3, r1, r3
 801361a:	9218      	str	r2, [sp, #96]	@ 0x60
 801361c:	e776      	b.n	801350c <_dtoa_r+0x100>
 801361e:	2320      	movs	r3, #32
 8013620:	0020      	movs	r0, r4
 8013622:	1a9b      	subs	r3, r3, r2
 8013624:	4098      	lsls	r0, r3
 8013626:	e7f2      	b.n	801360e <_dtoa_r+0x202>
 8013628:	9015      	str	r0, [sp, #84]	@ 0x54
 801362a:	e7ba      	b.n	80135a2 <_dtoa_r+0x196>
 801362c:	920d      	str	r2, [sp, #52]	@ 0x34
 801362e:	e7c3      	b.n	80135b8 <_dtoa_r+0x1ac>
 8013630:	9b06      	ldr	r3, [sp, #24]
 8013632:	9a04      	ldr	r2, [sp, #16]
 8013634:	1a9b      	subs	r3, r3, r2
 8013636:	9306      	str	r3, [sp, #24]
 8013638:	4253      	negs	r3, r2
 801363a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801363c:	2300      	movs	r3, #0
 801363e:	9314      	str	r3, [sp, #80]	@ 0x50
 8013640:	e7c5      	b.n	80135ce <_dtoa_r+0x1c2>
 8013642:	2301      	movs	r3, #1
 8013644:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013646:	9310      	str	r3, [sp, #64]	@ 0x40
 8013648:	4694      	mov	ip, r2
 801364a:	9b04      	ldr	r3, [sp, #16]
 801364c:	4463      	add	r3, ip
 801364e:	930e      	str	r3, [sp, #56]	@ 0x38
 8013650:	3301      	adds	r3, #1
 8013652:	9309      	str	r3, [sp, #36]	@ 0x24
 8013654:	2b00      	cmp	r3, #0
 8013656:	dc08      	bgt.n	801366a <_dtoa_r+0x25e>
 8013658:	2301      	movs	r3, #1
 801365a:	e006      	b.n	801366a <_dtoa_r+0x25e>
 801365c:	2301      	movs	r3, #1
 801365e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013660:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013662:	2b00      	cmp	r3, #0
 8013664:	dd28      	ble.n	80136b8 <_dtoa_r+0x2ac>
 8013666:	930e      	str	r3, [sp, #56]	@ 0x38
 8013668:	9309      	str	r3, [sp, #36]	@ 0x24
 801366a:	9a03      	ldr	r2, [sp, #12]
 801366c:	2100      	movs	r1, #0
 801366e:	69d0      	ldr	r0, [r2, #28]
 8013670:	2204      	movs	r2, #4
 8013672:	0015      	movs	r5, r2
 8013674:	3514      	adds	r5, #20
 8013676:	429d      	cmp	r5, r3
 8013678:	d923      	bls.n	80136c2 <_dtoa_r+0x2b6>
 801367a:	6041      	str	r1, [r0, #4]
 801367c:	9803      	ldr	r0, [sp, #12]
 801367e:	f000 fdbb 	bl	80141f8 <_Balloc>
 8013682:	9008      	str	r0, [sp, #32]
 8013684:	2800      	cmp	r0, #0
 8013686:	d11f      	bne.n	80136c8 <_dtoa_r+0x2bc>
 8013688:	21b0      	movs	r1, #176	@ 0xb0
 801368a:	4b46      	ldr	r3, [pc, #280]	@ (80137a4 <_dtoa_r+0x398>)
 801368c:	4831      	ldr	r0, [pc, #196]	@ (8013754 <_dtoa_r+0x348>)
 801368e:	9a08      	ldr	r2, [sp, #32]
 8013690:	31ff      	adds	r1, #255	@ 0xff
 8013692:	e6d0      	b.n	8013436 <_dtoa_r+0x2a>
 8013694:	2300      	movs	r3, #0
 8013696:	e7e2      	b.n	801365e <_dtoa_r+0x252>
 8013698:	2300      	movs	r3, #0
 801369a:	e7d3      	b.n	8013644 <_dtoa_r+0x238>
 801369c:	2300      	movs	r3, #0
 801369e:	9410      	str	r4, [sp, #64]	@ 0x40
 80136a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80136a2:	3b01      	subs	r3, #1
 80136a4:	2200      	movs	r2, #0
 80136a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80136a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80136aa:	3313      	adds	r3, #19
 80136ac:	9223      	str	r2, [sp, #140]	@ 0x8c
 80136ae:	e7dc      	b.n	801366a <_dtoa_r+0x25e>
 80136b0:	2301      	movs	r3, #1
 80136b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80136b4:	3b02      	subs	r3, #2
 80136b6:	e7f5      	b.n	80136a4 <_dtoa_r+0x298>
 80136b8:	2301      	movs	r3, #1
 80136ba:	001a      	movs	r2, r3
 80136bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80136be:	9309      	str	r3, [sp, #36]	@ 0x24
 80136c0:	e7f4      	b.n	80136ac <_dtoa_r+0x2a0>
 80136c2:	3101      	adds	r1, #1
 80136c4:	0052      	lsls	r2, r2, #1
 80136c6:	e7d4      	b.n	8013672 <_dtoa_r+0x266>
 80136c8:	9b03      	ldr	r3, [sp, #12]
 80136ca:	9a08      	ldr	r2, [sp, #32]
 80136cc:	69db      	ldr	r3, [r3, #28]
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136d2:	2b0e      	cmp	r3, #14
 80136d4:	d900      	bls.n	80136d8 <_dtoa_r+0x2cc>
 80136d6:	e0d6      	b.n	8013886 <_dtoa_r+0x47a>
 80136d8:	2c00      	cmp	r4, #0
 80136da:	d100      	bne.n	80136de <_dtoa_r+0x2d2>
 80136dc:	e0d3      	b.n	8013886 <_dtoa_r+0x47a>
 80136de:	9b04      	ldr	r3, [sp, #16]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	dd63      	ble.n	80137ac <_dtoa_r+0x3a0>
 80136e4:	210f      	movs	r1, #15
 80136e6:	9a04      	ldr	r2, [sp, #16]
 80136e8:	4b2a      	ldr	r3, [pc, #168]	@ (8013794 <_dtoa_r+0x388>)
 80136ea:	400a      	ands	r2, r1
 80136ec:	00d2      	lsls	r2, r2, #3
 80136ee:	189b      	adds	r3, r3, r2
 80136f0:	681e      	ldr	r6, [r3, #0]
 80136f2:	685f      	ldr	r7, [r3, #4]
 80136f4:	9b04      	ldr	r3, [sp, #16]
 80136f6:	2402      	movs	r4, #2
 80136f8:	111d      	asrs	r5, r3, #4
 80136fa:	05db      	lsls	r3, r3, #23
 80136fc:	d50a      	bpl.n	8013714 <_dtoa_r+0x308>
 80136fe:	4b2a      	ldr	r3, [pc, #168]	@ (80137a8 <_dtoa_r+0x39c>)
 8013700:	400d      	ands	r5, r1
 8013702:	6a1a      	ldr	r2, [r3, #32]
 8013704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013706:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013708:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801370a:	f7ed fa93 	bl	8000c34 <__aeabi_ddiv>
 801370e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013710:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013712:	3401      	adds	r4, #1
 8013714:	4b24      	ldr	r3, [pc, #144]	@ (80137a8 <_dtoa_r+0x39c>)
 8013716:	930c      	str	r3, [sp, #48]	@ 0x30
 8013718:	2d00      	cmp	r5, #0
 801371a:	d108      	bne.n	801372e <_dtoa_r+0x322>
 801371c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801371e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013720:	0032      	movs	r2, r6
 8013722:	003b      	movs	r3, r7
 8013724:	f7ed fa86 	bl	8000c34 <__aeabi_ddiv>
 8013728:	900a      	str	r0, [sp, #40]	@ 0x28
 801372a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801372c:	e059      	b.n	80137e2 <_dtoa_r+0x3d6>
 801372e:	2301      	movs	r3, #1
 8013730:	421d      	tst	r5, r3
 8013732:	d009      	beq.n	8013748 <_dtoa_r+0x33c>
 8013734:	18e4      	adds	r4, r4, r3
 8013736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013738:	0030      	movs	r0, r6
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	0039      	movs	r1, r7
 8013740:	f7ed feb2 	bl	80014a8 <__aeabi_dmul>
 8013744:	0006      	movs	r6, r0
 8013746:	000f      	movs	r7, r1
 8013748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801374a:	106d      	asrs	r5, r5, #1
 801374c:	3308      	adds	r3, #8
 801374e:	e7e2      	b.n	8013716 <_dtoa_r+0x30a>
 8013750:	080189c3 	.word	0x080189c3
 8013754:	080189da 	.word	0x080189da
 8013758:	7ff00000 	.word	0x7ff00000
 801375c:	0000270f 	.word	0x0000270f
 8013760:	080189bf 	.word	0x080189bf
 8013764:	080189c2 	.word	0x080189c2
 8013768:	08018993 	.word	0x08018993
 801376c:	08018992 	.word	0x08018992
 8013770:	3ff00000 	.word	0x3ff00000
 8013774:	fffffc01 	.word	0xfffffc01
 8013778:	3ff80000 	.word	0x3ff80000
 801377c:	636f4361 	.word	0x636f4361
 8013780:	3fd287a7 	.word	0x3fd287a7
 8013784:	8b60c8b3 	.word	0x8b60c8b3
 8013788:	3fc68a28 	.word	0x3fc68a28
 801378c:	509f79fb 	.word	0x509f79fb
 8013790:	3fd34413 	.word	0x3fd34413
 8013794:	08018b28 	.word	0x08018b28
 8013798:	00000432 	.word	0x00000432
 801379c:	00000412 	.word	0x00000412
 80137a0:	fe100000 	.word	0xfe100000
 80137a4:	08018a32 	.word	0x08018a32
 80137a8:	08018b00 	.word	0x08018b00
 80137ac:	9b04      	ldr	r3, [sp, #16]
 80137ae:	2402      	movs	r4, #2
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d016      	beq.n	80137e2 <_dtoa_r+0x3d6>
 80137b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80137b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80137b8:	220f      	movs	r2, #15
 80137ba:	425d      	negs	r5, r3
 80137bc:	402a      	ands	r2, r5
 80137be:	4bd5      	ldr	r3, [pc, #852]	@ (8013b14 <_dtoa_r+0x708>)
 80137c0:	00d2      	lsls	r2, r2, #3
 80137c2:	189b      	adds	r3, r3, r2
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	f7ed fe6e 	bl	80014a8 <__aeabi_dmul>
 80137cc:	2701      	movs	r7, #1
 80137ce:	2300      	movs	r3, #0
 80137d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80137d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137d4:	4ed0      	ldr	r6, [pc, #832]	@ (8013b18 <_dtoa_r+0x70c>)
 80137d6:	112d      	asrs	r5, r5, #4
 80137d8:	2d00      	cmp	r5, #0
 80137da:	d000      	beq.n	80137de <_dtoa_r+0x3d2>
 80137dc:	e095      	b.n	801390a <_dtoa_r+0x4fe>
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1a2      	bne.n	8013728 <_dtoa_r+0x31c>
 80137e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80137e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80137e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d100      	bne.n	80137ee <_dtoa_r+0x3e2>
 80137ec:	e098      	b.n	8013920 <_dtoa_r+0x514>
 80137ee:	2200      	movs	r2, #0
 80137f0:	0030      	movs	r0, r6
 80137f2:	0039      	movs	r1, r7
 80137f4:	4bc9      	ldr	r3, [pc, #804]	@ (8013b1c <_dtoa_r+0x710>)
 80137f6:	f7ec fe2f 	bl	8000458 <__aeabi_dcmplt>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d100      	bne.n	8013800 <_dtoa_r+0x3f4>
 80137fe:	e08f      	b.n	8013920 <_dtoa_r+0x514>
 8013800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013802:	2b00      	cmp	r3, #0
 8013804:	d100      	bne.n	8013808 <_dtoa_r+0x3fc>
 8013806:	e08b      	b.n	8013920 <_dtoa_r+0x514>
 8013808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801380a:	2b00      	cmp	r3, #0
 801380c:	dd37      	ble.n	801387e <_dtoa_r+0x472>
 801380e:	9b04      	ldr	r3, [sp, #16]
 8013810:	2200      	movs	r2, #0
 8013812:	3b01      	subs	r3, #1
 8013814:	930c      	str	r3, [sp, #48]	@ 0x30
 8013816:	0030      	movs	r0, r6
 8013818:	4bc1      	ldr	r3, [pc, #772]	@ (8013b20 <_dtoa_r+0x714>)
 801381a:	0039      	movs	r1, r7
 801381c:	f7ed fe44 	bl	80014a8 <__aeabi_dmul>
 8013820:	900a      	str	r0, [sp, #40]	@ 0x28
 8013822:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013826:	3401      	adds	r4, #1
 8013828:	0020      	movs	r0, r4
 801382a:	9311      	str	r3, [sp, #68]	@ 0x44
 801382c:	f7ee fd8a 	bl	8002344 <__aeabi_i2d>
 8013830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013834:	f7ed fe38 	bl	80014a8 <__aeabi_dmul>
 8013838:	4bba      	ldr	r3, [pc, #744]	@ (8013b24 <_dtoa_r+0x718>)
 801383a:	2200      	movs	r2, #0
 801383c:	f7ec fe34 	bl	80004a8 <__aeabi_dadd>
 8013840:	4bb9      	ldr	r3, [pc, #740]	@ (8013b28 <_dtoa_r+0x71c>)
 8013842:	0006      	movs	r6, r0
 8013844:	18cf      	adds	r7, r1, r3
 8013846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013848:	2b00      	cmp	r3, #0
 801384a:	d16d      	bne.n	8013928 <_dtoa_r+0x51c>
 801384c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801384e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013850:	2200      	movs	r2, #0
 8013852:	4bb6      	ldr	r3, [pc, #728]	@ (8013b2c <_dtoa_r+0x720>)
 8013854:	f7ee f90e 	bl	8001a74 <__aeabi_dsub>
 8013858:	0032      	movs	r2, r6
 801385a:	003b      	movs	r3, r7
 801385c:	0004      	movs	r4, r0
 801385e:	000d      	movs	r5, r1
 8013860:	f7ec fe0e 	bl	8000480 <__aeabi_dcmpgt>
 8013864:	2800      	cmp	r0, #0
 8013866:	d000      	beq.n	801386a <_dtoa_r+0x45e>
 8013868:	e2b6      	b.n	8013dd8 <_dtoa_r+0x9cc>
 801386a:	2180      	movs	r1, #128	@ 0x80
 801386c:	0609      	lsls	r1, r1, #24
 801386e:	187b      	adds	r3, r7, r1
 8013870:	0032      	movs	r2, r6
 8013872:	0020      	movs	r0, r4
 8013874:	0029      	movs	r1, r5
 8013876:	f7ec fdef 	bl	8000458 <__aeabi_dcmplt>
 801387a:	2800      	cmp	r0, #0
 801387c:	d128      	bne.n	80138d0 <_dtoa_r+0x4c4>
 801387e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013880:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013882:	930a      	str	r3, [sp, #40]	@ 0x28
 8013884:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013886:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013888:	2b00      	cmp	r3, #0
 801388a:	da00      	bge.n	801388e <_dtoa_r+0x482>
 801388c:	e174      	b.n	8013b78 <_dtoa_r+0x76c>
 801388e:	9a04      	ldr	r2, [sp, #16]
 8013890:	2a0e      	cmp	r2, #14
 8013892:	dd00      	ble.n	8013896 <_dtoa_r+0x48a>
 8013894:	e170      	b.n	8013b78 <_dtoa_r+0x76c>
 8013896:	4b9f      	ldr	r3, [pc, #636]	@ (8013b14 <_dtoa_r+0x708>)
 8013898:	00d2      	lsls	r2, r2, #3
 801389a:	189b      	adds	r3, r3, r2
 801389c:	685c      	ldr	r4, [r3, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	9306      	str	r3, [sp, #24]
 80138a2:	9407      	str	r4, [sp, #28]
 80138a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	db00      	blt.n	80138ac <_dtoa_r+0x4a0>
 80138aa:	e0e7      	b.n	8013a7c <_dtoa_r+0x670>
 80138ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	dd00      	ble.n	80138b4 <_dtoa_r+0x4a8>
 80138b2:	e0e3      	b.n	8013a7c <_dtoa_r+0x670>
 80138b4:	d10c      	bne.n	80138d0 <_dtoa_r+0x4c4>
 80138b6:	9806      	ldr	r0, [sp, #24]
 80138b8:	9907      	ldr	r1, [sp, #28]
 80138ba:	2200      	movs	r2, #0
 80138bc:	4b9b      	ldr	r3, [pc, #620]	@ (8013b2c <_dtoa_r+0x720>)
 80138be:	f7ed fdf3 	bl	80014a8 <__aeabi_dmul>
 80138c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80138c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138c6:	f7ec fde5 	bl	8000494 <__aeabi_dcmpge>
 80138ca:	2800      	cmp	r0, #0
 80138cc:	d100      	bne.n	80138d0 <_dtoa_r+0x4c4>
 80138ce:	e286      	b.n	8013dde <_dtoa_r+0x9d2>
 80138d0:	2600      	movs	r6, #0
 80138d2:	0037      	movs	r7, r6
 80138d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138d6:	9c08      	ldr	r4, [sp, #32]
 80138d8:	43db      	mvns	r3, r3
 80138da:	930c      	str	r3, [sp, #48]	@ 0x30
 80138dc:	9704      	str	r7, [sp, #16]
 80138de:	2700      	movs	r7, #0
 80138e0:	0031      	movs	r1, r6
 80138e2:	9803      	ldr	r0, [sp, #12]
 80138e4:	f000 fccc 	bl	8014280 <_Bfree>
 80138e8:	9b04      	ldr	r3, [sp, #16]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d100      	bne.n	80138f0 <_dtoa_r+0x4e4>
 80138ee:	e0bb      	b.n	8013a68 <_dtoa_r+0x65c>
 80138f0:	2f00      	cmp	r7, #0
 80138f2:	d005      	beq.n	8013900 <_dtoa_r+0x4f4>
 80138f4:	429f      	cmp	r7, r3
 80138f6:	d003      	beq.n	8013900 <_dtoa_r+0x4f4>
 80138f8:	0039      	movs	r1, r7
 80138fa:	9803      	ldr	r0, [sp, #12]
 80138fc:	f000 fcc0 	bl	8014280 <_Bfree>
 8013900:	9904      	ldr	r1, [sp, #16]
 8013902:	9803      	ldr	r0, [sp, #12]
 8013904:	f000 fcbc 	bl	8014280 <_Bfree>
 8013908:	e0ae      	b.n	8013a68 <_dtoa_r+0x65c>
 801390a:	423d      	tst	r5, r7
 801390c:	d005      	beq.n	801391a <_dtoa_r+0x50e>
 801390e:	6832      	ldr	r2, [r6, #0]
 8013910:	6873      	ldr	r3, [r6, #4]
 8013912:	f7ed fdc9 	bl	80014a8 <__aeabi_dmul>
 8013916:	003b      	movs	r3, r7
 8013918:	3401      	adds	r4, #1
 801391a:	106d      	asrs	r5, r5, #1
 801391c:	3608      	adds	r6, #8
 801391e:	e75b      	b.n	80137d8 <_dtoa_r+0x3cc>
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	930c      	str	r3, [sp, #48]	@ 0x30
 8013924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013926:	e77f      	b.n	8013828 <_dtoa_r+0x41c>
 8013928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801392a:	4b7a      	ldr	r3, [pc, #488]	@ (8013b14 <_dtoa_r+0x708>)
 801392c:	3a01      	subs	r2, #1
 801392e:	00d2      	lsls	r2, r2, #3
 8013930:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013932:	189b      	adds	r3, r3, r2
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	2900      	cmp	r1, #0
 801393a:	d04c      	beq.n	80139d6 <_dtoa_r+0x5ca>
 801393c:	2000      	movs	r0, #0
 801393e:	497c      	ldr	r1, [pc, #496]	@ (8013b30 <_dtoa_r+0x724>)
 8013940:	f7ed f978 	bl	8000c34 <__aeabi_ddiv>
 8013944:	0032      	movs	r2, r6
 8013946:	003b      	movs	r3, r7
 8013948:	f7ee f894 	bl	8001a74 <__aeabi_dsub>
 801394c:	9a08      	ldr	r2, [sp, #32]
 801394e:	0006      	movs	r6, r0
 8013950:	4694      	mov	ip, r2
 8013952:	000f      	movs	r7, r1
 8013954:	9b08      	ldr	r3, [sp, #32]
 8013956:	9316      	str	r3, [sp, #88]	@ 0x58
 8013958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801395a:	4463      	add	r3, ip
 801395c:	9311      	str	r3, [sp, #68]	@ 0x44
 801395e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013962:	f7ee fcb3 	bl	80022cc <__aeabi_d2iz>
 8013966:	0005      	movs	r5, r0
 8013968:	f7ee fcec 	bl	8002344 <__aeabi_i2d>
 801396c:	0002      	movs	r2, r0
 801396e:	000b      	movs	r3, r1
 8013970:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013972:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013974:	f7ee f87e 	bl	8001a74 <__aeabi_dsub>
 8013978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801397a:	3530      	adds	r5, #48	@ 0x30
 801397c:	1c5c      	adds	r4, r3, #1
 801397e:	701d      	strb	r5, [r3, #0]
 8013980:	0032      	movs	r2, r6
 8013982:	003b      	movs	r3, r7
 8013984:	900a      	str	r0, [sp, #40]	@ 0x28
 8013986:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013988:	f7ec fd66 	bl	8000458 <__aeabi_dcmplt>
 801398c:	2800      	cmp	r0, #0
 801398e:	d16b      	bne.n	8013a68 <_dtoa_r+0x65c>
 8013990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013994:	2000      	movs	r0, #0
 8013996:	4961      	ldr	r1, [pc, #388]	@ (8013b1c <_dtoa_r+0x710>)
 8013998:	f7ee f86c 	bl	8001a74 <__aeabi_dsub>
 801399c:	0032      	movs	r2, r6
 801399e:	003b      	movs	r3, r7
 80139a0:	f7ec fd5a 	bl	8000458 <__aeabi_dcmplt>
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d000      	beq.n	80139aa <_dtoa_r+0x59e>
 80139a8:	e0c6      	b.n	8013b38 <_dtoa_r+0x72c>
 80139aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80139ac:	42a3      	cmp	r3, r4
 80139ae:	d100      	bne.n	80139b2 <_dtoa_r+0x5a6>
 80139b0:	e765      	b.n	801387e <_dtoa_r+0x472>
 80139b2:	2200      	movs	r2, #0
 80139b4:	0030      	movs	r0, r6
 80139b6:	0039      	movs	r1, r7
 80139b8:	4b59      	ldr	r3, [pc, #356]	@ (8013b20 <_dtoa_r+0x714>)
 80139ba:	f7ed fd75 	bl	80014a8 <__aeabi_dmul>
 80139be:	2200      	movs	r2, #0
 80139c0:	0006      	movs	r6, r0
 80139c2:	000f      	movs	r7, r1
 80139c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80139c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139c8:	4b55      	ldr	r3, [pc, #340]	@ (8013b20 <_dtoa_r+0x714>)
 80139ca:	f7ed fd6d 	bl	80014a8 <__aeabi_dmul>
 80139ce:	9416      	str	r4, [sp, #88]	@ 0x58
 80139d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80139d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80139d4:	e7c3      	b.n	801395e <_dtoa_r+0x552>
 80139d6:	0030      	movs	r0, r6
 80139d8:	0039      	movs	r1, r7
 80139da:	f7ed fd65 	bl	80014a8 <__aeabi_dmul>
 80139de:	9d08      	ldr	r5, [sp, #32]
 80139e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139e2:	002b      	movs	r3, r5
 80139e4:	4694      	mov	ip, r2
 80139e6:	9016      	str	r0, [sp, #88]	@ 0x58
 80139e8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80139ea:	4463      	add	r3, ip
 80139ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80139ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80139f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139f2:	f7ee fc6b 	bl	80022cc <__aeabi_d2iz>
 80139f6:	0004      	movs	r4, r0
 80139f8:	f7ee fca4 	bl	8002344 <__aeabi_i2d>
 80139fc:	000b      	movs	r3, r1
 80139fe:	0002      	movs	r2, r0
 8013a00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013a02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013a04:	f7ee f836 	bl	8001a74 <__aeabi_dsub>
 8013a08:	3430      	adds	r4, #48	@ 0x30
 8013a0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a0c:	702c      	strb	r4, [r5, #0]
 8013a0e:	3501      	adds	r5, #1
 8013a10:	0006      	movs	r6, r0
 8013a12:	000f      	movs	r7, r1
 8013a14:	42ab      	cmp	r3, r5
 8013a16:	d12a      	bne.n	8013a6e <_dtoa_r+0x662>
 8013a18:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013a1a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013a1c:	9b08      	ldr	r3, [sp, #32]
 8013a1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8013a20:	469c      	mov	ip, r3
 8013a22:	2200      	movs	r2, #0
 8013a24:	4b42      	ldr	r3, [pc, #264]	@ (8013b30 <_dtoa_r+0x724>)
 8013a26:	4464      	add	r4, ip
 8013a28:	f7ec fd3e 	bl	80004a8 <__aeabi_dadd>
 8013a2c:	0002      	movs	r2, r0
 8013a2e:	000b      	movs	r3, r1
 8013a30:	0030      	movs	r0, r6
 8013a32:	0039      	movs	r1, r7
 8013a34:	f7ec fd24 	bl	8000480 <__aeabi_dcmpgt>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d000      	beq.n	8013a3e <_dtoa_r+0x632>
 8013a3c:	e07c      	b.n	8013b38 <_dtoa_r+0x72c>
 8013a3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013a40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013a42:	2000      	movs	r0, #0
 8013a44:	493a      	ldr	r1, [pc, #232]	@ (8013b30 <_dtoa_r+0x724>)
 8013a46:	f7ee f815 	bl	8001a74 <__aeabi_dsub>
 8013a4a:	0002      	movs	r2, r0
 8013a4c:	000b      	movs	r3, r1
 8013a4e:	0030      	movs	r0, r6
 8013a50:	0039      	movs	r1, r7
 8013a52:	f7ec fd01 	bl	8000458 <__aeabi_dcmplt>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d100      	bne.n	8013a5c <_dtoa_r+0x650>
 8013a5a:	e710      	b.n	801387e <_dtoa_r+0x472>
 8013a5c:	0023      	movs	r3, r4
 8013a5e:	3c01      	subs	r4, #1
 8013a60:	7822      	ldrb	r2, [r4, #0]
 8013a62:	2a30      	cmp	r2, #48	@ 0x30
 8013a64:	d0fa      	beq.n	8013a5c <_dtoa_r+0x650>
 8013a66:	001c      	movs	r4, r3
 8013a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a6a:	9304      	str	r3, [sp, #16]
 8013a6c:	e042      	b.n	8013af4 <_dtoa_r+0x6e8>
 8013a6e:	2200      	movs	r2, #0
 8013a70:	4b2b      	ldr	r3, [pc, #172]	@ (8013b20 <_dtoa_r+0x714>)
 8013a72:	f7ed fd19 	bl	80014a8 <__aeabi_dmul>
 8013a76:	900a      	str	r0, [sp, #40]	@ 0x28
 8013a78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013a7a:	e7b8      	b.n	80139ee <_dtoa_r+0x5e2>
 8013a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a7e:	9d08      	ldr	r5, [sp, #32]
 8013a80:	3b01      	subs	r3, #1
 8013a82:	195b      	adds	r3, r3, r5
 8013a84:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013a86:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a8a:	9a06      	ldr	r2, [sp, #24]
 8013a8c:	9b07      	ldr	r3, [sp, #28]
 8013a8e:	0030      	movs	r0, r6
 8013a90:	0039      	movs	r1, r7
 8013a92:	f7ed f8cf 	bl	8000c34 <__aeabi_ddiv>
 8013a96:	f7ee fc19 	bl	80022cc <__aeabi_d2iz>
 8013a9a:	9009      	str	r0, [sp, #36]	@ 0x24
 8013a9c:	f7ee fc52 	bl	8002344 <__aeabi_i2d>
 8013aa0:	9a06      	ldr	r2, [sp, #24]
 8013aa2:	9b07      	ldr	r3, [sp, #28]
 8013aa4:	f7ed fd00 	bl	80014a8 <__aeabi_dmul>
 8013aa8:	0002      	movs	r2, r0
 8013aaa:	000b      	movs	r3, r1
 8013aac:	0030      	movs	r0, r6
 8013aae:	0039      	movs	r1, r7
 8013ab0:	f7ed ffe0 	bl	8001a74 <__aeabi_dsub>
 8013ab4:	002b      	movs	r3, r5
 8013ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ab8:	3501      	adds	r5, #1
 8013aba:	3230      	adds	r2, #48	@ 0x30
 8013abc:	701a      	strb	r2, [r3, #0]
 8013abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ac0:	002c      	movs	r4, r5
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d14b      	bne.n	8013b5e <_dtoa_r+0x752>
 8013ac6:	0002      	movs	r2, r0
 8013ac8:	000b      	movs	r3, r1
 8013aca:	f7ec fced 	bl	80004a8 <__aeabi_dadd>
 8013ace:	9a06      	ldr	r2, [sp, #24]
 8013ad0:	9b07      	ldr	r3, [sp, #28]
 8013ad2:	0006      	movs	r6, r0
 8013ad4:	000f      	movs	r7, r1
 8013ad6:	f7ec fcd3 	bl	8000480 <__aeabi_dcmpgt>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d12a      	bne.n	8013b34 <_dtoa_r+0x728>
 8013ade:	9a06      	ldr	r2, [sp, #24]
 8013ae0:	9b07      	ldr	r3, [sp, #28]
 8013ae2:	0030      	movs	r0, r6
 8013ae4:	0039      	movs	r1, r7
 8013ae6:	f7ec fcb1 	bl	800044c <__aeabi_dcmpeq>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	d002      	beq.n	8013af4 <_dtoa_r+0x6e8>
 8013aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af0:	07dd      	lsls	r5, r3, #31
 8013af2:	d41f      	bmi.n	8013b34 <_dtoa_r+0x728>
 8013af4:	9905      	ldr	r1, [sp, #20]
 8013af6:	9803      	ldr	r0, [sp, #12]
 8013af8:	f000 fbc2 	bl	8014280 <_Bfree>
 8013afc:	2300      	movs	r3, #0
 8013afe:	7023      	strb	r3, [r4, #0]
 8013b00:	9b04      	ldr	r3, [sp, #16]
 8013b02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013b04:	3301      	adds	r3, #1
 8013b06:	6013      	str	r3, [r2, #0]
 8013b08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d100      	bne.n	8013b10 <_dtoa_r+0x704>
 8013b0e:	e4c7      	b.n	80134a0 <_dtoa_r+0x94>
 8013b10:	601c      	str	r4, [r3, #0]
 8013b12:	e4c5      	b.n	80134a0 <_dtoa_r+0x94>
 8013b14:	08018b28 	.word	0x08018b28
 8013b18:	08018b00 	.word	0x08018b00
 8013b1c:	3ff00000 	.word	0x3ff00000
 8013b20:	40240000 	.word	0x40240000
 8013b24:	401c0000 	.word	0x401c0000
 8013b28:	fcc00000 	.word	0xfcc00000
 8013b2c:	40140000 	.word	0x40140000
 8013b30:	3fe00000 	.word	0x3fe00000
 8013b34:	9b04      	ldr	r3, [sp, #16]
 8013b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b38:	0023      	movs	r3, r4
 8013b3a:	001c      	movs	r4, r3
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	781a      	ldrb	r2, [r3, #0]
 8013b40:	2a39      	cmp	r2, #57	@ 0x39
 8013b42:	d108      	bne.n	8013b56 <_dtoa_r+0x74a>
 8013b44:	9a08      	ldr	r2, [sp, #32]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d1f7      	bne.n	8013b3a <_dtoa_r+0x72e>
 8013b4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013b4c:	9908      	ldr	r1, [sp, #32]
 8013b4e:	3201      	adds	r2, #1
 8013b50:	920c      	str	r2, [sp, #48]	@ 0x30
 8013b52:	2230      	movs	r2, #48	@ 0x30
 8013b54:	700a      	strb	r2, [r1, #0]
 8013b56:	781a      	ldrb	r2, [r3, #0]
 8013b58:	3201      	adds	r2, #1
 8013b5a:	701a      	strb	r2, [r3, #0]
 8013b5c:	e784      	b.n	8013a68 <_dtoa_r+0x65c>
 8013b5e:	2200      	movs	r2, #0
 8013b60:	4bc6      	ldr	r3, [pc, #792]	@ (8013e7c <_dtoa_r+0xa70>)
 8013b62:	f7ed fca1 	bl	80014a8 <__aeabi_dmul>
 8013b66:	2200      	movs	r2, #0
 8013b68:	2300      	movs	r3, #0
 8013b6a:	0006      	movs	r6, r0
 8013b6c:	000f      	movs	r7, r1
 8013b6e:	f7ec fc6d 	bl	800044c <__aeabi_dcmpeq>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d089      	beq.n	8013a8a <_dtoa_r+0x67e>
 8013b76:	e7bd      	b.n	8013af4 <_dtoa_r+0x6e8>
 8013b78:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8013b7a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013b7c:	9c06      	ldr	r4, [sp, #24]
 8013b7e:	2f00      	cmp	r7, #0
 8013b80:	d014      	beq.n	8013bac <_dtoa_r+0x7a0>
 8013b82:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013b84:	2a01      	cmp	r2, #1
 8013b86:	dd00      	ble.n	8013b8a <_dtoa_r+0x77e>
 8013b88:	e0e4      	b.n	8013d54 <_dtoa_r+0x948>
 8013b8a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013b8c:	2a00      	cmp	r2, #0
 8013b8e:	d100      	bne.n	8013b92 <_dtoa_r+0x786>
 8013b90:	e0da      	b.n	8013d48 <_dtoa_r+0x93c>
 8013b92:	4abb      	ldr	r2, [pc, #748]	@ (8013e80 <_dtoa_r+0xa74>)
 8013b94:	189b      	adds	r3, r3, r2
 8013b96:	9a06      	ldr	r2, [sp, #24]
 8013b98:	2101      	movs	r1, #1
 8013b9a:	18d2      	adds	r2, r2, r3
 8013b9c:	9206      	str	r2, [sp, #24]
 8013b9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ba0:	9803      	ldr	r0, [sp, #12]
 8013ba2:	18d3      	adds	r3, r2, r3
 8013ba4:	930d      	str	r3, [sp, #52]	@ 0x34
 8013ba6:	f000 fc23 	bl	80143f0 <__i2b>
 8013baa:	0007      	movs	r7, r0
 8013bac:	2c00      	cmp	r4, #0
 8013bae:	d00e      	beq.n	8013bce <_dtoa_r+0x7c2>
 8013bb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	dd0b      	ble.n	8013bce <_dtoa_r+0x7c2>
 8013bb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013bb8:	0023      	movs	r3, r4
 8013bba:	4294      	cmp	r4, r2
 8013bbc:	dd00      	ble.n	8013bc0 <_dtoa_r+0x7b4>
 8013bbe:	0013      	movs	r3, r2
 8013bc0:	9a06      	ldr	r2, [sp, #24]
 8013bc2:	1ae4      	subs	r4, r4, r3
 8013bc4:	1ad2      	subs	r2, r2, r3
 8013bc6:	9206      	str	r2, [sp, #24]
 8013bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8013bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d021      	beq.n	8013c18 <_dtoa_r+0x80c>
 8013bd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d100      	bne.n	8013bdc <_dtoa_r+0x7d0>
 8013bda:	e0d3      	b.n	8013d84 <_dtoa_r+0x978>
 8013bdc:	9e05      	ldr	r6, [sp, #20]
 8013bde:	2d00      	cmp	r5, #0
 8013be0:	d014      	beq.n	8013c0c <_dtoa_r+0x800>
 8013be2:	0039      	movs	r1, r7
 8013be4:	002a      	movs	r2, r5
 8013be6:	9803      	ldr	r0, [sp, #12]
 8013be8:	f000 fcc4 	bl	8014574 <__pow5mult>
 8013bec:	9a05      	ldr	r2, [sp, #20]
 8013bee:	0001      	movs	r1, r0
 8013bf0:	0007      	movs	r7, r0
 8013bf2:	9803      	ldr	r0, [sp, #12]
 8013bf4:	f000 fc14 	bl	8014420 <__multiply>
 8013bf8:	0006      	movs	r6, r0
 8013bfa:	9905      	ldr	r1, [sp, #20]
 8013bfc:	9803      	ldr	r0, [sp, #12]
 8013bfe:	f000 fb3f 	bl	8014280 <_Bfree>
 8013c02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c04:	9605      	str	r6, [sp, #20]
 8013c06:	1b5b      	subs	r3, r3, r5
 8013c08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013c0a:	d005      	beq.n	8013c18 <_dtoa_r+0x80c>
 8013c0c:	0031      	movs	r1, r6
 8013c0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013c10:	9803      	ldr	r0, [sp, #12]
 8013c12:	f000 fcaf 	bl	8014574 <__pow5mult>
 8013c16:	9005      	str	r0, [sp, #20]
 8013c18:	2101      	movs	r1, #1
 8013c1a:	9803      	ldr	r0, [sp, #12]
 8013c1c:	f000 fbe8 	bl	80143f0 <__i2b>
 8013c20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c22:	0006      	movs	r6, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d100      	bne.n	8013c2a <_dtoa_r+0x81e>
 8013c28:	e1bc      	b.n	8013fa4 <_dtoa_r+0xb98>
 8013c2a:	001a      	movs	r2, r3
 8013c2c:	0001      	movs	r1, r0
 8013c2e:	9803      	ldr	r0, [sp, #12]
 8013c30:	f000 fca0 	bl	8014574 <__pow5mult>
 8013c34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013c36:	0006      	movs	r6, r0
 8013c38:	2500      	movs	r5, #0
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	dc16      	bgt.n	8013c6c <_dtoa_r+0x860>
 8013c3e:	2500      	movs	r5, #0
 8013c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c42:	42ab      	cmp	r3, r5
 8013c44:	d10e      	bne.n	8013c64 <_dtoa_r+0x858>
 8013c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c48:	031b      	lsls	r3, r3, #12
 8013c4a:	42ab      	cmp	r3, r5
 8013c4c:	d10a      	bne.n	8013c64 <_dtoa_r+0x858>
 8013c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8013e84 <_dtoa_r+0xa78>)
 8013c50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013c52:	4213      	tst	r3, r2
 8013c54:	d006      	beq.n	8013c64 <_dtoa_r+0x858>
 8013c56:	9b06      	ldr	r3, [sp, #24]
 8013c58:	3501      	adds	r5, #1
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	9306      	str	r3, [sp, #24]
 8013c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c60:	3301      	adds	r3, #1
 8013c62:	930d      	str	r3, [sp, #52]	@ 0x34
 8013c64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c66:	2001      	movs	r0, #1
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d008      	beq.n	8013c7e <_dtoa_r+0x872>
 8013c6c:	6933      	ldr	r3, [r6, #16]
 8013c6e:	3303      	adds	r3, #3
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	18f3      	adds	r3, r6, r3
 8013c74:	6858      	ldr	r0, [r3, #4]
 8013c76:	f000 fb6b 	bl	8014350 <__hi0bits>
 8013c7a:	2320      	movs	r3, #32
 8013c7c:	1a18      	subs	r0, r3, r0
 8013c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c80:	1818      	adds	r0, r3, r0
 8013c82:	0002      	movs	r2, r0
 8013c84:	231f      	movs	r3, #31
 8013c86:	401a      	ands	r2, r3
 8013c88:	4218      	tst	r0, r3
 8013c8a:	d100      	bne.n	8013c8e <_dtoa_r+0x882>
 8013c8c:	e081      	b.n	8013d92 <_dtoa_r+0x986>
 8013c8e:	3301      	adds	r3, #1
 8013c90:	1a9b      	subs	r3, r3, r2
 8013c92:	2b04      	cmp	r3, #4
 8013c94:	dd79      	ble.n	8013d8a <_dtoa_r+0x97e>
 8013c96:	231c      	movs	r3, #28
 8013c98:	1a9b      	subs	r3, r3, r2
 8013c9a:	9a06      	ldr	r2, [sp, #24]
 8013c9c:	18e4      	adds	r4, r4, r3
 8013c9e:	18d2      	adds	r2, r2, r3
 8013ca0:	9206      	str	r2, [sp, #24]
 8013ca2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ca4:	18d3      	adds	r3, r2, r3
 8013ca6:	930d      	str	r3, [sp, #52]	@ 0x34
 8013ca8:	9b06      	ldr	r3, [sp, #24]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	dd05      	ble.n	8013cba <_dtoa_r+0x8ae>
 8013cae:	001a      	movs	r2, r3
 8013cb0:	9905      	ldr	r1, [sp, #20]
 8013cb2:	9803      	ldr	r0, [sp, #12]
 8013cb4:	f000 fcba 	bl	801462c <__lshift>
 8013cb8:	9005      	str	r0, [sp, #20]
 8013cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	dd05      	ble.n	8013ccc <_dtoa_r+0x8c0>
 8013cc0:	0031      	movs	r1, r6
 8013cc2:	001a      	movs	r2, r3
 8013cc4:	9803      	ldr	r0, [sp, #12]
 8013cc6:	f000 fcb1 	bl	801462c <__lshift>
 8013cca:	0006      	movs	r6, r0
 8013ccc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d061      	beq.n	8013d96 <_dtoa_r+0x98a>
 8013cd2:	0031      	movs	r1, r6
 8013cd4:	9805      	ldr	r0, [sp, #20]
 8013cd6:	f000 fd15 	bl	8014704 <__mcmp>
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	da5b      	bge.n	8013d96 <_dtoa_r+0x98a>
 8013cde:	9b04      	ldr	r3, [sp, #16]
 8013ce0:	220a      	movs	r2, #10
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ce6:	9905      	ldr	r1, [sp, #20]
 8013ce8:	2300      	movs	r3, #0
 8013cea:	9803      	ldr	r0, [sp, #12]
 8013cec:	f000 faec 	bl	80142c8 <__multadd>
 8013cf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013cf2:	9005      	str	r0, [sp, #20]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d100      	bne.n	8013cfa <_dtoa_r+0x8ee>
 8013cf8:	e15b      	b.n	8013fb2 <_dtoa_r+0xba6>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	0039      	movs	r1, r7
 8013cfe:	220a      	movs	r2, #10
 8013d00:	9803      	ldr	r0, [sp, #12]
 8013d02:	f000 fae1 	bl	80142c8 <__multadd>
 8013d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d08:	0007      	movs	r7, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	dc4d      	bgt.n	8013daa <_dtoa_r+0x99e>
 8013d0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013d10:	2b02      	cmp	r3, #2
 8013d12:	dd46      	ble.n	8013da2 <_dtoa_r+0x996>
 8013d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d000      	beq.n	8013d1c <_dtoa_r+0x910>
 8013d1a:	e5db      	b.n	80138d4 <_dtoa_r+0x4c8>
 8013d1c:	0031      	movs	r1, r6
 8013d1e:	2205      	movs	r2, #5
 8013d20:	9803      	ldr	r0, [sp, #12]
 8013d22:	f000 fad1 	bl	80142c8 <__multadd>
 8013d26:	0006      	movs	r6, r0
 8013d28:	0001      	movs	r1, r0
 8013d2a:	9805      	ldr	r0, [sp, #20]
 8013d2c:	f000 fcea 	bl	8014704 <__mcmp>
 8013d30:	2800      	cmp	r0, #0
 8013d32:	dc00      	bgt.n	8013d36 <_dtoa_r+0x92a>
 8013d34:	e5ce      	b.n	80138d4 <_dtoa_r+0x4c8>
 8013d36:	9b08      	ldr	r3, [sp, #32]
 8013d38:	9a08      	ldr	r2, [sp, #32]
 8013d3a:	1c5c      	adds	r4, r3, #1
 8013d3c:	2331      	movs	r3, #49	@ 0x31
 8013d3e:	7013      	strb	r3, [r2, #0]
 8013d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d42:	3301      	adds	r3, #1
 8013d44:	930c      	str	r3, [sp, #48]	@ 0x30
 8013d46:	e5c9      	b.n	80138dc <_dtoa_r+0x4d0>
 8013d48:	2336      	movs	r3, #54	@ 0x36
 8013d4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013d4c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013d4e:	1a9b      	subs	r3, r3, r2
 8013d50:	9c06      	ldr	r4, [sp, #24]
 8013d52:	e720      	b.n	8013b96 <_dtoa_r+0x78a>
 8013d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d56:	1e5d      	subs	r5, r3, #1
 8013d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d5a:	42ab      	cmp	r3, r5
 8013d5c:	db08      	blt.n	8013d70 <_dtoa_r+0x964>
 8013d5e:	1b5d      	subs	r5, r3, r5
 8013d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	daf4      	bge.n	8013d50 <_dtoa_r+0x944>
 8013d66:	9b06      	ldr	r3, [sp, #24]
 8013d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d6a:	1a9c      	subs	r4, r3, r2
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	e712      	b.n	8013b96 <_dtoa_r+0x78a>
 8013d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d72:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013d74:	1aeb      	subs	r3, r5, r3
 8013d76:	18d3      	adds	r3, r2, r3
 8013d78:	9314      	str	r3, [sp, #80]	@ 0x50
 8013d7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013d7c:	9c06      	ldr	r4, [sp, #24]
 8013d7e:	2500      	movs	r5, #0
 8013d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d82:	e708      	b.n	8013b96 <_dtoa_r+0x78a>
 8013d84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013d86:	9905      	ldr	r1, [sp, #20]
 8013d88:	e742      	b.n	8013c10 <_dtoa_r+0x804>
 8013d8a:	2b04      	cmp	r3, #4
 8013d8c:	d08c      	beq.n	8013ca8 <_dtoa_r+0x89c>
 8013d8e:	331c      	adds	r3, #28
 8013d90:	e783      	b.n	8013c9a <_dtoa_r+0x88e>
 8013d92:	0013      	movs	r3, r2
 8013d94:	e7fb      	b.n	8013d8e <_dtoa_r+0x982>
 8013d96:	9b04      	ldr	r3, [sp, #16]
 8013d98:	930c      	str	r3, [sp, #48]	@ 0x30
 8013d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	ddb5      	ble.n	8013d0e <_dtoa_r+0x902>
 8013da2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d100      	bne.n	8013daa <_dtoa_r+0x99e>
 8013da8:	e107      	b.n	8013fba <_dtoa_r+0xbae>
 8013daa:	2c00      	cmp	r4, #0
 8013dac:	dd05      	ble.n	8013dba <_dtoa_r+0x9ae>
 8013dae:	0039      	movs	r1, r7
 8013db0:	0022      	movs	r2, r4
 8013db2:	9803      	ldr	r0, [sp, #12]
 8013db4:	f000 fc3a 	bl	801462c <__lshift>
 8013db8:	0007      	movs	r7, r0
 8013dba:	9704      	str	r7, [sp, #16]
 8013dbc:	2d00      	cmp	r5, #0
 8013dbe:	d020      	beq.n	8013e02 <_dtoa_r+0x9f6>
 8013dc0:	6879      	ldr	r1, [r7, #4]
 8013dc2:	9803      	ldr	r0, [sp, #12]
 8013dc4:	f000 fa18 	bl	80141f8 <_Balloc>
 8013dc8:	1e04      	subs	r4, r0, #0
 8013dca:	d10c      	bne.n	8013de6 <_dtoa_r+0x9da>
 8013dcc:	0022      	movs	r2, r4
 8013dce:	4b2e      	ldr	r3, [pc, #184]	@ (8013e88 <_dtoa_r+0xa7c>)
 8013dd0:	482e      	ldr	r0, [pc, #184]	@ (8013e8c <_dtoa_r+0xa80>)
 8013dd2:	492f      	ldr	r1, [pc, #188]	@ (8013e90 <_dtoa_r+0xa84>)
 8013dd4:	f7ff fb2f 	bl	8013436 <_dtoa_r+0x2a>
 8013dd8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013dda:	0037      	movs	r7, r6
 8013ddc:	e7ab      	b.n	8013d36 <_dtoa_r+0x92a>
 8013dde:	9b04      	ldr	r3, [sp, #16]
 8013de0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013de2:	930c      	str	r3, [sp, #48]	@ 0x30
 8013de4:	e7f9      	b.n	8013dda <_dtoa_r+0x9ce>
 8013de6:	0039      	movs	r1, r7
 8013de8:	693a      	ldr	r2, [r7, #16]
 8013dea:	310c      	adds	r1, #12
 8013dec:	3202      	adds	r2, #2
 8013dee:	0092      	lsls	r2, r2, #2
 8013df0:	300c      	adds	r0, #12
 8013df2:	f7ff fa7d 	bl	80132f0 <memcpy>
 8013df6:	2201      	movs	r2, #1
 8013df8:	0021      	movs	r1, r4
 8013dfa:	9803      	ldr	r0, [sp, #12]
 8013dfc:	f000 fc16 	bl	801462c <__lshift>
 8013e00:	9004      	str	r0, [sp, #16]
 8013e02:	9b08      	ldr	r3, [sp, #32]
 8013e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e06:	9306      	str	r3, [sp, #24]
 8013e08:	3b01      	subs	r3, #1
 8013e0a:	189b      	adds	r3, r3, r2
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e12:	4013      	ands	r3, r2
 8013e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8013e16:	0031      	movs	r1, r6
 8013e18:	9805      	ldr	r0, [sp, #20]
 8013e1a:	f7ff fa72 	bl	8013302 <quorem>
 8013e1e:	0039      	movs	r1, r7
 8013e20:	0005      	movs	r5, r0
 8013e22:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e24:	9805      	ldr	r0, [sp, #20]
 8013e26:	f000 fc6d 	bl	8014704 <__mcmp>
 8013e2a:	9a04      	ldr	r2, [sp, #16]
 8013e2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8013e2e:	0031      	movs	r1, r6
 8013e30:	9803      	ldr	r0, [sp, #12]
 8013e32:	f000 fc83 	bl	801473c <__mdiff>
 8013e36:	2201      	movs	r2, #1
 8013e38:	68c3      	ldr	r3, [r0, #12]
 8013e3a:	0004      	movs	r4, r0
 8013e3c:	3530      	adds	r5, #48	@ 0x30
 8013e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d104      	bne.n	8013e4e <_dtoa_r+0xa42>
 8013e44:	0001      	movs	r1, r0
 8013e46:	9805      	ldr	r0, [sp, #20]
 8013e48:	f000 fc5c 	bl	8014704 <__mcmp>
 8013e4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8013e4e:	0021      	movs	r1, r4
 8013e50:	9803      	ldr	r0, [sp, #12]
 8013e52:	f000 fa15 	bl	8014280 <_Bfree>
 8013e56:	9b06      	ldr	r3, [sp, #24]
 8013e58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013e5a:	1c5c      	adds	r4, r3, #1
 8013e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e62:	4313      	orrs	r3, r2
 8013e64:	d116      	bne.n	8013e94 <_dtoa_r+0xa88>
 8013e66:	2d39      	cmp	r5, #57	@ 0x39
 8013e68:	d02f      	beq.n	8013eca <_dtoa_r+0xabe>
 8013e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	dd01      	ble.n	8013e74 <_dtoa_r+0xa68>
 8013e70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013e72:	3531      	adds	r5, #49	@ 0x31
 8013e74:	9b06      	ldr	r3, [sp, #24]
 8013e76:	701d      	strb	r5, [r3, #0]
 8013e78:	e532      	b.n	80138e0 <_dtoa_r+0x4d4>
 8013e7a:	46c0      	nop			@ (mov r8, r8)
 8013e7c:	40240000 	.word	0x40240000
 8013e80:	00000433 	.word	0x00000433
 8013e84:	7ff00000 	.word	0x7ff00000
 8013e88:	08018a32 	.word	0x08018a32
 8013e8c:	080189da 	.word	0x080189da
 8013e90:	000002ef 	.word	0x000002ef
 8013e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	db04      	blt.n	8013ea4 <_dtoa_r+0xa98>
 8013e9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013e9c:	4313      	orrs	r3, r2
 8013e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ea0:	4313      	orrs	r3, r2
 8013ea2:	d11e      	bne.n	8013ee2 <_dtoa_r+0xad6>
 8013ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	dde4      	ble.n	8013e74 <_dtoa_r+0xa68>
 8013eaa:	9905      	ldr	r1, [sp, #20]
 8013eac:	2201      	movs	r2, #1
 8013eae:	9803      	ldr	r0, [sp, #12]
 8013eb0:	f000 fbbc 	bl	801462c <__lshift>
 8013eb4:	0031      	movs	r1, r6
 8013eb6:	9005      	str	r0, [sp, #20]
 8013eb8:	f000 fc24 	bl	8014704 <__mcmp>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	dc02      	bgt.n	8013ec6 <_dtoa_r+0xaba>
 8013ec0:	d1d8      	bne.n	8013e74 <_dtoa_r+0xa68>
 8013ec2:	07eb      	lsls	r3, r5, #31
 8013ec4:	d5d6      	bpl.n	8013e74 <_dtoa_r+0xa68>
 8013ec6:	2d39      	cmp	r5, #57	@ 0x39
 8013ec8:	d1d2      	bne.n	8013e70 <_dtoa_r+0xa64>
 8013eca:	2339      	movs	r3, #57	@ 0x39
 8013ecc:	9a06      	ldr	r2, [sp, #24]
 8013ece:	7013      	strb	r3, [r2, #0]
 8013ed0:	0023      	movs	r3, r4
 8013ed2:	001c      	movs	r4, r3
 8013ed4:	3b01      	subs	r3, #1
 8013ed6:	781a      	ldrb	r2, [r3, #0]
 8013ed8:	2a39      	cmp	r2, #57	@ 0x39
 8013eda:	d050      	beq.n	8013f7e <_dtoa_r+0xb72>
 8013edc:	3201      	adds	r2, #1
 8013ede:	701a      	strb	r2, [r3, #0]
 8013ee0:	e4fe      	b.n	80138e0 <_dtoa_r+0x4d4>
 8013ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	dd03      	ble.n	8013ef0 <_dtoa_r+0xae4>
 8013ee8:	2d39      	cmp	r5, #57	@ 0x39
 8013eea:	d0ee      	beq.n	8013eca <_dtoa_r+0xabe>
 8013eec:	3501      	adds	r5, #1
 8013eee:	e7c1      	b.n	8013e74 <_dtoa_r+0xa68>
 8013ef0:	9b06      	ldr	r3, [sp, #24]
 8013ef2:	9a06      	ldr	r2, [sp, #24]
 8013ef4:	701d      	strb	r5, [r3, #0]
 8013ef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d02b      	beq.n	8013f54 <_dtoa_r+0xb48>
 8013efc:	2300      	movs	r3, #0
 8013efe:	220a      	movs	r2, #10
 8013f00:	9905      	ldr	r1, [sp, #20]
 8013f02:	9803      	ldr	r0, [sp, #12]
 8013f04:	f000 f9e0 	bl	80142c8 <__multadd>
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	9005      	str	r0, [sp, #20]
 8013f0c:	429f      	cmp	r7, r3
 8013f0e:	d109      	bne.n	8013f24 <_dtoa_r+0xb18>
 8013f10:	0039      	movs	r1, r7
 8013f12:	2300      	movs	r3, #0
 8013f14:	220a      	movs	r2, #10
 8013f16:	9803      	ldr	r0, [sp, #12]
 8013f18:	f000 f9d6 	bl	80142c8 <__multadd>
 8013f1c:	0007      	movs	r7, r0
 8013f1e:	9004      	str	r0, [sp, #16]
 8013f20:	9406      	str	r4, [sp, #24]
 8013f22:	e778      	b.n	8013e16 <_dtoa_r+0xa0a>
 8013f24:	0039      	movs	r1, r7
 8013f26:	2300      	movs	r3, #0
 8013f28:	220a      	movs	r2, #10
 8013f2a:	9803      	ldr	r0, [sp, #12]
 8013f2c:	f000 f9cc 	bl	80142c8 <__multadd>
 8013f30:	2300      	movs	r3, #0
 8013f32:	0007      	movs	r7, r0
 8013f34:	220a      	movs	r2, #10
 8013f36:	9904      	ldr	r1, [sp, #16]
 8013f38:	9803      	ldr	r0, [sp, #12]
 8013f3a:	f000 f9c5 	bl	80142c8 <__multadd>
 8013f3e:	9004      	str	r0, [sp, #16]
 8013f40:	e7ee      	b.n	8013f20 <_dtoa_r+0xb14>
 8013f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f44:	2401      	movs	r4, #1
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	dd00      	ble.n	8013f4c <_dtoa_r+0xb40>
 8013f4a:	001c      	movs	r4, r3
 8013f4c:	9704      	str	r7, [sp, #16]
 8013f4e:	2700      	movs	r7, #0
 8013f50:	9b08      	ldr	r3, [sp, #32]
 8013f52:	191c      	adds	r4, r3, r4
 8013f54:	9905      	ldr	r1, [sp, #20]
 8013f56:	2201      	movs	r2, #1
 8013f58:	9803      	ldr	r0, [sp, #12]
 8013f5a:	f000 fb67 	bl	801462c <__lshift>
 8013f5e:	0031      	movs	r1, r6
 8013f60:	9005      	str	r0, [sp, #20]
 8013f62:	f000 fbcf 	bl	8014704 <__mcmp>
 8013f66:	2800      	cmp	r0, #0
 8013f68:	dcb2      	bgt.n	8013ed0 <_dtoa_r+0xac4>
 8013f6a:	d101      	bne.n	8013f70 <_dtoa_r+0xb64>
 8013f6c:	07ed      	lsls	r5, r5, #31
 8013f6e:	d4af      	bmi.n	8013ed0 <_dtoa_r+0xac4>
 8013f70:	0023      	movs	r3, r4
 8013f72:	001c      	movs	r4, r3
 8013f74:	3b01      	subs	r3, #1
 8013f76:	781a      	ldrb	r2, [r3, #0]
 8013f78:	2a30      	cmp	r2, #48	@ 0x30
 8013f7a:	d0fa      	beq.n	8013f72 <_dtoa_r+0xb66>
 8013f7c:	e4b0      	b.n	80138e0 <_dtoa_r+0x4d4>
 8013f7e:	9a08      	ldr	r2, [sp, #32]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d1a6      	bne.n	8013ed2 <_dtoa_r+0xac6>
 8013f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f86:	3301      	adds	r3, #1
 8013f88:	930c      	str	r3, [sp, #48]	@ 0x30
 8013f8a:	2331      	movs	r3, #49	@ 0x31
 8013f8c:	7013      	strb	r3, [r2, #0]
 8013f8e:	e4a7      	b.n	80138e0 <_dtoa_r+0x4d4>
 8013f90:	4b14      	ldr	r3, [pc, #80]	@ (8013fe4 <_dtoa_r+0xbd8>)
 8013f92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013f94:	9308      	str	r3, [sp, #32]
 8013f96:	4b14      	ldr	r3, [pc, #80]	@ (8013fe8 <_dtoa_r+0xbdc>)
 8013f98:	2a00      	cmp	r2, #0
 8013f9a:	d001      	beq.n	8013fa0 <_dtoa_r+0xb94>
 8013f9c:	f7ff fa7e 	bl	801349c <_dtoa_r+0x90>
 8013fa0:	f7ff fa7e 	bl	80134a0 <_dtoa_r+0x94>
 8013fa4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	dc00      	bgt.n	8013fac <_dtoa_r+0xba0>
 8013faa:	e648      	b.n	8013c3e <_dtoa_r+0x832>
 8013fac:	2001      	movs	r0, #1
 8013fae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8013fb0:	e665      	b.n	8013c7e <_dtoa_r+0x872>
 8013fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	dc00      	bgt.n	8013fba <_dtoa_r+0xbae>
 8013fb8:	e6a9      	b.n	8013d0e <_dtoa_r+0x902>
 8013fba:	2400      	movs	r4, #0
 8013fbc:	0031      	movs	r1, r6
 8013fbe:	9805      	ldr	r0, [sp, #20]
 8013fc0:	f7ff f99f 	bl	8013302 <quorem>
 8013fc4:	9b08      	ldr	r3, [sp, #32]
 8013fc6:	3030      	adds	r0, #48	@ 0x30
 8013fc8:	5518      	strb	r0, [r3, r4]
 8013fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fcc:	3401      	adds	r4, #1
 8013fce:	0005      	movs	r5, r0
 8013fd0:	42a3      	cmp	r3, r4
 8013fd2:	ddb6      	ble.n	8013f42 <_dtoa_r+0xb36>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	220a      	movs	r2, #10
 8013fd8:	9905      	ldr	r1, [sp, #20]
 8013fda:	9803      	ldr	r0, [sp, #12]
 8013fdc:	f000 f974 	bl	80142c8 <__multadd>
 8013fe0:	9005      	str	r0, [sp, #20]
 8013fe2:	e7eb      	b.n	8013fbc <_dtoa_r+0xbb0>
 8013fe4:	080189b6 	.word	0x080189b6
 8013fe8:	080189be 	.word	0x080189be

08013fec <_free_r>:
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	0005      	movs	r5, r0
 8013ff0:	1e0c      	subs	r4, r1, #0
 8013ff2:	d010      	beq.n	8014016 <_free_r+0x2a>
 8013ff4:	3c04      	subs	r4, #4
 8013ff6:	6823      	ldr	r3, [r4, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	da00      	bge.n	8013ffe <_free_r+0x12>
 8013ffc:	18e4      	adds	r4, r4, r3
 8013ffe:	0028      	movs	r0, r5
 8014000:	f000 f8ea 	bl	80141d8 <__malloc_lock>
 8014004:	4a1d      	ldr	r2, [pc, #116]	@ (801407c <_free_r+0x90>)
 8014006:	6813      	ldr	r3, [r2, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d105      	bne.n	8014018 <_free_r+0x2c>
 801400c:	6063      	str	r3, [r4, #4]
 801400e:	6014      	str	r4, [r2, #0]
 8014010:	0028      	movs	r0, r5
 8014012:	f000 f8e9 	bl	80141e8 <__malloc_unlock>
 8014016:	bd70      	pop	{r4, r5, r6, pc}
 8014018:	42a3      	cmp	r3, r4
 801401a:	d908      	bls.n	801402e <_free_r+0x42>
 801401c:	6820      	ldr	r0, [r4, #0]
 801401e:	1821      	adds	r1, r4, r0
 8014020:	428b      	cmp	r3, r1
 8014022:	d1f3      	bne.n	801400c <_free_r+0x20>
 8014024:	6819      	ldr	r1, [r3, #0]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	1809      	adds	r1, r1, r0
 801402a:	6021      	str	r1, [r4, #0]
 801402c:	e7ee      	b.n	801400c <_free_r+0x20>
 801402e:	001a      	movs	r2, r3
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d001      	beq.n	801403a <_free_r+0x4e>
 8014036:	42a3      	cmp	r3, r4
 8014038:	d9f9      	bls.n	801402e <_free_r+0x42>
 801403a:	6811      	ldr	r1, [r2, #0]
 801403c:	1850      	adds	r0, r2, r1
 801403e:	42a0      	cmp	r0, r4
 8014040:	d10b      	bne.n	801405a <_free_r+0x6e>
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	1809      	adds	r1, r1, r0
 8014046:	1850      	adds	r0, r2, r1
 8014048:	6011      	str	r1, [r2, #0]
 801404a:	4283      	cmp	r3, r0
 801404c:	d1e0      	bne.n	8014010 <_free_r+0x24>
 801404e:	6818      	ldr	r0, [r3, #0]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	1841      	adds	r1, r0, r1
 8014054:	6011      	str	r1, [r2, #0]
 8014056:	6053      	str	r3, [r2, #4]
 8014058:	e7da      	b.n	8014010 <_free_r+0x24>
 801405a:	42a0      	cmp	r0, r4
 801405c:	d902      	bls.n	8014064 <_free_r+0x78>
 801405e:	230c      	movs	r3, #12
 8014060:	602b      	str	r3, [r5, #0]
 8014062:	e7d5      	b.n	8014010 <_free_r+0x24>
 8014064:	6820      	ldr	r0, [r4, #0]
 8014066:	1821      	adds	r1, r4, r0
 8014068:	428b      	cmp	r3, r1
 801406a:	d103      	bne.n	8014074 <_free_r+0x88>
 801406c:	6819      	ldr	r1, [r3, #0]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	1809      	adds	r1, r1, r0
 8014072:	6021      	str	r1, [r4, #0]
 8014074:	6063      	str	r3, [r4, #4]
 8014076:	6054      	str	r4, [r2, #4]
 8014078:	e7ca      	b.n	8014010 <_free_r+0x24>
 801407a:	46c0      	nop			@ (mov r8, r8)
 801407c:	20001e9c 	.word	0x20001e9c

08014080 <malloc>:
 8014080:	b510      	push	{r4, lr}
 8014082:	4b03      	ldr	r3, [pc, #12]	@ (8014090 <malloc+0x10>)
 8014084:	0001      	movs	r1, r0
 8014086:	6818      	ldr	r0, [r3, #0]
 8014088:	f000 f826 	bl	80140d8 <_malloc_r>
 801408c:	bd10      	pop	{r4, pc}
 801408e:	46c0      	nop			@ (mov r8, r8)
 8014090:	20000214 	.word	0x20000214

08014094 <sbrk_aligned>:
 8014094:	b570      	push	{r4, r5, r6, lr}
 8014096:	4e0f      	ldr	r6, [pc, #60]	@ (80140d4 <sbrk_aligned+0x40>)
 8014098:	000d      	movs	r5, r1
 801409a:	6831      	ldr	r1, [r6, #0]
 801409c:	0004      	movs	r4, r0
 801409e:	2900      	cmp	r1, #0
 80140a0:	d102      	bne.n	80140a8 <sbrk_aligned+0x14>
 80140a2:	f000 fcf7 	bl	8014a94 <_sbrk_r>
 80140a6:	6030      	str	r0, [r6, #0]
 80140a8:	0029      	movs	r1, r5
 80140aa:	0020      	movs	r0, r4
 80140ac:	f000 fcf2 	bl	8014a94 <_sbrk_r>
 80140b0:	1c43      	adds	r3, r0, #1
 80140b2:	d103      	bne.n	80140bc <sbrk_aligned+0x28>
 80140b4:	2501      	movs	r5, #1
 80140b6:	426d      	negs	r5, r5
 80140b8:	0028      	movs	r0, r5
 80140ba:	bd70      	pop	{r4, r5, r6, pc}
 80140bc:	2303      	movs	r3, #3
 80140be:	1cc5      	adds	r5, r0, #3
 80140c0:	439d      	bics	r5, r3
 80140c2:	42a8      	cmp	r0, r5
 80140c4:	d0f8      	beq.n	80140b8 <sbrk_aligned+0x24>
 80140c6:	1a29      	subs	r1, r5, r0
 80140c8:	0020      	movs	r0, r4
 80140ca:	f000 fce3 	bl	8014a94 <_sbrk_r>
 80140ce:	3001      	adds	r0, #1
 80140d0:	d1f2      	bne.n	80140b8 <sbrk_aligned+0x24>
 80140d2:	e7ef      	b.n	80140b4 <sbrk_aligned+0x20>
 80140d4:	20001e98 	.word	0x20001e98

080140d8 <_malloc_r>:
 80140d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140da:	2203      	movs	r2, #3
 80140dc:	1ccb      	adds	r3, r1, #3
 80140de:	4393      	bics	r3, r2
 80140e0:	3308      	adds	r3, #8
 80140e2:	0005      	movs	r5, r0
 80140e4:	001f      	movs	r7, r3
 80140e6:	2b0c      	cmp	r3, #12
 80140e8:	d234      	bcs.n	8014154 <_malloc_r+0x7c>
 80140ea:	270c      	movs	r7, #12
 80140ec:	42b9      	cmp	r1, r7
 80140ee:	d833      	bhi.n	8014158 <_malloc_r+0x80>
 80140f0:	0028      	movs	r0, r5
 80140f2:	f000 f871 	bl	80141d8 <__malloc_lock>
 80140f6:	4e37      	ldr	r6, [pc, #220]	@ (80141d4 <_malloc_r+0xfc>)
 80140f8:	6833      	ldr	r3, [r6, #0]
 80140fa:	001c      	movs	r4, r3
 80140fc:	2c00      	cmp	r4, #0
 80140fe:	d12f      	bne.n	8014160 <_malloc_r+0x88>
 8014100:	0039      	movs	r1, r7
 8014102:	0028      	movs	r0, r5
 8014104:	f7ff ffc6 	bl	8014094 <sbrk_aligned>
 8014108:	0004      	movs	r4, r0
 801410a:	1c43      	adds	r3, r0, #1
 801410c:	d15f      	bne.n	80141ce <_malloc_r+0xf6>
 801410e:	6834      	ldr	r4, [r6, #0]
 8014110:	9400      	str	r4, [sp, #0]
 8014112:	9b00      	ldr	r3, [sp, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d14a      	bne.n	80141ae <_malloc_r+0xd6>
 8014118:	2c00      	cmp	r4, #0
 801411a:	d052      	beq.n	80141c2 <_malloc_r+0xea>
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	0028      	movs	r0, r5
 8014120:	18e3      	adds	r3, r4, r3
 8014122:	9900      	ldr	r1, [sp, #0]
 8014124:	9301      	str	r3, [sp, #4]
 8014126:	f000 fcb5 	bl	8014a94 <_sbrk_r>
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	4283      	cmp	r3, r0
 801412e:	d148      	bne.n	80141c2 <_malloc_r+0xea>
 8014130:	6823      	ldr	r3, [r4, #0]
 8014132:	0028      	movs	r0, r5
 8014134:	1aff      	subs	r7, r7, r3
 8014136:	0039      	movs	r1, r7
 8014138:	f7ff ffac 	bl	8014094 <sbrk_aligned>
 801413c:	3001      	adds	r0, #1
 801413e:	d040      	beq.n	80141c2 <_malloc_r+0xea>
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	19db      	adds	r3, r3, r7
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	6833      	ldr	r3, [r6, #0]
 8014148:	685a      	ldr	r2, [r3, #4]
 801414a:	2a00      	cmp	r2, #0
 801414c:	d133      	bne.n	80141b6 <_malloc_r+0xde>
 801414e:	9b00      	ldr	r3, [sp, #0]
 8014150:	6033      	str	r3, [r6, #0]
 8014152:	e019      	b.n	8014188 <_malloc_r+0xb0>
 8014154:	2b00      	cmp	r3, #0
 8014156:	dac9      	bge.n	80140ec <_malloc_r+0x14>
 8014158:	230c      	movs	r3, #12
 801415a:	602b      	str	r3, [r5, #0]
 801415c:	2000      	movs	r0, #0
 801415e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014160:	6821      	ldr	r1, [r4, #0]
 8014162:	1bc9      	subs	r1, r1, r7
 8014164:	d420      	bmi.n	80141a8 <_malloc_r+0xd0>
 8014166:	290b      	cmp	r1, #11
 8014168:	d90a      	bls.n	8014180 <_malloc_r+0xa8>
 801416a:	19e2      	adds	r2, r4, r7
 801416c:	6027      	str	r7, [r4, #0]
 801416e:	42a3      	cmp	r3, r4
 8014170:	d104      	bne.n	801417c <_malloc_r+0xa4>
 8014172:	6032      	str	r2, [r6, #0]
 8014174:	6863      	ldr	r3, [r4, #4]
 8014176:	6011      	str	r1, [r2, #0]
 8014178:	6053      	str	r3, [r2, #4]
 801417a:	e005      	b.n	8014188 <_malloc_r+0xb0>
 801417c:	605a      	str	r2, [r3, #4]
 801417e:	e7f9      	b.n	8014174 <_malloc_r+0x9c>
 8014180:	6862      	ldr	r2, [r4, #4]
 8014182:	42a3      	cmp	r3, r4
 8014184:	d10e      	bne.n	80141a4 <_malloc_r+0xcc>
 8014186:	6032      	str	r2, [r6, #0]
 8014188:	0028      	movs	r0, r5
 801418a:	f000 f82d 	bl	80141e8 <__malloc_unlock>
 801418e:	0020      	movs	r0, r4
 8014190:	2207      	movs	r2, #7
 8014192:	300b      	adds	r0, #11
 8014194:	1d23      	adds	r3, r4, #4
 8014196:	4390      	bics	r0, r2
 8014198:	1ac2      	subs	r2, r0, r3
 801419a:	4298      	cmp	r0, r3
 801419c:	d0df      	beq.n	801415e <_malloc_r+0x86>
 801419e:	1a1b      	subs	r3, r3, r0
 80141a0:	50a3      	str	r3, [r4, r2]
 80141a2:	e7dc      	b.n	801415e <_malloc_r+0x86>
 80141a4:	605a      	str	r2, [r3, #4]
 80141a6:	e7ef      	b.n	8014188 <_malloc_r+0xb0>
 80141a8:	0023      	movs	r3, r4
 80141aa:	6864      	ldr	r4, [r4, #4]
 80141ac:	e7a6      	b.n	80140fc <_malloc_r+0x24>
 80141ae:	9c00      	ldr	r4, [sp, #0]
 80141b0:	6863      	ldr	r3, [r4, #4]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	e7ad      	b.n	8014112 <_malloc_r+0x3a>
 80141b6:	001a      	movs	r2, r3
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	42a3      	cmp	r3, r4
 80141bc:	d1fb      	bne.n	80141b6 <_malloc_r+0xde>
 80141be:	2300      	movs	r3, #0
 80141c0:	e7da      	b.n	8014178 <_malloc_r+0xa0>
 80141c2:	230c      	movs	r3, #12
 80141c4:	0028      	movs	r0, r5
 80141c6:	602b      	str	r3, [r5, #0]
 80141c8:	f000 f80e 	bl	80141e8 <__malloc_unlock>
 80141cc:	e7c6      	b.n	801415c <_malloc_r+0x84>
 80141ce:	6007      	str	r7, [r0, #0]
 80141d0:	e7da      	b.n	8014188 <_malloc_r+0xb0>
 80141d2:	46c0      	nop			@ (mov r8, r8)
 80141d4:	20001e9c 	.word	0x20001e9c

080141d8 <__malloc_lock>:
 80141d8:	b510      	push	{r4, lr}
 80141da:	4802      	ldr	r0, [pc, #8]	@ (80141e4 <__malloc_lock+0xc>)
 80141dc:	f7ff f87b 	bl	80132d6 <__retarget_lock_acquire_recursive>
 80141e0:	bd10      	pop	{r4, pc}
 80141e2:	46c0      	nop			@ (mov r8, r8)
 80141e4:	20001e94 	.word	0x20001e94

080141e8 <__malloc_unlock>:
 80141e8:	b510      	push	{r4, lr}
 80141ea:	4802      	ldr	r0, [pc, #8]	@ (80141f4 <__malloc_unlock+0xc>)
 80141ec:	f7ff f874 	bl	80132d8 <__retarget_lock_release_recursive>
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	46c0      	nop			@ (mov r8, r8)
 80141f4:	20001e94 	.word	0x20001e94

080141f8 <_Balloc>:
 80141f8:	b570      	push	{r4, r5, r6, lr}
 80141fa:	69c5      	ldr	r5, [r0, #28]
 80141fc:	0006      	movs	r6, r0
 80141fe:	000c      	movs	r4, r1
 8014200:	2d00      	cmp	r5, #0
 8014202:	d10e      	bne.n	8014222 <_Balloc+0x2a>
 8014204:	2010      	movs	r0, #16
 8014206:	f7ff ff3b 	bl	8014080 <malloc>
 801420a:	1e02      	subs	r2, r0, #0
 801420c:	61f0      	str	r0, [r6, #28]
 801420e:	d104      	bne.n	801421a <_Balloc+0x22>
 8014210:	216b      	movs	r1, #107	@ 0x6b
 8014212:	4b19      	ldr	r3, [pc, #100]	@ (8014278 <_Balloc+0x80>)
 8014214:	4819      	ldr	r0, [pc, #100]	@ (801427c <_Balloc+0x84>)
 8014216:	f000 fc4f 	bl	8014ab8 <__assert_func>
 801421a:	6045      	str	r5, [r0, #4]
 801421c:	6085      	str	r5, [r0, #8]
 801421e:	6005      	str	r5, [r0, #0]
 8014220:	60c5      	str	r5, [r0, #12]
 8014222:	69f5      	ldr	r5, [r6, #28]
 8014224:	68eb      	ldr	r3, [r5, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d013      	beq.n	8014252 <_Balloc+0x5a>
 801422a:	69f3      	ldr	r3, [r6, #28]
 801422c:	00a2      	lsls	r2, r4, #2
 801422e:	68db      	ldr	r3, [r3, #12]
 8014230:	189b      	adds	r3, r3, r2
 8014232:	6818      	ldr	r0, [r3, #0]
 8014234:	2800      	cmp	r0, #0
 8014236:	d118      	bne.n	801426a <_Balloc+0x72>
 8014238:	2101      	movs	r1, #1
 801423a:	000d      	movs	r5, r1
 801423c:	40a5      	lsls	r5, r4
 801423e:	1d6a      	adds	r2, r5, #5
 8014240:	0030      	movs	r0, r6
 8014242:	0092      	lsls	r2, r2, #2
 8014244:	f000 fc56 	bl	8014af4 <_calloc_r>
 8014248:	2800      	cmp	r0, #0
 801424a:	d00c      	beq.n	8014266 <_Balloc+0x6e>
 801424c:	6044      	str	r4, [r0, #4]
 801424e:	6085      	str	r5, [r0, #8]
 8014250:	e00d      	b.n	801426e <_Balloc+0x76>
 8014252:	2221      	movs	r2, #33	@ 0x21
 8014254:	2104      	movs	r1, #4
 8014256:	0030      	movs	r0, r6
 8014258:	f000 fc4c 	bl	8014af4 <_calloc_r>
 801425c:	69f3      	ldr	r3, [r6, #28]
 801425e:	60e8      	str	r0, [r5, #12]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d1e1      	bne.n	801422a <_Balloc+0x32>
 8014266:	2000      	movs	r0, #0
 8014268:	bd70      	pop	{r4, r5, r6, pc}
 801426a:	6802      	ldr	r2, [r0, #0]
 801426c:	601a      	str	r2, [r3, #0]
 801426e:	2300      	movs	r3, #0
 8014270:	6103      	str	r3, [r0, #16]
 8014272:	60c3      	str	r3, [r0, #12]
 8014274:	e7f8      	b.n	8014268 <_Balloc+0x70>
 8014276:	46c0      	nop			@ (mov r8, r8)
 8014278:	080189c3 	.word	0x080189c3
 801427c:	08018a43 	.word	0x08018a43

08014280 <_Bfree>:
 8014280:	b570      	push	{r4, r5, r6, lr}
 8014282:	69c6      	ldr	r6, [r0, #28]
 8014284:	0005      	movs	r5, r0
 8014286:	000c      	movs	r4, r1
 8014288:	2e00      	cmp	r6, #0
 801428a:	d10e      	bne.n	80142aa <_Bfree+0x2a>
 801428c:	2010      	movs	r0, #16
 801428e:	f7ff fef7 	bl	8014080 <malloc>
 8014292:	1e02      	subs	r2, r0, #0
 8014294:	61e8      	str	r0, [r5, #28]
 8014296:	d104      	bne.n	80142a2 <_Bfree+0x22>
 8014298:	218f      	movs	r1, #143	@ 0x8f
 801429a:	4b09      	ldr	r3, [pc, #36]	@ (80142c0 <_Bfree+0x40>)
 801429c:	4809      	ldr	r0, [pc, #36]	@ (80142c4 <_Bfree+0x44>)
 801429e:	f000 fc0b 	bl	8014ab8 <__assert_func>
 80142a2:	6046      	str	r6, [r0, #4]
 80142a4:	6086      	str	r6, [r0, #8]
 80142a6:	6006      	str	r6, [r0, #0]
 80142a8:	60c6      	str	r6, [r0, #12]
 80142aa:	2c00      	cmp	r4, #0
 80142ac:	d007      	beq.n	80142be <_Bfree+0x3e>
 80142ae:	69eb      	ldr	r3, [r5, #28]
 80142b0:	6862      	ldr	r2, [r4, #4]
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	0092      	lsls	r2, r2, #2
 80142b6:	189b      	adds	r3, r3, r2
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	6022      	str	r2, [r4, #0]
 80142bc:	601c      	str	r4, [r3, #0]
 80142be:	bd70      	pop	{r4, r5, r6, pc}
 80142c0:	080189c3 	.word	0x080189c3
 80142c4:	08018a43 	.word	0x08018a43

080142c8 <__multadd>:
 80142c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142ca:	000f      	movs	r7, r1
 80142cc:	9001      	str	r0, [sp, #4]
 80142ce:	000c      	movs	r4, r1
 80142d0:	001e      	movs	r6, r3
 80142d2:	2000      	movs	r0, #0
 80142d4:	690d      	ldr	r5, [r1, #16]
 80142d6:	3714      	adds	r7, #20
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	3001      	adds	r0, #1
 80142dc:	b299      	uxth	r1, r3
 80142de:	4351      	muls	r1, r2
 80142e0:	0c1b      	lsrs	r3, r3, #16
 80142e2:	4353      	muls	r3, r2
 80142e4:	1989      	adds	r1, r1, r6
 80142e6:	0c0e      	lsrs	r6, r1, #16
 80142e8:	199b      	adds	r3, r3, r6
 80142ea:	0c1e      	lsrs	r6, r3, #16
 80142ec:	b289      	uxth	r1, r1
 80142ee:	041b      	lsls	r3, r3, #16
 80142f0:	185b      	adds	r3, r3, r1
 80142f2:	c708      	stmia	r7!, {r3}
 80142f4:	4285      	cmp	r5, r0
 80142f6:	dcef      	bgt.n	80142d8 <__multadd+0x10>
 80142f8:	2e00      	cmp	r6, #0
 80142fa:	d022      	beq.n	8014342 <__multadd+0x7a>
 80142fc:	68a3      	ldr	r3, [r4, #8]
 80142fe:	42ab      	cmp	r3, r5
 8014300:	dc19      	bgt.n	8014336 <__multadd+0x6e>
 8014302:	6861      	ldr	r1, [r4, #4]
 8014304:	9801      	ldr	r0, [sp, #4]
 8014306:	3101      	adds	r1, #1
 8014308:	f7ff ff76 	bl	80141f8 <_Balloc>
 801430c:	1e07      	subs	r7, r0, #0
 801430e:	d105      	bne.n	801431c <__multadd+0x54>
 8014310:	003a      	movs	r2, r7
 8014312:	21ba      	movs	r1, #186	@ 0xba
 8014314:	4b0c      	ldr	r3, [pc, #48]	@ (8014348 <__multadd+0x80>)
 8014316:	480d      	ldr	r0, [pc, #52]	@ (801434c <__multadd+0x84>)
 8014318:	f000 fbce 	bl	8014ab8 <__assert_func>
 801431c:	0021      	movs	r1, r4
 801431e:	6922      	ldr	r2, [r4, #16]
 8014320:	310c      	adds	r1, #12
 8014322:	3202      	adds	r2, #2
 8014324:	0092      	lsls	r2, r2, #2
 8014326:	300c      	adds	r0, #12
 8014328:	f7fe ffe2 	bl	80132f0 <memcpy>
 801432c:	0021      	movs	r1, r4
 801432e:	9801      	ldr	r0, [sp, #4]
 8014330:	f7ff ffa6 	bl	8014280 <_Bfree>
 8014334:	003c      	movs	r4, r7
 8014336:	1d2b      	adds	r3, r5, #4
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	18e3      	adds	r3, r4, r3
 801433c:	3501      	adds	r5, #1
 801433e:	605e      	str	r6, [r3, #4]
 8014340:	6125      	str	r5, [r4, #16]
 8014342:	0020      	movs	r0, r4
 8014344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014346:	46c0      	nop			@ (mov r8, r8)
 8014348:	08018a32 	.word	0x08018a32
 801434c:	08018a43 	.word	0x08018a43

08014350 <__hi0bits>:
 8014350:	2280      	movs	r2, #128	@ 0x80
 8014352:	0003      	movs	r3, r0
 8014354:	0252      	lsls	r2, r2, #9
 8014356:	2000      	movs	r0, #0
 8014358:	4293      	cmp	r3, r2
 801435a:	d201      	bcs.n	8014360 <__hi0bits+0x10>
 801435c:	041b      	lsls	r3, r3, #16
 801435e:	3010      	adds	r0, #16
 8014360:	2280      	movs	r2, #128	@ 0x80
 8014362:	0452      	lsls	r2, r2, #17
 8014364:	4293      	cmp	r3, r2
 8014366:	d201      	bcs.n	801436c <__hi0bits+0x1c>
 8014368:	3008      	adds	r0, #8
 801436a:	021b      	lsls	r3, r3, #8
 801436c:	2280      	movs	r2, #128	@ 0x80
 801436e:	0552      	lsls	r2, r2, #21
 8014370:	4293      	cmp	r3, r2
 8014372:	d201      	bcs.n	8014378 <__hi0bits+0x28>
 8014374:	3004      	adds	r0, #4
 8014376:	011b      	lsls	r3, r3, #4
 8014378:	2280      	movs	r2, #128	@ 0x80
 801437a:	05d2      	lsls	r2, r2, #23
 801437c:	4293      	cmp	r3, r2
 801437e:	d201      	bcs.n	8014384 <__hi0bits+0x34>
 8014380:	3002      	adds	r0, #2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	2b00      	cmp	r3, #0
 8014386:	db03      	blt.n	8014390 <__hi0bits+0x40>
 8014388:	3001      	adds	r0, #1
 801438a:	4213      	tst	r3, r2
 801438c:	d100      	bne.n	8014390 <__hi0bits+0x40>
 801438e:	2020      	movs	r0, #32
 8014390:	4770      	bx	lr

08014392 <__lo0bits>:
 8014392:	6803      	ldr	r3, [r0, #0]
 8014394:	0001      	movs	r1, r0
 8014396:	2207      	movs	r2, #7
 8014398:	0018      	movs	r0, r3
 801439a:	4010      	ands	r0, r2
 801439c:	4213      	tst	r3, r2
 801439e:	d00d      	beq.n	80143bc <__lo0bits+0x2a>
 80143a0:	3a06      	subs	r2, #6
 80143a2:	2000      	movs	r0, #0
 80143a4:	4213      	tst	r3, r2
 80143a6:	d105      	bne.n	80143b4 <__lo0bits+0x22>
 80143a8:	3002      	adds	r0, #2
 80143aa:	4203      	tst	r3, r0
 80143ac:	d003      	beq.n	80143b6 <__lo0bits+0x24>
 80143ae:	40d3      	lsrs	r3, r2
 80143b0:	0010      	movs	r0, r2
 80143b2:	600b      	str	r3, [r1, #0]
 80143b4:	4770      	bx	lr
 80143b6:	089b      	lsrs	r3, r3, #2
 80143b8:	600b      	str	r3, [r1, #0]
 80143ba:	e7fb      	b.n	80143b4 <__lo0bits+0x22>
 80143bc:	b29a      	uxth	r2, r3
 80143be:	2a00      	cmp	r2, #0
 80143c0:	d101      	bne.n	80143c6 <__lo0bits+0x34>
 80143c2:	2010      	movs	r0, #16
 80143c4:	0c1b      	lsrs	r3, r3, #16
 80143c6:	b2da      	uxtb	r2, r3
 80143c8:	2a00      	cmp	r2, #0
 80143ca:	d101      	bne.n	80143d0 <__lo0bits+0x3e>
 80143cc:	3008      	adds	r0, #8
 80143ce:	0a1b      	lsrs	r3, r3, #8
 80143d0:	071a      	lsls	r2, r3, #28
 80143d2:	d101      	bne.n	80143d8 <__lo0bits+0x46>
 80143d4:	3004      	adds	r0, #4
 80143d6:	091b      	lsrs	r3, r3, #4
 80143d8:	079a      	lsls	r2, r3, #30
 80143da:	d101      	bne.n	80143e0 <__lo0bits+0x4e>
 80143dc:	3002      	adds	r0, #2
 80143de:	089b      	lsrs	r3, r3, #2
 80143e0:	07da      	lsls	r2, r3, #31
 80143e2:	d4e9      	bmi.n	80143b8 <__lo0bits+0x26>
 80143e4:	3001      	adds	r0, #1
 80143e6:	085b      	lsrs	r3, r3, #1
 80143e8:	d1e6      	bne.n	80143b8 <__lo0bits+0x26>
 80143ea:	2020      	movs	r0, #32
 80143ec:	e7e2      	b.n	80143b4 <__lo0bits+0x22>
	...

080143f0 <__i2b>:
 80143f0:	b510      	push	{r4, lr}
 80143f2:	000c      	movs	r4, r1
 80143f4:	2101      	movs	r1, #1
 80143f6:	f7ff feff 	bl	80141f8 <_Balloc>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d107      	bne.n	801440e <__i2b+0x1e>
 80143fe:	2146      	movs	r1, #70	@ 0x46
 8014400:	4c05      	ldr	r4, [pc, #20]	@ (8014418 <__i2b+0x28>)
 8014402:	0002      	movs	r2, r0
 8014404:	4b05      	ldr	r3, [pc, #20]	@ (801441c <__i2b+0x2c>)
 8014406:	0020      	movs	r0, r4
 8014408:	31ff      	adds	r1, #255	@ 0xff
 801440a:	f000 fb55 	bl	8014ab8 <__assert_func>
 801440e:	2301      	movs	r3, #1
 8014410:	6144      	str	r4, [r0, #20]
 8014412:	6103      	str	r3, [r0, #16]
 8014414:	bd10      	pop	{r4, pc}
 8014416:	46c0      	nop			@ (mov r8, r8)
 8014418:	08018a43 	.word	0x08018a43
 801441c:	08018a32 	.word	0x08018a32

08014420 <__multiply>:
 8014420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014422:	0014      	movs	r4, r2
 8014424:	690a      	ldr	r2, [r1, #16]
 8014426:	6923      	ldr	r3, [r4, #16]
 8014428:	000d      	movs	r5, r1
 801442a:	b089      	sub	sp, #36	@ 0x24
 801442c:	429a      	cmp	r2, r3
 801442e:	db02      	blt.n	8014436 <__multiply+0x16>
 8014430:	0023      	movs	r3, r4
 8014432:	000c      	movs	r4, r1
 8014434:	001d      	movs	r5, r3
 8014436:	6927      	ldr	r7, [r4, #16]
 8014438:	692e      	ldr	r6, [r5, #16]
 801443a:	6861      	ldr	r1, [r4, #4]
 801443c:	19bb      	adds	r3, r7, r6
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	68a3      	ldr	r3, [r4, #8]
 8014442:	19ba      	adds	r2, r7, r6
 8014444:	4293      	cmp	r3, r2
 8014446:	da00      	bge.n	801444a <__multiply+0x2a>
 8014448:	3101      	adds	r1, #1
 801444a:	f7ff fed5 	bl	80141f8 <_Balloc>
 801444e:	4684      	mov	ip, r0
 8014450:	2800      	cmp	r0, #0
 8014452:	d106      	bne.n	8014462 <__multiply+0x42>
 8014454:	21b1      	movs	r1, #177	@ 0xb1
 8014456:	4662      	mov	r2, ip
 8014458:	4b44      	ldr	r3, [pc, #272]	@ (801456c <__multiply+0x14c>)
 801445a:	4845      	ldr	r0, [pc, #276]	@ (8014570 <__multiply+0x150>)
 801445c:	0049      	lsls	r1, r1, #1
 801445e:	f000 fb2b 	bl	8014ab8 <__assert_func>
 8014462:	0002      	movs	r2, r0
 8014464:	19bb      	adds	r3, r7, r6
 8014466:	3214      	adds	r2, #20
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	18d3      	adds	r3, r2, r3
 801446c:	9301      	str	r3, [sp, #4]
 801446e:	2100      	movs	r1, #0
 8014470:	0013      	movs	r3, r2
 8014472:	9801      	ldr	r0, [sp, #4]
 8014474:	4283      	cmp	r3, r0
 8014476:	d328      	bcc.n	80144ca <__multiply+0xaa>
 8014478:	0023      	movs	r3, r4
 801447a:	00bf      	lsls	r7, r7, #2
 801447c:	3314      	adds	r3, #20
 801447e:	9304      	str	r3, [sp, #16]
 8014480:	3514      	adds	r5, #20
 8014482:	19db      	adds	r3, r3, r7
 8014484:	00b6      	lsls	r6, r6, #2
 8014486:	9302      	str	r3, [sp, #8]
 8014488:	19ab      	adds	r3, r5, r6
 801448a:	9307      	str	r3, [sp, #28]
 801448c:	2304      	movs	r3, #4
 801448e:	9305      	str	r3, [sp, #20]
 8014490:	0023      	movs	r3, r4
 8014492:	9902      	ldr	r1, [sp, #8]
 8014494:	3315      	adds	r3, #21
 8014496:	4299      	cmp	r1, r3
 8014498:	d305      	bcc.n	80144a6 <__multiply+0x86>
 801449a:	1b0c      	subs	r4, r1, r4
 801449c:	3c15      	subs	r4, #21
 801449e:	08a4      	lsrs	r4, r4, #2
 80144a0:	3401      	adds	r4, #1
 80144a2:	00a3      	lsls	r3, r4, #2
 80144a4:	9305      	str	r3, [sp, #20]
 80144a6:	9b07      	ldr	r3, [sp, #28]
 80144a8:	429d      	cmp	r5, r3
 80144aa:	d310      	bcc.n	80144ce <__multiply+0xae>
 80144ac:	9b00      	ldr	r3, [sp, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	dd05      	ble.n	80144be <__multiply+0x9e>
 80144b2:	9b01      	ldr	r3, [sp, #4]
 80144b4:	3b04      	subs	r3, #4
 80144b6:	9301      	str	r3, [sp, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d052      	beq.n	8014564 <__multiply+0x144>
 80144be:	4663      	mov	r3, ip
 80144c0:	4660      	mov	r0, ip
 80144c2:	9a00      	ldr	r2, [sp, #0]
 80144c4:	611a      	str	r2, [r3, #16]
 80144c6:	b009      	add	sp, #36	@ 0x24
 80144c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ca:	c302      	stmia	r3!, {r1}
 80144cc:	e7d1      	b.n	8014472 <__multiply+0x52>
 80144ce:	682c      	ldr	r4, [r5, #0]
 80144d0:	b2a4      	uxth	r4, r4
 80144d2:	2c00      	cmp	r4, #0
 80144d4:	d01f      	beq.n	8014516 <__multiply+0xf6>
 80144d6:	2300      	movs	r3, #0
 80144d8:	0017      	movs	r7, r2
 80144da:	9e04      	ldr	r6, [sp, #16]
 80144dc:	9303      	str	r3, [sp, #12]
 80144de:	ce08      	ldmia	r6!, {r3}
 80144e0:	6839      	ldr	r1, [r7, #0]
 80144e2:	9306      	str	r3, [sp, #24]
 80144e4:	466b      	mov	r3, sp
 80144e6:	8b1b      	ldrh	r3, [r3, #24]
 80144e8:	b288      	uxth	r0, r1
 80144ea:	4363      	muls	r3, r4
 80144ec:	181b      	adds	r3, r3, r0
 80144ee:	9803      	ldr	r0, [sp, #12]
 80144f0:	0c09      	lsrs	r1, r1, #16
 80144f2:	181b      	adds	r3, r3, r0
 80144f4:	9806      	ldr	r0, [sp, #24]
 80144f6:	0c00      	lsrs	r0, r0, #16
 80144f8:	4360      	muls	r0, r4
 80144fa:	1840      	adds	r0, r0, r1
 80144fc:	0c19      	lsrs	r1, r3, #16
 80144fe:	1841      	adds	r1, r0, r1
 8014500:	0c08      	lsrs	r0, r1, #16
 8014502:	b29b      	uxth	r3, r3
 8014504:	0409      	lsls	r1, r1, #16
 8014506:	4319      	orrs	r1, r3
 8014508:	9b02      	ldr	r3, [sp, #8]
 801450a:	9003      	str	r0, [sp, #12]
 801450c:	c702      	stmia	r7!, {r1}
 801450e:	42b3      	cmp	r3, r6
 8014510:	d8e5      	bhi.n	80144de <__multiply+0xbe>
 8014512:	9b05      	ldr	r3, [sp, #20]
 8014514:	50d0      	str	r0, [r2, r3]
 8014516:	682c      	ldr	r4, [r5, #0]
 8014518:	0c24      	lsrs	r4, r4, #16
 801451a:	d020      	beq.n	801455e <__multiply+0x13e>
 801451c:	2100      	movs	r1, #0
 801451e:	0010      	movs	r0, r2
 8014520:	6813      	ldr	r3, [r2, #0]
 8014522:	9e04      	ldr	r6, [sp, #16]
 8014524:	9103      	str	r1, [sp, #12]
 8014526:	6831      	ldr	r1, [r6, #0]
 8014528:	6807      	ldr	r7, [r0, #0]
 801452a:	b289      	uxth	r1, r1
 801452c:	4361      	muls	r1, r4
 801452e:	0c3f      	lsrs	r7, r7, #16
 8014530:	19c9      	adds	r1, r1, r7
 8014532:	9f03      	ldr	r7, [sp, #12]
 8014534:	b29b      	uxth	r3, r3
 8014536:	19c9      	adds	r1, r1, r7
 8014538:	040f      	lsls	r7, r1, #16
 801453a:	431f      	orrs	r7, r3
 801453c:	6007      	str	r7, [r0, #0]
 801453e:	ce80      	ldmia	r6!, {r7}
 8014540:	6843      	ldr	r3, [r0, #4]
 8014542:	0c3f      	lsrs	r7, r7, #16
 8014544:	4367      	muls	r7, r4
 8014546:	b29b      	uxth	r3, r3
 8014548:	0c09      	lsrs	r1, r1, #16
 801454a:	18fb      	adds	r3, r7, r3
 801454c:	185b      	adds	r3, r3, r1
 801454e:	0c19      	lsrs	r1, r3, #16
 8014550:	9103      	str	r1, [sp, #12]
 8014552:	9902      	ldr	r1, [sp, #8]
 8014554:	3004      	adds	r0, #4
 8014556:	42b1      	cmp	r1, r6
 8014558:	d8e5      	bhi.n	8014526 <__multiply+0x106>
 801455a:	9905      	ldr	r1, [sp, #20]
 801455c:	5053      	str	r3, [r2, r1]
 801455e:	3504      	adds	r5, #4
 8014560:	3204      	adds	r2, #4
 8014562:	e7a0      	b.n	80144a6 <__multiply+0x86>
 8014564:	9b00      	ldr	r3, [sp, #0]
 8014566:	3b01      	subs	r3, #1
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	e79f      	b.n	80144ac <__multiply+0x8c>
 801456c:	08018a32 	.word	0x08018a32
 8014570:	08018a43 	.word	0x08018a43

08014574 <__pow5mult>:
 8014574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014576:	2303      	movs	r3, #3
 8014578:	0015      	movs	r5, r2
 801457a:	0007      	movs	r7, r0
 801457c:	000e      	movs	r6, r1
 801457e:	401a      	ands	r2, r3
 8014580:	421d      	tst	r5, r3
 8014582:	d008      	beq.n	8014596 <__pow5mult+0x22>
 8014584:	4925      	ldr	r1, [pc, #148]	@ (801461c <__pow5mult+0xa8>)
 8014586:	3a01      	subs	r2, #1
 8014588:	0092      	lsls	r2, r2, #2
 801458a:	5852      	ldr	r2, [r2, r1]
 801458c:	2300      	movs	r3, #0
 801458e:	0031      	movs	r1, r6
 8014590:	f7ff fe9a 	bl	80142c8 <__multadd>
 8014594:	0006      	movs	r6, r0
 8014596:	10ad      	asrs	r5, r5, #2
 8014598:	d03d      	beq.n	8014616 <__pow5mult+0xa2>
 801459a:	69fc      	ldr	r4, [r7, #28]
 801459c:	2c00      	cmp	r4, #0
 801459e:	d10f      	bne.n	80145c0 <__pow5mult+0x4c>
 80145a0:	2010      	movs	r0, #16
 80145a2:	f7ff fd6d 	bl	8014080 <malloc>
 80145a6:	1e02      	subs	r2, r0, #0
 80145a8:	61f8      	str	r0, [r7, #28]
 80145aa:	d105      	bne.n	80145b8 <__pow5mult+0x44>
 80145ac:	21b4      	movs	r1, #180	@ 0xb4
 80145ae:	4b1c      	ldr	r3, [pc, #112]	@ (8014620 <__pow5mult+0xac>)
 80145b0:	481c      	ldr	r0, [pc, #112]	@ (8014624 <__pow5mult+0xb0>)
 80145b2:	31ff      	adds	r1, #255	@ 0xff
 80145b4:	f000 fa80 	bl	8014ab8 <__assert_func>
 80145b8:	6044      	str	r4, [r0, #4]
 80145ba:	6084      	str	r4, [r0, #8]
 80145bc:	6004      	str	r4, [r0, #0]
 80145be:	60c4      	str	r4, [r0, #12]
 80145c0:	69fb      	ldr	r3, [r7, #28]
 80145c2:	689c      	ldr	r4, [r3, #8]
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	2c00      	cmp	r4, #0
 80145c8:	d108      	bne.n	80145dc <__pow5mult+0x68>
 80145ca:	0038      	movs	r0, r7
 80145cc:	4916      	ldr	r1, [pc, #88]	@ (8014628 <__pow5mult+0xb4>)
 80145ce:	f7ff ff0f 	bl	80143f0 <__i2b>
 80145d2:	9b01      	ldr	r3, [sp, #4]
 80145d4:	0004      	movs	r4, r0
 80145d6:	6098      	str	r0, [r3, #8]
 80145d8:	2300      	movs	r3, #0
 80145da:	6003      	str	r3, [r0, #0]
 80145dc:	2301      	movs	r3, #1
 80145de:	421d      	tst	r5, r3
 80145e0:	d00a      	beq.n	80145f8 <__pow5mult+0x84>
 80145e2:	0031      	movs	r1, r6
 80145e4:	0022      	movs	r2, r4
 80145e6:	0038      	movs	r0, r7
 80145e8:	f7ff ff1a 	bl	8014420 <__multiply>
 80145ec:	0031      	movs	r1, r6
 80145ee:	9001      	str	r0, [sp, #4]
 80145f0:	0038      	movs	r0, r7
 80145f2:	f7ff fe45 	bl	8014280 <_Bfree>
 80145f6:	9e01      	ldr	r6, [sp, #4]
 80145f8:	106d      	asrs	r5, r5, #1
 80145fa:	d00c      	beq.n	8014616 <__pow5mult+0xa2>
 80145fc:	6820      	ldr	r0, [r4, #0]
 80145fe:	2800      	cmp	r0, #0
 8014600:	d107      	bne.n	8014612 <__pow5mult+0x9e>
 8014602:	0022      	movs	r2, r4
 8014604:	0021      	movs	r1, r4
 8014606:	0038      	movs	r0, r7
 8014608:	f7ff ff0a 	bl	8014420 <__multiply>
 801460c:	2300      	movs	r3, #0
 801460e:	6020      	str	r0, [r4, #0]
 8014610:	6003      	str	r3, [r0, #0]
 8014612:	0004      	movs	r4, r0
 8014614:	e7e2      	b.n	80145dc <__pow5mult+0x68>
 8014616:	0030      	movs	r0, r6
 8014618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801461a:	46c0      	nop			@ (mov r8, r8)
 801461c:	08018af4 	.word	0x08018af4
 8014620:	080189c3 	.word	0x080189c3
 8014624:	08018a43 	.word	0x08018a43
 8014628:	00000271 	.word	0x00000271

0801462c <__lshift>:
 801462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801462e:	000c      	movs	r4, r1
 8014630:	0016      	movs	r6, r2
 8014632:	6923      	ldr	r3, [r4, #16]
 8014634:	1157      	asrs	r7, r2, #5
 8014636:	b085      	sub	sp, #20
 8014638:	18fb      	adds	r3, r7, r3
 801463a:	9301      	str	r3, [sp, #4]
 801463c:	3301      	adds	r3, #1
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	6849      	ldr	r1, [r1, #4]
 8014642:	68a3      	ldr	r3, [r4, #8]
 8014644:	9002      	str	r0, [sp, #8]
 8014646:	9a00      	ldr	r2, [sp, #0]
 8014648:	4293      	cmp	r3, r2
 801464a:	db10      	blt.n	801466e <__lshift+0x42>
 801464c:	9802      	ldr	r0, [sp, #8]
 801464e:	f7ff fdd3 	bl	80141f8 <_Balloc>
 8014652:	2300      	movs	r3, #0
 8014654:	0001      	movs	r1, r0
 8014656:	0005      	movs	r5, r0
 8014658:	001a      	movs	r2, r3
 801465a:	3114      	adds	r1, #20
 801465c:	4298      	cmp	r0, r3
 801465e:	d10c      	bne.n	801467a <__lshift+0x4e>
 8014660:	21ef      	movs	r1, #239	@ 0xef
 8014662:	002a      	movs	r2, r5
 8014664:	4b25      	ldr	r3, [pc, #148]	@ (80146fc <__lshift+0xd0>)
 8014666:	4826      	ldr	r0, [pc, #152]	@ (8014700 <__lshift+0xd4>)
 8014668:	0049      	lsls	r1, r1, #1
 801466a:	f000 fa25 	bl	8014ab8 <__assert_func>
 801466e:	3101      	adds	r1, #1
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	e7e8      	b.n	8014646 <__lshift+0x1a>
 8014674:	0098      	lsls	r0, r3, #2
 8014676:	500a      	str	r2, [r1, r0]
 8014678:	3301      	adds	r3, #1
 801467a:	42bb      	cmp	r3, r7
 801467c:	dbfa      	blt.n	8014674 <__lshift+0x48>
 801467e:	43fb      	mvns	r3, r7
 8014680:	17db      	asrs	r3, r3, #31
 8014682:	401f      	ands	r7, r3
 8014684:	00bf      	lsls	r7, r7, #2
 8014686:	0023      	movs	r3, r4
 8014688:	201f      	movs	r0, #31
 801468a:	19c9      	adds	r1, r1, r7
 801468c:	0037      	movs	r7, r6
 801468e:	6922      	ldr	r2, [r4, #16]
 8014690:	3314      	adds	r3, #20
 8014692:	0092      	lsls	r2, r2, #2
 8014694:	189a      	adds	r2, r3, r2
 8014696:	4007      	ands	r7, r0
 8014698:	4206      	tst	r6, r0
 801469a:	d029      	beq.n	80146f0 <__lshift+0xc4>
 801469c:	3001      	adds	r0, #1
 801469e:	1bc0      	subs	r0, r0, r7
 80146a0:	9003      	str	r0, [sp, #12]
 80146a2:	468c      	mov	ip, r1
 80146a4:	2000      	movs	r0, #0
 80146a6:	681e      	ldr	r6, [r3, #0]
 80146a8:	40be      	lsls	r6, r7
 80146aa:	4306      	orrs	r6, r0
 80146ac:	4660      	mov	r0, ip
 80146ae:	c040      	stmia	r0!, {r6}
 80146b0:	4684      	mov	ip, r0
 80146b2:	9e03      	ldr	r6, [sp, #12]
 80146b4:	cb01      	ldmia	r3!, {r0}
 80146b6:	40f0      	lsrs	r0, r6
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d8f4      	bhi.n	80146a6 <__lshift+0x7a>
 80146bc:	0026      	movs	r6, r4
 80146be:	3615      	adds	r6, #21
 80146c0:	2304      	movs	r3, #4
 80146c2:	42b2      	cmp	r2, r6
 80146c4:	d304      	bcc.n	80146d0 <__lshift+0xa4>
 80146c6:	1b13      	subs	r3, r2, r4
 80146c8:	3b15      	subs	r3, #21
 80146ca:	089b      	lsrs	r3, r3, #2
 80146cc:	3301      	adds	r3, #1
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	50c8      	str	r0, [r1, r3]
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d002      	beq.n	80146dc <__lshift+0xb0>
 80146d6:	9b01      	ldr	r3, [sp, #4]
 80146d8:	3302      	adds	r3, #2
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	9b00      	ldr	r3, [sp, #0]
 80146de:	9802      	ldr	r0, [sp, #8]
 80146e0:	3b01      	subs	r3, #1
 80146e2:	0021      	movs	r1, r4
 80146e4:	612b      	str	r3, [r5, #16]
 80146e6:	f7ff fdcb 	bl	8014280 <_Bfree>
 80146ea:	0028      	movs	r0, r5
 80146ec:	b005      	add	sp, #20
 80146ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146f0:	cb01      	ldmia	r3!, {r0}
 80146f2:	c101      	stmia	r1!, {r0}
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d8fb      	bhi.n	80146f0 <__lshift+0xc4>
 80146f8:	e7f0      	b.n	80146dc <__lshift+0xb0>
 80146fa:	46c0      	nop			@ (mov r8, r8)
 80146fc:	08018a32 	.word	0x08018a32
 8014700:	08018a43 	.word	0x08018a43

08014704 <__mcmp>:
 8014704:	b530      	push	{r4, r5, lr}
 8014706:	690b      	ldr	r3, [r1, #16]
 8014708:	6904      	ldr	r4, [r0, #16]
 801470a:	0002      	movs	r2, r0
 801470c:	1ae0      	subs	r0, r4, r3
 801470e:	429c      	cmp	r4, r3
 8014710:	d10f      	bne.n	8014732 <__mcmp+0x2e>
 8014712:	3214      	adds	r2, #20
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	3114      	adds	r1, #20
 8014718:	0014      	movs	r4, r2
 801471a:	18c9      	adds	r1, r1, r3
 801471c:	18d2      	adds	r2, r2, r3
 801471e:	3a04      	subs	r2, #4
 8014720:	3904      	subs	r1, #4
 8014722:	6815      	ldr	r5, [r2, #0]
 8014724:	680b      	ldr	r3, [r1, #0]
 8014726:	429d      	cmp	r5, r3
 8014728:	d004      	beq.n	8014734 <__mcmp+0x30>
 801472a:	2001      	movs	r0, #1
 801472c:	429d      	cmp	r5, r3
 801472e:	d200      	bcs.n	8014732 <__mcmp+0x2e>
 8014730:	3802      	subs	r0, #2
 8014732:	bd30      	pop	{r4, r5, pc}
 8014734:	4294      	cmp	r4, r2
 8014736:	d3f2      	bcc.n	801471e <__mcmp+0x1a>
 8014738:	e7fb      	b.n	8014732 <__mcmp+0x2e>
	...

0801473c <__mdiff>:
 801473c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801473e:	000c      	movs	r4, r1
 8014740:	b087      	sub	sp, #28
 8014742:	9000      	str	r0, [sp, #0]
 8014744:	0011      	movs	r1, r2
 8014746:	0020      	movs	r0, r4
 8014748:	0017      	movs	r7, r2
 801474a:	f7ff ffdb 	bl	8014704 <__mcmp>
 801474e:	1e05      	subs	r5, r0, #0
 8014750:	d110      	bne.n	8014774 <__mdiff+0x38>
 8014752:	0001      	movs	r1, r0
 8014754:	9800      	ldr	r0, [sp, #0]
 8014756:	f7ff fd4f 	bl	80141f8 <_Balloc>
 801475a:	1e02      	subs	r2, r0, #0
 801475c:	d104      	bne.n	8014768 <__mdiff+0x2c>
 801475e:	4b40      	ldr	r3, [pc, #256]	@ (8014860 <__mdiff+0x124>)
 8014760:	4840      	ldr	r0, [pc, #256]	@ (8014864 <__mdiff+0x128>)
 8014762:	4941      	ldr	r1, [pc, #260]	@ (8014868 <__mdiff+0x12c>)
 8014764:	f000 f9a8 	bl	8014ab8 <__assert_func>
 8014768:	2301      	movs	r3, #1
 801476a:	6145      	str	r5, [r0, #20]
 801476c:	6103      	str	r3, [r0, #16]
 801476e:	0010      	movs	r0, r2
 8014770:	b007      	add	sp, #28
 8014772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014774:	2600      	movs	r6, #0
 8014776:	42b0      	cmp	r0, r6
 8014778:	da03      	bge.n	8014782 <__mdiff+0x46>
 801477a:	0023      	movs	r3, r4
 801477c:	003c      	movs	r4, r7
 801477e:	001f      	movs	r7, r3
 8014780:	3601      	adds	r6, #1
 8014782:	6861      	ldr	r1, [r4, #4]
 8014784:	9800      	ldr	r0, [sp, #0]
 8014786:	f7ff fd37 	bl	80141f8 <_Balloc>
 801478a:	1e02      	subs	r2, r0, #0
 801478c:	d103      	bne.n	8014796 <__mdiff+0x5a>
 801478e:	4b34      	ldr	r3, [pc, #208]	@ (8014860 <__mdiff+0x124>)
 8014790:	4834      	ldr	r0, [pc, #208]	@ (8014864 <__mdiff+0x128>)
 8014792:	4936      	ldr	r1, [pc, #216]	@ (801486c <__mdiff+0x130>)
 8014794:	e7e6      	b.n	8014764 <__mdiff+0x28>
 8014796:	6923      	ldr	r3, [r4, #16]
 8014798:	3414      	adds	r4, #20
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	18e3      	adds	r3, r4, r3
 80147a0:	0021      	movs	r1, r4
 80147a2:	9401      	str	r4, [sp, #4]
 80147a4:	003c      	movs	r4, r7
 80147a6:	9302      	str	r3, [sp, #8]
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	3414      	adds	r4, #20
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	18e3      	adds	r3, r4, r3
 80147b0:	9303      	str	r3, [sp, #12]
 80147b2:	0003      	movs	r3, r0
 80147b4:	60c6      	str	r6, [r0, #12]
 80147b6:	468c      	mov	ip, r1
 80147b8:	2000      	movs	r0, #0
 80147ba:	3314      	adds	r3, #20
 80147bc:	9304      	str	r3, [sp, #16]
 80147be:	9305      	str	r3, [sp, #20]
 80147c0:	4663      	mov	r3, ip
 80147c2:	cb20      	ldmia	r3!, {r5}
 80147c4:	b2a9      	uxth	r1, r5
 80147c6:	000e      	movs	r6, r1
 80147c8:	469c      	mov	ip, r3
 80147ca:	cc08      	ldmia	r4!, {r3}
 80147cc:	0c2d      	lsrs	r5, r5, #16
 80147ce:	b299      	uxth	r1, r3
 80147d0:	1a71      	subs	r1, r6, r1
 80147d2:	1809      	adds	r1, r1, r0
 80147d4:	0c1b      	lsrs	r3, r3, #16
 80147d6:	1408      	asrs	r0, r1, #16
 80147d8:	1aeb      	subs	r3, r5, r3
 80147da:	181b      	adds	r3, r3, r0
 80147dc:	1418      	asrs	r0, r3, #16
 80147de:	b289      	uxth	r1, r1
 80147e0:	041b      	lsls	r3, r3, #16
 80147e2:	4319      	orrs	r1, r3
 80147e4:	9b05      	ldr	r3, [sp, #20]
 80147e6:	c302      	stmia	r3!, {r1}
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	9b03      	ldr	r3, [sp, #12]
 80147ec:	42a3      	cmp	r3, r4
 80147ee:	d8e7      	bhi.n	80147c0 <__mdiff+0x84>
 80147f0:	0039      	movs	r1, r7
 80147f2:	9c03      	ldr	r4, [sp, #12]
 80147f4:	3115      	adds	r1, #21
 80147f6:	2304      	movs	r3, #4
 80147f8:	428c      	cmp	r4, r1
 80147fa:	d304      	bcc.n	8014806 <__mdiff+0xca>
 80147fc:	1be3      	subs	r3, r4, r7
 80147fe:	3b15      	subs	r3, #21
 8014800:	089b      	lsrs	r3, r3, #2
 8014802:	3301      	adds	r3, #1
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	9901      	ldr	r1, [sp, #4]
 8014808:	18cd      	adds	r5, r1, r3
 801480a:	9904      	ldr	r1, [sp, #16]
 801480c:	002e      	movs	r6, r5
 801480e:	18cb      	adds	r3, r1, r3
 8014810:	001f      	movs	r7, r3
 8014812:	9902      	ldr	r1, [sp, #8]
 8014814:	428e      	cmp	r6, r1
 8014816:	d311      	bcc.n	801483c <__mdiff+0x100>
 8014818:	9c02      	ldr	r4, [sp, #8]
 801481a:	1ee9      	subs	r1, r5, #3
 801481c:	2000      	movs	r0, #0
 801481e:	428c      	cmp	r4, r1
 8014820:	d304      	bcc.n	801482c <__mdiff+0xf0>
 8014822:	0021      	movs	r1, r4
 8014824:	3103      	adds	r1, #3
 8014826:	1b49      	subs	r1, r1, r5
 8014828:	0889      	lsrs	r1, r1, #2
 801482a:	0088      	lsls	r0, r1, #2
 801482c:	181b      	adds	r3, r3, r0
 801482e:	3b04      	subs	r3, #4
 8014830:	6819      	ldr	r1, [r3, #0]
 8014832:	2900      	cmp	r1, #0
 8014834:	d010      	beq.n	8014858 <__mdiff+0x11c>
 8014836:	9b00      	ldr	r3, [sp, #0]
 8014838:	6113      	str	r3, [r2, #16]
 801483a:	e798      	b.n	801476e <__mdiff+0x32>
 801483c:	4684      	mov	ip, r0
 801483e:	ce02      	ldmia	r6!, {r1}
 8014840:	b288      	uxth	r0, r1
 8014842:	4460      	add	r0, ip
 8014844:	1400      	asrs	r0, r0, #16
 8014846:	0c0c      	lsrs	r4, r1, #16
 8014848:	1904      	adds	r4, r0, r4
 801484a:	4461      	add	r1, ip
 801484c:	1420      	asrs	r0, r4, #16
 801484e:	b289      	uxth	r1, r1
 8014850:	0424      	lsls	r4, r4, #16
 8014852:	4321      	orrs	r1, r4
 8014854:	c702      	stmia	r7!, {r1}
 8014856:	e7dc      	b.n	8014812 <__mdiff+0xd6>
 8014858:	9900      	ldr	r1, [sp, #0]
 801485a:	3901      	subs	r1, #1
 801485c:	9100      	str	r1, [sp, #0]
 801485e:	e7e6      	b.n	801482e <__mdiff+0xf2>
 8014860:	08018a32 	.word	0x08018a32
 8014864:	08018a43 	.word	0x08018a43
 8014868:	00000237 	.word	0x00000237
 801486c:	00000245 	.word	0x00000245

08014870 <__d2b>:
 8014870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014872:	2101      	movs	r1, #1
 8014874:	0016      	movs	r6, r2
 8014876:	001f      	movs	r7, r3
 8014878:	f7ff fcbe 	bl	80141f8 <_Balloc>
 801487c:	1e04      	subs	r4, r0, #0
 801487e:	d105      	bne.n	801488c <__d2b+0x1c>
 8014880:	0022      	movs	r2, r4
 8014882:	4b25      	ldr	r3, [pc, #148]	@ (8014918 <__d2b+0xa8>)
 8014884:	4825      	ldr	r0, [pc, #148]	@ (801491c <__d2b+0xac>)
 8014886:	4926      	ldr	r1, [pc, #152]	@ (8014920 <__d2b+0xb0>)
 8014888:	f000 f916 	bl	8014ab8 <__assert_func>
 801488c:	033b      	lsls	r3, r7, #12
 801488e:	007d      	lsls	r5, r7, #1
 8014890:	0b1b      	lsrs	r3, r3, #12
 8014892:	0d6d      	lsrs	r5, r5, #21
 8014894:	d002      	beq.n	801489c <__d2b+0x2c>
 8014896:	2280      	movs	r2, #128	@ 0x80
 8014898:	0352      	lsls	r2, r2, #13
 801489a:	4313      	orrs	r3, r2
 801489c:	9301      	str	r3, [sp, #4]
 801489e:	2e00      	cmp	r6, #0
 80148a0:	d025      	beq.n	80148ee <__d2b+0x7e>
 80148a2:	4668      	mov	r0, sp
 80148a4:	9600      	str	r6, [sp, #0]
 80148a6:	f7ff fd74 	bl	8014392 <__lo0bits>
 80148aa:	9b01      	ldr	r3, [sp, #4]
 80148ac:	9900      	ldr	r1, [sp, #0]
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d01b      	beq.n	80148ea <__d2b+0x7a>
 80148b2:	2220      	movs	r2, #32
 80148b4:	001e      	movs	r6, r3
 80148b6:	1a12      	subs	r2, r2, r0
 80148b8:	4096      	lsls	r6, r2
 80148ba:	0032      	movs	r2, r6
 80148bc:	40c3      	lsrs	r3, r0
 80148be:	430a      	orrs	r2, r1
 80148c0:	6162      	str	r2, [r4, #20]
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	9e01      	ldr	r6, [sp, #4]
 80148c6:	61a6      	str	r6, [r4, #24]
 80148c8:	1e73      	subs	r3, r6, #1
 80148ca:	419e      	sbcs	r6, r3
 80148cc:	3601      	adds	r6, #1
 80148ce:	6126      	str	r6, [r4, #16]
 80148d0:	2d00      	cmp	r5, #0
 80148d2:	d014      	beq.n	80148fe <__d2b+0x8e>
 80148d4:	2635      	movs	r6, #53	@ 0x35
 80148d6:	4b13      	ldr	r3, [pc, #76]	@ (8014924 <__d2b+0xb4>)
 80148d8:	18ed      	adds	r5, r5, r3
 80148da:	9b08      	ldr	r3, [sp, #32]
 80148dc:	182d      	adds	r5, r5, r0
 80148de:	601d      	str	r5, [r3, #0]
 80148e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148e2:	1a36      	subs	r6, r6, r0
 80148e4:	601e      	str	r6, [r3, #0]
 80148e6:	0020      	movs	r0, r4
 80148e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80148ea:	6161      	str	r1, [r4, #20]
 80148ec:	e7ea      	b.n	80148c4 <__d2b+0x54>
 80148ee:	a801      	add	r0, sp, #4
 80148f0:	f7ff fd4f 	bl	8014392 <__lo0bits>
 80148f4:	9b01      	ldr	r3, [sp, #4]
 80148f6:	2601      	movs	r6, #1
 80148f8:	6163      	str	r3, [r4, #20]
 80148fa:	3020      	adds	r0, #32
 80148fc:	e7e7      	b.n	80148ce <__d2b+0x5e>
 80148fe:	4b0a      	ldr	r3, [pc, #40]	@ (8014928 <__d2b+0xb8>)
 8014900:	18c0      	adds	r0, r0, r3
 8014902:	9b08      	ldr	r3, [sp, #32]
 8014904:	6018      	str	r0, [r3, #0]
 8014906:	4b09      	ldr	r3, [pc, #36]	@ (801492c <__d2b+0xbc>)
 8014908:	18f3      	adds	r3, r6, r3
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	18e3      	adds	r3, r4, r3
 801490e:	6958      	ldr	r0, [r3, #20]
 8014910:	f7ff fd1e 	bl	8014350 <__hi0bits>
 8014914:	0176      	lsls	r6, r6, #5
 8014916:	e7e3      	b.n	80148e0 <__d2b+0x70>
 8014918:	08018a32 	.word	0x08018a32
 801491c:	08018a43 	.word	0x08018a43
 8014920:	0000030f 	.word	0x0000030f
 8014924:	fffffbcd 	.word	0xfffffbcd
 8014928:	fffffbce 	.word	0xfffffbce
 801492c:	3fffffff 	.word	0x3fffffff

08014930 <__sflush_r>:
 8014930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014932:	220c      	movs	r2, #12
 8014934:	5e8b      	ldrsh	r3, [r1, r2]
 8014936:	0005      	movs	r5, r0
 8014938:	000c      	movs	r4, r1
 801493a:	071a      	lsls	r2, r3, #28
 801493c:	d456      	bmi.n	80149ec <__sflush_r+0xbc>
 801493e:	684a      	ldr	r2, [r1, #4]
 8014940:	2a00      	cmp	r2, #0
 8014942:	dc02      	bgt.n	801494a <__sflush_r+0x1a>
 8014944:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8014946:	2a00      	cmp	r2, #0
 8014948:	dd4e      	ble.n	80149e8 <__sflush_r+0xb8>
 801494a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801494c:	2f00      	cmp	r7, #0
 801494e:	d04b      	beq.n	80149e8 <__sflush_r+0xb8>
 8014950:	2200      	movs	r2, #0
 8014952:	2080      	movs	r0, #128	@ 0x80
 8014954:	682e      	ldr	r6, [r5, #0]
 8014956:	602a      	str	r2, [r5, #0]
 8014958:	001a      	movs	r2, r3
 801495a:	0140      	lsls	r0, r0, #5
 801495c:	6a21      	ldr	r1, [r4, #32]
 801495e:	4002      	ands	r2, r0
 8014960:	4203      	tst	r3, r0
 8014962:	d033      	beq.n	80149cc <__sflush_r+0x9c>
 8014964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014966:	89a3      	ldrh	r3, [r4, #12]
 8014968:	075b      	lsls	r3, r3, #29
 801496a:	d506      	bpl.n	801497a <__sflush_r+0x4a>
 801496c:	6863      	ldr	r3, [r4, #4]
 801496e:	1ad2      	subs	r2, r2, r3
 8014970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014972:	2b00      	cmp	r3, #0
 8014974:	d001      	beq.n	801497a <__sflush_r+0x4a>
 8014976:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014978:	1ad2      	subs	r2, r2, r3
 801497a:	2300      	movs	r3, #0
 801497c:	0028      	movs	r0, r5
 801497e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014980:	6a21      	ldr	r1, [r4, #32]
 8014982:	47b8      	blx	r7
 8014984:	89a2      	ldrh	r2, [r4, #12]
 8014986:	1c43      	adds	r3, r0, #1
 8014988:	d106      	bne.n	8014998 <__sflush_r+0x68>
 801498a:	6829      	ldr	r1, [r5, #0]
 801498c:	291d      	cmp	r1, #29
 801498e:	d846      	bhi.n	8014a1e <__sflush_r+0xee>
 8014990:	4b29      	ldr	r3, [pc, #164]	@ (8014a38 <__sflush_r+0x108>)
 8014992:	40cb      	lsrs	r3, r1
 8014994:	07db      	lsls	r3, r3, #31
 8014996:	d542      	bpl.n	8014a1e <__sflush_r+0xee>
 8014998:	2300      	movs	r3, #0
 801499a:	6063      	str	r3, [r4, #4]
 801499c:	6923      	ldr	r3, [r4, #16]
 801499e:	6023      	str	r3, [r4, #0]
 80149a0:	04d2      	lsls	r2, r2, #19
 80149a2:	d505      	bpl.n	80149b0 <__sflush_r+0x80>
 80149a4:	1c43      	adds	r3, r0, #1
 80149a6:	d102      	bne.n	80149ae <__sflush_r+0x7e>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d100      	bne.n	80149b0 <__sflush_r+0x80>
 80149ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80149b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149b2:	602e      	str	r6, [r5, #0]
 80149b4:	2900      	cmp	r1, #0
 80149b6:	d017      	beq.n	80149e8 <__sflush_r+0xb8>
 80149b8:	0023      	movs	r3, r4
 80149ba:	3344      	adds	r3, #68	@ 0x44
 80149bc:	4299      	cmp	r1, r3
 80149be:	d002      	beq.n	80149c6 <__sflush_r+0x96>
 80149c0:	0028      	movs	r0, r5
 80149c2:	f7ff fb13 	bl	8013fec <_free_r>
 80149c6:	2300      	movs	r3, #0
 80149c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80149ca:	e00d      	b.n	80149e8 <__sflush_r+0xb8>
 80149cc:	2301      	movs	r3, #1
 80149ce:	0028      	movs	r0, r5
 80149d0:	47b8      	blx	r7
 80149d2:	0002      	movs	r2, r0
 80149d4:	1c43      	adds	r3, r0, #1
 80149d6:	d1c6      	bne.n	8014966 <__sflush_r+0x36>
 80149d8:	682b      	ldr	r3, [r5, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d0c3      	beq.n	8014966 <__sflush_r+0x36>
 80149de:	2b1d      	cmp	r3, #29
 80149e0:	d001      	beq.n	80149e6 <__sflush_r+0xb6>
 80149e2:	2b16      	cmp	r3, #22
 80149e4:	d11a      	bne.n	8014a1c <__sflush_r+0xec>
 80149e6:	602e      	str	r6, [r5, #0]
 80149e8:	2000      	movs	r0, #0
 80149ea:	e01e      	b.n	8014a2a <__sflush_r+0xfa>
 80149ec:	690e      	ldr	r6, [r1, #16]
 80149ee:	2e00      	cmp	r6, #0
 80149f0:	d0fa      	beq.n	80149e8 <__sflush_r+0xb8>
 80149f2:	680f      	ldr	r7, [r1, #0]
 80149f4:	600e      	str	r6, [r1, #0]
 80149f6:	1bba      	subs	r2, r7, r6
 80149f8:	9201      	str	r2, [sp, #4]
 80149fa:	2200      	movs	r2, #0
 80149fc:	079b      	lsls	r3, r3, #30
 80149fe:	d100      	bne.n	8014a02 <__sflush_r+0xd2>
 8014a00:	694a      	ldr	r2, [r1, #20]
 8014a02:	60a2      	str	r2, [r4, #8]
 8014a04:	9b01      	ldr	r3, [sp, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	ddee      	ble.n	80149e8 <__sflush_r+0xb8>
 8014a0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014a0c:	0032      	movs	r2, r6
 8014a0e:	001f      	movs	r7, r3
 8014a10:	0028      	movs	r0, r5
 8014a12:	9b01      	ldr	r3, [sp, #4]
 8014a14:	6a21      	ldr	r1, [r4, #32]
 8014a16:	47b8      	blx	r7
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	dc07      	bgt.n	8014a2c <__sflush_r+0xfc>
 8014a1c:	89a2      	ldrh	r2, [r4, #12]
 8014a1e:	2340      	movs	r3, #64	@ 0x40
 8014a20:	2001      	movs	r0, #1
 8014a22:	4313      	orrs	r3, r2
 8014a24:	b21b      	sxth	r3, r3
 8014a26:	81a3      	strh	r3, [r4, #12]
 8014a28:	4240      	negs	r0, r0
 8014a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014a2c:	9b01      	ldr	r3, [sp, #4]
 8014a2e:	1836      	adds	r6, r6, r0
 8014a30:	1a1b      	subs	r3, r3, r0
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	e7e6      	b.n	8014a04 <__sflush_r+0xd4>
 8014a36:	46c0      	nop			@ (mov r8, r8)
 8014a38:	20400001 	.word	0x20400001

08014a3c <_fflush_r>:
 8014a3c:	690b      	ldr	r3, [r1, #16]
 8014a3e:	b570      	push	{r4, r5, r6, lr}
 8014a40:	0005      	movs	r5, r0
 8014a42:	000c      	movs	r4, r1
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d102      	bne.n	8014a4e <_fflush_r+0x12>
 8014a48:	2500      	movs	r5, #0
 8014a4a:	0028      	movs	r0, r5
 8014a4c:	bd70      	pop	{r4, r5, r6, pc}
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d004      	beq.n	8014a5c <_fflush_r+0x20>
 8014a52:	6a03      	ldr	r3, [r0, #32]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d101      	bne.n	8014a5c <_fflush_r+0x20>
 8014a58:	f7fe fb2a 	bl	80130b0 <__sinit>
 8014a5c:	220c      	movs	r2, #12
 8014a5e:	5ea3      	ldrsh	r3, [r4, r2]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d0f1      	beq.n	8014a48 <_fflush_r+0xc>
 8014a64:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a66:	07d2      	lsls	r2, r2, #31
 8014a68:	d404      	bmi.n	8014a74 <_fflush_r+0x38>
 8014a6a:	059b      	lsls	r3, r3, #22
 8014a6c:	d402      	bmi.n	8014a74 <_fflush_r+0x38>
 8014a6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a70:	f7fe fc31 	bl	80132d6 <__retarget_lock_acquire_recursive>
 8014a74:	0028      	movs	r0, r5
 8014a76:	0021      	movs	r1, r4
 8014a78:	f7ff ff5a 	bl	8014930 <__sflush_r>
 8014a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a7e:	0005      	movs	r5, r0
 8014a80:	07db      	lsls	r3, r3, #31
 8014a82:	d4e2      	bmi.n	8014a4a <_fflush_r+0xe>
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	059b      	lsls	r3, r3, #22
 8014a88:	d4df      	bmi.n	8014a4a <_fflush_r+0xe>
 8014a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a8c:	f7fe fc24 	bl	80132d8 <__retarget_lock_release_recursive>
 8014a90:	e7db      	b.n	8014a4a <_fflush_r+0xe>
	...

08014a94 <_sbrk_r>:
 8014a94:	2300      	movs	r3, #0
 8014a96:	b570      	push	{r4, r5, r6, lr}
 8014a98:	4d06      	ldr	r5, [pc, #24]	@ (8014ab4 <_sbrk_r+0x20>)
 8014a9a:	0004      	movs	r4, r0
 8014a9c:	0008      	movs	r0, r1
 8014a9e:	602b      	str	r3, [r5, #0]
 8014aa0:	f7ee fba8 	bl	80031f4 <_sbrk>
 8014aa4:	1c43      	adds	r3, r0, #1
 8014aa6:	d103      	bne.n	8014ab0 <_sbrk_r+0x1c>
 8014aa8:	682b      	ldr	r3, [r5, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d000      	beq.n	8014ab0 <_sbrk_r+0x1c>
 8014aae:	6023      	str	r3, [r4, #0]
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
 8014ab4:	20001e90 	.word	0x20001e90

08014ab8 <__assert_func>:
 8014ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014aba:	0014      	movs	r4, r2
 8014abc:	001a      	movs	r2, r3
 8014abe:	4b09      	ldr	r3, [pc, #36]	@ (8014ae4 <__assert_func+0x2c>)
 8014ac0:	0005      	movs	r5, r0
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	000e      	movs	r6, r1
 8014ac6:	68d8      	ldr	r0, [r3, #12]
 8014ac8:	4b07      	ldr	r3, [pc, #28]	@ (8014ae8 <__assert_func+0x30>)
 8014aca:	2c00      	cmp	r4, #0
 8014acc:	d101      	bne.n	8014ad2 <__assert_func+0x1a>
 8014ace:	4b07      	ldr	r3, [pc, #28]	@ (8014aec <__assert_func+0x34>)
 8014ad0:	001c      	movs	r4, r3
 8014ad2:	4907      	ldr	r1, [pc, #28]	@ (8014af0 <__assert_func+0x38>)
 8014ad4:	9301      	str	r3, [sp, #4]
 8014ad6:	9402      	str	r4, [sp, #8]
 8014ad8:	002b      	movs	r3, r5
 8014ada:	9600      	str	r6, [sp, #0]
 8014adc:	f000 f856 	bl	8014b8c <fiprintf>
 8014ae0:	f000 f864 	bl	8014bac <abort>
 8014ae4:	20000214 	.word	0x20000214
 8014ae8:	08018aa6 	.word	0x08018aa6
 8014aec:	08018ae1 	.word	0x08018ae1
 8014af0:	08018ab3 	.word	0x08018ab3

08014af4 <_calloc_r>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	0c0b      	lsrs	r3, r1, #16
 8014af8:	0c15      	lsrs	r5, r2, #16
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d11e      	bne.n	8014b3c <_calloc_r+0x48>
 8014afe:	2d00      	cmp	r5, #0
 8014b00:	d10c      	bne.n	8014b1c <_calloc_r+0x28>
 8014b02:	b289      	uxth	r1, r1
 8014b04:	b294      	uxth	r4, r2
 8014b06:	434c      	muls	r4, r1
 8014b08:	0021      	movs	r1, r4
 8014b0a:	f7ff fae5 	bl	80140d8 <_malloc_r>
 8014b0e:	1e05      	subs	r5, r0, #0
 8014b10:	d01b      	beq.n	8014b4a <_calloc_r+0x56>
 8014b12:	0022      	movs	r2, r4
 8014b14:	2100      	movs	r1, #0
 8014b16:	f7fe fb59 	bl	80131cc <memset>
 8014b1a:	e016      	b.n	8014b4a <_calloc_r+0x56>
 8014b1c:	1c2b      	adds	r3, r5, #0
 8014b1e:	1c0c      	adds	r4, r1, #0
 8014b20:	b289      	uxth	r1, r1
 8014b22:	b292      	uxth	r2, r2
 8014b24:	434a      	muls	r2, r1
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	b2a1      	uxth	r1, r4
 8014b2a:	4359      	muls	r1, r3
 8014b2c:	0c14      	lsrs	r4, r2, #16
 8014b2e:	190c      	adds	r4, r1, r4
 8014b30:	0c23      	lsrs	r3, r4, #16
 8014b32:	d107      	bne.n	8014b44 <_calloc_r+0x50>
 8014b34:	0424      	lsls	r4, r4, #16
 8014b36:	b292      	uxth	r2, r2
 8014b38:	4314      	orrs	r4, r2
 8014b3a:	e7e5      	b.n	8014b08 <_calloc_r+0x14>
 8014b3c:	2d00      	cmp	r5, #0
 8014b3e:	d101      	bne.n	8014b44 <_calloc_r+0x50>
 8014b40:	1c14      	adds	r4, r2, #0
 8014b42:	e7ed      	b.n	8014b20 <_calloc_r+0x2c>
 8014b44:	230c      	movs	r3, #12
 8014b46:	2500      	movs	r5, #0
 8014b48:	6003      	str	r3, [r0, #0]
 8014b4a:	0028      	movs	r0, r5
 8014b4c:	bd70      	pop	{r4, r5, r6, pc}

08014b4e <__ascii_mbtowc>:
 8014b4e:	b082      	sub	sp, #8
 8014b50:	2900      	cmp	r1, #0
 8014b52:	d100      	bne.n	8014b56 <__ascii_mbtowc+0x8>
 8014b54:	a901      	add	r1, sp, #4
 8014b56:	1e10      	subs	r0, r2, #0
 8014b58:	d006      	beq.n	8014b68 <__ascii_mbtowc+0x1a>
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d006      	beq.n	8014b6c <__ascii_mbtowc+0x1e>
 8014b5e:	7813      	ldrb	r3, [r2, #0]
 8014b60:	600b      	str	r3, [r1, #0]
 8014b62:	7810      	ldrb	r0, [r2, #0]
 8014b64:	1e43      	subs	r3, r0, #1
 8014b66:	4198      	sbcs	r0, r3
 8014b68:	b002      	add	sp, #8
 8014b6a:	4770      	bx	lr
 8014b6c:	2002      	movs	r0, #2
 8014b6e:	4240      	negs	r0, r0
 8014b70:	e7fa      	b.n	8014b68 <__ascii_mbtowc+0x1a>

08014b72 <__ascii_wctomb>:
 8014b72:	0003      	movs	r3, r0
 8014b74:	1e08      	subs	r0, r1, #0
 8014b76:	d005      	beq.n	8014b84 <__ascii_wctomb+0x12>
 8014b78:	2aff      	cmp	r2, #255	@ 0xff
 8014b7a:	d904      	bls.n	8014b86 <__ascii_wctomb+0x14>
 8014b7c:	228a      	movs	r2, #138	@ 0x8a
 8014b7e:	2001      	movs	r0, #1
 8014b80:	601a      	str	r2, [r3, #0]
 8014b82:	4240      	negs	r0, r0
 8014b84:	4770      	bx	lr
 8014b86:	2001      	movs	r0, #1
 8014b88:	700a      	strb	r2, [r1, #0]
 8014b8a:	e7fb      	b.n	8014b84 <__ascii_wctomb+0x12>

08014b8c <fiprintf>:
 8014b8c:	b40e      	push	{r1, r2, r3}
 8014b8e:	b517      	push	{r0, r1, r2, r4, lr}
 8014b90:	4c05      	ldr	r4, [pc, #20]	@ (8014ba8 <fiprintf+0x1c>)
 8014b92:	ab05      	add	r3, sp, #20
 8014b94:	cb04      	ldmia	r3!, {r2}
 8014b96:	0001      	movs	r1, r0
 8014b98:	6820      	ldr	r0, [r4, #0]
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	f000 f834 	bl	8014c08 <_vfiprintf_r>
 8014ba0:	bc1e      	pop	{r1, r2, r3, r4}
 8014ba2:	bc08      	pop	{r3}
 8014ba4:	b003      	add	sp, #12
 8014ba6:	4718      	bx	r3
 8014ba8:	20000214 	.word	0x20000214

08014bac <abort>:
 8014bac:	2006      	movs	r0, #6
 8014bae:	b510      	push	{r4, lr}
 8014bb0:	f000 fa10 	bl	8014fd4 <raise>
 8014bb4:	2001      	movs	r0, #1
 8014bb6:	f7ee faab 	bl	8003110 <_exit>

08014bba <__sfputc_r>:
 8014bba:	6893      	ldr	r3, [r2, #8]
 8014bbc:	b510      	push	{r4, lr}
 8014bbe:	3b01      	subs	r3, #1
 8014bc0:	6093      	str	r3, [r2, #8]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	da04      	bge.n	8014bd0 <__sfputc_r+0x16>
 8014bc6:	6994      	ldr	r4, [r2, #24]
 8014bc8:	42a3      	cmp	r3, r4
 8014bca:	db07      	blt.n	8014bdc <__sfputc_r+0x22>
 8014bcc:	290a      	cmp	r1, #10
 8014bce:	d005      	beq.n	8014bdc <__sfputc_r+0x22>
 8014bd0:	6813      	ldr	r3, [r2, #0]
 8014bd2:	1c58      	adds	r0, r3, #1
 8014bd4:	6010      	str	r0, [r2, #0]
 8014bd6:	7019      	strb	r1, [r3, #0]
 8014bd8:	0008      	movs	r0, r1
 8014bda:	bd10      	pop	{r4, pc}
 8014bdc:	f000 f930 	bl	8014e40 <__swbuf_r>
 8014be0:	0001      	movs	r1, r0
 8014be2:	e7f9      	b.n	8014bd8 <__sfputc_r+0x1e>

08014be4 <__sfputs_r>:
 8014be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be6:	0006      	movs	r6, r0
 8014be8:	000f      	movs	r7, r1
 8014bea:	0014      	movs	r4, r2
 8014bec:	18d5      	adds	r5, r2, r3
 8014bee:	42ac      	cmp	r4, r5
 8014bf0:	d101      	bne.n	8014bf6 <__sfputs_r+0x12>
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	e007      	b.n	8014c06 <__sfputs_r+0x22>
 8014bf6:	7821      	ldrb	r1, [r4, #0]
 8014bf8:	003a      	movs	r2, r7
 8014bfa:	0030      	movs	r0, r6
 8014bfc:	f7ff ffdd 	bl	8014bba <__sfputc_r>
 8014c00:	3401      	adds	r4, #1
 8014c02:	1c43      	adds	r3, r0, #1
 8014c04:	d1f3      	bne.n	8014bee <__sfputs_r+0xa>
 8014c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014c08 <_vfiprintf_r>:
 8014c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c0a:	b0a1      	sub	sp, #132	@ 0x84
 8014c0c:	000f      	movs	r7, r1
 8014c0e:	0015      	movs	r5, r2
 8014c10:	001e      	movs	r6, r3
 8014c12:	9003      	str	r0, [sp, #12]
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d004      	beq.n	8014c22 <_vfiprintf_r+0x1a>
 8014c18:	6a03      	ldr	r3, [r0, #32]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d101      	bne.n	8014c22 <_vfiprintf_r+0x1a>
 8014c1e:	f7fe fa47 	bl	80130b0 <__sinit>
 8014c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014c24:	07db      	lsls	r3, r3, #31
 8014c26:	d405      	bmi.n	8014c34 <_vfiprintf_r+0x2c>
 8014c28:	89bb      	ldrh	r3, [r7, #12]
 8014c2a:	059b      	lsls	r3, r3, #22
 8014c2c:	d402      	bmi.n	8014c34 <_vfiprintf_r+0x2c>
 8014c2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014c30:	f7fe fb51 	bl	80132d6 <__retarget_lock_acquire_recursive>
 8014c34:	89bb      	ldrh	r3, [r7, #12]
 8014c36:	071b      	lsls	r3, r3, #28
 8014c38:	d502      	bpl.n	8014c40 <_vfiprintf_r+0x38>
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d113      	bne.n	8014c68 <_vfiprintf_r+0x60>
 8014c40:	0039      	movs	r1, r7
 8014c42:	9803      	ldr	r0, [sp, #12]
 8014c44:	f000 f93e 	bl	8014ec4 <__swsetup_r>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d00d      	beq.n	8014c68 <_vfiprintf_r+0x60>
 8014c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014c4e:	07db      	lsls	r3, r3, #31
 8014c50:	d503      	bpl.n	8014c5a <_vfiprintf_r+0x52>
 8014c52:	2001      	movs	r0, #1
 8014c54:	4240      	negs	r0, r0
 8014c56:	b021      	add	sp, #132	@ 0x84
 8014c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5a:	89bb      	ldrh	r3, [r7, #12]
 8014c5c:	059b      	lsls	r3, r3, #22
 8014c5e:	d4f8      	bmi.n	8014c52 <_vfiprintf_r+0x4a>
 8014c60:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014c62:	f7fe fb39 	bl	80132d8 <__retarget_lock_release_recursive>
 8014c66:	e7f4      	b.n	8014c52 <_vfiprintf_r+0x4a>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	ac08      	add	r4, sp, #32
 8014c6c:	6163      	str	r3, [r4, #20]
 8014c6e:	3320      	adds	r3, #32
 8014c70:	7663      	strb	r3, [r4, #25]
 8014c72:	3310      	adds	r3, #16
 8014c74:	76a3      	strb	r3, [r4, #26]
 8014c76:	9607      	str	r6, [sp, #28]
 8014c78:	002e      	movs	r6, r5
 8014c7a:	7833      	ldrb	r3, [r6, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d001      	beq.n	8014c84 <_vfiprintf_r+0x7c>
 8014c80:	2b25      	cmp	r3, #37	@ 0x25
 8014c82:	d148      	bne.n	8014d16 <_vfiprintf_r+0x10e>
 8014c84:	1b73      	subs	r3, r6, r5
 8014c86:	9305      	str	r3, [sp, #20]
 8014c88:	42ae      	cmp	r6, r5
 8014c8a:	d00b      	beq.n	8014ca4 <_vfiprintf_r+0x9c>
 8014c8c:	002a      	movs	r2, r5
 8014c8e:	0039      	movs	r1, r7
 8014c90:	9803      	ldr	r0, [sp, #12]
 8014c92:	f7ff ffa7 	bl	8014be4 <__sfputs_r>
 8014c96:	3001      	adds	r0, #1
 8014c98:	d100      	bne.n	8014c9c <_vfiprintf_r+0x94>
 8014c9a:	e0ae      	b.n	8014dfa <_vfiprintf_r+0x1f2>
 8014c9c:	6963      	ldr	r3, [r4, #20]
 8014c9e:	9a05      	ldr	r2, [sp, #20]
 8014ca0:	189b      	adds	r3, r3, r2
 8014ca2:	6163      	str	r3, [r4, #20]
 8014ca4:	7833      	ldrb	r3, [r6, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d100      	bne.n	8014cac <_vfiprintf_r+0xa4>
 8014caa:	e0a6      	b.n	8014dfa <_vfiprintf_r+0x1f2>
 8014cac:	2201      	movs	r2, #1
 8014cae:	2300      	movs	r3, #0
 8014cb0:	4252      	negs	r2, r2
 8014cb2:	6062      	str	r2, [r4, #4]
 8014cb4:	a904      	add	r1, sp, #16
 8014cb6:	3254      	adds	r2, #84	@ 0x54
 8014cb8:	1852      	adds	r2, r2, r1
 8014cba:	1c75      	adds	r5, r6, #1
 8014cbc:	6023      	str	r3, [r4, #0]
 8014cbe:	60e3      	str	r3, [r4, #12]
 8014cc0:	60a3      	str	r3, [r4, #8]
 8014cc2:	7013      	strb	r3, [r2, #0]
 8014cc4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8014cc6:	4b59      	ldr	r3, [pc, #356]	@ (8014e2c <_vfiprintf_r+0x224>)
 8014cc8:	2205      	movs	r2, #5
 8014cca:	0018      	movs	r0, r3
 8014ccc:	7829      	ldrb	r1, [r5, #0]
 8014cce:	9305      	str	r3, [sp, #20]
 8014cd0:	f7fe fb03 	bl	80132da <memchr>
 8014cd4:	1c6e      	adds	r6, r5, #1
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d11f      	bne.n	8014d1a <_vfiprintf_r+0x112>
 8014cda:	6822      	ldr	r2, [r4, #0]
 8014cdc:	06d3      	lsls	r3, r2, #27
 8014cde:	d504      	bpl.n	8014cea <_vfiprintf_r+0xe2>
 8014ce0:	2353      	movs	r3, #83	@ 0x53
 8014ce2:	a904      	add	r1, sp, #16
 8014ce4:	185b      	adds	r3, r3, r1
 8014ce6:	2120      	movs	r1, #32
 8014ce8:	7019      	strb	r1, [r3, #0]
 8014cea:	0713      	lsls	r3, r2, #28
 8014cec:	d504      	bpl.n	8014cf8 <_vfiprintf_r+0xf0>
 8014cee:	2353      	movs	r3, #83	@ 0x53
 8014cf0:	a904      	add	r1, sp, #16
 8014cf2:	185b      	adds	r3, r3, r1
 8014cf4:	212b      	movs	r1, #43	@ 0x2b
 8014cf6:	7019      	strb	r1, [r3, #0]
 8014cf8:	782b      	ldrb	r3, [r5, #0]
 8014cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cfc:	d016      	beq.n	8014d2c <_vfiprintf_r+0x124>
 8014cfe:	002e      	movs	r6, r5
 8014d00:	2100      	movs	r1, #0
 8014d02:	200a      	movs	r0, #10
 8014d04:	68e3      	ldr	r3, [r4, #12]
 8014d06:	7832      	ldrb	r2, [r6, #0]
 8014d08:	1c75      	adds	r5, r6, #1
 8014d0a:	3a30      	subs	r2, #48	@ 0x30
 8014d0c:	2a09      	cmp	r2, #9
 8014d0e:	d950      	bls.n	8014db2 <_vfiprintf_r+0x1aa>
 8014d10:	2900      	cmp	r1, #0
 8014d12:	d111      	bne.n	8014d38 <_vfiprintf_r+0x130>
 8014d14:	e017      	b.n	8014d46 <_vfiprintf_r+0x13e>
 8014d16:	3601      	adds	r6, #1
 8014d18:	e7af      	b.n	8014c7a <_vfiprintf_r+0x72>
 8014d1a:	9b05      	ldr	r3, [sp, #20]
 8014d1c:	6822      	ldr	r2, [r4, #0]
 8014d1e:	1ac0      	subs	r0, r0, r3
 8014d20:	2301      	movs	r3, #1
 8014d22:	4083      	lsls	r3, r0
 8014d24:	4313      	orrs	r3, r2
 8014d26:	0035      	movs	r5, r6
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	e7cc      	b.n	8014cc6 <_vfiprintf_r+0xbe>
 8014d2c:	9b07      	ldr	r3, [sp, #28]
 8014d2e:	1d19      	adds	r1, r3, #4
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	9107      	str	r1, [sp, #28]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	db01      	blt.n	8014d3c <_vfiprintf_r+0x134>
 8014d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d3a:	e004      	b.n	8014d46 <_vfiprintf_r+0x13e>
 8014d3c:	425b      	negs	r3, r3
 8014d3e:	60e3      	str	r3, [r4, #12]
 8014d40:	2302      	movs	r3, #2
 8014d42:	4313      	orrs	r3, r2
 8014d44:	6023      	str	r3, [r4, #0]
 8014d46:	7833      	ldrb	r3, [r6, #0]
 8014d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d4a:	d10c      	bne.n	8014d66 <_vfiprintf_r+0x15e>
 8014d4c:	7873      	ldrb	r3, [r6, #1]
 8014d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d50:	d134      	bne.n	8014dbc <_vfiprintf_r+0x1b4>
 8014d52:	9b07      	ldr	r3, [sp, #28]
 8014d54:	3602      	adds	r6, #2
 8014d56:	1d1a      	adds	r2, r3, #4
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	9207      	str	r2, [sp, #28]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	da01      	bge.n	8014d64 <_vfiprintf_r+0x15c>
 8014d60:	2301      	movs	r3, #1
 8014d62:	425b      	negs	r3, r3
 8014d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d66:	4d32      	ldr	r5, [pc, #200]	@ (8014e30 <_vfiprintf_r+0x228>)
 8014d68:	2203      	movs	r2, #3
 8014d6a:	0028      	movs	r0, r5
 8014d6c:	7831      	ldrb	r1, [r6, #0]
 8014d6e:	f7fe fab4 	bl	80132da <memchr>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	d006      	beq.n	8014d84 <_vfiprintf_r+0x17c>
 8014d76:	2340      	movs	r3, #64	@ 0x40
 8014d78:	1b40      	subs	r0, r0, r5
 8014d7a:	4083      	lsls	r3, r0
 8014d7c:	6822      	ldr	r2, [r4, #0]
 8014d7e:	3601      	adds	r6, #1
 8014d80:	4313      	orrs	r3, r2
 8014d82:	6023      	str	r3, [r4, #0]
 8014d84:	7831      	ldrb	r1, [r6, #0]
 8014d86:	2206      	movs	r2, #6
 8014d88:	482a      	ldr	r0, [pc, #168]	@ (8014e34 <_vfiprintf_r+0x22c>)
 8014d8a:	1c75      	adds	r5, r6, #1
 8014d8c:	7621      	strb	r1, [r4, #24]
 8014d8e:	f7fe faa4 	bl	80132da <memchr>
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d040      	beq.n	8014e18 <_vfiprintf_r+0x210>
 8014d96:	4b28      	ldr	r3, [pc, #160]	@ (8014e38 <_vfiprintf_r+0x230>)
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d122      	bne.n	8014de2 <_vfiprintf_r+0x1da>
 8014d9c:	2207      	movs	r2, #7
 8014d9e:	9b07      	ldr	r3, [sp, #28]
 8014da0:	3307      	adds	r3, #7
 8014da2:	4393      	bics	r3, r2
 8014da4:	3308      	adds	r3, #8
 8014da6:	9307      	str	r3, [sp, #28]
 8014da8:	6963      	ldr	r3, [r4, #20]
 8014daa:	9a04      	ldr	r2, [sp, #16]
 8014dac:	189b      	adds	r3, r3, r2
 8014dae:	6163      	str	r3, [r4, #20]
 8014db0:	e762      	b.n	8014c78 <_vfiprintf_r+0x70>
 8014db2:	4343      	muls	r3, r0
 8014db4:	002e      	movs	r6, r5
 8014db6:	2101      	movs	r1, #1
 8014db8:	189b      	adds	r3, r3, r2
 8014dba:	e7a4      	b.n	8014d06 <_vfiprintf_r+0xfe>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	200a      	movs	r0, #10
 8014dc0:	0019      	movs	r1, r3
 8014dc2:	3601      	adds	r6, #1
 8014dc4:	6063      	str	r3, [r4, #4]
 8014dc6:	7832      	ldrb	r2, [r6, #0]
 8014dc8:	1c75      	adds	r5, r6, #1
 8014dca:	3a30      	subs	r2, #48	@ 0x30
 8014dcc:	2a09      	cmp	r2, #9
 8014dce:	d903      	bls.n	8014dd8 <_vfiprintf_r+0x1d0>
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d0c8      	beq.n	8014d66 <_vfiprintf_r+0x15e>
 8014dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8014dd6:	e7c6      	b.n	8014d66 <_vfiprintf_r+0x15e>
 8014dd8:	4341      	muls	r1, r0
 8014dda:	002e      	movs	r6, r5
 8014ddc:	2301      	movs	r3, #1
 8014dde:	1889      	adds	r1, r1, r2
 8014de0:	e7f1      	b.n	8014dc6 <_vfiprintf_r+0x1be>
 8014de2:	aa07      	add	r2, sp, #28
 8014de4:	9200      	str	r2, [sp, #0]
 8014de6:	0021      	movs	r1, r4
 8014de8:	003a      	movs	r2, r7
 8014dea:	4b14      	ldr	r3, [pc, #80]	@ (8014e3c <_vfiprintf_r+0x234>)
 8014dec:	9803      	ldr	r0, [sp, #12]
 8014dee:	f7fd fd15 	bl	801281c <_printf_float>
 8014df2:	9004      	str	r0, [sp, #16]
 8014df4:	9b04      	ldr	r3, [sp, #16]
 8014df6:	3301      	adds	r3, #1
 8014df8:	d1d6      	bne.n	8014da8 <_vfiprintf_r+0x1a0>
 8014dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014dfc:	07db      	lsls	r3, r3, #31
 8014dfe:	d405      	bmi.n	8014e0c <_vfiprintf_r+0x204>
 8014e00:	89bb      	ldrh	r3, [r7, #12]
 8014e02:	059b      	lsls	r3, r3, #22
 8014e04:	d402      	bmi.n	8014e0c <_vfiprintf_r+0x204>
 8014e06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014e08:	f7fe fa66 	bl	80132d8 <__retarget_lock_release_recursive>
 8014e0c:	89bb      	ldrh	r3, [r7, #12]
 8014e0e:	065b      	lsls	r3, r3, #25
 8014e10:	d500      	bpl.n	8014e14 <_vfiprintf_r+0x20c>
 8014e12:	e71e      	b.n	8014c52 <_vfiprintf_r+0x4a>
 8014e14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8014e16:	e71e      	b.n	8014c56 <_vfiprintf_r+0x4e>
 8014e18:	aa07      	add	r2, sp, #28
 8014e1a:	9200      	str	r2, [sp, #0]
 8014e1c:	0021      	movs	r1, r4
 8014e1e:	003a      	movs	r2, r7
 8014e20:	4b06      	ldr	r3, [pc, #24]	@ (8014e3c <_vfiprintf_r+0x234>)
 8014e22:	9803      	ldr	r0, [sp, #12]
 8014e24:	f7fd ffa8 	bl	8012d78 <_printf_i>
 8014e28:	e7e3      	b.n	8014df2 <_vfiprintf_r+0x1ea>
 8014e2a:	46c0      	nop			@ (mov r8, r8)
 8014e2c:	08018ae2 	.word	0x08018ae2
 8014e30:	08018ae8 	.word	0x08018ae8
 8014e34:	08018aec 	.word	0x08018aec
 8014e38:	0801281d 	.word	0x0801281d
 8014e3c:	08014be5 	.word	0x08014be5

08014e40 <__swbuf_r>:
 8014e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e42:	0006      	movs	r6, r0
 8014e44:	000d      	movs	r5, r1
 8014e46:	0014      	movs	r4, r2
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d004      	beq.n	8014e56 <__swbuf_r+0x16>
 8014e4c:	6a03      	ldr	r3, [r0, #32]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d101      	bne.n	8014e56 <__swbuf_r+0x16>
 8014e52:	f7fe f92d 	bl	80130b0 <__sinit>
 8014e56:	69a3      	ldr	r3, [r4, #24]
 8014e58:	60a3      	str	r3, [r4, #8]
 8014e5a:	89a3      	ldrh	r3, [r4, #12]
 8014e5c:	071b      	lsls	r3, r3, #28
 8014e5e:	d502      	bpl.n	8014e66 <__swbuf_r+0x26>
 8014e60:	6923      	ldr	r3, [r4, #16]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d109      	bne.n	8014e7a <__swbuf_r+0x3a>
 8014e66:	0021      	movs	r1, r4
 8014e68:	0030      	movs	r0, r6
 8014e6a:	f000 f82b 	bl	8014ec4 <__swsetup_r>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d003      	beq.n	8014e7a <__swbuf_r+0x3a>
 8014e72:	2501      	movs	r5, #1
 8014e74:	426d      	negs	r5, r5
 8014e76:	0028      	movs	r0, r5
 8014e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e7a:	6923      	ldr	r3, [r4, #16]
 8014e7c:	6820      	ldr	r0, [r4, #0]
 8014e7e:	b2ef      	uxtb	r7, r5
 8014e80:	1ac0      	subs	r0, r0, r3
 8014e82:	6963      	ldr	r3, [r4, #20]
 8014e84:	b2ed      	uxtb	r5, r5
 8014e86:	4283      	cmp	r3, r0
 8014e88:	dc05      	bgt.n	8014e96 <__swbuf_r+0x56>
 8014e8a:	0021      	movs	r1, r4
 8014e8c:	0030      	movs	r0, r6
 8014e8e:	f7ff fdd5 	bl	8014a3c <_fflush_r>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d1ed      	bne.n	8014e72 <__swbuf_r+0x32>
 8014e96:	68a3      	ldr	r3, [r4, #8]
 8014e98:	3001      	adds	r0, #1
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	60a3      	str	r3, [r4, #8]
 8014e9e:	6823      	ldr	r3, [r4, #0]
 8014ea0:	1c5a      	adds	r2, r3, #1
 8014ea2:	6022      	str	r2, [r4, #0]
 8014ea4:	701f      	strb	r7, [r3, #0]
 8014ea6:	6963      	ldr	r3, [r4, #20]
 8014ea8:	4283      	cmp	r3, r0
 8014eaa:	d004      	beq.n	8014eb6 <__swbuf_r+0x76>
 8014eac:	89a3      	ldrh	r3, [r4, #12]
 8014eae:	07db      	lsls	r3, r3, #31
 8014eb0:	d5e1      	bpl.n	8014e76 <__swbuf_r+0x36>
 8014eb2:	2d0a      	cmp	r5, #10
 8014eb4:	d1df      	bne.n	8014e76 <__swbuf_r+0x36>
 8014eb6:	0021      	movs	r1, r4
 8014eb8:	0030      	movs	r0, r6
 8014eba:	f7ff fdbf 	bl	8014a3c <_fflush_r>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0d9      	beq.n	8014e76 <__swbuf_r+0x36>
 8014ec2:	e7d6      	b.n	8014e72 <__swbuf_r+0x32>

08014ec4 <__swsetup_r>:
 8014ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8014f7c <__swsetup_r+0xb8>)
 8014ec6:	b570      	push	{r4, r5, r6, lr}
 8014ec8:	0005      	movs	r5, r0
 8014eca:	6818      	ldr	r0, [r3, #0]
 8014ecc:	000c      	movs	r4, r1
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d004      	beq.n	8014edc <__swsetup_r+0x18>
 8014ed2:	6a03      	ldr	r3, [r0, #32]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d101      	bne.n	8014edc <__swsetup_r+0x18>
 8014ed8:	f7fe f8ea 	bl	80130b0 <__sinit>
 8014edc:	220c      	movs	r2, #12
 8014ede:	5ea3      	ldrsh	r3, [r4, r2]
 8014ee0:	071a      	lsls	r2, r3, #28
 8014ee2:	d423      	bmi.n	8014f2c <__swsetup_r+0x68>
 8014ee4:	06da      	lsls	r2, r3, #27
 8014ee6:	d407      	bmi.n	8014ef8 <__swsetup_r+0x34>
 8014ee8:	2209      	movs	r2, #9
 8014eea:	602a      	str	r2, [r5, #0]
 8014eec:	2240      	movs	r2, #64	@ 0x40
 8014eee:	2001      	movs	r0, #1
 8014ef0:	4313      	orrs	r3, r2
 8014ef2:	81a3      	strh	r3, [r4, #12]
 8014ef4:	4240      	negs	r0, r0
 8014ef6:	e03a      	b.n	8014f6e <__swsetup_r+0xaa>
 8014ef8:	075b      	lsls	r3, r3, #29
 8014efa:	d513      	bpl.n	8014f24 <__swsetup_r+0x60>
 8014efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014efe:	2900      	cmp	r1, #0
 8014f00:	d008      	beq.n	8014f14 <__swsetup_r+0x50>
 8014f02:	0023      	movs	r3, r4
 8014f04:	3344      	adds	r3, #68	@ 0x44
 8014f06:	4299      	cmp	r1, r3
 8014f08:	d002      	beq.n	8014f10 <__swsetup_r+0x4c>
 8014f0a:	0028      	movs	r0, r5
 8014f0c:	f7ff f86e 	bl	8013fec <_free_r>
 8014f10:	2300      	movs	r3, #0
 8014f12:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f14:	2224      	movs	r2, #36	@ 0x24
 8014f16:	89a3      	ldrh	r3, [r4, #12]
 8014f18:	4393      	bics	r3, r2
 8014f1a:	81a3      	strh	r3, [r4, #12]
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	6063      	str	r3, [r4, #4]
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	6023      	str	r3, [r4, #0]
 8014f24:	2308      	movs	r3, #8
 8014f26:	89a2      	ldrh	r2, [r4, #12]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	81a3      	strh	r3, [r4, #12]
 8014f2c:	6923      	ldr	r3, [r4, #16]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d10b      	bne.n	8014f4a <__swsetup_r+0x86>
 8014f32:	21a0      	movs	r1, #160	@ 0xa0
 8014f34:	2280      	movs	r2, #128	@ 0x80
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	0089      	lsls	r1, r1, #2
 8014f3a:	0092      	lsls	r2, r2, #2
 8014f3c:	400b      	ands	r3, r1
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	d003      	beq.n	8014f4a <__swsetup_r+0x86>
 8014f42:	0021      	movs	r1, r4
 8014f44:	0028      	movs	r0, r5
 8014f46:	f000 f88f 	bl	8015068 <__smakebuf_r>
 8014f4a:	220c      	movs	r2, #12
 8014f4c:	5ea3      	ldrsh	r3, [r4, r2]
 8014f4e:	2101      	movs	r1, #1
 8014f50:	001a      	movs	r2, r3
 8014f52:	400a      	ands	r2, r1
 8014f54:	420b      	tst	r3, r1
 8014f56:	d00b      	beq.n	8014f70 <__swsetup_r+0xac>
 8014f58:	2200      	movs	r2, #0
 8014f5a:	60a2      	str	r2, [r4, #8]
 8014f5c:	6962      	ldr	r2, [r4, #20]
 8014f5e:	4252      	negs	r2, r2
 8014f60:	61a2      	str	r2, [r4, #24]
 8014f62:	2000      	movs	r0, #0
 8014f64:	6922      	ldr	r2, [r4, #16]
 8014f66:	4282      	cmp	r2, r0
 8014f68:	d101      	bne.n	8014f6e <__swsetup_r+0xaa>
 8014f6a:	061a      	lsls	r2, r3, #24
 8014f6c:	d4be      	bmi.n	8014eec <__swsetup_r+0x28>
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}
 8014f70:	0799      	lsls	r1, r3, #30
 8014f72:	d400      	bmi.n	8014f76 <__swsetup_r+0xb2>
 8014f74:	6962      	ldr	r2, [r4, #20]
 8014f76:	60a2      	str	r2, [r4, #8]
 8014f78:	e7f3      	b.n	8014f62 <__swsetup_r+0x9e>
 8014f7a:	46c0      	nop			@ (mov r8, r8)
 8014f7c:	20000214 	.word	0x20000214

08014f80 <_raise_r>:
 8014f80:	b570      	push	{r4, r5, r6, lr}
 8014f82:	0004      	movs	r4, r0
 8014f84:	000d      	movs	r5, r1
 8014f86:	291f      	cmp	r1, #31
 8014f88:	d904      	bls.n	8014f94 <_raise_r+0x14>
 8014f8a:	2316      	movs	r3, #22
 8014f8c:	6003      	str	r3, [r0, #0]
 8014f8e:	2001      	movs	r0, #1
 8014f90:	4240      	negs	r0, r0
 8014f92:	bd70      	pop	{r4, r5, r6, pc}
 8014f94:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d004      	beq.n	8014fa4 <_raise_r+0x24>
 8014f9a:	008a      	lsls	r2, r1, #2
 8014f9c:	189b      	adds	r3, r3, r2
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	2a00      	cmp	r2, #0
 8014fa2:	d108      	bne.n	8014fb6 <_raise_r+0x36>
 8014fa4:	0020      	movs	r0, r4
 8014fa6:	f000 f831 	bl	801500c <_getpid_r>
 8014faa:	002a      	movs	r2, r5
 8014fac:	0001      	movs	r1, r0
 8014fae:	0020      	movs	r0, r4
 8014fb0:	f000 f81a 	bl	8014fe8 <_kill_r>
 8014fb4:	e7ed      	b.n	8014f92 <_raise_r+0x12>
 8014fb6:	2a01      	cmp	r2, #1
 8014fb8:	d009      	beq.n	8014fce <_raise_r+0x4e>
 8014fba:	1c51      	adds	r1, r2, #1
 8014fbc:	d103      	bne.n	8014fc6 <_raise_r+0x46>
 8014fbe:	2316      	movs	r3, #22
 8014fc0:	6003      	str	r3, [r0, #0]
 8014fc2:	2001      	movs	r0, #1
 8014fc4:	e7e5      	b.n	8014f92 <_raise_r+0x12>
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	0028      	movs	r0, r5
 8014fca:	6019      	str	r1, [r3, #0]
 8014fcc:	4790      	blx	r2
 8014fce:	2000      	movs	r0, #0
 8014fd0:	e7df      	b.n	8014f92 <_raise_r+0x12>
	...

08014fd4 <raise>:
 8014fd4:	b510      	push	{r4, lr}
 8014fd6:	4b03      	ldr	r3, [pc, #12]	@ (8014fe4 <raise+0x10>)
 8014fd8:	0001      	movs	r1, r0
 8014fda:	6818      	ldr	r0, [r3, #0]
 8014fdc:	f7ff ffd0 	bl	8014f80 <_raise_r>
 8014fe0:	bd10      	pop	{r4, pc}
 8014fe2:	46c0      	nop			@ (mov r8, r8)
 8014fe4:	20000214 	.word	0x20000214

08014fe8 <_kill_r>:
 8014fe8:	2300      	movs	r3, #0
 8014fea:	b570      	push	{r4, r5, r6, lr}
 8014fec:	4d06      	ldr	r5, [pc, #24]	@ (8015008 <_kill_r+0x20>)
 8014fee:	0004      	movs	r4, r0
 8014ff0:	0008      	movs	r0, r1
 8014ff2:	0011      	movs	r1, r2
 8014ff4:	602b      	str	r3, [r5, #0]
 8014ff6:	f7ee f87b 	bl	80030f0 <_kill>
 8014ffa:	1c43      	adds	r3, r0, #1
 8014ffc:	d103      	bne.n	8015006 <_kill_r+0x1e>
 8014ffe:	682b      	ldr	r3, [r5, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d000      	beq.n	8015006 <_kill_r+0x1e>
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	bd70      	pop	{r4, r5, r6, pc}
 8015008:	20001e90 	.word	0x20001e90

0801500c <_getpid_r>:
 801500c:	b510      	push	{r4, lr}
 801500e:	f7ee f869 	bl	80030e4 <_getpid>
 8015012:	bd10      	pop	{r4, pc}

08015014 <__swhatbuf_r>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	000e      	movs	r6, r1
 8015018:	001d      	movs	r5, r3
 801501a:	230e      	movs	r3, #14
 801501c:	5ec9      	ldrsh	r1, [r1, r3]
 801501e:	0014      	movs	r4, r2
 8015020:	b096      	sub	sp, #88	@ 0x58
 8015022:	2900      	cmp	r1, #0
 8015024:	da0c      	bge.n	8015040 <__swhatbuf_r+0x2c>
 8015026:	89b2      	ldrh	r2, [r6, #12]
 8015028:	2380      	movs	r3, #128	@ 0x80
 801502a:	0011      	movs	r1, r2
 801502c:	4019      	ands	r1, r3
 801502e:	421a      	tst	r2, r3
 8015030:	d114      	bne.n	801505c <__swhatbuf_r+0x48>
 8015032:	2380      	movs	r3, #128	@ 0x80
 8015034:	00db      	lsls	r3, r3, #3
 8015036:	2000      	movs	r0, #0
 8015038:	6029      	str	r1, [r5, #0]
 801503a:	6023      	str	r3, [r4, #0]
 801503c:	b016      	add	sp, #88	@ 0x58
 801503e:	bd70      	pop	{r4, r5, r6, pc}
 8015040:	466a      	mov	r2, sp
 8015042:	f000 f853 	bl	80150ec <_fstat_r>
 8015046:	2800      	cmp	r0, #0
 8015048:	dbed      	blt.n	8015026 <__swhatbuf_r+0x12>
 801504a:	23f0      	movs	r3, #240	@ 0xf0
 801504c:	9901      	ldr	r1, [sp, #4]
 801504e:	021b      	lsls	r3, r3, #8
 8015050:	4019      	ands	r1, r3
 8015052:	4b04      	ldr	r3, [pc, #16]	@ (8015064 <__swhatbuf_r+0x50>)
 8015054:	18c9      	adds	r1, r1, r3
 8015056:	424b      	negs	r3, r1
 8015058:	4159      	adcs	r1, r3
 801505a:	e7ea      	b.n	8015032 <__swhatbuf_r+0x1e>
 801505c:	2100      	movs	r1, #0
 801505e:	2340      	movs	r3, #64	@ 0x40
 8015060:	e7e9      	b.n	8015036 <__swhatbuf_r+0x22>
 8015062:	46c0      	nop			@ (mov r8, r8)
 8015064:	ffffe000 	.word	0xffffe000

08015068 <__smakebuf_r>:
 8015068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801506a:	2602      	movs	r6, #2
 801506c:	898b      	ldrh	r3, [r1, #12]
 801506e:	0005      	movs	r5, r0
 8015070:	000c      	movs	r4, r1
 8015072:	b085      	sub	sp, #20
 8015074:	4233      	tst	r3, r6
 8015076:	d007      	beq.n	8015088 <__smakebuf_r+0x20>
 8015078:	0023      	movs	r3, r4
 801507a:	3347      	adds	r3, #71	@ 0x47
 801507c:	6023      	str	r3, [r4, #0]
 801507e:	6123      	str	r3, [r4, #16]
 8015080:	2301      	movs	r3, #1
 8015082:	6163      	str	r3, [r4, #20]
 8015084:	b005      	add	sp, #20
 8015086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015088:	ab03      	add	r3, sp, #12
 801508a:	aa02      	add	r2, sp, #8
 801508c:	f7ff ffc2 	bl	8015014 <__swhatbuf_r>
 8015090:	9f02      	ldr	r7, [sp, #8]
 8015092:	9001      	str	r0, [sp, #4]
 8015094:	0039      	movs	r1, r7
 8015096:	0028      	movs	r0, r5
 8015098:	f7ff f81e 	bl	80140d8 <_malloc_r>
 801509c:	2800      	cmp	r0, #0
 801509e:	d108      	bne.n	80150b2 <__smakebuf_r+0x4a>
 80150a0:	220c      	movs	r2, #12
 80150a2:	5ea3      	ldrsh	r3, [r4, r2]
 80150a4:	059a      	lsls	r2, r3, #22
 80150a6:	d4ed      	bmi.n	8015084 <__smakebuf_r+0x1c>
 80150a8:	2203      	movs	r2, #3
 80150aa:	4393      	bics	r3, r2
 80150ac:	431e      	orrs	r6, r3
 80150ae:	81a6      	strh	r6, [r4, #12]
 80150b0:	e7e2      	b.n	8015078 <__smakebuf_r+0x10>
 80150b2:	2380      	movs	r3, #128	@ 0x80
 80150b4:	89a2      	ldrh	r2, [r4, #12]
 80150b6:	6020      	str	r0, [r4, #0]
 80150b8:	4313      	orrs	r3, r2
 80150ba:	81a3      	strh	r3, [r4, #12]
 80150bc:	9b03      	ldr	r3, [sp, #12]
 80150be:	6120      	str	r0, [r4, #16]
 80150c0:	6167      	str	r7, [r4, #20]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d00c      	beq.n	80150e0 <__smakebuf_r+0x78>
 80150c6:	0028      	movs	r0, r5
 80150c8:	230e      	movs	r3, #14
 80150ca:	5ee1      	ldrsh	r1, [r4, r3]
 80150cc:	f000 f820 	bl	8015110 <_isatty_r>
 80150d0:	2800      	cmp	r0, #0
 80150d2:	d005      	beq.n	80150e0 <__smakebuf_r+0x78>
 80150d4:	2303      	movs	r3, #3
 80150d6:	89a2      	ldrh	r2, [r4, #12]
 80150d8:	439a      	bics	r2, r3
 80150da:	3b02      	subs	r3, #2
 80150dc:	4313      	orrs	r3, r2
 80150de:	81a3      	strh	r3, [r4, #12]
 80150e0:	89a3      	ldrh	r3, [r4, #12]
 80150e2:	9a01      	ldr	r2, [sp, #4]
 80150e4:	4313      	orrs	r3, r2
 80150e6:	81a3      	strh	r3, [r4, #12]
 80150e8:	e7cc      	b.n	8015084 <__smakebuf_r+0x1c>
	...

080150ec <_fstat_r>:
 80150ec:	2300      	movs	r3, #0
 80150ee:	b570      	push	{r4, r5, r6, lr}
 80150f0:	4d06      	ldr	r5, [pc, #24]	@ (801510c <_fstat_r+0x20>)
 80150f2:	0004      	movs	r4, r0
 80150f4:	0008      	movs	r0, r1
 80150f6:	0011      	movs	r1, r2
 80150f8:	602b      	str	r3, [r5, #0]
 80150fa:	f7ee f859 	bl	80031b0 <_fstat>
 80150fe:	1c43      	adds	r3, r0, #1
 8015100:	d103      	bne.n	801510a <_fstat_r+0x1e>
 8015102:	682b      	ldr	r3, [r5, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d000      	beq.n	801510a <_fstat_r+0x1e>
 8015108:	6023      	str	r3, [r4, #0]
 801510a:	bd70      	pop	{r4, r5, r6, pc}
 801510c:	20001e90 	.word	0x20001e90

08015110 <_isatty_r>:
 8015110:	2300      	movs	r3, #0
 8015112:	b570      	push	{r4, r5, r6, lr}
 8015114:	4d06      	ldr	r5, [pc, #24]	@ (8015130 <_isatty_r+0x20>)
 8015116:	0004      	movs	r4, r0
 8015118:	0008      	movs	r0, r1
 801511a:	602b      	str	r3, [r5, #0]
 801511c:	f7ee f856 	bl	80031cc <_isatty>
 8015120:	1c43      	adds	r3, r0, #1
 8015122:	d103      	bne.n	801512c <_isatty_r+0x1c>
 8015124:	682b      	ldr	r3, [r5, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d000      	beq.n	801512c <_isatty_r+0x1c>
 801512a:	6023      	str	r3, [r4, #0]
 801512c:	bd70      	pop	{r4, r5, r6, pc}
 801512e:	46c0      	nop			@ (mov r8, r8)
 8015130:	20001e90 	.word	0x20001e90

08015134 <_init>:
 8015134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015136:	46c0      	nop			@ (mov r8, r8)
 8015138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801513a:	bc08      	pop	{r3}
 801513c:	469e      	mov	lr, r3
 801513e:	4770      	bx	lr

08015140 <_fini>:
 8015140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015142:	46c0      	nop			@ (mov r8, r8)
 8015144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015146:	bc08      	pop	{r3}
 8015148:	469e      	mov	lr, r3
 801514a:	4770      	bx	lr
>>>>>>> 461931204b2ba57ac08ef8a8c2b8de16394963d4
