
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08011d50  08011d50  00012d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012364  08012364  000143bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08012364  08012364  000143bc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08012364  08012364  000143bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012364  08012364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012368  08012368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003bc  20000000  0801236c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f8  200003c0  08012728  000143c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  08012728  00014db8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000143bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e962  00000000  00000000  000143e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf1  00000000  00000000  00032d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00037a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001546  00000000  00000000  000395f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ec7  00000000  00000000  0003ab3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247b3  00000000  00000000  00042a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad247  00000000  00000000  000671b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001143ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  00114444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0011b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000013d  00000000  00000000  0011b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c0 	.word	0x200003c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011d34 	.word	0x08011d34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003c4 	.word	0x200003c4
 8000104:	08011d34 	.word	0x08011d34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffc5 	bl	80013cc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff09 	bl	8001264 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffb7 	bl	80013cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffad 	bl	80013cc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff33 	bl	80012ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff29 	bl	80012ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	9000      	str	r0, [sp, #0]
 80004b6:	9101      	str	r1, [sp, #4]
 80004b8:	030e      	lsls	r6, r1, #12
 80004ba:	004c      	lsls	r4, r1, #1
 80004bc:	0fcd      	lsrs	r5, r1, #31
 80004be:	0a71      	lsrs	r1, r6, #9
 80004c0:	9e00      	ldr	r6, [sp, #0]
 80004c2:	005f      	lsls	r7, r3, #1
 80004c4:	0f76      	lsrs	r6, r6, #29
 80004c6:	430e      	orrs	r6, r1
 80004c8:	9900      	ldr	r1, [sp, #0]
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	00c9      	lsls	r1, r1, #3
 80004d0:	4689      	mov	r9, r1
 80004d2:	0319      	lsls	r1, r3, #12
 80004d4:	0d7b      	lsrs	r3, r7, #21
 80004d6:	4698      	mov	r8, r3
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	0fdb      	lsrs	r3, r3, #31
 80004de:	469c      	mov	ip, r3
 80004e0:	9b00      	ldr	r3, [sp, #0]
 80004e2:	9a00      	ldr	r2, [sp, #0]
 80004e4:	0f5b      	lsrs	r3, r3, #29
 80004e6:	430b      	orrs	r3, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	0d64      	lsrs	r4, r4, #21
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	1a61      	subs	r1, r4, r1
 80004f0:	4565      	cmp	r5, ip
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4e>
 80004f4:	e0a6      	b.n	8000644 <__aeabi_dadd+0x19c>
 80004f6:	2900      	cmp	r1, #0
 80004f8:	dd72      	ble.n	80005e0 <__aeabi_dadd+0x138>
 80004fa:	4647      	mov	r7, r8
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e0dd      	b.n	80006be <__aeabi_dadd+0x216>
 8000502:	4fcc      	ldr	r7, [pc, #816]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000504:	42bc      	cmp	r4, r7
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x62>
 8000508:	e19a      	b.n	8000840 <__aeabi_dadd+0x398>
 800050a:	2701      	movs	r7, #1
 800050c:	2938      	cmp	r1, #56	@ 0x38
 800050e:	dc17      	bgt.n	8000540 <__aeabi_dadd+0x98>
 8000510:	2780      	movs	r7, #128	@ 0x80
 8000512:	043f      	lsls	r7, r7, #16
 8000514:	433b      	orrs	r3, r7
 8000516:	291f      	cmp	r1, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x74>
 800051a:	e1dd      	b.n	80008d8 <__aeabi_dadd+0x430>
 800051c:	2720      	movs	r7, #32
 800051e:	1a78      	subs	r0, r7, r1
 8000520:	001f      	movs	r7, r3
 8000522:	4087      	lsls	r7, r0
 8000524:	46ba      	mov	sl, r7
 8000526:	0017      	movs	r7, r2
 8000528:	40cf      	lsrs	r7, r1
 800052a:	4684      	mov	ip, r0
 800052c:	0038      	movs	r0, r7
 800052e:	4657      	mov	r7, sl
 8000530:	4307      	orrs	r7, r0
 8000532:	4660      	mov	r0, ip
 8000534:	4082      	lsls	r2, r0
 8000536:	40cb      	lsrs	r3, r1
 8000538:	1e50      	subs	r0, r2, #1
 800053a:	4182      	sbcs	r2, r0
 800053c:	1af6      	subs	r6, r6, r3
 800053e:	4317      	orrs	r7, r2
 8000540:	464b      	mov	r3, r9
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	45b9      	cmp	r9, r7
 8000546:	4180      	sbcs	r0, r0
 8000548:	4240      	negs	r0, r0
 800054a:	1a36      	subs	r6, r6, r0
 800054c:	0233      	lsls	r3, r6, #8
 800054e:	d400      	bmi.n	8000552 <__aeabi_dadd+0xaa>
 8000550:	e0ff      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000552:	0276      	lsls	r6, r6, #9
 8000554:	0a76      	lsrs	r6, r6, #9
 8000556:	2e00      	cmp	r6, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb4>
 800055a:	e13c      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800055c:	0030      	movs	r0, r6
 800055e:	f001 ff43 	bl	80023e8 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2120      	movs	r1, #32
 8000568:	0038      	movs	r0, r7
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	40d0      	lsrs	r0, r2
 800056e:	409e      	lsls	r6, r3
 8000570:	0002      	movs	r2, r0
 8000572:	409f      	lsls	r7, r3
 8000574:	4332      	orrs	r2, r6
 8000576:	429c      	cmp	r4, r3
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xd4>
 800057a:	e1a6      	b.n	80008ca <__aeabi_dadd+0x422>
 800057c:	1b18      	subs	r0, r3, r4
 800057e:	3001      	adds	r0, #1
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	003e      	movs	r6, r7
 8000584:	408f      	lsls	r7, r1
 8000586:	40c6      	lsrs	r6, r0
 8000588:	1e7b      	subs	r3, r7, #1
 800058a:	419f      	sbcs	r7, r3
 800058c:	0013      	movs	r3, r2
 800058e:	408b      	lsls	r3, r1
 8000590:	4337      	orrs	r7, r6
 8000592:	431f      	orrs	r7, r3
 8000594:	40c2      	lsrs	r2, r0
 8000596:	003b      	movs	r3, r7
 8000598:	0016      	movs	r6, r2
 800059a:	2400      	movs	r4, #0
 800059c:	4313      	orrs	r3, r2
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0xfa>
 80005a0:	e1df      	b.n	8000962 <__aeabi_dadd+0x4ba>
 80005a2:	077b      	lsls	r3, r7, #29
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dadd+0x100>
 80005a6:	e332      	b.n	8000c0e <__aeabi_dadd+0x766>
 80005a8:	230f      	movs	r3, #15
 80005aa:	003a      	movs	r2, r7
 80005ac:	403b      	ands	r3, r7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d004      	beq.n	80005bc <__aeabi_dadd+0x114>
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	42ba      	cmp	r2, r7
 80005b6:	41bf      	sbcs	r7, r7
 80005b8:	427f      	negs	r7, r7
 80005ba:	19f6      	adds	r6, r6, r7
 80005bc:	0233      	lsls	r3, r6, #8
 80005be:	d400      	bmi.n	80005c2 <__aeabi_dadd+0x11a>
 80005c0:	e323      	b.n	8000c0a <__aeabi_dadd+0x762>
 80005c2:	4b9c      	ldr	r3, [pc, #624]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c4:	3401      	adds	r4, #1
 80005c6:	429c      	cmp	r4, r3
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x124>
 80005ca:	e0b4      	b.n	8000736 <__aeabi_dadd+0x28e>
 80005cc:	4b9a      	ldr	r3, [pc, #616]	@ (8000838 <__aeabi_dadd+0x390>)
 80005ce:	0564      	lsls	r4, r4, #21
 80005d0:	401e      	ands	r6, r3
 80005d2:	0d64      	lsrs	r4, r4, #21
 80005d4:	0777      	lsls	r7, r6, #29
 80005d6:	08d2      	lsrs	r2, r2, #3
 80005d8:	0276      	lsls	r6, r6, #9
 80005da:	4317      	orrs	r7, r2
 80005dc:	0b36      	lsrs	r6, r6, #12
 80005de:	e0ac      	b.n	800073a <__aeabi_dadd+0x292>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x13e>
 80005e4:	e07e      	b.n	80006e4 <__aeabi_dadd+0x23c>
 80005e6:	4641      	mov	r1, r8
 80005e8:	1b09      	subs	r1, r1, r4
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x148>
 80005ee:	e160      	b.n	80008b2 <__aeabi_dadd+0x40a>
 80005f0:	0034      	movs	r4, r6
 80005f2:	4648      	mov	r0, r9
 80005f4:	4304      	orrs	r4, r0
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x152>
 80005f8:	e1c9      	b.n	800098e <__aeabi_dadd+0x4e6>
 80005fa:	1e4c      	subs	r4, r1, #1
 80005fc:	2901      	cmp	r1, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e22e      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000602:	4d8c      	ldr	r5, [pc, #560]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000604:	42a9      	cmp	r1, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e224      	b.n	8000a54 <__aeabi_dadd+0x5ac>
 800060a:	2701      	movs	r7, #1
 800060c:	2c38      	cmp	r4, #56	@ 0x38
 800060e:	dc11      	bgt.n	8000634 <__aeabi_dadd+0x18c>
 8000610:	0021      	movs	r1, r4
 8000612:	291f      	cmp	r1, #31
 8000614:	dd00      	ble.n	8000618 <__aeabi_dadd+0x170>
 8000616:	e20b      	b.n	8000a30 <__aeabi_dadd+0x588>
 8000618:	2420      	movs	r4, #32
 800061a:	0037      	movs	r7, r6
 800061c:	4648      	mov	r0, r9
 800061e:	1a64      	subs	r4, r4, r1
 8000620:	40a7      	lsls	r7, r4
 8000622:	40c8      	lsrs	r0, r1
 8000624:	4307      	orrs	r7, r0
 8000626:	4648      	mov	r0, r9
 8000628:	40a0      	lsls	r0, r4
 800062a:	40ce      	lsrs	r6, r1
 800062c:	1e44      	subs	r4, r0, #1
 800062e:	41a0      	sbcs	r0, r4
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	4307      	orrs	r7, r0
 8000634:	1bd7      	subs	r7, r2, r7
 8000636:	42ba      	cmp	r2, r7
 8000638:	4192      	sbcs	r2, r2
 800063a:	4252      	negs	r2, r2
 800063c:	4665      	mov	r5, ip
 800063e:	4644      	mov	r4, r8
 8000640:	1a9e      	subs	r6, r3, r2
 8000642:	e783      	b.n	800054c <__aeabi_dadd+0xa4>
 8000644:	2900      	cmp	r1, #0
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e09c      	b.n	8000784 <__aeabi_dadd+0x2dc>
 800064a:	4647      	mov	r7, r8
 800064c:	2f00      	cmp	r7, #0
 800064e:	d167      	bne.n	8000720 <__aeabi_dadd+0x278>
 8000650:	001f      	movs	r7, r3
 8000652:	4317      	orrs	r7, r2
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x1b0>
 8000656:	e0e4      	b.n	8000822 <__aeabi_dadd+0x37a>
 8000658:	1e48      	subs	r0, r1, #1
 800065a:	2901      	cmp	r1, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1b8>
 800065e:	e19b      	b.n	8000998 <__aeabi_dadd+0x4f0>
 8000660:	4f74      	ldr	r7, [pc, #464]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000662:	42b9      	cmp	r1, r7
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1c0>
 8000666:	e0eb      	b.n	8000840 <__aeabi_dadd+0x398>
 8000668:	2701      	movs	r7, #1
 800066a:	0001      	movs	r1, r0
 800066c:	2838      	cmp	r0, #56	@ 0x38
 800066e:	dc11      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 8000670:	291f      	cmp	r1, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0x1ce>
 8000674:	e1c7      	b.n	8000a06 <__aeabi_dadd+0x55e>
 8000676:	2720      	movs	r7, #32
 8000678:	1a78      	subs	r0, r7, r1
 800067a:	001f      	movs	r7, r3
 800067c:	4684      	mov	ip, r0
 800067e:	4087      	lsls	r7, r0
 8000680:	0010      	movs	r0, r2
 8000682:	40c8      	lsrs	r0, r1
 8000684:	4307      	orrs	r7, r0
 8000686:	4660      	mov	r0, ip
 8000688:	4082      	lsls	r2, r0
 800068a:	40cb      	lsrs	r3, r1
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	18f6      	adds	r6, r6, r3
 8000692:	4317      	orrs	r7, r2
 8000694:	444f      	add	r7, r9
 8000696:	454f      	cmp	r7, r9
 8000698:	4180      	sbcs	r0, r0
 800069a:	4240      	negs	r0, r0
 800069c:	1836      	adds	r6, r6, r0
 800069e:	0233      	lsls	r3, r6, #8
 80006a0:	d557      	bpl.n	8000752 <__aeabi_dadd+0x2aa>
 80006a2:	4b64      	ldr	r3, [pc, #400]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006a4:	3401      	adds	r4, #1
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d045      	beq.n	8000736 <__aeabi_dadd+0x28e>
 80006aa:	2101      	movs	r1, #1
 80006ac:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <__aeabi_dadd+0x390>)
 80006ae:	087a      	lsrs	r2, r7, #1
 80006b0:	401e      	ands	r6, r3
 80006b2:	4039      	ands	r1, r7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	07f7      	lsls	r7, r6, #31
 80006b8:	4317      	orrs	r7, r2
 80006ba:	0876      	lsrs	r6, r6, #1
 80006bc:	e771      	b.n	80005a2 <__aeabi_dadd+0xfa>
 80006be:	001f      	movs	r7, r3
 80006c0:	4317      	orrs	r7, r2
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x21e>
 80006c4:	e0ad      	b.n	8000822 <__aeabi_dadd+0x37a>
 80006c6:	1e4f      	subs	r7, r1, #1
 80006c8:	46bc      	mov	ip, r7
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e182      	b.n	80009d6 <__aeabi_dadd+0x52e>
 80006d0:	4f58      	ldr	r7, [pc, #352]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006d2:	42b9      	cmp	r1, r7
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x230>
 80006d6:	e190      	b.n	80009fa <__aeabi_dadd+0x552>
 80006d8:	4661      	mov	r1, ip
 80006da:	2701      	movs	r7, #1
 80006dc:	2938      	cmp	r1, #56	@ 0x38
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x23a>
 80006e0:	e72e      	b.n	8000540 <__aeabi_dadd+0x98>
 80006e2:	e718      	b.n	8000516 <__aeabi_dadd+0x6e>
 80006e4:	4f55      	ldr	r7, [pc, #340]	@ (800083c <__aeabi_dadd+0x394>)
 80006e6:	1c61      	adds	r1, r4, #1
 80006e8:	4239      	tst	r1, r7
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e0d0      	b.n	8000890 <__aeabi_dadd+0x3e8>
 80006ee:	0031      	movs	r1, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	001f      	movs	r7, r3
 80006f4:	4301      	orrs	r1, r0
 80006f6:	4317      	orrs	r7, r2
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e13d      	b.n	800097a <__aeabi_dadd+0x4d2>
 80006fe:	2900      	cmp	r1, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x25c>
 8000702:	e1bc      	b.n	8000a7e <__aeabi_dadd+0x5d6>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d000      	beq.n	800070a <__aeabi_dadd+0x262>
 8000708:	e1bf      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 800070a:	464b      	mov	r3, r9
 800070c:	2100      	movs	r1, #0
 800070e:	08d8      	lsrs	r0, r3, #3
 8000710:	0777      	lsls	r7, r6, #29
 8000712:	4307      	orrs	r7, r0
 8000714:	08f0      	lsrs	r0, r6, #3
 8000716:	0306      	lsls	r6, r0, #12
 8000718:	054c      	lsls	r4, r1, #21
 800071a:	0b36      	lsrs	r6, r6, #12
 800071c:	0d64      	lsrs	r4, r4, #21
 800071e:	e00c      	b.n	800073a <__aeabi_dadd+0x292>
 8000720:	4f44      	ldr	r7, [pc, #272]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000722:	42bc      	cmp	r4, r7
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e08b      	b.n	8000840 <__aeabi_dadd+0x398>
 8000728:	2701      	movs	r7, #1
 800072a:	2938      	cmp	r1, #56	@ 0x38
 800072c:	dcb2      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 800072e:	2780      	movs	r7, #128	@ 0x80
 8000730:	043f      	lsls	r7, r7, #16
 8000732:	433b      	orrs	r3, r7
 8000734:	e79c      	b.n	8000670 <__aeabi_dadd+0x1c8>
 8000736:	2600      	movs	r6, #0
 8000738:	2700      	movs	r7, #0
 800073a:	0524      	lsls	r4, r4, #20
 800073c:	4334      	orrs	r4, r6
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	432c      	orrs	r4, r5
 8000742:	0038      	movs	r0, r7
 8000744:	0021      	movs	r1, r4
 8000746:	b002      	add	sp, #8
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	077b      	lsls	r3, r7, #29
 8000754:	d004      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 8000756:	230f      	movs	r3, #15
 8000758:	403b      	ands	r3, r7
 800075a:	2b04      	cmp	r3, #4
 800075c:	d000      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 800075e:	e728      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000760:	08f8      	lsrs	r0, r7, #3
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000764:	0777      	lsls	r7, r6, #29
 8000766:	4307      	orrs	r7, r0
 8000768:	08f0      	lsrs	r0, r6, #3
 800076a:	429c      	cmp	r4, r3
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x2c8>
 800076e:	e24a      	b.n	8000c06 <__aeabi_dadd+0x75e>
 8000770:	003b      	movs	r3, r7
 8000772:	4303      	orrs	r3, r0
 8000774:	d059      	beq.n	800082a <__aeabi_dadd+0x382>
 8000776:	2680      	movs	r6, #128	@ 0x80
 8000778:	0336      	lsls	r6, r6, #12
 800077a:	4306      	orrs	r6, r0
 800077c:	0336      	lsls	r6, r6, #12
 800077e:	4c2d      	ldr	r4, [pc, #180]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000780:	0b36      	lsrs	r6, r6, #12
 8000782:	e7da      	b.n	800073a <__aeabi_dadd+0x292>
 8000784:	2900      	cmp	r1, #0
 8000786:	d061      	beq.n	800084c <__aeabi_dadd+0x3a4>
 8000788:	4641      	mov	r1, r8
 800078a:	1b09      	subs	r1, r1, r4
 800078c:	2c00      	cmp	r4, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ea>
 8000790:	e0b9      	b.n	8000906 <__aeabi_dadd+0x45e>
 8000792:	4c28      	ldr	r4, [pc, #160]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000794:	45a0      	cmp	r8, r4
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2f2>
 8000798:	e1a5      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 800079a:	2701      	movs	r7, #1
 800079c:	2938      	cmp	r1, #56	@ 0x38
 800079e:	dc13      	bgt.n	80007c8 <__aeabi_dadd+0x320>
 80007a0:	2480      	movs	r4, #128	@ 0x80
 80007a2:	0424      	lsls	r4, r4, #16
 80007a4:	4326      	orrs	r6, r4
 80007a6:	291f      	cmp	r1, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e1c8      	b.n	8000b3e <__aeabi_dadd+0x696>
 80007ac:	2420      	movs	r4, #32
 80007ae:	0037      	movs	r7, r6
 80007b0:	4648      	mov	r0, r9
 80007b2:	1a64      	subs	r4, r4, r1
 80007b4:	40a7      	lsls	r7, r4
 80007b6:	40c8      	lsrs	r0, r1
 80007b8:	4307      	orrs	r7, r0
 80007ba:	4648      	mov	r0, r9
 80007bc:	40a0      	lsls	r0, r4
 80007be:	40ce      	lsrs	r6, r1
 80007c0:	1e44      	subs	r4, r0, #1
 80007c2:	41a0      	sbcs	r0, r4
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	4307      	orrs	r7, r0
 80007c8:	18bf      	adds	r7, r7, r2
 80007ca:	4297      	cmp	r7, r2
 80007cc:	4192      	sbcs	r2, r2
 80007ce:	4252      	negs	r2, r2
 80007d0:	4644      	mov	r4, r8
 80007d2:	18d6      	adds	r6, r2, r3
 80007d4:	e763      	b.n	800069e <__aeabi_dadd+0x1f6>
 80007d6:	0038      	movs	r0, r7
 80007d8:	f001 fe06 	bl	80023e8 <__clzsi2>
 80007dc:	0003      	movs	r3, r0
 80007de:	3318      	adds	r3, #24
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x33e>
 80007e4:	e6bf      	b.n	8000566 <__aeabi_dadd+0xbe>
 80007e6:	003a      	movs	r2, r7
 80007e8:	3808      	subs	r0, #8
 80007ea:	4082      	lsls	r2, r0
 80007ec:	429c      	cmp	r4, r3
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x34a>
 80007f0:	e083      	b.n	80008fa <__aeabi_dadd+0x452>
 80007f2:	1b1b      	subs	r3, r3, r4
 80007f4:	1c58      	adds	r0, r3, #1
 80007f6:	281f      	cmp	r0, #31
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x354>
 80007fa:	e1b4      	b.n	8000b66 <__aeabi_dadd+0x6be>
 80007fc:	0017      	movs	r7, r2
 80007fe:	3b1f      	subs	r3, #31
 8000800:	40df      	lsrs	r7, r3
 8000802:	2820      	cmp	r0, #32
 8000804:	d005      	beq.n	8000812 <__aeabi_dadd+0x36a>
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	409a      	lsls	r2, r3
 800080c:	1e53      	subs	r3, r2, #1
 800080e:	419a      	sbcs	r2, r3
 8000810:	4317      	orrs	r7, r2
 8000812:	2400      	movs	r4, #0
 8000814:	2f00      	cmp	r7, #0
 8000816:	d00a      	beq.n	800082e <__aeabi_dadd+0x386>
 8000818:	077b      	lsls	r3, r7, #29
 800081a:	d000      	beq.n	800081e <__aeabi_dadd+0x376>
 800081c:	e6c4      	b.n	80005a8 <__aeabi_dadd+0x100>
 800081e:	0026      	movs	r6, r4
 8000820:	e79e      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000822:	464b      	mov	r3, r9
 8000824:	000c      	movs	r4, r1
 8000826:	08d8      	lsrs	r0, r3, #3
 8000828:	e79b      	b.n	8000762 <__aeabi_dadd+0x2ba>
 800082a:	2700      	movs	r7, #0
 800082c:	4c01      	ldr	r4, [pc, #4]	@ (8000834 <__aeabi_dadd+0x38c>)
 800082e:	2600      	movs	r6, #0
 8000830:	e783      	b.n	800073a <__aeabi_dadd+0x292>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	000007ff 	.word	0x000007ff
 8000838:	ff7fffff 	.word	0xff7fffff
 800083c:	000007fe 	.word	0x000007fe
 8000840:	464b      	mov	r3, r9
 8000842:	0777      	lsls	r7, r6, #29
 8000844:	08d8      	lsrs	r0, r3, #3
 8000846:	4307      	orrs	r7, r0
 8000848:	08f0      	lsrs	r0, r6, #3
 800084a:	e791      	b.n	8000770 <__aeabi_dadd+0x2c8>
 800084c:	4fcd      	ldr	r7, [pc, #820]	@ (8000b84 <__aeabi_dadd+0x6dc>)
 800084e:	1c61      	adds	r1, r4, #1
 8000850:	4239      	tst	r1, r7
 8000852:	d16b      	bne.n	800092c <__aeabi_dadd+0x484>
 8000854:	0031      	movs	r1, r6
 8000856:	4648      	mov	r0, r9
 8000858:	4301      	orrs	r1, r0
 800085a:	2c00      	cmp	r4, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e14b      	b.n	8000af8 <__aeabi_dadd+0x650>
 8000860:	001f      	movs	r7, r3
 8000862:	4317      	orrs	r7, r2
 8000864:	2900      	cmp	r1, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x3c2>
 8000868:	e181      	b.n	8000b6e <__aeabi_dadd+0x6c6>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x3c8>
 800086e:	e74c      	b.n	800070a <__aeabi_dadd+0x262>
 8000870:	444a      	add	r2, r9
 8000872:	454a      	cmp	r2, r9
 8000874:	4180      	sbcs	r0, r0
 8000876:	18f6      	adds	r6, r6, r3
 8000878:	4240      	negs	r0, r0
 800087a:	1836      	adds	r6, r6, r0
 800087c:	0233      	lsls	r3, r6, #8
 800087e:	d500      	bpl.n	8000882 <__aeabi_dadd+0x3da>
 8000880:	e1b0      	b.n	8000be4 <__aeabi_dadd+0x73c>
 8000882:	0017      	movs	r7, r2
 8000884:	4691      	mov	r9, r2
 8000886:	4337      	orrs	r7, r6
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x3e4>
 800088a:	e73e      	b.n	800070a <__aeabi_dadd+0x262>
 800088c:	2600      	movs	r6, #0
 800088e:	e754      	b.n	800073a <__aeabi_dadd+0x292>
 8000890:	4649      	mov	r1, r9
 8000892:	1a89      	subs	r1, r1, r2
 8000894:	4688      	mov	r8, r1
 8000896:	45c1      	cmp	r9, r8
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1af1      	subs	r1, r6, r3
 800089c:	427f      	negs	r7, r7
 800089e:	1bc9      	subs	r1, r1, r7
 80008a0:	020f      	lsls	r7, r1, #8
 80008a2:	d461      	bmi.n	8000968 <__aeabi_dadd+0x4c0>
 80008a4:	4647      	mov	r7, r8
 80008a6:	430f      	orrs	r7, r1
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x404>
 80008aa:	e0bd      	b.n	8000a28 <__aeabi_dadd+0x580>
 80008ac:	000e      	movs	r6, r1
 80008ae:	4647      	mov	r7, r8
 80008b0:	e651      	b.n	8000556 <__aeabi_dadd+0xae>
 80008b2:	4cb5      	ldr	r4, [pc, #724]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 80008b4:	45a0      	cmp	r8, r4
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x412>
 80008b8:	e100      	b.n	8000abc <__aeabi_dadd+0x614>
 80008ba:	2701      	movs	r7, #1
 80008bc:	2938      	cmp	r1, #56	@ 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x41a>
 80008c0:	e6b8      	b.n	8000634 <__aeabi_dadd+0x18c>
 80008c2:	2480      	movs	r4, #128	@ 0x80
 80008c4:	0424      	lsls	r4, r4, #16
 80008c6:	4326      	orrs	r6, r4
 80008c8:	e6a3      	b.n	8000612 <__aeabi_dadd+0x16a>
 80008ca:	4eb0      	ldr	r6, [pc, #704]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	4016      	ands	r6, r2
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e73f      	b.n	8000756 <__aeabi_dadd+0x2ae>
 80008d6:	e743      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80008d8:	000f      	movs	r7, r1
 80008da:	0018      	movs	r0, r3
 80008dc:	3f20      	subs	r7, #32
 80008de:	40f8      	lsrs	r0, r7
 80008e0:	4684      	mov	ip, r0
 80008e2:	2920      	cmp	r1, #32
 80008e4:	d003      	beq.n	80008ee <__aeabi_dadd+0x446>
 80008e6:	2740      	movs	r7, #64	@ 0x40
 80008e8:	1a79      	subs	r1, r7, r1
 80008ea:	408b      	lsls	r3, r1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	1e53      	subs	r3, r2, #1
 80008f0:	419a      	sbcs	r2, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	0017      	movs	r7, r2
 80008f6:	431f      	orrs	r7, r3
 80008f8:	e622      	b.n	8000540 <__aeabi_dadd+0x98>
 80008fa:	48a4      	ldr	r0, [pc, #656]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008fc:	1ae1      	subs	r1, r4, r3
 80008fe:	4010      	ands	r0, r2
 8000900:	0747      	lsls	r7, r0, #29
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	e707      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000906:	0034      	movs	r4, r6
 8000908:	4648      	mov	r0, r9
 800090a:	4304      	orrs	r4, r0
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0fa      	b.n	8000b06 <__aeabi_dadd+0x65e>
 8000910:	1e4c      	subs	r4, r1, #1
 8000912:	2901      	cmp	r1, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0d7      	b.n	8000ac8 <__aeabi_dadd+0x620>
 8000918:	4f9b      	ldr	r7, [pc, #620]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800091a:	42b9      	cmp	r1, r7
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x478>
 800091e:	e0e2      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 8000920:	2701      	movs	r7, #1
 8000922:	2c38      	cmp	r4, #56	@ 0x38
 8000924:	dd00      	ble.n	8000928 <__aeabi_dadd+0x480>
 8000926:	e74f      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000928:	0021      	movs	r1, r4
 800092a:	e73c      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 800092c:	4c96      	ldr	r4, [pc, #600]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800092e:	42a1      	cmp	r1, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x48c>
 8000932:	e0dd      	b.n	8000af0 <__aeabi_dadd+0x648>
 8000934:	444a      	add	r2, r9
 8000936:	454a      	cmp	r2, r9
 8000938:	4180      	sbcs	r0, r0
 800093a:	18f3      	adds	r3, r6, r3
 800093c:	4240      	negs	r0, r0
 800093e:	1818      	adds	r0, r3, r0
 8000940:	07c7      	lsls	r7, r0, #31
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	4317      	orrs	r7, r2
 8000946:	0846      	lsrs	r6, r0, #1
 8000948:	0752      	lsls	r2, r2, #29
 800094a:	d005      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 800094c:	220f      	movs	r2, #15
 800094e:	000c      	movs	r4, r1
 8000950:	403a      	ands	r2, r7
 8000952:	2a04      	cmp	r2, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 8000956:	e62c      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000958:	0776      	lsls	r6, r6, #29
 800095a:	08ff      	lsrs	r7, r7, #3
 800095c:	4337      	orrs	r7, r6
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	e6d9      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000962:	2700      	movs	r7, #0
 8000964:	2600      	movs	r6, #0
 8000966:	e6e8      	b.n	800073a <__aeabi_dadd+0x292>
 8000968:	4649      	mov	r1, r9
 800096a:	1a57      	subs	r7, r2, r1
 800096c:	42ba      	cmp	r2, r7
 800096e:	4192      	sbcs	r2, r2
 8000970:	1b9e      	subs	r6, r3, r6
 8000972:	4252      	negs	r2, r2
 8000974:	4665      	mov	r5, ip
 8000976:	1ab6      	subs	r6, r6, r2
 8000978:	e5ed      	b.n	8000556 <__aeabi_dadd+0xae>
 800097a:	2900      	cmp	r1, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x4d8>
 800097e:	e0c6      	b.n	8000b0e <__aeabi_dadd+0x666>
 8000980:	2f00      	cmp	r7, #0
 8000982:	d167      	bne.n	8000a54 <__aeabi_dadd+0x5ac>
 8000984:	2680      	movs	r6, #128	@ 0x80
 8000986:	2500      	movs	r5, #0
 8000988:	4c7f      	ldr	r4, [pc, #508]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800098a:	0336      	lsls	r6, r6, #12
 800098c:	e6d5      	b.n	800073a <__aeabi_dadd+0x292>
 800098e:	4665      	mov	r5, ip
 8000990:	000c      	movs	r4, r1
 8000992:	001e      	movs	r6, r3
 8000994:	08d0      	lsrs	r0, r2, #3
 8000996:	e6e4      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000998:	444a      	add	r2, r9
 800099a:	454a      	cmp	r2, r9
 800099c:	4180      	sbcs	r0, r0
 800099e:	18f3      	adds	r3, r6, r3
 80009a0:	4240      	negs	r0, r0
 80009a2:	1818      	adds	r0, r3, r0
 80009a4:	0011      	movs	r1, r2
 80009a6:	0203      	lsls	r3, r0, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x504>
 80009aa:	e096      	b.n	8000ada <__aeabi_dadd+0x632>
 80009ac:	4b77      	ldr	r3, [pc, #476]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80009ae:	0849      	lsrs	r1, r1, #1
 80009b0:	4018      	ands	r0, r3
 80009b2:	07c3      	lsls	r3, r0, #31
 80009b4:	430b      	orrs	r3, r1
 80009b6:	0844      	lsrs	r4, r0, #1
 80009b8:	0749      	lsls	r1, r1, #29
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x516>
 80009bc:	e129      	b.n	8000c12 <__aeabi_dadd+0x76a>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x520>
 80009c6:	e0ea      	b.n	8000b9e <__aeabi_dadd+0x6f6>
 80009c8:	1d1f      	adds	r7, r3, #4
 80009ca:	429f      	cmp	r7, r3
 80009cc:	41b6      	sbcs	r6, r6
 80009ce:	4276      	negs	r6, r6
 80009d0:	1936      	adds	r6, r6, r4
 80009d2:	2402      	movs	r4, #2
 80009d4:	e6c4      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80009d6:	4649      	mov	r1, r9
 80009d8:	1a8f      	subs	r7, r1, r2
 80009da:	45b9      	cmp	r9, r7
 80009dc:	4180      	sbcs	r0, r0
 80009de:	1af6      	subs	r6, r6, r3
 80009e0:	4240      	negs	r0, r0
 80009e2:	1a36      	subs	r6, r6, r0
 80009e4:	0233      	lsls	r3, r6, #8
 80009e6:	d406      	bmi.n	80009f6 <__aeabi_dadd+0x54e>
 80009e8:	0773      	lsls	r3, r6, #29
 80009ea:	08ff      	lsrs	r7, r7, #3
 80009ec:	2101      	movs	r1, #1
 80009ee:	431f      	orrs	r7, r3
 80009f0:	08f0      	lsrs	r0, r6, #3
 80009f2:	e690      	b.n	8000716 <__aeabi_dadd+0x26e>
 80009f4:	4665      	mov	r5, ip
 80009f6:	2401      	movs	r4, #1
 80009f8:	e5ab      	b.n	8000552 <__aeabi_dadd+0xaa>
 80009fa:	464b      	mov	r3, r9
 80009fc:	0777      	lsls	r7, r6, #29
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	4307      	orrs	r7, r0
 8000a02:	08f0      	lsrs	r0, r6, #3
 8000a04:	e6b4      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a06:	000f      	movs	r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	3f20      	subs	r7, #32
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2920      	cmp	r1, #32
 8000a12:	d003      	beq.n	8000a1c <__aeabi_dadd+0x574>
 8000a14:	2740      	movs	r7, #64	@ 0x40
 8000a16:	1a79      	subs	r1, r7, r1
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	1e53      	subs	r3, r2, #1
 8000a1e:	419a      	sbcs	r2, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	0017      	movs	r7, r2
 8000a24:	431f      	orrs	r7, r3
 8000a26:	e635      	b.n	8000694 <__aeabi_dadd+0x1ec>
 8000a28:	2500      	movs	r5, #0
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e684      	b.n	800073a <__aeabi_dadd+0x292>
 8000a30:	000c      	movs	r4, r1
 8000a32:	0035      	movs	r5, r6
 8000a34:	3c20      	subs	r4, #32
 8000a36:	40e5      	lsrs	r5, r4
 8000a38:	2920      	cmp	r1, #32
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a3c:	2440      	movs	r4, #64	@ 0x40
 8000a3e:	1a61      	subs	r1, r4, r1
 8000a40:	408e      	lsls	r6, r1
 8000a42:	4649      	mov	r1, r9
 8000a44:	4331      	orrs	r1, r6
 8000a46:	4689      	mov	r9, r1
 8000a48:	4648      	mov	r0, r9
 8000a4a:	1e41      	subs	r1, r0, #1
 8000a4c:	4188      	sbcs	r0, r1
 8000a4e:	0007      	movs	r7, r0
 8000a50:	432f      	orrs	r7, r5
 8000a52:	e5ef      	b.n	8000634 <__aeabi_dadd+0x18c>
 8000a54:	08d2      	lsrs	r2, r2, #3
 8000a56:	075f      	lsls	r7, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	e687      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a60:	1a17      	subs	r7, r2, r0
 8000a62:	42ba      	cmp	r2, r7
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	1b9e      	subs	r6, r3, r6
 8000a68:	4252      	negs	r2, r2
 8000a6a:	1ab6      	subs	r6, r6, r2
 8000a6c:	0233      	lsls	r3, r6, #8
 8000a6e:	d4c1      	bmi.n	80009f4 <__aeabi_dadd+0x54c>
 8000a70:	0773      	lsls	r3, r6, #29
 8000a72:	08ff      	lsrs	r7, r7, #3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	08f0      	lsrs	r0, r6, #3
 8000a7c:	e64b      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d07b      	beq.n	8000b7a <__aeabi_dadd+0x6d2>
 8000a82:	4665      	mov	r5, ip
 8000a84:	001e      	movs	r6, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	e63f      	b.n	800070a <__aeabi_dadd+0x262>
 8000a8a:	1a81      	subs	r1, r0, r2
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	45c1      	cmp	r9, r8
 8000a90:	41a4      	sbcs	r4, r4
 8000a92:	1af1      	subs	r1, r6, r3
 8000a94:	4264      	negs	r4, r4
 8000a96:	1b09      	subs	r1, r1, r4
 8000a98:	2480      	movs	r4, #128	@ 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4221      	tst	r1, r4
 8000a9e:	d077      	beq.n	8000b90 <__aeabi_dadd+0x6e8>
 8000aa0:	1a10      	subs	r0, r2, r0
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	0007      	movs	r7, r0
 8000aa8:	1b9e      	subs	r6, r3, r6
 8000aaa:	4252      	negs	r2, r2
 8000aac:	1ab6      	subs	r6, r6, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x60c>
 8000ab2:	e0a0      	b.n	8000bf6 <__aeabi_dadd+0x74e>
 8000ab4:	4665      	mov	r5, ip
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e63e      	b.n	800073a <__aeabi_dadd+0x292>
 8000abc:	075f      	lsls	r7, r3, #29
 8000abe:	08d2      	lsrs	r2, r2, #3
 8000ac0:	4665      	mov	r5, ip
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	08d8      	lsrs	r0, r3, #3
 8000ac6:	e653      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000ac8:	1881      	adds	r1, r0, r2
 8000aca:	4291      	cmp	r1, r2
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	18f0      	adds	r0, r6, r3
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	1880      	adds	r0, r0, r2
 8000ad4:	0203      	lsls	r3, r0, #8
 8000ad6:	d500      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000ad8:	e768      	b.n	80009ac <__aeabi_dadd+0x504>
 8000ada:	0747      	lsls	r7, r0, #29
 8000adc:	08c9      	lsrs	r1, r1, #3
 8000ade:	430f      	orrs	r7, r1
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	e617      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000ae6:	08d2      	lsrs	r2, r2, #3
 8000ae8:	075f      	lsls	r7, r3, #29
 8000aea:	4317      	orrs	r7, r2
 8000aec:	08d8      	lsrs	r0, r3, #3
 8000aee:	e63f      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000af0:	000c      	movs	r4, r1
 8000af2:	2600      	movs	r6, #0
 8000af4:	2700      	movs	r7, #0
 8000af6:	e620      	b.n	800073a <__aeabi_dadd+0x292>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d156      	bne.n	8000baa <__aeabi_dadd+0x702>
 8000afc:	075f      	lsls	r7, r3, #29
 8000afe:	08d2      	lsrs	r2, r2, #3
 8000b00:	4317      	orrs	r7, r2
 8000b02:	08d8      	lsrs	r0, r3, #3
 8000b04:	e634      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b06:	000c      	movs	r4, r1
 8000b08:	001e      	movs	r6, r3
 8000b0a:	08d0      	lsrs	r0, r2, #3
 8000b0c:	e629      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000b0e:	08c1      	lsrs	r1, r0, #3
 8000b10:	0770      	lsls	r0, r6, #29
 8000b12:	4301      	orrs	r1, r0
 8000b14:	08f0      	lsrs	r0, r6, #3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d062      	beq.n	8000be0 <__aeabi_dadd+0x738>
 8000b1a:	2480      	movs	r4, #128	@ 0x80
 8000b1c:	0324      	lsls	r4, r4, #12
 8000b1e:	4220      	tst	r0, r4
 8000b20:	d007      	beq.n	8000b32 <__aeabi_dadd+0x68a>
 8000b22:	08de      	lsrs	r6, r3, #3
 8000b24:	4226      	tst	r6, r4
 8000b26:	d104      	bne.n	8000b32 <__aeabi_dadd+0x68a>
 8000b28:	4665      	mov	r5, ip
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	08d1      	lsrs	r1, r2, #3
 8000b2e:	075b      	lsls	r3, r3, #29
 8000b30:	4319      	orrs	r1, r3
 8000b32:	0f4f      	lsrs	r7, r1, #29
 8000b34:	00c9      	lsls	r1, r1, #3
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	077f      	lsls	r7, r7, #29
 8000b3a:	430f      	orrs	r7, r1
 8000b3c:	e618      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	0030      	movs	r0, r6
 8000b42:	3c20      	subs	r4, #32
 8000b44:	40e0      	lsrs	r0, r4
 8000b46:	4684      	mov	ip, r0
 8000b48:	2920      	cmp	r1, #32
 8000b4a:	d005      	beq.n	8000b58 <__aeabi_dadd+0x6b0>
 8000b4c:	2440      	movs	r4, #64	@ 0x40
 8000b4e:	1a61      	subs	r1, r4, r1
 8000b50:	408e      	lsls	r6, r1
 8000b52:	4649      	mov	r1, r9
 8000b54:	4331      	orrs	r1, r6
 8000b56:	4689      	mov	r9, r1
 8000b58:	4648      	mov	r0, r9
 8000b5a:	1e41      	subs	r1, r0, #1
 8000b5c:	4188      	sbcs	r0, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	0007      	movs	r7, r0
 8000b62:	430f      	orrs	r7, r1
 8000b64:	e630      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000b66:	2120      	movs	r1, #32
 8000b68:	2700      	movs	r7, #0
 8000b6a:	1a09      	subs	r1, r1, r0
 8000b6c:	e50e      	b.n	800058c <__aeabi_dadd+0xe4>
 8000b6e:	001e      	movs	r6, r3
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dadd+0x6ce>
 8000b74:	e522      	b.n	80005bc <__aeabi_dadd+0x114>
 8000b76:	2400      	movs	r4, #0
 8000b78:	e758      	b.n	8000a2c <__aeabi_dadd+0x584>
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	2600      	movs	r6, #0
 8000b80:	e5db      	b.n	800073a <__aeabi_dadd+0x292>
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	000007fe 	.word	0x000007fe
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	ff7fffff 	.word	0xff7fffff
 8000b90:	4647      	mov	r7, r8
 8000b92:	430f      	orrs	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x6f0>
 8000b96:	e747      	b.n	8000a28 <__aeabi_dadd+0x580>
 8000b98:	000e      	movs	r6, r1
 8000b9a:	46c1      	mov	r9, r8
 8000b9c:	e5b5      	b.n	800070a <__aeabi_dadd+0x262>
 8000b9e:	08df      	lsrs	r7, r3, #3
 8000ba0:	0764      	lsls	r4, r4, #29
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4327      	orrs	r7, r4
 8000ba6:	0900      	lsrs	r0, r0, #4
 8000ba8:	e5b5      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000baa:	0019      	movs	r1, r3
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	0777      	lsls	r7, r6, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	08f0      	lsrs	r0, r6, #3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x714>
 8000bba:	e5d9      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0309      	lsls	r1, r1, #12
 8000bc0:	4208      	tst	r0, r1
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bc4:	08dc      	lsrs	r4, r3, #3
 8000bc6:	420c      	tst	r4, r1
 8000bc8:	d104      	bne.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0017      	movs	r7, r2
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	0f7b      	lsrs	r3, r7, #29
 8000bd6:	00ff      	lsls	r7, r7, #3
 8000bd8:	08ff      	lsrs	r7, r7, #3
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	431f      	orrs	r7, r3
 8000bde:	e5c7      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be0:	000f      	movs	r7, r1
 8000be2:	e5c5      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	4033      	ands	r3, r6
 8000bea:	075f      	lsls	r7, r3, #29
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	2401      	movs	r4, #1
 8000bf0:	4317      	orrs	r7, r2
 8000bf2:	0b1e      	lsrs	r6, r3, #12
 8000bf4:	e5a1      	b.n	800073a <__aeabi_dadd+0x292>
 8000bf6:	4226      	tst	r6, r4
 8000bf8:	d012      	beq.n	8000c20 <__aeabi_dadd+0x778>
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0002      	movs	r2, r0
 8000c00:	2401      	movs	r4, #1
 8000c02:	401e      	ands	r6, r3
 8000c04:	e4e6      	b.n	80005d4 <__aeabi_dadd+0x12c>
 8000c06:	0021      	movs	r1, r4
 8000c08:	e585      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c0a:	0017      	movs	r7, r2
 8000c0c:	e5a8      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000c0e:	003a      	movs	r2, r7
 8000c10:	e4d4      	b.n	80005bc <__aeabi_dadd+0x114>
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	0764      	lsls	r4, r4, #29
 8000c16:	431c      	orrs	r4, r3
 8000c18:	0027      	movs	r7, r4
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	0900      	lsrs	r0, r0, #4
 8000c1e:	e57a      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c20:	08c0      	lsrs	r0, r0, #3
 8000c22:	0777      	lsls	r7, r6, #29
 8000c24:	4307      	orrs	r7, r0
 8000c26:	4665      	mov	r5, ip
 8000c28:	2100      	movs	r1, #0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e573      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	ff7fffff 	.word	0xff7fffff

08000c34 <__aeabi_ddiv>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	46de      	mov	lr, fp
 8000c38:	4645      	mov	r5, r8
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	030b      	lsls	r3, r1, #12
 8000c48:	0b1b      	lsrs	r3, r3, #12
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	0fca      	lsrs	r2, r1, #31
 8000c4e:	004b      	lsls	r3, r1, #1
 8000c50:	0004      	movs	r4, r0
 8000c52:	4680      	mov	r8, r0
 8000c54:	0d5b      	lsrs	r3, r3, #21
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x28>
 8000c5a:	e098      	b.n	8000d8e <__aeabi_ddiv+0x15a>
 8000c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <__aeabi_ddiv+0x9e>
 8000c62:	4659      	mov	r1, fp
 8000c64:	0f42      	lsrs	r2, r0, #29
 8000c66:	00c9      	lsls	r1, r1, #3
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	00c2      	lsls	r2, r0, #3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4a77      	ldr	r2, [pc, #476]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000c76:	4689      	mov	r9, r1
 8000c78:	4692      	mov	sl, r2
 8000c7a:	449a      	add	sl, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2400      	movs	r4, #0
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	9e00      	ldr	r6, [sp, #0]
 8000c84:	9f01      	ldr	r7, [sp, #4]
 8000c86:	033b      	lsls	r3, r7, #12
 8000c88:	0b1b      	lsrs	r3, r3, #12
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	007b      	lsls	r3, r7, #1
 8000c8e:	0030      	movs	r0, r6
 8000c90:	0d5b      	lsrs	r3, r3, #21
 8000c92:	0ffd      	lsrs	r5, r7, #31
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d059      	beq.n	8000d4c <__aeabi_ddiv+0x118>
 8000c98:	4a6d      	ldr	r2, [pc, #436]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d048      	beq.n	8000d30 <__aeabi_ddiv+0xfc>
 8000c9e:	4659      	mov	r1, fp
 8000ca0:	0f72      	lsrs	r2, r6, #29
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	4311      	orrs	r1, r2
 8000cac:	468b      	mov	fp, r1
 8000cae:	4969      	ldr	r1, [pc, #420]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000cb0:	00f2      	lsls	r2, r6, #3
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	469a      	mov	sl, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	9e02      	ldr	r6, [sp, #8]
 8000cc0:	406e      	eors	r6, r5
 8000cc2:	b2f6      	uxtb	r6, r6
 8000cc4:	2c0f      	cmp	r4, #15
 8000cc6:	d900      	bls.n	8000cca <__aeabi_ddiv+0x96>
 8000cc8:	e0ce      	b.n	8000e68 <__aeabi_ddiv+0x234>
 8000cca:	4b63      	ldr	r3, [pc, #396]	@ (8000e58 <__aeabi_ddiv+0x224>)
 8000ccc:	00a4      	lsls	r4, r4, #2
 8000cce:	591b      	ldr	r3, [r3, r4]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_ddiv+0xa8>
 8000cda:	e090      	b.n	8000dfe <__aeabi_ddiv+0x1ca>
 8000cdc:	469a      	mov	sl, r3
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2408      	movs	r4, #8
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	e7cc      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000ce8:	46cb      	mov	fp, r9
 8000cea:	4642      	mov	r2, r8
 8000cec:	9d02      	ldr	r5, [sp, #8]
 8000cee:	9903      	ldr	r1, [sp, #12]
 8000cf0:	2902      	cmp	r1, #2
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xc2>
 8000cf4:	e1de      	b.n	80010b4 <__aeabi_ddiv+0x480>
 8000cf6:	2903      	cmp	r1, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0xc8>
 8000cfa:	e08d      	b.n	8000e18 <__aeabi_ddiv+0x1e4>
 8000cfc:	2901      	cmp	r1, #1
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_ddiv+0xce>
 8000d00:	e179      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 8000d02:	002e      	movs	r6, r5
 8000d04:	2200      	movs	r2, #0
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	07f6      	lsls	r6, r6, #31
 8000d12:	4333      	orrs	r3, r6
 8000d14:	4640      	mov	r0, r8
 8000d16:	0019      	movs	r1, r3
 8000d18:	b007      	add	sp, #28
 8000d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1c:	46bb      	mov	fp, r7
 8000d1e:	46b2      	mov	sl, r6
 8000d20:	46a9      	mov	r9, r5
 8000d22:	46a0      	mov	r8, r4
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000d30:	465a      	mov	r2, fp
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4b49      	ldr	r3, [pc, #292]	@ (8000e5c <__aeabi_ddiv+0x228>)
 8000d38:	469c      	mov	ip, r3
 8000d3a:	44e2      	add	sl, ip
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d159      	bne.n	8000df4 <__aeabi_ddiv+0x1c0>
 8000d40:	2302      	movs	r3, #2
 8000d42:	431c      	orrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e7b8      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d4c:	465a      	mov	r2, fp
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	d049      	beq.n	8000de8 <__aeabi_ddiv+0x1b4>
 8000d54:	465b      	mov	r3, fp
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x128>
 8000d5a:	e19c      	b.n	8001096 <__aeabi_ddiv+0x462>
 8000d5c:	4658      	mov	r0, fp
 8000d5e:	f001 fb43 	bl	80023e8 <__clzsi2>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0003      	movs	r3, r0
 8000d66:	3a0b      	subs	r2, #11
 8000d68:	271d      	movs	r7, #29
 8000d6a:	9e00      	ldr	r6, [sp, #0]
 8000d6c:	1aba      	subs	r2, r7, r2
 8000d6e:	0019      	movs	r1, r3
 8000d70:	4658      	mov	r0, fp
 8000d72:	40d6      	lsrs	r6, r2
 8000d74:	3908      	subs	r1, #8
 8000d76:	4088      	lsls	r0, r1
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4302      	orrs	r2, r0
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	9a00      	ldr	r2, [sp, #0]
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4937      	ldr	r1, [pc, #220]	@ (8000e60 <__aeabi_ddiv+0x22c>)
 8000d84:	4453      	add	r3, sl
 8000d86:	468a      	mov	sl, r1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	449a      	add	sl, r3
 8000d8c:	e797      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d8e:	465b      	mov	r3, fp
 8000d90:	4303      	orrs	r3, r0
 8000d92:	4699      	mov	r9, r3
 8000d94:	d021      	beq.n	8000dda <__aeabi_ddiv+0x1a6>
 8000d96:	465b      	mov	r3, fp
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x16a>
 8000d9c:	e169      	b.n	8001072 <__aeabi_ddiv+0x43e>
 8000d9e:	4658      	mov	r0, fp
 8000da0:	f001 fb22 	bl	80023e8 <__clzsi2>
 8000da4:	230b      	movs	r3, #11
 8000da6:	425b      	negs	r3, r3
 8000da8:	469c      	mov	ip, r3
 8000daa:	0002      	movs	r2, r0
 8000dac:	4484      	add	ip, r0
 8000dae:	4666      	mov	r6, ip
 8000db0:	231d      	movs	r3, #29
 8000db2:	1b9b      	subs	r3, r3, r6
 8000db4:	0026      	movs	r6, r4
 8000db6:	0011      	movs	r1, r2
 8000db8:	4658      	mov	r0, fp
 8000dba:	40de      	lsrs	r6, r3
 8000dbc:	3908      	subs	r1, #8
 8000dbe:	4088      	lsls	r0, r1
 8000dc0:	0033      	movs	r3, r6
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0023      	movs	r3, r4
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <__aeabi_ddiv+0x230>)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	e753      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	4698      	mov	r8, r3
 8000dde:	469a      	mov	sl, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	2404      	movs	r4, #4
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	e74c      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000de8:	2301      	movs	r3, #1
 8000dea:	431c      	orrs	r4, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	469b      	mov	fp, r3
 8000df2:	e764      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000df4:	2303      	movs	r3, #3
 8000df6:	0032      	movs	r2, r6
 8000df8:	2103      	movs	r1, #3
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000dfe:	469a      	mov	sl, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	46d9      	mov	r9, fp
 8000e04:	240c      	movs	r4, #12
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	e73b      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2480      	movs	r4, #128	@ 0x80
 8000e0e:	4698      	mov	r8, r3
 8000e10:	2600      	movs	r6, #0
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	e779      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e18:	2480      	movs	r4, #128	@ 0x80
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	002e      	movs	r6, r5
 8000e24:	4690      	mov	r8, r2
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	e76f      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e2c:	2480      	movs	r4, #128	@ 0x80
 8000e2e:	464b      	mov	r3, r9
 8000e30:	0324      	lsls	r4, r4, #12
 8000e32:	4223      	tst	r3, r4
 8000e34:	d002      	beq.n	8000e3c <__aeabi_ddiv+0x208>
 8000e36:	465b      	mov	r3, fp
 8000e38:	4223      	tst	r3, r4
 8000e3a:	d0f0      	beq.n	8000e1e <__aeabi_ddiv+0x1ea>
 8000e3c:	2480      	movs	r4, #128	@ 0x80
 8000e3e:	464b      	mov	r3, r9
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	9e02      	ldr	r6, [sp, #8]
 8000e48:	4b01      	ldr	r3, [pc, #4]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	e75e      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff
 8000e54:	fffffc01 	.word	0xfffffc01
 8000e58:	08011d98 	.word	0x08011d98
 8000e5c:	fffff801 	.word	0xfffff801
 8000e60:	000003f3 	.word	0x000003f3
 8000e64:	fffffc0d 	.word	0xfffffc0d
 8000e68:	45cb      	cmp	fp, r9
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0x23a>
 8000e6c:	e0f8      	b.n	8001060 <__aeabi_ddiv+0x42c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x23e>
 8000e70:	e0f3      	b.n	800105a <__aeabi_ddiv+0x426>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	4644      	mov	r4, r8
 8000e7a:	4648      	mov	r0, r9
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e2      	add	sl, ip
 8000e80:	465b      	mov	r3, fp
 8000e82:	0e17      	lsrs	r7, r2, #24
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c19      	lsrs	r1, r3, #16
 8000e8a:	043b      	lsls	r3, r7, #16
 8000e8c:	0212      	lsls	r2, r2, #8
 8000e8e:	9700      	str	r7, [sp, #0]
 8000e90:	0c1f      	lsrs	r7, r3, #16
 8000e92:	4691      	mov	r9, r2
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9703      	str	r7, [sp, #12]
 8000e98:	f7ff f9d8 	bl	800024c <__aeabi_uidivmod>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	437a      	muls	r2, r7
 8000ea0:	040b      	lsls	r3, r1, #16
 8000ea2:	0c21      	lsrs	r1, r4, #16
 8000ea4:	4680      	mov	r8, r0
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d909      	bls.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000eac:	9f00      	ldr	r7, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	46bc      	mov	ip, r7
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	4461      	add	r1, ip
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	44e0      	add	r8, ip
 8000eba:	428f      	cmp	r7, r1
 8000ebc:	d800      	bhi.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000ebe:	e15c      	b.n	800117a <__aeabi_ddiv+0x546>
 8000ec0:	1a88      	subs	r0, r1, r2
 8000ec2:	9902      	ldr	r1, [sp, #8]
 8000ec4:	f7ff f9c2 	bl	800024c <__aeabi_uidivmod>
 8000ec8:	9a03      	ldr	r2, [sp, #12]
 8000eca:	0424      	lsls	r4, r4, #16
 8000ecc:	4342      	muls	r2, r0
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	0c24      	lsrs	r4, r4, #16
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	430c      	orrs	r4, r1
 8000ed6:	42a2      	cmp	r2, r4
 8000ed8:	d906      	bls.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000eda:	9900      	ldr	r1, [sp, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4464      	add	r4, ip
 8000ee2:	42a1      	cmp	r1, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000ee6:	e142      	b.n	800116e <__aeabi_ddiv+0x53a>
 8000ee8:	1aa0      	subs	r0, r4, r2
 8000eea:	4642      	mov	r2, r8
 8000eec:	0412      	lsls	r2, r2, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4693      	mov	fp, r2
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	4659      	mov	r1, fp
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	001f      	movs	r7, r3
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	040b      	lsls	r3, r1, #16
 8000efe:	4649      	mov	r1, r9
 8000f00:	0409      	lsls	r1, r1, #16
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	000c      	movs	r4, r1
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435c      	muls	r4, r3
 8000f0a:	0c12      	lsrs	r2, r2, #16
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	4351      	muls	r1, r2
 8000f12:	437a      	muls	r2, r7
 8000f14:	0c27      	lsrs	r7, r4, #16
 8000f16:	46bc      	mov	ip, r7
 8000f18:	185b      	adds	r3, r3, r1
 8000f1a:	4463      	add	r3, ip
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_ddiv+0x2f4>
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	468c      	mov	ip, r1
 8000f26:	4462      	add	r2, ip
 8000f28:	0c19      	lsrs	r1, r3, #16
 8000f2a:	0424      	lsls	r4, r4, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c24      	lsrs	r4, r4, #16
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	191c      	adds	r4, r3, r4
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d302      	bcc.n	8000f3e <__aeabi_ddiv+0x30a>
 8000f38:	d116      	bne.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3a:	42a5      	cmp	r5, r4
 8000f3c:	d214      	bcs.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3e:	465b      	mov	r3, fp
 8000f40:	9f00      	ldr	r7, [sp, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	444d      	add	r5, r9
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	454d      	cmp	r5, r9
 8000f4a:	419b      	sbcs	r3, r3
 8000f4c:	46bc      	mov	ip, r7
 8000f4e:	425b      	negs	r3, r3
 8000f50:	4463      	add	r3, ip
 8000f52:	18c0      	adds	r0, r0, r3
 8000f54:	4287      	cmp	r7, r0
 8000f56:	d300      	bcc.n	8000f5a <__aeabi_ddiv+0x326>
 8000f58:	e102      	b.n	8001160 <__aeabi_ddiv+0x52c>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x32c>
 8000f5e:	e129      	b.n	80011b4 <__aeabi_ddiv+0x580>
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x330>
 8000f62:	e124      	b.n	80011ae <__aeabi_ddiv+0x57a>
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	469b      	mov	fp, r3
 8000f68:	1b2c      	subs	r4, r5, r4
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	41ad      	sbcs	r5, r5
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	1a80      	subs	r0, r0, r2
 8000f72:	426d      	negs	r5, r5
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x348>
 8000f7a:	e10f      	b.n	800119c <__aeabi_ddiv+0x568>
 8000f7c:	9902      	ldr	r1, [sp, #8]
 8000f7e:	f7ff f965 	bl	800024c <__aeabi_uidivmod>
 8000f82:	9a03      	ldr	r2, [sp, #12]
 8000f84:	040b      	lsls	r3, r1, #16
 8000f86:	4342      	muls	r2, r0
 8000f88:	0c21      	lsrs	r1, r4, #16
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x360>
 8000f92:	e0cb      	b.n	800112c <__aeabi_ddiv+0x4f8>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f958 	bl	800024c <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_ddiv+0x37c>
 8000fae:	e0ca      	b.n	8001146 <__aeabi_ddiv+0x512>
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	1aa4      	subs	r4, r4, r2
 8000fb4:	042a      	lsls	r2, r5, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	9f04      	ldr	r7, [sp, #16]
 8000fba:	0413      	lsls	r3, r2, #16
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	4359      	muls	r1, r3
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	437b      	muls	r3, r7
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	0c15      	lsrs	r5, r2, #16
 8000fc8:	4368      	muls	r0, r5
 8000fca:	0c0b      	lsrs	r3, r1, #16
 8000fcc:	4484      	add	ip, r0
 8000fce:	4463      	add	r3, ip
 8000fd0:	437d      	muls	r5, r7
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d903      	bls.n	8000fde <__aeabi_ddiv+0x3aa>
 8000fd6:	2080      	movs	r0, #128	@ 0x80
 8000fd8:	0240      	lsls	r0, r0, #9
 8000fda:	4684      	mov	ip, r0
 8000fdc:	4465      	add	r5, ip
 8000fde:	0c18      	lsrs	r0, r3, #16
 8000fe0:	0409      	lsls	r1, r1, #16
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	0c09      	lsrs	r1, r1, #16
 8000fe6:	1940      	adds	r0, r0, r5
 8000fe8:	185b      	adds	r3, r3, r1
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d327      	bcc.n	800103e <__aeabi_ddiv+0x40a>
 8000fee:	d023      	beq.n	8001038 <__aeabi_ddiv+0x404>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	0035      	movs	r5, r6
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	4b94      	ldr	r3, [pc, #592]	@ (8001248 <__aeabi_ddiv+0x614>)
 8000ff8:	4453      	add	r3, sl
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dd60      	ble.n	80010c0 <__aeabi_ddiv+0x48c>
 8000ffe:	0751      	lsls	r1, r2, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_ddiv+0x3d0>
 8001002:	e086      	b.n	8001112 <__aeabi_ddiv+0x4de>
 8001004:	002e      	movs	r6, r5
 8001006:	08d1      	lsrs	r1, r2, #3
 8001008:	465a      	mov	r2, fp
 800100a:	01d2      	lsls	r2, r2, #7
 800100c:	d506      	bpl.n	800101c <__aeabi_ddiv+0x3e8>
 800100e:	465a      	mov	r2, fp
 8001010:	4b8e      	ldr	r3, [pc, #568]	@ (800124c <__aeabi_ddiv+0x618>)
 8001012:	401a      	ands	r2, r3
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	4693      	mov	fp, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4453      	add	r3, sl
 800101c:	4a8c      	ldr	r2, [pc, #560]	@ (8001250 <__aeabi_ddiv+0x61c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	dd00      	ble.n	8001024 <__aeabi_ddiv+0x3f0>
 8001022:	e680      	b.n	8000d26 <__aeabi_ddiv+0xf2>
 8001024:	465a      	mov	r2, fp
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	430a      	orrs	r2, r1
 800102a:	4690      	mov	r8, r2
 800102c:	465a      	mov	r2, fp
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0254      	lsls	r4, r2, #9
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	e669      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001038:	0035      	movs	r5, r6
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0db      	beq.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800103e:	9d00      	ldr	r5, [sp, #0]
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	46ac      	mov	ip, r5
 8001044:	4464      	add	r4, ip
 8001046:	42ac      	cmp	r4, r5
 8001048:	d200      	bcs.n	800104c <__aeabi_ddiv+0x418>
 800104a:	e09e      	b.n	800118a <__aeabi_ddiv+0x556>
 800104c:	4284      	cmp	r4, r0
 800104e:	d200      	bcs.n	8001052 <__aeabi_ddiv+0x41e>
 8001050:	e0e1      	b.n	8001216 <__aeabi_ddiv+0x5e2>
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x422>
 8001054:	e0ee      	b.n	8001234 <__aeabi_ddiv+0x600>
 8001056:	000a      	movs	r2, r1
 8001058:	e7ca      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 800105a:	4542      	cmp	r2, r8
 800105c:	d900      	bls.n	8001060 <__aeabi_ddiv+0x42c>
 800105e:	e708      	b.n	8000e72 <__aeabi_ddiv+0x23e>
 8001060:	464b      	mov	r3, r9
 8001062:	07dc      	lsls	r4, r3, #31
 8001064:	0858      	lsrs	r0, r3, #1
 8001066:	4643      	mov	r3, r8
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	431c      	orrs	r4, r3
 800106c:	4643      	mov	r3, r8
 800106e:	07dd      	lsls	r5, r3, #31
 8001070:	e706      	b.n	8000e80 <__aeabi_ddiv+0x24c>
 8001072:	f001 f9b9 	bl	80023e8 <__clzsi2>
 8001076:	2315      	movs	r3, #21
 8001078:	469c      	mov	ip, r3
 800107a:	4484      	add	ip, r0
 800107c:	0002      	movs	r2, r0
 800107e:	4663      	mov	r3, ip
 8001080:	3220      	adds	r2, #32
 8001082:	2b1c      	cmp	r3, #28
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x454>
 8001086:	e692      	b.n	8000dae <__aeabi_ddiv+0x17a>
 8001088:	0023      	movs	r3, r4
 800108a:	3808      	subs	r0, #8
 800108c:	4083      	lsls	r3, r0
 800108e:	4699      	mov	r9, r3
 8001090:	2300      	movs	r3, #0
 8001092:	4698      	mov	r8, r3
 8001094:	e69a      	b.n	8000dcc <__aeabi_ddiv+0x198>
 8001096:	f001 f9a7 	bl	80023e8 <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	0003      	movs	r3, r0
 800109e:	3215      	adds	r2, #21
 80010a0:	3320      	adds	r3, #32
 80010a2:	2a1c      	cmp	r2, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x474>
 80010a6:	e65f      	b.n	8000d68 <__aeabi_ddiv+0x134>
 80010a8:	9900      	ldr	r1, [sp, #0]
 80010aa:	3808      	subs	r0, #8
 80010ac:	4081      	lsls	r1, r0
 80010ae:	2200      	movs	r2, #0
 80010b0:	468b      	mov	fp, r1
 80010b2:	e666      	b.n	8000d82 <__aeabi_ddiv+0x14e>
 80010b4:	2200      	movs	r2, #0
 80010b6:	002e      	movs	r6, r5
 80010b8:	2400      	movs	r4, #0
 80010ba:	4690      	mov	r8, r2
 80010bc:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <__aeabi_ddiv+0x620>)
 80010be:	e625      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 80010c0:	002e      	movs	r6, r5
 80010c2:	2101      	movs	r1, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	2938      	cmp	r1, #56	@ 0x38
 80010c8:	dd00      	ble.n	80010cc <__aeabi_ddiv+0x498>
 80010ca:	e61b      	b.n	8000d04 <__aeabi_ddiv+0xd0>
 80010cc:	291f      	cmp	r1, #31
 80010ce:	dc7e      	bgt.n	80011ce <__aeabi_ddiv+0x59a>
 80010d0:	4861      	ldr	r0, [pc, #388]	@ (8001258 <__aeabi_ddiv+0x624>)
 80010d2:	0014      	movs	r4, r2
 80010d4:	4450      	add	r0, sl
 80010d6:	465b      	mov	r3, fp
 80010d8:	4082      	lsls	r2, r0
 80010da:	4083      	lsls	r3, r0
 80010dc:	40cc      	lsrs	r4, r1
 80010de:	1e50      	subs	r0, r2, #1
 80010e0:	4182      	sbcs	r2, r0
 80010e2:	4323      	orrs	r3, r4
 80010e4:	431a      	orrs	r2, r3
 80010e6:	465b      	mov	r3, fp
 80010e8:	40cb      	lsrs	r3, r1
 80010ea:	0751      	lsls	r1, r2, #29
 80010ec:	d009      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d005      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x4d4>
 8001106:	e09b      	b.n	8001240 <__aeabi_ddiv+0x60c>
 8001108:	2200      	movs	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	2400      	movs	r4, #0
 800110e:	4690      	mov	r8, r2
 8001110:	e5fc      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x4e8>
 800111a:	e773      	b.n	8001004 <__aeabi_ddiv+0x3d0>
 800111c:	1d11      	adds	r1, r2, #4
 800111e:	4291      	cmp	r1, r2
 8001120:	4192      	sbcs	r2, r2
 8001122:	4252      	negs	r2, r2
 8001124:	002e      	movs	r6, r5
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	4493      	add	fp, r2
 800112a:	e76d      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	3d01      	subs	r5, #1
 8001130:	469c      	mov	ip, r3
 8001132:	4461      	add	r1, ip
 8001134:	428b      	cmp	r3, r1
 8001136:	d900      	bls.n	800113a <__aeabi_ddiv+0x506>
 8001138:	e72c      	b.n	8000f94 <__aeabi_ddiv+0x360>
 800113a:	428a      	cmp	r2, r1
 800113c:	d800      	bhi.n	8001140 <__aeabi_ddiv+0x50c>
 800113e:	e729      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001140:	1e85      	subs	r5, r0, #2
 8001142:	4461      	add	r1, ip
 8001144:	e726      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	468c      	mov	ip, r1
 800114c:	4464      	add	r4, ip
 800114e:	42a1      	cmp	r1, r4
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x520>
 8001152:	e72d      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001154:	42a2      	cmp	r2, r4
 8001156:	d800      	bhi.n	800115a <__aeabi_ddiv+0x526>
 8001158:	e72a      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 800115a:	1e83      	subs	r3, r0, #2
 800115c:	4464      	add	r4, ip
 800115e:	e727      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001160:	4287      	cmp	r7, r0
 8001162:	d000      	beq.n	8001166 <__aeabi_ddiv+0x532>
 8001164:	e6fe      	b.n	8000f64 <__aeabi_ddiv+0x330>
 8001166:	45a9      	cmp	r9, r5
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x538>
 800116a:	e6fb      	b.n	8000f64 <__aeabi_ddiv+0x330>
 800116c:	e6f5      	b.n	8000f5a <__aeabi_ddiv+0x326>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x540>
 8001172:	e6b9      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	4464      	add	r4, ip
 8001178:	e6b6      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x54c>
 800117e:	e69f      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 8001180:	46bc      	mov	ip, r7
 8001182:	1e83      	subs	r3, r0, #2
 8001184:	4698      	mov	r8, r3
 8001186:	4461      	add	r1, ip
 8001188:	e69a      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 800118a:	000a      	movs	r2, r1
 800118c:	4284      	cmp	r4, r0
 800118e:	d000      	beq.n	8001192 <__aeabi_ddiv+0x55e>
 8001190:	e72e      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001192:	454b      	cmp	r3, r9
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x564>
 8001196:	e72b      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001198:	0035      	movs	r5, r6
 800119a:	e72c      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <__aeabi_ddiv+0x614>)
 800119e:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <__aeabi_ddiv+0x628>)
 80011a0:	4453      	add	r3, sl
 80011a2:	4592      	cmp	sl, r2
 80011a4:	db43      	blt.n	800122e <__aeabi_ddiv+0x5fa>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2100      	movs	r1, #0
 80011aa:	4493      	add	fp, r2
 80011ac:	e72c      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 80011ae:	42ac      	cmp	r4, r5
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x580>
 80011b2:	e6d7      	b.n	8000f64 <__aeabi_ddiv+0x330>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9900      	ldr	r1, [sp, #0]
 80011bc:	444d      	add	r5, r9
 80011be:	454d      	cmp	r5, r9
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	44e3      	add	fp, ip
 80011c4:	468c      	mov	ip, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	4463      	add	r3, ip
 80011ca:	18c0      	adds	r0, r0, r3
 80011cc:	e6cc      	b.n	8000f68 <__aeabi_ddiv+0x334>
 80011ce:	201f      	movs	r0, #31
 80011d0:	4240      	negs	r0, r0
 80011d2:	1ac3      	subs	r3, r0, r3
 80011d4:	4658      	mov	r0, fp
 80011d6:	40d8      	lsrs	r0, r3
 80011d8:	2920      	cmp	r1, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_ddiv+0x5b2>
 80011dc:	4659      	mov	r1, fp
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <__aeabi_ddiv+0x62c>)
 80011e0:	4453      	add	r3, sl
 80011e2:	4099      	lsls	r1, r3
 80011e4:	430a      	orrs	r2, r1
 80011e6:	1e53      	subs	r3, r2, #1
 80011e8:	419a      	sbcs	r2, r3
 80011ea:	2307      	movs	r3, #7
 80011ec:	0019      	movs	r1, r3
 80011ee:	4302      	orrs	r2, r0
 80011f0:	2400      	movs	r4, #0
 80011f2:	4011      	ands	r1, r2
 80011f4:	4213      	tst	r3, r2
 80011f6:	d009      	beq.n	800120c <__aeabi_ddiv+0x5d8>
 80011f8:	3308      	adds	r3, #8
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d01d      	beq.n	800123c <__aeabi_ddiv+0x608>
 8001200:	1d13      	adds	r3, r2, #4
 8001202:	4293      	cmp	r3, r2
 8001204:	4189      	sbcs	r1, r1
 8001206:	001a      	movs	r2, r3
 8001208:	4249      	negs	r1, r1
 800120a:	0749      	lsls	r1, r1, #29
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	430a      	orrs	r2, r1
 8001210:	4690      	mov	r8, r2
 8001212:	2300      	movs	r3, #0
 8001214:	e57a      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001216:	4649      	mov	r1, r9
 8001218:	9f00      	ldr	r7, [sp, #0]
 800121a:	004d      	lsls	r5, r1, #1
 800121c:	454d      	cmp	r5, r9
 800121e:	4189      	sbcs	r1, r1
 8001220:	46bc      	mov	ip, r7
 8001222:	4249      	negs	r1, r1
 8001224:	4461      	add	r1, ip
 8001226:	46a9      	mov	r9, r5
 8001228:	3a02      	subs	r2, #2
 800122a:	1864      	adds	r4, r4, r1
 800122c:	e7ae      	b.n	800118c <__aeabi_ddiv+0x558>
 800122e:	2201      	movs	r2, #1
 8001230:	4252      	negs	r2, r2
 8001232:	e746      	b.n	80010c2 <__aeabi_ddiv+0x48e>
 8001234:	4599      	cmp	r9, r3
 8001236:	d3ee      	bcc.n	8001216 <__aeabi_ddiv+0x5e2>
 8001238:	000a      	movs	r2, r1
 800123a:	e7aa      	b.n	8001192 <__aeabi_ddiv+0x55e>
 800123c:	2100      	movs	r1, #0
 800123e:	e7e5      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001240:	0759      	lsls	r1, r3, #29
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0b1c      	lsrs	r4, r3, #12
 8001246:	e7e1      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001248:	000003ff 	.word	0x000003ff
 800124c:	feffffff 	.word	0xfeffffff
 8001250:	000007fe 	.word	0x000007fe
 8001254:	000007ff 	.word	0x000007ff
 8001258:	0000041e 	.word	0x0000041e
 800125c:	fffffc02 	.word	0xfffffc02
 8001260:	0000043e 	.word	0x0000043e

08001264 <__eqdf2>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	46de      	mov	lr, fp
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	000d      	movs	r5, r1
 8001272:	0004      	movs	r4, r0
 8001274:	0fe8      	lsrs	r0, r5, #31
 8001276:	4683      	mov	fp, r0
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	0fd8      	lsrs	r0, r3, #31
 800127c:	0b09      	lsrs	r1, r1, #12
 800127e:	4682      	mov	sl, r0
 8001280:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <__eqdf2+0x84>)
 8001282:	468c      	mov	ip, r1
 8001284:	031f      	lsls	r7, r3, #12
 8001286:	0069      	lsls	r1, r5, #1
 8001288:	005e      	lsls	r6, r3, #1
 800128a:	0d49      	lsrs	r1, r1, #21
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d76      	lsrs	r6, r6, #21
 8001290:	4281      	cmp	r1, r0
 8001292:	d018      	beq.n	80012c6 <__eqdf2+0x62>
 8001294:	4286      	cmp	r6, r0
 8001296:	d00f      	beq.n	80012b8 <__eqdf2+0x54>
 8001298:	2001      	movs	r0, #1
 800129a:	42b1      	cmp	r1, r6
 800129c:	d10d      	bne.n	80012ba <__eqdf2+0x56>
 800129e:	45bc      	cmp	ip, r7
 80012a0:	d10b      	bne.n	80012ba <__eqdf2+0x56>
 80012a2:	4294      	cmp	r4, r2
 80012a4:	d109      	bne.n	80012ba <__eqdf2+0x56>
 80012a6:	45d3      	cmp	fp, sl
 80012a8:	d01c      	beq.n	80012e4 <__eqdf2+0x80>
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d105      	bne.n	80012ba <__eqdf2+0x56>
 80012ae:	4660      	mov	r0, ip
 80012b0:	4320      	orrs	r0, r4
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	e000      	b.n	80012ba <__eqdf2+0x56>
 80012b8:	2001      	movs	r0, #1
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	46bb      	mov	fp, r7
 80012be:	46b2      	mov	sl, r6
 80012c0:	46a9      	mov	r9, r5
 80012c2:	46a0      	mov	r8, r4
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	2001      	movs	r0, #1
 80012c8:	428e      	cmp	r6, r1
 80012ca:	d1f6      	bne.n	80012ba <__eqdf2+0x56>
 80012cc:	4661      	mov	r1, ip
 80012ce:	4339      	orrs	r1, r7
 80012d0:	000f      	movs	r7, r1
 80012d2:	4317      	orrs	r7, r2
 80012d4:	4327      	orrs	r7, r4
 80012d6:	d1f0      	bne.n	80012ba <__eqdf2+0x56>
 80012d8:	465b      	mov	r3, fp
 80012da:	4652      	mov	r2, sl
 80012dc:	1a98      	subs	r0, r3, r2
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4198      	sbcs	r0, r3
 80012e2:	e7ea      	b.n	80012ba <__eqdf2+0x56>
 80012e4:	2000      	movs	r0, #0
 80012e6:	e7e8      	b.n	80012ba <__eqdf2+0x56>
 80012e8:	000007ff 	.word	0x000007ff

080012ec <__gedf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	4657      	mov	r7, sl
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	46de      	mov	lr, fp
 80012f6:	b5e0      	push	{r5, r6, r7, lr}
 80012f8:	000d      	movs	r5, r1
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	0d49      	lsrs	r1, r1, #21
 8001300:	468a      	mov	sl, r1
 8001302:	0fdf      	lsrs	r7, r3, #31
 8001304:	0fe9      	lsrs	r1, r5, #31
 8001306:	46bc      	mov	ip, r7
 8001308:	b083      	sub	sp, #12
 800130a:	4f2f      	ldr	r7, [pc, #188]	@ (80013c8 <__gedf2+0xdc>)
 800130c:	0004      	movs	r4, r0
 800130e:	4680      	mov	r8, r0
 8001310:	9101      	str	r1, [sp, #4]
 8001312:	0058      	lsls	r0, r3, #1
 8001314:	0319      	lsls	r1, r3, #12
 8001316:	4691      	mov	r9, r2
 8001318:	0b36      	lsrs	r6, r6, #12
 800131a:	0b09      	lsrs	r1, r1, #12
 800131c:	0d40      	lsrs	r0, r0, #21
 800131e:	45ba      	cmp	sl, r7
 8001320:	d01d      	beq.n	800135e <__gedf2+0x72>
 8001322:	42b8      	cmp	r0, r7
 8001324:	d00d      	beq.n	8001342 <__gedf2+0x56>
 8001326:	4657      	mov	r7, sl
 8001328:	2f00      	cmp	r7, #0
 800132a:	d12a      	bne.n	8001382 <__gedf2+0x96>
 800132c:	4334      	orrs	r4, r6
 800132e:	2800      	cmp	r0, #0
 8001330:	d124      	bne.n	800137c <__gedf2+0x90>
 8001332:	430a      	orrs	r2, r1
 8001334:	d036      	beq.n	80013a4 <__gedf2+0xb8>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d141      	bne.n	80013be <__gedf2+0xd2>
 800133a:	4663      	mov	r3, ip
 800133c:	0058      	lsls	r0, r3, #1
 800133e:	3801      	subs	r0, #1
 8001340:	e015      	b.n	800136e <__gedf2+0x82>
 8001342:	4311      	orrs	r1, r2
 8001344:	d138      	bne.n	80013b8 <__gedf2+0xcc>
 8001346:	4653      	mov	r3, sl
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <__gedf2+0x64>
 800134c:	4326      	orrs	r6, r4
 800134e:	d0f4      	beq.n	800133a <__gedf2+0x4e>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	4563      	cmp	r3, ip
 8001354:	d107      	bne.n	8001366 <__gedf2+0x7a>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	0058      	lsls	r0, r3, #1
 800135a:	3801      	subs	r0, #1
 800135c:	e007      	b.n	800136e <__gedf2+0x82>
 800135e:	4326      	orrs	r6, r4
 8001360:	d12a      	bne.n	80013b8 <__gedf2+0xcc>
 8001362:	4550      	cmp	r0, sl
 8001364:	d021      	beq.n	80013aa <__gedf2+0xbe>
 8001366:	2001      	movs	r0, #1
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	425f      	negs	r7, r3
 800136c:	4338      	orrs	r0, r7
 800136e:	b003      	add	sp, #12
 8001370:	bcf0      	pop	{r4, r5, r6, r7}
 8001372:	46bb      	mov	fp, r7
 8001374:	46b2      	mov	sl, r6
 8001376:	46a9      	mov	r9, r5
 8001378:	46a0      	mov	r8, r4
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	2c00      	cmp	r4, #0
 800137e:	d0dc      	beq.n	800133a <__gedf2+0x4e>
 8001380:	e7e6      	b.n	8001350 <__gedf2+0x64>
 8001382:	2800      	cmp	r0, #0
 8001384:	d0ef      	beq.n	8001366 <__gedf2+0x7a>
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	4563      	cmp	r3, ip
 800138a:	d1ec      	bne.n	8001366 <__gedf2+0x7a>
 800138c:	4582      	cmp	sl, r0
 800138e:	dcea      	bgt.n	8001366 <__gedf2+0x7a>
 8001390:	dbe1      	blt.n	8001356 <__gedf2+0x6a>
 8001392:	428e      	cmp	r6, r1
 8001394:	d8e7      	bhi.n	8001366 <__gedf2+0x7a>
 8001396:	d1de      	bne.n	8001356 <__gedf2+0x6a>
 8001398:	45c8      	cmp	r8, r9
 800139a:	d8e4      	bhi.n	8001366 <__gedf2+0x7a>
 800139c:	2000      	movs	r0, #0
 800139e:	45c8      	cmp	r8, r9
 80013a0:	d2e5      	bcs.n	800136e <__gedf2+0x82>
 80013a2:	e7d8      	b.n	8001356 <__gedf2+0x6a>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e2      	beq.n	800136e <__gedf2+0x82>
 80013a8:	e7dd      	b.n	8001366 <__gedf2+0x7a>
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d104      	bne.n	80013b8 <__gedf2+0xcc>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	4563      	cmp	r3, ip
 80013b2:	d1d8      	bne.n	8001366 <__gedf2+0x7a>
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7da      	b.n	800136e <__gedf2+0x82>
 80013b8:	2002      	movs	r0, #2
 80013ba:	4240      	negs	r0, r0
 80013bc:	e7d7      	b.n	800136e <__gedf2+0x82>
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	4563      	cmp	r3, ip
 80013c2:	d0e6      	beq.n	8001392 <__gedf2+0xa6>
 80013c4:	e7cf      	b.n	8001366 <__gedf2+0x7a>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff

080013cc <__ledf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	464e      	mov	r6, r9
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	0d49      	lsrs	r1, r1, #21
 80013e0:	468a      	mov	sl, r1
 80013e2:	0fdf      	lsrs	r7, r3, #31
 80013e4:	0fe9      	lsrs	r1, r5, #31
 80013e6:	46bc      	mov	ip, r7
 80013e8:	b083      	sub	sp, #12
 80013ea:	4f2e      	ldr	r7, [pc, #184]	@ (80014a4 <__ledf2+0xd8>)
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0319      	lsls	r1, r3, #12
 80013f6:	4691      	mov	r9, r2
 80013f8:	0b36      	lsrs	r6, r6, #12
 80013fa:	0b09      	lsrs	r1, r1, #12
 80013fc:	0d40      	lsrs	r0, r0, #21
 80013fe:	45ba      	cmp	sl, r7
 8001400:	d01e      	beq.n	8001440 <__ledf2+0x74>
 8001402:	42b8      	cmp	r0, r7
 8001404:	d00d      	beq.n	8001422 <__ledf2+0x56>
 8001406:	4657      	mov	r7, sl
 8001408:	2f00      	cmp	r7, #0
 800140a:	d127      	bne.n	800145c <__ledf2+0x90>
 800140c:	4334      	orrs	r4, r6
 800140e:	2800      	cmp	r0, #0
 8001410:	d133      	bne.n	800147a <__ledf2+0xae>
 8001412:	430a      	orrs	r2, r1
 8001414:	d034      	beq.n	8001480 <__ledf2+0xb4>
 8001416:	2c00      	cmp	r4, #0
 8001418:	d140      	bne.n	800149c <__ledf2+0xd0>
 800141a:	4663      	mov	r3, ip
 800141c:	0058      	lsls	r0, r3, #1
 800141e:	3801      	subs	r0, #1
 8001420:	e015      	b.n	800144e <__ledf2+0x82>
 8001422:	4311      	orrs	r1, r2
 8001424:	d112      	bne.n	800144c <__ledf2+0x80>
 8001426:	4653      	mov	r3, sl
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <__ledf2+0x64>
 800142c:	4326      	orrs	r6, r4
 800142e:	d0f4      	beq.n	800141a <__ledf2+0x4e>
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	4563      	cmp	r3, ip
 8001434:	d01d      	beq.n	8001472 <__ledf2+0xa6>
 8001436:	2001      	movs	r0, #1
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	425f      	negs	r7, r3
 800143c:	4338      	orrs	r0, r7
 800143e:	e006      	b.n	800144e <__ledf2+0x82>
 8001440:	4326      	orrs	r6, r4
 8001442:	d103      	bne.n	800144c <__ledf2+0x80>
 8001444:	4550      	cmp	r0, sl
 8001446:	d1f6      	bne.n	8001436 <__ledf2+0x6a>
 8001448:	4311      	orrs	r1, r2
 800144a:	d01c      	beq.n	8001486 <__ledf2+0xba>
 800144c:	2002      	movs	r0, #2
 800144e:	b003      	add	sp, #12
 8001450:	bcf0      	pop	{r4, r5, r6, r7}
 8001452:	46bb      	mov	fp, r7
 8001454:	46b2      	mov	sl, r6
 8001456:	46a9      	mov	r9, r5
 8001458:	46a0      	mov	r8, r4
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	2800      	cmp	r0, #0
 800145e:	d0ea      	beq.n	8001436 <__ledf2+0x6a>
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	4563      	cmp	r3, ip
 8001464:	d1e7      	bne.n	8001436 <__ledf2+0x6a>
 8001466:	4582      	cmp	sl, r0
 8001468:	dce5      	bgt.n	8001436 <__ledf2+0x6a>
 800146a:	db02      	blt.n	8001472 <__ledf2+0xa6>
 800146c:	428e      	cmp	r6, r1
 800146e:	d8e2      	bhi.n	8001436 <__ledf2+0x6a>
 8001470:	d00e      	beq.n	8001490 <__ledf2+0xc4>
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	0058      	lsls	r0, r3, #1
 8001476:	3801      	subs	r0, #1
 8001478:	e7e9      	b.n	800144e <__ledf2+0x82>
 800147a:	2c00      	cmp	r4, #0
 800147c:	d0cd      	beq.n	800141a <__ledf2+0x4e>
 800147e:	e7d7      	b.n	8001430 <__ledf2+0x64>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e4      	beq.n	800144e <__ledf2+0x82>
 8001484:	e7d7      	b.n	8001436 <__ledf2+0x6a>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	2000      	movs	r0, #0
 800148a:	4563      	cmp	r3, ip
 800148c:	d0df      	beq.n	800144e <__ledf2+0x82>
 800148e:	e7d2      	b.n	8001436 <__ledf2+0x6a>
 8001490:	45c8      	cmp	r8, r9
 8001492:	d8d0      	bhi.n	8001436 <__ledf2+0x6a>
 8001494:	2000      	movs	r0, #0
 8001496:	45c8      	cmp	r8, r9
 8001498:	d2d9      	bcs.n	800144e <__ledf2+0x82>
 800149a:	e7ea      	b.n	8001472 <__ledf2+0xa6>
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	4563      	cmp	r3, ip
 80014a0:	d0e4      	beq.n	800146c <__ledf2+0xa0>
 80014a2:	e7c8      	b.n	8001436 <__ledf2+0x6a>
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__aeabi_dmul>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	46de      	mov	lr, fp
 80014b0:	4645      	mov	r5, r8
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	001f      	movs	r7, r3
 80014b6:	030b      	lsls	r3, r1, #12
 80014b8:	0b1b      	lsrs	r3, r3, #12
 80014ba:	0016      	movs	r6, r2
 80014bc:	469a      	mov	sl, r3
 80014be:	0fca      	lsrs	r2, r1, #31
 80014c0:	004b      	lsls	r3, r1, #1
 80014c2:	0004      	movs	r4, r0
 80014c4:	4691      	mov	r9, r2
 80014c6:	b085      	sub	sp, #20
 80014c8:	0d5b      	lsrs	r3, r3, #21
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0x26>
 80014cc:	e1cf      	b.n	800186e <__aeabi_dmul+0x3c6>
 80014ce:	4acd      	ldr	r2, [pc, #820]	@ (8001804 <__aeabi_dmul+0x35c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d055      	beq.n	8001580 <__aeabi_dmul+0xd8>
 80014d4:	4651      	mov	r1, sl
 80014d6:	0f42      	lsrs	r2, r0, #29
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0409      	lsls	r1, r1, #16
 80014e0:	4311      	orrs	r1, r2
 80014e2:	00c2      	lsls	r2, r0, #3
 80014e4:	4690      	mov	r8, r2
 80014e6:	4ac8      	ldr	r2, [pc, #800]	@ (8001808 <__aeabi_dmul+0x360>)
 80014e8:	468a      	mov	sl, r1
 80014ea:	4693      	mov	fp, r2
 80014ec:	449b      	add	fp, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	033c      	lsls	r4, r7, #12
 80014f6:	007b      	lsls	r3, r7, #1
 80014f8:	0ffa      	lsrs	r2, r7, #31
 80014fa:	9601      	str	r6, [sp, #4]
 80014fc:	0b24      	lsrs	r4, r4, #12
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x5e>
 8001504:	e188      	b.n	8001818 <__aeabi_dmul+0x370>
 8001506:	4abf      	ldr	r2, [pc, #764]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x66>
 800150c:	e092      	b.n	8001634 <__aeabi_dmul+0x18c>
 800150e:	4abe      	ldr	r2, [pc, #760]	@ (8001808 <__aeabi_dmul+0x360>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	449b      	add	fp, r3
 8001516:	2d0a      	cmp	r5, #10
 8001518:	dc42      	bgt.n	80015a0 <__aeabi_dmul+0xf8>
 800151a:	00e4      	lsls	r4, r4, #3
 800151c:	0f73      	lsrs	r3, r6, #29
 800151e:	4323      	orrs	r3, r4
 8001520:	2480      	movs	r4, #128	@ 0x80
 8001522:	4649      	mov	r1, r9
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	431c      	orrs	r4, r3
 8001528:	00f3      	lsls	r3, r6, #3
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	9b00      	ldr	r3, [sp, #0]
 800152e:	2000      	movs	r0, #0
 8001530:	4059      	eors	r1, r3
 8001532:	b2cb      	uxtb	r3, r1
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	2d02      	cmp	r5, #2
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x94>
 800153a:	e094      	b.n	8001666 <__aeabi_dmul+0x1be>
 800153c:	2301      	movs	r3, #1
 800153e:	40ab      	lsls	r3, r5
 8001540:	001d      	movs	r5, r3
 8001542:	23a6      	movs	r3, #166	@ 0xa6
 8001544:	002a      	movs	r2, r5
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	401a      	ands	r2, r3
 800154a:	421d      	tst	r5, r3
 800154c:	d000      	beq.n	8001550 <__aeabi_dmul+0xa8>
 800154e:	e229      	b.n	80019a4 <__aeabi_dmul+0x4fc>
 8001550:	2390      	movs	r3, #144	@ 0x90
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	421d      	tst	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0xb2>
 8001558:	e24d      	b.n	80019f6 <__aeabi_dmul+0x54e>
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4699      	mov	r9, r3
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	4ba8      	ldr	r3, [pc, #672]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001564:	0010      	movs	r0, r2
 8001566:	464a      	mov	r2, r9
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4323      	orrs	r3, r4
 800156c:	07d2      	lsls	r2, r2, #31
 800156e:	4313      	orrs	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	b005      	add	sp, #20
 8001574:	bcf0      	pop	{r4, r5, r6, r7}
 8001576:	46bb      	mov	fp, r7
 8001578:	46b2      	mov	sl, r6
 800157a:	46a9      	mov	r9, r5
 800157c:	46a0      	mov	r8, r4
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	4652      	mov	r2, sl
 8001582:	4302      	orrs	r2, r0
 8001584:	4690      	mov	r8, r2
 8001586:	d000      	beq.n	800158a <__aeabi_dmul+0xe2>
 8001588:	e1ac      	b.n	80018e4 <__aeabi_dmul+0x43c>
 800158a:	469b      	mov	fp, r3
 800158c:	2302      	movs	r3, #2
 800158e:	4692      	mov	sl, r2
 8001590:	2508      	movs	r5, #8
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	e7ae      	b.n	80014f4 <__aeabi_dmul+0x4c>
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	46a2      	mov	sl, r4
 800159a:	4699      	mov	r9, r3
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4698      	mov	r8, r3
 80015a0:	9b02      	ldr	r3, [sp, #8]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x100>
 80015a6:	e1ca      	b.n	800193e <__aeabi_dmul+0x496>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0x106>
 80015ac:	e192      	b.n	80018d4 <__aeabi_dmul+0x42c>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <__aeabi_dmul+0x12c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	e7d4      	b.n	8001564 <__aeabi_dmul+0xbc>
 80015ba:	2201      	movs	r2, #1
 80015bc:	087b      	lsrs	r3, r7, #1
 80015be:	403a      	ands	r2, r7
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	07d2      	lsls	r2, r2, #31
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	4653      	mov	r3, sl
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	469a      	mov	sl, r3
 80015d0:	9b03      	ldr	r3, [sp, #12]
 80015d2:	4699      	mov	r9, r3
 80015d4:	465b      	mov	r3, fp
 80015d6:	1c58      	adds	r0, r3, #1
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	445b      	add	r3, fp
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc00      	bgt.n	80015e4 <__aeabi_dmul+0x13c>
 80015e2:	e1b1      	b.n	8001948 <__aeabi_dmul+0x4a0>
 80015e4:	4642      	mov	r2, r8
 80015e6:	0752      	lsls	r2, r2, #29
 80015e8:	d00b      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015ea:	220f      	movs	r2, #15
 80015ec:	4641      	mov	r1, r8
 80015ee:	400a      	ands	r2, r1
 80015f0:	2a04      	cmp	r2, #4
 80015f2:	d006      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015f4:	4642      	mov	r2, r8
 80015f6:	1d11      	adds	r1, r2, #4
 80015f8:	4541      	cmp	r1, r8
 80015fa:	4192      	sbcs	r2, r2
 80015fc:	4688      	mov	r8, r1
 80015fe:	4252      	negs	r2, r2
 8001600:	4492      	add	sl, r2
 8001602:	4652      	mov	r2, sl
 8001604:	01d2      	lsls	r2, r2, #7
 8001606:	d506      	bpl.n	8001616 <__aeabi_dmul+0x16e>
 8001608:	4652      	mov	r2, sl
 800160a:	4b80      	ldr	r3, [pc, #512]	@ (800180c <__aeabi_dmul+0x364>)
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	4692      	mov	sl, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	18c3      	adds	r3, r0, r3
 8001616:	4a7e      	ldr	r2, [pc, #504]	@ (8001810 <__aeabi_dmul+0x368>)
 8001618:	4293      	cmp	r3, r2
 800161a:	dd00      	ble.n	800161e <__aeabi_dmul+0x176>
 800161c:	e18f      	b.n	800193e <__aeabi_dmul+0x496>
 800161e:	4642      	mov	r2, r8
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	4652      	mov	r2, sl
 8001624:	0752      	lsls	r2, r2, #29
 8001626:	430a      	orrs	r2, r1
 8001628:	4651      	mov	r1, sl
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	024c      	lsls	r4, r1, #9
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	e797      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001634:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001636:	4326      	orrs	r6, r4
 8001638:	469c      	mov	ip, r3
 800163a:	44e3      	add	fp, ip
 800163c:	2e00      	cmp	r6, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x19a>
 8001640:	e16f      	b.n	8001922 <__aeabi_dmul+0x47a>
 8001642:	2303      	movs	r3, #3
 8001644:	4649      	mov	r1, r9
 8001646:	431d      	orrs	r5, r3
 8001648:	9b00      	ldr	r3, [sp, #0]
 800164a:	4059      	eors	r1, r3
 800164c:	b2cb      	uxtb	r3, r1
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	2d0a      	cmp	r5, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x1ae>
 8001654:	e133      	b.n	80018be <__aeabi_dmul+0x416>
 8001656:	2301      	movs	r3, #1
 8001658:	40ab      	lsls	r3, r5
 800165a:	001d      	movs	r5, r3
 800165c:	2303      	movs	r3, #3
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	422a      	tst	r2, r5
 8001664:	d197      	bne.n	8001596 <__aeabi_dmul+0xee>
 8001666:	4642      	mov	r2, r8
 8001668:	4643      	mov	r3, r8
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	0016      	movs	r6, r2
 8001670:	9801      	ldr	r0, [sp, #4]
 8001672:	0c1d      	lsrs	r5, r3, #16
 8001674:	0c03      	lsrs	r3, r0, #16
 8001676:	0400      	lsls	r0, r0, #16
 8001678:	0c00      	lsrs	r0, r0, #16
 800167a:	4346      	muls	r6, r0
 800167c:	46b4      	mov	ip, r6
 800167e:	001e      	movs	r6, r3
 8001680:	436e      	muls	r6, r5
 8001682:	9600      	str	r6, [sp, #0]
 8001684:	0016      	movs	r6, r2
 8001686:	0007      	movs	r7, r0
 8001688:	435e      	muls	r6, r3
 800168a:	4661      	mov	r1, ip
 800168c:	46b0      	mov	r8, r6
 800168e:	436f      	muls	r7, r5
 8001690:	0c0e      	lsrs	r6, r1, #16
 8001692:	44b8      	add	r8, r7
 8001694:	4446      	add	r6, r8
 8001696:	42b7      	cmp	r7, r6
 8001698:	d905      	bls.n	80016a6 <__aeabi_dmul+0x1fe>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	4688      	mov	r8, r1
 80016a0:	9f00      	ldr	r7, [sp, #0]
 80016a2:	4447      	add	r7, r8
 80016a4:	9700      	str	r7, [sp, #0]
 80016a6:	4661      	mov	r1, ip
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	0c09      	lsrs	r1, r1, #16
 80016ac:	0c37      	lsrs	r7, r6, #16
 80016ae:	0436      	lsls	r6, r6, #16
 80016b0:	468c      	mov	ip, r1
 80016b2:	0031      	movs	r1, r6
 80016b4:	4461      	add	r1, ip
 80016b6:	9101      	str	r1, [sp, #4]
 80016b8:	0011      	movs	r1, r2
 80016ba:	0c26      	lsrs	r6, r4, #16
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	0c24      	lsrs	r4, r4, #16
 80016c0:	4361      	muls	r1, r4
 80016c2:	468c      	mov	ip, r1
 80016c4:	0021      	movs	r1, r4
 80016c6:	4369      	muls	r1, r5
 80016c8:	4689      	mov	r9, r1
 80016ca:	4661      	mov	r1, ip
 80016cc:	0c09      	lsrs	r1, r1, #16
 80016ce:	4688      	mov	r8, r1
 80016d0:	4372      	muls	r2, r6
 80016d2:	444a      	add	r2, r9
 80016d4:	4442      	add	r2, r8
 80016d6:	4375      	muls	r5, r6
 80016d8:	4591      	cmp	r9, r2
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x23c>
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0249      	lsls	r1, r1, #9
 80016e0:	4688      	mov	r8, r1
 80016e2:	4445      	add	r5, r8
 80016e4:	0c11      	lsrs	r1, r2, #16
 80016e6:	4688      	mov	r8, r1
 80016e8:	4661      	mov	r1, ip
 80016ea:	0409      	lsls	r1, r1, #16
 80016ec:	0c09      	lsrs	r1, r1, #16
 80016ee:	468c      	mov	ip, r1
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4462      	add	r2, ip
 80016f4:	18b9      	adds	r1, r7, r2
 80016f6:	9102      	str	r1, [sp, #8]
 80016f8:	4651      	mov	r1, sl
 80016fa:	0c09      	lsrs	r1, r1, #16
 80016fc:	468c      	mov	ip, r1
 80016fe:	4651      	mov	r1, sl
 8001700:	040f      	lsls	r7, r1, #16
 8001702:	0c3f      	lsrs	r7, r7, #16
 8001704:	0039      	movs	r1, r7
 8001706:	4341      	muls	r1, r0
 8001708:	4445      	add	r5, r8
 800170a:	4688      	mov	r8, r1
 800170c:	4661      	mov	r1, ip
 800170e:	4341      	muls	r1, r0
 8001710:	468a      	mov	sl, r1
 8001712:	4641      	mov	r1, r8
 8001714:	4660      	mov	r0, ip
 8001716:	0c09      	lsrs	r1, r1, #16
 8001718:	4689      	mov	r9, r1
 800171a:	4358      	muls	r0, r3
 800171c:	437b      	muls	r3, r7
 800171e:	4453      	add	r3, sl
 8001720:	444b      	add	r3, r9
 8001722:	459a      	cmp	sl, r3
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x286>
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	4689      	mov	r9, r1
 800172c:	4448      	add	r0, r9
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	4689      	mov	r9, r1
 8001732:	4641      	mov	r1, r8
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0039      	movs	r1, r7
 800173c:	4361      	muls	r1, r4
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4443      	add	r3, r8
 8001742:	4688      	mov	r8, r1
 8001744:	4661      	mov	r1, ip
 8001746:	434c      	muls	r4, r1
 8001748:	4371      	muls	r1, r6
 800174a:	468c      	mov	ip, r1
 800174c:	4641      	mov	r1, r8
 800174e:	4377      	muls	r7, r6
 8001750:	0c0e      	lsrs	r6, r1, #16
 8001752:	193f      	adds	r7, r7, r4
 8001754:	19f6      	adds	r6, r6, r7
 8001756:	4448      	add	r0, r9
 8001758:	42b4      	cmp	r4, r6
 800175a:	d903      	bls.n	8001764 <__aeabi_dmul+0x2bc>
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0249      	lsls	r1, r1, #9
 8001760:	4689      	mov	r9, r1
 8001762:	44cc      	add	ip, r9
 8001764:	9902      	ldr	r1, [sp, #8]
 8001766:	9f00      	ldr	r7, [sp, #0]
 8001768:	4689      	mov	r9, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	444f      	add	r7, r9
 800176e:	4689      	mov	r9, r1
 8001770:	4641      	mov	r1, r8
 8001772:	4297      	cmp	r7, r2
 8001774:	4192      	sbcs	r2, r2
 8001776:	040c      	lsls	r4, r1, #16
 8001778:	0c24      	lsrs	r4, r4, #16
 800177a:	444c      	add	r4, r9
 800177c:	18ff      	adds	r7, r7, r3
 800177e:	4252      	negs	r2, r2
 8001780:	1964      	adds	r4, r4, r5
 8001782:	18a1      	adds	r1, r4, r2
 8001784:	429f      	cmp	r7, r3
 8001786:	419b      	sbcs	r3, r3
 8001788:	4688      	mov	r8, r1
 800178a:	4682      	mov	sl, r0
 800178c:	425b      	negs	r3, r3
 800178e:	4699      	mov	r9, r3
 8001790:	4590      	cmp	r8, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	42ac      	cmp	r4, r5
 8001796:	41a4      	sbcs	r4, r4
 8001798:	44c2      	add	sl, r8
 800179a:	44d1      	add	r9, sl
 800179c:	4252      	negs	r2, r2
 800179e:	4264      	negs	r4, r4
 80017a0:	4314      	orrs	r4, r2
 80017a2:	4599      	cmp	r9, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	4582      	cmp	sl, r0
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	425b      	negs	r3, r3
 80017ac:	4252      	negs	r2, r2
 80017ae:	4313      	orrs	r3, r2
 80017b0:	464a      	mov	r2, r9
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	19a4      	adds	r4, r4, r6
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	4463      	add	r3, ip
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	0dd2      	lsrs	r2, r2, #23
 80017be:	431a      	orrs	r2, r3
 80017c0:	9901      	ldr	r1, [sp, #4]
 80017c2:	4692      	mov	sl, r2
 80017c4:	027a      	lsls	r2, r7, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	0dff      	lsrs	r7, r7, #23
 80017ce:	4317      	orrs	r7, r2
 80017d0:	464a      	mov	r2, r9
 80017d2:	0252      	lsls	r2, r2, #9
 80017d4:	4317      	orrs	r7, r2
 80017d6:	46b8      	mov	r8, r7
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	d500      	bpl.n	80017de <__aeabi_dmul+0x336>
 80017dc:	e6ed      	b.n	80015ba <__aeabi_dmul+0x112>
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <__aeabi_dmul+0x36c>)
 80017e0:	9a03      	ldr	r2, [sp, #12]
 80017e2:	445b      	add	r3, fp
 80017e4:	4691      	mov	r9, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dmul+0x344>
 80017ea:	e0ac      	b.n	8001946 <__aeabi_dmul+0x49e>
 80017ec:	003a      	movs	r2, r7
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x34c>
 80017f2:	e710      	b.n	8001616 <__aeabi_dmul+0x16e>
 80017f4:	220f      	movs	r2, #15
 80017f6:	4658      	mov	r0, fp
 80017f8:	403a      	ands	r2, r7
 80017fa:	2a04      	cmp	r2, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0x358>
 80017fe:	e6f9      	b.n	80015f4 <__aeabi_dmul+0x14c>
 8001800:	e709      	b.n	8001616 <__aeabi_dmul+0x16e>
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	feffffff 	.word	0xfeffffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	000003ff 	.word	0x000003ff
 8001818:	0022      	movs	r2, r4
 800181a:	4332      	orrs	r2, r6
 800181c:	d06f      	beq.n	80018fe <__aeabi_dmul+0x456>
 800181e:	2c00      	cmp	r4, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_dmul+0x37c>
 8001822:	e0c2      	b.n	80019aa <__aeabi_dmul+0x502>
 8001824:	0020      	movs	r0, r4
 8001826:	f000 fddf 	bl	80023e8 <__clzsi2>
 800182a:	0002      	movs	r2, r0
 800182c:	0003      	movs	r3, r0
 800182e:	3a0b      	subs	r2, #11
 8001830:	201d      	movs	r0, #29
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	0030      	movs	r0, r6
 8001836:	0019      	movs	r1, r3
 8001838:	40d0      	lsrs	r0, r2
 800183a:	3908      	subs	r1, #8
 800183c:	408c      	lsls	r4, r1
 800183e:	0002      	movs	r2, r0
 8001840:	4322      	orrs	r2, r4
 8001842:	0034      	movs	r4, r6
 8001844:	408c      	lsls	r4, r1
 8001846:	4659      	mov	r1, fp
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4986      	ldr	r1, [pc, #536]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 800184c:	468b      	mov	fp, r1
 800184e:	449b      	add	fp, r3
 8001850:	2d0a      	cmp	r5, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0x3ae>
 8001854:	e6a4      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001856:	4649      	mov	r1, r9
 8001858:	9b00      	ldr	r3, [sp, #0]
 800185a:	9401      	str	r4, [sp, #4]
 800185c:	4059      	eors	r1, r3
 800185e:	b2cb      	uxtb	r3, r1
 8001860:	0014      	movs	r4, r2
 8001862:	2000      	movs	r0, #0
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	2d02      	cmp	r5, #2
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0x3c4>
 800186a:	e667      	b.n	800153c <__aeabi_dmul+0x94>
 800186c:	e6fb      	b.n	8001666 <__aeabi_dmul+0x1be>
 800186e:	4653      	mov	r3, sl
 8001870:	4303      	orrs	r3, r0
 8001872:	4698      	mov	r8, r3
 8001874:	d03c      	beq.n	80018f0 <__aeabi_dmul+0x448>
 8001876:	4653      	mov	r3, sl
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x3d6>
 800187c:	e0a3      	b.n	80019c6 <__aeabi_dmul+0x51e>
 800187e:	4650      	mov	r0, sl
 8001880:	f000 fdb2 	bl	80023e8 <__clzsi2>
 8001884:	230b      	movs	r3, #11
 8001886:	425b      	negs	r3, r3
 8001888:	469c      	mov	ip, r3
 800188a:	0002      	movs	r2, r0
 800188c:	4484      	add	ip, r0
 800188e:	0011      	movs	r1, r2
 8001890:	4650      	mov	r0, sl
 8001892:	3908      	subs	r1, #8
 8001894:	4088      	lsls	r0, r1
 8001896:	231d      	movs	r3, #29
 8001898:	4680      	mov	r8, r0
 800189a:	4660      	mov	r0, ip
 800189c:	1a1b      	subs	r3, r3, r0
 800189e:	0020      	movs	r0, r4
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	0003      	movs	r3, r0
 80018a4:	4640      	mov	r0, r8
 80018a6:	4303      	orrs	r3, r0
 80018a8:	469a      	mov	sl, r3
 80018aa:	0023      	movs	r3, r4
 80018ac:	408b      	lsls	r3, r1
 80018ae:	4698      	mov	r8, r3
 80018b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 80018b2:	2500      	movs	r5, #0
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	469b      	mov	fp, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	e61a      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018be:	2d0f      	cmp	r5, #15
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0x41c>
 80018c2:	e0c9      	b.n	8001a58 <__aeabi_dmul+0x5b0>
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	4652      	mov	r2, sl
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	421a      	tst	r2, r3
 80018cc:	d002      	beq.n	80018d4 <__aeabi_dmul+0x42c>
 80018ce:	421c      	tst	r4, r3
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dmul+0x42c>
 80018d2:	e092      	b.n	80019fa <__aeabi_dmul+0x552>
 80018d4:	2480      	movs	r4, #128	@ 0x80
 80018d6:	4653      	mov	r3, sl
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	431c      	orrs	r4, r3
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4642      	mov	r2, r8
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e63e      	b.n	8001562 <__aeabi_dmul+0xba>
 80018e4:	469b      	mov	fp, r3
 80018e6:	2303      	movs	r3, #3
 80018e8:	4680      	mov	r8, r0
 80018ea:	250c      	movs	r5, #12
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	e601      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018f0:	2300      	movs	r3, #0
 80018f2:	469a      	mov	sl, r3
 80018f4:	469b      	mov	fp, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	2504      	movs	r5, #4
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	e5fa      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018fe:	2101      	movs	r1, #1
 8001900:	430d      	orrs	r5, r1
 8001902:	2d0a      	cmp	r5, #10
 8001904:	dd00      	ble.n	8001908 <__aeabi_dmul+0x460>
 8001906:	e64b      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001908:	4649      	mov	r1, r9
 800190a:	9800      	ldr	r0, [sp, #0]
 800190c:	4041      	eors	r1, r0
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	2d02      	cmp	r5, #2
 8001914:	dc00      	bgt.n	8001918 <__aeabi_dmul+0x470>
 8001916:	e096      	b.n	8001a46 <__aeabi_dmul+0x59e>
 8001918:	2300      	movs	r3, #0
 800191a:	2400      	movs	r4, #0
 800191c:	2001      	movs	r0, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	e60c      	b.n	800153c <__aeabi_dmul+0x94>
 8001922:	4649      	mov	r1, r9
 8001924:	2302      	movs	r3, #2
 8001926:	9a00      	ldr	r2, [sp, #0]
 8001928:	432b      	orrs	r3, r5
 800192a:	4051      	eors	r1, r2
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	9203      	str	r2, [sp, #12]
 8001930:	2b0a      	cmp	r3, #10
 8001932:	dd00      	ble.n	8001936 <__aeabi_dmul+0x48e>
 8001934:	e634      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001936:	2d00      	cmp	r5, #0
 8001938:	d157      	bne.n	80019ea <__aeabi_dmul+0x542>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	4699      	mov	r9, r3
 800193e:	2400      	movs	r4, #0
 8001940:	2200      	movs	r2, #0
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_dmul+0x5c0>)
 8001944:	e60e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001946:	4658      	mov	r0, fp
 8001948:	2101      	movs	r1, #1
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	2938      	cmp	r1, #56	@ 0x38
 800194e:	dd00      	ble.n	8001952 <__aeabi_dmul+0x4aa>
 8001950:	e62f      	b.n	80015b2 <__aeabi_dmul+0x10a>
 8001952:	291f      	cmp	r1, #31
 8001954:	dd56      	ble.n	8001a04 <__aeabi_dmul+0x55c>
 8001956:	221f      	movs	r2, #31
 8001958:	4654      	mov	r4, sl
 800195a:	4252      	negs	r2, r2
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	40dc      	lsrs	r4, r3
 8001960:	2920      	cmp	r1, #32
 8001962:	d007      	beq.n	8001974 <__aeabi_dmul+0x4cc>
 8001964:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <__aeabi_dmul+0x5c4>)
 8001966:	4642      	mov	r2, r8
 8001968:	469c      	mov	ip, r3
 800196a:	4653      	mov	r3, sl
 800196c:	4460      	add	r0, ip
 800196e:	4083      	lsls	r3, r0
 8001970:	431a      	orrs	r2, r3
 8001972:	4690      	mov	r8, r2
 8001974:	4642      	mov	r2, r8
 8001976:	2107      	movs	r1, #7
 8001978:	1e53      	subs	r3, r2, #1
 800197a:	419a      	sbcs	r2, r3
 800197c:	000b      	movs	r3, r1
 800197e:	4322      	orrs	r2, r4
 8001980:	4013      	ands	r3, r2
 8001982:	2400      	movs	r4, #0
 8001984:	4211      	tst	r1, r2
 8001986:	d009      	beq.n	800199c <__aeabi_dmul+0x4f4>
 8001988:	230f      	movs	r3, #15
 800198a:	4013      	ands	r3, r2
 800198c:	2b04      	cmp	r3, #4
 800198e:	d05d      	beq.n	8001a4c <__aeabi_dmul+0x5a4>
 8001990:	1d11      	adds	r1, r2, #4
 8001992:	4291      	cmp	r1, r2
 8001994:	419b      	sbcs	r3, r3
 8001996:	000a      	movs	r2, r1
 8001998:	425b      	negs	r3, r3
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	431a      	orrs	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	e5df      	b.n	8001564 <__aeabi_dmul+0xbc>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	4699      	mov	r9, r3
 80019a8:	e5fa      	b.n	80015a0 <__aeabi_dmul+0xf8>
 80019aa:	9801      	ldr	r0, [sp, #4]
 80019ac:	f000 fd1c 	bl	80023e8 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	0003      	movs	r3, r0
 80019b4:	3215      	adds	r2, #21
 80019b6:	3320      	adds	r3, #32
 80019b8:	2a1c      	cmp	r2, #28
 80019ba:	dc00      	bgt.n	80019be <__aeabi_dmul+0x516>
 80019bc:	e738      	b.n	8001830 <__aeabi_dmul+0x388>
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	3808      	subs	r0, #8
 80019c2:	4082      	lsls	r2, r0
 80019c4:	e73f      	b.n	8001846 <__aeabi_dmul+0x39e>
 80019c6:	f000 fd0f 	bl	80023e8 <__clzsi2>
 80019ca:	2315      	movs	r3, #21
 80019cc:	469c      	mov	ip, r3
 80019ce:	4484      	add	ip, r0
 80019d0:	0002      	movs	r2, r0
 80019d2:	4663      	mov	r3, ip
 80019d4:	3220      	adds	r2, #32
 80019d6:	2b1c      	cmp	r3, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x534>
 80019da:	e758      	b.n	800188e <__aeabi_dmul+0x3e6>
 80019dc:	2300      	movs	r3, #0
 80019de:	4698      	mov	r8, r3
 80019e0:	0023      	movs	r3, r4
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	e762      	b.n	80018b0 <__aeabi_dmul+0x408>
 80019ea:	001d      	movs	r5, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2002      	movs	r0, #2
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e5a2      	b.n	800153c <__aeabi_dmul+0x94>
 80019f6:	9002      	str	r0, [sp, #8]
 80019f8:	e632      	b.n	8001660 <__aeabi_dmul+0x1b8>
 80019fa:	431c      	orrs	r4, r3
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	9a01      	ldr	r2, [sp, #4]
 8001a00:	4699      	mov	r9, r3
 8001a02:	e5ae      	b.n	8001562 <__aeabi_dmul+0xba>
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <__aeabi_dmul+0x5c8>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	18c3      	adds	r3, r0, r3
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	40c8      	lsrs	r0, r1
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4640      	mov	r0, r8
 8001a14:	4098      	lsls	r0, r3
 8001a16:	0003      	movs	r3, r0
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	4183      	sbcs	r3, r0
 8001a1c:	4654      	mov	r4, sl
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	40cc      	lsrs	r4, r1
 8001a22:	0753      	lsls	r3, r2, #29
 8001a24:	d009      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a26:	230f      	movs	r3, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d005      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a2e:	1d13      	adds	r3, r2, #4
 8001a30:	4293      	cmp	r3, r2
 8001a32:	4192      	sbcs	r2, r2
 8001a34:	4252      	negs	r2, r2
 8001a36:	18a4      	adds	r4, r4, r2
 8001a38:	001a      	movs	r2, r3
 8001a3a:	0223      	lsls	r3, r4, #8
 8001a3c:	d508      	bpl.n	8001a50 <__aeabi_dmul+0x5a8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e58e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a46:	4689      	mov	r9, r1
 8001a48:	2400      	movs	r4, #0
 8001a4a:	e58b      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e7a5      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a50:	0763      	lsls	r3, r4, #29
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0b24      	lsrs	r4, r4, #12
 8001a56:	e7a1      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	4698      	mov	r8, r3
 8001a62:	e737      	b.n	80018d4 <__aeabi_dmul+0x42c>
 8001a64:	fffffc0d 	.word	0xfffffc0d
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	0000043e 	.word	0x0000043e
 8001a70:	0000041e 	.word	0x0000041e

08001a74 <__aeabi_dsub>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4657      	mov	r7, sl
 8001a78:	464e      	mov	r6, r9
 8001a7a:	4645      	mov	r5, r8
 8001a7c:	46de      	mov	lr, fp
 8001a7e:	b5e0      	push	{r5, r6, r7, lr}
 8001a80:	b083      	sub	sp, #12
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	030c      	lsls	r4, r1, #12
 8001a88:	004d      	lsls	r5, r1, #1
 8001a8a:	0fce      	lsrs	r6, r1, #31
 8001a8c:	0a61      	lsrs	r1, r4, #9
 8001a8e:	9c00      	ldr	r4, [sp, #0]
 8001a90:	005f      	lsls	r7, r3, #1
 8001a92:	0f64      	lsrs	r4, r4, #29
 8001a94:	430c      	orrs	r4, r1
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	00c8      	lsls	r0, r1, #3
 8001a9e:	0319      	lsls	r1, r3, #12
 8001aa0:	0d7b      	lsrs	r3, r7, #21
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001aa8:	0fdb      	lsrs	r3, r3, #31
 8001aaa:	469c      	mov	ip, r3
 8001aac:	0a4b      	lsrs	r3, r1, #9
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	0f49      	lsrs	r1, r1, #29
 8001ab4:	4319      	orrs	r1, r3
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	468b      	mov	fp, r1
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4692      	mov	sl, r2
 8001abe:	0d6d      	lsrs	r5, r5, #21
 8001ac0:	45b9      	cmp	r9, r7
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x52>
 8001ac4:	e0bf      	b.n	8001c46 <__aeabi_dsub+0x1d2>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4661      	mov	r1, ip
 8001aca:	4059      	eors	r1, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	468c      	mov	ip, r1
 8001ad0:	1aeb      	subs	r3, r5, r3
 8001ad2:	428e      	cmp	r6, r1
 8001ad4:	d075      	beq.n	8001bc2 <__aeabi_dsub+0x14e>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x68>
 8001ada:	e2a3      	b.n	8002024 <__aeabi_dsub+0x5b0>
 8001adc:	4649      	mov	r1, r9
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x70>
 8001ae2:	e0ce      	b.n	8001c82 <__aeabi_dsub+0x20e>
 8001ae4:	42bd      	cmp	r5, r7
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x76>
 8001ae8:	e200      	b.n	8001eec <__aeabi_dsub+0x478>
 8001aea:	2701      	movs	r7, #1
 8001aec:	2b38      	cmp	r3, #56	@ 0x38
 8001aee:	dc19      	bgt.n	8001b24 <__aeabi_dsub+0xb0>
 8001af0:	2780      	movs	r7, #128	@ 0x80
 8001af2:	4659      	mov	r1, fp
 8001af4:	043f      	lsls	r7, r7, #16
 8001af6:	4339      	orrs	r1, r7
 8001af8:	468b      	mov	fp, r1
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x8c>
 8001afe:	e1fa      	b.n	8001ef6 <__aeabi_dsub+0x482>
 8001b00:	2720      	movs	r7, #32
 8001b02:	1af9      	subs	r1, r7, r3
 8001b04:	468c      	mov	ip, r1
 8001b06:	4659      	mov	r1, fp
 8001b08:	4667      	mov	r7, ip
 8001b0a:	40b9      	lsls	r1, r7
 8001b0c:	000f      	movs	r7, r1
 8001b0e:	0011      	movs	r1, r2
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	430f      	orrs	r7, r1
 8001b14:	4661      	mov	r1, ip
 8001b16:	408a      	lsls	r2, r1
 8001b18:	1e51      	subs	r1, r2, #1
 8001b1a:	418a      	sbcs	r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	40d9      	lsrs	r1, r3
 8001b20:	4317      	orrs	r7, r2
 8001b22:	1a64      	subs	r4, r4, r1
 8001b24:	1bc7      	subs	r7, r0, r7
 8001b26:	42b8      	cmp	r0, r7
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a24      	subs	r4, r4, r0
 8001b2e:	0223      	lsls	r3, r4, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0xc0>
 8001b32:	e140      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001b34:	0264      	lsls	r4, r4, #9
 8001b36:	0a64      	lsrs	r4, r4, #9
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0xca>
 8001b3c:	e154      	b.n	8001de8 <__aeabi_dsub+0x374>
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f000 fc52 	bl	80023e8 <__clzsi2>
 8001b44:	0003      	movs	r3, r0
 8001b46:	3b08      	subs	r3, #8
 8001b48:	2120      	movs	r1, #32
 8001b4a:	0038      	movs	r0, r7
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	40d0      	lsrs	r0, r2
 8001b50:	409c      	lsls	r4, r3
 8001b52:	0002      	movs	r2, r0
 8001b54:	409f      	lsls	r7, r3
 8001b56:	4322      	orrs	r2, r4
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dsub+0xea>
 8001b5c:	e1a6      	b.n	8001eac <__aeabi_dsub+0x438>
 8001b5e:	1b58      	subs	r0, r3, r5
 8001b60:	3001      	adds	r0, #1
 8001b62:	1a09      	subs	r1, r1, r0
 8001b64:	003c      	movs	r4, r7
 8001b66:	408f      	lsls	r7, r1
 8001b68:	40c4      	lsrs	r4, r0
 8001b6a:	1e7b      	subs	r3, r7, #1
 8001b6c:	419f      	sbcs	r7, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	408b      	lsls	r3, r1
 8001b72:	4327      	orrs	r7, r4
 8001b74:	431f      	orrs	r7, r3
 8001b76:	40c2      	lsrs	r2, r0
 8001b78:	003b      	movs	r3, r7
 8001b7a:	0014      	movs	r4, r2
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x110>
 8001b82:	e1f7      	b.n	8001f74 <__aeabi_dsub+0x500>
 8001b84:	077b      	lsls	r3, r7, #29
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x116>
 8001b88:	e377      	b.n	800227a <__aeabi_dsub+0x806>
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	0038      	movs	r0, r7
 8001b8e:	403b      	ands	r3, r7
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d004      	beq.n	8001b9e <__aeabi_dsub+0x12a>
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	41bf      	sbcs	r7, r7
 8001b9a:	427f      	negs	r7, r7
 8001b9c:	19e4      	adds	r4, r4, r7
 8001b9e:	0223      	lsls	r3, r4, #8
 8001ba0:	d400      	bmi.n	8001ba4 <__aeabi_dsub+0x130>
 8001ba2:	e368      	b.n	8002276 <__aeabi_dsub+0x802>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x13a>
 8001bac:	e0f4      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001bb0:	056d      	lsls	r5, r5, #21
 8001bb2:	401c      	ands	r4, r3
 8001bb4:	0d6d      	lsrs	r5, r5, #21
 8001bb6:	0767      	lsls	r7, r4, #29
 8001bb8:	08c0      	lsrs	r0, r0, #3
 8001bba:	0264      	lsls	r4, r4, #9
 8001bbc:	4307      	orrs	r7, r0
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	e0ec      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x154>
 8001bc6:	e329      	b.n	800221c <__aeabi_dsub+0x7a8>
 8001bc8:	4649      	mov	r1, r9
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x15c>
 8001bce:	e0d6      	b.n	8001d7e <__aeabi_dsub+0x30a>
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x164>
 8001bd6:	e12e      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x16c>
 8001bde:	e1e6      	b.n	8001fae <__aeabi_dsub+0x53a>
 8001be0:	42bb      	cmp	r3, r7
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x172>
 8001be4:	e182      	b.n	8001eec <__aeabi_dsub+0x478>
 8001be6:	2701      	movs	r7, #1
 8001be8:	000b      	movs	r3, r1
 8001bea:	2938      	cmp	r1, #56	@ 0x38
 8001bec:	dc14      	bgt.n	8001c18 <__aeabi_dsub+0x1a4>
 8001bee:	2b1f      	cmp	r3, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x180>
 8001bf2:	e23c      	b.n	800206e <__aeabi_dsub+0x5fa>
 8001bf4:	2720      	movs	r7, #32
 8001bf6:	1af9      	subs	r1, r7, r3
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	4667      	mov	r7, ip
 8001bfe:	40b9      	lsls	r1, r7
 8001c00:	000f      	movs	r7, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	40d9      	lsrs	r1, r3
 8001c06:	430f      	orrs	r7, r1
 8001c08:	4661      	mov	r1, ip
 8001c0a:	408a      	lsls	r2, r1
 8001c0c:	1e51      	subs	r1, r2, #1
 8001c0e:	418a      	sbcs	r2, r1
 8001c10:	4659      	mov	r1, fp
 8001c12:	40d9      	lsrs	r1, r3
 8001c14:	4317      	orrs	r7, r2
 8001c16:	1864      	adds	r4, r4, r1
 8001c18:	183f      	adds	r7, r7, r0
 8001c1a:	4287      	cmp	r7, r0
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	4240      	negs	r0, r0
 8001c20:	1824      	adds	r4, r4, r0
 8001c22:	0223      	lsls	r3, r4, #8
 8001c24:	d400      	bmi.n	8001c28 <__aeabi_dsub+0x1b4>
 8001c26:	e0c6      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1be>
 8001c30:	e0b2      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001c32:	2101      	movs	r1, #1
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001c36:	087a      	lsrs	r2, r7, #1
 8001c38:	401c      	ands	r4, r3
 8001c3a:	4039      	ands	r1, r7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	07e7      	lsls	r7, r4, #31
 8001c40:	4317      	orrs	r7, r2
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	e79e      	b.n	8001b84 <__aeabi_dsub+0x110>
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <__aeabi_dsub+0x36c>)
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	468a      	mov	sl, r1
 8001c4c:	18eb      	adds	r3, r5, r3
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d028      	beq.n	8001ca4 <__aeabi_dsub+0x230>
 8001c52:	4566      	cmp	r6, ip
 8001c54:	d02c      	beq.n	8001cb0 <__aeabi_dsub+0x23c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d05b      	beq.n	8001d12 <__aeabi_dsub+0x29e>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1ec>
 8001c5e:	e12c      	b.n	8001eba <__aeabi_dsub+0x446>
 8001c60:	465b      	mov	r3, fp
 8001c62:	4666      	mov	r6, ip
 8001c64:	075f      	lsls	r7, r3, #29
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	08dd      	lsrs	r5, r3, #3
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	432b      	orrs	r3, r5
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x200>
 8001c72:	e0e2      	b.n	8001e3a <__aeabi_dsub+0x3c6>
 8001c74:	2480      	movs	r4, #128	@ 0x80
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	432c      	orrs	r4, r5
 8001c7a:	0324      	lsls	r4, r4, #12
 8001c7c:	4d56      	ldr	r5, [pc, #344]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c7e:	0b24      	lsrs	r4, r4, #12
 8001c80:	e08c      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001c82:	4659      	mov	r1, fp
 8001c84:	4311      	orrs	r1, r2
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x216>
 8001c88:	e0d5      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x21e>
 8001c90:	e1b9      	b.n	8002006 <__aeabi_dsub+0x592>
 8001c92:	42bb      	cmp	r3, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x224>
 8001c96:	e1b1      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001c98:	2701      	movs	r7, #1
 8001c9a:	000b      	movs	r3, r1
 8001c9c:	2938      	cmp	r1, #56	@ 0x38
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x22e>
 8001ca0:	e740      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001ca2:	e72a      	b.n	8001afa <__aeabi_dsub+0x86>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	2701      	movs	r7, #1
 8001ca8:	4079      	eors	r1, r7
 8001caa:	468c      	mov	ip, r1
 8001cac:	4566      	cmp	r6, ip
 8001cae:	d1d2      	bne.n	8001c56 <__aeabi_dsub+0x1e2>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x242>
 8001cb4:	e0c5      	b.n	8001e42 <__aeabi_dsub+0x3ce>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x248>
 8001cba:	e155      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	0025      	movs	r5, r4
 8001cc0:	4305      	orrs	r5, r0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x252>
 8001cc4:	e212      	b.n	80020ec <__aeabi_dsub+0x678>
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	468c      	mov	ip, r1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x25c>
 8001cce:	e249      	b.n	8002164 <__aeabi_dsub+0x6f0>
 8001cd0:	4d41      	ldr	r5, [pc, #260]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001cd2:	42ab      	cmp	r3, r5
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x264>
 8001cd6:	e28f      	b.n	80021f8 <__aeabi_dsub+0x784>
 8001cd8:	2701      	movs	r7, #1
 8001cda:	2938      	cmp	r1, #56	@ 0x38
 8001cdc:	dc11      	bgt.n	8001d02 <__aeabi_dsub+0x28e>
 8001cde:	4663      	mov	r3, ip
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x272>
 8001ce4:	e25b      	b.n	800219e <__aeabi_dsub+0x72a>
 8001ce6:	4661      	mov	r1, ip
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0027      	movs	r7, r4
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	0005      	movs	r5, r0
 8001cf0:	4098      	lsls	r0, r3
 8001cf2:	409f      	lsls	r7, r3
 8001cf4:	40cd      	lsrs	r5, r1
 8001cf6:	1e43      	subs	r3, r0, #1
 8001cf8:	4198      	sbcs	r0, r3
 8001cfa:	40cc      	lsrs	r4, r1
 8001cfc:	432f      	orrs	r7, r5
 8001cfe:	4307      	orrs	r7, r0
 8001d00:	44a3      	add	fp, r4
 8001d02:	18bf      	adds	r7, r7, r2
 8001d04:	4297      	cmp	r7, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	445a      	add	r2, fp
 8001d0c:	0014      	movs	r4, r2
 8001d0e:	464d      	mov	r5, r9
 8001d10:	e787      	b.n	8001c22 <__aeabi_dsub+0x1ae>
 8001d12:	4f34      	ldr	r7, [pc, #208]	@ (8001de4 <__aeabi_dsub+0x370>)
 8001d14:	1c6b      	adds	r3, r5, #1
 8001d16:	423b      	tst	r3, r7
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2a8>
 8001d1a:	e0b6      	b.n	8001e8a <__aeabi_dsub+0x416>
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	0023      	movs	r3, r4
 8001d20:	4311      	orrs	r1, r2
 8001d22:	000f      	movs	r7, r1
 8001d24:	4303      	orrs	r3, r0
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dsub+0x2b8>
 8001d2a:	e126      	b.n	8001f7a <__aeabi_dsub+0x506>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x2be>
 8001d30:	e1c0      	b.n	80020b4 <__aeabi_dsub+0x640>
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x2c4>
 8001d36:	e0a1      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001d38:	1a83      	subs	r3, r0, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4540      	cmp	r0, r8
 8001d40:	41ad      	sbcs	r5, r5
 8001d42:	1ae3      	subs	r3, r4, r3
 8001d44:	426d      	negs	r5, r5
 8001d46:	1b5b      	subs	r3, r3, r5
 8001d48:	2580      	movs	r5, #128	@ 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	422b      	tst	r3, r5
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2de>
 8001d50:	e14b      	b.n	8001fea <__aeabi_dsub+0x576>
 8001d52:	465b      	mov	r3, fp
 8001d54:	1a10      	subs	r0, r2, r0
 8001d56:	4282      	cmp	r2, r0
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b1c      	subs	r4, r3, r4
 8001d5c:	0007      	movs	r7, r0
 8001d5e:	2601      	movs	r6, #1
 8001d60:	4663      	mov	r3, ip
 8001d62:	4252      	negs	r2, r2
 8001d64:	1aa4      	subs	r4, r4, r2
 8001d66:	4327      	orrs	r7, r4
 8001d68:	401e      	ands	r6, r3
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x2fc>
 8001d6e:	e142      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001d70:	422c      	tst	r4, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x302>
 8001d74:	e26d      	b.n	8002252 <__aeabi_dsub+0x7de>
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001d78:	2501      	movs	r5, #1
 8001d7a:	401c      	ands	r4, r3
 8001d7c:	e71b      	b.n	8001bb6 <__aeabi_dsub+0x142>
 8001d7e:	42bd      	cmp	r5, r7
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x310>
 8001d82:	e13b      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001d84:	2701      	movs	r7, #1
 8001d86:	2b38      	cmp	r3, #56	@ 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x318>
 8001d8a:	e745      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8001d8c:	2780      	movs	r7, #128	@ 0x80
 8001d8e:	4659      	mov	r1, fp
 8001d90:	043f      	lsls	r7, r7, #16
 8001d92:	4339      	orrs	r1, r7
 8001d94:	468b      	mov	fp, r1
 8001d96:	e72a      	b.n	8001bee <__aeabi_dsub+0x17a>
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2700      	movs	r7, #0
 8001d9c:	052d      	lsls	r5, r5, #20
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	07f6      	lsls	r6, r6, #31
 8001da2:	4335      	orrs	r5, r6
 8001da4:	0038      	movs	r0, r7
 8001da6:	0029      	movs	r1, r5
 8001da8:	b003      	add	sp, #12
 8001daa:	bcf0      	pop	{r4, r5, r6, r7}
 8001dac:	46bb      	mov	fp, r7
 8001dae:	46b2      	mov	sl, r6
 8001db0:	46a9      	mov	r9, r5
 8001db2:	46a0      	mov	r8, r4
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db6:	077b      	lsls	r3, r7, #29
 8001db8:	d004      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dba:	230f      	movs	r3, #15
 8001dbc:	403b      	ands	r3, r7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dc2:	e6e7      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001dc4:	002b      	movs	r3, r5
 8001dc6:	08f8      	lsrs	r0, r7, #3
 8001dc8:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001dca:	0767      	lsls	r7, r4, #29
 8001dcc:	4307      	orrs	r7, r0
 8001dce:	08e5      	lsrs	r5, r4, #3
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x362>
 8001dd4:	e74a      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001dd6:	e0a5      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	ff7fffff 	.word	0xff7fffff
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	0038      	movs	r0, r7
 8001dea:	f000 fafd 	bl	80023e8 <__clzsi2>
 8001dee:	0003      	movs	r3, r0
 8001df0:	3318      	adds	r3, #24
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dsub+0x384>
 8001df6:	e6a7      	b.n	8001b48 <__aeabi_dsub+0xd4>
 8001df8:	003a      	movs	r2, r7
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	4082      	lsls	r2, r0
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dsub+0x390>
 8001e02:	e08a      	b.n	8001f1a <__aeabi_dsub+0x4a6>
 8001e04:	1b5b      	subs	r3, r3, r5
 8001e06:	1c58      	adds	r0, r3, #1
 8001e08:	281f      	cmp	r0, #31
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dsub+0x39a>
 8001e0c:	e1d8      	b.n	80021c0 <__aeabi_dsub+0x74c>
 8001e0e:	0017      	movs	r7, r2
 8001e10:	3b1f      	subs	r3, #31
 8001e12:	40df      	lsrs	r7, r3
 8001e14:	2820      	cmp	r0, #32
 8001e16:	d005      	beq.n	8001e24 <__aeabi_dsub+0x3b0>
 8001e18:	2340      	movs	r3, #64	@ 0x40
 8001e1a:	1a1b      	subs	r3, r3, r0
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	1e53      	subs	r3, r2, #1
 8001e20:	419a      	sbcs	r2, r3
 8001e22:	4317      	orrs	r7, r2
 8001e24:	2500      	movs	r5, #0
 8001e26:	2f00      	cmp	r7, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x3b8>
 8001e2a:	e0e5      	b.n	8001ff8 <__aeabi_dsub+0x584>
 8001e2c:	077b      	lsls	r3, r7, #29
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dsub+0x3be>
 8001e30:	e6ab      	b.n	8001b8a <__aeabi_dsub+0x116>
 8001e32:	002c      	movs	r4, r5
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001e36:	08c0      	lsrs	r0, r0, #3
 8001e38:	e7c6      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001e3a:	2700      	movs	r7, #0
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	4dd1      	ldr	r5, [pc, #836]	@ (8002184 <__aeabi_dsub+0x710>)
 8001e40:	e7ac      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001e42:	4fd1      	ldr	r7, [pc, #836]	@ (8002188 <__aeabi_dsub+0x714>)
 8001e44:	1c6b      	adds	r3, r5, #1
 8001e46:	423b      	tst	r3, r7
 8001e48:	d171      	bne.n	8001f2e <__aeabi_dsub+0x4ba>
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x3e0>
 8001e52:	e14e      	b.n	80020f2 <__aeabi_dsub+0x67e>
 8001e54:	4657      	mov	r7, sl
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x3e8>
 8001e5a:	e1b5      	b.n	80021c8 <__aeabi_dsub+0x754>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d00d      	beq.n	8001e7c <__aeabi_dsub+0x408>
 8001e60:	1883      	adds	r3, r0, r2
 8001e62:	4283      	cmp	r3, r0
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	445c      	add	r4, fp
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0222      	lsls	r2, r4, #8
 8001e6e:	d500      	bpl.n	8001e72 <__aeabi_dsub+0x3fe>
 8001e70:	e1c8      	b.n	8002204 <__aeabi_dsub+0x790>
 8001e72:	001f      	movs	r7, r3
 8001e74:	4698      	mov	r8, r3
 8001e76:	4327      	orrs	r7, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x408>
 8001e7a:	e0bc      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0767      	lsls	r7, r4, #29
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	431f      	orrs	r7, r3
 8001e84:	08e5      	lsrs	r5, r4, #3
 8001e86:	2300      	movs	r3, #0
 8001e88:	e04c      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001e8a:	1a83      	subs	r3, r0, r2
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	465b      	mov	r3, fp
 8001e90:	4540      	cmp	r0, r8
 8001e92:	41bf      	sbcs	r7, r7
 8001e94:	1ae3      	subs	r3, r4, r3
 8001e96:	427f      	negs	r7, r7
 8001e98:	1bdb      	subs	r3, r3, r7
 8001e9a:	021f      	lsls	r7, r3, #8
 8001e9c:	d47c      	bmi.n	8001f98 <__aeabi_dsub+0x524>
 8001e9e:	4647      	mov	r7, r8
 8001ea0:	431f      	orrs	r7, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x432>
 8001ea4:	e0a6      	b.n	8001ff4 <__aeabi_dsub+0x580>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	4647      	mov	r7, r8
 8001eaa:	e645      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001eac:	4cb7      	ldr	r4, [pc, #732]	@ (800218c <__aeabi_dsub+0x718>)
 8001eae:	1aed      	subs	r5, r5, r3
 8001eb0:	4014      	ands	r4, r2
 8001eb2:	077b      	lsls	r3, r7, #29
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x444>
 8001eb6:	e780      	b.n	8001dba <__aeabi_dsub+0x346>
 8001eb8:	e784      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001eba:	464b      	mov	r3, r9
 8001ebc:	0025      	movs	r5, r4
 8001ebe:	4305      	orrs	r5, r0
 8001ec0:	d066      	beq.n	8001f90 <__aeabi_dsub+0x51c>
 8001ec2:	1e5f      	subs	r7, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x456>
 8001ec8:	e0fc      	b.n	80020c4 <__aeabi_dsub+0x650>
 8001eca:	4dae      	ldr	r5, [pc, #696]	@ (8002184 <__aeabi_dsub+0x710>)
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x45e>
 8001ed0:	e15e      	b.n	8002190 <__aeabi_dsub+0x71c>
 8001ed2:	4666      	mov	r6, ip
 8001ed4:	2f38      	cmp	r7, #56	@ 0x38
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dsub+0x466>
 8001ed8:	e0b4      	b.n	8002044 <__aeabi_dsub+0x5d0>
 8001eda:	2001      	movs	r0, #1
 8001edc:	1a17      	subs	r7, r2, r0
 8001ede:	42ba      	cmp	r2, r7
 8001ee0:	4192      	sbcs	r2, r2
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	1a9c      	subs	r4, r3, r2
 8001eea:	e620      	b.n	8001b2e <__aeabi_dsub+0xba>
 8001eec:	0767      	lsls	r7, r4, #29
 8001eee:	08c0      	lsrs	r0, r0, #3
 8001ef0:	4307      	orrs	r7, r0
 8001ef2:	08e5      	lsrs	r5, r4, #3
 8001ef4:	e6ba      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001ef6:	001f      	movs	r7, r3
 8001ef8:	4659      	mov	r1, fp
 8001efa:	3f20      	subs	r7, #32
 8001efc:	40f9      	lsrs	r1, r7
 8001efe:	000f      	movs	r7, r1
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d005      	beq.n	8001f10 <__aeabi_dsub+0x49c>
 8001f04:	2140      	movs	r1, #64	@ 0x40
 8001f06:	1acb      	subs	r3, r1, r3
 8001f08:	4659      	mov	r1, fp
 8001f0a:	4099      	lsls	r1, r3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	4653      	mov	r3, sl
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	4193      	sbcs	r3, r2
 8001f16:	431f      	orrs	r7, r3
 8001f18:	e604      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001f1a:	1aeb      	subs	r3, r5, r3
 8001f1c:	4d9b      	ldr	r5, [pc, #620]	@ (800218c <__aeabi_dsub+0x718>)
 8001f1e:	4015      	ands	r5, r2
 8001f20:	076f      	lsls	r7, r5, #29
 8001f22:	08ed      	lsrs	r5, r5, #3
 8001f24:	032c      	lsls	r4, r5, #12
 8001f26:	055d      	lsls	r5, r3, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d6d      	lsrs	r5, r5, #21
 8001f2c:	e736      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f2e:	4d95      	ldr	r5, [pc, #596]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x4c2>
 8001f34:	e0d6      	b.n	80020e4 <__aeabi_dsub+0x670>
 8001f36:	1882      	adds	r2, r0, r2
 8001f38:	0021      	movs	r1, r4
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	4180      	sbcs	r0, r0
 8001f3e:	4459      	add	r1, fp
 8001f40:	4240      	negs	r0, r0
 8001f42:	1808      	adds	r0, r1, r0
 8001f44:	07c7      	lsls	r7, r0, #31
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	4317      	orrs	r7, r2
 8001f4a:	0844      	lsrs	r4, r0, #1
 8001f4c:	0752      	lsls	r2, r2, #29
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x4de>
 8001f50:	e185      	b.n	800225e <__aeabi_dsub+0x7ea>
 8001f52:	220f      	movs	r2, #15
 8001f54:	001d      	movs	r5, r3
 8001f56:	403a      	ands	r2, r7
 8001f58:	2a04      	cmp	r2, #4
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x4ea>
 8001f5c:	e61a      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001f5e:	08ff      	lsrs	r7, r7, #3
 8001f60:	0764      	lsls	r4, r4, #29
 8001f62:	4327      	orrs	r7, r4
 8001f64:	0905      	lsrs	r5, r0, #4
 8001f66:	e7dd      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001f68:	465b      	mov	r3, fp
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08dd      	lsrs	r5, r3, #3
 8001f72:	e67b      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001f74:	2700      	movs	r7, #0
 8001f76:	2400      	movs	r4, #0
 8001f78:	e710      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x50c>
 8001f7e:	e0d6      	b.n	800212e <__aeabi_dsub+0x6ba>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x512>
 8001f84:	e12f      	b.n	80021e6 <__aeabi_dsub+0x772>
 8001f86:	2480      	movs	r4, #128	@ 0x80
 8001f88:	2600      	movs	r6, #0
 8001f8a:	4d7e      	ldr	r5, [pc, #504]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	e705      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f90:	4666      	mov	r6, ip
 8001f92:	465c      	mov	r4, fp
 8001f94:	08d0      	lsrs	r0, r2, #3
 8001f96:	e717      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001f98:	465b      	mov	r3, fp
 8001f9a:	1a17      	subs	r7, r2, r0
 8001f9c:	42ba      	cmp	r2, r7
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1b1c      	subs	r4, r3, r4
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1aa4      	subs	r4, r4, r2
 8001faa:	401e      	ands	r6, r3
 8001fac:	e5c4      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001fae:	1883      	adds	r3, r0, r2
 8001fb0:	4283      	cmp	r3, r0
 8001fb2:	4180      	sbcs	r0, r0
 8001fb4:	445c      	add	r4, fp
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	1825      	adds	r5, r4, r0
 8001fba:	022a      	lsls	r2, r5, #8
 8001fbc:	d400      	bmi.n	8001fc0 <__aeabi_dsub+0x54c>
 8001fbe:	e0da      	b.n	8002176 <__aeabi_dsub+0x702>
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <__aeabi_dsub+0x718>)
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4015      	ands	r5, r2
 8001fc6:	07ea      	lsls	r2, r5, #31
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	0869      	lsrs	r1, r5, #1
 8001fcc:	075b      	lsls	r3, r3, #29
 8001fce:	d400      	bmi.n	8001fd2 <__aeabi_dsub+0x55e>
 8001fd0:	e14a      	b.n	8002268 <__aeabi_dsub+0x7f4>
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x568>
 8001fda:	e0fc      	b.n	80021d6 <__aeabi_dsub+0x762>
 8001fdc:	1d17      	adds	r7, r2, #4
 8001fde:	4297      	cmp	r7, r2
 8001fe0:	41a4      	sbcs	r4, r4
 8001fe2:	4264      	negs	r4, r4
 8001fe4:	2502      	movs	r5, #2
 8001fe6:	1864      	adds	r4, r4, r1
 8001fe8:	e6ec      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001fea:	4647      	mov	r7, r8
 8001fec:	001c      	movs	r4, r3
 8001fee:	431f      	orrs	r7, r3
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 8001ff2:	e743      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	e6cf      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001ffc:	08c0      	lsrs	r0, r0, #3
 8001ffe:	0767      	lsls	r7, r4, #29
 8002000:	4307      	orrs	r7, r0
 8002002:	08e5      	lsrs	r5, r4, #3
 8002004:	e632      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002006:	1a87      	subs	r7, r0, r2
 8002008:	465b      	mov	r3, fp
 800200a:	42b8      	cmp	r0, r7
 800200c:	4180      	sbcs	r0, r0
 800200e:	1ae4      	subs	r4, r4, r3
 8002010:	4240      	negs	r0, r0
 8002012:	1a24      	subs	r4, r4, r0
 8002014:	0223      	lsls	r3, r4, #8
 8002016:	d428      	bmi.n	800206a <__aeabi_dsub+0x5f6>
 8002018:	0763      	lsls	r3, r4, #29
 800201a:	08ff      	lsrs	r7, r7, #3
 800201c:	431f      	orrs	r7, r3
 800201e:	08e5      	lsrs	r5, r4, #3
 8002020:	2301      	movs	r3, #1
 8002022:	e77f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5b6>
 8002028:	e673      	b.n	8001d12 <__aeabi_dsub+0x29e>
 800202a:	464b      	mov	r3, r9
 800202c:	1b5f      	subs	r7, r3, r5
 800202e:	003b      	movs	r3, r7
 8002030:	2d00      	cmp	r5, #0
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5c2>
 8002034:	e742      	b.n	8001ebc <__aeabi_dsub+0x448>
 8002036:	2f38      	cmp	r7, #56	@ 0x38
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0x5c8>
 800203a:	e0ec      	b.n	8002216 <__aeabi_dsub+0x7a2>
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	000e      	movs	r6, r1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431c      	orrs	r4, r3
 8002044:	2f1f      	cmp	r7, #31
 8002046:	dc25      	bgt.n	8002094 <__aeabi_dsub+0x620>
 8002048:	2520      	movs	r5, #32
 800204a:	0023      	movs	r3, r4
 800204c:	1bed      	subs	r5, r5, r7
 800204e:	0001      	movs	r1, r0
 8002050:	40a8      	lsls	r0, r5
 8002052:	40ab      	lsls	r3, r5
 8002054:	40f9      	lsrs	r1, r7
 8002056:	1e45      	subs	r5, r0, #1
 8002058:	41a8      	sbcs	r0, r5
 800205a:	430b      	orrs	r3, r1
 800205c:	40fc      	lsrs	r4, r7
 800205e:	4318      	orrs	r0, r3
 8002060:	465b      	mov	r3, fp
 8002062:	1b1b      	subs	r3, r3, r4
 8002064:	469b      	mov	fp, r3
 8002066:	e739      	b.n	8001edc <__aeabi_dsub+0x468>
 8002068:	4666      	mov	r6, ip
 800206a:	2501      	movs	r5, #1
 800206c:	e562      	b.n	8001b34 <__aeabi_dsub+0xc0>
 800206e:	001f      	movs	r7, r3
 8002070:	4659      	mov	r1, fp
 8002072:	3f20      	subs	r7, #32
 8002074:	40f9      	lsrs	r1, r7
 8002076:	468c      	mov	ip, r1
 8002078:	2b20      	cmp	r3, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x614>
 800207c:	2740      	movs	r7, #64	@ 0x40
 800207e:	4659      	mov	r1, fp
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4099      	lsls	r1, r3
 8002084:	430a      	orrs	r2, r1
 8002086:	4692      	mov	sl, r2
 8002088:	4657      	mov	r7, sl
 800208a:	1e7b      	subs	r3, r7, #1
 800208c:	419f      	sbcs	r7, r3
 800208e:	4663      	mov	r3, ip
 8002090:	431f      	orrs	r7, r3
 8002092:	e5c1      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8002094:	003b      	movs	r3, r7
 8002096:	0025      	movs	r5, r4
 8002098:	3b20      	subs	r3, #32
 800209a:	40dd      	lsrs	r5, r3
 800209c:	2f20      	cmp	r7, #32
 800209e:	d004      	beq.n	80020aa <__aeabi_dsub+0x636>
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	1bdb      	subs	r3, r3, r7
 80020a4:	409c      	lsls	r4, r3
 80020a6:	4320      	orrs	r0, r4
 80020a8:	4680      	mov	r8, r0
 80020aa:	4640      	mov	r0, r8
 80020ac:	1e43      	subs	r3, r0, #1
 80020ae:	4198      	sbcs	r0, r3
 80020b0:	4328      	orrs	r0, r5
 80020b2:	e713      	b.n	8001edc <__aeabi_dsub+0x468>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d09d      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 80020b8:	2601      	movs	r6, #1
 80020ba:	4663      	mov	r3, ip
 80020bc:	465c      	mov	r4, fp
 80020be:	4690      	mov	r8, r2
 80020c0:	401e      	ands	r6, r3
 80020c2:	e6db      	b.n	8001e7c <__aeabi_dsub+0x408>
 80020c4:	1a17      	subs	r7, r2, r0
 80020c6:	465b      	mov	r3, fp
 80020c8:	42ba      	cmp	r2, r7
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	1b1c      	subs	r4, r3, r4
 80020ce:	4252      	negs	r2, r2
 80020d0:	1aa4      	subs	r4, r4, r2
 80020d2:	0223      	lsls	r3, r4, #8
 80020d4:	d4c8      	bmi.n	8002068 <__aeabi_dsub+0x5f4>
 80020d6:	0763      	lsls	r3, r4, #29
 80020d8:	08ff      	lsrs	r7, r7, #3
 80020da:	431f      	orrs	r7, r3
 80020dc:	4666      	mov	r6, ip
 80020de:	2301      	movs	r3, #1
 80020e0:	08e5      	lsrs	r5, r4, #3
 80020e2:	e71f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80020e4:	001d      	movs	r5, r3
 80020e6:	2400      	movs	r4, #0
 80020e8:	2700      	movs	r7, #0
 80020ea:	e657      	b.n	8001d9c <__aeabi_dsub+0x328>
 80020ec:	465c      	mov	r4, fp
 80020ee:	08d0      	lsrs	r0, r2, #3
 80020f0:	e66a      	b.n	8001dc8 <__aeabi_dsub+0x354>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x684>
 80020f6:	e737      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 80020f8:	4653      	mov	r3, sl
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0767      	lsls	r7, r4, #29
 80020fe:	4307      	orrs	r7, r0
 8002100:	08e5      	lsrs	r5, r4, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x694>
 8002106:	e5b1      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	421d      	tst	r5, r3
 800210e:	d008      	beq.n	8002122 <__aeabi_dsub+0x6ae>
 8002110:	4659      	mov	r1, fp
 8002112:	08c8      	lsrs	r0, r1, #3
 8002114:	4218      	tst	r0, r3
 8002116:	d104      	bne.n	8002122 <__aeabi_dsub+0x6ae>
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	0749      	lsls	r1, r1, #29
 800211c:	430a      	orrs	r2, r1
 800211e:	0017      	movs	r7, r2
 8002120:	0005      	movs	r5, r0
 8002122:	0f7b      	lsrs	r3, r7, #29
 8002124:	00ff      	lsls	r7, r7, #3
 8002126:	08ff      	lsrs	r7, r7, #3
 8002128:	075b      	lsls	r3, r3, #29
 800212a:	431f      	orrs	r7, r3
 800212c:	e59e      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	0763      	lsls	r3, r4, #29
 8002132:	4318      	orrs	r0, r3
 8002134:	08e5      	lsrs	r5, r4, #3
 8002136:	2900      	cmp	r1, #0
 8002138:	d053      	beq.n	80021e2 <__aeabi_dsub+0x76e>
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	421d      	tst	r5, r3
 8002140:	d00a      	beq.n	8002158 <__aeabi_dsub+0x6e4>
 8002142:	4659      	mov	r1, fp
 8002144:	08cc      	lsrs	r4, r1, #3
 8002146:	421c      	tst	r4, r3
 8002148:	d106      	bne.n	8002158 <__aeabi_dsub+0x6e4>
 800214a:	2601      	movs	r6, #1
 800214c:	4663      	mov	r3, ip
 800214e:	0025      	movs	r5, r4
 8002150:	08d0      	lsrs	r0, r2, #3
 8002152:	0749      	lsls	r1, r1, #29
 8002154:	4308      	orrs	r0, r1
 8002156:	401e      	ands	r6, r3
 8002158:	0f47      	lsrs	r7, r0, #29
 800215a:	00c0      	lsls	r0, r0, #3
 800215c:	08c0      	lsrs	r0, r0, #3
 800215e:	077f      	lsls	r7, r7, #29
 8002160:	4307      	orrs	r7, r0
 8002162:	e583      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002164:	1883      	adds	r3, r0, r2
 8002166:	4293      	cmp	r3, r2
 8002168:	4192      	sbcs	r2, r2
 800216a:	445c      	add	r4, fp
 800216c:	4252      	negs	r2, r2
 800216e:	18a5      	adds	r5, r4, r2
 8002170:	022a      	lsls	r2, r5, #8
 8002172:	d500      	bpl.n	8002176 <__aeabi_dsub+0x702>
 8002174:	e724      	b.n	8001fc0 <__aeabi_dsub+0x54c>
 8002176:	076f      	lsls	r7, r5, #29
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	431f      	orrs	r7, r3
 800217c:	08ed      	lsrs	r5, r5, #3
 800217e:	2301      	movs	r3, #1
 8002180:	e6d0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff
 8002188:	000007fe 	.word	0x000007fe
 800218c:	ff7fffff 	.word	0xff7fffff
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4666      	mov	r6, ip
 8002198:	4317      	orrs	r7, r2
 800219a:	08dd      	lsrs	r5, r3, #3
 800219c:	e566      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800219e:	0025      	movs	r5, r4
 80021a0:	3b20      	subs	r3, #32
 80021a2:	40dd      	lsrs	r5, r3
 80021a4:	4663      	mov	r3, ip
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d005      	beq.n	80021b6 <__aeabi_dsub+0x742>
 80021aa:	2340      	movs	r3, #64	@ 0x40
 80021ac:	4661      	mov	r1, ip
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	409c      	lsls	r4, r3
 80021b2:	4320      	orrs	r0, r4
 80021b4:	4680      	mov	r8, r0
 80021b6:	4647      	mov	r7, r8
 80021b8:	1e7b      	subs	r3, r7, #1
 80021ba:	419f      	sbcs	r7, r3
 80021bc:	432f      	orrs	r7, r5
 80021be:	e5a0      	b.n	8001d02 <__aeabi_dsub+0x28e>
 80021c0:	2120      	movs	r1, #32
 80021c2:	2700      	movs	r7, #0
 80021c4:	1a09      	subs	r1, r1, r0
 80021c6:	e4d2      	b.n	8001b6e <__aeabi_dsub+0xfa>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x75a>
 80021cc:	e713      	b.n	8001ff6 <__aeabi_dsub+0x582>
 80021ce:	465c      	mov	r4, fp
 80021d0:	0017      	movs	r7, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	e5f6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 80021d6:	08d7      	lsrs	r7, r2, #3
 80021d8:	0749      	lsls	r1, r1, #29
 80021da:	2302      	movs	r3, #2
 80021dc:	430f      	orrs	r7, r1
 80021de:	092d      	lsrs	r5, r5, #4
 80021e0:	e6a0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80021e2:	0007      	movs	r7, r0
 80021e4:	e542      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021e6:	465b      	mov	r3, fp
 80021e8:	2601      	movs	r6, #1
 80021ea:	075f      	lsls	r7, r3, #29
 80021ec:	08dd      	lsrs	r5, r3, #3
 80021ee:	4663      	mov	r3, ip
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	4317      	orrs	r7, r2
 80021f4:	401e      	ands	r6, r3
 80021f6:	e539      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021f8:	465b      	mov	r3, fp
 80021fa:	08d2      	lsrs	r2, r2, #3
 80021fc:	075f      	lsls	r7, r3, #29
 80021fe:	4317      	orrs	r7, r2
 8002200:	08dd      	lsrs	r5, r3, #3
 8002202:	e533      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <__aeabi_dsub+0x80c>)
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	4022      	ands	r2, r4
 800220a:	0757      	lsls	r7, r2, #29
 800220c:	0252      	lsls	r2, r2, #9
 800220e:	2501      	movs	r5, #1
 8002210:	431f      	orrs	r7, r3
 8002212:	0b14      	lsrs	r4, r2, #12
 8002214:	e5c2      	b.n	8001d9c <__aeabi_dsub+0x328>
 8002216:	000e      	movs	r6, r1
 8002218:	2001      	movs	r0, #1
 800221a:	e65f      	b.n	8001edc <__aeabi_dsub+0x468>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <__aeabi_dsub+0x7c8>
 8002220:	464b      	mov	r3, r9
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	469c      	mov	ip, r3
 8002226:	2d00      	cmp	r5, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x7b8>
 800222a:	e548      	b.n	8001cbe <__aeabi_dsub+0x24a>
 800222c:	2701      	movs	r7, #1
 800222e:	2b38      	cmp	r3, #56	@ 0x38
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x7c0>
 8002232:	e566      	b.n	8001d02 <__aeabi_dsub+0x28e>
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	431c      	orrs	r4, r3
 800223a:	e550      	b.n	8001cde <__aeabi_dsub+0x26a>
 800223c:	1c6b      	adds	r3, r5, #1
 800223e:	4d11      	ldr	r5, [pc, #68]	@ (8002284 <__aeabi_dsub+0x810>)
 8002240:	422b      	tst	r3, r5
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x7d2>
 8002244:	e673      	b.n	8001f2e <__aeabi_dsub+0x4ba>
 8002246:	4659      	mov	r1, fp
 8002248:	0023      	movs	r3, r4
 800224a:	4311      	orrs	r1, r2
 800224c:	468a      	mov	sl, r1
 800224e:	4303      	orrs	r3, r0
 8002250:	e600      	b.n	8001e54 <__aeabi_dsub+0x3e0>
 8002252:	0767      	lsls	r7, r4, #29
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	2300      	movs	r3, #0
 8002258:	4307      	orrs	r7, r0
 800225a:	08e5      	lsrs	r5, r4, #3
 800225c:	e662      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 800225e:	0764      	lsls	r4, r4, #29
 8002260:	08ff      	lsrs	r7, r7, #3
 8002262:	4327      	orrs	r7, r4
 8002264:	0905      	lsrs	r5, r0, #4
 8002266:	e65d      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	0749      	lsls	r1, r1, #29
 800226c:	4311      	orrs	r1, r2
 800226e:	000f      	movs	r7, r1
 8002270:	2302      	movs	r3, #2
 8002272:	092d      	lsrs	r5, r5, #4
 8002274:	e656      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002276:	0007      	movs	r7, r0
 8002278:	e5a4      	b.n	8001dc4 <__aeabi_dsub+0x350>
 800227a:	0038      	movs	r0, r7
 800227c:	e48f      	b.n	8001b9e <__aeabi_dsub+0x12a>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	000007fe 	.word	0x000007fe

08002288 <__aeabi_dcmpun>:
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	46c6      	mov	lr, r8
 800228c:	031e      	lsls	r6, r3, #12
 800228e:	0b36      	lsrs	r6, r6, #12
 8002290:	46b0      	mov	r8, r6
 8002292:	4e0d      	ldr	r6, [pc, #52]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 8002294:	030c      	lsls	r4, r1, #12
 8002296:	004d      	lsls	r5, r1, #1
 8002298:	005f      	lsls	r7, r3, #1
 800229a:	b500      	push	{lr}
 800229c:	0b24      	lsrs	r4, r4, #12
 800229e:	0d6d      	lsrs	r5, r5, #21
 80022a0:	0d7f      	lsrs	r7, r7, #21
 80022a2:	42b5      	cmp	r5, r6
 80022a4:	d00b      	beq.n	80022be <__aeabi_dcmpun+0x36>
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	428f      	cmp	r7, r1
 80022ac:	d104      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022ae:	4646      	mov	r6, r8
 80022b0:	4316      	orrs	r6, r2
 80022b2:	0030      	movs	r0, r6
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	4198      	sbcs	r0, r3
 80022b8:	bc80      	pop	{r7}
 80022ba:	46b8      	mov	r8, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	4304      	orrs	r4, r0
 80022c0:	2001      	movs	r0, #1
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1f8      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022c6:	e7ee      	b.n	80022a6 <__aeabi_dcmpun+0x1e>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__aeabi_d2iz>:
 80022cc:	000b      	movs	r3, r1
 80022ce:	0002      	movs	r2, r0
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d16      	ldr	r5, [pc, #88]	@ (800232c <__aeabi_d2iz+0x60>)
 80022d4:	030c      	lsls	r4, r1, #12
 80022d6:	b082      	sub	sp, #8
 80022d8:	0049      	lsls	r1, r1, #1
 80022da:	2000      	movs	r0, #0
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	0b24      	lsrs	r4, r4, #12
 80022e2:	0d49      	lsrs	r1, r1, #21
 80022e4:	0fde      	lsrs	r6, r3, #31
 80022e6:	42a9      	cmp	r1, r5
 80022e8:	dd04      	ble.n	80022f4 <__aeabi_d2iz+0x28>
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <__aeabi_d2iz+0x64>)
 80022ec:	4281      	cmp	r1, r0
 80022ee:	dd03      	ble.n	80022f8 <__aeabi_d2iz+0x2c>
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <__aeabi_d2iz+0x68>)
 80022f2:	18f0      	adds	r0, r6, r3
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	2080      	movs	r0, #128	@ 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4320      	orrs	r0, r4
 80022fe:	4c0e      	ldr	r4, [pc, #56]	@ (8002338 <__aeabi_d2iz+0x6c>)
 8002300:	1a64      	subs	r4, r4, r1
 8002302:	2c1f      	cmp	r4, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x4c>
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <__aeabi_d2iz+0x70>)
 8002308:	1a5b      	subs	r3, r3, r1
 800230a:	40d8      	lsrs	r0, r3
 800230c:	0003      	movs	r3, r0
 800230e:	4258      	negs	r0, r3
 8002310:	2e00      	cmp	r6, #0
 8002312:	d1ef      	bne.n	80022f4 <__aeabi_d2iz+0x28>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ed      	b.n	80022f4 <__aeabi_d2iz+0x28>
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <__aeabi_d2iz+0x74>)
 800231a:	9a00      	ldr	r2, [sp, #0]
 800231c:	469c      	mov	ip, r3
 800231e:	0003      	movs	r3, r0
 8002320:	4461      	add	r1, ip
 8002322:	408b      	lsls	r3, r1
 8002324:	40e2      	lsrs	r2, r4
 8002326:	4313      	orrs	r3, r2
 8002328:	e7f1      	b.n	800230e <__aeabi_d2iz+0x42>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	000003fe 	.word	0x000003fe
 8002330:	0000041d 	.word	0x0000041d
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	00000433 	.word	0x00000433
 800233c:	00000413 	.word	0x00000413
 8002340:	fffffbed 	.word	0xfffffbed

08002344 <__aeabi_i2d>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2800      	cmp	r0, #0
 8002348:	d016      	beq.n	8002378 <__aeabi_i2d+0x34>
 800234a:	17c3      	asrs	r3, r0, #31
 800234c:	18c5      	adds	r5, r0, r3
 800234e:	405d      	eors	r5, r3
 8002350:	0fc4      	lsrs	r4, r0, #31
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f848 	bl	80023e8 <__clzsi2>
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <__aeabi_i2d+0x58>)
 800235a:	1a1b      	subs	r3, r3, r0
 800235c:	055b      	lsls	r3, r3, #21
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	280a      	cmp	r0, #10
 8002362:	dc14      	bgt.n	800238e <__aeabi_i2d+0x4a>
 8002364:	0002      	movs	r2, r0
 8002366:	002e      	movs	r6, r5
 8002368:	3215      	adds	r2, #21
 800236a:	4096      	lsls	r6, r2
 800236c:	220b      	movs	r2, #11
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	40d5      	lsrs	r5, r2
 8002372:	032d      	lsls	r5, r5, #12
 8002374:	0b2d      	lsrs	r5, r5, #12
 8002376:	e003      	b.n	8002380 <__aeabi_i2d+0x3c>
 8002378:	2400      	movs	r4, #0
 800237a:	2300      	movs	r3, #0
 800237c:	2500      	movs	r5, #0
 800237e:	2600      	movs	r6, #0
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	432b      	orrs	r3, r5
 8002384:	07e4      	lsls	r4, r4, #31
 8002386:	4323      	orrs	r3, r4
 8002388:	0030      	movs	r0, r6
 800238a:	0019      	movs	r1, r3
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	380b      	subs	r0, #11
 8002390:	4085      	lsls	r5, r0
 8002392:	032d      	lsls	r5, r5, #12
 8002394:	2600      	movs	r6, #0
 8002396:	0b2d      	lsrs	r5, r5, #12
 8002398:	e7f2      	b.n	8002380 <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f81f 	bl	80023e8 <__clzsi2>
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <__aeabi_ui2d+0x44>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	280a      	cmp	r0, #10
 80023b4:	dc0f      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b6:	220b      	movs	r2, #11
 80023b8:	0021      	movs	r1, r4
 80023ba:	1a12      	subs	r2, r2, r0
 80023bc:	40d1      	lsrs	r1, r2
 80023be:	3015      	adds	r0, #21
 80023c0:	030a      	lsls	r2, r1, #12
 80023c2:	4084      	lsls	r4, r0
 80023c4:	0b12      	lsrs	r2, r2, #12
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	0312      	lsls	r2, r2, #12
 80023de:	2400      	movs	r4, #0
 80023e0:	0b12      	lsrs	r2, r2, #12
 80023e2:	e7f3      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e4:	0000041e 	.word	0x0000041e

080023e8 <__clzsi2>:
 80023e8:	211c      	movs	r1, #28
 80023ea:	2301      	movs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0xe>
 80023f2:	0c00      	lsrs	r0, r0, #16
 80023f4:	3910      	subs	r1, #16
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <__clzsi2+0x18>
 80023fc:	0a00      	lsrs	r0, r0, #8
 80023fe:	3908      	subs	r1, #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0x22>
 8002406:	0900      	lsrs	r0, r0, #4
 8002408:	3904      	subs	r1, #4
 800240a:	a202      	add	r2, pc, #8	@ (adr r2, 8002414 <__clzsi2+0x2c>)
 800240c:	5c10      	ldrb	r0, [r2, r0]
 800240e:	1840      	adds	r0, r0, r1
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	02020304 	.word	0x02020304
 8002418:	01010101 	.word	0x01010101
	...

08002424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002428:	f001 f8ca 	bl	80035c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242c:	f000 f840 	bl	80024b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002430:	f000 fa2e 	bl	8002890 <MX_GPIO_Init>
  MX_DMA_Init();
 8002434:	f000 fa0e 	bl	8002854 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002438:	f000 f9d8 	bl	80027ec <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800243c:	f000 f904 	bl	8002648 <MX_SPI1_Init>
  MX_ADC_Init();
 8002440:	f000 f8a6 	bl	8002590 <MX_ADC_Init>
  MX_SPI2_Init();
 8002444:	f000 f93e 	bl	80026c4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002448:	f00a ffbc 	bl	800d3c4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800244c:	f000 f978 	bl	8002740 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8002450:	2390      	movs	r3, #144	@ 0x90
 8002452:	05db      	lsls	r3, r3, #23
 8002454:	2201      	movs	r2, #1
 8002456:	2101      	movs	r1, #1
 8002458:	0018      	movs	r0, r3
 800245a:	f002 f842 	bl	80044e2 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800245e:	23fa      	movs	r3, #250	@ 0xfa
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	0018      	movs	r0, r3
 8002464:	f001 f910 	bl	8003688 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8002468:	2390      	movs	r3, #144	@ 0x90
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	2200      	movs	r2, #0
 800246e:	2101      	movs	r1, #1
 8002470:	0018      	movs	r0, r3
 8002472:	f002 f836 	bl	80044e2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002476:	2064      	movs	r0, #100	@ 0x64
 8002478:	f001 f906 	bl	8003688 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 800247c:	2390      	movs	r3, #144	@ 0x90
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	2201      	movs	r2, #1
 8002482:	2101      	movs	r1, #1
 8002484:	0018      	movs	r0, r3
 8002486:	f002 f82c 	bl	80044e2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800248a:	2064      	movs	r0, #100	@ 0x64
 800248c:	f001 f8fc 	bl	8003688 <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	00da      	lsls	r2, r3, #3
 8002494:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <main+0x84>)
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <main+0x88>)
 8002498:	0018      	movs	r0, r3
 800249a:	f007 f927 	bl	80096ec <HAL_UARTEx_ReceiveToIdle_DMA>
//  }

//  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);

  #ifdef FLASH_TAG
    tag_main();
 800249e:	f000 fe1f 	bl	80030e0 <tag_main>
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RXLRPKT\r\n");

  while (1)
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	e7fd      	b.n	80024a2 <main+0x7e>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	20000628 	.word	0x20000628
 80024ac:	2000052c 	.word	0x2000052c

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b099      	sub	sp, #100	@ 0x64
 80024b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b6:	242c      	movs	r4, #44	@ 0x2c
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	0018      	movs	r0, r3
 80024bc:	2334      	movs	r3, #52	@ 0x34
 80024be:	001a      	movs	r2, r3
 80024c0:	2100      	movs	r1, #0
 80024c2:	f00d fc83 	bl	800fdcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c6:	231c      	movs	r3, #28
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	0018      	movs	r0, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	001a      	movs	r2, r3
 80024d0:	2100      	movs	r1, #0
 80024d2:	f00d fc7b 	bl	800fdcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d6:	003b      	movs	r3, r7
 80024d8:	0018      	movs	r0, r3
 80024da:	231c      	movs	r3, #28
 80024dc:	001a      	movs	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	f00d fc74 	bl	800fdcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80024e4:	0021      	movs	r1, r4
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2232      	movs	r2, #50	@ 0x32
 80024ea:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2201      	movs	r2, #1
 80024f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2201      	movs	r2, #1
 80024f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2201      	movs	r2, #1
 80024fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2210      	movs	r2, #16
 8002502:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2210      	movs	r2, #16
 8002508:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2202      	movs	r2, #2
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2280      	movs	r2, #128	@ 0x80
 8002514:	0212      	lsls	r2, r2, #8
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	22e0      	movs	r2, #224	@ 0xe0
 800251c:	0352      	lsls	r2, r2, #13
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2201      	movs	r2, #1
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002526:	187b      	adds	r3, r7, r1
 8002528:	0018      	movs	r0, r3
 800252a:	f003 fe55 	bl	80061d8 <HAL_RCC_OscConfig>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002532:	f000 fae1 	bl	8002af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002536:	211c      	movs	r1, #28
 8002538:	187b      	adds	r3, r7, r1
 800253a:	2207      	movs	r2, #7
 800253c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253e:	187b      	adds	r3, r7, r1
 8002540:	2202      	movs	r2, #2
 8002542:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2101      	movs	r1, #1
 8002554:	0018      	movs	r0, r3
 8002556:	f004 f9c5 	bl	80068e4 <HAL_RCC_ClockConfig>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800255e:	f000 facb 	bl	8002af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002562:	003b      	movs	r3, r7
 8002564:	4a09      	ldr	r2, [pc, #36]	@ (800258c <SystemClock_Config+0xdc>)
 8002566:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002568:	003b      	movs	r3, r7
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800256e:	003b      	movs	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002574:	003b      	movs	r3, r7
 8002576:	0018      	movs	r0, r3
 8002578:	f004 fb20 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002580:	f000 faba 	bl	8002af8 <Error_Handler>
  }
}
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b019      	add	sp, #100	@ 0x64
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	00020001 	.word	0x00020001

08002590 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	0018      	movs	r0, r3
 800259a:	230c      	movs	r3, #12
 800259c:	001a      	movs	r2, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	f00d fc14 	bl	800fdcc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025a4:	4b26      	ldr	r3, [pc, #152]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025a6:	4a27      	ldr	r2, [pc, #156]	@ (8002644 <MX_ADC_Init+0xb4>)
 80025a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025aa:	4b25      	ldr	r3, [pc, #148]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025be:	2201      	movs	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025c4:	2204      	movs	r2, #4
 80025c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025e0:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025e2:	22c2      	movs	r2, #194	@ 0xc2
 80025e4:	32ff      	adds	r2, #255	@ 0xff
 80025e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025f0:	2224      	movs	r2, #36	@ 0x24
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025fc:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f001 f866 	bl	80036d0 <HAL_ADC_Init>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002608:	f000 fa76 	bl	8002af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2208      	movs	r2, #8
 8002610:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	0152      	lsls	r2, r2, #5
 8002618:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002622:	1d3a      	adds	r2, r7, #4
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <MX_ADC_Init+0xb0>)
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f001 f991 	bl	8003950 <HAL_ADC_ConfigChannel>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d001      	beq.n	8002636 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002632:	f000 fa61 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	200003dc 	.word	0x200003dc
 8002644:	40012400 	.word	0x40012400

08002648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_SPI1_Init+0x74>)
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <MX_SPI1_Init+0x78>)
 8002650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002654:	2282      	movs	r2, #130	@ 0x82
 8002656:	0052      	lsls	r2, r2, #1
 8002658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265a:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <MX_SPI1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002660:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002662:	22e0      	movs	r2, #224	@ 0xe0
 8002664:	00d2      	lsls	r2, r2, #3
 8002666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_SPI1_Init+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800266e:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <MX_SPI1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <MX_SPI1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <MX_SPI1_Init+0x74>)
 8002696:	2207      	movs	r2, #7
 8002698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800269a:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <MX_SPI1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <MX_SPI1_Init+0x74>)
 80026a2:	2208      	movs	r2, #8
 80026a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <MX_SPI1_Init+0x74>)
 80026a8:	0018      	movs	r0, r3
 80026aa:	f004 fb85 	bl	8006db8 <HAL_SPI_Init>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026b2:	f000 fa21 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000041c 	.word	0x2000041c
 80026c0:	40013000 	.word	0x40013000

080026c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026ca:	4a1c      	ldr	r2, [pc, #112]	@ (800273c <MX_SPI2_Init+0x78>)
 80026cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026d0:	2282      	movs	r2, #130	@ 0x82
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026de:	22c0      	movs	r2, #192	@ 0xc0
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	02d2      	lsls	r2, r2, #11
 80026f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <MX_SPI2_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <MX_SPI2_Init+0x74>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <MX_SPI2_Init+0x74>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <MX_SPI2_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <MX_SPI2_Init+0x74>)
 8002712:	2207      	movs	r2, #7
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <MX_SPI2_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <MX_SPI2_Init+0x74>)
 800271e:	2208      	movs	r2, #8
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <MX_SPI2_Init+0x74>)
 8002724:	0018      	movs	r0, r3
 8002726:	f004 fb47 	bl	8006db8 <HAL_SPI_Init>
 800272a:	1e03      	subs	r3, r0, #0
 800272c:	d001      	beq.n	8002732 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800272e:	f000 f9e3 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000480 	.word	0x20000480
 800273c:	40003800 	.word	0x40003800

08002740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002746:	2308      	movs	r3, #8
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	0018      	movs	r0, r3
 800274c:	2310      	movs	r3, #16
 800274e:	001a      	movs	r2, r3
 8002750:	2100      	movs	r1, #0
 8002752:	f00d fb3b 	bl	800fdcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002756:	003b      	movs	r3, r7
 8002758:	0018      	movs	r0, r3
 800275a:	2308      	movs	r3, #8
 800275c:	001a      	movs	r2, r3
 800275e:	2100      	movs	r1, #0
 8002760:	f00d fb34 	bl	800fdcc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002764:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 8002766:	4a20      	ldr	r2, [pc, #128]	@ (80027e8 <MX_TIM3_Init+0xa8>)
 8002768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 800276a:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 800276c:	22f4      	movs	r2, #244	@ 0xf4
 800276e:	32ff      	adds	r2, #255	@ 0xff
 8002770:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 8002778:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 800277a:	2268      	movs	r2, #104	@ 0x68
 800277c:	32ff      	adds	r2, #255	@ 0xff
 800277e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002780:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800278c:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 800278e:	0018      	movs	r0, r3
 8002790:	f005 fa3e 	bl	8007c10 <HAL_TIM_Base_Init>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002798:	f000 f9ae 	bl	8002af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279c:	2108      	movs	r1, #8
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	0152      	lsls	r2, r2, #5
 80027a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027a6:	187a      	adds	r2, r7, r1
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f005 fb6d 	bl	8007e8c <HAL_TIM_ConfigClockSource>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80027b6:	f000 f99f 	bl	8002af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ba:	003b      	movs	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	003b      	movs	r3, r7
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c6:	003a      	movs	r2, r7
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_TIM3_Init+0xa4>)
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f005 fd81 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80027d6:	f000 f98f 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	200004e4 	.word	0x200004e4
 80027e8:	40000400 	.word	0x40000400

080027ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b16      	ldr	r3, [pc, #88]	@ (800284c <MX_USART1_UART_Init+0x60>)
 80027f2:	4a17      	ldr	r2, [pc, #92]	@ (8002850 <MX_USART1_UART_Init+0x64>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <MX_USART1_UART_Init+0x60>)
 80027f8:	2296      	movs	r2, #150	@ 0x96
 80027fa:	0192      	lsls	r2, r2, #6
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b13      	ldr	r3, [pc, #76]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <MX_USART1_UART_Init+0x60>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <MX_USART1_UART_Init+0x60>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <MX_USART1_UART_Init+0x60>)
 800282a:	2210      	movs	r2, #16
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	0152      	lsls	r2, r2, #5
 8002834:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002836:	4b05      	ldr	r3, [pc, #20]	@ (800284c <MX_USART1_UART_Init+0x60>)
 8002838:	0018      	movs	r0, r3
 800283a:	f005 fdb9 	bl	80083b0 <HAL_UART_Init>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d001      	beq.n	8002846 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002842:	f000 f959 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000052c 	.word	0x2000052c
 8002850:	40013800 	.word	0x40013800

08002854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <MX_DMA_Init+0x38>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <MX_DMA_Init+0x38>)
 8002860:	2101      	movs	r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <MX_DMA_Init+0x38>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	200a      	movs	r0, #10
 8002878:	f001 fa46 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800287c:	200a      	movs	r0, #10
 800287e:	f001 fa58 	bl	8003d32 <HAL_NVIC_EnableIRQ>

}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	40021000 	.word	0x40021000

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	240c      	movs	r4, #12
 8002898:	193b      	adds	r3, r7, r4
 800289a:	0018      	movs	r0, r3
 800289c:	2314      	movs	r3, #20
 800289e:	001a      	movs	r2, r3
 80028a0:	2100      	movs	r1, #0
 80028a2:	f00d fa93 	bl	800fdcc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028ac:	2180      	movs	r1, #128	@ 0x80
 80028ae:	03c9      	lsls	r1, r1, #15
 80028b0:	430a      	orrs	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	03db      	lsls	r3, r3, #15
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b54      	ldr	r3, [pc, #336]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	0289      	lsls	r1, r1, #10
 80028cc:	430a      	orrs	r2, r1
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	4013      	ands	r3, r2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	4b4d      	ldr	r3, [pc, #308]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	02c9      	lsls	r1, r1, #11
 80028e8:	430a      	orrs	r2, r1
 80028ea:	615a      	str	r2, [r3, #20]
 80028ec:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <MX_GPIO_Init+0x184>)
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	02db      	lsls	r3, r3, #11
 80028f4:	4013      	ands	r3, r2
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 80028fa:	2390      	movs	r3, #144	@ 0x90
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	2200      	movs	r2, #0
 8002900:	2111      	movs	r1, #17
 8002902:	0018      	movs	r0, r3
 8002904:	f001 fded 	bl	80044e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002908:	4943      	ldr	r1, [pc, #268]	@ (8002a18 <MX_GPIO_Init+0x188>)
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <MX_GPIO_Init+0x18c>)
 800290c:	2200      	movs	r2, #0
 800290e:	0018      	movs	r0, r3
 8002910:	f001 fde7 	bl	80044e2 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291a:	193b      	adds	r3, r7, r4
 800291c:	2201      	movs	r2, #1
 800291e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	193b      	adds	r3, r7, r4
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	193b      	adds	r3, r7, r4
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 800292c:	193a      	adds	r2, r7, r4
 800292e:	2390      	movs	r3, #144	@ 0x90
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f001 fc3f 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2204      	movs	r2, #4
 800293e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2288      	movs	r2, #136	@ 0x88
 8002944:	0352      	lsls	r2, r2, #13
 8002946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	193b      	adds	r3, r7, r4
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800294e:	193a      	adds	r2, r7, r4
 8002950:	2390      	movs	r3, #144	@ 0x90
 8002952:	05db      	lsls	r3, r3, #23
 8002954:	0011      	movs	r1, r2
 8002956:	0018      	movs	r0, r3
 8002958:	f001 fc2e 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800295c:	193b      	adds	r3, r7, r4
 800295e:	2210      	movs	r2, #16
 8002960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	193b      	adds	r3, r7, r4
 8002964:	2201      	movs	r2, #1
 8002966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	2203      	movs	r2, #3
 8002972:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002974:	193a      	adds	r2, r7, r4
 8002976:	2390      	movs	r3, #144	@ 0x90
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f001 fc1b 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002982:	193b      	adds	r3, r7, r4
 8002984:	4a24      	ldr	r2, [pc, #144]	@ (8002a18 <MX_GPIO_Init+0x188>)
 8002986:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002988:	193b      	adds	r3, r7, r4
 800298a:	2201      	movs	r2, #1
 800298c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	193b      	adds	r3, r7, r4
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <MX_GPIO_Init+0x18c>)
 800299e:	0019      	movs	r1, r3
 80029a0:	0010      	movs	r0, r2
 80029a2:	f001 fc09 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 80029a6:	0021      	movs	r1, r4
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2280      	movs	r2, #128	@ 0x80
 80029ac:	0192      	lsls	r2, r2, #6
 80029ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b0:	000c      	movs	r4, r1
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <MX_GPIO_Init+0x18c>)
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f001 fbf7 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80029ca:	0021      	movs	r1, r4
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2220      	movs	r2, #32
 80029d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2288      	movs	r2, #136	@ 0x88
 80029d6:	0352      	lsls	r2, r2, #13
 80029d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2202      	movs	r2, #2
 80029de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	4a0e      	ldr	r2, [pc, #56]	@ (8002a1c <MX_GPIO_Init+0x18c>)
 80029e4:	0019      	movs	r1, r3
 80029e6:	0010      	movs	r0, r2
 80029e8:	f001 fbe6 	bl	80041b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	2006      	movs	r0, #6
 80029f2:	f001 f989 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80029f6:	2006      	movs	r0, #6
 80029f8:	f001 f99b 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	2007      	movs	r0, #7
 8002a02:	f001 f981 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a06:	2007      	movs	r0, #7
 8002a08:	f001 f993 	bl	8003d32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b009      	add	sp, #36	@ 0x24
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	00000b44 	.word	0x00000b44
 8002a1c:	48000400 	.word	0x48000400

08002a20 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	000a      	movs	r2, r1
 8002a2a:	1cbb      	adds	r3, r7, #2
 8002a2c:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	1cba      	adds	r2, r7, #2
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d050      	beq.n	8002adc <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	1cba      	adds	r2, r7, #2
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d202      	bcs.n	8002a4c <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 8002a46:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	001a      	movs	r2, r3
 8002a52:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002a54:	18d0      	adds	r0, r2, r3
 8002a56:	1cbb      	adds	r3, r7, #2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	f00a fd33 	bl	800d4cc <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 8002a66:	230e      	movs	r3, #14
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	e029      	b.n	8002ac6 <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 8002a72:	210e      	movs	r1, #14
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	2b2b      	cmp	r3, #43	@ 0x2b
 8002a7e:	d11c      	bne.n	8002aba <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <HAL_UARTEx_RxEventCallback+0xcc>)
 8002a82:	187a      	adds	r2, r7, r1
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8002a88:	4b18      	ldr	r3, [pc, #96]	@ (8002aec <HAL_UARTEx_RxEventCallback+0xcc>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	1cba      	adds	r2, r7, #2
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d202      	bcs.n	8002a9a <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8002a94:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <HAL_UARTEx_RxEventCallback+0xcc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8002a9a:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <HAL_UARTEx_RxEventCallback+0xcc>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	4912      	ldr	r1, [pc, #72]	@ (8002af0 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002aa6:	2215      	movs	r2, #21
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f00d f981 	bl	800fdb0 <memcmp>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
          break;
 8002ab8:	e00c      	b.n	8002ad4 <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 8002aba:	210e      	movs	r1, #14
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	3201      	adds	r2, #1
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	230e      	movs	r3, #14
 8002ac8:	18fa      	adds	r2, r7, r3
 8002aca:	1cbb      	adds	r3, r7, #2
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3ce      	bcc.n	8002a72 <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002ad6:	1cba      	adds	r2, r7, #2
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	801a      	strh	r2, [r3, #0]


	}

}
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000a2a 	.word	0x20000a2a
 8002ae8:	20000628 	.word	0x20000628
 8002aec:	20000a2c 	.word	0x20000a2c
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000a28 	.word	0x20000a28

08002af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
}
 8002afe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	e7fd      	b.n	8002b00 <Error_Handler+0x8>

08002b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	619a      	str	r2, [r3, #24]
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	0549      	lsls	r1, r1, #21
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	61da      	str	r2, [r3, #28]
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_MspInit+0x54>)
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	055b      	lsls	r3, r3, #21
 8002b38:	4013      	ands	r3, r2
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2004      	movs	r0, #4
 8002b44:	f001 f8e0 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002b48:	2004      	movs	r0, #4
 8002b4a:	f001 f8f2 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08b      	sub	sp, #44	@ 0x2c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	2414      	movs	r4, #20
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f00d f92c 	bl	800fdcc <memset>
  if(hadc->Instance==ADC1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_ADC_MspInit+0x80>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12a      	bne.n	8002bd4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	0089      	lsls	r1, r1, #2
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	02c9      	lsls	r1, r1, #11
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <HAL_ADC_MspInit+0x84>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	02db      	lsls	r3, r3, #11
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	4a06      	ldr	r2, [pc, #24]	@ (8002be4 <HAL_ADC_MspInit+0x88>)
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f001 faf2 	bl	80041b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b00b      	add	sp, #44	@ 0x2c
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	40012400 	.word	0x40012400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	48000400 	.word	0x48000400

08002be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b08d      	sub	sp, #52	@ 0x34
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	241c      	movs	r4, #28
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	2314      	movs	r3, #20
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	f00d f8e6 	bl	800fdcc <memset>
  if(hspi->Instance==SPI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a45      	ldr	r2, [pc, #276]	@ (8002d1c <HAL_SPI_MspInit+0x134>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d133      	bne.n	8002c72 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c0a:	4b45      	ldr	r3, [pc, #276]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	4b44      	ldr	r3, [pc, #272]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c10:	2180      	movs	r1, #128	@ 0x80
 8002c12:	0149      	lsls	r1, r1, #5
 8002c14:	430a      	orrs	r2, r1
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	015b      	lsls	r3, r3, #5
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0289      	lsls	r1, r1, #10
 8002c30:	430a      	orrs	r2, r1
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002c42:	0021      	movs	r1, r4
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	22e0      	movs	r2, #224	@ 0xe0
 8002c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	187a      	adds	r2, r7, r1
 8002c64:	2390      	movs	r3, #144	@ 0x90
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f001 faa4 	bl	80041b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c70:	e04f      	b.n	8002d12 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <HAL_SPI_MspInit+0x13c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d14a      	bne.n	8002d12 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c82:	2180      	movs	r1, #128	@ 0x80
 8002c84:	01c9      	lsls	r1, r1, #7
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	01db      	lsls	r3, r3, #7
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c98:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002c9e:	2180      	movs	r1, #128	@ 0x80
 8002ca0:	02c9      	lsls	r1, r1, #11
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_SPI_MspInit+0x138>)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	02db      	lsls	r3, r3, #11
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cb4:	211c      	movs	r1, #28
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	00d2      	lsls	r2, r2, #3
 8002cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	000c      	movs	r4, r1
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2203      	movs	r2, #3
 8002cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <HAL_SPI_MspInit+0x140>)
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f001 fa6a 	bl	80041b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002ce4:	0021      	movs	r1, r4
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	22d0      	movs	r2, #208	@ 0xd0
 8002cea:	0212      	lsls	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_SPI_MspInit+0x140>)
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	f001 fa53 	bl	80041b8 <HAL_GPIO_Init>
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b00d      	add	sp, #52	@ 0x34
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	40013000 	.word	0x40013000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40003800 	.word	0x40003800
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <HAL_TIM_Base_MspInit+0x44>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <HAL_TIM_Base_MspInit+0x48>)
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <HAL_TIM_Base_MspInit+0x48>)
 8002d44:	2102      	movs	r1, #2
 8002d46:	430a      	orrs	r2, r1
 8002d48:	61da      	str	r2, [r3, #28]
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <HAL_TIM_Base_MspInit+0x48>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2010      	movs	r0, #16
 8002d5c:	f000 ffd4 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d60:	2010      	movs	r0, #16
 8002d62:	f000 ffe6 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08b      	sub	sp, #44	@ 0x2c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	2414      	movs	r4, #20
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	0018      	movs	r0, r3
 8002d86:	2314      	movs	r3, #20
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f00d f81e 	bl	800fdcc <memset>
  if(huart->Instance==USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a34      	ldr	r2, [pc, #208]	@ (8002e68 <HAL_UART_MspInit+0xf0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d161      	bne.n	8002e5e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d9a:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002da0:	2180      	movs	r1, #128	@ 0x80
 8002da2:	01c9      	lsls	r1, r1, #7
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	01db      	lsls	r3, r3, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002dbc:	2180      	movs	r1, #128	@ 0x80
 8002dbe:	0289      	lsls	r1, r1, #10
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	615a      	str	r2, [r3, #20]
 8002dc4:	4b29      	ldr	r3, [pc, #164]	@ (8002e6c <HAL_UART_MspInit+0xf4>)
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	22c0      	movs	r2, #192	@ 0xc0
 8002dd6:	00d2      	lsls	r2, r2, #3
 8002dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	0021      	movs	r1, r4
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2202      	movs	r2, #2
 8002de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2203      	movs	r2, #3
 8002dec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2201      	movs	r2, #1
 8002df2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	187a      	adds	r2, r7, r1
 8002df6:	2390      	movs	r3, #144	@ 0x90
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f001 f9db 	bl	80041b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002e02:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e04:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <HAL_UART_MspInit+0xfc>)
 8002e06:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e26:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e28:	2220      	movs	r2, #32
 8002e2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e32:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 ffa9 	bl	8003d8c <HAL_DMA_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002e3e:	f7ff fe5b 	bl	8002af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e46:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_UART_MspInit+0xf8>)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	201b      	movs	r0, #27
 8002e54:	f000 ff58 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e58:	201b      	movs	r0, #27
 8002e5a:	f000 ff6a 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b00b      	add	sp, #44	@ 0x2c
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	200005e4 	.word	0x200005e4
 8002e74:	40020030 	.word	0x40020030

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	e7fd      	b.n	8002e7c <NMI_Handler+0x4>

08002e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	e7fd      	b.n	8002e84 <HardFault_Handler+0x4>

08002e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f000 fbd6 	bl	8003650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002eb8:	2004      	movs	r0, #4
 8002eba:	f001 fb2f 	bl	800451c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002ec8:	2020      	movs	r0, #32
 8002eca:	f001 fb27 	bl	800451c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 f881 	bl	8003fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	200005e4 	.word	0x200005e4

08002eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ef0:	4b03      	ldr	r3, [pc, #12]	@ (8002f00 <TIM3_IRQHandler+0x14>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f004 fedc 	bl	8007cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	200004e4 	.word	0x200004e4

08002f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <USART1_IRQHandler+0x14>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f005 fab6 	bl	800847c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	2000052c 	.word	0x2000052c

08002f1c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <USB_IRQHandler+0x14>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 fc30 	bl	8004788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	20001734 	.word	0x20001734

08002f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_kill>:

int _kill(int pid, int sig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f4a:	f00c ff99 	bl	800fe80 <__errno>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	2216      	movs	r2, #22
 8002f52:	601a      	str	r2, [r3, #0]
  return -1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_exit>:

void _exit (int status)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f68:	2301      	movs	r3, #1
 8002f6a:	425a      	negs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ffe5 	bl	8002f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	e7fd      	b.n	8002f76 <_exit+0x16>

08002f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e00a      	b.n	8002fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f8c:	e000      	b.n	8002f90 <_read+0x16>
 8002f8e:	bf00      	nop
 8002f90:	0001      	movs	r1, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	b2ca      	uxtb	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbf0      	blt.n	8002f8c <_read+0x12>
  }

  return len;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b006      	add	sp, #24
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e009      	b.n	8002fda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	60ba      	str	r2, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	e000      	b.n	8002fd4 <_write+0x20>
 8002fd2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dbf1      	blt.n	8002fc6 <_write+0x12>
  }
  return len;
 8002fe2:	687b      	ldr	r3, [r7, #4]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b006      	add	sp, #24
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_close>:

int _close(int file)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	425b      	negs	r3, r3
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2280      	movs	r2, #128	@ 0x80
 800300e:	0192      	lsls	r2, r2, #6
 8003010:	605a      	str	r2, [r3, #4]
  return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <_isatty>:

int _isatty(int file)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003024:	2301      	movs	r3, #1
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}

0800302e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	18d3      	adds	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f00c ff04 	bl	800fe80 <__errno>
 8003078:	0003      	movs	r3, r0
 800307a:	220c      	movs	r2, #12
 800307c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307e:	2301      	movs	r3, #1
 8003080:	425b      	negs	r3, r3
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	18d2      	adds	r2, r2, r3
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <_sbrk+0x64>)
 8003094:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b006      	add	sp, #24
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20004000 	.word	0x20004000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	20000a30 	.word	0x20000a30
 80030ac:	20001db8 	.word	0x20001db8

080030b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <get_anchor_id>:

uint8_t total_anchors = sizeof(anchor_addresses) / 2; // How many anchors in environment
uint8_t total_tags = sizeof(tag_addresses) / 2;       // How many tags in environment

uint8_t * get_anchor_id(uint8_t idx)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	0002      	movs	r2, r0
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	701a      	strb	r2, [r3, #0]
    return anchor_addresses + (idx * 2);
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	001a      	movs	r2, r3
 80030d0:	4b02      	ldr	r3, [pc, #8]	@ (80030dc <get_anchor_id+0x20>)
 80030d2:	18d3      	adds	r3, r2, r3
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000001c 	.word	0x2000001c

080030e0 <tag_main>:
 * @return none
 */

int tag_main(void)

{
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	b08b      	sub	sp, #44	@ 0x2c
 80030e4:	af00      	add	r7, sp, #0

    memcpy((tx_poll_msg) + TX_POLL_MSG_TAG_ID_IDX, tag_id, 2);
 80030e6:	48b9      	ldr	r0, [pc, #740]	@ (80033cc <tag_main+0x2ec>)
 80030e8:	4bb9      	ldr	r3, [pc, #740]	@ (80033d0 <tag_main+0x2f0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	0019      	movs	r1, r3
 80030f0:	f00c fefe 	bl	800fef0 <memcpy>
    memcpy((rx_resp_msg) + RX_RESP_MSG_TAG_ID_IDX, tag_id, 2);
 80030f4:	48b7      	ldr	r0, [pc, #732]	@ (80033d4 <tag_main+0x2f4>)
 80030f6:	4bb6      	ldr	r3, [pc, #728]	@ (80033d0 <tag_main+0x2f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2202      	movs	r2, #2
 80030fc:	0019      	movs	r1, r3
 80030fe:	f00c fef7 	bl	800fef0 <memcpy>
    memcpy((tx_final_msg) + TX_FINAL_MSG_TAG_ID_IDX, tag_id, 2);
 8003102:	48b5      	ldr	r0, [pc, #724]	@ (80033d8 <tag_main+0x2f8>)
 8003104:	4bb2      	ldr	r3, [pc, #712]	@ (80033d0 <tag_main+0x2f0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2202      	movs	r2, #2
 800310a:	0019      	movs	r1, r3
 800310c:	f00c fef0 	bl	800fef0 <memcpy>
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8003110:	f00c f80e 	bl	800f130 <reset_DW1000>
    port_set_dw1000_slowrate();
 8003114:	f00c f878 	bl	800f208 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8003118:	2001      	movs	r0, #1
 800311a:	f00a fe91 	bl	800de40 <dwt_initialise>
 800311e:	0003      	movs	r3, r0
 8003120:	3301      	adds	r3, #1
 8003122:	d101      	bne.n	8003128 <tag_main+0x48>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	e7fd      	b.n	8003124 <tag_main+0x44>
        {
        };
    }
    port_set_dw1000_fastrate();
 8003128:	f00c f87c 	bl	800f224 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 800312c:	4bab      	ldr	r3, [pc, #684]	@ (80033dc <tag_main+0x2fc>)
 800312e:	0018      	movs	r0, r3
 8003130:	f00a fffa 	bl	800e128 <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 8003134:	4baa      	ldr	r3, [pc, #680]	@ (80033e0 <tag_main+0x300>)
 8003136:	0018      	movs	r0, r3
 8003138:	f00a ffe0 	bl	800e0fc <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 800313c:	2000      	movs	r0, #0
 800313e:	f00b fc21 	bl	800e984 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8003142:	4ba8      	ldr	r3, [pc, #672]	@ (80033e4 <tag_main+0x304>)
 8003144:	0018      	movs	r0, r3
 8003146:	f00b f993 	bl	800e470 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800314a:	4ba6      	ldr	r3, [pc, #664]	@ (80033e4 <tag_main+0x304>)
 800314c:	0018      	movs	r0, r3
 800314e:	f00b f9a3 	bl	800e498 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8003152:	2396      	movs	r3, #150	@ 0x96
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	0018      	movs	r0, r3
 8003158:	f00b fc46 	bl	800e9e8 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800315c:	23af      	movs	r3, #175	@ 0xaf
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	0018      	movs	r0, r3
 8003162:	f00b fe13 	bl	800ed8c <dwt_setrxtimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8003166:	4ea0      	ldr	r6, [pc, #640]	@ (80033e8 <tag_main+0x308>)
 8003168:	4ba0      	ldr	r3, [pc, #640]	@ (80033ec <tag_main+0x30c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff ffa5 	bl	80030bc <get_anchor_id>
 8003172:	0003      	movs	r3, r0
 8003174:	2202      	movs	r2, #2
 8003176:	0019      	movs	r1, r3
 8003178:	0030      	movs	r0, r6
 800317a:	f00c feb9 	bl	800fef0 <memcpy>
        memcpy(rx_resp_msg + RX_RESP_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 800317e:	4e9c      	ldr	r6, [pc, #624]	@ (80033f0 <tag_main+0x310>)
 8003180:	4b9a      	ldr	r3, [pc, #616]	@ (80033ec <tag_main+0x30c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff ff99 	bl	80030bc <get_anchor_id>
 800318a:	0003      	movs	r3, r0
 800318c:	2202      	movs	r2, #2
 800318e:	0019      	movs	r1, r3
 8003190:	0030      	movs	r0, r6
 8003192:	f00c fead 	bl	800fef0 <memcpy>
        memcpy(tx_final_msg + TX_FINAL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8003196:	4e97      	ldr	r6, [pc, #604]	@ (80033f4 <tag_main+0x314>)
 8003198:	4b94      	ldr	r3, [pc, #592]	@ (80033ec <tag_main+0x30c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff ff8d 	bl	80030bc <get_anchor_id>
 80031a2:	0003      	movs	r3, r0
 80031a4:	2202      	movs	r2, #2
 80031a6:	0019      	movs	r1, r3
 80031a8:	0030      	movs	r0, r6
 80031aa:	f00c fea1 	bl	800fef0 <memcpy>

        current_anchor = (current_anchor + 1) % total_anchors;
 80031ae:	4b8f      	ldr	r3, [pc, #572]	@ (80033ec <tag_main+0x30c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	4b90      	ldr	r3, [pc, #576]	@ (80033f8 <tag_main+0x318>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	0019      	movs	r1, r3
 80031ba:	0010      	movs	r0, r2
 80031bc:	f7fd f930 	bl	8000420 <__aeabi_idivmod>
 80031c0:	000b      	movs	r3, r1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <tag_main+0x30c>)
 80031c6:	701a      	strb	r2, [r3, #0]

        /* Don't send if another interaction is happening */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f00b fd97 	bl	800ecfc <dwt_rxenable>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	2100      	movs	r1, #0
 80031d2:	200f      	movs	r0, #15
 80031d4:	f00b fab0 	bl	800e738 <dwt_read32bitoffsetreg>
 80031d8:	0002      	movs	r2, r0
 80031da:	4b88      	ldr	r3, [pc, #544]	@ (80033fc <tag_main+0x31c>)
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b87      	ldr	r3, [pc, #540]	@ (80033fc <tag_main+0x31c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a87      	ldr	r2, [pc, #540]	@ (8003400 <tag_main+0x320>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	d0f3      	beq.n	80031d0 <tag_main+0xf0>
        {}

        if (status_reg & SYS_STATUS_RXFCG)
 80031e8:	4b84      	ldr	r3, [pc, #528]	@ (80033fc <tag_main+0x31c>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	d003      	beq.n	80031fc <tag_main+0x11c>
        {
        	Sleep(50);
 80031f4:	2032      	movs	r0, #50	@ 0x32
 80031f6:	f00b ff74 	bl	800f0e2 <Sleep>
        	continue;
 80031fa:	e0e6      	b.n	80033ca <tag_main+0x2ea>
        }
        else
        {
        	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80031fc:	4b81      	ldr	r3, [pc, #516]	@ (8003404 <tag_main+0x324>)
 80031fe:	001a      	movs	r2, r3
 8003200:	2100      	movs	r1, #0
 8003202:	200f      	movs	r0, #15
 8003204:	f00b fb29 	bl	800e85a <dwt_write32bitoffsetreg>
        	dwt_rxreset();
 8003208:	f00b fe10 	bl	800ee2c <dwt_rxreset>
        }


        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800320c:	4b7e      	ldr	r3, [pc, #504]	@ (8003408 <tag_main+0x328>)
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	4b7e      	ldr	r3, [pc, #504]	@ (800340c <tag_main+0x32c>)
 8003212:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8003214:	4b7d      	ldr	r3, [pc, #500]	@ (800340c <tag_main+0x32c>)
 8003216:	2200      	movs	r2, #0
 8003218:	0019      	movs	r1, r3
 800321a:	200c      	movs	r0, #12
 800321c:	f00b f94d 	bl	800e4ba <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8003220:	2201      	movs	r2, #1
 8003222:	2100      	movs	r1, #0
 8003224:	200c      	movs	r0, #12
 8003226:	f00b f971 	bl	800e50c <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800322a:	2002      	movs	r0, #2
 800322c:	f00b fcb6 	bl	800eb9c <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	2100      	movs	r1, #0
 8003234:	200f      	movs	r0, #15
 8003236:	f00b fa7f 	bl	800e738 <dwt_read32bitoffsetreg>
 800323a:	0002      	movs	r2, r0
 800323c:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <tag_main+0x31c>)
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	4b6e      	ldr	r3, [pc, #440]	@ (80033fc <tag_main+0x31c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6e      	ldr	r2, [pc, #440]	@ (8003400 <tag_main+0x320>)
 8003246:	4013      	ands	r3, r2
 8003248:	d0f3      	beq.n	8003232 <tag_main+0x152>

        // uint32_t status_reg_error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        // CDC_Transmit_FS((uint8_t*) status_reg_error, sizeof(status_reg_error));

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 800324a:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <tag_main+0x328>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b6d      	ldr	r3, [pc, #436]	@ (8003408 <tag_main+0x328>)
 8003254:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8003256:	4b69      	ldr	r3, [pc, #420]	@ (80033fc <tag_main+0x31c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	4013      	ands	r3, r2
 8003260:	d100      	bne.n	8003264 <tag_main+0x184>
 8003262:	e0a7      	b.n	80033b4 <tag_main+0x2d4>
        {
            uint32 frame_len;

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8003264:	2100      	movs	r1, #0
 8003266:	2010      	movs	r0, #16
 8003268:	f00b fa66 	bl	800e738 <dwt_read32bitoffsetreg>
 800326c:	0003      	movs	r3, r0
 800326e:	227f      	movs	r2, #127	@ 0x7f
 8003270:	4013      	ands	r3, r2
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
            if (frame_len <= RX_BUF_LEN)
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	2b14      	cmp	r3, #20
 8003278:	d806      	bhi.n	8003288 <tag_main+0x1a8>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	b299      	uxth	r1, r3
 800327e:	4b64      	ldr	r3, [pc, #400]	@ (8003410 <tag_main+0x330>)
 8003280:	2200      	movs	r2, #0
 8003282:	0018      	movs	r0, r3
 8003284:	f00b f966 	bl	800e554 <dwt_readrxdata>
            }

            CDC_Transmit_FS(rx_buffer, sizeof(rx_buffer));
 8003288:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <tag_main+0x330>)
 800328a:	2114      	movs	r1, #20
 800328c:	0018      	movs	r0, r3
 800328e:	f00a f91d 	bl	800d4cc <CDC_Transmit_FS>

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8003292:	2381      	movs	r3, #129	@ 0x81
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	001a      	movs	r2, r3
 8003298:	2100      	movs	r1, #0
 800329a:	200f      	movs	r0, #15
 800329c:	f00b fadd 	bl	800e85a <dwt_write32bitoffsetreg>

            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80032a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <tag_main+0x330>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80032a6:	495b      	ldr	r1, [pc, #364]	@ (8003414 <tag_main+0x334>)
 80032a8:	4b59      	ldr	r3, [pc, #356]	@ (8003410 <tag_main+0x330>)
 80032aa:	220a      	movs	r2, #10
 80032ac:	0018      	movs	r0, r3
 80032ae:	f00c fd7f 	bl	800fdb0 <memcmp>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d000      	beq.n	80032b8 <tag_main+0x1d8>
 80032b6:	e085      	b.n	80033c4 <tag_main+0x2e4>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 80032b8:	f000 f8be 	bl	8003438 <get_tx_timestamp_u64>
 80032bc:	0002      	movs	r2, r0
 80032be:	000b      	movs	r3, r1
 80032c0:	4955      	ldr	r1, [pc, #340]	@ (8003418 <tag_main+0x338>)
 80032c2:	600a      	str	r2, [r1, #0]
 80032c4:	604b      	str	r3, [r1, #4]
                resp_rx_ts = get_rx_timestamp_u64();
 80032c6:	f000 f8f1 	bl	80034ac <get_rx_timestamp_u64>
 80032ca:	0002      	movs	r2, r0
 80032cc:	000b      	movs	r3, r1
 80032ce:	4953      	ldr	r1, [pc, #332]	@ (800341c <tag_main+0x33c>)
 80032d0:	600a      	str	r2, [r1, #0]
 80032d2:	604b      	str	r3, [r1, #4]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80032d4:	4b51      	ldr	r3, [pc, #324]	@ (800341c <tag_main+0x33c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4851      	ldr	r0, [pc, #324]	@ (8003420 <tag_main+0x340>)
 80032dc:	2100      	movs	r1, #0
 80032de:	1812      	adds	r2, r2, r0
 80032e0:	414b      	adcs	r3, r1
 80032e2:	0619      	lsls	r1, r3, #24
 80032e4:	0a14      	lsrs	r4, r2, #8
 80032e6:	430c      	orrs	r4, r1
 80032e8:	0a1d      	lsrs	r5, r3, #8
 80032ea:	0023      	movs	r3, r4
 80032ec:	623b      	str	r3, [r7, #32]
                dwt_setdelayedtrxtime(final_tx_time);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f00b fc44 	bl	800eb7e <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	0011      	movs	r1, r2
 8003304:	0e09      	lsrs	r1, r1, #24
 8003306:	60f9      	str	r1, [r7, #12]
 8003308:	0013      	movs	r3, r2
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	000b      	movs	r3, r1
 8003314:	0a5b      	lsrs	r3, r3, #9
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	23ff      	movs	r3, #255	@ 0xff
 800331c:	401a      	ands	r2, r3
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <tag_main+0x304>)
 8003322:	2300      	movs	r3, #0
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	1812      	adds	r2, r2, r0
 800332a:	414b      	adcs	r3, r1
 800332c:	493d      	ldr	r1, [pc, #244]	@ (8003424 <tag_main+0x344>)
 800332e:	600a      	str	r2, [r1, #0]
 8003330:	604b      	str	r3, [r1, #4]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8003332:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <tag_main+0x338>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	493b      	ldr	r1, [pc, #236]	@ (8003428 <tag_main+0x348>)
 800333a:	0008      	movs	r0, r1
 800333c:	f000 f8f0 	bl	8003520 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8003340:	4b36      	ldr	r3, [pc, #216]	@ (800341c <tag_main+0x33c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4939      	ldr	r1, [pc, #228]	@ (800342c <tag_main+0x34c>)
 8003348:	0008      	movs	r0, r1
 800334a:	f000 f8e9 	bl	8003520 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 800334e:	4b35      	ldr	r3, [pc, #212]	@ (8003424 <tag_main+0x344>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4936      	ldr	r1, [pc, #216]	@ (8003430 <tag_main+0x350>)
 8003356:	0008      	movs	r0, r1
 8003358:	f000 f8e2 	bl	8003520 <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800335c:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <tag_main+0x328>)
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	4b34      	ldr	r3, [pc, #208]	@ (8003434 <tag_main+0x354>)
 8003362:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8003364:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <tag_main+0x354>)
 8003366:	2200      	movs	r2, #0
 8003368:	0019      	movs	r1, r3
 800336a:	2018      	movs	r0, #24
 800336c:	f00b f8a5 	bl	800e4ba <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1);           /* Zero offset in TX buffer, ranging. */
 8003370:	2201      	movs	r2, #1
 8003372:	2100      	movs	r1, #0
 8003374:	2018      	movs	r0, #24
 8003376:	f00b f8c9 	bl	800e50c <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 800337a:	2001      	movs	r0, #1
 800337c:	f00b fc0e 	bl	800eb9c <dwt_starttx>
 8003380:	0003      	movs	r3, r0
 8003382:	61fb      	str	r3, [r7, #28]

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11c      	bne.n	80033c4 <tag_main+0x2e4>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	2100      	movs	r1, #0
 800338e:	200f      	movs	r0, #15
 8003390:	f00b f9d2 	bl	800e738 <dwt_read32bitoffsetreg>
 8003394:	0003      	movs	r3, r0
 8003396:	2280      	movs	r2, #128	@ 0x80
 8003398:	4013      	ands	r3, r2
 800339a:	d0f7      	beq.n	800338c <tag_main+0x2ac>
                    {
                    };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	2100      	movs	r1, #0
 80033a0:	200f      	movs	r0, #15
 80033a2:	f00b fa5a 	bl	800e85a <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 80033a6:	4b18      	ldr	r3, [pc, #96]	@ (8003408 <tag_main+0x328>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <tag_main+0x328>)
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <tag_main+0x2e4>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <tag_main+0x324>)
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	200f      	movs	r0, #15
 80033bc:	f00b fa4d 	bl	800e85a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80033c0:	f00b fd34 	bl	800ee2c <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f00b fe8c 	bl	800f0e2 <Sleep>
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 80033ca:	e6cc      	b.n	8003166 <tag_main+0x86>
 80033cc:	2000004b 	.word	0x2000004b
 80033d0:	20000040 	.word	0x20000040
 80033d4:	20000055 	.word	0x20000055
 80033d8:	20000067 	.word	0x20000067
 80033dc:	2000002c 	.word	0x2000002c
 80033e0:	20000038 	.word	0x20000038
 80033e4:	00004031 	.word	0x00004031
 80033e8:	20000049 	.word	0x20000049
 80033ec:	20000a34 	.word	0x20000a34
 80033f0:	20000057 	.word	0x20000057
 80033f4:	20000065 	.word	0x20000065
 80033f8:	20000028 	.word	0x20000028
 80033fc:	20000a4c 	.word	0x20000a4c
 8003400:	2427d000 	.word	0x2427d000
 8003404:	24279000 	.word	0x24279000
 8003408:	20000a35 	.word	0x20000a35
 800340c:	20000044 	.word	0x20000044
 8003410:	20000a38 	.word	0x20000a38
 8003414:	20000050 	.word	0x20000050
 8003418:	20000a50 	.word	0x20000a50
 800341c:	20000a58 	.word	0x20000a58
 8003420:	09c40000 	.word	0x09c40000
 8003424:	20000a60 	.word	0x20000a60
 8003428:	2000006a 	.word	0x2000006a
 800342c:	2000006e 	.word	0x2000006e
 8003430:	20000072 	.word	0x20000072
 8003434:	20000060 	.word	0x20000060

08003438 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800343e:	2200      	movs	r2, #0
 8003440:	2300      	movs	r3, #0
 8003442:	623a      	str	r2, [r7, #32]
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 8003446:	2314      	movs	r3, #20
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	0018      	movs	r0, r3
 800344c:	f00b f89b 	bl	800e586 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003450:	2304      	movs	r3, #4
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e020      	b.n	8003498 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	0215      	lsls	r5, r2, #8
 800345e:	431d      	orrs	r5, r3
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	021c      	lsls	r4, r3, #8
 8003464:	623c      	str	r4, [r7, #32]
 8003466:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8003468:	2314      	movs	r3, #20
 800346a:	18fa      	adds	r2, r7, r3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	18d3      	adds	r3, r2, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	0008      	movs	r0, r1
 8003480:	4318      	orrs	r0, r3
 8003482:	6038      	str	r0, [r7, #0]
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	431a      	orrs	r2, r3
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	623a      	str	r2, [r7, #32]
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b01      	subs	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dadb      	bge.n	8003456 <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 800349e:	6a3a      	ldr	r2, [r7, #32]
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034a2:	0010      	movs	r0, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b00a      	add	sp, #40	@ 0x28
 80034aa:	bdb0      	pop	{r4, r5, r7, pc}

080034ac <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80034ac:	b5b0      	push	{r4, r5, r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80034b2:	2200      	movs	r2, #0
 80034b4:	2300      	movs	r3, #0
 80034b6:	623a      	str	r2, [r7, #32]
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80034ba:	2314      	movs	r3, #20
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	0018      	movs	r0, r3
 80034c0:	f00b f86f 	bl	800e5a2 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80034c4:	2304      	movs	r3, #4
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	e020      	b.n	800350c <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	0e1b      	lsrs	r3, r3, #24
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	0215      	lsls	r5, r2, #8
 80034d2:	431d      	orrs	r5, r3
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	021c      	lsls	r4, r3, #8
 80034d8:	623c      	str	r4, [r7, #32]
 80034da:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80034dc:	2314      	movs	r3, #20
 80034de:	18fa      	adds	r2, r7, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	18d3      	adds	r3, r2, r3
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	0008      	movs	r0, r1
 80034f4:	4318      	orrs	r0, r3
 80034f6:	6038      	str	r0, [r7, #0]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	431a      	orrs	r2, r3
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	623a      	str	r2, [r7, #32]
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b01      	subs	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	dadb      	bge.n	80034ca <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003516:	0010      	movs	r0, r2
 8003518:	0019      	movs	r1, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b00a      	add	sp, #40	@ 0x28
 800351e:	bdb0      	pop	{r4, r5, r7, pc}

08003520 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	603a      	str	r2, [r7, #0]
 800352a:	607b      	str	r3, [r7, #4]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e013      	b.n	800355a <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8)ts;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	18d1      	adds	r1, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1c13      	adds	r3, r2, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	700b      	strb	r3, [r1, #0]
        ts >>= 8;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	0a14      	lsrs	r4, r2, #8
 800354a:	431c      	orrs	r4, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	0a1d      	lsrs	r5, r3, #8
 8003550:	603c      	str	r4, [r7, #0]
 8003552:	607d      	str	r5, [r7, #4]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b03      	cmp	r3, #3
 800355e:	dde8      	ble.n	8003532 <final_msg_set_ts+0x12>
    }
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800356c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800356c:	480d      	ldr	r0, [pc, #52]	@ (80035a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800356e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003570:	f7ff fd9e 	bl	80030b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003574:	480c      	ldr	r0, [pc, #48]	@ (80035a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003576:	490d      	ldr	r1, [pc, #52]	@ (80035ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003578:	4a0d      	ldr	r2, [pc, #52]	@ (80035b0 <LoopForever+0xe>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800357c:	e002      	b.n	8003584 <LoopCopyDataInit>

0800357e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003582:	3304      	adds	r3, #4

08003584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003588:	d3f9      	bcc.n	800357e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358a:	4a0a      	ldr	r2, [pc, #40]	@ (80035b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800358c:	4c0a      	ldr	r4, [pc, #40]	@ (80035b8 <LoopForever+0x16>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003590:	e001      	b.n	8003596 <LoopFillZerobss>

08003592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003594:	3204      	adds	r2, #4

08003596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003598:	d3fb      	bcc.n	8003592 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800359a:	f00c fc77 	bl	800fe8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800359e:	f7fe ff41 	bl	8002424 <main>

080035a2 <LoopForever>:

LoopForever:
    b LoopForever
 80035a2:	e7fe      	b.n	80035a2 <LoopForever>
  ldr   r0, =_estack
 80035a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80035a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035ac:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 80035b0:	0801236c 	.word	0x0801236c
  ldr r2, =_sbss
 80035b4:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 80035b8:	20001db8 	.word	0x20001db8

080035bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC1_COMP_IRQHandler>
	...

080035c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <HAL_Init+0x24>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_Init+0x24>)
 80035ca:	2110      	movs	r1, #16
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 f809 	bl	80035e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d6:	f7ff fa95 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	40022000 	.word	0x40022000

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f0:	4b14      	ldr	r3, [pc, #80]	@ (8003644 <HAL_InitTick+0x5c>)
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <HAL_InitTick+0x60>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	0019      	movs	r1, r3
 80035fa:	23fa      	movs	r3, #250	@ 0xfa
 80035fc:	0098      	lsls	r0, r3, #2
 80035fe:	f7fc fd9f 	bl	8000140 <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	0019      	movs	r1, r3
 8003606:	0020      	movs	r0, r4
 8003608:	f7fc fd9a 	bl	8000140 <__udivsi3>
 800360c:	0003      	movs	r3, r0
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fbaf 	bl	8003d72 <HAL_SYSTICK_Config>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e00f      	b.n	800363c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d80b      	bhi.n	800363a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	2301      	movs	r3, #1
 8003626:	425b      	negs	r3, r3
 8003628:	2200      	movs	r2, #0
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fb6c 	bl	8003d08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003630:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_InitTick+0x64>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b003      	add	sp, #12
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	20000018 	.word	0x20000018
 8003648:	2000007c 	.word	0x2000007c
 800364c:	20000078 	.word	0x20000078

08003650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_IncTick+0x1c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	001a      	movs	r2, r3
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_IncTick+0x20>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	18d2      	adds	r2, r2, r3
 8003660:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <HAL_IncTick+0x20>)
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	2000007c 	.word	0x2000007c
 8003670:	20000a68 	.word	0x20000a68

08003674 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_GetTick+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000a68 	.word	0x20000a68

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff fff0 	bl	8003674 <HAL_GetTick>
 8003694:	0003      	movs	r3, r0
 8003696:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_Delay+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	001a      	movs	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	f7ff ffe0 	bl	8003674 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	2000007c 	.word	0x2000007c

080036d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e125      	b.n	800393a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2234      	movs	r2, #52	@ 0x34
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff fa28 	bl	8002b5c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	2210      	movs	r2, #16
 8003712:	4013      	ands	r3, r2
 8003714:	d000      	beq.n	8003718 <HAL_ADC_Init+0x48>
 8003716:	e103      	b.n	8003920 <HAL_ADC_Init+0x250>
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d000      	beq.n	8003724 <HAL_ADC_Init+0x54>
 8003722:	e0fd      	b.n	8003920 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2204      	movs	r2, #4
 800372c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800372e:	d000      	beq.n	8003732 <HAL_ADC_Init+0x62>
 8003730:	e0f6      	b.n	8003920 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	4a83      	ldr	r2, [pc, #524]	@ (8003944 <HAL_ADC_Init+0x274>)
 8003738:	4013      	ands	r3, r2
 800373a:	2202      	movs	r2, #2
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2203      	movs	r2, #3
 800374a:	4013      	ands	r3, r2
 800374c:	2b01      	cmp	r3, #1
 800374e:	d112      	bne.n	8003776 <HAL_ADC_Init+0xa6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	2b01      	cmp	r3, #1
 800375c:	d009      	beq.n	8003772 <HAL_ADC_Init+0xa2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	401a      	ands	r2, r3
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	429a      	cmp	r2, r3
 8003770:	d101      	bne.n	8003776 <HAL_ADC_Init+0xa6>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_ADC_Init+0xa8>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2218      	movs	r2, #24
 8003784:	4393      	bics	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	0899      	lsrs	r1, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4964      	ldr	r1, [pc, #400]	@ (8003948 <HAL_ADC_Init+0x278>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7e1b      	ldrb	r3, [r3, #24]
 80037be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7e5b      	ldrb	r3, [r3, #25]
 80037c4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e9b      	ldrb	r3, [r3, #26]
 80037cc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80037ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <HAL_ADC_Init+0x10e>
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	015b      	lsls	r3, r3, #5
 80037dc:	e000      	b.n	80037e0 <HAL_ADC_Init+0x110>
 80037de:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80037e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80037e6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_Init+0x124>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e000      	b.n	80037f6 <HAL_ADC_Init+0x126>
 80037f4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80037f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2124      	movs	r1, #36	@ 0x24
 80037fc:	5c5b      	ldrb	r3, [r3, r1]
 80037fe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003800:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7edb      	ldrb	r3, [r3, #27]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d115      	bne.n	800383c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	7e9b      	ldrb	r3, [r3, #26]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2280      	movs	r2, #128	@ 0x80
 800381c:	0252      	lsls	r2, r2, #9
 800381e:	4313      	orrs	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	e00b      	b.n	800383c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	2220      	movs	r2, #32
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	2201      	movs	r2, #1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	23c2      	movs	r3, #194	@ 0xc2
 8003842:	33ff      	adds	r3, #255	@ 0xff
 8003844:	429a      	cmp	r2, r3
 8003846:	d007      	beq.n	8003858 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003850:	4313      	orrs	r3, r2
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	055b      	lsls	r3, r3, #21
 8003870:	429a      	cmp	r2, r3
 8003872:	d01b      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d017      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	2b02      	cmp	r3, #2
 8003882:	d013      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	2b03      	cmp	r3, #3
 800388a:	d00f      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00b      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	2b05      	cmp	r3, #5
 800389a:	d007      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d003      	beq.n	80038ac <HAL_ADC_Init+0x1dc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	2b07      	cmp	r3, #7
 80038aa:	d112      	bne.n	80038d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2107      	movs	r1, #7
 80038b8:	438a      	bics	r2, r1
 80038ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6959      	ldr	r1, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	2207      	movs	r2, #7
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_ADC_Init+0x27c>)
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10b      	bne.n	80038fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	2203      	movs	r2, #3
 80038ee:	4393      	bics	r3, r2
 80038f0:	2201      	movs	r2, #1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80038f8:	e01c      	b.n	8003934 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	2212      	movs	r2, #18
 8003900:	4393      	bics	r3, r2
 8003902:	2210      	movs	r2, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390e:	2201      	movs	r2, #1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003916:	230f      	movs	r3, #15
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800391e:	e009      	b.n	8003934 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	2210      	movs	r2, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800392c:	230f      	movs	r3, #15
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003934:	230f      	movs	r3, #15
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	fffffefd 	.word	0xfffffefd
 8003948:	fffe0219 	.word	0xfffe0219
 800394c:	833fffe7 	.word	0x833fffe7

08003950 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395a:	230f      	movs	r3, #15
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	055b      	lsls	r3, r3, #21
 800396e:	429a      	cmp	r2, r3
 8003970:	d011      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x46>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d00d      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x46>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	2b02      	cmp	r3, #2
 8003980:	d009      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x46>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	2b03      	cmp	r3, #3
 8003988:	d005      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x46>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	2b04      	cmp	r3, #4
 8003990:	d001      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x46>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2234      	movs	r2, #52	@ 0x34
 800399a:	5c9b      	ldrb	r3, [r3, r2]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x54>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0d0      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1f6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2234      	movs	r2, #52	@ 0x34
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2204      	movs	r2, #4
 80039b4:	4013      	ands	r3, r2
 80039b6:	d000      	beq.n	80039ba <HAL_ADC_ConfigChannel+0x6a>
 80039b8:	e0b4      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a64      	ldr	r2, [pc, #400]	@ (8003b50 <HAL_ADC_ConfigChannel+0x200>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x76>
 80039c4:	e082      	b.n	8003acc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	055b      	lsls	r3, r3, #21
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d037      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d033      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d02f      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d02b      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d027      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d023      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d01f      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d01b      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2107      	movs	r1, #7
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d012      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	438a      	bics	r2, r1
 8003a40:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6959      	ldr	r1, [r3, #20]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	401a      	ands	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d007      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x120>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b11      	cmp	r3, #17
 8003a66:	d003      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x120>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d163      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a70:	4b38      	ldr	r3, [pc, #224]	@ (8003b54 <HAL_ADC_ConfigChannel+0x204>)
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d009      	beq.n	8003a90 <HAL_ADC_ConfigChannel+0x140>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b11      	cmp	r3, #17
 8003a82:	d102      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x13a>
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	03db      	lsls	r3, r3, #15
 8003a88:	e004      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x144>
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	045b      	lsls	r3, r3, #17
 8003a8e:	e001      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x144>
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	4a2f      	ldr	r2, [pc, #188]	@ (8003b54 <HAL_ADC_ConfigChannel+0x204>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d14a      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_ADC_ConfigChannel+0x208>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	492d      	ldr	r1, [pc, #180]	@ (8003b5c <HAL_ADC_ConfigChannel+0x20c>)
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7fc fb49 	bl	8000140 <__udivsi3>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	0013      	movs	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003abc:	e002      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f9      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x16e>
 8003aca:	e035      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4099      	lsls	r1, r3
 8003ada:	000b      	movs	r3, r1
 8003adc:	43d9      	mvns	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d007      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x1ae>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b11      	cmp	r3, #17
 8003af4:	d003      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x1ae>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b12      	cmp	r3, #18
 8003afc:	d11c      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_ADC_ConfigChannel+0x204>)
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d007      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x1ca>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b11      	cmp	r3, #17
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x1c6>
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <HAL_ADC_ConfigChannel+0x210>)
 8003b14:	e002      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1cc>
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <HAL_ADC_ConfigChannel+0x214>)
 8003b18:	e000      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1cc>
 8003b1a:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <HAL_ADC_ConfigChannel+0x218>)
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b54 <HAL_ADC_ConfigChannel+0x204>)
 8003b1e:	400b      	ands	r3, r1
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e009      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	2220      	movs	r2, #32
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b30:	230f      	movs	r3, #15
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2234      	movs	r2, #52	@ 0x34
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	00001001 	.word	0x00001001
 8003b54:	40012708 	.word	0x40012708
 8003b58:	20000018 	.word	0x20000018
 8003b5c:	000f4240 	.word	0x000f4240
 8003b60:	ffbfffff 	.word	0xffbfffff
 8003b64:	feffffff 	.word	0xfeffffff
 8003b68:	ff7fffff 	.word	0xff7fffff

08003b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	0002      	movs	r2, r0
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b7e:	d809      	bhi.n	8003b94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	001a      	movs	r2, r3
 8003b86:	231f      	movs	r3, #31
 8003b88:	401a      	ands	r2, r3
 8003b8a:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <__NVIC_EnableIRQ+0x30>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4091      	lsls	r1, r2
 8003b90:	000a      	movs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
  }
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bb2:	d810      	bhi.n	8003bd6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	001a      	movs	r2, r3
 8003bba:	231f      	movs	r3, #31
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	4908      	ldr	r1, [pc, #32]	@ (8003be0 <__NVIC_DisableIRQ+0x40>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	0013      	movs	r3, r2
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bca:	f3bf 8f4f 	dsb	sy
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003bd0:	f3bf 8f6f 	isb	sy
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	e000e100 	.word	0xe000e100

08003be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	0002      	movs	r2, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bf8:	d828      	bhi.n	8003c4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb8 <__NVIC_SetPriority+0xd4>)
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	33c0      	adds	r3, #192	@ 0xc0
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	589b      	ldr	r3, [r3, r2]
 8003c0a:	1dfa      	adds	r2, r7, #7
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	0011      	movs	r1, r2
 8003c10:	2203      	movs	r2, #3
 8003c12:	400a      	ands	r2, r1
 8003c14:	00d2      	lsls	r2, r2, #3
 8003c16:	21ff      	movs	r1, #255	@ 0xff
 8003c18:	4091      	lsls	r1, r2
 8003c1a:	000a      	movs	r2, r1
 8003c1c:	43d2      	mvns	r2, r2
 8003c1e:	401a      	ands	r2, r3
 8003c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	22ff      	movs	r2, #255	@ 0xff
 8003c28:	401a      	ands	r2, r3
 8003c2a:	1dfb      	adds	r3, r7, #7
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	2303      	movs	r3, #3
 8003c32:	4003      	ands	r3, r0
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c38:	481f      	ldr	r0, [pc, #124]	@ (8003cb8 <__NVIC_SetPriority+0xd4>)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	430a      	orrs	r2, r1
 8003c44:	33c0      	adds	r3, #192	@ 0xc0
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c4a:	e031      	b.n	8003cb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <__NVIC_SetPriority+0xd8>)
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	0019      	movs	r1, r3
 8003c54:	230f      	movs	r3, #15
 8003c56:	400b      	ands	r3, r1
 8003c58:	3b08      	subs	r3, #8
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3306      	adds	r3, #6
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	3304      	adds	r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1dfa      	adds	r2, r7, #7
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	400a      	ands	r2, r1
 8003c70:	00d2      	lsls	r2, r2, #3
 8003c72:	21ff      	movs	r1, #255	@ 0xff
 8003c74:	4091      	lsls	r1, r2
 8003c76:	000a      	movs	r2, r1
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	22ff      	movs	r2, #255	@ 0xff
 8003c84:	401a      	ands	r2, r3
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	4003      	ands	r3, r0
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c94:	4809      	ldr	r0, [pc, #36]	@ (8003cbc <__NVIC_SetPriority+0xd8>)
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	001c      	movs	r4, r3
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	4023      	ands	r3, r4
 8003ca0:	3b08      	subs	r3, #8
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	3306      	adds	r3, #6
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	18c3      	adds	r3, r0, r3
 8003cac:	3304      	adds	r3, #4
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b003      	add	sp, #12
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	045b      	lsls	r3, r3, #17
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d301      	bcc.n	8003cd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e010      	b.n	8003cfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <SysTick_Config+0x44>)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425b      	negs	r3, r3
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff ff7c 	bl	8003be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <SysTick_Config+0x44>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf2:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <SysTick_Config+0x44>)
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	e000e010 	.word	0xe000e010

08003d08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	210f      	movs	r1, #15
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff ff5d 	bl	8003be4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	0002      	movs	r2, r0
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d3e:	1dfb      	adds	r3, r7, #7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff ff11 	bl	8003b6c <__NVIC_EnableIRQ>
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	0002      	movs	r2, r0
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d5e:	1dfb      	adds	r3, r7, #7
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff ff1b 	bl	8003ba0 <__NVIC_DisableIRQ>
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff ff9f 	bl	8003cc0 <SysTick_Config>
 8003d82:	0003      	movs	r3, r0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e036      	b.n	8003e10 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2221      	movs	r2, #33	@ 0x21
 8003da6:	2102      	movs	r1, #2
 8003da8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_DMA_Init+0x8c>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 f9c4 	bl	8004180 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2221      	movs	r2, #33	@ 0x21
 8003e02:	2101      	movs	r1, #1
 8003e04:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	ffffc00f 	.word	0xffffc00f

08003e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2317      	movs	r3, #23
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Start_IT+0x24>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e04f      	b.n	8003ee0 <HAL_DMA_Start_IT+0xc4>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	2101      	movs	r1, #1
 8003e46:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2221      	movs	r2, #33	@ 0x21
 8003e4c:	5c9b      	ldrb	r3, [r3, r2]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d13a      	bne.n	8003eca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2221      	movs	r2, #33	@ 0x21
 8003e58:	2102      	movs	r1, #2
 8003e5a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	438a      	bics	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f954 	bl	8004126 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	210e      	movs	r1, #14
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e00f      	b.n	8003eb8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	210a      	movs	r1, #10
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e007      	b.n	8003eda <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ed2:	2317      	movs	r3, #23
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003eda:	2317      	movs	r3, #23
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	781b      	ldrb	r3, [r3, #0]
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2221      	movs	r2, #33	@ 0x21
 8003ef4:	5c9b      	ldrb	r3, [r3, r2]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d008      	beq.n	8003f0e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2204      	movs	r2, #4
 8003f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e020      	b.n	8003f50 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	210e      	movs	r1, #14
 8003f1a:	438a      	bics	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	4091      	lsls	r1, r2
 8003f3a:	000a      	movs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2221      	movs	r2, #33	@ 0x21
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	210f      	movs	r1, #15
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2221      	movs	r2, #33	@ 0x21
 8003f6c:	5c9b      	ldrb	r3, [r3, r2]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d006      	beq.n	8003f82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e028      	b.n	8003fd4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	210e      	movs	r1, #14
 8003f8e:	438a      	bics	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	2101      	movs	r1, #1
 8003fac:	4091      	lsls	r1, r2
 8003fae:	000a      	movs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2221      	movs	r2, #33	@ 0x21
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	0010      	movs	r0, r2
 8003fd2:	4798      	blx	r3
    }
  }
  return status;
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	781b      	ldrb	r3, [r3, #0]
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	2204      	movs	r2, #4
 8004000:	409a      	lsls	r2, r3
 8004002:	0013      	movs	r3, r2
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	d024      	beq.n	8004054 <HAL_DMA_IRQHandler+0x72>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2204      	movs	r2, #4
 800400e:	4013      	ands	r3, r2
 8004010:	d020      	beq.n	8004054 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2220      	movs	r2, #32
 800401a:	4013      	ands	r3, r2
 800401c:	d107      	bne.n	800402e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2104      	movs	r1, #4
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	2104      	movs	r1, #4
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d100      	bne.n	8004048 <HAL_DMA_IRQHandler+0x66>
 8004046:	e06a      	b.n	800411e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	0010      	movs	r0, r2
 8004050:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004052:	e064      	b.n	800411e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2202      	movs	r2, #2
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4013      	ands	r3, r2
 8004062:	d02b      	beq.n	80040bc <HAL_DMA_IRQHandler+0xda>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	d027      	beq.n	80040bc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2220      	movs	r2, #32
 8004074:	4013      	ands	r3, r2
 8004076:	d10b      	bne.n	8004090 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	210a      	movs	r1, #10
 8004084:	438a      	bics	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2221      	movs	r2, #33	@ 0x21
 800408c:	2101      	movs	r1, #1
 800408e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	2102      	movs	r1, #2
 800409a:	4091      	lsls	r1, r2
 800409c:	000a      	movs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d036      	beq.n	800411e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	0010      	movs	r0, r2
 80040b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040ba:	e030      	b.n	800411e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2208      	movs	r2, #8
 80040c2:	409a      	lsls	r2, r3
 80040c4:	0013      	movs	r3, r2
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	d028      	beq.n	800411e <HAL_DMA_IRQHandler+0x13c>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2208      	movs	r2, #8
 80040d0:	4013      	ands	r3, r2
 80040d2:	d024      	beq.n	800411e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	210e      	movs	r1, #14
 80040e0:	438a      	bics	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	2101      	movs	r1, #1
 80040ee:	4091      	lsls	r1, r2
 80040f0:	000a      	movs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2221      	movs	r2, #33	@ 0x21
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	0010      	movs	r0, r2
 800411a:	4798      	blx	r3
    }
  }
}
 800411c:	e7ff      	b.n	800411e <HAL_DMA_IRQHandler+0x13c>
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}

08004126 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	2101      	movs	r1, #1
 800413e:	4091      	lsls	r1, r2
 8004140:	000a      	movs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b10      	cmp	r3, #16
 8004152:	d108      	bne.n	8004166 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004164:	e007      	b.n	8004176 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a08      	ldr	r2, [pc, #32]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x30>)
 800418e:	4694      	mov	ip, r2
 8004190:	4463      	add	r3, ip
 8004192:	2114      	movs	r1, #20
 8004194:	0018      	movs	r0, r3
 8004196:	f7fb ffd3 	bl	8000140 <__udivsi3>
 800419a:	0003      	movs	r3, r0
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a03      	ldr	r2, [pc, #12]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x34>)
 80041a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80041a8:	46c0      	nop			@ (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	bffdfff8 	.word	0xbffdfff8
 80041b4:	40020000 	.word	0x40020000

080041b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c6:	e155      	b.n	8004474 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4091      	lsls	r1, r2
 80041d2:	000a      	movs	r2, r1
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d100      	bne.n	80041e0 <HAL_GPIO_Init+0x28>
 80041de:	e146      	b.n	800446e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d005      	beq.n	80041f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d130      	bne.n	800425a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	409a      	lsls	r2, r3
 8004206:	0013      	movs	r3, r2
 8004208:	43da      	mvns	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	0013      	movs	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422e:	2201      	movs	r2, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	409a      	lsls	r2, r3
 8004234:	0013      	movs	r3, r2
 8004236:	43da      	mvns	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	2201      	movs	r2, #1
 8004246:	401a      	ands	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	4013      	ands	r3, r2
 8004262:	2b03      	cmp	r3, #3
 8004264:	d017      	beq.n	8004296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	409a      	lsls	r2, r3
 8004274:	0013      	movs	r3, r2
 8004276:	43da      	mvns	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	0013      	movs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	4013      	ands	r3, r2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d123      	bne.n	80042ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3208      	adds	r2, #8
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	58d3      	ldr	r3, [r2, r3]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2207      	movs	r2, #7
 80042b4:	4013      	ands	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	220f      	movs	r2, #15
 80042ba:	409a      	lsls	r2, r3
 80042bc:	0013      	movs	r3, r2
 80042be:	43da      	mvns	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2107      	movs	r1, #7
 80042ce:	400b      	ands	r3, r1
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	6939      	ldr	r1, [r7, #16]
 80042e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	2203      	movs	r2, #3
 80042f6:	409a      	lsls	r2, r3
 80042f8:	0013      	movs	r3, r2
 80042fa:	43da      	mvns	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2203      	movs	r2, #3
 8004308:	401a      	ands	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	0013      	movs	r3, r2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	23c0      	movs	r3, #192	@ 0xc0
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	4013      	ands	r3, r2
 8004328:	d100      	bne.n	800432c <HAL_GPIO_Init+0x174>
 800432a:	e0a0      	b.n	800446e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432c:	4b57      	ldr	r3, [pc, #348]	@ (800448c <HAL_GPIO_Init+0x2d4>)
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	4b56      	ldr	r3, [pc, #344]	@ (800448c <HAL_GPIO_Init+0x2d4>)
 8004332:	2101      	movs	r1, #1
 8004334:	430a      	orrs	r2, r1
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	4b54      	ldr	r3, [pc, #336]	@ (800448c <HAL_GPIO_Init+0x2d4>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2201      	movs	r2, #1
 800433e:	4013      	ands	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004344:	4a52      	ldr	r2, [pc, #328]	@ (8004490 <HAL_GPIO_Init+0x2d8>)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	589b      	ldr	r3, [r3, r2]
 8004350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2203      	movs	r2, #3
 8004356:	4013      	ands	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	409a      	lsls	r2, r3
 800435e:	0013      	movs	r3, r2
 8004360:	43da      	mvns	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	2390      	movs	r3, #144	@ 0x90
 800436c:	05db      	lsls	r3, r3, #23
 800436e:	429a      	cmp	r2, r3
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x1ee>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a47      	ldr	r2, [pc, #284]	@ (8004494 <HAL_GPIO_Init+0x2dc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x1ea>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_GPIO_Init+0x2e0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x1e6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a45      	ldr	r2, [pc, #276]	@ (800449c <HAL_GPIO_Init+0x2e4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x1e2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a44      	ldr	r2, [pc, #272]	@ (80044a0 <HAL_GPIO_Init+0x2e8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x1de>
 8004392:	2304      	movs	r3, #4
 8004394:	e008      	b.n	80043a8 <HAL_GPIO_Init+0x1f0>
 8004396:	2305      	movs	r3, #5
 8004398:	e006      	b.n	80043a8 <HAL_GPIO_Init+0x1f0>
 800439a:	2303      	movs	r3, #3
 800439c:	e004      	b.n	80043a8 <HAL_GPIO_Init+0x1f0>
 800439e:	2302      	movs	r3, #2
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_Init+0x1f0>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_GPIO_Init+0x1f0>
 80043a6:	2300      	movs	r3, #0
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	2103      	movs	r1, #3
 80043ac:	400a      	ands	r2, r1
 80043ae:	0092      	lsls	r2, r2, #2
 80043b0:	4093      	lsls	r3, r2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043b8:	4935      	ldr	r1, [pc, #212]	@ (8004490 <HAL_GPIO_Init+0x2d8>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	3302      	adds	r3, #2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c6:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43da      	mvns	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	035b      	lsls	r3, r3, #13
 80043de:	4013      	ands	r3, r2
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043ea:	4b2e      	ldr	r3, [pc, #184]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043f0:	4b2c      	ldr	r3, [pc, #176]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	039b      	lsls	r3, r3, #14
 8004408:	4013      	ands	r3, r2
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004414:	4b23      	ldr	r3, [pc, #140]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800441a:	4b22      	ldr	r3, [pc, #136]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43da      	mvns	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	4013      	ands	r3, r2
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800443e:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004444:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	43da      	mvns	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	025b      	lsls	r3, r3, #9
 800445c:	4013      	ands	r3, r2
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004468:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <HAL_GPIO_Init+0x2ec>)
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3301      	adds	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	40da      	lsrs	r2, r3
 800447c:	1e13      	subs	r3, r2, #0
 800447e:	d000      	beq.n	8004482 <HAL_GPIO_Init+0x2ca>
 8004480:	e6a2      	b.n	80041c8 <HAL_GPIO_Init+0x10>
  } 
}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b006      	add	sp, #24
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40010000 	.word	0x40010000
 8004494:	48000400 	.word	0x48000400
 8004498:	48000800 	.word	0x48000800
 800449c:	48000c00 	.word	0x48000c00
 80044a0:	48001000 	.word	0x48001000
 80044a4:	40010400 	.word	0x40010400

080044a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	000a      	movs	r2, r1
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	1cba      	adds	r2, r7, #2
 80044bc:	8812      	ldrh	r2, [r2, #0]
 80044be:	4013      	ands	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80044c2:	230f      	movs	r3, #15
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e003      	b.n	80044d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044cc:	230f      	movs	r3, #15
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044d4:	230f      	movs	r3, #15
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	781b      	ldrb	r3, [r3, #0]
  }
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b004      	add	sp, #16
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	0008      	movs	r0, r1
 80044ec:	0011      	movs	r1, r2
 80044ee:	1cbb      	adds	r3, r7, #2
 80044f0:	1c02      	adds	r2, r0, #0
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	1c7b      	adds	r3, r7, #1
 80044f6:	1c0a      	adds	r2, r1, #0
 80044f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044fa:	1c7b      	adds	r3, r7, #1
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004502:	1cbb      	adds	r3, r7, #2
 8004504:	881a      	ldrh	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800450a:	e003      	b.n	8004514 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800450c:	1cbb      	adds	r3, r7, #2
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	0002      	movs	r2, r0
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	1dba      	adds	r2, r7, #6
 800452e:	8812      	ldrh	r2, [r2, #0]
 8004530:	4013      	ands	r3, r2
 8004532:	d008      	beq.n	8004546 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004536:	1dba      	adds	r2, r7, #6
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800453c:	1dbb      	adds	r3, r7, #6
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	0018      	movs	r0, r3
 8004542:	f00a fe7d 	bl	800f240 <HAL_GPIO_EXTI_Callback>
  }
}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	40010400 	.word	0x40010400

08004554 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e0e4      	b.n	8004730 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a73      	ldr	r2, [pc, #460]	@ (8004738 <HAL_PCD_Init+0x1e4>)
 800456a:	5c9b      	ldrb	r3, [r3, r2]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	23a4      	movs	r3, #164	@ 0xa4
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	2100      	movs	r1, #0
 800457a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f009 f902 	bl	800d788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a6c      	ldr	r2, [pc, #432]	@ (8004738 <HAL_PCD_Init+0x1e4>)
 8004588:	2103      	movs	r1, #3
 800458a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f005 f929 	bl	80097e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004596:	230f      	movs	r3, #15
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e047      	b.n	8004630 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045a0:	200f      	movs	r0, #15
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	0013      	movs	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	18cb      	adds	r3, r1, r3
 80045b2:	3311      	adds	r3, #17
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045b8:	183b      	adds	r3, r7, r0
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	0013      	movs	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	18cb      	adds	r3, r1, r3
 80045c8:	3310      	adds	r3, #16
 80045ca:	183a      	adds	r2, r7, r0
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045d0:	183b      	adds	r3, r7, r0
 80045d2:	781a      	ldrb	r2, [r3, #0]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	0013      	movs	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	18cb      	adds	r3, r1, r3
 80045e0:	3313      	adds	r3, #19
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045e6:	183b      	adds	r3, r7, r0
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	0013      	movs	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	189b      	adds	r3, r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	18cb      	adds	r3, r1, r3
 80045f6:	3320      	adds	r3, #32
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045fc:	183b      	adds	r3, r7, r0
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	0013      	movs	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	189b      	adds	r3, r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	18cb      	adds	r3, r1, r3
 800460c:	3324      	adds	r3, #36	@ 0x24
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004612:	183b      	adds	r3, r7, r0
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	0013      	movs	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	189b      	adds	r3, r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	2200      	movs	r2, #0
 8004624:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	183b      	adds	r3, r7, r0
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	183b      	adds	r3, r7, r0
 800462c:	3201      	adds	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	791b      	ldrb	r3, [r3, #4]
 8004634:	210f      	movs	r1, #15
 8004636:	187a      	adds	r2, r7, r1
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3b0      	bcc.n	80045a0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e056      	b.n	80046f4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004646:	240f      	movs	r4, #15
 8004648:	193b      	adds	r3, r7, r4
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	2352      	movs	r3, #82	@ 0x52
 8004650:	33ff      	adds	r3, #255	@ 0xff
 8004652:	0019      	movs	r1, r3
 8004654:	0013      	movs	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	189b      	adds	r3, r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	18c3      	adds	r3, r0, r3
 800465e:	185b      	adds	r3, r3, r1
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004664:	193b      	adds	r3, r7, r4
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	23a8      	movs	r3, #168	@ 0xa8
 800466c:	0059      	lsls	r1, r3, #1
 800466e:	0013      	movs	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	189b      	adds	r3, r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	18c3      	adds	r3, r0, r3
 8004678:	185b      	adds	r3, r3, r1
 800467a:	193a      	adds	r2, r7, r4
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004680:	193b      	adds	r3, r7, r4
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	2354      	movs	r3, #84	@ 0x54
 8004688:	33ff      	adds	r3, #255	@ 0xff
 800468a:	0019      	movs	r1, r3
 800468c:	0013      	movs	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	189b      	adds	r3, r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	18c3      	adds	r3, r0, r3
 8004696:	185b      	adds	r3, r3, r1
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800469c:	193b      	adds	r3, r7, r4
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	23b0      	movs	r3, #176	@ 0xb0
 80046a4:	0059      	lsls	r1, r3, #1
 80046a6:	0013      	movs	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	18c3      	adds	r3, r0, r3
 80046b0:	185b      	adds	r3, r3, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046b6:	193b      	adds	r3, r7, r4
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	23b2      	movs	r3, #178	@ 0xb2
 80046be:	0059      	lsls	r1, r3, #1
 80046c0:	0013      	movs	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	18c3      	adds	r3, r0, r3
 80046ca:	185b      	adds	r3, r3, r1
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046d0:	193b      	adds	r3, r7, r4
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	23b4      	movs	r3, #180	@ 0xb4
 80046d8:	0059      	lsls	r1, r3, #1
 80046da:	0013      	movs	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	18c3      	adds	r3, r0, r3
 80046e4:	185b      	adds	r3, r3, r1
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	3201      	adds	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	791b      	ldrb	r3, [r3, #4]
 80046f8:	220f      	movs	r2, #15
 80046fa:	18ba      	adds	r2, r7, r2
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3a1      	bcc.n	8004646 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	f005 f886 	bl	800981c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a07      	ldr	r2, [pc, #28]	@ (8004738 <HAL_PCD_Init+0x1e4>)
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7a9b      	ldrb	r3, [r3, #10]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d103      	bne.n	800472e <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f001 fd1f 	bl	800616c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b005      	add	sp, #20
 8004736:	bd90      	pop	{r4, r7, pc}
 8004738:	00000291 	.word	0x00000291

0800473c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	23a4      	movs	r3, #164	@ 0xa4
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_PCD_Start+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e014      	b.n	800477e <HAL_PCD_Start+0x42>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	23a4      	movs	r3, #164	@ 0xa4
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	2101      	movs	r1, #1
 800475c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	0018      	movs	r0, r3
 8004764:	f005 f82a 	bl	80097bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0018      	movs	r0, r3
 800476e:	f007 f81f 	bl	800b7b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	23a4      	movs	r3, #164	@ 0xa4
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	2100      	movs	r1, #0
 800477a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0018      	movs	r0, r3
 8004796:	f007 f821 	bl	800b7dc <USB_ReadInterrupts>
 800479a:	0003      	movs	r3, r0
 800479c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	4013      	ands	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fb60 	bl	8004e70 <PCD_EP_ISR_Handler>

    return;
 80047b0:	e11d      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4013      	ands	r3, r2
 80047ba:	d015      	beq.n	80047e8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2244      	movs	r2, #68	@ 0x44
 80047c2:	5a9b      	ldrh	r3, [r3, r2]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	498a      	ldr	r1, [pc, #552]	@ (80049f4 <HAL_PCD_IRQHandler+0x26c>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	b291      	uxth	r1, r2
 80047d0:	2244      	movs	r2, #68	@ 0x44
 80047d2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f009 f861 	bl	800d89e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2100      	movs	r1, #0
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 f915 	bl	8004a10 <HAL_PCD_SetAddress>

    return;
 80047e6:	e102      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	4013      	ands	r3, r2
 80047f0:	d00c      	beq.n	800480c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2244      	movs	r2, #68	@ 0x44
 80047f8:	5a9b      	ldrh	r3, [r3, r2]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	497d      	ldr	r1, [pc, #500]	@ (80049f8 <HAL_PCD_IRQHandler+0x270>)
 8004802:	400a      	ands	r2, r1
 8004804:	b291      	uxth	r1, r2
 8004806:	2244      	movs	r2, #68	@ 0x44
 8004808:	5299      	strh	r1, [r3, r2]

    return;
 800480a:	e0f0      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	4013      	ands	r3, r2
 8004814:	d00c      	beq.n	8004830 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2244      	movs	r2, #68	@ 0x44
 800481c:	5a9b      	ldrh	r3, [r3, r2]
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4975      	ldr	r1, [pc, #468]	@ (80049fc <HAL_PCD_IRQHandler+0x274>)
 8004826:	400a      	ands	r2, r1
 8004828:	b291      	uxth	r1, r2
 800482a:	2244      	movs	r2, #68	@ 0x44
 800482c:	5299      	strh	r1, [r3, r2]

    return;
 800482e:	e0de      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	015b      	lsls	r3, r3, #5
 8004836:	4013      	ands	r3, r2
 8004838:	d038      	beq.n	80048ac <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2240      	movs	r2, #64	@ 0x40
 8004840:	5a9b      	ldrh	r3, [r3, r2]
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2104      	movs	r1, #4
 800484a:	438a      	bics	r2, r1
 800484c:	b291      	uxth	r1, r2
 800484e:	2240      	movs	r2, #64	@ 0x40
 8004850:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	5a9b      	ldrh	r3, [r3, r2]
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2108      	movs	r1, #8
 8004862:	438a      	bics	r2, r1
 8004864:	b291      	uxth	r1, r2
 8004866:	2240      	movs	r2, #64	@ 0x40
 8004868:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	23b2      	movs	r3, #178	@ 0xb2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d109      	bne.n	800488a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	23b2      	movs	r3, #178	@ 0xb2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	2100      	movs	r1, #0
 800487e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2100      	movs	r1, #0
 8004884:	0018      	movs	r0, r3
 8004886:	f001 fc9b 	bl	80061c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f009 f847 	bl	800d920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2244      	movs	r2, #68	@ 0x44
 8004898:	5a9b      	ldrh	r3, [r3, r2]
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4957      	ldr	r1, [pc, #348]	@ (8004a00 <HAL_PCD_IRQHandler+0x278>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	b291      	uxth	r1, r2
 80048a6:	2244      	movs	r2, #68	@ 0x44
 80048a8:	5299      	strh	r1, [r3, r2]

    return;
 80048aa:	e0a0      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4013      	ands	r3, r2
 80048b4:	d028      	beq.n	8004908 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2240      	movs	r2, #64	@ 0x40
 80048bc:	5a9b      	ldrh	r3, [r3, r2]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2108      	movs	r1, #8
 80048c6:	430a      	orrs	r2, r1
 80048c8:	b291      	uxth	r1, r2
 80048ca:	2240      	movs	r2, #64	@ 0x40
 80048cc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2244      	movs	r2, #68	@ 0x44
 80048d4:	5a9b      	ldrh	r3, [r3, r2]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4949      	ldr	r1, [pc, #292]	@ (8004a04 <HAL_PCD_IRQHandler+0x27c>)
 80048de:	400a      	ands	r2, r1
 80048e0:	b291      	uxth	r1, r2
 80048e2:	2244      	movs	r2, #68	@ 0x44
 80048e4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2240      	movs	r2, #64	@ 0x40
 80048ec:	5a9b      	ldrh	r3, [r3, r2]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2104      	movs	r1, #4
 80048f6:	430a      	orrs	r2, r1
 80048f8:	b291      	uxth	r1, r2
 80048fa:	2240      	movs	r2, #64	@ 0x40
 80048fc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f008 fff1 	bl	800d8e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004906:	e072      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2280      	movs	r2, #128	@ 0x80
 800490c:	4013      	ands	r3, r2
 800490e:	d046      	beq.n	800499e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2244      	movs	r2, #68	@ 0x44
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2180      	movs	r1, #128	@ 0x80
 8004920:	438a      	bics	r2, r1
 8004922:	b291      	uxth	r1, r2
 8004924:	2244      	movs	r2, #68	@ 0x44
 8004926:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	23b2      	movs	r3, #178	@ 0xb2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d12f      	bne.n	8004994 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2240      	movs	r2, #64	@ 0x40
 800493a:	5a9b      	ldrh	r3, [r3, r2]
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2104      	movs	r1, #4
 8004944:	430a      	orrs	r2, r1
 8004946:	b291      	uxth	r1, r2
 8004948:	2240      	movs	r2, #64	@ 0x40
 800494a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2240      	movs	r2, #64	@ 0x40
 8004952:	5a9b      	ldrh	r3, [r3, r2]
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2108      	movs	r1, #8
 800495c:	430a      	orrs	r2, r1
 800495e:	b291      	uxth	r1, r2
 8004960:	2240      	movs	r2, #64	@ 0x40
 8004962:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	23b2      	movs	r3, #178	@ 0xb2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	2101      	movs	r1, #1
 800496c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2254      	movs	r2, #84	@ 0x54
 8004974:	5a9b      	ldrh	r3, [r3, r2]
 8004976:	b29b      	uxth	r3, r3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	223c      	movs	r2, #60	@ 0x3c
 800497c:	4013      	ands	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	23b3      	movs	r3, #179	@ 0xb3
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2101      	movs	r1, #1
 800498c:	0018      	movs	r0, r3
 800498e:	f001 fc17 	bl	80061c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004992:	e02c      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0018      	movs	r0, r3
 8004998:	f008 ffa6 	bl	800d8e8 <HAL_PCD_SuspendCallback>
    return;
 800499c:	e027      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4013      	ands	r3, r2
 80049a6:	d010      	beq.n	80049ca <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2244      	movs	r2, #68	@ 0x44
 80049ae:	5a9b      	ldrh	r3, [r3, r2]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4914      	ldr	r1, [pc, #80]	@ (8004a08 <HAL_PCD_IRQHandler+0x280>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	b291      	uxth	r1, r2
 80049bc:	2244      	movs	r2, #68	@ 0x44
 80049be:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f008 ff5c 	bl	800d880 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80049c8:	e011      	b.n	80049ee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00c      	beq.n	80049ee <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2244      	movs	r2, #68	@ 0x44
 80049da:	5a9b      	ldrh	r3, [r3, r2]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	490a      	ldr	r1, [pc, #40]	@ (8004a0c <HAL_PCD_IRQHandler+0x284>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	b291      	uxth	r1, r2
 80049e8:	2244      	movs	r2, #68	@ 0x44
 80049ea:	5299      	strh	r1, [r3, r2]

    return;
 80049ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b004      	add	sp, #16
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	fffffbff 	.word	0xfffffbff
 80049f8:	ffffbfff 	.word	0xffffbfff
 80049fc:	ffffdfff 	.word	0xffffdfff
 8004a00:	ffffefff 	.word	0xffffefff
 8004a04:	fffff7ff 	.word	0xfffff7ff
 8004a08:	fffffdff 	.word	0xfffffdff
 8004a0c:	fffffeff 	.word	0xfffffeff

08004a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	000a      	movs	r2, r1
 8004a1a:	1cfb      	adds	r3, r7, #3
 8004a1c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	23a4      	movs	r3, #164	@ 0xa4
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_PCD_SetAddress+0x1e>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e016      	b.n	8004a5c <HAL_PCD_SetAddress+0x4c>
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	23a4      	movs	r3, #164	@ 0xa4
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	2101      	movs	r1, #1
 8004a36:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1cfa      	adds	r2, r7, #3
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	1cfb      	adds	r3, r7, #3
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	0019      	movs	r1, r3
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	f006 fe9c 	bl	800b788 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	23a4      	movs	r3, #164	@ 0xa4
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	2100      	movs	r1, #0
 8004a58:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	000c      	movs	r4, r1
 8004a6e:	0010      	movs	r0, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	1cfb      	adds	r3, r7, #3
 8004a74:	1c22      	adds	r2, r4, #0
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	003b      	movs	r3, r7
 8004a7a:	1c02      	adds	r2, r0, #0
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	1cbb      	adds	r3, r7, #2
 8004a80:	1c0a      	adds	r2, r1, #0
 8004a82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a84:	230b      	movs	r3, #11
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a8c:	1cfb      	adds	r3, r7, #3
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da0f      	bge.n	8004ab6 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a96:	1cfb      	adds	r3, r7, #3
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	3310      	adds	r3, #16
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	18d3      	adds	r3, r2, r3
 8004aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	705a      	strb	r2, [r3, #1]
 8004ab4:	e00f      	b.n	8004ad6 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab6:	1cfb      	adds	r3, r7, #3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2207      	movs	r2, #7
 8004abc:	401a      	ands	r2, r3
 8004abe:	0013      	movs	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	3351      	adds	r3, #81	@ 0x51
 8004ac8:	33ff      	adds	r3, #255	@ 0xff
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad6:	1cfb      	adds	r3, r7, #3
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2207      	movs	r2, #7
 8004adc:	4013      	ands	r3, r2
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ae4:	003b      	movs	r3, r7
 8004ae6:	881a      	ldrh	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1cba      	adds	r2, r7, #2
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004af4:	1cbb      	adds	r3, r7, #2
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d102      	bne.n	8004b02 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	23a4      	movs	r3, #164	@ 0xa4
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	5cd3      	ldrb	r3, [r2, r3]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_PCD_EP_Open+0xae>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e013      	b.n	8004b3a <HAL_PCD_EP_Open+0xd6>
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	23a4      	movs	r3, #164	@ 0xa4
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	2101      	movs	r1, #1
 8004b1a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	0011      	movs	r1, r2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f004 fe95 	bl	8009854 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	23a4      	movs	r3, #164	@ 0xa4
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	2100      	movs	r1, #0
 8004b32:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004b34:	230b      	movs	r3, #11
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	781b      	ldrb	r3, [r3, #0]
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b005      	add	sp, #20
 8004b40:	bd90      	pop	{r4, r7, pc}

08004b42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	000a      	movs	r2, r1
 8004b4c:	1cfb      	adds	r3, r7, #3
 8004b4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b50:	1cfb      	adds	r3, r7, #3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da0f      	bge.n	8004b7a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	1cfb      	adds	r3, r7, #3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2207      	movs	r2, #7
 8004b60:	401a      	ands	r2, r3
 8004b62:	0013      	movs	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	3310      	adds	r3, #16
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	18d3      	adds	r3, r2, r3
 8004b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	705a      	strb	r2, [r3, #1]
 8004b78:	e00f      	b.n	8004b9a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b7a:	1cfb      	adds	r3, r7, #3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2207      	movs	r2, #7
 8004b80:	401a      	ands	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	3351      	adds	r3, #81	@ 0x51
 8004b8c:	33ff      	adds	r3, #255	@ 0xff
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	18d3      	adds	r3, r2, r3
 8004b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9a:	1cfb      	adds	r3, r7, #3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2207      	movs	r2, #7
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	23a4      	movs	r3, #164	@ 0xa4
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_EP_Close+0x76>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e011      	b.n	8004bdc <HAL_PCD_EP_Close+0x9a>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	23a4      	movs	r3, #164	@ 0xa4
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f005 f9ea 	bl	8009fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	23a4      	movs	r3, #164	@ 0xa4
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	200b      	movs	r0, #11
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	1c0a      	adds	r2, r1, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf8:	0001      	movs	r1, r0
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2207      	movs	r2, #7
 8004c00:	401a      	ands	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	3351      	adds	r3, #81	@ 0x51
 8004c0c:	33ff      	adds	r3, #255	@ 0xff
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2207      	movs	r2, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f005 fb6e 	bl	800a324 <USB_EPStartXfer>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	000a      	movs	r2, r1
 8004c5c:	1cfb      	adds	r3, r7, #3
 8004c5e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c60:	1cfb      	adds	r3, r7, #3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2207      	movs	r2, #7
 8004c66:	401a      	ands	r2, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	23b6      	movs	r3, #182	@ 0xb6
 8004c6c:	0059      	lsls	r1, r3, #1
 8004c6e:	0013      	movs	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	18c3      	adds	r3, r0, r3
 8004c78:	185b      	adds	r3, r3, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	200b      	movs	r0, #11
 8004c92:	183b      	adds	r3, r7, r0
 8004c94:	1c0a      	adds	r2, r1, #0
 8004c96:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c98:	183b      	adds	r3, r7, r0
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3310      	adds	r3, #16
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	18d3      	adds	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2224      	movs	r2, #36	@ 0x24
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2207      	movs	r2, #7
 8004cdc:	4013      	ands	r3, r2
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f005 fb19 	bl	800a324 <USB_EPStartXfer>

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b006      	add	sp, #24
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	000a      	movs	r2, r1
 8004d06:	1cfb      	adds	r3, r7, #3
 8004d08:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d0a:	1cfb      	adds	r3, r7, #3
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2207      	movs	r2, #7
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	7912      	ldrb	r2, [r2, #4]
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e046      	b.n	8004dac <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d1e:	1cfb      	adds	r3, r7, #3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da0f      	bge.n	8004d48 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	1cfb      	adds	r3, r7, #3
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	401a      	ands	r2, r3
 8004d30:	0013      	movs	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	189b      	adds	r3, r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	3310      	adds	r3, #16
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	705a      	strb	r2, [r3, #1]
 8004d46:	e00d      	b.n	8004d64 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d48:	1cfb      	adds	r3, r7, #3
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	3351      	adds	r3, #81	@ 0x51
 8004d56:	33ff      	adds	r3, #255	@ 0xff
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	18d3      	adds	r3, r2, r3
 8004d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6a:	1cfb      	adds	r3, r7, #3
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2207      	movs	r2, #7
 8004d70:	4013      	ands	r3, r2
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	23a4      	movs	r3, #164	@ 0xa4
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_PCD_EP_SetStall+0x8c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e011      	b.n	8004dac <HAL_PCD_EP_SetStall+0xb0>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	23a4      	movs	r3, #164	@ 0xa4
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	2101      	movs	r1, #1
 8004d90:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f006 fbf2 	bl	800b584 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	23a4      	movs	r3, #164	@ 0xa4
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	2100      	movs	r1, #0
 8004da8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b004      	add	sp, #16
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	000a      	movs	r2, r1
 8004dbe:	1cfb      	adds	r3, r7, #3
 8004dc0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dc2:	1cfb      	adds	r3, r7, #3
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	220f      	movs	r2, #15
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	7912      	ldrb	r2, [r2, #4]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e048      	b.n	8004e68 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dd6:	1cfb      	adds	r3, r7, #3
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	da0f      	bge.n	8004e00 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de0:	1cfb      	adds	r3, r7, #3
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2207      	movs	r2, #7
 8004de6:	401a      	ands	r2, r3
 8004de8:	0013      	movs	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3310      	adds	r3, #16
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	705a      	strb	r2, [r3, #1]
 8004dfe:	e00f      	b.n	8004e20 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e00:	1cfb      	adds	r3, r7, #3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2207      	movs	r2, #7
 8004e06:	401a      	ands	r2, r3
 8004e08:	0013      	movs	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3351      	adds	r3, #81	@ 0x51
 8004e12:	33ff      	adds	r3, #255	@ 0xff
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e26:	1cfb      	adds	r3, r7, #3
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	23a4      	movs	r3, #164	@ 0xa4
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_ClrStall+0x90>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e011      	b.n	8004e68 <HAL_PCD_EP_ClrStall+0xb4>
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	23a4      	movs	r3, #164	@ 0xa4
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f006 fbe4 	bl	800b624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	23a4      	movs	r3, #164	@ 0xa4
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	2100      	movs	r1, #0
 8004e64:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b004      	add	sp, #16
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e70:	b5b0      	push	{r4, r5, r7, lr}
 8004e72:	b096      	sub	sp, #88	@ 0x58
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e78:	f000 fbea 	bl	8005650 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2048      	movs	r0, #72	@ 0x48
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	2144      	movs	r1, #68	@ 0x44
 8004e86:	5a52      	ldrh	r2, [r2, r1]
 8004e88:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e8a:	183b      	adds	r3, r7, r0
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	244f      	movs	r4, #79	@ 0x4f
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	210f      	movs	r1, #15
 8004e96:	400a      	ands	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d000      	beq.n	8004ea4 <PCD_EP_ISR_Handler+0x34>
 8004ea2:	e18d      	b.n	80051c0 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ea4:	183b      	adds	r3, r7, r0
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d152      	bne.n	8004f54 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	200e      	movs	r0, #14
 8004eb8:	183b      	adds	r3, r7, r0
 8004eba:	49ba      	ldr	r1, [pc, #744]	@ (80051a4 <PCD_EP_ISR_Handler+0x334>)
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	183a      	adds	r2, r7, r0
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	49b7      	ldr	r1, [pc, #732]	@ (80051a8 <PCD_EP_ISR_Handler+0x338>)
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2250      	movs	r2, #80	@ 0x50
 8004edc:	5a9b      	ldrh	r3, [r3, r2]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	18d2      	adds	r2, r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	18d3      	adds	r3, r2, r3
 8004ef0:	4aae      	ldr	r2, [pc, #696]	@ (80051ac <PCD_EP_ISR_Handler+0x33c>)
 8004ef2:	4694      	mov	ip, r2
 8004ef4:	4463      	add	r3, ip
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	059b      	lsls	r3, r3, #22
 8004efa:	0d9a      	lsrs	r2, r3, #22
 8004efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	18d2      	adds	r2, r2, r3
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2100      	movs	r1, #0
 8004f12:	0018      	movs	r0, r3
 8004f14:	f008 fc96 	bl	800d844 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7b1b      	ldrb	r3, [r3, #12]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <PCD_EP_ISR_Handler+0xb6>
 8004f22:	f000 fb95 	bl	8005650 <PCD_EP_ISR_Handler+0x7e0>
 8004f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <PCD_EP_ISR_Handler+0xc2>
 8004f2e:	f000 fb8f 	bl	8005650 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7b1b      	ldrb	r3, [r3, #12]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2280      	movs	r2, #128	@ 0x80
 8004f3a:	4252      	negs	r2, r2
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	0011      	movs	r1, r2
 8004f46:	224c      	movs	r2, #76	@ 0x4c
 8004f48:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	731a      	strb	r2, [r3, #12]
 8004f50:	f000 fb7e 	bl	8005650 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3351      	adds	r3, #81	@ 0x51
 8004f58:	33ff      	adds	r3, #255	@ 0xff
 8004f5a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	214c      	movs	r1, #76	@ 0x4c
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	4013      	ands	r3, r2
 8004f72:	d037      	beq.n	8004fe4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2250      	movs	r2, #80	@ 0x50
 8004f7a:	5a9b      	ldrh	r3, [r3, r2]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	001a      	movs	r2, r3
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	18d2      	adds	r2, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	4a88      	ldr	r2, [pc, #544]	@ (80051b0 <PCD_EP_ISR_Handler+0x340>)
 8004f90:	4694      	mov	ip, r2
 8004f92:	4463      	add	r3, ip
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	059b      	lsls	r3, r3, #22
 8004f98:	0d9a      	lsrs	r2, r3, #22
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	22a6      	movs	r2, #166	@ 0xa6
 8004fa6:	0092      	lsls	r2, r2, #2
 8004fa8:	1899      	adds	r1, r3, r2
 8004faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f006 fc6a 	bl	800b88c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	2010      	movs	r0, #16
 8004fc2:	183b      	adds	r3, r7, r0
 8004fc4:	497b      	ldr	r1, [pc, #492]	@ (80051b4 <PCD_EP_ISR_Handler+0x344>)
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	183a      	adds	r2, r7, r0
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	2180      	movs	r1, #128	@ 0x80
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f008 fbfb 	bl	800d7d8 <HAL_PCD_SetupStageCallback>
 8004fe2:	e335      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fe4:	234c      	movs	r3, #76	@ 0x4c
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	2200      	movs	r2, #0
 8004fea:	5e9b      	ldrsh	r3, [r3, r2]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db00      	blt.n	8004ff2 <PCD_EP_ISR_Handler+0x182>
 8004ff0:	e32e      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	201e      	movs	r0, #30
 8004ffc:	183b      	adds	r3, r7, r0
 8004ffe:	496d      	ldr	r1, [pc, #436]	@ (80051b4 <PCD_EP_ISR_Handler+0x344>)
 8005000:	400a      	ands	r2, r1
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	183a      	adds	r2, r7, r0
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	2180      	movs	r1, #128	@ 0x80
 800500e:	430a      	orrs	r2, r1
 8005010:	b292      	uxth	r2, r2
 8005012:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2250      	movs	r2, #80	@ 0x50
 800501a:	5a9b      	ldrh	r3, [r3, r2]
 800501c:	b29b      	uxth	r3, r3
 800501e:	001a      	movs	r2, r3
 8005020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	18d2      	adds	r2, r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	4a60      	ldr	r2, [pc, #384]	@ (80051b0 <PCD_EP_ISR_Handler+0x340>)
 8005030:	4694      	mov	ip, r2
 8005032:	4463      	add	r3, ip
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	059b      	lsls	r3, r3, #22
 8005038:	0d9a      	lsrs	r2, r3, #22
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800503e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01a      	beq.n	800507c <PCD_EP_ISR_Handler+0x20c>
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005058:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800505a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800505e:	b29b      	uxth	r3, r3
 8005060:	f006 fc14 	bl	800b88c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	18d2      	adds	r2, r2, r3
 800506e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005070:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2100      	movs	r1, #0
 8005076:	0018      	movs	r0, r3
 8005078:	f008 fbc3 	bl	800d802 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	214c      	movs	r1, #76	@ 0x4c
 8005082:	187b      	adds	r3, r7, r1
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005088:	187b      	adds	r3, r7, r1
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	4013      	ands	r3, r2
 8005092:	d000      	beq.n	8005096 <PCD_EP_ISR_Handler+0x226>
 8005094:	e2dc      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
 8005096:	187b      	adds	r3, r7, r1
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	23c0      	movs	r3, #192	@ 0xc0
 800509c:	019b      	lsls	r3, r3, #6
 800509e:	401a      	ands	r2, r3
 80050a0:	23c0      	movs	r3, #192	@ 0xc0
 80050a2:	019b      	lsls	r3, r3, #6
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d100      	bne.n	80050aa <PCD_EP_ISR_Handler+0x23a>
 80050a8:	e2d2      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2250      	movs	r2, #80	@ 0x50
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	001a      	movs	r2, r3
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4a3a      	ldr	r2, [pc, #232]	@ (80051b0 <PCD_EP_ISR_Handler+0x340>)
 80050c6:	4694      	mov	ip, r2
 80050c8:	4463      	add	r3, ip
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	059b      	lsls	r3, r3, #22
 80050d4:	0d9b      	lsrs	r3, r3, #22
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <PCD_EP_ISR_Handler+0x286>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4a2f      	ldr	r2, [pc, #188]	@ (80051a8 <PCD_EP_ISR_Handler+0x338>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e035      	b.n	8005162 <PCD_EP_ISR_Handler+0x2f2>
 80050f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80050fc:	d817      	bhi.n	800512e <PCD_EP_ISR_Handler+0x2be>
 80050fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
 8005106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2201      	movs	r2, #1
 800510c:	4013      	ands	r3, r2
 800510e:	d002      	beq.n	8005116 <PCD_EP_ISR_Handler+0x2a6>
 8005110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005112:	3301      	adds	r3, #1
 8005114:	647b      	str	r3, [r7, #68]	@ 0x44
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29a      	uxth	r2, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	b29b      	uxth	r3, r3
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	b29b      	uxth	r3, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	b29a      	uxth	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e019      	b.n	8005162 <PCD_EP_ISR_Handler+0x2f2>
 800512e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	647b      	str	r3, [r7, #68]	@ 0x44
 8005136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	221f      	movs	r2, #31
 800513c:	4013      	ands	r3, r2
 800513e:	d102      	bne.n	8005146 <PCD_EP_ISR_Handler+0x2d6>
 8005140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005142:	3b01      	subs	r3, #1
 8005144:	647b      	str	r3, [r7, #68]	@ 0x44
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29a      	uxth	r2, r3
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <PCD_EP_ISR_Handler+0x338>)
 800515a:	4313      	orrs	r3, r2
 800515c:	b29a      	uxth	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	2012      	movs	r0, #18
 800516c:	183b      	adds	r3, r7, r0
 800516e:	4912      	ldr	r1, [pc, #72]	@ (80051b8 <PCD_EP_ISR_Handler+0x348>)
 8005170:	400a      	ands	r2, r1
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	183b      	adds	r3, r7, r0
 8005176:	183a      	adds	r2, r7, r0
 8005178:	8812      	ldrh	r2, [r2, #0]
 800517a:	2180      	movs	r1, #128	@ 0x80
 800517c:	0149      	lsls	r1, r1, #5
 800517e:	404a      	eors	r2, r1
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	183b      	adds	r3, r7, r0
 8005184:	183a      	adds	r2, r7, r0
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	2180      	movs	r1, #128	@ 0x80
 800518a:	0189      	lsls	r1, r1, #6
 800518c:	404a      	eors	r2, r1
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	183a      	adds	r2, r7, r0
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	4908      	ldr	r1, [pc, #32]	@ (80051bc <PCD_EP_ISR_Handler+0x34c>)
 800519a:	430a      	orrs	r2, r1
 800519c:	b292      	uxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e256      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	ffff8f0f 	.word	0xffff8f0f
 80051a8:	ffff8000 	.word	0xffff8000
 80051ac:	00000402 	.word	0x00000402
 80051b0:	00000406 	.word	0x00000406
 80051b4:	00000f8f 	.word	0x00000f8f
 80051b8:	ffffbf8f 	.word	0xffffbf8f
 80051bc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	001a      	movs	r2, r3
 80051c6:	204f      	movs	r0, #79	@ 0x4f
 80051c8:	183b      	adds	r3, r7, r0
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	18d2      	adds	r2, r2, r3
 80051d0:	214c      	movs	r1, #76	@ 0x4c
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	5e9b      	ldrsh	r3, [r3, r2]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db00      	blt.n	80051e4 <PCD_EP_ISR_Handler+0x374>
 80051e2:	e0fa      	b.n	80053da <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	001a      	movs	r2, r3
 80051ea:	183b      	adds	r3, r7, r0
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	18d3      	adds	r3, r2, r3
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	244a      	movs	r4, #74	@ 0x4a
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	49d1      	ldr	r1, [pc, #836]	@ (8005540 <PCD_EP_ISR_Handler+0x6d0>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	001a      	movs	r2, r3
 8005206:	183b      	adds	r3, r7, r0
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	18d3      	adds	r3, r2, r3
 800520e:	193a      	adds	r2, r7, r4
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	430a      	orrs	r2, r1
 8005216:	b292      	uxth	r2, r2
 8005218:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800521a:	183b      	adds	r3, r7, r0
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	0013      	movs	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	189b      	adds	r3, r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	3351      	adds	r3, #81	@ 0x51
 8005228:	33ff      	adds	r3, #255	@ 0xff
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	18d3      	adds	r3, r2, r3
 800522e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005232:	7b1b      	ldrb	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d125      	bne.n	8005284 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2250      	movs	r2, #80	@ 0x50
 800523e:	5a9b      	ldrh	r3, [r3, r2]
 8005240:	b29b      	uxth	r3, r3
 8005242:	001a      	movs	r2, r3
 8005244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	18d2      	adds	r2, r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	18d3      	adds	r3, r2, r3
 8005252:	4abc      	ldr	r2, [pc, #752]	@ (8005544 <PCD_EP_ISR_Handler+0x6d4>)
 8005254:	4694      	mov	ip, r2
 8005256:	4463      	add	r3, ip
 8005258:	881a      	ldrh	r2, [r3, #0]
 800525a:	2450      	movs	r4, #80	@ 0x50
 800525c:	193b      	adds	r3, r7, r4
 800525e:	0592      	lsls	r2, r2, #22
 8005260:	0d92      	lsrs	r2, r2, #22
 8005262:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005264:	193b      	adds	r3, r7, r4
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d100      	bne.n	800526e <PCD_EP_ISR_Handler+0x3fe>
 800526c:	e08d      	b.n	800538a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005274:	6959      	ldr	r1, [r3, #20]
 8005276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005278:	88da      	ldrh	r2, [r3, #6]
 800527a:	193b      	adds	r3, r7, r4
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	f006 fb05 	bl	800b88c <USB_ReadPMA>
 8005282:	e082      	b.n	800538a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d10c      	bne.n	80052a6 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800528c:	2350      	movs	r3, #80	@ 0x50
 800528e:	18fc      	adds	r4, r7, r3
 8005290:	234c      	movs	r3, #76	@ 0x4c
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	881a      	ldrh	r2, [r3, #0]
 8005296:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	0018      	movs	r0, r3
 800529c:	f000 f9ec 	bl	8005678 <HAL_PCD_EP_DB_Receive>
 80052a0:	0003      	movs	r3, r0
 80052a2:	8023      	strh	r3, [r4, #0]
 80052a4:	e071      	b.n	800538a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	001a      	movs	r2, r3
 80052ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	18d3      	adds	r3, r2, r3
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	2052      	movs	r0, #82	@ 0x52
 80052ba:	183b      	adds	r3, r7, r0
 80052bc:	49a2      	ldr	r1, [pc, #648]	@ (8005548 <PCD_EP_ISR_Handler+0x6d8>)
 80052be:	400a      	ands	r2, r1
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	001a      	movs	r2, r3
 80052c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	18d3      	adds	r3, r2, r3
 80052d0:	183a      	adds	r2, r7, r0
 80052d2:	8812      	ldrh	r2, [r2, #0]
 80052d4:	499d      	ldr	r1, [pc, #628]	@ (800554c <PCD_EP_ISR_Handler+0x6dc>)
 80052d6:	430a      	orrs	r2, r1
 80052d8:	b292      	uxth	r2, r2
 80052da:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	001a      	movs	r2, r3
 80052e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	001a      	movs	r2, r3
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	4013      	ands	r3, r2
 80052f6:	d024      	beq.n	8005342 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2250      	movs	r2, #80	@ 0x50
 80052fe:	5a9b      	ldrh	r3, [r3, r2]
 8005300:	b29b      	uxth	r3, r3
 8005302:	001a      	movs	r2, r3
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	18d2      	adds	r2, r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	18d3      	adds	r3, r2, r3
 8005312:	4a8f      	ldr	r2, [pc, #572]	@ (8005550 <PCD_EP_ISR_Handler+0x6e0>)
 8005314:	4694      	mov	ip, r2
 8005316:	4463      	add	r3, ip
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	2450      	movs	r4, #80	@ 0x50
 800531c:	193b      	adds	r3, r7, r4
 800531e:	0592      	lsls	r2, r2, #22
 8005320:	0d92      	lsrs	r2, r2, #22
 8005322:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005324:	193b      	adds	r3, r7, r4
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02e      	beq.n	800538a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005332:	6959      	ldr	r1, [r3, #20]
 8005334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005336:	891a      	ldrh	r2, [r3, #8]
 8005338:	193b      	adds	r3, r7, r4
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	f006 faa6 	bl	800b88c <USB_ReadPMA>
 8005340:	e023      	b.n	800538a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2250      	movs	r2, #80	@ 0x50
 8005348:	5a9b      	ldrh	r3, [r3, r2]
 800534a:	b29b      	uxth	r3, r3
 800534c:	001a      	movs	r2, r3
 800534e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	18d2      	adds	r2, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	4a79      	ldr	r2, [pc, #484]	@ (8005544 <PCD_EP_ISR_Handler+0x6d4>)
 800535e:	4694      	mov	ip, r2
 8005360:	4463      	add	r3, ip
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	2450      	movs	r4, #80	@ 0x50
 8005366:	193b      	adds	r3, r7, r4
 8005368:	0592      	lsls	r2, r2, #22
 800536a:	0d92      	lsrs	r2, r2, #22
 800536c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800536e:	193b      	adds	r3, r7, r4
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	6959      	ldr	r1, [r3, #20]
 800537e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005380:	895a      	ldrh	r2, [r3, #10]
 8005382:	193b      	adds	r3, r7, r4
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	f006 fa81 	bl	800b88c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	2150      	movs	r1, #80	@ 0x50
 8005390:	187b      	adds	r3, r7, r1
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	18d2      	adds	r2, r2, r3
 8005396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005398:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800539a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80053a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <PCD_EP_ISR_Handler+0x54c>
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d207      	bcs.n	80053cc <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80053bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f008 fa1c 	bl	800d802 <HAL_PCD_DataOutStageCallback>
 80053ca:	e006      	b.n	80053da <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053d2:	0011      	movs	r1, r2
 80053d4:	0018      	movs	r0, r3
 80053d6:	f004 ffa5 	bl	800a324 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053da:	244c      	movs	r4, #76	@ 0x4c
 80053dc:	193b      	adds	r3, r7, r4
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	4013      	ands	r3, r2
 80053e4:	d100      	bne.n	80053e8 <PCD_EP_ISR_Handler+0x578>
 80053e6:	e133      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80053e8:	204f      	movs	r0, #79	@ 0x4f
 80053ea:	183b      	adds	r3, r7, r0
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	0013      	movs	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	3310      	adds	r3, #16
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	18d3      	adds	r3, r2, r3
 80053fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	001a      	movs	r2, r3
 8005404:	183b      	adds	r3, r7, r0
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29a      	uxth	r2, r3
 8005410:	2542      	movs	r5, #66	@ 0x42
 8005412:	197b      	adds	r3, r7, r5
 8005414:	494f      	ldr	r1, [pc, #316]	@ (8005554 <PCD_EP_ISR_Handler+0x6e4>)
 8005416:	400a      	ands	r2, r1
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	001a      	movs	r2, r3
 8005420:	183b      	adds	r3, r7, r0
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	197a      	adds	r2, r7, r5
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	494a      	ldr	r1, [pc, #296]	@ (8005558 <PCD_EP_ISR_Handler+0x6e8>)
 800542e:	430a      	orrs	r2, r1
 8005430:	b292      	uxth	r2, r2
 8005432:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d000      	beq.n	800543e <PCD_EP_ISR_Handler+0x5ce>
 800543c:	e0af      	b.n	800559e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 800543e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005440:	2200      	movs	r2, #0
 8005442:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005446:	7b1b      	ldrb	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d100      	bne.n	800544e <PCD_EP_ISR_Handler+0x5de>
 800544c:	e09f      	b.n	800558e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800544e:	193b      	adds	r3, r7, r4
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	2240      	movs	r2, #64	@ 0x40
 8005454:	4013      	ands	r3, r2
 8005456:	d046      	beq.n	80054e6 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d125      	bne.n	80054ac <PCD_EP_ISR_Handler+0x63c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2250      	movs	r2, #80	@ 0x50
 800546c:	5a9b      	ldrh	r3, [r3, r2]
 800546e:	b29b      	uxth	r3, r3
 8005470:	001a      	movs	r2, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	189b      	adds	r3, r3, r2
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
 8005478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	00da      	lsls	r2, r3, #3
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	18d3      	adds	r3, r2, r3
 8005482:	4a33      	ldr	r2, [pc, #204]	@ (8005550 <PCD_EP_ISR_Handler+0x6e0>)
 8005484:	4694      	mov	ip, r2
 8005486:	4463      	add	r3, ip
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	0d9b      	lsrs	r3, r3, #22
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005558 <PCD_EP_ISR_Handler+0x6e8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e070      	b.n	800558e <PCD_EP_ISR_Handler+0x71e>
 80054ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d16c      	bne.n	800558e <PCD_EP_ISR_Handler+0x71e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2250      	movs	r2, #80	@ 0x50
 80054c0:	5a9b      	ldrh	r3, [r3, r2]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	001a      	movs	r2, r3
 80054c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	00da      	lsls	r2, r3, #3
 80054d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d4:	18d3      	adds	r3, r2, r3
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <PCD_EP_ISR_Handler+0x6e0>)
 80054d8:	4694      	mov	ip, r2
 80054da:	4463      	add	r3, ip
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	2200      	movs	r2, #0
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e053      	b.n	800558e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d133      	bne.n	800555c <PCD_EP_ISR_Handler+0x6ec>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2250      	movs	r2, #80	@ 0x50
 8005500:	5a9b      	ldrh	r3, [r3, r2]
 8005502:	b29b      	uxth	r3, r3
 8005504:	001a      	movs	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	189b      	adds	r3, r3, r2
 800550a:	637b      	str	r3, [r7, #52]	@ 0x34
 800550c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	00da      	lsls	r2, r3, #3
 8005512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	4a0b      	ldr	r2, [pc, #44]	@ (8005544 <PCD_EP_ISR_Handler+0x6d4>)
 8005518:	4694      	mov	ip, r2
 800551a:	4463      	add	r3, ip
 800551c:	633b      	str	r3, [r7, #48]	@ 0x30
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	059b      	lsls	r3, r3, #22
 8005526:	0d9b      	lsrs	r3, r3, #22
 8005528:	b29a      	uxth	r2, r3
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <PCD_EP_ISR_Handler+0x6e8>)
 8005536:	4313      	orrs	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e026      	b.n	800558e <PCD_EP_ISR_Handler+0x71e>
 8005540:	00000f8f 	.word	0x00000f8f
 8005544:	00000406 	.word	0x00000406
 8005548:	ffff8f8f 	.word	0xffff8f8f
 800554c:	ffff80c0 	.word	0xffff80c0
 8005550:	00000402 	.word	0x00000402
 8005554:	ffff8f0f 	.word	0xffff8f0f
 8005558:	ffff8000 	.word	0xffff8000
 800555c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d114      	bne.n	800558e <PCD_EP_ISR_Handler+0x71e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2250      	movs	r2, #80	@ 0x50
 800556a:	5a9b      	ldrh	r3, [r3, r2]
 800556c:	b29b      	uxth	r3, r3
 800556e:	001a      	movs	r2, r3
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	189b      	adds	r3, r3, r2
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	00da      	lsls	r2, r3, #3
 800557c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	4a3b      	ldr	r2, [pc, #236]	@ (8005670 <PCD_EP_ISR_Handler+0x800>)
 8005582:	4694      	mov	ip, r2
 8005584:	4463      	add	r3, ip
 8005586:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	2200      	movs	r2, #0
 800558c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800558e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0011      	movs	r1, r2
 8005596:	0018      	movs	r0, r3
 8005598:	f008 f954 	bl	800d844 <HAL_PCD_DataInStageCallback>
 800559c:	e058      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800559e:	234c      	movs	r3, #76	@ 0x4c
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4013      	ands	r3, r2
 80055aa:	d149      	bne.n	8005640 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2250      	movs	r2, #80	@ 0x50
 80055b2:	5a9b      	ldrh	r3, [r3, r2]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	001a      	movs	r2, r3
 80055b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	18d2      	adds	r2, r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005674 <PCD_EP_ISR_Handler+0x804>)
 80055c8:	4694      	mov	ip, r2
 80055ca:	4463      	add	r3, ip
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	2140      	movs	r1, #64	@ 0x40
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	0592      	lsls	r2, r2, #22
 80055d4:	0d92      	lsrs	r2, r2, #22
 80055d6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80055d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d907      	bls.n	80055f4 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80055e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	1ad2      	subs	r2, r2, r3
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	619a      	str	r2, [r3, #24]
 80055f2:	e002      	b.n	80055fa <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80055f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80055fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d107      	bne.n	8005612 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0011      	movs	r1, r2
 800560a:	0018      	movs	r0, r3
 800560c:	f008 f91a 	bl	800d844 <HAL_PCD_DataInStageCallback>
 8005610:	e01e      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	2140      	movs	r1, #64	@ 0x40
 8005618:	187b      	adds	r3, r7, r1
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	18d2      	adds	r2, r2, r3
 800561e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005620:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	187b      	adds	r3, r7, r1
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	18d2      	adds	r2, r2, r3
 800562c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005636:	0011      	movs	r1, r2
 8005638:	0018      	movs	r0, r3
 800563a:	f004 fe73 	bl	800a324 <USB_EPStartXfer>
 800563e:	e007      	b.n	8005650 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005640:	234c      	movs	r3, #76	@ 0x4c
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 f930 	bl	80058b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2244      	movs	r2, #68	@ 0x44
 8005656:	5a9b      	ldrh	r3, [r3, r2]
 8005658:	b29b      	uxth	r3, r3
 800565a:	b21b      	sxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	da01      	bge.n	8005664 <PCD_EP_ISR_Handler+0x7f4>
 8005660:	f7ff fc0c 	bl	8004e7c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b016      	add	sp, #88	@ 0x58
 800566c:	bdb0      	pop	{r4, r5, r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	00000406 	.word	0x00000406
 8005674:	00000402 	.word	0x00000402

08005678 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b089      	sub	sp, #36	@ 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	1dbb      	adds	r3, r7, #6
 8005684:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005686:	1dbb      	adds	r3, r7, #6
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	2380      	movs	r3, #128	@ 0x80
 800568c:	01db      	lsls	r3, r3, #7
 800568e:	4013      	ands	r3, r2
 8005690:	d100      	bne.n	8005694 <HAL_PCD_EP_DB_Receive+0x1c>
 8005692:	e07d      	b.n	8005790 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2250      	movs	r2, #80	@ 0x50
 800569a:	5a9b      	ldrh	r3, [r3, r2]
 800569c:	b29b      	uxth	r3, r3
 800569e:	001a      	movs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	18d2      	adds	r2, r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	18d3      	adds	r3, r2, r3
 80056ae:	4a7a      	ldr	r2, [pc, #488]	@ (8005898 <HAL_PCD_EP_DB_Receive+0x220>)
 80056b0:	4694      	mov	ip, r2
 80056b2:	4463      	add	r3, ip
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	211a      	movs	r1, #26
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	0592      	lsls	r2, r2, #22
 80056bc:	0d92      	lsrs	r2, r2, #22
 80056be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d307      	bcc.n	80056dc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	187b      	adds	r3, r7, r1
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	619a      	str	r2, [r3, #24]
 80056da:	e002      	b.n	80056e2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d121      	bne.n	800572e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	001a      	movs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	18d3      	adds	r3, r2, r3
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	2018      	movs	r0, #24
 80056fe:	183b      	adds	r3, r7, r0
 8005700:	4966      	ldr	r1, [pc, #408]	@ (800589c <HAL_PCD_EP_DB_Receive+0x224>)
 8005702:	400a      	ands	r2, r1
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	183b      	adds	r3, r7, r0
 8005708:	183a      	adds	r2, r7, r0
 800570a:	8812      	ldrh	r2, [r2, #0]
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	0189      	lsls	r1, r1, #6
 8005710:	404a      	eors	r2, r1
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	001a      	movs	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	18d3      	adds	r3, r2, r3
 8005722:	183a      	adds	r2, r7, r0
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	495e      	ldr	r1, [pc, #376]	@ (80058a0 <HAL_PCD_EP_DB_Receive+0x228>)
 8005728:	430a      	orrs	r2, r1
 800572a:	b292      	uxth	r2, r2
 800572c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800572e:	1dbb      	adds	r3, r7, #6
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2240      	movs	r2, #64	@ 0x40
 8005734:	4013      	ands	r3, r2
 8005736:	d01a      	beq.n	800576e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	001a      	movs	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	2016      	movs	r0, #22
 800574c:	183b      	adds	r3, r7, r0
 800574e:	4955      	ldr	r1, [pc, #340]	@ (80058a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005750:	400a      	ands	r2, r1
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	001a      	movs	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	183a      	adds	r2, r7, r0
 8005764:	8812      	ldrh	r2, [r2, #0]
 8005766:	4950      	ldr	r1, [pc, #320]	@ (80058a8 <HAL_PCD_EP_DB_Receive+0x230>)
 8005768:	430a      	orrs	r2, r1
 800576a:	b292      	uxth	r2, r2
 800576c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800576e:	241a      	movs	r4, #26
 8005770:	193b      	adds	r3, r7, r4
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d100      	bne.n	800577a <HAL_PCD_EP_DB_Receive+0x102>
 8005778:	e086      	b.n	8005888 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	891a      	ldrh	r2, [r3, #8]
 8005786:	193b      	adds	r3, r7, r4
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	f006 f87f 	bl	800b88c <USB_ReadPMA>
 800578e:	e07b      	b.n	8005888 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2250      	movs	r2, #80	@ 0x50
 8005796:	5a9b      	ldrh	r3, [r3, r2]
 8005798:	b29b      	uxth	r3, r3
 800579a:	001a      	movs	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	18d2      	adds	r2, r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	18d3      	adds	r3, r2, r3
 80057aa:	4a40      	ldr	r2, [pc, #256]	@ (80058ac <HAL_PCD_EP_DB_Receive+0x234>)
 80057ac:	4694      	mov	ip, r2
 80057ae:	4463      	add	r3, ip
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	211a      	movs	r1, #26
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	0592      	lsls	r2, r2, #22
 80057b8:	0d92      	lsrs	r2, r2, #22
 80057ba:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d307      	bcc.n	80057d8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	619a      	str	r2, [r3, #24]
 80057d6:	e002      	b.n	80057de <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d121      	bne.n	800582a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	001a      	movs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	18d3      	adds	r3, r2, r3
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	201e      	movs	r0, #30
 80057fa:	183b      	adds	r3, r7, r0
 80057fc:	4927      	ldr	r1, [pc, #156]	@ (800589c <HAL_PCD_EP_DB_Receive+0x224>)
 80057fe:	400a      	ands	r2, r1
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	183b      	adds	r3, r7, r0
 8005804:	183a      	adds	r2, r7, r0
 8005806:	8812      	ldrh	r2, [r2, #0]
 8005808:	2180      	movs	r1, #128	@ 0x80
 800580a:	0189      	lsls	r1, r1, #6
 800580c:	404a      	eors	r2, r1
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	001a      	movs	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	18d3      	adds	r3, r2, r3
 800581e:	183a      	adds	r2, r7, r0
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	491f      	ldr	r1, [pc, #124]	@ (80058a0 <HAL_PCD_EP_DB_Receive+0x228>)
 8005824:	430a      	orrs	r2, r1
 8005826:	b292      	uxth	r2, r2
 8005828:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800582a:	1dbb      	adds	r3, r7, #6
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	4013      	ands	r3, r2
 8005832:	d11a      	bne.n	800586a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	001a      	movs	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	18d3      	adds	r3, r2, r3
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29a      	uxth	r2, r3
 8005846:	201c      	movs	r0, #28
 8005848:	183b      	adds	r3, r7, r0
 800584a:	4916      	ldr	r1, [pc, #88]	@ (80058a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800584c:	400a      	ands	r2, r1
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	001a      	movs	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	18d3      	adds	r3, r2, r3
 800585e:	183a      	adds	r2, r7, r0
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	4911      	ldr	r1, [pc, #68]	@ (80058a8 <HAL_PCD_EP_DB_Receive+0x230>)
 8005864:	430a      	orrs	r2, r1
 8005866:	b292      	uxth	r2, r2
 8005868:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800586a:	241a      	movs	r4, #26
 800586c:	193b      	adds	r3, r7, r4
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6959      	ldr	r1, [r3, #20]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	895a      	ldrh	r2, [r3, #10]
 8005880:	193b      	adds	r3, r7, r4
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	f006 f802 	bl	800b88c <USB_ReadPMA>
    }
  }

  return count;
 8005888:	231a      	movs	r3, #26
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	881b      	ldrh	r3, [r3, #0]
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b009      	add	sp, #36	@ 0x24
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	00000402 	.word	0x00000402
 800589c:	ffffbf8f 	.word	0xffffbf8f
 80058a0:	ffff8080 	.word	0xffff8080
 80058a4:	ffff8f8f 	.word	0xffff8f8f
 80058a8:	ffff80c0 	.word	0xffff80c0
 80058ac:	00000406 	.word	0x00000406

080058b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b0a4      	sub	sp, #144	@ 0x90
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	1dbb      	adds	r3, r7, #6
 80058bc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058be:	1dbb      	adds	r3, r7, #6
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	2240      	movs	r2, #64	@ 0x40
 80058c4:	4013      	ands	r3, r2
 80058c6:	d100      	bne.n	80058ca <HAL_PCD_EP_DB_Transmit+0x1a>
 80058c8:	e1e4      	b.n	8005c94 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2250      	movs	r2, #80	@ 0x50
 80058d0:	5a9b      	ldrh	r3, [r3, r2]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	001a      	movs	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	18d2      	adds	r2, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	4ad0      	ldr	r2, [pc, #832]	@ (8005c28 <HAL_PCD_EP_DB_Transmit+0x378>)
 80058e6:	4694      	mov	ip, r2
 80058e8:	4463      	add	r3, ip
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	2188      	movs	r1, #136	@ 0x88
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	0592      	lsls	r2, r2, #22
 80058f2:	0d92      	lsrs	r2, r2, #22
 80058f4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d907      	bls.n	8005912 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	187b      	adds	r3, r7, r1
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	1ad2      	subs	r2, r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	619a      	str	r2, [r3, #24]
 8005910:	e002      	b.n	8005918 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d000      	beq.n	8005922 <HAL_PCD_EP_DB_Transmit+0x72>
 8005920:	e0b5      	b.n	8005a8e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d125      	bne.n	8005976 <HAL_PCD_EP_DB_Transmit+0xc6>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2250      	movs	r2, #80	@ 0x50
 8005936:	5a9b      	ldrh	r3, [r3, r2]
 8005938:	b29b      	uxth	r3, r3
 800593a:	001a      	movs	r2, r3
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	189b      	adds	r3, r3, r2
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	00da      	lsls	r2, r3, #3
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	18d3      	adds	r3, r2, r3
 800594c:	4ab6      	ldr	r2, [pc, #728]	@ (8005c28 <HAL_PCD_EP_DB_Transmit+0x378>)
 800594e:	4694      	mov	ip, r2
 8005950:	4463      	add	r3, ip
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	059b      	lsls	r3, r3, #22
 800595c:	0d9b      	lsrs	r3, r3, #22
 800595e:	b29a      	uxth	r2, r3
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	4ab0      	ldr	r2, [pc, #704]	@ (8005c2c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800596c:	4313      	orrs	r3, r2
 800596e:	b29a      	uxth	r2, r3
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e01b      	b.n	80059ae <HAL_PCD_EP_DB_Transmit+0xfe>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d117      	bne.n	80059ae <HAL_PCD_EP_DB_Transmit+0xfe>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2250      	movs	r2, #80	@ 0x50
 800598a:	5a9b      	ldrh	r3, [r3, r2]
 800598c:	b29b      	uxth	r3, r3
 800598e:	001a      	movs	r2, r3
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	189b      	adds	r3, r3, r2
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00da      	lsls	r2, r3, #3
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	18d3      	adds	r3, r2, r3
 80059a0:	4aa1      	ldr	r2, [pc, #644]	@ (8005c28 <HAL_PCD_EP_DB_Transmit+0x378>)
 80059a2:	4694      	mov	ip, r2
 80059a4:	4463      	add	r3, ip
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	2200      	movs	r2, #0
 80059ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d125      	bne.n	8005a08 <HAL_PCD_EP_DB_Transmit+0x158>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2250      	movs	r2, #80	@ 0x50
 80059c8:	5a9b      	ldrh	r3, [r3, r2]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	001a      	movs	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	00da      	lsls	r2, r3, #3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	4a94      	ldr	r2, [pc, #592]	@ (8005c30 <HAL_PCD_EP_DB_Transmit+0x380>)
 80059e0:	4694      	mov	ip, r2
 80059e2:	4463      	add	r3, ip
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	0d9b      	lsrs	r3, r3, #22
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4a8b      	ldr	r2, [pc, #556]	@ (8005c2c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e018      	b.n	8005a3a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d114      	bne.n	8005a3a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2250      	movs	r2, #80	@ 0x50
 8005a16:	5a9b      	ldrh	r3, [r3, r2]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	189b      	adds	r3, r3, r2
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	18d3      	adds	r3, r2, r3
 8005a2c:	4a80      	ldr	r2, [pc, #512]	@ (8005c30 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005a2e:	4694      	mov	ip, r2
 8005a30:	4463      	add	r3, ip
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2200      	movs	r2, #0
 8005a38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0011      	movs	r1, r2
 8005a42:	0018      	movs	r0, r3
 8005a44:	f007 fefe 	bl	800d844 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a48:	1dbb      	adds	r3, r7, #6
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	4013      	ands	r3, r2
 8005a52:	d100      	bne.n	8005a56 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005a54:	e308      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	18d3      	adds	r3, r2, r3
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	2016      	movs	r0, #22
 8005a6a:	183b      	adds	r3, r7, r0
 8005a6c:	4971      	ldr	r1, [pc, #452]	@ (8005c34 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	001a      	movs	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	18d3      	adds	r3, r2, r3
 8005a80:	183a      	adds	r2, r7, r0
 8005a82:	8812      	ldrh	r2, [r2, #0]
 8005a84:	496c      	ldr	r1, [pc, #432]	@ (8005c38 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005a86:	430a      	orrs	r2, r1
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e2ec      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a8e:	1dbb      	adds	r3, r7, #6
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	01db      	lsls	r3, r3, #7
 8005a96:	4013      	ands	r3, r2
 8005a98:	d01a      	beq.n	8005ad0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	208a      	movs	r0, #138	@ 0x8a
 8005aae:	183b      	adds	r3, r7, r0
 8005ab0:	4960      	ldr	r1, [pc, #384]	@ (8005c34 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	001a      	movs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	183a      	adds	r2, r7, r0
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	495b      	ldr	r1, [pc, #364]	@ (8005c38 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	b292      	uxth	r2, r2
 8005ace:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2224      	movs	r2, #36	@ 0x24
 8005ad4:	5c9b      	ldrb	r3, [r3, r2]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d000      	beq.n	8005adc <HAL_PCD_EP_DB_Transmit+0x22c>
 8005ada:	e2c5      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	2188      	movs	r1, #136	@ 0x88
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	18d2      	adds	r2, r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	18d2      	adds	r2, r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d30c      	bcc.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	218c      	movs	r1, #140	@ 0x8c
 8005b0c:	187a      	adds	r2, r7, r1
 8005b0e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	621a      	str	r2, [r3, #32]
 8005b1e:	e01a      	b.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005b28:	2388      	movs	r3, #136	@ 0x88
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	228c      	movs	r2, #140	@ 0x8c
 8005b30:	18ba      	adds	r2, r7, r2
 8005b32:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2224      	movs	r2, #36	@ 0x24
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]
 8005b3c:	e00b      	b.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2224      	movs	r2, #36	@ 0x24
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	228c      	movs	r2, #140	@ 0x8c
 8005b4c:	18ba      	adds	r2, r7, r2
 8005b4e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d000      	beq.n	8005b60 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005b5e:	e06d      	b.n	8005c3c <HAL_PCD_EP_DB_Transmit+0x38c>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2250      	movs	r2, #80	@ 0x50
 8005b6c:	5a9b      	ldrh	r3, [r3, r2]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	001a      	movs	r2, r3
 8005b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	00da      	lsls	r2, r3, #3
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	4a29      	ldr	r2, [pc, #164]	@ (8005c28 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005b84:	4694      	mov	ip, r2
 8005b86:	4463      	add	r3, ip
 8005b88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	059b      	lsls	r3, r3, #22
 8005b92:	0d9b      	lsrs	r3, r3, #22
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	238c      	movs	r3, #140	@ 0x8c
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d108      	bne.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0x306>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e061      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005bb6:	228c      	movs	r2, #140	@ 0x8c
 8005bb8:	18bb      	adds	r3, r7, r2
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bbe:	d817      	bhi.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x340>
 8005bc0:	18bb      	adds	r3, r7, r2
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc8:	18bb      	adds	r3, r7, r2
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d002      	beq.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0x328>
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e044      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005bf0:	228c      	movs	r2, #140	@ 0x8c
 8005bf2:	18bb      	adds	r3, r7, r2
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bfa:	18bb      	adds	r3, r7, r2
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	221f      	movs	r2, #31
 8005c00:	4013      	ands	r3, r2
 8005c02:	d102      	bne.n	8005c0a <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c06:	3b01      	subs	r3, #1
 8005c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4a03      	ldr	r2, [pc, #12]	@ (8005c2c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e028      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c28:	00000402 	.word	0x00000402
 8005c2c:	ffff8000 	.word	0xffff8000
 8005c30:	00000406 	.word	0x00000406
 8005c34:	ffff8f8f 	.word	0xffff8f8f
 8005c38:	ffffc080 	.word	0xffffc080
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d11a      	bne.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2250      	movs	r2, #80	@ 0x50
 8005c50:	5a9b      	ldrh	r3, [r3, r2]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	001a      	movs	r2, r3
 8005c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c58:	189b      	adds	r3, r3, r2
 8005c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	00da      	lsls	r2, r3, #3
 8005c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c64:	18d3      	adds	r3, r2, r3
 8005c66:	4ad9      	ldr	r2, [pc, #868]	@ (8005fcc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005c68:	4694      	mov	ip, r2
 8005c6a:	4463      	add	r3, ip
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c6e:	238c      	movs	r3, #140	@ 0x8c
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6959      	ldr	r1, [r3, #20]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	891a      	ldrh	r2, [r3, #8]
 8005c86:	238c      	movs	r3, #140	@ 0x8c
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f005 fdb3 	bl	800b7f8 <USB_WritePMA>
 8005c92:	e1e9      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2250      	movs	r2, #80	@ 0x50
 8005c9a:	5a9b      	ldrh	r3, [r3, r2]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	18d2      	adds	r2, r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	4ac8      	ldr	r2, [pc, #800]	@ (8005fd0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005cb0:	4694      	mov	ip, r2
 8005cb2:	4463      	add	r3, ip
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	2188      	movs	r1, #136	@ 0x88
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	0592      	lsls	r2, r2, #22
 8005cbc:	0d92      	lsrs	r2, r2, #22
 8005cbe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d307      	bcc.n	8005cdc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	1ad2      	subs	r2, r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	619a      	str	r2, [r3, #24]
 8005cda:	e002      	b.n	8005ce2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d000      	beq.n	8005cec <HAL_PCD_EP_DB_Transmit+0x43c>
 8005cea:	e0bb      	b.n	8005e64 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d125      	bne.n	8005d40 <HAL_PCD_EP_DB_Transmit+0x490>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2250      	movs	r2, #80	@ 0x50
 8005d00:	5a9b      	ldrh	r3, [r3, r2]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	001a      	movs	r2, r3
 8005d06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d08:	189b      	adds	r3, r3, r2
 8005d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	00da      	lsls	r2, r3, #3
 8005d12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d14:	18d3      	adds	r3, r2, r3
 8005d16:	4aad      	ldr	r2, [pc, #692]	@ (8005fcc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005d18:	4694      	mov	ip, r2
 8005d1a:	4463      	add	r3, ip
 8005d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	059b      	lsls	r3, r3, #22
 8005d26:	0d9b      	lsrs	r3, r3, #22
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4aa7      	ldr	r2, [pc, #668]	@ (8005fd4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e01b      	b.n	8005d78 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d117      	bne.n	8005d78 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2250      	movs	r2, #80	@ 0x50
 8005d54:	5a9b      	ldrh	r3, [r3, r2]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	001a      	movs	r2, r3
 8005d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	00da      	lsls	r2, r3, #3
 8005d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	4a98      	ldr	r2, [pc, #608]	@ (8005fcc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005d6c:	4694      	mov	ip, r2
 8005d6e:	4463      	add	r3, ip
 8005d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d74:	2200      	movs	r2, #0
 8005d76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12b      	bne.n	8005dde <HAL_PCD_EP_DB_Transmit+0x52e>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2250      	movs	r2, #80	@ 0x50
 8005d92:	5a9b      	ldrh	r3, [r3, r2]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	001a      	movs	r2, r3
 8005d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	00da      	lsls	r2, r3, #3
 8005da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da6:	18d3      	adds	r3, r2, r3
 8005da8:	4a89      	ldr	r2, [pc, #548]	@ (8005fd0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005daa:	4694      	mov	ip, r2
 8005dac:	4463      	add	r3, ip
 8005dae:	2184      	movs	r1, #132	@ 0x84
 8005db0:	187a      	adds	r2, r7, r1
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	059b      	lsls	r3, r3, #22
 8005dbe:	0d9b      	lsrs	r3, r3, #22
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4a80      	ldr	r2, [pc, #512]	@ (8005fd4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	187b      	adds	r3, r7, r1
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e018      	b.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x560>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d114      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x560>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2250      	movs	r2, #80	@ 0x50
 8005dec:	5a9b      	ldrh	r3, [r3, r2]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	001a      	movs	r2, r3
 8005df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	00da      	lsls	r2, r3, #3
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e00:	18d3      	adds	r3, r2, r3
 8005e02:	4a73      	ldr	r2, [pc, #460]	@ (8005fd0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005e04:	4694      	mov	ip, r2
 8005e06:	4463      	add	r3, ip
 8005e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	0011      	movs	r1, r2
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f007 fd13 	bl	800d844 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e1e:	1dbb      	adds	r3, r7, #6
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	2380      	movs	r3, #128	@ 0x80
 8005e24:	01db      	lsls	r3, r3, #7
 8005e26:	4013      	ands	r3, r2
 8005e28:	d000      	beq.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x57c>
 8005e2a:	e11d      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	001a      	movs	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	18d3      	adds	r3, r2, r3
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	2082      	movs	r0, #130	@ 0x82
 8005e40:	183b      	adds	r3, r7, r0
 8005e42:	4965      	ldr	r1, [pc, #404]	@ (8005fd8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	001a      	movs	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	18d3      	adds	r3, r2, r3
 8005e56:	183a      	adds	r2, r7, r0
 8005e58:	8812      	ldrh	r2, [r2, #0]
 8005e5a:	4960      	ldr	r1, [pc, #384]	@ (8005fdc <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	e101      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e64:	1dbb      	adds	r3, r7, #6
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	01db      	lsls	r3, r3, #7
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d11a      	bne.n	8005ea6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	001a      	movs	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	18d3      	adds	r3, r2, r3
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	204e      	movs	r0, #78	@ 0x4e
 8005e84:	183b      	adds	r3, r7, r0
 8005e86:	4954      	ldr	r1, [pc, #336]	@ (8005fd8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	001a      	movs	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	18d3      	adds	r3, r2, r3
 8005e9a:	183a      	adds	r2, r7, r0
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	494f      	ldr	r1, [pc, #316]	@ (8005fdc <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	b292      	uxth	r2, r2
 8005ea4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2224      	movs	r2, #36	@ 0x24
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d000      	beq.n	8005eb2 <HAL_PCD_EP_DB_Transmit+0x602>
 8005eb0:	e0da      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	2188      	movs	r1, #136	@ 0x88
 8005eb8:	187b      	adds	r3, r7, r1
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	18d2      	adds	r2, r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	69da      	ldr	r2, [r3, #28]
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	18d2      	adds	r2, r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d30c      	bcc.n	8005ef6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	218c      	movs	r1, #140	@ 0x8c
 8005ee2:	187a      	adds	r2, r7, r1
 8005ee4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a1a      	ldr	r2, [r3, #32]
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	621a      	str	r2, [r3, #32]
 8005ef4:	e01a      	b.n	8005f2c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005efe:	2388      	movs	r3, #136	@ 0x88
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	228c      	movs	r2, #140	@ 0x8c
 8005f06:	18ba      	adds	r2, r7, r2
 8005f08:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2224      	movs	r2, #36	@ 0x24
 8005f0e:	2100      	movs	r1, #0
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	e00b      	b.n	8005f2c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	228c      	movs	r2, #140	@ 0x8c
 8005f1a:	18ba      	adds	r2, r7, r2
 8005f1c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2224      	movs	r2, #36	@ 0x24
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d000      	beq.n	8005f3c <HAL_PCD_EP_DB_Transmit+0x68c>
 8005f3a:	e06d      	b.n	8006018 <HAL_PCD_EP_DB_Transmit+0x768>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2250      	movs	r2, #80	@ 0x50
 8005f48:	5a9b      	ldrh	r3, [r3, r2]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	001a      	movs	r2, r3
 8005f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00da      	lsls	r2, r3, #3
 8005f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005f60:	4694      	mov	ip, r2
 8005f62:	4463      	add	r3, ip
 8005f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	059b      	lsls	r3, r3, #22
 8005f6e:	0d9b      	lsrs	r3, r3, #22
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	238c      	movs	r3, #140	@ 0x8c
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4a13      	ldr	r2, [pc, #76]	@ (8005fd4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e05e      	b.n	8006050 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005f92:	228c      	movs	r2, #140	@ 0x8c
 8005f94:	18bb      	adds	r3, r7, r2
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f9a:	d821      	bhi.n	8005fe0 <HAL_PCD_EP_DB_Transmit+0x730>
 8005f9c:	18bb      	adds	r3, r7, r2
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fa4:	18bb      	adds	r3, r7, r2
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d002      	beq.n	8005fb4 <HAL_PCD_EP_DB_Transmit+0x704>
 8005fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	029b      	lsls	r3, r3, #10
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e041      	b.n	8006050 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005fcc:	00000402 	.word	0x00000402
 8005fd0:	00000406 	.word	0x00000406
 8005fd4:	ffff8000 	.word	0xffff8000
 8005fd8:	ffff8f8f 	.word	0xffff8f8f
 8005fdc:	ffffc080 	.word	0xffffc080
 8005fe0:	228c      	movs	r2, #140	@ 0x8c
 8005fe2:	18bb      	adds	r3, r7, r2
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fea:	18bb      	adds	r3, r7, r2
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	221f      	movs	r2, #31
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d102      	bne.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x74a>
 8005ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006002:	b29b      	uxth	r3, r3
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	b29b      	uxth	r3, r3
 8006008:	4313      	orrs	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	4a2c      	ldr	r2, [pc, #176]	@ (80060c0 <HAL_PCD_EP_DB_Transmit+0x810>)
 800600e:	4313      	orrs	r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e01b      	b.n	8006050 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d117      	bne.n	8006050 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2250      	movs	r2, #80	@ 0x50
 8006026:	5a9b      	ldrh	r3, [r3, r2]
 8006028:	b29b      	uxth	r3, r3
 800602a:	001a      	movs	r2, r3
 800602c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800602e:	189b      	adds	r3, r3, r2
 8006030:	657b      	str	r3, [r7, #84]	@ 0x54
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	00da      	lsls	r2, r3, #3
 8006038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	4a21      	ldr	r2, [pc, #132]	@ (80060c4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800603e:	4694      	mov	ip, r2
 8006040:	4463      	add	r3, ip
 8006042:	653b      	str	r3, [r7, #80]	@ 0x50
 8006044:	238c      	movs	r3, #140	@ 0x8c
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800604e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6959      	ldr	r1, [r3, #20]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	895a      	ldrh	r2, [r3, #10]
 800605c:	238c      	movs	r3, #140	@ 0x8c
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f005 fbc8 	bl	800b7f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	001a      	movs	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	18d3      	adds	r3, r2, r3
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29a      	uxth	r2, r3
 800607a:	2014      	movs	r0, #20
 800607c:	183b      	adds	r3, r7, r0
 800607e:	4912      	ldr	r1, [pc, #72]	@ (80060c8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8006080:	400a      	ands	r2, r1
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	183b      	adds	r3, r7, r0
 8006086:	183a      	adds	r2, r7, r0
 8006088:	8812      	ldrh	r2, [r2, #0]
 800608a:	2110      	movs	r1, #16
 800608c:	404a      	eors	r2, r1
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	183b      	adds	r3, r7, r0
 8006092:	183a      	adds	r2, r7, r0
 8006094:	8812      	ldrh	r2, [r2, #0]
 8006096:	2120      	movs	r1, #32
 8006098:	404a      	eors	r2, r1
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	001a      	movs	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	183a      	adds	r2, r7, r0
 80060ac:	8812      	ldrh	r2, [r2, #0]
 80060ae:	4907      	ldr	r1, [pc, #28]	@ (80060cc <HAL_PCD_EP_DB_Transmit+0x81c>)
 80060b0:	430a      	orrs	r2, r1
 80060b2:	b292      	uxth	r2, r2
 80060b4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b024      	add	sp, #144	@ 0x90
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	ffff8000 	.word	0xffff8000
 80060c4:	00000406 	.word	0x00000406
 80060c8:	ffff8fbf 	.word	0xffff8fbf
 80060cc:	ffff8080 	.word	0xffff8080

080060d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	0008      	movs	r0, r1
 80060da:	0011      	movs	r1, r2
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	240a      	movs	r4, #10
 80060e0:	193b      	adds	r3, r7, r4
 80060e2:	1c02      	adds	r2, r0, #0
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	2308      	movs	r3, #8
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	1c0a      	adds	r2, r1, #0
 80060ec:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060ee:	0021      	movs	r1, r4
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	2280      	movs	r2, #128	@ 0x80
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	2207      	movs	r2, #7
 8006104:	401a      	ands	r2, r3
 8006106:	0013      	movs	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	189b      	adds	r3, r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	3310      	adds	r3, #16
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	18d3      	adds	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e00b      	b.n	8006130 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006118:	230a      	movs	r3, #10
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	0013      	movs	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	189b      	adds	r3, r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	3351      	adds	r3, #81	@ 0x51
 8006128:	33ff      	adds	r3, #255	@ 0xff
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006130:	2308      	movs	r3, #8
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	b29a      	uxth	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	80da      	strh	r2, [r3, #6]
 8006148:	e00b      	b.n	8006162 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2201      	movs	r2, #1
 800614e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	b29a      	uxth	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b29a      	uxth	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b007      	add	sp, #28
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	23b4      	movs	r3, #180	@ 0xb4
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	2101      	movs	r1, #1
 8006182:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	23b2      	movs	r3, #178	@ 0xb2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	2100      	movs	r1, #0
 800618c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2254      	movs	r2, #84	@ 0x54
 8006192:	5a9b      	ldrh	r3, [r3, r2]
 8006194:	b29b      	uxth	r3, r3
 8006196:	2201      	movs	r2, #1
 8006198:	4313      	orrs	r3, r2
 800619a:	b299      	uxth	r1, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2254      	movs	r2, #84	@ 0x54
 80061a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2254      	movs	r2, #84	@ 0x54
 80061a6:	5a9b      	ldrh	r3, [r3, r2]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2202      	movs	r2, #2
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b299      	uxth	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2254      	movs	r2, #84	@ 0x54
 80061b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	000a      	movs	r2, r1
 80061ca:	1cfb      	adds	r3, r7, #3
 80061cc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b002      	add	sp, #8
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f000 fb76 	bl	80068d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	d100      	bne.n	80061f8 <HAL_RCC_OscConfig+0x20>
 80061f6:	e08e      	b.n	8006316 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061f8:	4bc5      	ldr	r3, [pc, #788]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	220c      	movs	r2, #12
 80061fe:	4013      	ands	r3, r2
 8006200:	2b04      	cmp	r3, #4
 8006202:	d00e      	beq.n	8006222 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006204:	4bc2      	ldr	r3, [pc, #776]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	220c      	movs	r2, #12
 800620a:	4013      	ands	r3, r2
 800620c:	2b08      	cmp	r3, #8
 800620e:	d117      	bne.n	8006240 <HAL_RCC_OscConfig+0x68>
 8006210:	4bbf      	ldr	r3, [pc, #764]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	23c0      	movs	r3, #192	@ 0xc0
 8006216:	025b      	lsls	r3, r3, #9
 8006218:	401a      	ands	r2, r3
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	025b      	lsls	r3, r3, #9
 800621e:	429a      	cmp	r2, r3
 8006220:	d10e      	bne.n	8006240 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006222:	4bbb      	ldr	r3, [pc, #748]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	2380      	movs	r3, #128	@ 0x80
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	4013      	ands	r3, r2
 800622c:	d100      	bne.n	8006230 <HAL_RCC_OscConfig+0x58>
 800622e:	e071      	b.n	8006314 <HAL_RCC_OscConfig+0x13c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d000      	beq.n	800623a <HAL_RCC_OscConfig+0x62>
 8006238:	e06c      	b.n	8006314 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f000 fb4c 	bl	80068d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d107      	bne.n	8006258 <HAL_RCC_OscConfig+0x80>
 8006248:	4bb1      	ldr	r3, [pc, #708]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4bb0      	ldr	r3, [pc, #704]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800624e:	2180      	movs	r1, #128	@ 0x80
 8006250:	0249      	lsls	r1, r1, #9
 8006252:	430a      	orrs	r2, r1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e02f      	b.n	80062b8 <HAL_RCC_OscConfig+0xe0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10c      	bne.n	800627a <HAL_RCC_OscConfig+0xa2>
 8006260:	4bab      	ldr	r3, [pc, #684]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4baa      	ldr	r3, [pc, #680]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006266:	49ab      	ldr	r1, [pc, #684]	@ (8006514 <HAL_RCC_OscConfig+0x33c>)
 8006268:	400a      	ands	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	4ba8      	ldr	r3, [pc, #672]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4ba7      	ldr	r3, [pc, #668]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006272:	49a9      	ldr	r1, [pc, #676]	@ (8006518 <HAL_RCC_OscConfig+0x340>)
 8006274:	400a      	ands	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e01e      	b.n	80062b8 <HAL_RCC_OscConfig+0xe0>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d10e      	bne.n	80062a0 <HAL_RCC_OscConfig+0xc8>
 8006282:	4ba3      	ldr	r3, [pc, #652]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4ba2      	ldr	r3, [pc, #648]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006288:	2180      	movs	r1, #128	@ 0x80
 800628a:	02c9      	lsls	r1, r1, #11
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	4b9f      	ldr	r3, [pc, #636]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b9e      	ldr	r3, [pc, #632]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006296:	2180      	movs	r1, #128	@ 0x80
 8006298:	0249      	lsls	r1, r1, #9
 800629a:	430a      	orrs	r2, r1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xe0>
 80062a0:	4b9b      	ldr	r3, [pc, #620]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80062a6:	499b      	ldr	r1, [pc, #620]	@ (8006514 <HAL_RCC_OscConfig+0x33c>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	4b98      	ldr	r3, [pc, #608]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4b97      	ldr	r3, [pc, #604]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80062b2:	4999      	ldr	r1, [pc, #612]	@ (8006518 <HAL_RCC_OscConfig+0x340>)
 80062b4:	400a      	ands	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d014      	beq.n	80062ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fd f9d8 	bl	8003674 <HAL_GetTick>
 80062c4:	0003      	movs	r3, r0
 80062c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ca:	f7fd f9d3 	bl	8003674 <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b64      	cmp	r3, #100	@ 0x64
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e2fd      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	4013      	ands	r3, r2
 80062e6:	d0f0      	beq.n	80062ca <HAL_RCC_OscConfig+0xf2>
 80062e8:	e015      	b.n	8006316 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ea:	f7fd f9c3 	bl	8003674 <HAL_GetTick>
 80062ee:	0003      	movs	r3, r0
 80062f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f4:	f7fd f9be 	bl	8003674 <HAL_GetTick>
 80062f8:	0002      	movs	r2, r0
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	@ 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e2e8      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006306:	4b82      	ldr	r3, [pc, #520]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	4013      	ands	r3, r2
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x11c>
 8006312:	e000      	b.n	8006316 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006314:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2202      	movs	r2, #2
 800631c:	4013      	ands	r3, r2
 800631e:	d100      	bne.n	8006322 <HAL_RCC_OscConfig+0x14a>
 8006320:	e06c      	b.n	80063fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006322:	4b7b      	ldr	r3, [pc, #492]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	220c      	movs	r2, #12
 8006328:	4013      	ands	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800632c:	4b78      	ldr	r3, [pc, #480]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	220c      	movs	r2, #12
 8006332:	4013      	ands	r3, r2
 8006334:	2b08      	cmp	r3, #8
 8006336:	d11f      	bne.n	8006378 <HAL_RCC_OscConfig+0x1a0>
 8006338:	4b75      	ldr	r3, [pc, #468]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	23c0      	movs	r3, #192	@ 0xc0
 800633e:	025b      	lsls	r3, r3, #9
 8006340:	401a      	ands	r2, r3
 8006342:	2380      	movs	r3, #128	@ 0x80
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	429a      	cmp	r2, r3
 8006348:	d116      	bne.n	8006378 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634a:	4b71      	ldr	r3, [pc, #452]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2202      	movs	r2, #2
 8006350:	4013      	ands	r3, r2
 8006352:	d005      	beq.n	8006360 <HAL_RCC_OscConfig+0x188>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d001      	beq.n	8006360 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e2bb      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b6b      	ldr	r3, [pc, #428]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	22f8      	movs	r2, #248	@ 0xf8
 8006366:	4393      	bics	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	00da      	lsls	r2, r3, #3
 8006370:	4b67      	ldr	r3, [pc, #412]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006376:	e041      	b.n	80063fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d024      	beq.n	80063ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006380:	4b63      	ldr	r3, [pc, #396]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b62      	ldr	r3, [pc, #392]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006386:	2101      	movs	r1, #1
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fd f972 	bl	8003674 <HAL_GetTick>
 8006390:	0003      	movs	r3, r0
 8006392:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006396:	f7fd f96d 	bl	8003674 <HAL_GetTick>
 800639a:	0002      	movs	r2, r0
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e297      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a8:	4b59      	ldr	r3, [pc, #356]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	4013      	ands	r3, r2
 80063b0:	d0f1      	beq.n	8006396 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b2:	4b57      	ldr	r3, [pc, #348]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	22f8      	movs	r2, #248	@ 0xf8
 80063b8:	4393      	bics	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	00da      	lsls	r2, r3, #3
 80063c2:	4b53      	ldr	r3, [pc, #332]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e018      	b.n	80063fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ca:	4b51      	ldr	r3, [pc, #324]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b50      	ldr	r3, [pc, #320]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063d0:	2101      	movs	r1, #1
 80063d2:	438a      	bics	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d6:	f7fd f94d 	bl	8003674 <HAL_GetTick>
 80063da:	0003      	movs	r3, r0
 80063dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e0:	f7fd f948 	bl	8003674 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e272      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f2:	4b47      	ldr	r3, [pc, #284]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2202      	movs	r2, #2
 80063f8:	4013      	ands	r3, r2
 80063fa:	d1f1      	bne.n	80063e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	4013      	ands	r3, r2
 8006404:	d036      	beq.n	8006474 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006412:	4b3f      	ldr	r3, [pc, #252]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006414:	2101      	movs	r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641a:	f7fd f92b 	bl	8003674 <HAL_GetTick>
 800641e:	0003      	movs	r3, r0
 8006420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006424:	f7fd f926 	bl	8003674 <HAL_GetTick>
 8006428:	0002      	movs	r2, r0
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e250      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	2202      	movs	r2, #2
 800643c:	4013      	ands	r3, r2
 800643e:	d0f1      	beq.n	8006424 <HAL_RCC_OscConfig+0x24c>
 8006440:	e018      	b.n	8006474 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006442:	4b33      	ldr	r3, [pc, #204]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006446:	4b32      	ldr	r3, [pc, #200]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006448:	2101      	movs	r1, #1
 800644a:	438a      	bics	r2, r1
 800644c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644e:	f7fd f911 	bl	8003674 <HAL_GetTick>
 8006452:	0003      	movs	r3, r0
 8006454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006458:	f7fd f90c 	bl	8003674 <HAL_GetTick>
 800645c:	0002      	movs	r2, r0
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e236      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800646a:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	2202      	movs	r2, #2
 8006470:	4013      	ands	r3, r2
 8006472:	d1f1      	bne.n	8006458 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2204      	movs	r2, #4
 800647a:	4013      	ands	r3, r2
 800647c:	d100      	bne.n	8006480 <HAL_RCC_OscConfig+0x2a8>
 800647e:	e0b5      	b.n	80065ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006480:	201f      	movs	r0, #31
 8006482:	183b      	adds	r3, r7, r0
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006488:	4b21      	ldr	r3, [pc, #132]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	055b      	lsls	r3, r3, #21
 8006490:	4013      	ands	r3, r2
 8006492:	d110      	bne.n	80064b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	4b1d      	ldr	r3, [pc, #116]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 800649a:	2180      	movs	r1, #128	@ 0x80
 800649c:	0549      	lsls	r1, r1, #21
 800649e:	430a      	orrs	r2, r1
 80064a0:	61da      	str	r2, [r3, #28]
 80064a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	2380      	movs	r3, #128	@ 0x80
 80064a8:	055b      	lsls	r3, r3, #21
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064b0:	183b      	adds	r3, r7, r0
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b6:	4b19      	ldr	r3, [pc, #100]	@ (800651c <HAL_RCC_OscConfig+0x344>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2380      	movs	r3, #128	@ 0x80
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4013      	ands	r3, r2
 80064c0:	d11a      	bne.n	80064f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c2:	4b16      	ldr	r3, [pc, #88]	@ (800651c <HAL_RCC_OscConfig+0x344>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b15      	ldr	r3, [pc, #84]	@ (800651c <HAL_RCC_OscConfig+0x344>)
 80064c8:	2180      	movs	r1, #128	@ 0x80
 80064ca:	0049      	lsls	r1, r1, #1
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d0:	f7fd f8d0 	bl	8003674 <HAL_GetTick>
 80064d4:	0003      	movs	r3, r0
 80064d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064da:	f7fd f8cb 	bl	8003674 <HAL_GetTick>
 80064de:	0002      	movs	r2, r0
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b64      	cmp	r3, #100	@ 0x64
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e1f5      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ec:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <HAL_RCC_OscConfig+0x344>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2380      	movs	r3, #128	@ 0x80
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4013      	ands	r3, r2
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <HAL_RCC_OscConfig+0x348>
 8006500:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	4b02      	ldr	r3, [pc, #8]	@ (8006510 <HAL_RCC_OscConfig+0x338>)
 8006506:	2101      	movs	r1, #1
 8006508:	430a      	orrs	r2, r1
 800650a:	621a      	str	r2, [r3, #32]
 800650c:	e036      	b.n	800657c <HAL_RCC_OscConfig+0x3a4>
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	40021000 	.word	0x40021000
 8006514:	fffeffff 	.word	0xfffeffff
 8006518:	fffbffff 	.word	0xfffbffff
 800651c:	40007000 	.word	0x40007000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10c      	bne.n	8006542 <HAL_RCC_OscConfig+0x36a>
 8006528:	4bca      	ldr	r3, [pc, #808]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	4bc9      	ldr	r3, [pc, #804]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800652e:	2101      	movs	r1, #1
 8006530:	438a      	bics	r2, r1
 8006532:	621a      	str	r2, [r3, #32]
 8006534:	4bc7      	ldr	r3, [pc, #796]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	4bc6      	ldr	r3, [pc, #792]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800653a:	2104      	movs	r1, #4
 800653c:	438a      	bics	r2, r1
 800653e:	621a      	str	r2, [r3, #32]
 8006540:	e01c      	b.n	800657c <HAL_RCC_OscConfig+0x3a4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b05      	cmp	r3, #5
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x38c>
 800654a:	4bc2      	ldr	r3, [pc, #776]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	4bc1      	ldr	r3, [pc, #772]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006550:	2104      	movs	r1, #4
 8006552:	430a      	orrs	r2, r1
 8006554:	621a      	str	r2, [r3, #32]
 8006556:	4bbf      	ldr	r3, [pc, #764]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	4bbe      	ldr	r3, [pc, #760]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800655c:	2101      	movs	r1, #1
 800655e:	430a      	orrs	r2, r1
 8006560:	621a      	str	r2, [r3, #32]
 8006562:	e00b      	b.n	800657c <HAL_RCC_OscConfig+0x3a4>
 8006564:	4bbb      	ldr	r3, [pc, #748]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	4bba      	ldr	r3, [pc, #744]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	4bb8      	ldr	r3, [pc, #736]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	4bb7      	ldr	r3, [pc, #732]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006576:	2104      	movs	r1, #4
 8006578:	438a      	bics	r2, r1
 800657a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d014      	beq.n	80065ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006584:	f7fd f876 	bl	8003674 <HAL_GetTick>
 8006588:	0003      	movs	r3, r0
 800658a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800658c:	e009      	b.n	80065a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800658e:	f7fd f871 	bl	8003674 <HAL_GetTick>
 8006592:	0002      	movs	r2, r0
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	4aaf      	ldr	r2, [pc, #700]	@ (8006858 <HAL_RCC_OscConfig+0x680>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e19a      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a2:	4bac      	ldr	r3, [pc, #688]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	2202      	movs	r2, #2
 80065a8:	4013      	ands	r3, r2
 80065aa:	d0f0      	beq.n	800658e <HAL_RCC_OscConfig+0x3b6>
 80065ac:	e013      	b.n	80065d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ae:	f7fd f861 	bl	8003674 <HAL_GetTick>
 80065b2:	0003      	movs	r3, r0
 80065b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b6:	e009      	b.n	80065cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b8:	f7fd f85c 	bl	8003674 <HAL_GetTick>
 80065bc:	0002      	movs	r2, r0
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4aa5      	ldr	r2, [pc, #660]	@ (8006858 <HAL_RCC_OscConfig+0x680>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e185      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	2202      	movs	r2, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065d6:	231f      	movs	r3, #31
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d105      	bne.n	80065ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e0:	4b9c      	ldr	r3, [pc, #624]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80065e6:	499d      	ldr	r1, [pc, #628]	@ (800685c <HAL_RCC_OscConfig+0x684>)
 80065e8:	400a      	ands	r2, r1
 80065ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2210      	movs	r2, #16
 80065f2:	4013      	ands	r3, r2
 80065f4:	d063      	beq.n	80066be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d12a      	bne.n	8006654 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80065fe:	4b95      	ldr	r3, [pc, #596]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006602:	4b94      	ldr	r3, [pc, #592]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006604:	2104      	movs	r1, #4
 8006606:	430a      	orrs	r2, r1
 8006608:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800660a:	4b92      	ldr	r3, [pc, #584]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800660c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800660e:	4b91      	ldr	r3, [pc, #580]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006610:	2101      	movs	r1, #1
 8006612:	430a      	orrs	r2, r1
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fd f82d 	bl	8003674 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006620:	f7fd f828 	bl	8003674 <HAL_GetTick>
 8006624:	0002      	movs	r2, r0
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e152      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006632:	4b88      	ldr	r3, [pc, #544]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006636:	2202      	movs	r2, #2
 8006638:	4013      	ands	r3, r2
 800663a:	d0f1      	beq.n	8006620 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800663c:	4b85      	ldr	r3, [pc, #532]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800663e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006640:	22f8      	movs	r2, #248	@ 0xf8
 8006642:	4393      	bics	r3, r2
 8006644:	0019      	movs	r1, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	00da      	lsls	r2, r3, #3
 800664c:	4b81      	ldr	r3, [pc, #516]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800664e:	430a      	orrs	r2, r1
 8006650:	635a      	str	r2, [r3, #52]	@ 0x34
 8006652:	e034      	b.n	80066be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	3305      	adds	r3, #5
 800665a:	d111      	bne.n	8006680 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800665c:	4b7d      	ldr	r3, [pc, #500]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800665e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006660:	4b7c      	ldr	r3, [pc, #496]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006662:	2104      	movs	r1, #4
 8006664:	438a      	bics	r2, r1
 8006666:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006668:	4b7a      	ldr	r3, [pc, #488]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800666a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666c:	22f8      	movs	r2, #248	@ 0xf8
 800666e:	4393      	bics	r3, r2
 8006670:	0019      	movs	r1, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	00da      	lsls	r2, r3, #3
 8006678:	4b76      	ldr	r3, [pc, #472]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800667a:	430a      	orrs	r2, r1
 800667c:	635a      	str	r2, [r3, #52]	@ 0x34
 800667e:	e01e      	b.n	80066be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006680:	4b74      	ldr	r3, [pc, #464]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006684:	4b73      	ldr	r3, [pc, #460]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006686:	2104      	movs	r1, #4
 8006688:	430a      	orrs	r2, r1
 800668a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800668c:	4b71      	ldr	r3, [pc, #452]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800668e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006690:	4b70      	ldr	r3, [pc, #448]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006692:	2101      	movs	r1, #1
 8006694:	438a      	bics	r2, r1
 8006696:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006698:	f7fc ffec 	bl	8003674 <HAL_GetTick>
 800669c:	0003      	movs	r3, r0
 800669e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066a2:	f7fc ffe7 	bl	8003674 <HAL_GetTick>
 80066a6:	0002      	movs	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e111      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066b4:	4b67      	ldr	r3, [pc, #412]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80066b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b8:	2202      	movs	r2, #2
 80066ba:	4013      	ands	r3, r2
 80066bc:	d1f1      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2220      	movs	r2, #32
 80066c4:	4013      	ands	r3, r2
 80066c6:	d05c      	beq.n	8006782 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066c8:	4b62      	ldr	r3, [pc, #392]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	220c      	movs	r2, #12
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d00e      	beq.n	80066f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80066d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	220c      	movs	r2, #12
 80066da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d114      	bne.n	800670a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80066e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	23c0      	movs	r3, #192	@ 0xc0
 80066e6:	025b      	lsls	r3, r3, #9
 80066e8:	401a      	ands	r2, r3
 80066ea:	23c0      	movs	r3, #192	@ 0xc0
 80066ec:	025b      	lsls	r3, r3, #9
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d10b      	bne.n	800670a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80066f2:	4b58      	ldr	r3, [pc, #352]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80066f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	4013      	ands	r3, r2
 80066fc:	d040      	beq.n	8006780 <HAL_RCC_OscConfig+0x5a8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d03c      	beq.n	8006780 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0e6      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006712:	4b50      	ldr	r3, [pc, #320]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006716:	4b4f      	ldr	r3, [pc, #316]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006718:	2180      	movs	r1, #128	@ 0x80
 800671a:	0249      	lsls	r1, r1, #9
 800671c:	430a      	orrs	r2, r1
 800671e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fc ffa8 	bl	8003674 <HAL_GetTick>
 8006724:	0003      	movs	r3, r0
 8006726:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800672a:	f7fc ffa3 	bl	8003674 <HAL_GetTick>
 800672e:	0002      	movs	r2, r0
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0cd      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800673e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	029b      	lsls	r3, r3, #10
 8006744:	4013      	ands	r3, r2
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x552>
 8006748:	e01b      	b.n	8006782 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800674a:	4b42      	ldr	r3, [pc, #264]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800674c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800674e:	4b41      	ldr	r3, [pc, #260]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006750:	4943      	ldr	r1, [pc, #268]	@ (8006860 <HAL_RCC_OscConfig+0x688>)
 8006752:	400a      	ands	r2, r1
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006756:	f7fc ff8d 	bl	8003674 <HAL_GetTick>
 800675a:	0003      	movs	r3, r0
 800675c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006760:	f7fc ff88 	bl	8003674 <HAL_GetTick>
 8006764:	0002      	movs	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e0b2      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006772:	4b38      	ldr	r3, [pc, #224]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	4013      	ands	r3, r2
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x588>
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006780:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d100      	bne.n	800678c <HAL_RCC_OscConfig+0x5b4>
 800678a:	e0a4      	b.n	80068d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800678c:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	220c      	movs	r2, #12
 8006792:	4013      	ands	r3, r2
 8006794:	2b08      	cmp	r3, #8
 8006796:	d100      	bne.n	800679a <HAL_RCC_OscConfig+0x5c2>
 8006798:	e078      	b.n	800688c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d14c      	bne.n	800683c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067a8:	492e      	ldr	r1, [pc, #184]	@ (8006864 <HAL_RCC_OscConfig+0x68c>)
 80067aa:	400a      	ands	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ae:	f7fc ff61 	bl	8003674 <HAL_GetTick>
 80067b2:	0003      	movs	r3, r0
 80067b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fc ff5c 	bl	8003674 <HAL_GetTick>
 80067bc:	0002      	movs	r2, r0
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e086      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ca:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	2380      	movs	r3, #128	@ 0x80
 80067d0:	049b      	lsls	r3, r3, #18
 80067d2:	4013      	ands	r3, r2
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067da:	220f      	movs	r2, #15
 80067dc:	4393      	bics	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067e6:	430a      	orrs	r2, r1
 80067e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006868 <HAL_RCC_OscConfig+0x690>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	0019      	movs	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	431a      	orrs	r2, r3
 80067fe:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800680a:	2180      	movs	r1, #128	@ 0x80
 800680c:	0449      	lsls	r1, r1, #17
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006812:	f7fc ff2f 	bl	8003674 <HAL_GetTick>
 8006816:	0003      	movs	r3, r0
 8006818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fc ff2a 	bl	8003674 <HAL_GetTick>
 8006820:	0002      	movs	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e054      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800682e:	4b09      	ldr	r3, [pc, #36]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	2380      	movs	r3, #128	@ 0x80
 8006834:	049b      	lsls	r3, r3, #18
 8006836:	4013      	ands	r3, r2
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x644>
 800683a:	e04c      	b.n	80068d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683c:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <HAL_RCC_OscConfig+0x67c>)
 8006842:	4908      	ldr	r1, [pc, #32]	@ (8006864 <HAL_RCC_OscConfig+0x68c>)
 8006844:	400a      	ands	r2, r1
 8006846:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006848:	f7fc ff14 	bl	8003674 <HAL_GetTick>
 800684c:	0003      	movs	r3, r0
 800684e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006850:	e015      	b.n	800687e <HAL_RCC_OscConfig+0x6a6>
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	40021000 	.word	0x40021000
 8006858:	00001388 	.word	0x00001388
 800685c:	efffffff 	.word	0xefffffff
 8006860:	fffeffff 	.word	0xfffeffff
 8006864:	feffffff 	.word	0xfeffffff
 8006868:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800686c:	f7fc ff02 	bl	8003674 <HAL_GetTick>
 8006870:	0002      	movs	r2, r0
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e02c      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687e:	4b18      	ldr	r3, [pc, #96]	@ (80068e0 <HAL_RCC_OscConfig+0x708>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	2380      	movs	r3, #128	@ 0x80
 8006884:	049b      	lsls	r3, r3, #18
 8006886:	4013      	ands	r3, r2
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0x694>
 800688a:	e024      	b.n	80068d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e01f      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006898:	4b11      	ldr	r3, [pc, #68]	@ (80068e0 <HAL_RCC_OscConfig+0x708>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800689e:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <HAL_RCC_OscConfig+0x708>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	23c0      	movs	r3, #192	@ 0xc0
 80068a8:	025b      	lsls	r3, r3, #9
 80068aa:	401a      	ands	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d10e      	bne.n	80068d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	220f      	movs	r2, #15
 80068b8:	401a      	ands	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	23f0      	movs	r3, #240	@ 0xf0
 80068c6:	039b      	lsls	r3, r3, #14
 80068c8:	401a      	ands	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d001      	beq.n	80068d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b008      	add	sp, #32
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40021000 	.word	0x40021000

080068e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0bf      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068f8:	4b61      	ldr	r3, [pc, #388]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d911      	bls.n	800692a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b5e      	ldr	r3, [pc, #376]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	4393      	bics	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	4b5b      	ldr	r3, [pc, #364]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006918:	4b59      	ldr	r3, [pc, #356]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2201      	movs	r2, #1
 800691e:	4013      	ands	r3, r2
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d001      	beq.n	800692a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0a6      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2202      	movs	r2, #2
 8006930:	4013      	ands	r3, r2
 8006932:	d015      	beq.n	8006960 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2204      	movs	r2, #4
 800693a:	4013      	ands	r3, r2
 800693c:	d006      	beq.n	800694c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800693e:	4b51      	ldr	r3, [pc, #324]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	4b50      	ldr	r3, [pc, #320]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006944:	21e0      	movs	r1, #224	@ 0xe0
 8006946:	00c9      	lsls	r1, r1, #3
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800694c:	4b4d      	ldr	r3, [pc, #308]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	22f0      	movs	r2, #240	@ 0xf0
 8006952:	4393      	bics	r3, r2
 8006954:	0019      	movs	r1, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2201      	movs	r2, #1
 8006966:	4013      	ands	r3, r2
 8006968:	d04c      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d107      	bne.n	8006982 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	4b44      	ldr	r3, [pc, #272]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	029b      	lsls	r3, r3, #10
 800697a:	4013      	ands	r3, r2
 800697c:	d120      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e07a      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	2380      	movs	r3, #128	@ 0x80
 8006990:	049b      	lsls	r3, r3, #18
 8006992:	4013      	ands	r3, r2
 8006994:	d114      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06e      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069a2:	4b38      	ldr	r3, [pc, #224]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 80069a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069a6:	2380      	movs	r3, #128	@ 0x80
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	4013      	ands	r3, r2
 80069ac:	d108      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e062      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b2:	4b34      	ldr	r3, [pc, #208]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2202      	movs	r2, #2
 80069b8:	4013      	ands	r3, r2
 80069ba:	d101      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e05b      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069c0:	4b30      	ldr	r3, [pc, #192]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	4393      	bics	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d4:	f7fc fe4e 	bl	8003674 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069dc:	e009      	b.n	80069f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069de:	f7fc fe49 	bl	8003674 <HAL_GetTick>
 80069e2:	0002      	movs	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	4a27      	ldr	r2, [pc, #156]	@ (8006a88 <HAL_RCC_ClockConfig+0x1a4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e042      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	4b24      	ldr	r3, [pc, #144]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	220c      	movs	r2, #12
 80069f8:	401a      	ands	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d1ec      	bne.n	80069de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a04:	4b1e      	ldr	r3, [pc, #120]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d211      	bcs.n	8006a36 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a12:	4b1b      	ldr	r3, [pc, #108]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2201      	movs	r2, #1
 8006a18:	4393      	bics	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a24:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <HAL_RCC_ClockConfig+0x19c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d001      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e020      	b.n	8006a78 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a40:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <HAL_RCC_ClockConfig+0x1a8>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	0019      	movs	r1, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a54:	f000 f820 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a58:	0001      	movs	r1, r0
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <HAL_RCC_ClockConfig+0x1a0>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	220f      	movs	r2, #15
 8006a62:	4013      	ands	r3, r2
 8006a64:	4a0a      	ldr	r2, [pc, #40]	@ (8006a90 <HAL_RCC_ClockConfig+0x1ac>)
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	000a      	movs	r2, r1
 8006a6a:	40da      	lsrs	r2, r3
 8006a6c:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <HAL_RCC_ClockConfig+0x1b0>)
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006a70:	2003      	movs	r0, #3
 8006a72:	f7fc fdb9 	bl	80035e8 <HAL_InitTick>
  
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40021000 	.word	0x40021000
 8006a88:	00001388 	.word	0x00001388
 8006a8c:	fffff8ff 	.word	0xfffff8ff
 8006a90:	08011dd8 	.word	0x08011dd8
 8006a94:	20000018 	.word	0x20000018

08006a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	220c      	movs	r2, #12
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d046      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0xb8>
 8006ac2:	d848      	bhi.n	8006b56 <HAL_RCC_GetSysClockFreq+0xbe>
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d002      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x36>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d003      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x3c>
 8006acc:	e043      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ace:	4b27      	ldr	r3, [pc, #156]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ad0:	613b      	str	r3, [r7, #16]
      break;
 8006ad2:	e043      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0c9b      	lsrs	r3, r3, #18
 8006ad8:	220f      	movs	r2, #15
 8006ada:	4013      	ands	r3, r2
 8006adc:	4a24      	ldr	r2, [pc, #144]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006ade:	5cd3      	ldrb	r3, [r2, r3]
 8006ae0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006ae2:	4b21      	ldr	r3, [pc, #132]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	220f      	movs	r2, #15
 8006ae8:	4013      	ands	r3, r2
 8006aea:	4a22      	ldr	r2, [pc, #136]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006aec:	5cd3      	ldrb	r3, [r2, r3]
 8006aee:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	23c0      	movs	r3, #192	@ 0xc0
 8006af4:	025b      	lsls	r3, r3, #9
 8006af6:	401a      	ands	r2, r3
 8006af8:	2380      	movs	r3, #128	@ 0x80
 8006afa:	025b      	lsls	r3, r3, #9
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d109      	bne.n	8006b14 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	481a      	ldr	r0, [pc, #104]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b04:	f7f9 fb1c 	bl	8000140 <__udivsi3>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	001a      	movs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4353      	muls	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e01a      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	23c0      	movs	r3, #192	@ 0xc0
 8006b18:	025b      	lsls	r3, r3, #9
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	23c0      	movs	r3, #192	@ 0xc0
 8006b1e:	025b      	lsls	r3, r3, #9
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d109      	bne.n	8006b38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4814      	ldr	r0, [pc, #80]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006b28:	f7f9 fb0a 	bl	8000140 <__udivsi3>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	001a      	movs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4353      	muls	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	480c      	ldr	r0, [pc, #48]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b3c:	f7f9 fb00 	bl	8000140 <__udivsi3>
 8006b40:	0003      	movs	r3, r0
 8006b42:	001a      	movs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4353      	muls	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	613b      	str	r3, [r7, #16]
      break;
 8006b4e:	e005      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006b50:	4b09      	ldr	r3, [pc, #36]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006b52:	613b      	str	r3, [r7, #16]
      break;
 8006b54:	e002      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b56:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b58:	613b      	str	r3, [r7, #16]
      break;
 8006b5a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006b5c:	693b      	ldr	r3, [r7, #16]
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b006      	add	sp, #24
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	007a1200 	.word	0x007a1200
 8006b70:	08011df0 	.word	0x08011df0
 8006b74:	08011e00 	.word	0x08011e00
 8006b78:	02dc6c00 	.word	0x02dc6c00

08006b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b80:	4b02      	ldr	r3, [pc, #8]	@ (8006b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	0018      	movs	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	20000018 	.word	0x20000018

08006b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006b94:	f7ff fff2 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006b98:	0001      	movs	r1, r0
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	4a04      	ldr	r2, [pc, #16]	@ (8006bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ba6:	5cd3      	ldrb	r3, [r2, r3]
 8006ba8:	40d9      	lsrs	r1, r3
 8006baa:	000b      	movs	r3, r1
}    
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	08011de8 	.word	0x08011de8

08006bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	2380      	movs	r3, #128	@ 0x80
 8006bd2:	025b      	lsls	r3, r3, #9
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d100      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006bd8:	e08e      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006bda:	2017      	movs	r0, #23
 8006bdc:	183b      	adds	r3, r7, r0
 8006bde:	2200      	movs	r2, #0
 8006be0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006be2:	4b6e      	ldr	r3, [pc, #440]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006be4:	69da      	ldr	r2, [r3, #28]
 8006be6:	2380      	movs	r3, #128	@ 0x80
 8006be8:	055b      	lsls	r3, r3, #21
 8006bea:	4013      	ands	r3, r2
 8006bec:	d110      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bee:	4b6b      	ldr	r3, [pc, #428]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bf4:	2180      	movs	r1, #128	@ 0x80
 8006bf6:	0549      	lsls	r1, r1, #21
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
 8006bfc:	4b67      	ldr	r3, [pc, #412]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	2380      	movs	r3, #128	@ 0x80
 8006c02:	055b      	lsls	r3, r3, #21
 8006c04:	4013      	ands	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c0a:	183b      	adds	r3, r7, r0
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c10:	4b63      	ldr	r3, [pc, #396]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	@ 0x80
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d11a      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c1c:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b5f      	ldr	r3, [pc, #380]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c22:	2180      	movs	r1, #128	@ 0x80
 8006c24:	0049      	lsls	r1, r1, #1
 8006c26:	430a      	orrs	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c2a:	f7fc fd23 	bl	8003674 <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c32:	e008      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c34:	f7fc fd1e 	bl	8003674 <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	@ 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e0a6      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c46:	4b56      	ldr	r3, [pc, #344]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c52:	4b52      	ldr	r3, [pc, #328]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	23c0      	movs	r3, #192	@ 0xc0
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d034      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	23c0      	movs	r3, #192	@ 0xc0
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d02c      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c74:	4b49      	ldr	r3, [pc, #292]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	4a4a      	ldr	r2, [pc, #296]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c7e:	4b47      	ldr	r3, [pc, #284]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	4b46      	ldr	r3, [pc, #280]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c84:	2180      	movs	r1, #128	@ 0x80
 8006c86:	0249      	lsls	r1, r1, #9
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c8c:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	4b42      	ldr	r3, [pc, #264]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c92:	4945      	ldr	r1, [pc, #276]	@ (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006c94:	400a      	ands	r2, r1
 8006c96:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c98:	4b40      	ldr	r3, [pc, #256]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca6:	f7fc fce5 	bl	8003674 <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cae:	e009      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fc fce0 	bl	8003674 <HAL_GetTick>
 8006cb4:	0002      	movs	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	4a3c      	ldr	r2, [pc, #240]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e067      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc4:	4b35      	ldr	r3, [pc, #212]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cce:	4b33      	ldr	r3, [pc, #204]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	4a34      	ldr	r2, [pc, #208]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ce2:	2317      	movs	r3, #23
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cec:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cf2:	492f      	ldr	r1, [pc, #188]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d02:	4b26      	ldr	r3, [pc, #152]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d06:	2203      	movs	r2, #3
 8006d08:	4393      	bics	r3, r2
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	4b22      	ldr	r3, [pc, #136]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d12:	430a      	orrs	r2, r1
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d20:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	4a23      	ldr	r2, [pc, #140]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	0019      	movs	r1, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d30:	430a      	orrs	r2, r1
 8006d32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d3e:	4b17      	ldr	r3, [pc, #92]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	2210      	movs	r2, #16
 8006d44:	4393      	bics	r3, r2
 8006d46:	0019      	movs	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	4b13      	ldr	r3, [pc, #76]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	2380      	movs	r3, #128	@ 0x80
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	2280      	movs	r2, #128	@ 0x80
 8006d64:	4393      	bics	r3, r2
 8006d66:	0019      	movs	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d7e:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	2240      	movs	r2, #64	@ 0x40
 8006d84:	4393      	bics	r3, r2
 8006d86:	0019      	movs	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b006      	add	sp, #24
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40007000 	.word	0x40007000
 8006da4:	fffffcff 	.word	0xfffffcff
 8006da8:	fffeffff 	.word	0xfffeffff
 8006dac:	00001388 	.word	0x00001388
 8006db0:	efffffff 	.word	0xefffffff
 8006db4:	fffcffff 	.word	0xfffcffff

08006db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e0a8      	b.n	8006f1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	2382      	movs	r3, #130	@ 0x82
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d009      	beq.n	8006df2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	61da      	str	r2, [r3, #28]
 8006de4:	e005      	b.n	8006df2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	225d      	movs	r2, #93	@ 0x5d
 8006dfc:	5c9b      	ldrb	r3, [r3, r2]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d107      	bne.n	8006e14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	225c      	movs	r2, #92	@ 0x5c
 8006e08:	2100      	movs	r1, #0
 8006e0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f7fb feea 	bl	8002be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	225d      	movs	r2, #93	@ 0x5d
 8006e18:	2102      	movs	r1, #2
 8006e1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2140      	movs	r1, #64	@ 0x40
 8006e28:	438a      	bics	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	23e0      	movs	r3, #224	@ 0xe0
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d902      	bls.n	8006e3e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	e002      	b.n	8006e44 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e3e:	2380      	movs	r3, #128	@ 0x80
 8006e40:	015b      	lsls	r3, r3, #5
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	23f0      	movs	r3, #240	@ 0xf0
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d008      	beq.n	8006e62 <HAL_SPI_Init+0xaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	23e0      	movs	r3, #224	@ 0xe0
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	2382      	movs	r3, #130	@ 0x82
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6899      	ldr	r1, [r3, #8]
 8006e70:	2384      	movs	r3, #132	@ 0x84
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	400b      	ands	r3, r1
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	400b      	ands	r3, r1
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2101      	movs	r1, #1
 8006e88:	400b      	ands	r3, r1
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6999      	ldr	r1, [r3, #24]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	400b      	ands	r3, r1
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	2138      	movs	r1, #56	@ 0x38
 8006e9e:	400b      	ands	r3, r1
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	2180      	movs	r1, #128	@ 0x80
 8006ea8:	400b      	ands	r3, r1
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	0011      	movs	r1, r2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	401a      	ands	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	2110      	movs	r1, #16
 8006ed0:	400b      	ands	r3, r1
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed8:	2108      	movs	r1, #8
 8006eda:	400b      	ands	r3, r1
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68d9      	ldr	r1, [r3, #12]
 8006ee2:	23f0      	movs	r3, #240	@ 0xf0
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	0011      	movs	r1, r2
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	2380      	movs	r3, #128	@ 0x80
 8006ef0:	015b      	lsls	r3, r3, #5
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4907      	ldr	r1, [pc, #28]	@ (8006f24 <HAL_SPI_Init+0x16c>)
 8006f08:	400a      	ands	r2, r1
 8006f0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	225d      	movs	r2, #93	@ 0x5d
 8006f16:	2101      	movs	r1, #1
 8006f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b004      	add	sp, #16
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	fffff7ff 	.word	0xfffff7ff

08006f28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	1dbb      	adds	r3, r7, #6
 8006f36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f38:	231f      	movs	r3, #31
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	225c      	movs	r2, #92	@ 0x5c
 8006f44:	5c9b      	ldrb	r3, [r3, r2]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_SPI_Transmit+0x26>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e147      	b.n	80071de <HAL_SPI_Transmit+0x2b6>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	225c      	movs	r2, #92	@ 0x5c
 8006f52:	2101      	movs	r1, #1
 8006f54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f56:	f7fc fb8d 	bl	8003674 <HAL_GetTick>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f5e:	2316      	movs	r3, #22
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	1dba      	adds	r2, r7, #6
 8006f64:	8812      	ldrh	r2, [r2, #0]
 8006f66:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	225d      	movs	r2, #93	@ 0x5d
 8006f6c:	5c9b      	ldrb	r3, [r3, r2]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d004      	beq.n	8006f7e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006f74:	231f      	movs	r3, #31
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2202      	movs	r2, #2
 8006f7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f7c:	e128      	b.n	80071d0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_SPI_Transmit+0x64>
 8006f84:	1dbb      	adds	r3, r7, #6
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006f8c:	231f      	movs	r3, #31
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	2201      	movs	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f94:	e11c      	b.n	80071d0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	225d      	movs	r2, #93	@ 0x5d
 8006f9a:	2103      	movs	r1, #3
 8006f9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1dba      	adds	r2, r7, #6
 8006fae:	8812      	ldrh	r2, [r2, #0]
 8006fb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1dba      	adds	r2, r7, #6
 8006fb6:	8812      	ldrh	r2, [r2, #0]
 8006fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2244      	movs	r2, #68	@ 0x44
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2246      	movs	r2, #70	@ 0x46
 8006fcc:	2100      	movs	r1, #0
 8006fce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d110      	bne.n	800700a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2140      	movs	r1, #64	@ 0x40
 8006ff4:	438a      	bics	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2180      	movs	r1, #128	@ 0x80
 8007004:	01c9      	lsls	r1, r1, #7
 8007006:	430a      	orrs	r2, r1
 8007008:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2240      	movs	r2, #64	@ 0x40
 8007012:	4013      	ands	r3, r2
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	d007      	beq.n	8007028 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2140      	movs	r1, #64	@ 0x40
 8007024:	430a      	orrs	r2, r1
 8007026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	23e0      	movs	r3, #224	@ 0xe0
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	429a      	cmp	r2, r3
 8007032:	d952      	bls.n	80070da <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_SPI_Transmit+0x11e>
 800703c:	2316      	movs	r3, #22
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d143      	bne.n	80070ce <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	881a      	ldrh	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	1c9a      	adds	r2, r3, #2
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800706a:	e030      	b.n	80070ce <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2202      	movs	r2, #2
 8007074:	4013      	ands	r3, r2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d112      	bne.n	80070a0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	881a      	ldrh	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	1c9a      	adds	r2, r3, #2
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800709e:	e016      	b.n	80070ce <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a0:	f7fc fae8 	bl	8003674 <HAL_GetTick>
 80070a4:	0002      	movs	r2, r0
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d802      	bhi.n	80070b6 <HAL_SPI_Transmit+0x18e>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	d102      	bne.n	80070bc <HAL_SPI_Transmit+0x194>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d108      	bne.n	80070ce <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80070bc:	231f      	movs	r3, #31
 80070be:	18fb      	adds	r3, r7, r3
 80070c0:	2203      	movs	r2, #3
 80070c2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	225d      	movs	r2, #93	@ 0x5d
 80070c8:	2101      	movs	r1, #1
 80070ca:	5499      	strb	r1, [r3, r2]
          goto error;
 80070cc:	e080      	b.n	80071d0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1c9      	bne.n	800706c <HAL_SPI_Transmit+0x144>
 80070d8:	e053      	b.n	8007182 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <HAL_SPI_Transmit+0x1c4>
 80070e2:	2316      	movs	r3, #22
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d145      	bne.n	8007178 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007112:	e031      	b.n	8007178 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2202      	movs	r2, #2
 800711c:	4013      	ands	r3, r2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d113      	bne.n	800714a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007148:	e016      	b.n	8007178 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714a:	f7fc fa93 	bl	8003674 <HAL_GetTick>
 800714e:	0002      	movs	r2, r0
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d802      	bhi.n	8007160 <HAL_SPI_Transmit+0x238>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	d102      	bne.n	8007166 <HAL_SPI_Transmit+0x23e>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d108      	bne.n	8007178 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007166:	231f      	movs	r3, #31
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	2203      	movs	r2, #3
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	225d      	movs	r2, #93	@ 0x5d
 8007172:	2101      	movs	r1, #1
 8007174:	5499      	strb	r1, [r3, r2]
          goto error;
 8007176:	e02b      	b.n	80071d0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1c8      	bne.n	8007114 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0018      	movs	r0, r3
 800718a:	f000 fcfb 	bl	8007b84 <SPI_EndRxTxTransaction>
 800718e:	1e03      	subs	r3, r0, #0
 8007190:	d002      	beq.n	8007198 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d004      	beq.n	80071c8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80071be:	231f      	movs	r3, #31
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e003      	b.n	80071d0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	225d      	movs	r2, #93	@ 0x5d
 80071cc:	2101      	movs	r1, #1
 80071ce:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	225c      	movs	r2, #92	@ 0x5c
 80071d4:	2100      	movs	r1, #0
 80071d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071d8:	231f      	movs	r3, #31
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	781b      	ldrb	r3, [r3, #0]
}
 80071de:	0018      	movs	r0, r3
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b008      	add	sp, #32
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b089      	sub	sp, #36	@ 0x24
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	1dbb      	adds	r3, r7, #6
 80071f6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f8:	2117      	movs	r1, #23
 80071fa:	187b      	adds	r3, r7, r1
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	225d      	movs	r2, #93	@ 0x5d
 8007204:	5c9b      	ldrb	r3, [r3, r2]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d003      	beq.n	8007214 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800720c:	187b      	adds	r3, r7, r1
 800720e:	2202      	movs	r2, #2
 8007210:	701a      	strb	r2, [r3, #0]
    goto error;
 8007212:	e12b      	b.n	800746c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	2382      	movs	r3, #130	@ 0x82
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	429a      	cmp	r2, r3
 800721e:	d113      	bne.n	8007248 <HAL_SPI_Receive+0x60>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10f      	bne.n	8007248 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	225d      	movs	r2, #93	@ 0x5d
 800722c:	2104      	movs	r1, #4
 800722e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007230:	1dbb      	adds	r3, r7, #6
 8007232:	881c      	ldrh	r4, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	0023      	movs	r3, r4
 8007240:	f000 f924 	bl	800748c <HAL_SPI_TransmitReceive>
 8007244:	0003      	movs	r3, r0
 8007246:	e118      	b.n	800747a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	225c      	movs	r2, #92	@ 0x5c
 800724c:	5c9b      	ldrb	r3, [r3, r2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_SPI_Receive+0x6e>
 8007252:	2302      	movs	r3, #2
 8007254:	e111      	b.n	800747a <HAL_SPI_Receive+0x292>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	225c      	movs	r2, #92	@ 0x5c
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800725e:	f7fc fa09 	bl	8003674 <HAL_GetTick>
 8007262:	0003      	movs	r3, r0
 8007264:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_SPI_Receive+0x8c>
 800726c:	1dbb      	adds	r3, r7, #6
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007274:	2317      	movs	r3, #23
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	2201      	movs	r2, #1
 800727a:	701a      	strb	r2, [r3, #0]
    goto error;
 800727c:	e0f6      	b.n	800746c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	225d      	movs	r2, #93	@ 0x5d
 8007282:	2104      	movs	r1, #4
 8007284:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1dba      	adds	r2, r7, #6
 8007296:	2144      	movs	r1, #68	@ 0x44
 8007298:	8812      	ldrh	r2, [r2, #0]
 800729a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	1dba      	adds	r2, r7, #6
 80072a0:	2146      	movs	r1, #70	@ 0x46
 80072a2:	8812      	ldrh	r2, [r2, #0]
 80072a4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	23e0      	movs	r3, #224	@ 0xe0
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d908      	bls.n	80072e2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	496a      	ldr	r1, [pc, #424]	@ (8007484 <HAL_SPI_Receive+0x29c>)
 80072dc:	400a      	ands	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	e008      	b.n	80072f4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2180      	movs	r1, #128	@ 0x80
 80072ee:	0149      	lsls	r1, r1, #5
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d10f      	bne.n	8007320 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2140      	movs	r1, #64	@ 0x40
 800730c:	438a      	bics	r2, r1
 800730e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	495b      	ldr	r1, [pc, #364]	@ (8007488 <HAL_SPI_Receive+0x2a0>)
 800731c:	400a      	ands	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2240      	movs	r2, #64	@ 0x40
 8007328:	4013      	ands	r3, r2
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d007      	beq.n	800733e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2140      	movs	r1, #64	@ 0x40
 800733a:	430a      	orrs	r2, r1
 800733c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	23e0      	movs	r3, #224	@ 0xe0
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	429a      	cmp	r2, r3
 8007348:	d900      	bls.n	800734c <HAL_SPI_Receive+0x164>
 800734a:	e071      	b.n	8007430 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800734c:	e035      	b.n	80073ba <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2201      	movs	r2, #1
 8007356:	4013      	ands	r3, r2
 8007358:	2b01      	cmp	r3, #1
 800735a:	d117      	bne.n	800738c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	001a      	movs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2246      	movs	r2, #70	@ 0x46
 800737c:	5a9b      	ldrh	r3, [r3, r2]
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b299      	uxth	r1, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2246      	movs	r2, #70	@ 0x46
 8007388:	5299      	strh	r1, [r3, r2]
 800738a:	e016      	b.n	80073ba <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800738c:	f7fc f972 	bl	8003674 <HAL_GetTick>
 8007390:	0002      	movs	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d802      	bhi.n	80073a2 <HAL_SPI_Receive+0x1ba>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	d102      	bne.n	80073a8 <HAL_SPI_Receive+0x1c0>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d108      	bne.n	80073ba <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80073a8:	2317      	movs	r3, #23
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	2203      	movs	r2, #3
 80073ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	225d      	movs	r2, #93	@ 0x5d
 80073b4:	2101      	movs	r1, #1
 80073b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80073b8:	e058      	b.n	800746c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2246      	movs	r2, #70	@ 0x46
 80073be:	5a9b      	ldrh	r3, [r3, r2]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1c3      	bne.n	800734e <HAL_SPI_Receive+0x166>
 80073c6:	e039      	b.n	800743c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2201      	movs	r2, #1
 80073d0:	4013      	ands	r3, r2
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d115      	bne.n	8007402 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	b292      	uxth	r2, r2
 80073e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	1c9a      	adds	r2, r3, #2
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2246      	movs	r2, #70	@ 0x46
 80073f2:	5a9b      	ldrh	r3, [r3, r2]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b299      	uxth	r1, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2246      	movs	r2, #70	@ 0x46
 80073fe:	5299      	strh	r1, [r3, r2]
 8007400:	e016      	b.n	8007430 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007402:	f7fc f937 	bl	8003674 <HAL_GetTick>
 8007406:	0002      	movs	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d802      	bhi.n	8007418 <HAL_SPI_Receive+0x230>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	d102      	bne.n	800741e <HAL_SPI_Receive+0x236>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800741e:	2317      	movs	r3, #23
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	2203      	movs	r2, #3
 8007424:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	225d      	movs	r2, #93	@ 0x5d
 800742a:	2101      	movs	r1, #1
 800742c:	5499      	strb	r1, [r3, r2]
          goto error;
 800742e:	e01d      	b.n	800746c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2246      	movs	r2, #70	@ 0x46
 8007434:	5a9b      	ldrh	r3, [r3, r2]
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1c5      	bne.n	80073c8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	0018      	movs	r0, r3
 8007444:	f000 fb40 	bl	8007ac8 <SPI_EndRxTransaction>
 8007448:	1e03      	subs	r3, r0, #0
 800744a:	d002      	beq.n	8007452 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800745a:	2317      	movs	r3, #23
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	2201      	movs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	e003      	b.n	800746c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	225d      	movs	r2, #93	@ 0x5d
 8007468:	2101      	movs	r1, #1
 800746a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	225c      	movs	r2, #92	@ 0x5c
 8007470:	2100      	movs	r1, #0
 8007472:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007474:	2317      	movs	r3, #23
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	781b      	ldrb	r3, [r3, #0]
}
 800747a:	0018      	movs	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	b007      	add	sp, #28
 8007480:	bd90      	pop	{r4, r7, pc}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	ffffefff 	.word	0xffffefff
 8007488:	ffffbfff 	.word	0xffffbfff

0800748c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	001a      	movs	r2, r3
 800749a:	1cbb      	adds	r3, r7, #2
 800749c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800749e:	2301      	movs	r3, #1
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074a2:	2323      	movs	r3, #35	@ 0x23
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	225c      	movs	r2, #92	@ 0x5c
 80074ae:	5c9b      	ldrb	r3, [r3, r2]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x2c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e1c4      	b.n	8007842 <HAL_SPI_TransmitReceive+0x3b6>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	225c      	movs	r2, #92	@ 0x5c
 80074bc:	2101      	movs	r1, #1
 80074be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c0:	f7fc f8d8 	bl	8003674 <HAL_GetTick>
 80074c4:	0003      	movs	r3, r0
 80074c6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074c8:	201b      	movs	r0, #27
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	215d      	movs	r1, #93	@ 0x5d
 80074d0:	5c52      	ldrb	r2, [r2, r1]
 80074d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074da:	2312      	movs	r3, #18
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	1cba      	adds	r2, r7, #2
 80074e0:	8812      	ldrh	r2, [r2, #0]
 80074e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074e4:	183b      	adds	r3, r7, r0
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d011      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x84>
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	2382      	movs	r3, #130	@ 0x82
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d107      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x7a>
 80074fe:	183b      	adds	r3, r7, r0
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d004      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007506:	2323      	movs	r3, #35	@ 0x23
 8007508:	18fb      	adds	r3, r7, r3
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
    goto error;
 800750e:	e191      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d006      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x98>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x98>
 800751c:	1cbb      	adds	r3, r7, #2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007524:	2323      	movs	r3, #35	@ 0x23
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
    goto error;
 800752c:	e182      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	225d      	movs	r2, #93	@ 0x5d
 8007532:	5c9b      	ldrb	r3, [r3, r2]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b04      	cmp	r3, #4
 8007538:	d003      	beq.n	8007542 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	225d      	movs	r2, #93	@ 0x5d
 800753e:	2105      	movs	r1, #5
 8007540:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1cba      	adds	r2, r7, #2
 8007552:	2146      	movs	r1, #70	@ 0x46
 8007554:	8812      	ldrh	r2, [r2, #0]
 8007556:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1cba      	adds	r2, r7, #2
 800755c:	2144      	movs	r1, #68	@ 0x44
 800755e:	8812      	ldrh	r2, [r2, #0]
 8007560:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1cba      	adds	r2, r7, #2
 800756c:	8812      	ldrh	r2, [r2, #0]
 800756e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1cba      	adds	r2, r7, #2
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	23e0      	movs	r3, #224	@ 0xe0
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	429a      	cmp	r2, r3
 800758e:	d908      	bls.n	80075a2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	49ac      	ldr	r1, [pc, #688]	@ (800784c <HAL_SPI_TransmitReceive+0x3c0>)
 800759c:	400a      	ands	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	e008      	b.n	80075b4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2180      	movs	r1, #128	@ 0x80
 80075ae:	0149      	lsls	r1, r1, #5
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2240      	movs	r2, #64	@ 0x40
 80075bc:	4013      	ands	r3, r2
 80075be:	2b40      	cmp	r3, #64	@ 0x40
 80075c0:	d007      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2140      	movs	r1, #64	@ 0x40
 80075ce:	430a      	orrs	r2, r1
 80075d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	23e0      	movs	r3, #224	@ 0xe0
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	429a      	cmp	r2, r3
 80075dc:	d800      	bhi.n	80075e0 <HAL_SPI_TransmitReceive+0x154>
 80075de:	e083      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x168>
 80075e8:	2312      	movs	r3, #18
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d000      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x168>
 80075f2:	e06d      	b.n	80076d0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	881a      	ldrh	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007618:	e05a      	b.n	80076d0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	2202      	movs	r2, #2
 8007622:	4013      	ands	r3, r2
 8007624:	2b02      	cmp	r3, #2
 8007626:	d11b      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x1d4>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_SPI_TransmitReceive+0x1d4>
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	2b01      	cmp	r3, #1
 8007636:	d113      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2201      	movs	r2, #1
 8007668:	4013      	ands	r3, r2
 800766a:	2b01      	cmp	r3, #1
 800766c:	d11c      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x21c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2246      	movs	r2, #70	@ 0x46
 8007672:	5a9b      	ldrh	r3, [r3, r2]
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d016      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	b292      	uxth	r2, r2
 8007686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2246      	movs	r2, #70	@ 0x46
 8007696:	5a9b      	ldrh	r3, [r3, r2]
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b299      	uxth	r1, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2246      	movs	r2, #70	@ 0x46
 80076a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076a4:	2301      	movs	r3, #1
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076a8:	f7fb ffe4 	bl	8003674 <HAL_GetTick>
 80076ac:	0002      	movs	r2, r0
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d80b      	bhi.n	80076d0 <HAL_SPI_TransmitReceive+0x244>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	3301      	adds	r3, #1
 80076bc:	d008      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80076be:	2323      	movs	r3, #35	@ 0x23
 80076c0:	18fb      	adds	r3, r7, r3
 80076c2:	2203      	movs	r2, #3
 80076c4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	225d      	movs	r2, #93	@ 0x5d
 80076ca:	2101      	movs	r1, #1
 80076cc:	5499      	strb	r1, [r3, r2]
        goto error;
 80076ce:	e0b1      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d19f      	bne.n	800761a <HAL_SPI_TransmitReceive+0x18e>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2246      	movs	r2, #70	@ 0x46
 80076de:	5a9b      	ldrh	r3, [r3, r2]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d199      	bne.n	800761a <HAL_SPI_TransmitReceive+0x18e>
 80076e6:	e089      	b.n	80077fc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x270>
 80076f0:	2312      	movs	r3, #18
 80076f2:	18fb      	adds	r3, r7, r3
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d000      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x270>
 80076fa:	e074      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	330c      	adds	r3, #12
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007722:	e060      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2202      	movs	r2, #2
 800772c:	4013      	ands	r3, r2
 800772e:	2b02      	cmp	r3, #2
 8007730:	d11c      	bne.n	800776c <HAL_SPI_TransmitReceive+0x2e0>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d017      	beq.n	800776c <HAL_SPI_TransmitReceive+0x2e0>
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	2b01      	cmp	r3, #1
 8007740:	d114      	bne.n	800776c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2201      	movs	r2, #1
 8007774:	4013      	ands	r3, r2
 8007776:	2b01      	cmp	r3, #1
 8007778:	d11e      	bne.n	80077b8 <HAL_SPI_TransmitReceive+0x32c>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2246      	movs	r2, #70	@ 0x46
 800777e:	5a9b      	ldrh	r3, [r3, r2]
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	001a      	movs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2246      	movs	r2, #70	@ 0x46
 80077a6:	5a9b      	ldrh	r3, [r3, r2]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b299      	uxth	r1, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2246      	movs	r2, #70	@ 0x46
 80077b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077b4:	2301      	movs	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077b8:	f7fb ff5c 	bl	8003674 <HAL_GetTick>
 80077bc:	0002      	movs	r2, r0
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d802      	bhi.n	80077ce <HAL_SPI_TransmitReceive+0x342>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	3301      	adds	r3, #1
 80077cc:	d102      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x348>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d108      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80077d4:	2323      	movs	r3, #35	@ 0x23
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	2203      	movs	r2, #3
 80077da:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	225d      	movs	r2, #93	@ 0x5d
 80077e0:	2101      	movs	r1, #1
 80077e2:	5499      	strb	r1, [r3, r2]
        goto error;
 80077e4:	e026      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d199      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x298>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2246      	movs	r2, #70	@ 0x46
 80077f4:	5a9b      	ldrh	r3, [r3, r2]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d193      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	0018      	movs	r0, r3
 8007804:	f000 f9be 	bl	8007b84 <SPI_EndRxTxTransaction>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d006      	beq.n	800781a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800780c:	2323      	movs	r3, #35	@ 0x23
 800780e:	18fb      	adds	r3, r7, r3
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007822:	2323      	movs	r3, #35	@ 0x23
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	2201      	movs	r2, #1
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e003      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	225d      	movs	r2, #93	@ 0x5d
 8007830:	2101      	movs	r1, #1
 8007832:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	225c      	movs	r2, #92	@ 0x5c
 8007838:	2100      	movs	r1, #0
 800783a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800783c:	2323      	movs	r3, #35	@ 0x23
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	781b      	ldrb	r3, [r3, #0]
}
 8007842:	0018      	movs	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	b00a      	add	sp, #40	@ 0x28
 8007848:	bd80      	pop	{r7, pc}
 800784a:	46c0      	nop			@ (mov r8, r8)
 800784c:	ffffefff 	.word	0xffffefff

08007850 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	225d      	movs	r2, #93	@ 0x5d
 800785c:	5c9b      	ldrb	r3, [r3, r2]
 800785e:	b2db      	uxtb	r3, r3
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b002      	add	sp, #8
 8007866:	bd80      	pop	{r7, pc}

08007868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	1dfb      	adds	r3, r7, #7
 8007876:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007878:	f7fb fefc 	bl	8003674 <HAL_GetTick>
 800787c:	0002      	movs	r2, r0
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	18d3      	adds	r3, r2, r3
 8007886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007888:	f7fb fef4 	bl	8003674 <HAL_GetTick>
 800788c:	0003      	movs	r3, r0
 800788e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007890:	4b3a      	ldr	r3, [pc, #232]	@ (800797c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	015b      	lsls	r3, r3, #5
 8007896:	0d1b      	lsrs	r3, r3, #20
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	4353      	muls	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800789e:	e058      	b.n	8007952 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	3301      	adds	r3, #1
 80078a4:	d055      	beq.n	8007952 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078a6:	f7fb fee5 	bl	8003674 <HAL_GetTick>
 80078aa:	0002      	movs	r2, r0
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d902      	bls.n	80078bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d142      	bne.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	21e0      	movs	r1, #224	@ 0xe0
 80078c8:	438a      	bics	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	2382      	movs	r3, #130	@ 0x82
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d113      	bne.n	8007900 <SPI_WaitFlagStateUntilTimeout+0x98>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	2380      	movs	r3, #128	@ 0x80
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d005      	beq.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	2380      	movs	r3, #128	@ 0x80
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d107      	bne.n	8007900 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2140      	movs	r1, #64	@ 0x40
 80078fc:	438a      	bics	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007904:	2380      	movs	r3, #128	@ 0x80
 8007906:	019b      	lsls	r3, r3, #6
 8007908:	429a      	cmp	r2, r3
 800790a:	d110      	bne.n	800792e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	491a      	ldr	r1, [pc, #104]	@ (8007980 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007918:	400a      	ands	r2, r1
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2180      	movs	r1, #128	@ 0x80
 8007928:	0189      	lsls	r1, r1, #6
 800792a:	430a      	orrs	r2, r1
 800792c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	225d      	movs	r2, #93	@ 0x5d
 8007932:	2101      	movs	r1, #1
 8007934:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	225c      	movs	r2, #92	@ 0x5c
 800793a:	2100      	movs	r1, #0
 800793c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e017      	b.n	8007972 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3b01      	subs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4013      	ands	r3, r2
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	425a      	negs	r2, r3
 8007962:	4153      	adcs	r3, r2
 8007964:	b2db      	uxtb	r3, r3
 8007966:	001a      	movs	r2, r3
 8007968:	1dfb      	adds	r3, r7, #7
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d197      	bne.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b008      	add	sp, #32
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	20000018 	.word	0x20000018
 8007980:	ffffdfff 	.word	0xffffdfff

08007984 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	@ 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007992:	2317      	movs	r3, #23
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800799a:	f7fb fe6b 	bl	8003674 <HAL_GetTick>
 800799e:	0002      	movs	r2, r0
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	18d3      	adds	r3, r2, r3
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80079aa:	f7fb fe63 	bl	8003674 <HAL_GetTick>
 80079ae:	0003      	movs	r3, r0
 80079b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079ba:	4b41      	ldr	r3, [pc, #260]	@ (8007ac0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	0013      	movs	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	189b      	adds	r3, r3, r2
 80079c4:	00da      	lsls	r2, r3, #3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079cc:	4353      	muls	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079d0:	e068      	b.n	8007aa4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	23c0      	movs	r3, #192	@ 0xc0
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	429a      	cmp	r2, r3
 80079da:	d10a      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	2117      	movs	r1, #23
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079ee:	187b      	adds	r3, r7, r1
 80079f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	d055      	beq.n	8007aa4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079f8:	f7fb fe3c 	bl	8003674 <HAL_GetTick>
 80079fc:	0002      	movs	r2, r0
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d902      	bls.n	8007a0e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d142      	bne.n	8007a94 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	21e0      	movs	r1, #224	@ 0xe0
 8007a1a:	438a      	bics	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	2382      	movs	r3, #130	@ 0x82
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d113      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d005      	beq.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	2380      	movs	r3, #128	@ 0x80
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d107      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	@ 0x40
 8007a4e:	438a      	bics	r2, r1
 8007a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	019b      	lsls	r3, r3, #6
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d110      	bne.n	8007a80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4916      	ldr	r1, [pc, #88]	@ (8007ac4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2180      	movs	r1, #128	@ 0x80
 8007a7a:	0189      	lsls	r1, r1, #6
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	225d      	movs	r2, #93	@ 0x5d
 8007a84:	2101      	movs	r1, #1
 8007a86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	225c      	movs	r2, #92	@ 0x5c
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e010      	b.n	8007ab6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4013      	ands	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d18e      	bne.n	80079d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b00a      	add	sp, #40	@ 0x28
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	20000018 	.word	0x20000018
 8007ac4:	ffffdfff 	.word	0xffffdfff

08007ac8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	2382      	movs	r3, #130	@ 0x82
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d113      	bne.n	8007b08 <SPI_EndRxTransaction+0x40>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d005      	beq.n	8007af8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d107      	bne.n	8007b08 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2140      	movs	r1, #64	@ 0x40
 8007b04:	438a      	bics	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	0013      	movs	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	2180      	movs	r1, #128	@ 0x80
 8007b16:	f7ff fea7 	bl	8007868 <SPI_WaitFlagStateUntilTimeout>
 8007b1a:	1e03      	subs	r3, r0, #0
 8007b1c:	d007      	beq.n	8007b2e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b22:	2220      	movs	r2, #32
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e026      	b.n	8007b7c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	2382      	movs	r3, #130	@ 0x82
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d11f      	bne.n	8007b7a <SPI_EndRxTransaction+0xb2>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	2380      	movs	r3, #128	@ 0x80
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d005      	beq.n	8007b52 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	2380      	movs	r3, #128	@ 0x80
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d113      	bne.n	8007b7a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	23c0      	movs	r3, #192	@ 0xc0
 8007b56:	00d9      	lsls	r1, r3, #3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	0013      	movs	r3, r2
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7ff ff0f 	bl	8007984 <SPI_WaitFifoStateUntilTimeout>
 8007b66:	1e03      	subs	r3, r0, #0
 8007b68:	d007      	beq.n	8007b7a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b6e:	2220      	movs	r2, #32
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e000      	b.n	8007b7c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b004      	add	sp, #16
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	23c0      	movs	r3, #192	@ 0xc0
 8007b94:	0159      	lsls	r1, r3, #5
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	0013      	movs	r3, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f7ff fef0 	bl	8007984 <SPI_WaitFifoStateUntilTimeout>
 8007ba4:	1e03      	subs	r3, r0, #0
 8007ba6:	d007      	beq.n	8007bb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bac:	2220      	movs	r2, #32
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e027      	b.n	8007c08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	0013      	movs	r3, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2180      	movs	r1, #128	@ 0x80
 8007bc6:	f7ff fe4f 	bl	8007868 <SPI_WaitFlagStateUntilTimeout>
 8007bca:	1e03      	subs	r3, r0, #0
 8007bcc:	d007      	beq.n	8007bde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e014      	b.n	8007c08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	23c0      	movs	r3, #192	@ 0xc0
 8007be2:	00d9      	lsls	r1, r3, #3
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	0013      	movs	r3, r2
 8007bec:	2200      	movs	r2, #0
 8007bee:	f7ff fec9 	bl	8007984 <SPI_WaitFifoStateUntilTimeout>
 8007bf2:	1e03      	subs	r3, r0, #0
 8007bf4:	d007      	beq.n	8007c06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e000      	b.n	8007c08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e042      	b.n	8007ca8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	223d      	movs	r2, #61	@ 0x3d
 8007c26:	5c9b      	ldrb	r3, [r3, r2]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	223c      	movs	r2, #60	@ 0x3c
 8007c32:	2100      	movs	r1, #0
 8007c34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7fb f877 	bl	8002d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	223d      	movs	r2, #61	@ 0x3d
 8007c42:	2102      	movs	r1, #2
 8007c44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	0019      	movs	r1, r3
 8007c50:	0010      	movs	r0, r2
 8007c52:	f000 fa17 	bl	8008084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2246      	movs	r2, #70	@ 0x46
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	223e      	movs	r2, #62	@ 0x3e
 8007c62:	2101      	movs	r1, #1
 8007c64:	5499      	strb	r1, [r3, r2]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	223f      	movs	r2, #63	@ 0x3f
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	5499      	strb	r1, [r3, r2]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	@ 0x40
 8007c72:	2101      	movs	r1, #1
 8007c74:	5499      	strb	r1, [r3, r2]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2241      	movs	r2, #65	@ 0x41
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2242      	movs	r2, #66	@ 0x42
 8007c82:	2101      	movs	r1, #1
 8007c84:	5499      	strb	r1, [r3, r2]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2243      	movs	r2, #67	@ 0x43
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	5499      	strb	r1, [r3, r2]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2244      	movs	r2, #68	@ 0x44
 8007c92:	2101      	movs	r1, #1
 8007c94:	5499      	strb	r1, [r3, r2]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2245      	movs	r2, #69	@ 0x45
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	223d      	movs	r2, #61	@ 0x3d
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	0018      	movs	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b002      	add	sp, #8
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d021      	beq.n	8007d14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d01d      	beq.n	8007d14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2203      	movs	r2, #3
 8007cde:	4252      	negs	r2, r2
 8007ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	2203      	movs	r2, #3
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f000 f9ac 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007cfc:	e007      	b.n	8007d0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f000 f99f 	bl	8008044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 f9ab 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2204      	movs	r2, #4
 8007d18:	4013      	ands	r3, r2
 8007d1a:	d022      	beq.n	8007d62 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	4013      	ands	r3, r2
 8007d22:	d01e      	beq.n	8007d62 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2205      	movs	r2, #5
 8007d2a:	4252      	negs	r2, r2
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	23c0      	movs	r3, #192	@ 0xc0
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d004      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 f985 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007d4a:	e007      	b.n	8007d5c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f000 f978 	bl	8008044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 f984 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2208      	movs	r2, #8
 8007d66:	4013      	ands	r3, r2
 8007d68:	d021      	beq.n	8007dae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d01d      	beq.n	8007dae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2209      	movs	r2, #9
 8007d78:	4252      	negs	r2, r2
 8007d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	2203      	movs	r2, #3
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0018      	movs	r0, r3
 8007d92:	f000 f95f 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007d96:	e007      	b.n	8007da8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 f952 	bl	8008044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f000 f95e 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2210      	movs	r2, #16
 8007db2:	4013      	ands	r3, r2
 8007db4:	d022      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2210      	movs	r2, #16
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d01e      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2211      	movs	r2, #17
 8007dc4:	4252      	negs	r2, r2
 8007dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	23c0      	movs	r3, #192	@ 0xc0
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0018      	movs	r0, r3
 8007de0:	f000 f938 	bl	8008054 <HAL_TIM_IC_CaptureCallback>
 8007de4:	e007      	b.n	8007df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 f92b 	bl	8008044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 f937 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4013      	ands	r3, r2
 8007e02:	d00c      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d008      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2202      	movs	r2, #2
 8007e12:	4252      	negs	r2, r2
 8007e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f000 f90b 	bl	8008034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2280      	movs	r2, #128	@ 0x80
 8007e22:	4013      	ands	r3, r2
 8007e24:	d00c      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2280      	movs	r2, #128	@ 0x80
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d008      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2281      	movs	r2, #129	@ 0x81
 8007e34:	4252      	negs	r2, r2
 8007e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 fab0 	bl	80083a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2240      	movs	r2, #64	@ 0x40
 8007e44:	4013      	ands	r3, r2
 8007e46:	d00c      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2240      	movs	r2, #64	@ 0x40
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d008      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2241      	movs	r2, #65	@ 0x41
 8007e56:	4252      	negs	r2, r2
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 f909 	bl	8008074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2220      	movs	r2, #32
 8007e66:	4013      	ands	r3, r2
 8007e68:	d00c      	beq.n	8007e84 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d008      	beq.n	8007e84 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2221      	movs	r2, #33	@ 0x21
 8007e78:	4252      	negs	r2, r2
 8007e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f000 fa86 	bl	8008390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e84:	46c0      	nop			@ (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b004      	add	sp, #16
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e96:	230f      	movs	r3, #15
 8007e98:	18fb      	adds	r3, r7, r3
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	223c      	movs	r2, #60	@ 0x3c
 8007ea2:	5c9b      	ldrb	r3, [r3, r2]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_TIM_ConfigClockSource+0x20>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e0bc      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x19a>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	223c      	movs	r2, #60	@ 0x3c
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	223d      	movs	r2, #61	@ 0x3d
 8007eb8:	2102      	movs	r1, #2
 8007eba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2277      	movs	r2, #119	@ 0x77
 8007ec8:	4393      	bics	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a58      	ldr	r2, [pc, #352]	@ (8008030 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2280      	movs	r2, #128	@ 0x80
 8007ee2:	0192      	lsls	r2, r2, #6
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d040      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0xde>
 8007ee8:	2280      	movs	r2, #128	@ 0x80
 8007eea:	0192      	lsls	r2, r2, #6
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d900      	bls.n	8007ef2 <HAL_TIM_ConfigClockSource+0x66>
 8007ef0:	e088      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007ef2:	2280      	movs	r2, #128	@ 0x80
 8007ef4:	0152      	lsls	r2, r2, #5
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d100      	bne.n	8007efc <HAL_TIM_ConfigClockSource+0x70>
 8007efa:	e088      	b.n	800800e <HAL_TIM_ConfigClockSource+0x182>
 8007efc:	2280      	movs	r2, #128	@ 0x80
 8007efe:	0152      	lsls	r2, r2, #5
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d900      	bls.n	8007f06 <HAL_TIM_ConfigClockSource+0x7a>
 8007f04:	e07e      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f06:	2b70      	cmp	r3, #112	@ 0x70
 8007f08:	d018      	beq.n	8007f3c <HAL_TIM_ConfigClockSource+0xb0>
 8007f0a:	d900      	bls.n	8007f0e <HAL_TIM_ConfigClockSource+0x82>
 8007f0c:	e07a      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f0e:	2b60      	cmp	r3, #96	@ 0x60
 8007f10:	d04f      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x126>
 8007f12:	d900      	bls.n	8007f16 <HAL_TIM_ConfigClockSource+0x8a>
 8007f14:	e076      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f16:	2b50      	cmp	r3, #80	@ 0x50
 8007f18:	d03b      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x106>
 8007f1a:	d900      	bls.n	8007f1e <HAL_TIM_ConfigClockSource+0x92>
 8007f1c:	e072      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f1e:	2b40      	cmp	r3, #64	@ 0x40
 8007f20:	d057      	beq.n	8007fd2 <HAL_TIM_ConfigClockSource+0x146>
 8007f22:	d900      	bls.n	8007f26 <HAL_TIM_ConfigClockSource+0x9a>
 8007f24:	e06e      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f26:	2b30      	cmp	r3, #48	@ 0x30
 8007f28:	d063      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x166>
 8007f2a:	d86b      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d060      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x166>
 8007f30:	d868      	bhi.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d05d      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x166>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d05b      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x166>
 8007f3a:	e063      	b.n	8008004 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f4c:	f000 f9a2 	bl	8008294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2277      	movs	r2, #119	@ 0x77
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]
      break;
 8007f68:	e052      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f7a:	f000 f98b 	bl	8008294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2180      	movs	r1, #128	@ 0x80
 8007f8a:	01c9      	lsls	r1, r1, #7
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	609a      	str	r2, [r3, #8]
      break;
 8007f90:	e03e      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	f000 f8fe 	bl	80081a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2150      	movs	r1, #80	@ 0x50
 8007faa:	0018      	movs	r0, r3
 8007fac:	f000 f958 	bl	8008260 <TIM_ITRx_SetConfig>
      break;
 8007fb0:	e02e      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fbe:	001a      	movs	r2, r3
 8007fc0:	f000 f91c 	bl	80081fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2160      	movs	r1, #96	@ 0x60
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f000 f948 	bl	8008260 <TIM_ITRx_SetConfig>
      break;
 8007fd0:	e01e      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fde:	001a      	movs	r2, r3
 8007fe0:	f000 f8de 	bl	80081a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2140      	movs	r1, #64	@ 0x40
 8007fea:	0018      	movs	r0, r3
 8007fec:	f000 f938 	bl	8008260 <TIM_ITRx_SetConfig>
      break;
 8007ff0:	e00e      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	0010      	movs	r0, r2
 8007ffe:	f000 f92f 	bl	8008260 <TIM_ITRx_SetConfig>
      break;
 8008002:	e005      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008004:	230f      	movs	r3, #15
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	2201      	movs	r2, #1
 800800a:	701a      	strb	r2, [r3, #0]
      break;
 800800c:	e000      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800800e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	223d      	movs	r2, #61	@ 0x3d
 8008014:	2101      	movs	r1, #1
 8008016:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	223c      	movs	r2, #60	@ 0x3c
 800801c:	2100      	movs	r1, #0
 800801e:	5499      	strb	r1, [r3, r2]

  return status;
 8008020:	230f      	movs	r3, #15
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	781b      	ldrb	r3, [r3, #0]
}
 8008026:	0018      	movs	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bd80      	pop	{r7, pc}
 800802e:	46c0      	nop			@ (mov r8, r8)
 8008030:	ffff00ff 	.word	0xffff00ff

08008034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800803c:	46c0      	nop			@ (mov r8, r8)
 800803e:	46bd      	mov	sp, r7
 8008040:	b002      	add	sp, #8
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800804c:	46c0      	nop			@ (mov r8, r8)
 800804e:	46bd      	mov	sp, r7
 8008050:	b002      	add	sp, #8
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800805c:	46c0      	nop			@ (mov r8, r8)
 800805e:	46bd      	mov	sp, r7
 8008060:	b002      	add	sp, #8
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800806c:	46c0      	nop			@ (mov r8, r8)
 800806e:	46bd      	mov	sp, r7
 8008070:	b002      	add	sp, #8
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800807c:	46c0      	nop			@ (mov r8, r8)
 800807e:	46bd      	mov	sp, r7
 8008080:	b002      	add	sp, #8
 8008082:	bd80      	pop	{r7, pc}

08008084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3b      	ldr	r2, [pc, #236]	@ (8008184 <TIM_Base_SetConfig+0x100>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d008      	beq.n	80080ae <TIM_Base_SetConfig+0x2a>
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	2380      	movs	r3, #128	@ 0x80
 80080a0:	05db      	lsls	r3, r3, #23
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x2a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a37      	ldr	r2, [pc, #220]	@ (8008188 <TIM_Base_SetConfig+0x104>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2270      	movs	r2, #112	@ 0x70
 80080b2:	4393      	bics	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a30      	ldr	r2, [pc, #192]	@ (8008184 <TIM_Base_SetConfig+0x100>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	2380      	movs	r3, #128	@ 0x80
 80080cc:	05db      	lsls	r3, r3, #23
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d013      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008188 <TIM_Base_SetConfig+0x104>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00f      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2b      	ldr	r2, [pc, #172]	@ (800818c <TIM_Base_SetConfig+0x108>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00b      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008190 <TIM_Base_SetConfig+0x10c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d007      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a29      	ldr	r2, [pc, #164]	@ (8008194 <TIM_Base_SetConfig+0x110>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d003      	beq.n	80080fa <TIM_Base_SetConfig+0x76>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a28      	ldr	r2, [pc, #160]	@ (8008198 <TIM_Base_SetConfig+0x114>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d108      	bne.n	800810c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4a27      	ldr	r2, [pc, #156]	@ (800819c <TIM_Base_SetConfig+0x118>)
 80080fe:	4013      	ands	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2280      	movs	r2, #128	@ 0x80
 8008110:	4393      	bics	r3, r2
 8008112:	001a      	movs	r2, r3
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a13      	ldr	r2, [pc, #76]	@ (8008184 <TIM_Base_SetConfig+0x100>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00b      	beq.n	8008152 <TIM_Base_SetConfig+0xce>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a14      	ldr	r2, [pc, #80]	@ (8008190 <TIM_Base_SetConfig+0x10c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d007      	beq.n	8008152 <TIM_Base_SetConfig+0xce>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a13      	ldr	r2, [pc, #76]	@ (8008194 <TIM_Base_SetConfig+0x110>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d003      	beq.n	8008152 <TIM_Base_SetConfig+0xce>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a12      	ldr	r2, [pc, #72]	@ (8008198 <TIM_Base_SetConfig+0x114>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d103      	bne.n	800815a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2201      	movs	r2, #1
 8008166:	4013      	ands	r3, r2
 8008168:	2b01      	cmp	r3, #1
 800816a:	d106      	bne.n	800817a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2201      	movs	r2, #1
 8008172:	4393      	bics	r3, r2
 8008174:	001a      	movs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	611a      	str	r2, [r3, #16]
  }
}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	46bd      	mov	sp, r7
 800817e:	b004      	add	sp, #16
 8008180:	bd80      	pop	{r7, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	40012c00 	.word	0x40012c00
 8008188:	40000400 	.word	0x40000400
 800818c:	40002000 	.word	0x40002000
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800
 800819c:	fffffcff 	.word	0xfffffcff

080081a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	2201      	movs	r2, #1
 80081b8:	4393      	bics	r3, r2
 80081ba:	001a      	movs	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	22f0      	movs	r2, #240	@ 0xf0
 80081ca:	4393      	bics	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	220a      	movs	r2, #10
 80081dc:	4393      	bics	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	621a      	str	r2, [r3, #32]
}
 80081f4:	46c0      	nop			@ (mov r8, r8)
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b006      	add	sp, #24
 80081fa:	bd80      	pop	{r7, pc}

080081fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	2210      	movs	r2, #16
 8008214:	4393      	bics	r3, r2
 8008216:	001a      	movs	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	4a0d      	ldr	r2, [pc, #52]	@ (800825c <TIM_TI2_ConfigInputStage+0x60>)
 8008226:	4013      	ands	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	031b      	lsls	r3, r3, #12
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	22a0      	movs	r2, #160	@ 0xa0
 8008238:	4393      	bics	r3, r2
 800823a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	46bd      	mov	sp, r7
 8008256:	b006      	add	sp, #24
 8008258:	bd80      	pop	{r7, pc}
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	ffff0fff 	.word	0xffff0fff

08008260 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2270      	movs	r2, #112	@ 0x70
 8008274:	4393      	bics	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	2207      	movs	r2, #7
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	609a      	str	r2, [r3, #8]
}
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	46bd      	mov	sp, r7
 800828e:	b004      	add	sp, #16
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	4a09      	ldr	r2, [pc, #36]	@ (80082d0 <TIM_ETR_SetConfig+0x3c>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	609a      	str	r2, [r3, #8]
}
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b006      	add	sp, #24
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	ffff00ff 	.word	0xffff00ff

080082d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	223c      	movs	r2, #60	@ 0x3c
 80082e2:	5c9b      	ldrb	r3, [r3, r2]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e047      	b.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	223c      	movs	r2, #60	@ 0x3c
 80082f0:	2101      	movs	r1, #1
 80082f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	223d      	movs	r2, #61	@ 0x3d
 80082f8:	2102      	movs	r1, #2
 80082fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2270      	movs	r2, #112	@ 0x70
 8008310:	4393      	bics	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a16      	ldr	r2, [pc, #88]	@ (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00f      	beq.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	2380      	movs	r3, #128	@ 0x80
 8008336:	05db      	lsls	r3, r3, #23
 8008338:	429a      	cmp	r2, r3
 800833a:	d009      	beq.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a11      	ldr	r2, [pc, #68]	@ (8008388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a10      	ldr	r2, [pc, #64]	@ (800838c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10c      	bne.n	800836a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2280      	movs	r2, #128	@ 0x80
 8008354:	4393      	bics	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	4313      	orrs	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	223d      	movs	r2, #61	@ 0x3d
 800836e:	2101      	movs	r1, #1
 8008370:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	223c      	movs	r2, #60	@ 0x3c
 8008376:	2100      	movs	r1, #0
 8008378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	0018      	movs	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	b004      	add	sp, #16
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40012c00 	.word	0x40012c00
 8008388:	40000400 	.word	0x40000400
 800838c:	40014000 	.word	0x40014000

08008390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008398:	46c0      	nop			@ (mov r8, r8)
 800839a:	46bd      	mov	sp, r7
 800839c:	b002      	add	sp, #8
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083a8:	46c0      	nop			@ (mov r8, r8)
 80083aa:	46bd      	mov	sp, r7
 80083ac:	b002      	add	sp, #8
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e053      	b.n	800846a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d116      	bne.n	80083f8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2278      	movs	r2, #120	@ 0x78
 80083ce:	2100      	movs	r1, #0
 80083d0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f000 fb7b 	bl	8008ad0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	22b0      	movs	r2, #176	@ 0xb0
 80083de:	589b      	ldr	r3, [r3, r2]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	21b0      	movs	r1, #176	@ 0xb0
 80083e8:	4a22      	ldr	r2, [pc, #136]	@ (8008474 <HAL_UART_Init+0xc4>)
 80083ea:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	22b0      	movs	r2, #176	@ 0xb0
 80083f0:	589b      	ldr	r3, [r3, r2]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	0010      	movs	r0, r2
 80083f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2224      	movs	r2, #36	@ 0x24
 80083fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2101      	movs	r1, #1
 800840a:	438a      	bics	r2, r1
 800840c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	0018      	movs	r0, r3
 800841a:	f000 fd25 	bl	8008e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	0018      	movs	r0, r3
 8008422:	f000 fb99 	bl	8008b58 <UART_SetConfig>
 8008426:	0003      	movs	r3, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e01c      	b.n	800846a <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	490f      	ldr	r1, [pc, #60]	@ (8008478 <HAL_UART_Init+0xc8>)
 800843c:	400a      	ands	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	212a      	movs	r1, #42	@ 0x2a
 800844c:	438a      	bics	r2, r1
 800844e:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2101      	movs	r1, #1
 800845c:	430a      	orrs	r2, r1
 800845e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	0018      	movs	r0, r3
 8008464:	f000 fdb4 	bl	8008fd0 <UART_CheckIdleState>
 8008468:	0003      	movs	r3, r0
}
 800846a:	0018      	movs	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	b002      	add	sp, #8
 8008470:	bd80      	pop	{r7, pc}
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	08002d79 	.word	0x08002d79
 8008478:	ffffb7ff 	.word	0xffffb7ff

0800847c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b0ab      	sub	sp, #172	@ 0xac
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	22a4      	movs	r2, #164	@ 0xa4
 800848c:	18b9      	adds	r1, r7, r2
 800848e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	20a0      	movs	r0, #160	@ 0xa0
 8008498:	1839      	adds	r1, r7, r0
 800849a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	219c      	movs	r1, #156	@ 0x9c
 80084a4:	1879      	adds	r1, r7, r1
 80084a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084a8:	0011      	movs	r1, r2
 80084aa:	18bb      	adds	r3, r7, r2
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a9c      	ldr	r2, [pc, #624]	@ (8008720 <HAL_UART_IRQHandler+0x2a4>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	2298      	movs	r2, #152	@ 0x98
 80084b4:	18bc      	adds	r4, r7, r2
 80084b6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80084b8:	18bb      	adds	r3, r7, r2
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d114      	bne.n	80084ea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084c0:	187b      	adds	r3, r7, r1
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2220      	movs	r2, #32
 80084c6:	4013      	ands	r3, r2
 80084c8:	d00f      	beq.n	80084ea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2220      	movs	r2, #32
 80084d0:	4013      	ands	r3, r2
 80084d2:	d00a      	beq.n	80084ea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d100      	bne.n	80084de <HAL_UART_IRQHandler+0x62>
 80084dc:	e2a8      	b.n	8008a30 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	0010      	movs	r0, r2
 80084e6:	4798      	blx	r3
      }
      return;
 80084e8:	e2a2      	b.n	8008a30 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084ea:	2398      	movs	r3, #152	@ 0x98
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d100      	bne.n	80084f6 <HAL_UART_IRQHandler+0x7a>
 80084f4:	e11a      	b.n	800872c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084f6:	239c      	movs	r3, #156	@ 0x9c
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2201      	movs	r2, #1
 80084fe:	4013      	ands	r3, r2
 8008500:	d106      	bne.n	8008510 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008502:	23a0      	movs	r3, #160	@ 0xa0
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a86      	ldr	r2, [pc, #536]	@ (8008724 <HAL_UART_IRQHandler+0x2a8>)
 800850a:	4013      	ands	r3, r2
 800850c:	d100      	bne.n	8008510 <HAL_UART_IRQHandler+0x94>
 800850e:	e10d      	b.n	800872c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008510:	23a4      	movs	r3, #164	@ 0xa4
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2201      	movs	r2, #1
 8008518:	4013      	ands	r3, r2
 800851a:	d012      	beq.n	8008542 <HAL_UART_IRQHandler+0xc6>
 800851c:	23a0      	movs	r3, #160	@ 0xa0
 800851e:	18fb      	adds	r3, r7, r3
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	2380      	movs	r3, #128	@ 0x80
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	4013      	ands	r3, r2
 8008528:	d00b      	beq.n	8008542 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2201      	movs	r2, #1
 8008530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2284      	movs	r2, #132	@ 0x84
 8008536:	589b      	ldr	r3, [r3, r2]
 8008538:	2201      	movs	r2, #1
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2184      	movs	r1, #132	@ 0x84
 8008540:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008542:	23a4      	movs	r3, #164	@ 0xa4
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2202      	movs	r2, #2
 800854a:	4013      	ands	r3, r2
 800854c:	d011      	beq.n	8008572 <HAL_UART_IRQHandler+0xf6>
 800854e:	239c      	movs	r3, #156	@ 0x9c
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	4013      	ands	r3, r2
 8008558:	d00b      	beq.n	8008572 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2202      	movs	r2, #2
 8008560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2284      	movs	r2, #132	@ 0x84
 8008566:	589b      	ldr	r3, [r3, r2]
 8008568:	2204      	movs	r2, #4
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2184      	movs	r1, #132	@ 0x84
 8008570:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008572:	23a4      	movs	r3, #164	@ 0xa4
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	4013      	ands	r3, r2
 800857c:	d011      	beq.n	80085a2 <HAL_UART_IRQHandler+0x126>
 800857e:	239c      	movs	r3, #156	@ 0x9c
 8008580:	18fb      	adds	r3, r7, r3
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	4013      	ands	r3, r2
 8008588:	d00b      	beq.n	80085a2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2204      	movs	r2, #4
 8008590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2284      	movs	r2, #132	@ 0x84
 8008596:	589b      	ldr	r3, [r3, r2]
 8008598:	2202      	movs	r2, #2
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2184      	movs	r1, #132	@ 0x84
 80085a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085a2:	23a4      	movs	r3, #164	@ 0xa4
 80085a4:	18fb      	adds	r3, r7, r3
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2208      	movs	r2, #8
 80085aa:	4013      	ands	r3, r2
 80085ac:	d017      	beq.n	80085de <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085ae:	23a0      	movs	r3, #160	@ 0xa0
 80085b0:	18fb      	adds	r3, r7, r3
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2220      	movs	r2, #32
 80085b6:	4013      	ands	r3, r2
 80085b8:	d105      	bne.n	80085c6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085ba:	239c      	movs	r3, #156	@ 0x9c
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085c4:	d00b      	beq.n	80085de <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2208      	movs	r2, #8
 80085cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2284      	movs	r2, #132	@ 0x84
 80085d2:	589b      	ldr	r3, [r3, r2]
 80085d4:	2208      	movs	r2, #8
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2184      	movs	r1, #132	@ 0x84
 80085dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085de:	23a4      	movs	r3, #164	@ 0xa4
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	2380      	movs	r3, #128	@ 0x80
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	4013      	ands	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_UART_IRQHandler+0x198>
 80085ec:	23a0      	movs	r3, #160	@ 0xa0
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	2380      	movs	r3, #128	@ 0x80
 80085f4:	04db      	lsls	r3, r3, #19
 80085f6:	4013      	ands	r3, r2
 80085f8:	d00c      	beq.n	8008614 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2280      	movs	r2, #128	@ 0x80
 8008600:	0112      	lsls	r2, r2, #4
 8008602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2284      	movs	r2, #132	@ 0x84
 8008608:	589b      	ldr	r3, [r3, r2]
 800860a:	2220      	movs	r2, #32
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2184      	movs	r1, #132	@ 0x84
 8008612:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2284      	movs	r2, #132	@ 0x84
 8008618:	589b      	ldr	r3, [r3, r2]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d100      	bne.n	8008620 <HAL_UART_IRQHandler+0x1a4>
 800861e:	e209      	b.n	8008a34 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008620:	23a4      	movs	r3, #164	@ 0xa4
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2220      	movs	r2, #32
 8008628:	4013      	ands	r3, r2
 800862a:	d00e      	beq.n	800864a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800862c:	23a0      	movs	r3, #160	@ 0xa0
 800862e:	18fb      	adds	r3, r7, r3
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2220      	movs	r2, #32
 8008634:	4013      	ands	r3, r2
 8008636:	d008      	beq.n	800864a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	0010      	movs	r0, r2
 8008648:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2284      	movs	r2, #132	@ 0x84
 800864e:	589b      	ldr	r3, [r3, r2]
 8008650:	2194      	movs	r1, #148	@ 0x94
 8008652:	187a      	adds	r2, r7, r1
 8008654:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2240      	movs	r2, #64	@ 0x40
 800865e:	4013      	ands	r3, r2
 8008660:	2b40      	cmp	r3, #64	@ 0x40
 8008662:	d004      	beq.n	800866e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008664:	187b      	adds	r3, r7, r1
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2228      	movs	r2, #40	@ 0x28
 800866a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800866c:	d04b      	beq.n	8008706 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	0018      	movs	r0, r3
 8008672:	f000 fe89 	bl	8009388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2240      	movs	r2, #64	@ 0x40
 800867e:	4013      	ands	r3, r2
 8008680:	2b40      	cmp	r3, #64	@ 0x40
 8008682:	d139      	bne.n	80086f8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008684:	f3ef 8310 	mrs	r3, PRIMASK
 8008688:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800868a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868c:	2090      	movs	r0, #144	@ 0x90
 800868e:	183a      	adds	r2, r7, r0
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	2301      	movs	r3, #1
 8008694:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	46c0      	nop			@ (mov r8, r8)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2140      	movs	r1, #64	@ 0x40
 80086aa:	438a      	bics	r2, r1
 80086ac:	609a      	str	r2, [r3, #8]
 80086ae:	183b      	adds	r3, r7, r0
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086b6:	f383 8810 	msr	PRIMASK, r3
}
 80086ba:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d012      	beq.n	80086ea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c8:	4a17      	ldr	r2, [pc, #92]	@ (8008728 <HAL_UART_IRQHandler+0x2ac>)
 80086ca:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086d0:	0018      	movs	r0, r3
 80086d2:	f7fb fc41 	bl	8003f58 <HAL_DMA_Abort_IT>
 80086d6:	1e03      	subs	r3, r0, #0
 80086d8:	d020      	beq.n	800871c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e4:	0018      	movs	r0, r3
 80086e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e018      	b.n	800871c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2298      	movs	r2, #152	@ 0x98
 80086ee:	589b      	ldr	r3, [r3, r2]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	0010      	movs	r0, r2
 80086f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	e011      	b.n	800871c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2298      	movs	r2, #152	@ 0x98
 80086fc:	589b      	ldr	r3, [r3, r2]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	0010      	movs	r0, r2
 8008702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008704:	e00a      	b.n	800871c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2298      	movs	r2, #152	@ 0x98
 800870a:	589b      	ldr	r3, [r3, r2]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	0010      	movs	r0, r2
 8008710:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2284      	movs	r2, #132	@ 0x84
 8008716:	2100      	movs	r1, #0
 8008718:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800871a:	e18b      	b.n	8008a34 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	46c0      	nop			@ (mov r8, r8)
    return;
 800871e:	e189      	b.n	8008a34 <HAL_UART_IRQHandler+0x5b8>
 8008720:	0000080f 	.word	0x0000080f
 8008724:	04000120 	.word	0x04000120
 8008728:	08009651 	.word	0x08009651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008730:	2b01      	cmp	r3, #1
 8008732:	d000      	beq.n	8008736 <HAL_UART_IRQHandler+0x2ba>
 8008734:	e13b      	b.n	80089ae <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008736:	23a4      	movs	r3, #164	@ 0xa4
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2210      	movs	r2, #16
 800873e:	4013      	ands	r3, r2
 8008740:	d100      	bne.n	8008744 <HAL_UART_IRQHandler+0x2c8>
 8008742:	e134      	b.n	80089ae <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008744:	23a0      	movs	r3, #160	@ 0xa0
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2210      	movs	r2, #16
 800874c:	4013      	ands	r3, r2
 800874e:	d100      	bne.n	8008752 <HAL_UART_IRQHandler+0x2d6>
 8008750:	e12d      	b.n	80089ae <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2210      	movs	r2, #16
 8008758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	2240      	movs	r2, #64	@ 0x40
 8008762:	4013      	ands	r3, r2
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	d000      	beq.n	800876a <HAL_UART_IRQHandler+0x2ee>
 8008768:	e0a0      	b.n	80088ac <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	217e      	movs	r1, #126	@ 0x7e
 8008774:	187b      	adds	r3, r7, r1
 8008776:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008778:	187b      	adds	r3, r7, r1
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d100      	bne.n	8008782 <HAL_UART_IRQHandler+0x306>
 8008780:	e15a      	b.n	8008a38 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2258      	movs	r2, #88	@ 0x58
 8008786:	5a9b      	ldrh	r3, [r3, r2]
 8008788:	187a      	adds	r2, r7, r1
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d300      	bcc.n	8008792 <HAL_UART_IRQHandler+0x316>
 8008790:	e152      	b.n	8008a38 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	187a      	adds	r2, r7, r1
 8008796:	215a      	movs	r1, #90	@ 0x5a
 8008798:	8812      	ldrh	r2, [r2, #0]
 800879a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d06f      	beq.n	8008886 <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a6:	f3ef 8310 	mrs	r3, PRIMASK
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087b0:	2301      	movs	r3, #1
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b6:	f383 8810 	msr	PRIMASK, r3
}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	49a0      	ldr	r1, [pc, #640]	@ (8008a48 <HAL_UART_IRQHandler+0x5cc>)
 80087c8:	400a      	ands	r2, r1
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	f383 8810 	msr	PRIMASK, r3
}
 80087d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d8:	f3ef 8310 	mrs	r3, PRIMASK
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80087de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80087e2:	2301      	movs	r3, #1
 80087e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e8:	f383 8810 	msr	PRIMASK, r3
}
 80087ec:	46c0      	nop			@ (mov r8, r8)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2101      	movs	r1, #1
 80087fa:	438a      	bics	r2, r1
 80087fc:	609a      	str	r2, [r3, #8]
 80087fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008800:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008804:	f383 8810 	msr	PRIMASK, r3
}
 8008808:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800880a:	f3ef 8310 	mrs	r3, PRIMASK
 800880e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008812:	673b      	str	r3, [r7, #112]	@ 0x70
 8008814:	2301      	movs	r3, #1
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			@ (mov r8, r8)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2140      	movs	r1, #64	@ 0x40
 800882c:	438a      	bics	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008832:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2280      	movs	r2, #128	@ 0x80
 8008840:	2120      	movs	r1, #32
 8008842:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884a:	f3ef 8310 	mrs	r3, PRIMASK
 800884e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008854:	2301      	movs	r3, #1
 8008856:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800885a:	f383 8810 	msr	PRIMASK, r3
}
 800885e:	46c0      	nop			@ (mov r8, r8)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2110      	movs	r1, #16
 800886c:	438a      	bics	r2, r1
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008872:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008876:	f383 8810 	msr	PRIMASK, r3
}
 800887a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008880:	0018      	movs	r0, r3
 8008882:	f7fb fb31 	bl	8003ee8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2202      	movs	r2, #2
 800888a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	22ac      	movs	r2, #172	@ 0xac
 8008890:	589b      	ldr	r3, [r3, r2]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	2158      	movs	r1, #88	@ 0x58
 8008896:	5a51      	ldrh	r1, [r2, r1]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	205a      	movs	r0, #90	@ 0x5a
 800889c:	5a12      	ldrh	r2, [r2, r0]
 800889e:	b292      	uxth	r2, r2
 80088a0:	1a8a      	subs	r2, r1, r2
 80088a2:	b291      	uxth	r1, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	0010      	movs	r0, r2
 80088a8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088aa:	e0c5      	b.n	8008a38 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2258      	movs	r2, #88	@ 0x58
 80088b0:	5a99      	ldrh	r1, [r3, r2]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	225a      	movs	r2, #90	@ 0x5a
 80088b6:	5a9b      	ldrh	r3, [r3, r2]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	208e      	movs	r0, #142	@ 0x8e
 80088bc:	183b      	adds	r3, r7, r0
 80088be:	1a8a      	subs	r2, r1, r2
 80088c0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	225a      	movs	r2, #90	@ 0x5a
 80088c6:	5a9b      	ldrh	r3, [r3, r2]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d100      	bne.n	80088d0 <HAL_UART_IRQHandler+0x454>
 80088ce:	e0b5      	b.n	8008a3c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80088d0:	183b      	adds	r3, r7, r0
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d100      	bne.n	80088da <HAL_UART_IRQHandler+0x45e>
 80088d8:	e0b0      	b.n	8008a3c <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088da:	f3ef 8310 	mrs	r3, PRIMASK
 80088de:	60fb      	str	r3, [r7, #12]
  return(result);
 80088e0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088e2:	2488      	movs	r4, #136	@ 0x88
 80088e4:	193a      	adds	r2, r7, r4
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	2301      	movs	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f383 8810 	msr	PRIMASK, r3
}
 80088f2:	46c0      	nop			@ (mov r8, r8)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4953      	ldr	r1, [pc, #332]	@ (8008a4c <HAL_UART_IRQHandler+0x5d0>)
 8008900:	400a      	ands	r2, r1
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	193b      	adds	r3, r7, r4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f383 8810 	msr	PRIMASK, r3
}
 8008910:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008912:	f3ef 8310 	mrs	r3, PRIMASK
 8008916:	61bb      	str	r3, [r7, #24]
  return(result);
 8008918:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	2484      	movs	r4, #132	@ 0x84
 800891c:	193a      	adds	r2, r7, r4
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	2301      	movs	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f383 8810 	msr	PRIMASK, r3
}
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2101      	movs	r1, #1
 8008938:	438a      	bics	r2, r1
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	193b      	adds	r3, r7, r4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	f383 8810 	msr	PRIMASK, r3
}
 8008948:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2280      	movs	r2, #128	@ 0x80
 800894e:	2120      	movs	r1, #32
 8008950:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800895e:	f3ef 8310 	mrs	r3, PRIMASK
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008966:	2480      	movs	r4, #128	@ 0x80
 8008968:	193a      	adds	r2, r7, r4
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	2301      	movs	r3, #1
 800896e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	f383 8810 	msr	PRIMASK, r3
}
 8008976:	46c0      	nop			@ (mov r8, r8)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2110      	movs	r1, #16
 8008984:	438a      	bics	r2, r1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	193b      	adds	r3, r7, r4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008990:	f383 8810 	msr	PRIMASK, r3
}
 8008994:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	22ac      	movs	r2, #172	@ 0xac
 80089a0:	589b      	ldr	r3, [r3, r2]
 80089a2:	183a      	adds	r2, r7, r0
 80089a4:	8811      	ldrh	r1, [r2, #0]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	0010      	movs	r0, r2
 80089aa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ac:	e046      	b.n	8008a3c <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089ae:	23a4      	movs	r3, #164	@ 0xa4
 80089b0:	18fb      	adds	r3, r7, r3
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	035b      	lsls	r3, r3, #13
 80089b8:	4013      	ands	r3, r2
 80089ba:	d012      	beq.n	80089e2 <HAL_UART_IRQHandler+0x566>
 80089bc:	239c      	movs	r3, #156	@ 0x9c
 80089be:	18fb      	adds	r3, r7, r3
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	2380      	movs	r3, #128	@ 0x80
 80089c4:	03db      	lsls	r3, r3, #15
 80089c6:	4013      	ands	r3, r2
 80089c8:	d00b      	beq.n	80089e2 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2280      	movs	r2, #128	@ 0x80
 80089d0:	0352      	lsls	r2, r2, #13
 80089d2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	22a8      	movs	r2, #168	@ 0xa8
 80089d8:	589b      	ldr	r3, [r3, r2]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	0010      	movs	r0, r2
 80089de:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089e0:	e02f      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089e2:	23a4      	movs	r3, #164	@ 0xa4
 80089e4:	18fb      	adds	r3, r7, r3
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2280      	movs	r2, #128	@ 0x80
 80089ea:	4013      	ands	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089ee:	23a0      	movs	r3, #160	@ 0xa0
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2280      	movs	r2, #128	@ 0x80
 80089f6:	4013      	ands	r3, r2
 80089f8:	d009      	beq.n	8008a0e <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01e      	beq.n	8008a40 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	0010      	movs	r0, r2
 8008a0a:	4798      	blx	r3
    }
    return;
 8008a0c:	e018      	b.n	8008a40 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a0e:	23a4      	movs	r3, #164	@ 0xa4
 8008a10:	18fb      	adds	r3, r7, r3
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	4013      	ands	r3, r2
 8008a18:	d013      	beq.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
 8008a1a:	23a0      	movs	r3, #160	@ 0xa0
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2240      	movs	r2, #64	@ 0x40
 8008a22:	4013      	ands	r3, r2
 8008a24:	d00d      	beq.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 fe2a 	bl	8009682 <UART_EndTransmit_IT>
    return;
 8008a2e:	e008      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008a30:	46c0      	nop			@ (mov r8, r8)
 8008a32:	e006      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008a34:	46c0      	nop			@ (mov r8, r8)
 8008a36:	e004      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008a38:	46c0      	nop			@ (mov r8, r8)
 8008a3a:	e002      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008a3c:	46c0      	nop			@ (mov r8, r8)
 8008a3e:	e000      	b.n	8008a42 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008a40:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b02b      	add	sp, #172	@ 0xac
 8008a46:	bd90      	pop	{r4, r7, pc}
 8008a48:	fffffeff 	.word	0xfffffeff
 8008a4c:	fffffedf 	.word	0xfffffedf

08008a50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a58:	46c0      	nop			@ (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	b002      	add	sp, #8
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a68:	46c0      	nop			@ (mov r8, r8)
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b002      	add	sp, #8
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a78:	46c0      	nop			@ (mov r8, r8)
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b002      	add	sp, #8
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a88:	46c0      	nop			@ (mov r8, r8)
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	b002      	add	sp, #8
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b002      	add	sp, #8
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008aa8:	46c0      	nop			@ (mov r8, r8)
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b002      	add	sp, #8
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008ab8:	46c0      	nop			@ (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b002      	add	sp, #8
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008ac8:	46c0      	nop			@ (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b002      	add	sp, #8
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2188      	movs	r1, #136	@ 0x88
 8008adc:	4a14      	ldr	r2, [pc, #80]	@ (8008b30 <UART_InitCallbacksToDefault+0x60>)
 8008ade:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	218c      	movs	r1, #140	@ 0x8c
 8008ae4:	4a13      	ldr	r2, [pc, #76]	@ (8008b34 <UART_InitCallbacksToDefault+0x64>)
 8008ae6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2190      	movs	r1, #144	@ 0x90
 8008aec:	4a12      	ldr	r2, [pc, #72]	@ (8008b38 <UART_InitCallbacksToDefault+0x68>)
 8008aee:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2194      	movs	r1, #148	@ 0x94
 8008af4:	4a11      	ldr	r2, [pc, #68]	@ (8008b3c <UART_InitCallbacksToDefault+0x6c>)
 8008af6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2198      	movs	r1, #152	@ 0x98
 8008afc:	4a10      	ldr	r2, [pc, #64]	@ (8008b40 <UART_InitCallbacksToDefault+0x70>)
 8008afe:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	219c      	movs	r1, #156	@ 0x9c
 8008b04:	4a0f      	ldr	r2, [pc, #60]	@ (8008b44 <UART_InitCallbacksToDefault+0x74>)
 8008b06:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	21a0      	movs	r1, #160	@ 0xa0
 8008b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8008b48 <UART_InitCallbacksToDefault+0x78>)
 8008b0e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	21a4      	movs	r1, #164	@ 0xa4
 8008b14:	4a0d      	ldr	r2, [pc, #52]	@ (8008b4c <UART_InitCallbacksToDefault+0x7c>)
 8008b16:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	21a8      	movs	r1, #168	@ 0xa8
 8008b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b50 <UART_InitCallbacksToDefault+0x80>)
 8008b1e:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	21ac      	movs	r1, #172	@ 0xac
 8008b24:	4a0b      	ldr	r2, [pc, #44]	@ (8008b54 <UART_InitCallbacksToDefault+0x84>)
 8008b26:	505a      	str	r2, [r3, r1]

}
 8008b28:	46c0      	nop			@ (mov r8, r8)
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b002      	add	sp, #8
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	08008a61 	.word	0x08008a61
 8008b34:	08008a51 	.word	0x08008a51
 8008b38:	08008a81 	.word	0x08008a81
 8008b3c:	08008a71 	.word	0x08008a71
 8008b40:	08008a91 	.word	0x08008a91
 8008b44:	08008aa1 	.word	0x08008aa1
 8008b48:	08008ab1 	.word	0x08008ab1
 8008b4c:	08008ac1 	.word	0x08008ac1
 8008b50:	080096dd 	.word	0x080096dd
 8008b54:	08002a21 	.word	0x08002a21

08008b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b60:	231e      	movs	r3, #30
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4aaf      	ldr	r2, [pc, #700]	@ (8008e44 <UART_SetConfig+0x2ec>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	0019      	movs	r1, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4aaa      	ldr	r2, [pc, #680]	@ (8008e48 <UART_SetConfig+0x2f0>)
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4aa1      	ldr	r2, [pc, #644]	@ (8008e4c <UART_SetConfig+0x2f4>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	0019      	movs	r1, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a9d      	ldr	r2, [pc, #628]	@ (8008e50 <UART_SetConfig+0x2f8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d127      	bne.n	8008c2e <UART_SetConfig+0xd6>
 8008bde:	4b9d      	ldr	r3, [pc, #628]	@ (8008e54 <UART_SetConfig+0x2fc>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be2:	2203      	movs	r2, #3
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d00d      	beq.n	8008c06 <UART_SetConfig+0xae>
 8008bea:	d81b      	bhi.n	8008c24 <UART_SetConfig+0xcc>
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d014      	beq.n	8008c1a <UART_SetConfig+0xc2>
 8008bf0:	d818      	bhi.n	8008c24 <UART_SetConfig+0xcc>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <UART_SetConfig+0xa4>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <UART_SetConfig+0xb8>
 8008bfa:	e013      	b.n	8008c24 <UART_SetConfig+0xcc>
 8008bfc:	231f      	movs	r3, #31
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e065      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c06:	231f      	movs	r3, #31
 8008c08:	18fb      	adds	r3, r7, r3
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e060      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c10:	231f      	movs	r3, #31
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	2204      	movs	r2, #4
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e05b      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c1a:	231f      	movs	r3, #31
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	2208      	movs	r2, #8
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e056      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c24:	231f      	movs	r3, #31
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	2210      	movs	r2, #16
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e051      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a89      	ldr	r2, [pc, #548]	@ (8008e58 <UART_SetConfig+0x300>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d134      	bne.n	8008ca2 <UART_SetConfig+0x14a>
 8008c38:	4b86      	ldr	r3, [pc, #536]	@ (8008e54 <UART_SetConfig+0x2fc>)
 8008c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c3c:	23c0      	movs	r3, #192	@ 0xc0
 8008c3e:	029b      	lsls	r3, r3, #10
 8008c40:	4013      	ands	r3, r2
 8008c42:	22c0      	movs	r2, #192	@ 0xc0
 8008c44:	0292      	lsls	r2, r2, #10
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d017      	beq.n	8008c7a <UART_SetConfig+0x122>
 8008c4a:	22c0      	movs	r2, #192	@ 0xc0
 8008c4c:	0292      	lsls	r2, r2, #10
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d822      	bhi.n	8008c98 <UART_SetConfig+0x140>
 8008c52:	2280      	movs	r2, #128	@ 0x80
 8008c54:	0292      	lsls	r2, r2, #10
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d019      	beq.n	8008c8e <UART_SetConfig+0x136>
 8008c5a:	2280      	movs	r2, #128	@ 0x80
 8008c5c:	0292      	lsls	r2, r2, #10
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d81a      	bhi.n	8008c98 <UART_SetConfig+0x140>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <UART_SetConfig+0x118>
 8008c66:	2280      	movs	r2, #128	@ 0x80
 8008c68:	0252      	lsls	r2, r2, #9
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00a      	beq.n	8008c84 <UART_SetConfig+0x12c>
 8008c6e:	e013      	b.n	8008c98 <UART_SetConfig+0x140>
 8008c70:	231f      	movs	r3, #31
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e02b      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c7a:	231f      	movs	r3, #31
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	2202      	movs	r2, #2
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e026      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c84:	231f      	movs	r3, #31
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	2204      	movs	r2, #4
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e021      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c8e:	231f      	movs	r3, #31
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	2208      	movs	r2, #8
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	e01c      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008c98:	231f      	movs	r3, #31
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	e017      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8008e5c <UART_SetConfig+0x304>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d104      	bne.n	8008cb6 <UART_SetConfig+0x15e>
 8008cac:	231f      	movs	r3, #31
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e00d      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a69      	ldr	r2, [pc, #420]	@ (8008e60 <UART_SetConfig+0x308>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d104      	bne.n	8008cca <UART_SetConfig+0x172>
 8008cc0:	231f      	movs	r3, #31
 8008cc2:	18fb      	adds	r3, r7, r3
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e003      	b.n	8008cd2 <UART_SetConfig+0x17a>
 8008cca:	231f      	movs	r3, #31
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	2210      	movs	r2, #16
 8008cd0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	2380      	movs	r3, #128	@ 0x80
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d15c      	bne.n	8008d98 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8008cde:	231f      	movs	r3, #31
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d015      	beq.n	8008d14 <UART_SetConfig+0x1bc>
 8008ce8:	dc18      	bgt.n	8008d1c <UART_SetConfig+0x1c4>
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d00d      	beq.n	8008d0a <UART_SetConfig+0x1b2>
 8008cee:	dc15      	bgt.n	8008d1c <UART_SetConfig+0x1c4>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <UART_SetConfig+0x1a2>
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d005      	beq.n	8008d04 <UART_SetConfig+0x1ac>
 8008cf8:	e010      	b.n	8008d1c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cfa:	f7fd ff49 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	61bb      	str	r3, [r7, #24]
        break;
 8008d02:	e012      	b.n	8008d2a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d04:	4b57      	ldr	r3, [pc, #348]	@ (8008e64 <UART_SetConfig+0x30c>)
 8008d06:	61bb      	str	r3, [r7, #24]
        break;
 8008d08:	e00f      	b.n	8008d2a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0a:	f7fd fec5 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8008d0e:	0003      	movs	r3, r0
 8008d10:	61bb      	str	r3, [r7, #24]
        break;
 8008d12:	e00a      	b.n	8008d2a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	61bb      	str	r3, [r7, #24]
        break;
 8008d1a:	e006      	b.n	8008d2a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d20:	231e      	movs	r3, #30
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]
        break;
 8008d28:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d100      	bne.n	8008d32 <UART_SetConfig+0x1da>
 8008d30:	e07a      	b.n	8008e28 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	005a      	lsls	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	18d2      	adds	r2, r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	0019      	movs	r1, r3
 8008d44:	0010      	movs	r0, r2
 8008d46:	f7f7 f9fb 	bl	8000140 <__udivsi3>
 8008d4a:	0003      	movs	r3, r0
 8008d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b0f      	cmp	r3, #15
 8008d52:	d91c      	bls.n	8008d8e <UART_SetConfig+0x236>
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	2380      	movs	r3, #128	@ 0x80
 8008d58:	025b      	lsls	r3, r3, #9
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d217      	bcs.n	8008d8e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	200e      	movs	r0, #14
 8008d64:	183b      	adds	r3, r7, r0
 8008d66:	210f      	movs	r1, #15
 8008d68:	438a      	bics	r2, r1
 8008d6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2207      	movs	r2, #7
 8008d74:	4013      	ands	r3, r2
 8008d76:	b299      	uxth	r1, r3
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	183a      	adds	r2, r7, r0
 8008d7c:	8812      	ldrh	r2, [r2, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	183a      	adds	r2, r7, r0
 8008d88:	8812      	ldrh	r2, [r2, #0]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	e04c      	b.n	8008e28 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008d8e:	231e      	movs	r3, #30
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e047      	b.n	8008e28 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d98:	231f      	movs	r3, #31
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d015      	beq.n	8008dce <UART_SetConfig+0x276>
 8008da2:	dc18      	bgt.n	8008dd6 <UART_SetConfig+0x27e>
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d00d      	beq.n	8008dc4 <UART_SetConfig+0x26c>
 8008da8:	dc15      	bgt.n	8008dd6 <UART_SetConfig+0x27e>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <UART_SetConfig+0x25c>
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d005      	beq.n	8008dbe <UART_SetConfig+0x266>
 8008db2:	e010      	b.n	8008dd6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7fd feec 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8008db8:	0003      	movs	r3, r0
 8008dba:	61bb      	str	r3, [r7, #24]
        break;
 8008dbc:	e012      	b.n	8008de4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dbe:	4b29      	ldr	r3, [pc, #164]	@ (8008e64 <UART_SetConfig+0x30c>)
 8008dc0:	61bb      	str	r3, [r7, #24]
        break;
 8008dc2:	e00f      	b.n	8008de4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dc4:	f7fd fe68 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8008dc8:	0003      	movs	r3, r0
 8008dca:	61bb      	str	r3, [r7, #24]
        break;
 8008dcc:	e00a      	b.n	8008de4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	61bb      	str	r3, [r7, #24]
        break;
 8008dd4:	e006      	b.n	8008de4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dda:	231e      	movs	r3, #30
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
        break;
 8008de2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01e      	beq.n	8008e28 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085a      	lsrs	r2, r3, #1
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	18d2      	adds	r2, r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	0019      	movs	r1, r3
 8008dfa:	0010      	movs	r0, r2
 8008dfc:	f7f7 f9a0 	bl	8000140 <__udivsi3>
 8008e00:	0003      	movs	r3, r0
 8008e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b0f      	cmp	r3, #15
 8008e08:	d90a      	bls.n	8008e20 <UART_SetConfig+0x2c8>
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	2380      	movs	r3, #128	@ 0x80
 8008e0e:	025b      	lsls	r3, r3, #9
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d205      	bcs.n	8008e20 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60da      	str	r2, [r3, #12]
 8008e1e:	e003      	b.n	8008e28 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008e20:	231e      	movs	r3, #30
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008e34:	231e      	movs	r3, #30
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	781b      	ldrb	r3, [r3, #0]
}
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b008      	add	sp, #32
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	efff69f3 	.word	0xefff69f3
 8008e48:	ffffcfff 	.word	0xffffcfff
 8008e4c:	fffff4ff 	.word	0xfffff4ff
 8008e50:	40013800 	.word	0x40013800
 8008e54:	40021000 	.word	0x40021000
 8008e58:	40004400 	.word	0x40004400
 8008e5c:	40004800 	.word	0x40004800
 8008e60:	40004c00 	.word	0x40004c00
 8008e64:	007a1200 	.word	0x007a1200

08008e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	2208      	movs	r2, #8
 8008e76:	4013      	ands	r3, r2
 8008e78:	d00b      	beq.n	8008e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4a4a      	ldr	r2, [pc, #296]	@ (8008fac <UART_AdvFeatureConfig+0x144>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	0019      	movs	r1, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e96:	2201      	movs	r2, #1
 8008e98:	4013      	ands	r3, r2
 8008e9a:	d00b      	beq.n	8008eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4a43      	ldr	r2, [pc, #268]	@ (8008fb0 <UART_AdvFeatureConfig+0x148>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb8:	2202      	movs	r2, #2
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d00b      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb4 <UART_AdvFeatureConfig+0x14c>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	0019      	movs	r1, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	2204      	movs	r2, #4
 8008edc:	4013      	ands	r3, r2
 8008ede:	d00b      	beq.n	8008ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	4a34      	ldr	r2, [pc, #208]	@ (8008fb8 <UART_AdvFeatureConfig+0x150>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	0019      	movs	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efc:	2210      	movs	r2, #16
 8008efe:	4013      	ands	r3, r2
 8008f00:	d00b      	beq.n	8008f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	4a2c      	ldr	r2, [pc, #176]	@ (8008fbc <UART_AdvFeatureConfig+0x154>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	0019      	movs	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1e:	2220      	movs	r2, #32
 8008f20:	4013      	ands	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	4a25      	ldr	r2, [pc, #148]	@ (8008fc0 <UART_AdvFeatureConfig+0x158>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	0019      	movs	r1, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	2240      	movs	r2, #64	@ 0x40
 8008f42:	4013      	ands	r3, r2
 8008f44:	d01d      	beq.n	8008f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc4 <UART_AdvFeatureConfig+0x15c>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	0019      	movs	r1, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f62:	2380      	movs	r3, #128	@ 0x80
 8008f64:	035b      	lsls	r3, r3, #13
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d10b      	bne.n	8008f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a15      	ldr	r2, [pc, #84]	@ (8008fc8 <UART_AdvFeatureConfig+0x160>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	0019      	movs	r1, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	2280      	movs	r2, #128	@ 0x80
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4a0e      	ldr	r2, [pc, #56]	@ (8008fcc <UART_AdvFeatureConfig+0x164>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	0019      	movs	r1, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	605a      	str	r2, [r3, #4]
  }
}
 8008fa4:	46c0      	nop			@ (mov r8, r8)
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b002      	add	sp, #8
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	ffff7fff 	.word	0xffff7fff
 8008fb0:	fffdffff 	.word	0xfffdffff
 8008fb4:	fffeffff 	.word	0xfffeffff
 8008fb8:	fffbffff 	.word	0xfffbffff
 8008fbc:	ffffefff 	.word	0xffffefff
 8008fc0:	ffffdfff 	.word	0xffffdfff
 8008fc4:	ffefffff 	.word	0xffefffff
 8008fc8:	ff9fffff 	.word	0xff9fffff
 8008fcc:	fff7ffff 	.word	0xfff7ffff

08008fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b092      	sub	sp, #72	@ 0x48
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2284      	movs	r2, #132	@ 0x84
 8008fdc:	2100      	movs	r1, #0
 8008fde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fe0:	f7fa fb48 	bl	8003674 <HAL_GetTick>
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2208      	movs	r2, #8
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d12c      	bne.n	8009050 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff8:	2280      	movs	r2, #128	@ 0x80
 8008ffa:	0391      	lsls	r1, r2, #14
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4a46      	ldr	r2, [pc, #280]	@ (8009118 <UART_CheckIdleState+0x148>)
 8009000:	9200      	str	r2, [sp, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f88c 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009008:	1e03      	subs	r3, r0, #0
 800900a:	d021      	beq.n	8009050 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800900c:	f3ef 8310 	mrs	r3, PRIMASK
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009016:	2301      	movs	r3, #1
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	f383 8810 	msr	PRIMASK, r3
}
 8009020:	46c0      	nop			@ (mov r8, r8)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2180      	movs	r1, #128	@ 0x80
 800902e:	438a      	bics	r2, r1
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	f383 8810 	msr	PRIMASK, r3
}
 800903c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2278      	movs	r2, #120	@ 0x78
 8009048:	2100      	movs	r1, #0
 800904a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e05f      	b.n	8009110 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	4013      	ands	r3, r2
 800905a:	2b04      	cmp	r3, #4
 800905c:	d146      	bne.n	80090ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	2280      	movs	r2, #128	@ 0x80
 8009062:	03d1      	lsls	r1, r2, #15
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4a2c      	ldr	r2, [pc, #176]	@ (8009118 <UART_CheckIdleState+0x148>)
 8009068:	9200      	str	r2, [sp, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	f000 f858 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009070:	1e03      	subs	r3, r0, #0
 8009072:	d03b      	beq.n	80090ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009074:	f3ef 8310 	mrs	r3, PRIMASK
 8009078:	60fb      	str	r3, [r7, #12]
  return(result);
 800907a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
 800907e:	2301      	movs	r3, #1
 8009080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f383 8810 	msr	PRIMASK, r3
}
 8009088:	46c0      	nop			@ (mov r8, r8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4921      	ldr	r1, [pc, #132]	@ (800911c <UART_CheckIdleState+0x14c>)
 8009096:	400a      	ands	r2, r1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a6:	f3ef 8310 	mrs	r3, PRIMASK
 80090aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80090ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b0:	2301      	movs	r3, #1
 80090b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f383 8810 	msr	PRIMASK, r3
}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2101      	movs	r1, #1
 80090c8:	438a      	bics	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f383 8810 	msr	PRIMASK, r3
}
 80090d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2280      	movs	r2, #128	@ 0x80
 80090dc:	2120      	movs	r1, #32
 80090de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2278      	movs	r2, #120	@ 0x78
 80090e4:	2100      	movs	r1, #0
 80090e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e011      	b.n	8009110 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2280      	movs	r2, #128	@ 0x80
 80090f6:	2120      	movs	r1, #32
 80090f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2278      	movs	r2, #120	@ 0x78
 800910a:	2100      	movs	r1, #0
 800910c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b010      	add	sp, #64	@ 0x40
 8009116:	bd80      	pop	{r7, pc}
 8009118:	01ffffff 	.word	0x01ffffff
 800911c:	fffffedf 	.word	0xfffffedf

08009120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	1dfb      	adds	r3, r7, #7
 800912e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	e051      	b.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	3301      	adds	r3, #1
 8009136:	d04e      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009138:	f7fa fa9c 	bl	8003674 <HAL_GetTick>
 800913c:	0002      	movs	r2, r0
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e051      	b.n	80091f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2204      	movs	r2, #4
 800915a:	4013      	ands	r3, r2
 800915c:	d03b      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b80      	cmp	r3, #128	@ 0x80
 8009162:	d038      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b40      	cmp	r3, #64	@ 0x40
 8009168:	d035      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	2208      	movs	r2, #8
 8009172:	4013      	ands	r3, r2
 8009174:	2b08      	cmp	r3, #8
 8009176:	d111      	bne.n	800919c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2208      	movs	r2, #8
 800917e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	0018      	movs	r0, r3
 8009184:	f000 f900 	bl	8009388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2284      	movs	r2, #132	@ 0x84
 800918c:	2108      	movs	r1, #8
 800918e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2278      	movs	r2, #120	@ 0x78
 8009194:	2100      	movs	r1, #0
 8009196:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e02c      	b.n	80091f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	69da      	ldr	r2, [r3, #28]
 80091a2:	2380      	movs	r3, #128	@ 0x80
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	401a      	ands	r2, r3
 80091a8:	2380      	movs	r3, #128	@ 0x80
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d112      	bne.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2280      	movs	r2, #128	@ 0x80
 80091b6:	0112      	lsls	r2, r2, #4
 80091b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	0018      	movs	r0, r3
 80091be:	f000 f8e3 	bl	8009388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2284      	movs	r2, #132	@ 0x84
 80091c6:	2120      	movs	r1, #32
 80091c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2278      	movs	r2, #120	@ 0x78
 80091ce:	2100      	movs	r1, #0
 80091d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e00f      	b.n	80091f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	4013      	ands	r3, r2
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	425a      	negs	r2, r3
 80091e6:	4153      	adcs	r3, r2
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	001a      	movs	r2, r3
 80091ec:	1dfb      	adds	r3, r7, #7
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d09e      	beq.n	8009132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	0018      	movs	r0, r3
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b004      	add	sp, #16
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b090      	sub	sp, #64	@ 0x40
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	1dbb      	adds	r3, r7, #6
 800920c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1dba      	adds	r2, r7, #6
 8009218:	2158      	movs	r1, #88	@ 0x58
 800921a:	8812      	ldrh	r2, [r2, #0]
 800921c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2284      	movs	r2, #132	@ 0x84
 8009222:	2100      	movs	r1, #0
 8009224:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2280      	movs	r2, #128	@ 0x80
 800922a:	2122      	movs	r1, #34	@ 0x22
 800922c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009232:	2b00      	cmp	r3, #0
 8009234:	d028      	beq.n	8009288 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800923a:	4a3e      	ldr	r2, [pc, #248]	@ (8009334 <UART_Start_Receive_DMA+0x134>)
 800923c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009242:	4a3d      	ldr	r2, [pc, #244]	@ (8009338 <UART_Start_Receive_DMA+0x138>)
 8009244:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924a:	4a3c      	ldr	r2, [pc, #240]	@ (800933c <UART_Start_Receive_DMA+0x13c>)
 800924c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009252:	2200      	movs	r2, #0
 8009254:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3324      	adds	r3, #36	@ 0x24
 8009260:	0019      	movs	r1, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009266:	001a      	movs	r2, r3
 8009268:	1dbb      	adds	r3, r7, #6
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	f7fa fdd6 	bl	8003e1c <HAL_DMA_Start_IT>
 8009270:	1e03      	subs	r3, r0, #0
 8009272:	d009      	beq.n	8009288 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2284      	movs	r2, #132	@ 0x84
 8009278:	2110      	movs	r1, #16
 800927a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2280      	movs	r2, #128	@ 0x80
 8009280:	2120      	movs	r1, #32
 8009282:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e050      	b.n	800932a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d019      	beq.n	80092c4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009290:	f3ef 8310 	mrs	r3, PRIMASK
 8009294:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800929a:	2301      	movs	r3, #1
 800929c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	f383 8810 	msr	PRIMASK, r3
}
 80092a4:	46c0      	nop			@ (mov r8, r8)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2180      	movs	r1, #128	@ 0x80
 80092b2:	0049      	lsls	r1, r1, #1
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	f383 8810 	msr	PRIMASK, r3
}
 80092c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8310 	mrs	r3, PRIMASK
 80092c8:	613b      	str	r3, [r7, #16]
  return(result);
 80092ca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092ce:	2301      	movs	r3, #1
 80092d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f383 8810 	msr	PRIMASK, r3
}
 80092d8:	46c0      	nop			@ (mov r8, r8)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2101      	movs	r1, #1
 80092e6:	430a      	orrs	r2, r1
 80092e8:	609a      	str	r2, [r3, #8]
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f383 8810 	msr	PRIMASK, r3
}
 80092f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f6:	f3ef 8310 	mrs	r3, PRIMASK
 80092fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80092fc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009300:	2301      	movs	r3, #1
 8009302:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	f383 8810 	msr	PRIMASK, r3
}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2140      	movs	r1, #64	@ 0x40
 8009318:	430a      	orrs	r2, r1
 800931a:	609a      	str	r2, [r3, #8]
 800931c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	f383 8810 	msr	PRIMASK, r3
}
 8009326:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	0018      	movs	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	b010      	add	sp, #64	@ 0x40
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			@ (mov r8, r8)
 8009334:	08009451 	.word	0x08009451
 8009338:	08009581 	.word	0x08009581
 800933c:	080095c9 	.word	0x080095c9

08009340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009348:	f3ef 8310 	mrs	r3, PRIMASK
 800934c:	60bb      	str	r3, [r7, #8]
  return(result);
 800934e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009350:	617b      	str	r3, [r7, #20]
 8009352:	2301      	movs	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f383 8810 	msr	PRIMASK, r3
}
 800935c:	46c0      	nop			@ (mov r8, r8)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	21c0      	movs	r1, #192	@ 0xc0
 800936a:	438a      	bics	r2, r1
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f383 8810 	msr	PRIMASK, r3
}
 8009378:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009380:	46c0      	nop			@ (mov r8, r8)
 8009382:	46bd      	mov	sp, r7
 8009384:	b006      	add	sp, #24
 8009386:	bd80      	pop	{r7, pc}

08009388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08e      	sub	sp, #56	@ 0x38
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009390:	f3ef 8310 	mrs	r3, PRIMASK
 8009394:	617b      	str	r3, [r7, #20]
  return(result);
 8009396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
 800939a:	2301      	movs	r3, #1
 800939c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f383 8810 	msr	PRIMASK, r3
}
 80093a4:	46c0      	nop			@ (mov r8, r8)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4926      	ldr	r1, [pc, #152]	@ (800944c <UART_EndRxTransfer+0xc4>)
 80093b2:	400a      	ands	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c2:	f3ef 8310 	mrs	r3, PRIMASK
 80093c6:	623b      	str	r3, [r7, #32]
  return(result);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80093cc:	2301      	movs	r3, #1
 80093ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	f383 8810 	msr	PRIMASK, r3
}
 80093d6:	46c0      	nop			@ (mov r8, r8)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2101      	movs	r1, #1
 80093e4:	438a      	bics	r2, r1
 80093e6:	609a      	str	r2, [r3, #8]
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ee:	f383 8810 	msr	PRIMASK, r3
}
 80093f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d118      	bne.n	800942e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009400:	60bb      	str	r3, [r7, #8]
  return(result);
 8009402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009406:	2301      	movs	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f383 8810 	msr	PRIMASK, r3
}
 8009410:	46c0      	nop			@ (mov r8, r8)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2110      	movs	r1, #16
 800941e:	438a      	bics	r2, r1
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f383 8810 	msr	PRIMASK, r3
}
 800942c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2280      	movs	r2, #128	@ 0x80
 8009432:	2120      	movs	r1, #32
 8009434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009442:	46c0      	nop			@ (mov r8, r8)
 8009444:	46bd      	mov	sp, r7
 8009446:	b00e      	add	sp, #56	@ 0x38
 8009448:	bd80      	pop	{r7, pc}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	fffffedf 	.word	0xfffffedf

08009450 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b094      	sub	sp, #80	@ 0x50
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b20      	cmp	r3, #32
 8009464:	d06f      	beq.n	8009546 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8009466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009468:	225a      	movs	r2, #90	@ 0x5a
 800946a:	2100      	movs	r1, #0
 800946c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800946e:	f3ef 8310 	mrs	r3, PRIMASK
 8009472:	61bb      	str	r3, [r7, #24]
  return(result);
 8009474:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009478:	2301      	movs	r3, #1
 800947a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f383 8810 	msr	PRIMASK, r3
}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	493b      	ldr	r1, [pc, #236]	@ (800957c <UART_DMAReceiveCplt+0x12c>)
 8009490:	400a      	ands	r2, r1
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009496:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	f383 8810 	msr	PRIMASK, r3
}
 800949e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a0:	f3ef 8310 	mrs	r3, PRIMASK
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094aa:	2301      	movs	r3, #1
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	f383 8810 	msr	PRIMASK, r3
}
 80094b4:	46c0      	nop			@ (mov r8, r8)
 80094b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2101      	movs	r1, #1
 80094c2:	438a      	bics	r2, r1
 80094c4:	609a      	str	r2, [r3, #8]
 80094c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	f383 8810 	msr	PRIMASK, r3
}
 80094d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d2:	f3ef 8310 	mrs	r3, PRIMASK
 80094d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094da:	643b      	str	r3, [r7, #64]	@ 0x40
 80094dc:	2301      	movs	r3, #1
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e2:	f383 8810 	msr	PRIMASK, r3
}
 80094e6:	46c0      	nop			@ (mov r8, r8)
 80094e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2140      	movs	r1, #64	@ 0x40
 80094f4:	438a      	bics	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	f383 8810 	msr	PRIMASK, r3
}
 8009502:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009506:	2280      	movs	r2, #128	@ 0x80
 8009508:	2120      	movs	r1, #32
 800950a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009510:	2b01      	cmp	r3, #1
 8009512:	d118      	bne.n	8009546 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009514:	f3ef 8310 	mrs	r3, PRIMASK
 8009518:	60fb      	str	r3, [r7, #12]
  return(result);
 800951a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951e:	2301      	movs	r3, #1
 8009520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f383 8810 	msr	PRIMASK, r3
}
 8009528:	46c0      	nop			@ (mov r8, r8)
 800952a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2110      	movs	r1, #16
 8009536:	438a      	bics	r2, r1
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f383 8810 	msr	PRIMASK, r3
}
 8009544:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009548:	2200      	movs	r2, #0
 800954a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800954c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009550:	2b01      	cmp	r3, #1
 8009552:	d109      	bne.n	8009568 <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009556:	22ac      	movs	r2, #172	@ 0xac
 8009558:	589b      	ldr	r3, [r3, r2]
 800955a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800955c:	2158      	movs	r1, #88	@ 0x58
 800955e:	5a51      	ldrh	r1, [r2, r1]
 8009560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009562:	0010      	movs	r0, r2
 8009564:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009566:	e005      	b.n	8009574 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 8009568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956a:	2294      	movs	r2, #148	@ 0x94
 800956c:	589b      	ldr	r3, [r3, r2]
 800956e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009570:	0010      	movs	r0, r2
 8009572:	4798      	blx	r3
}
 8009574:	46c0      	nop			@ (mov r8, r8)
 8009576:	46bd      	mov	sp, r7
 8009578:	b014      	add	sp, #80	@ 0x50
 800957a:	bd80      	pop	{r7, pc}
 800957c:	fffffeff 	.word	0xfffffeff

08009580 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10b      	bne.n	80095b4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	22ac      	movs	r2, #172	@ 0xac
 80095a0:	589b      	ldr	r3, [r3, r2]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	2158      	movs	r1, #88	@ 0x58
 80095a6:	5a52      	ldrh	r2, [r2, r1]
 80095a8:	0852      	lsrs	r2, r2, #1
 80095aa:	b291      	uxth	r1, r2
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	0010      	movs	r0, r2
 80095b0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095b2:	e005      	b.n	80095c0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2290      	movs	r2, #144	@ 0x90
 80095b8:	589b      	ldr	r3, [r3, r2]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	0010      	movs	r0, r2
 80095be:	4798      	blx	r3
}
 80095c0:	46c0      	nop			@ (mov r8, r8)
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b004      	add	sp, #16
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2280      	movs	r2, #128	@ 0x80
 80095e0:	589b      	ldr	r3, [r3, r2]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2280      	movs	r2, #128	@ 0x80
 80095ec:	4013      	ands	r3, r2
 80095ee:	2b80      	cmp	r3, #128	@ 0x80
 80095f0:	d10a      	bne.n	8009608 <UART_DMAError+0x40>
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b21      	cmp	r3, #33	@ 0x21
 80095f6:	d107      	bne.n	8009608 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2252      	movs	r2, #82	@ 0x52
 80095fc:	2100      	movs	r1, #0
 80095fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	0018      	movs	r0, r3
 8009604:	f7ff fe9c 	bl	8009340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	2240      	movs	r2, #64	@ 0x40
 8009610:	4013      	ands	r3, r2
 8009612:	2b40      	cmp	r3, #64	@ 0x40
 8009614:	d10a      	bne.n	800962c <UART_DMAError+0x64>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b22      	cmp	r3, #34	@ 0x22
 800961a:	d107      	bne.n	800962c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	225a      	movs	r2, #90	@ 0x5a
 8009620:	2100      	movs	r1, #0
 8009622:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	0018      	movs	r0, r3
 8009628:	f7ff feae 	bl	8009388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2284      	movs	r2, #132	@ 0x84
 8009630:	589b      	ldr	r3, [r3, r2]
 8009632:	2210      	movs	r2, #16
 8009634:	431a      	orrs	r2, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2184      	movs	r1, #132	@ 0x84
 800963a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2298      	movs	r2, #152	@ 0x98
 8009640:	589b      	ldr	r3, [r3, r2]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	0010      	movs	r0, r2
 8009646:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009648:	46c0      	nop			@ (mov r8, r8)
 800964a:	46bd      	mov	sp, r7
 800964c:	b006      	add	sp, #24
 800964e:	bd80      	pop	{r7, pc}

08009650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	225a      	movs	r2, #90	@ 0x5a
 8009662:	2100      	movs	r1, #0
 8009664:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2252      	movs	r2, #82	@ 0x52
 800966a:	2100      	movs	r1, #0
 800966c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2298      	movs	r2, #152	@ 0x98
 8009672:	589b      	ldr	r3, [r3, r2]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	0010      	movs	r0, r2
 8009678:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800967a:	46c0      	nop			@ (mov r8, r8)
 800967c:	46bd      	mov	sp, r7
 800967e:	b004      	add	sp, #16
 8009680:	bd80      	pop	{r7, pc}

08009682 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b086      	sub	sp, #24
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968a:	f3ef 8310 	mrs	r3, PRIMASK
 800968e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009690:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	2301      	movs	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f383 8810 	msr	PRIMASK, r3
}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2140      	movs	r1, #64	@ 0x40
 80096ac:	438a      	bics	r2, r1
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f383 8810 	msr	PRIMASK, r3
}
 80096ba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	228c      	movs	r2, #140	@ 0x8c
 80096cc:	589b      	ldr	r3, [r3, r2]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	0010      	movs	r0, r2
 80096d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096d4:	46c0      	nop			@ (mov r8, r8)
 80096d6:	46bd      	mov	sp, r7
 80096d8:	b006      	add	sp, #24
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096e4:	46c0      	nop			@ (mov r8, r8)
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b002      	add	sp, #8
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096ec:	b5b0      	push	{r4, r5, r7, lr}
 80096ee:	b08a      	sub	sp, #40	@ 0x28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	1dbb      	adds	r3, r7, #6
 80096f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2280      	movs	r2, #128	@ 0x80
 80096fe:	589b      	ldr	r3, [r3, r2]
 8009700:	2b20      	cmp	r3, #32
 8009702:	d156      	bne.n	80097b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800970a:	1dbb      	adds	r3, r7, #6
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e04e      	b.n	80097b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	2380      	movs	r3, #128	@ 0x80
 800971c:	015b      	lsls	r3, r3, #5
 800971e:	429a      	cmp	r2, r3
 8009720:	d109      	bne.n	8009736 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2201      	movs	r2, #1
 800972e:	4013      	ands	r3, r2
 8009730:	d001      	beq.n	8009736 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e03e      	b.n	80097b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2201      	movs	r2, #1
 800973a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009742:	2527      	movs	r5, #39	@ 0x27
 8009744:	197c      	adds	r4, r7, r5
 8009746:	1dbb      	adds	r3, r7, #6
 8009748:	881a      	ldrh	r2, [r3, #0]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0018      	movs	r0, r3
 8009750:	f7ff fd56 	bl	8009200 <UART_Start_Receive_DMA>
 8009754:	0003      	movs	r3, r0
 8009756:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009758:	197b      	adds	r3, r7, r5
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d124      	bne.n	80097aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009764:	2b01      	cmp	r3, #1
 8009766:	d11c      	bne.n	80097a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2210      	movs	r2, #16
 800976e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009770:	f3ef 8310 	mrs	r3, PRIMASK
 8009774:	617b      	str	r3, [r7, #20]
  return(result);
 8009776:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009778:	623b      	str	r3, [r7, #32]
 800977a:	2301      	movs	r3, #1
 800977c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f383 8810 	msr	PRIMASK, r3
}
 8009784:	46c0      	nop			@ (mov r8, r8)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2110      	movs	r1, #16
 8009792:	430a      	orrs	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	e003      	b.n	80097aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80097a2:	2327      	movs	r3, #39	@ 0x27
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	2201      	movs	r2, #1
 80097a8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80097aa:	2327      	movs	r3, #39	@ 0x27
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	e000      	b.n	80097b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80097b2:	2302      	movs	r3, #2
  }
}
 80097b4:	0018      	movs	r0, r3
 80097b6:	46bd      	mov	sp, r7
 80097b8:	b00a      	add	sp, #40	@ 0x28
 80097ba:	bdb0      	pop	{r4, r5, r7, pc}

080097bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2244      	movs	r2, #68	@ 0x44
 80097c8:	2100      	movs	r1, #0
 80097ca:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <USB_EnableGlobalInt+0x28>)
 80097ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	b299      	uxth	r1, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2240      	movs	r2, #64	@ 0x40
 80097d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b004      	add	sp, #16
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	0000bf80 	.word	0x0000bf80

080097e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097f0:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <USB_DisableGlobalInt+0x30>)
 80097f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2240      	movs	r2, #64	@ 0x40
 80097f8:	5a9b      	ldrh	r3, [r3, r2]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	b292      	uxth	r2, r2
 8009800:	43d2      	mvns	r2, r2
 8009802:	b292      	uxth	r2, r2
 8009804:	4013      	ands	r3, r2
 8009806:	b299      	uxth	r1, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2240      	movs	r2, #64	@ 0x40
 800980c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	0018      	movs	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	b004      	add	sp, #16
 8009816:	bd80      	pop	{r7, pc}
 8009818:	0000bf80 	.word	0x0000bf80

0800981c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	1d3b      	adds	r3, r7, #4
 8009826:	6019      	str	r1, [r3, #0]
 8009828:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2240      	movs	r2, #64	@ 0x40
 800982e:	2101      	movs	r1, #1
 8009830:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2240      	movs	r2, #64	@ 0x40
 8009836:	2100      	movs	r1, #0
 8009838:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2244      	movs	r2, #68	@ 0x44
 800983e:	2100      	movs	r1, #0
 8009840:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2250      	movs	r2, #80	@ 0x50
 8009846:	2100      	movs	r1, #0
 8009848:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	0018      	movs	r0, r3
 800984e:	46bd      	mov	sp, r7
 8009850:	b004      	add	sp, #16
 8009852:	bd80      	pop	{r7, pc}

08009854 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b09c      	sub	sp, #112	@ 0x70
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800985e:	236f      	movs	r3, #111	@ 0x6f
 8009860:	18fb      	adds	r3, r7, r3
 8009862:	2200      	movs	r2, #0
 8009864:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	b29a      	uxth	r2, r3
 8009874:	236c      	movs	r3, #108	@ 0x6c
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	49a1      	ldr	r1, [pc, #644]	@ (8009b00 <USB_ActivateEndpoint+0x2ac>)
 800987a:	400a      	ands	r2, r1
 800987c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	78db      	ldrb	r3, [r3, #3]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d017      	beq.n	80098b6 <USB_ActivateEndpoint+0x62>
 8009886:	dc28      	bgt.n	80098da <USB_ActivateEndpoint+0x86>
 8009888:	2b02      	cmp	r3, #2
 800988a:	d00e      	beq.n	80098aa <USB_ActivateEndpoint+0x56>
 800988c:	dc25      	bgt.n	80098da <USB_ActivateEndpoint+0x86>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <USB_ActivateEndpoint+0x44>
 8009892:	2b01      	cmp	r3, #1
 8009894:	d018      	beq.n	80098c8 <USB_ActivateEndpoint+0x74>
 8009896:	e020      	b.n	80098da <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009898:	226c      	movs	r2, #108	@ 0x6c
 800989a:	18bb      	adds	r3, r7, r2
 800989c:	18ba      	adds	r2, r7, r2
 800989e:	8812      	ldrh	r2, [r2, #0]
 80098a0:	2180      	movs	r1, #128	@ 0x80
 80098a2:	0089      	lsls	r1, r1, #2
 80098a4:	430a      	orrs	r2, r1
 80098a6:	801a      	strh	r2, [r3, #0]
      break;
 80098a8:	e01c      	b.n	80098e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80098aa:	226c      	movs	r2, #108	@ 0x6c
 80098ac:	18bb      	adds	r3, r7, r2
 80098ae:	18ba      	adds	r2, r7, r2
 80098b0:	8812      	ldrh	r2, [r2, #0]
 80098b2:	801a      	strh	r2, [r3, #0]
      break;
 80098b4:	e016      	b.n	80098e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80098b6:	226c      	movs	r2, #108	@ 0x6c
 80098b8:	18bb      	adds	r3, r7, r2
 80098ba:	18ba      	adds	r2, r7, r2
 80098bc:	8812      	ldrh	r2, [r2, #0]
 80098be:	21c0      	movs	r1, #192	@ 0xc0
 80098c0:	00c9      	lsls	r1, r1, #3
 80098c2:	430a      	orrs	r2, r1
 80098c4:	801a      	strh	r2, [r3, #0]
      break;
 80098c6:	e00d      	b.n	80098e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80098c8:	226c      	movs	r2, #108	@ 0x6c
 80098ca:	18bb      	adds	r3, r7, r2
 80098cc:	18ba      	adds	r2, r7, r2
 80098ce:	8812      	ldrh	r2, [r2, #0]
 80098d0:	2180      	movs	r1, #128	@ 0x80
 80098d2:	00c9      	lsls	r1, r1, #3
 80098d4:	430a      	orrs	r2, r1
 80098d6:	801a      	strh	r2, [r3, #0]
      break;
 80098d8:	e004      	b.n	80098e4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80098da:	236f      	movs	r3, #111	@ 0x6f
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	2201      	movs	r2, #1
 80098e0:	701a      	strb	r2, [r3, #0]
      break;
 80098e2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	18d3      	adds	r3, r2, r3
 80098ee:	226c      	movs	r2, #108	@ 0x6c
 80098f0:	18ba      	adds	r2, r7, r2
 80098f2:	8812      	ldrh	r2, [r2, #0]
 80098f4:	4983      	ldr	r1, [pc, #524]	@ (8009b04 <USB_ActivateEndpoint+0x2b0>)
 80098f6:	430a      	orrs	r2, r1
 80098f8:	b292      	uxth	r2, r2
 80098fa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	18d3      	adds	r3, r2, r3
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	b21b      	sxth	r3, r3
 800990c:	4a7e      	ldr	r2, [pc, #504]	@ (8009b08 <USB_ActivateEndpoint+0x2b4>)
 800990e:	4013      	ands	r3, r2
 8009910:	b21a      	sxth	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b21b      	sxth	r3, r3
 8009918:	4313      	orrs	r3, r2
 800991a:	b21a      	sxth	r2, r3
 800991c:	2166      	movs	r1, #102	@ 0x66
 800991e:	187b      	adds	r3, r7, r1
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	18d3      	adds	r3, r2, r3
 800992c:	187a      	adds	r2, r7, r1
 800992e:	8812      	ldrh	r2, [r2, #0]
 8009930:	4974      	ldr	r1, [pc, #464]	@ (8009b04 <USB_ActivateEndpoint+0x2b0>)
 8009932:	430a      	orrs	r2, r1
 8009934:	b292      	uxth	r2, r2
 8009936:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	7b1b      	ldrb	r3, [r3, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d000      	beq.n	8009942 <USB_ActivateEndpoint+0xee>
 8009940:	e177      	b.n	8009c32 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d100      	bne.n	800994c <USB_ActivateEndpoint+0xf8>
 800994a:	e07a      	b.n	8009a42 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2250      	movs	r2, #80	@ 0x50
 8009954:	5a9b      	ldrh	r3, [r3, r2]
 8009956:	b29b      	uxth	r3, r3
 8009958:	001a      	movs	r2, r3
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	189b      	adds	r3, r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	00da      	lsls	r2, r3, #3
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	18d3      	adds	r3, r2, r3
 800996a:	2280      	movs	r2, #128	@ 0x80
 800996c:	00d2      	lsls	r2, r2, #3
 800996e:	4694      	mov	ip, r2
 8009970:	4463      	add	r3, ip
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	085b      	lsrs	r3, r3, #1
 800997a:	b29b      	uxth	r3, r3
 800997c:	18db      	adds	r3, r3, r3
 800997e:	b29a      	uxth	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	18d2      	adds	r2, r2, r3
 800998e:	2112      	movs	r1, #18
 8009990:	187b      	adds	r3, r7, r1
 8009992:	8812      	ldrh	r2, [r2, #0]
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	187b      	adds	r3, r7, r1
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	2240      	movs	r2, #64	@ 0x40
 800999c:	4013      	ands	r3, r2
 800999e:	d016      	beq.n	80099ce <USB_ActivateEndpoint+0x17a>
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	2010      	movs	r0, #16
 80099b0:	183b      	adds	r3, r7, r0
 80099b2:	4955      	ldr	r1, [pc, #340]	@ (8009b08 <USB_ActivateEndpoint+0x2b4>)
 80099b4:	400a      	ands	r2, r1
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	18d3      	adds	r3, r2, r3
 80099c2:	183a      	adds	r2, r7, r0
 80099c4:	8812      	ldrh	r2, [r2, #0]
 80099c6:	4951      	ldr	r1, [pc, #324]	@ (8009b0c <USB_ActivateEndpoint+0x2b8>)
 80099c8:	430a      	orrs	r2, r1
 80099ca:	b292      	uxth	r2, r2
 80099cc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	78db      	ldrb	r3, [r3, #3]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d01d      	beq.n	8009a12 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	18d3      	adds	r3, r2, r3
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	200c      	movs	r0, #12
 80099e6:	183b      	adds	r3, r7, r0
 80099e8:	4949      	ldr	r1, [pc, #292]	@ (8009b10 <USB_ActivateEndpoint+0x2bc>)
 80099ea:	400a      	ands	r2, r1
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	183b      	adds	r3, r7, r0
 80099f0:	183a      	adds	r2, r7, r0
 80099f2:	8812      	ldrh	r2, [r2, #0]
 80099f4:	2120      	movs	r1, #32
 80099f6:	404a      	eors	r2, r1
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	18d3      	adds	r3, r2, r3
 8009a04:	183a      	adds	r2, r7, r0
 8009a06:	8812      	ldrh	r2, [r2, #0]
 8009a08:	493e      	ldr	r1, [pc, #248]	@ (8009b04 <USB_ActivateEndpoint+0x2b0>)
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	b292      	uxth	r2, r2
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	e2b5      	b.n	8009f7e <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	18d3      	adds	r3, r2, r3
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	200e      	movs	r0, #14
 8009a22:	183b      	adds	r3, r7, r0
 8009a24:	493a      	ldr	r1, [pc, #232]	@ (8009b10 <USB_ActivateEndpoint+0x2bc>)
 8009a26:	400a      	ands	r2, r1
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	18d3      	adds	r3, r2, r3
 8009a34:	183a      	adds	r2, r7, r0
 8009a36:	8812      	ldrh	r2, [r2, #0]
 8009a38:	4932      	ldr	r1, [pc, #200]	@ (8009b04 <USB_ActivateEndpoint+0x2b0>)
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	801a      	strh	r2, [r3, #0]
 8009a40:	e29d      	b.n	8009f7e <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2250      	movs	r2, #80	@ 0x50
 8009a4a:	5a9b      	ldrh	r3, [r3, r2]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	001a      	movs	r2, r3
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	189b      	adds	r3, r3, r2
 8009a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	00da      	lsls	r2, r3, #3
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5e:	18d3      	adds	r3, r2, r3
 8009a60:	4a2c      	ldr	r2, [pc, #176]	@ (8009b14 <USB_ActivateEndpoint+0x2c0>)
 8009a62:	4694      	mov	ip, r2
 8009a64:	4463      	add	r3, ip
 8009a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	88db      	ldrh	r3, [r3, #6]
 8009a6c:	085b      	lsrs	r3, r3, #1
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	18db      	adds	r3, r3, r3
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2250      	movs	r2, #80	@ 0x50
 8009a80:	5a9b      	ldrh	r3, [r3, r2]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	001a      	movs	r2, r3
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	189b      	adds	r3, r3, r2
 8009a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	00da      	lsls	r2, r3, #3
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	18d3      	adds	r3, r2, r3
 8009a96:	4a20      	ldr	r2, [pc, #128]	@ (8009b18 <USB_ActivateEndpoint+0x2c4>)
 8009a98:	4694      	mov	ip, r2
 8009a9a:	4463      	add	r3, ip
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	059b      	lsls	r3, r3, #22
 8009aa6:	0d9b      	lsrs	r3, r3, #22
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d108      	bne.n	8009ac8 <USB_ActivateEndpoint+0x274>
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4a17      	ldr	r2, [pc, #92]	@ (8009b1c <USB_ActivateEndpoint+0x2c8>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e045      	b.n	8009b54 <USB_ActivateEndpoint+0x300>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ace:	d827      	bhi.n	8009b20 <USB_ActivateEndpoint+0x2cc>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	085b      	lsrs	r3, r3, #1
 8009ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2201      	movs	r2, #1
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d002      	beq.n	8009ae8 <USB_ActivateEndpoint+0x294>
 8009ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	029b      	lsls	r3, r3, #10
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	801a      	strh	r2, [r3, #0]
 8009afe:	e029      	b.n	8009b54 <USB_ActivateEndpoint+0x300>
 8009b00:	ffff898f 	.word	0xffff898f
 8009b04:	ffff8080 	.word	0xffff8080
 8009b08:	ffff8f8f 	.word	0xffff8f8f
 8009b0c:	ffff80c0 	.word	0xffff80c0
 8009b10:	ffff8fbf 	.word	0xffff8fbf
 8009b14:	00000404 	.word	0x00000404
 8009b18:	00000406 	.word	0x00000406
 8009b1c:	ffff8000 	.word	0xffff8000
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	095b      	lsrs	r3, r3, #5
 8009b26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	221f      	movs	r2, #31
 8009b2e:	4013      	ands	r3, r2
 8009b30:	d102      	bne.n	8009b38 <USB_ActivateEndpoint+0x2e4>
 8009b32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b34:	3b01      	subs	r3, #1
 8009b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	029b      	lsls	r3, r3, #10
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	4313      	orrs	r3, r2
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	4ab5      	ldr	r2, [pc, #724]	@ (8009e20 <USB_ActivateEndpoint+0x5cc>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	18d2      	adds	r2, r2, r3
 8009b5e:	2122      	movs	r1, #34	@ 0x22
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	8812      	ldrh	r2, [r2, #0]
 8009b64:	801a      	strh	r2, [r3, #0]
 8009b66:	187b      	adds	r3, r7, r1
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	2380      	movs	r3, #128	@ 0x80
 8009b6c:	01db      	lsls	r3, r3, #7
 8009b6e:	4013      	ands	r3, r2
 8009b70:	d016      	beq.n	8009ba0 <USB_ActivateEndpoint+0x34c>
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	18d3      	adds	r3, r2, r3
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	2020      	movs	r0, #32
 8009b82:	183b      	adds	r3, r7, r0
 8009b84:	49a7      	ldr	r1, [pc, #668]	@ (8009e24 <USB_ActivateEndpoint+0x5d0>)
 8009b86:	400a      	ands	r2, r1
 8009b88:	801a      	strh	r2, [r3, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	18d3      	adds	r3, r2, r3
 8009b94:	183a      	adds	r2, r7, r0
 8009b96:	8812      	ldrh	r2, [r2, #0]
 8009b98:	49a3      	ldr	r1, [pc, #652]	@ (8009e28 <USB_ActivateEndpoint+0x5d4>)
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	b292      	uxth	r2, r2
 8009b9e:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d125      	bne.n	8009bf4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	18d3      	adds	r3, r2, r3
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	201c      	movs	r0, #28
 8009bb8:	183b      	adds	r3, r7, r0
 8009bba:	499c      	ldr	r1, [pc, #624]	@ (8009e2c <USB_ActivateEndpoint+0x5d8>)
 8009bbc:	400a      	ands	r2, r1
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	183b      	adds	r3, r7, r0
 8009bc2:	183a      	adds	r2, r7, r0
 8009bc4:	8812      	ldrh	r2, [r2, #0]
 8009bc6:	2180      	movs	r1, #128	@ 0x80
 8009bc8:	0149      	lsls	r1, r1, #5
 8009bca:	404a      	eors	r2, r1
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	183b      	adds	r3, r7, r0
 8009bd0:	183a      	adds	r2, r7, r0
 8009bd2:	8812      	ldrh	r2, [r2, #0]
 8009bd4:	2180      	movs	r1, #128	@ 0x80
 8009bd6:	0189      	lsls	r1, r1, #6
 8009bd8:	404a      	eors	r2, r1
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	183a      	adds	r2, r7, r0
 8009be8:	8812      	ldrh	r2, [r2, #0]
 8009bea:	4991      	ldr	r1, [pc, #580]	@ (8009e30 <USB_ActivateEndpoint+0x5dc>)
 8009bec:	430a      	orrs	r2, r1
 8009bee:	b292      	uxth	r2, r2
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	e1c4      	b.n	8009f7e <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	18d3      	adds	r3, r2, r3
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	201e      	movs	r0, #30
 8009c04:	183b      	adds	r3, r7, r0
 8009c06:	4989      	ldr	r1, [pc, #548]	@ (8009e2c <USB_ActivateEndpoint+0x5d8>)
 8009c08:	400a      	ands	r2, r1
 8009c0a:	801a      	strh	r2, [r3, #0]
 8009c0c:	183b      	adds	r3, r7, r0
 8009c0e:	183a      	adds	r2, r7, r0
 8009c10:	8812      	ldrh	r2, [r2, #0]
 8009c12:	2180      	movs	r1, #128	@ 0x80
 8009c14:	0189      	lsls	r1, r1, #6
 8009c16:	404a      	eors	r2, r1
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	183a      	adds	r2, r7, r0
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	4981      	ldr	r1, [pc, #516]	@ (8009e30 <USB_ActivateEndpoint+0x5dc>)
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	b292      	uxth	r2, r2
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	e1a5      	b.n	8009f7e <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	78db      	ldrb	r3, [r3, #3]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d117      	bne.n	8009c6a <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	18d3      	adds	r3, r2, r3
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	2062      	movs	r0, #98	@ 0x62
 8009c4a:	183b      	adds	r3, r7, r0
 8009c4c:	4975      	ldr	r1, [pc, #468]	@ (8009e24 <USB_ActivateEndpoint+0x5d0>)
 8009c4e:	400a      	ands	r2, r1
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	18d3      	adds	r3, r2, r3
 8009c5c:	183a      	adds	r2, r7, r0
 8009c5e:	8812      	ldrh	r2, [r2, #0]
 8009c60:	4974      	ldr	r1, [pc, #464]	@ (8009e34 <USB_ActivateEndpoint+0x5e0>)
 8009c62:	430a      	orrs	r2, r1
 8009c64:	b292      	uxth	r2, r2
 8009c66:	801a      	strh	r2, [r3, #0]
 8009c68:	e016      	b.n	8009c98 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	18d3      	adds	r3, r2, r3
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	2064      	movs	r0, #100	@ 0x64
 8009c7a:	183b      	adds	r3, r7, r0
 8009c7c:	496e      	ldr	r1, [pc, #440]	@ (8009e38 <USB_ActivateEndpoint+0x5e4>)
 8009c7e:	400a      	ands	r2, r1
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	183a      	adds	r2, r7, r0
 8009c8e:	8812      	ldrh	r2, [r2, #0]
 8009c90:	4967      	ldr	r1, [pc, #412]	@ (8009e30 <USB_ActivateEndpoint+0x5dc>)
 8009c92:	430a      	orrs	r2, r1
 8009c94:	b292      	uxth	r2, r2
 8009c96:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2250      	movs	r2, #80	@ 0x50
 8009ca0:	5a9b      	ldrh	r3, [r3, r2]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	001a      	movs	r2, r3
 8009ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	00da      	lsls	r2, r3, #3
 8009cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	2280      	movs	r2, #128	@ 0x80
 8009cb8:	00d2      	lsls	r2, r2, #3
 8009cba:	4694      	mov	ip, r2
 8009cbc:	4463      	add	r3, ip
 8009cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	891b      	ldrh	r3, [r3, #8]
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	18db      	adds	r3, r3, r3
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2250      	movs	r2, #80	@ 0x50
 8009cd8:	5a9b      	ldrh	r3, [r3, r2]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	001a      	movs	r2, r3
 8009cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	00da      	lsls	r2, r3, #3
 8009cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cec:	18d3      	adds	r3, r2, r3
 8009cee:	4a53      	ldr	r2, [pc, #332]	@ (8009e3c <USB_ActivateEndpoint+0x5e8>)
 8009cf0:	4694      	mov	ip, r2
 8009cf2:	4463      	add	r3, ip
 8009cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	895b      	ldrh	r3, [r3, #10]
 8009cfa:	085b      	lsrs	r3, r3, #1
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	18db      	adds	r3, r3, r3
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d04:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d000      	beq.n	8009d10 <USB_ActivateEndpoint+0x4bc>
 8009d0e:	e09b      	b.n	8009e48 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	18d2      	adds	r2, r2, r3
 8009d1a:	2140      	movs	r1, #64	@ 0x40
 8009d1c:	187b      	adds	r3, r7, r1
 8009d1e:	8812      	ldrh	r2, [r2, #0]
 8009d20:	801a      	strh	r2, [r3, #0]
 8009d22:	187b      	adds	r3, r7, r1
 8009d24:	881a      	ldrh	r2, [r3, #0]
 8009d26:	2380      	movs	r3, #128	@ 0x80
 8009d28:	01db      	lsls	r3, r3, #7
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d016      	beq.n	8009d5c <USB_ActivateEndpoint+0x508>
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	18d3      	adds	r3, r2, r3
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	203e      	movs	r0, #62	@ 0x3e
 8009d3e:	183b      	adds	r3, r7, r0
 8009d40:	4938      	ldr	r1, [pc, #224]	@ (8009e24 <USB_ActivateEndpoint+0x5d0>)
 8009d42:	400a      	ands	r2, r1
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	18d3      	adds	r3, r2, r3
 8009d50:	183a      	adds	r2, r7, r0
 8009d52:	8812      	ldrh	r2, [r2, #0]
 8009d54:	4934      	ldr	r1, [pc, #208]	@ (8009e28 <USB_ActivateEndpoint+0x5d4>)
 8009d56:	430a      	orrs	r2, r1
 8009d58:	b292      	uxth	r2, r2
 8009d5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	18d2      	adds	r2, r2, r3
 8009d66:	213c      	movs	r1, #60	@ 0x3c
 8009d68:	187b      	adds	r3, r7, r1
 8009d6a:	8812      	ldrh	r2, [r2, #0]
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	187b      	adds	r3, r7, r1
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	2240      	movs	r2, #64	@ 0x40
 8009d74:	4013      	ands	r3, r2
 8009d76:	d016      	beq.n	8009da6 <USB_ActivateEndpoint+0x552>
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	18d3      	adds	r3, r2, r3
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	203a      	movs	r0, #58	@ 0x3a
 8009d88:	183b      	adds	r3, r7, r0
 8009d8a:	4926      	ldr	r1, [pc, #152]	@ (8009e24 <USB_ActivateEndpoint+0x5d0>)
 8009d8c:	400a      	ands	r2, r1
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	18d3      	adds	r3, r2, r3
 8009d9a:	183a      	adds	r2, r7, r0
 8009d9c:	8812      	ldrh	r2, [r2, #0]
 8009d9e:	4928      	ldr	r1, [pc, #160]	@ (8009e40 <USB_ActivateEndpoint+0x5ec>)
 8009da0:	430a      	orrs	r2, r1
 8009da2:	b292      	uxth	r2, r2
 8009da4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	18d3      	adds	r3, r2, r3
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	2038      	movs	r0, #56	@ 0x38
 8009db6:	183b      	adds	r3, r7, r0
 8009db8:	491c      	ldr	r1, [pc, #112]	@ (8009e2c <USB_ActivateEndpoint+0x5d8>)
 8009dba:	400a      	ands	r2, r1
 8009dbc:	801a      	strh	r2, [r3, #0]
 8009dbe:	183b      	adds	r3, r7, r0
 8009dc0:	183a      	adds	r2, r7, r0
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	2180      	movs	r1, #128	@ 0x80
 8009dc6:	0149      	lsls	r1, r1, #5
 8009dc8:	404a      	eors	r2, r1
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	183b      	adds	r3, r7, r0
 8009dce:	183a      	adds	r2, r7, r0
 8009dd0:	8812      	ldrh	r2, [r2, #0]
 8009dd2:	2180      	movs	r1, #128	@ 0x80
 8009dd4:	0189      	lsls	r1, r1, #6
 8009dd6:	404a      	eors	r2, r1
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	18d3      	adds	r3, r2, r3
 8009de4:	183a      	adds	r2, r7, r0
 8009de6:	8812      	ldrh	r2, [r2, #0]
 8009de8:	4911      	ldr	r1, [pc, #68]	@ (8009e30 <USB_ActivateEndpoint+0x5dc>)
 8009dea:	430a      	orrs	r2, r1
 8009dec:	b292      	uxth	r2, r2
 8009dee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	18d3      	adds	r3, r2, r3
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	2036      	movs	r0, #54	@ 0x36
 8009e00:	183b      	adds	r3, r7, r0
 8009e02:	4910      	ldr	r1, [pc, #64]	@ (8009e44 <USB_ActivateEndpoint+0x5f0>)
 8009e04:	400a      	ands	r2, r1
 8009e06:	801a      	strh	r2, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	183a      	adds	r2, r7, r0
 8009e14:	8812      	ldrh	r2, [r2, #0]
 8009e16:	4906      	ldr	r1, [pc, #24]	@ (8009e30 <USB_ActivateEndpoint+0x5dc>)
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	801a      	strh	r2, [r3, #0]
 8009e1e:	e0ae      	b.n	8009f7e <USB_ActivateEndpoint+0x72a>
 8009e20:	ffff8000 	.word	0xffff8000
 8009e24:	ffff8f8f 	.word	0xffff8f8f
 8009e28:	ffffc080 	.word	0xffffc080
 8009e2c:	ffffbf8f 	.word	0xffffbf8f
 8009e30:	ffff8080 	.word	0xffff8080
 8009e34:	ffff8180 	.word	0xffff8180
 8009e38:	ffff8e8f 	.word	0xffff8e8f
 8009e3c:	00000404 	.word	0x00000404
 8009e40:	ffff80c0 	.word	0xffff80c0
 8009e44:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	18d2      	adds	r2, r2, r3
 8009e52:	214e      	movs	r1, #78	@ 0x4e
 8009e54:	187b      	adds	r3, r7, r1
 8009e56:	8812      	ldrh	r2, [r2, #0]
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	187b      	adds	r3, r7, r1
 8009e5c:	881a      	ldrh	r2, [r3, #0]
 8009e5e:	2380      	movs	r3, #128	@ 0x80
 8009e60:	01db      	lsls	r3, r3, #7
 8009e62:	4013      	ands	r3, r2
 8009e64:	d016      	beq.n	8009e94 <USB_ActivateEndpoint+0x640>
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	18d3      	adds	r3, r2, r3
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	204c      	movs	r0, #76	@ 0x4c
 8009e76:	183b      	adds	r3, r7, r0
 8009e78:	4944      	ldr	r1, [pc, #272]	@ (8009f8c <USB_ActivateEndpoint+0x738>)
 8009e7a:	400a      	ands	r2, r1
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	18d3      	adds	r3, r2, r3
 8009e88:	183a      	adds	r2, r7, r0
 8009e8a:	8812      	ldrh	r2, [r2, #0]
 8009e8c:	4940      	ldr	r1, [pc, #256]	@ (8009f90 <USB_ActivateEndpoint+0x73c>)
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	b292      	uxth	r2, r2
 8009e92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	18d2      	adds	r2, r2, r3
 8009e9e:	214a      	movs	r1, #74	@ 0x4a
 8009ea0:	187b      	adds	r3, r7, r1
 8009ea2:	8812      	ldrh	r2, [r2, #0]
 8009ea4:	801a      	strh	r2, [r3, #0]
 8009ea6:	187b      	adds	r3, r7, r1
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	2240      	movs	r2, #64	@ 0x40
 8009eac:	4013      	ands	r3, r2
 8009eae:	d016      	beq.n	8009ede <USB_ActivateEndpoint+0x68a>
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	18d3      	adds	r3, r2, r3
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	2048      	movs	r0, #72	@ 0x48
 8009ec0:	183b      	adds	r3, r7, r0
 8009ec2:	4932      	ldr	r1, [pc, #200]	@ (8009f8c <USB_ActivateEndpoint+0x738>)
 8009ec4:	400a      	ands	r2, r1
 8009ec6:	801a      	strh	r2, [r3, #0]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	18d3      	adds	r3, r2, r3
 8009ed2:	183a      	adds	r2, r7, r0
 8009ed4:	8812      	ldrh	r2, [r2, #0]
 8009ed6:	492f      	ldr	r1, [pc, #188]	@ (8009f94 <USB_ActivateEndpoint+0x740>)
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	b292      	uxth	r2, r2
 8009edc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	78db      	ldrb	r3, [r3, #3]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d01d      	beq.n	8009f22 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	18d3      	adds	r3, r2, r3
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	2044      	movs	r0, #68	@ 0x44
 8009ef6:	183b      	adds	r3, r7, r0
 8009ef8:	4927      	ldr	r1, [pc, #156]	@ (8009f98 <USB_ActivateEndpoint+0x744>)
 8009efa:	400a      	ands	r2, r1
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	183b      	adds	r3, r7, r0
 8009f00:	183a      	adds	r2, r7, r0
 8009f02:	8812      	ldrh	r2, [r2, #0]
 8009f04:	2120      	movs	r1, #32
 8009f06:	404a      	eors	r2, r1
 8009f08:	801a      	strh	r2, [r3, #0]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	18d3      	adds	r3, r2, r3
 8009f14:	183a      	adds	r2, r7, r0
 8009f16:	8812      	ldrh	r2, [r2, #0]
 8009f18:	4920      	ldr	r1, [pc, #128]	@ (8009f9c <USB_ActivateEndpoint+0x748>)
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	801a      	strh	r2, [r3, #0]
 8009f20:	e016      	b.n	8009f50 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	2046      	movs	r0, #70	@ 0x46
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	4918      	ldr	r1, [pc, #96]	@ (8009f98 <USB_ActivateEndpoint+0x744>)
 8009f36:	400a      	ands	r2, r1
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	18d3      	adds	r3, r2, r3
 8009f44:	183a      	adds	r2, r7, r0
 8009f46:	8812      	ldrh	r2, [r2, #0]
 8009f48:	4914      	ldr	r1, [pc, #80]	@ (8009f9c <USB_ActivateEndpoint+0x748>)
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	b292      	uxth	r2, r2
 8009f4e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	18d3      	adds	r3, r2, r3
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	2042      	movs	r0, #66	@ 0x42
 8009f60:	183b      	adds	r3, r7, r0
 8009f62:	490f      	ldr	r1, [pc, #60]	@ (8009fa0 <USB_ActivateEndpoint+0x74c>)
 8009f64:	400a      	ands	r2, r1
 8009f66:	801a      	strh	r2, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	18d3      	adds	r3, r2, r3
 8009f72:	183a      	adds	r2, r7, r0
 8009f74:	8812      	ldrh	r2, [r2, #0]
 8009f76:	4909      	ldr	r1, [pc, #36]	@ (8009f9c <USB_ActivateEndpoint+0x748>)
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f7e:	236f      	movs	r3, #111	@ 0x6f
 8009f80:	18fb      	adds	r3, r7, r3
 8009f82:	781b      	ldrb	r3, [r3, #0]
}
 8009f84:	0018      	movs	r0, r3
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b01c      	add	sp, #112	@ 0x70
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	ffff8f8f 	.word	0xffff8f8f
 8009f90:	ffffc080 	.word	0xffffc080
 8009f94:	ffff80c0 	.word	0xffff80c0
 8009f98:	ffff8fbf 	.word	0xffff8fbf
 8009f9c:	ffff8080 	.word	0xffff8080
 8009fa0:	ffffbf8f 	.word	0xffffbf8f

08009fa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	@ 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	7b1b      	ldrb	r3, [r3, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d000      	beq.n	8009fb8 <USB_DeactivateEndpoint+0x14>
 8009fb6:	e07e      	b.n	800a0b6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d03c      	beq.n	800a03a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	18d2      	adds	r2, r2, r3
 8009fca:	210c      	movs	r1, #12
 8009fcc:	187b      	adds	r3, r7, r1
 8009fce:	8812      	ldrh	r2, [r2, #0]
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	187b      	adds	r3, r7, r1
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	2240      	movs	r2, #64	@ 0x40
 8009fd8:	4013      	ands	r3, r2
 8009fda:	d016      	beq.n	800a00a <USB_DeactivateEndpoint+0x66>
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	18d3      	adds	r3, r2, r3
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	200a      	movs	r0, #10
 8009fec:	183b      	adds	r3, r7, r0
 8009fee:	49c7      	ldr	r1, [pc, #796]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 8009ff0:	400a      	ands	r2, r1
 8009ff2:	801a      	strh	r2, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	18d3      	adds	r3, r2, r3
 8009ffe:	183a      	adds	r2, r7, r0
 800a000:	8812      	ldrh	r2, [r2, #0]
 800a002:	49c3      	ldr	r1, [pc, #780]	@ (800a310 <USB_DeactivateEndpoint+0x36c>)
 800a004:	430a      	orrs	r2, r1
 800a006:	b292      	uxth	r2, r2
 800a008:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	18d3      	adds	r3, r2, r3
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	b29a      	uxth	r2, r3
 800a018:	2008      	movs	r0, #8
 800a01a:	183b      	adds	r3, r7, r0
 800a01c:	49bd      	ldr	r1, [pc, #756]	@ (800a314 <USB_DeactivateEndpoint+0x370>)
 800a01e:	400a      	ands	r2, r1
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	18d3      	adds	r3, r2, r3
 800a02c:	183a      	adds	r2, r7, r0
 800a02e:	8812      	ldrh	r2, [r2, #0]
 800a030:	49b9      	ldr	r1, [pc, #740]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a032:	430a      	orrs	r2, r1
 800a034:	b292      	uxth	r2, r2
 800a036:	801a      	strh	r2, [r3, #0]
 800a038:	e163      	b.n	800a302 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	18d2      	adds	r2, r2, r3
 800a044:	2112      	movs	r1, #18
 800a046:	187b      	adds	r3, r7, r1
 800a048:	8812      	ldrh	r2, [r2, #0]
 800a04a:	801a      	strh	r2, [r3, #0]
 800a04c:	187b      	adds	r3, r7, r1
 800a04e:	881a      	ldrh	r2, [r3, #0]
 800a050:	2380      	movs	r3, #128	@ 0x80
 800a052:	01db      	lsls	r3, r3, #7
 800a054:	4013      	ands	r3, r2
 800a056:	d016      	beq.n	800a086 <USB_DeactivateEndpoint+0xe2>
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	18d3      	adds	r3, r2, r3
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29a      	uxth	r2, r3
 800a066:	2010      	movs	r0, #16
 800a068:	183b      	adds	r3, r7, r0
 800a06a:	49a8      	ldr	r1, [pc, #672]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a06c:	400a      	ands	r2, r1
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	18d3      	adds	r3, r2, r3
 800a07a:	183a      	adds	r2, r7, r0
 800a07c:	8812      	ldrh	r2, [r2, #0]
 800a07e:	49a7      	ldr	r1, [pc, #668]	@ (800a31c <USB_DeactivateEndpoint+0x378>)
 800a080:	430a      	orrs	r2, r1
 800a082:	b292      	uxth	r2, r2
 800a084:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	18d3      	adds	r3, r2, r3
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29a      	uxth	r2, r3
 800a094:	200e      	movs	r0, #14
 800a096:	183b      	adds	r3, r7, r0
 800a098:	49a1      	ldr	r1, [pc, #644]	@ (800a320 <USB_DeactivateEndpoint+0x37c>)
 800a09a:	400a      	ands	r2, r1
 800a09c:	801a      	strh	r2, [r3, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	18d3      	adds	r3, r2, r3
 800a0a8:	183a      	adds	r2, r7, r0
 800a0aa:	8812      	ldrh	r2, [r2, #0]
 800a0ac:	499a      	ldr	r1, [pc, #616]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	b292      	uxth	r2, r2
 800a0b2:	801a      	strh	r2, [r3, #0]
 800a0b4:	e125      	b.n	800a302 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d000      	beq.n	800a0c0 <USB_DeactivateEndpoint+0x11c>
 800a0be:	e090      	b.n	800a1e2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	18d2      	adds	r2, r2, r3
 800a0ca:	2120      	movs	r1, #32
 800a0cc:	187b      	adds	r3, r7, r1
 800a0ce:	8812      	ldrh	r2, [r2, #0]
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	187b      	adds	r3, r7, r1
 800a0d4:	881a      	ldrh	r2, [r3, #0]
 800a0d6:	2380      	movs	r3, #128	@ 0x80
 800a0d8:	01db      	lsls	r3, r3, #7
 800a0da:	4013      	ands	r3, r2
 800a0dc:	d016      	beq.n	800a10c <USB_DeactivateEndpoint+0x168>
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	18d3      	adds	r3, r2, r3
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	201e      	movs	r0, #30
 800a0ee:	183b      	adds	r3, r7, r0
 800a0f0:	4986      	ldr	r1, [pc, #536]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a0f2:	400a      	ands	r2, r1
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	18d3      	adds	r3, r2, r3
 800a100:	183a      	adds	r2, r7, r0
 800a102:	8812      	ldrh	r2, [r2, #0]
 800a104:	4985      	ldr	r1, [pc, #532]	@ (800a31c <USB_DeactivateEndpoint+0x378>)
 800a106:	430a      	orrs	r2, r1
 800a108:	b292      	uxth	r2, r2
 800a10a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	18d2      	adds	r2, r2, r3
 800a116:	211c      	movs	r1, #28
 800a118:	187b      	adds	r3, r7, r1
 800a11a:	8812      	ldrh	r2, [r2, #0]
 800a11c:	801a      	strh	r2, [r3, #0]
 800a11e:	187b      	adds	r3, r7, r1
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	2240      	movs	r2, #64	@ 0x40
 800a124:	4013      	ands	r3, r2
 800a126:	d016      	beq.n	800a156 <USB_DeactivateEndpoint+0x1b2>
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	18d3      	adds	r3, r2, r3
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29a      	uxth	r2, r3
 800a136:	201a      	movs	r0, #26
 800a138:	183b      	adds	r3, r7, r0
 800a13a:	4974      	ldr	r1, [pc, #464]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a13c:	400a      	ands	r2, r1
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	18d3      	adds	r3, r2, r3
 800a14a:	183a      	adds	r2, r7, r0
 800a14c:	8812      	ldrh	r2, [r2, #0]
 800a14e:	4970      	ldr	r1, [pc, #448]	@ (800a310 <USB_DeactivateEndpoint+0x36c>)
 800a150:	430a      	orrs	r2, r1
 800a152:	b292      	uxth	r2, r2
 800a154:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	18d3      	adds	r3, r2, r3
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29a      	uxth	r2, r3
 800a164:	2018      	movs	r0, #24
 800a166:	183b      	adds	r3, r7, r0
 800a168:	4968      	ldr	r1, [pc, #416]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a16a:	400a      	ands	r2, r1
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	18d3      	adds	r3, r2, r3
 800a178:	183a      	adds	r2, r7, r0
 800a17a:	8812      	ldrh	r2, [r2, #0]
 800a17c:	4964      	ldr	r1, [pc, #400]	@ (800a310 <USB_DeactivateEndpoint+0x36c>)
 800a17e:	430a      	orrs	r2, r1
 800a180:	b292      	uxth	r2, r2
 800a182:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	18d3      	adds	r3, r2, r3
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	b29a      	uxth	r2, r3
 800a192:	2016      	movs	r0, #22
 800a194:	183b      	adds	r3, r7, r0
 800a196:	4962      	ldr	r1, [pc, #392]	@ (800a320 <USB_DeactivateEndpoint+0x37c>)
 800a198:	400a      	ands	r2, r1
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	18d3      	adds	r3, r2, r3
 800a1a6:	183a      	adds	r2, r7, r0
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	495b      	ldr	r1, [pc, #364]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	18d3      	adds	r3, r2, r3
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	2014      	movs	r0, #20
 800a1c2:	183b      	adds	r3, r7, r0
 800a1c4:	4953      	ldr	r1, [pc, #332]	@ (800a314 <USB_DeactivateEndpoint+0x370>)
 800a1c6:	400a      	ands	r2, r1
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	18d3      	adds	r3, r2, r3
 800a1d4:	183a      	adds	r2, r7, r0
 800a1d6:	8812      	ldrh	r2, [r2, #0]
 800a1d8:	494f      	ldr	r1, [pc, #316]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	801a      	strh	r2, [r3, #0]
 800a1e0:	e08f      	b.n	800a302 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	18d2      	adds	r2, r2, r3
 800a1ec:	212e      	movs	r1, #46	@ 0x2e
 800a1ee:	187b      	adds	r3, r7, r1
 800a1f0:	8812      	ldrh	r2, [r2, #0]
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	187b      	adds	r3, r7, r1
 800a1f6:	881a      	ldrh	r2, [r3, #0]
 800a1f8:	2380      	movs	r3, #128	@ 0x80
 800a1fa:	01db      	lsls	r3, r3, #7
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	d016      	beq.n	800a22e <USB_DeactivateEndpoint+0x28a>
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	18d3      	adds	r3, r2, r3
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	202c      	movs	r0, #44	@ 0x2c
 800a210:	183b      	adds	r3, r7, r0
 800a212:	493e      	ldr	r1, [pc, #248]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a214:	400a      	ands	r2, r1
 800a216:	801a      	strh	r2, [r3, #0]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	183a      	adds	r2, r7, r0
 800a224:	8812      	ldrh	r2, [r2, #0]
 800a226:	493d      	ldr	r1, [pc, #244]	@ (800a31c <USB_DeactivateEndpoint+0x378>)
 800a228:	430a      	orrs	r2, r1
 800a22a:	b292      	uxth	r2, r2
 800a22c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	18d2      	adds	r2, r2, r3
 800a238:	212a      	movs	r1, #42	@ 0x2a
 800a23a:	187b      	adds	r3, r7, r1
 800a23c:	8812      	ldrh	r2, [r2, #0]
 800a23e:	801a      	strh	r2, [r3, #0]
 800a240:	187b      	adds	r3, r7, r1
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	2240      	movs	r2, #64	@ 0x40
 800a246:	4013      	ands	r3, r2
 800a248:	d016      	beq.n	800a278 <USB_DeactivateEndpoint+0x2d4>
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	18d3      	adds	r3, r2, r3
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29a      	uxth	r2, r3
 800a258:	2028      	movs	r0, #40	@ 0x28
 800a25a:	183b      	adds	r3, r7, r0
 800a25c:	492b      	ldr	r1, [pc, #172]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a25e:	400a      	ands	r2, r1
 800a260:	801a      	strh	r2, [r3, #0]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	18d3      	adds	r3, r2, r3
 800a26c:	183a      	adds	r2, r7, r0
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	4927      	ldr	r1, [pc, #156]	@ (800a310 <USB_DeactivateEndpoint+0x36c>)
 800a272:	430a      	orrs	r2, r1
 800a274:	b292      	uxth	r2, r2
 800a276:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	18d3      	adds	r3, r2, r3
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	2026      	movs	r0, #38	@ 0x26
 800a288:	183b      	adds	r3, r7, r0
 800a28a:	4920      	ldr	r1, [pc, #128]	@ (800a30c <USB_DeactivateEndpoint+0x368>)
 800a28c:	400a      	ands	r2, r1
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	18d3      	adds	r3, r2, r3
 800a29a:	183a      	adds	r2, r7, r0
 800a29c:	8812      	ldrh	r2, [r2, #0]
 800a29e:	491f      	ldr	r1, [pc, #124]	@ (800a31c <USB_DeactivateEndpoint+0x378>)
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	b292      	uxth	r2, r2
 800a2a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	18d3      	adds	r3, r2, r3
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	2024      	movs	r0, #36	@ 0x24
 800a2b6:	183b      	adds	r3, r7, r0
 800a2b8:	4916      	ldr	r1, [pc, #88]	@ (800a314 <USB_DeactivateEndpoint+0x370>)
 800a2ba:	400a      	ands	r2, r1
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	18d3      	adds	r3, r2, r3
 800a2c8:	183a      	adds	r2, r7, r0
 800a2ca:	8812      	ldrh	r2, [r2, #0]
 800a2cc:	4912      	ldr	r1, [pc, #72]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	b292      	uxth	r2, r2
 800a2d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	18d3      	adds	r3, r2, r3
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	2022      	movs	r0, #34	@ 0x22
 800a2e4:	183b      	adds	r3, r7, r0
 800a2e6:	490e      	ldr	r1, [pc, #56]	@ (800a320 <USB_DeactivateEndpoint+0x37c>)
 800a2e8:	400a      	ands	r2, r1
 800a2ea:	801a      	strh	r2, [r3, #0]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	18d3      	adds	r3, r2, r3
 800a2f6:	183a      	adds	r2, r7, r0
 800a2f8:	8812      	ldrh	r2, [r2, #0]
 800a2fa:	4907      	ldr	r1, [pc, #28]	@ (800a318 <USB_DeactivateEndpoint+0x374>)
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	b292      	uxth	r2, r2
 800a300:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	0018      	movs	r0, r3
 800a306:	46bd      	mov	sp, r7
 800a308:	b00c      	add	sp, #48	@ 0x30
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	ffff8f8f 	.word	0xffff8f8f
 800a310:	ffff80c0 	.word	0xffff80c0
 800a314:	ffff8fbf 	.word	0xffff8fbf
 800a318:	ffff8080 	.word	0xffff8080
 800a31c:	ffffc080 	.word	0xffffc080
 800a320:	ffffbf8f 	.word	0xffffbf8f

0800a324 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b0c3      	sub	sp, #268	@ 0x10c
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d001      	beq.n	800a33a <USB_EPStartXfer+0x16>
 800a336:	f000 fd2d 	bl	800ad94 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	699a      	ldr	r2, [r3, #24]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	429a      	cmp	r2, r3
 800a344:	d905      	bls.n	800a352 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	1d7a      	adds	r2, r7, #5
 800a34c:	32ff      	adds	r2, #255	@ 0xff
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	e004      	b.n	800a35c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	1d7a      	adds	r2, r7, #5
 800a358:	32ff      	adds	r2, #255	@ 0xff
 800a35a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	7b1b      	ldrb	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d125      	bne.n	800a3b0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	6959      	ldr	r1, [r3, #20]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	88da      	ldrh	r2, [r3, #6]
 800a36c:	1d7b      	adds	r3, r7, #5
 800a36e:	33ff      	adds	r3, #255	@ 0xff
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	b29b      	uxth	r3, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f001 fa3f 	bl	800b7f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2250      	movs	r2, #80	@ 0x50
 800a382:	5a9b      	ldrh	r3, [r3, r2]
 800a384:	b29b      	uxth	r3, r3
 800a386:	001a      	movs	r2, r3
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	189b      	adds	r3, r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	00da      	lsls	r2, r3, #3
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	18d3      	adds	r3, r2, r3
 800a398:	4ad7      	ldr	r2, [pc, #860]	@ (800a6f8 <USB_EPStartXfer+0x3d4>)
 800a39a:	4694      	mov	ip, r2
 800a39c:	4463      	add	r3, ip
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	1d7b      	adds	r3, r7, #5
 800a3a2:	33ff      	adds	r3, #255	@ 0xff
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	f000 fccd 	bl	800ad4a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	78db      	ldrb	r3, [r3, #3]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d000      	beq.n	800a3ba <USB_EPStartXfer+0x96>
 800a3b8:	e362      	b.n	800aa80 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d800      	bhi.n	800a3c8 <USB_EPStartXfer+0xa4>
 800a3c6:	e309      	b.n	800a9dc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	18d3      	adds	r3, r2, r3
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	2056      	movs	r0, #86	@ 0x56
 800a3d8:	183b      	adds	r3, r7, r0
 800a3da:	49c8      	ldr	r1, [pc, #800]	@ (800a6fc <USB_EPStartXfer+0x3d8>)
 800a3dc:	400a      	ands	r2, r1
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	18d3      	adds	r3, r2, r3
 800a3ea:	183a      	adds	r2, r7, r0
 800a3ec:	8812      	ldrh	r2, [r2, #0]
 800a3ee:	49c4      	ldr	r1, [pc, #784]	@ (800a700 <USB_EPStartXfer+0x3dc>)
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	b292      	uxth	r2, r2
 800a3f4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6a1a      	ldr	r2, [r3, #32]
 800a3fa:	1d7b      	adds	r3, r7, #5
 800a3fc:	33ff      	adds	r3, #255	@ 0xff
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	1ad2      	subs	r2, r2, r3
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	18d3      	adds	r3, r2, r3
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	001a      	movs	r2, r3
 800a416:	2340      	movs	r3, #64	@ 0x40
 800a418:	4013      	ands	r3, r2
 800a41a:	d100      	bne.n	800a41e <USB_EPStartXfer+0xfa>
 800a41c:	e176      	b.n	800a70c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	633b      	str	r3, [r7, #48]	@ 0x30
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d000      	beq.n	800a42c <USB_EPStartXfer+0x108>
 800a42a:	e074      	b.n	800a516 <USB_EPStartXfer+0x1f2>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2250      	movs	r2, #80	@ 0x50
 800a434:	5a9b      	ldrh	r3, [r3, r2]
 800a436:	b29b      	uxth	r3, r3
 800a438:	001a      	movs	r2, r3
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	189b      	adds	r3, r3, r2
 800a43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	00da      	lsls	r2, r3, #3
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	18d3      	adds	r3, r2, r3
 800a44a:	4aae      	ldr	r2, [pc, #696]	@ (800a704 <USB_EPStartXfer+0x3e0>)
 800a44c:	4694      	mov	ip, r2
 800a44e:	4463      	add	r3, ip
 800a450:	627b      	str	r3, [r7, #36]	@ 0x24
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	0d9b      	lsrs	r3, r3, #22
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	1d7b      	adds	r3, r7, #5
 800a464:	33ff      	adds	r3, #255	@ 0xff
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d108      	bne.n	800a47e <USB_EPStartXfer+0x15a>
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b29b      	uxth	r3, r3
 800a472:	4aa5      	ldr	r2, [pc, #660]	@ (800a708 <USB_EPStartXfer+0x3e4>)
 800a474:	4313      	orrs	r3, r2
 800a476:	b29a      	uxth	r2, r3
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	801a      	strh	r2, [r3, #0]
 800a47c:	e066      	b.n	800a54c <USB_EPStartXfer+0x228>
 800a47e:	1d7b      	adds	r3, r7, #5
 800a480:	33ff      	adds	r3, #255	@ 0xff
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b3e      	cmp	r3, #62	@ 0x3e
 800a486:	d821      	bhi.n	800a4cc <USB_EPStartXfer+0x1a8>
 800a488:	1d7b      	adds	r3, r7, #5
 800a48a:	33ff      	adds	r3, #255	@ 0xff
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	1c7a      	adds	r2, r7, #1
 800a492:	32ff      	adds	r2, #255	@ 0xff
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	1d7b      	adds	r3, r7, #5
 800a498:	33ff      	adds	r3, #255	@ 0xff
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d006      	beq.n	800a4b0 <USB_EPStartXfer+0x18c>
 800a4a2:	1c7b      	adds	r3, r7, #1
 800a4a4:	33ff      	adds	r3, #255	@ 0xff
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	1c7a      	adds	r2, r7, #1
 800a4ac:	32ff      	adds	r2, #255	@ 0xff
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	1c7b      	adds	r3, r7, #1
 800a4b8:	33ff      	adds	r3, #255	@ 0xff
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e03f      	b.n	800a54c <USB_EPStartXfer+0x228>
 800a4cc:	1d7b      	adds	r3, r7, #5
 800a4ce:	33ff      	adds	r3, #255	@ 0xff
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	1c7a      	adds	r2, r7, #1
 800a4d6:	32ff      	adds	r2, #255	@ 0xff
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	1d7b      	adds	r3, r7, #5
 800a4dc:	33ff      	adds	r3, #255	@ 0xff
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	221f      	movs	r2, #31
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d106      	bne.n	800a4f4 <USB_EPStartXfer+0x1d0>
 800a4e6:	1c7b      	adds	r3, r7, #1
 800a4e8:	33ff      	adds	r3, #255	@ 0xff
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	1c7a      	adds	r2, r7, #1
 800a4f0:	32ff      	adds	r2, #255	@ 0xff
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	1c7b      	adds	r3, r7, #1
 800a4fc:	33ff      	adds	r3, #255	@ 0xff
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	b29b      	uxth	r3, r3
 800a502:	029b      	lsls	r3, r3, #10
 800a504:	b29b      	uxth	r3, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4a7f      	ldr	r2, [pc, #508]	@ (800a708 <USB_EPStartXfer+0x3e4>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	801a      	strh	r2, [r3, #0]
 800a514:	e01a      	b.n	800a54c <USB_EPStartXfer+0x228>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d116      	bne.n	800a54c <USB_EPStartXfer+0x228>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2250      	movs	r2, #80	@ 0x50
 800a522:	5a9b      	ldrh	r3, [r3, r2]
 800a524:	b29b      	uxth	r3, r3
 800a526:	001a      	movs	r2, r3
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	189b      	adds	r3, r3, r2
 800a52c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	00da      	lsls	r2, r3, #3
 800a534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a536:	18d3      	adds	r3, r2, r3
 800a538:	4a72      	ldr	r2, [pc, #456]	@ (800a704 <USB_EPStartXfer+0x3e0>)
 800a53a:	4694      	mov	ip, r2
 800a53c:	4463      	add	r3, ip
 800a53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a540:	1d7b      	adds	r3, r7, #5
 800a542:	33ff      	adds	r3, #255	@ 0xff
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	b29a      	uxth	r2, r3
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a54c:	2076      	movs	r0, #118	@ 0x76
 800a54e:	183b      	adds	r3, r7, r0
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	8952      	ldrh	r2, [r2, #10]
 800a554:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	6959      	ldr	r1, [r3, #20]
 800a55a:	1d7b      	adds	r3, r7, #5
 800a55c:	33ff      	adds	r3, #255	@ 0xff
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	b29c      	uxth	r4, r3
 800a562:	183b      	adds	r3, r7, r0
 800a564:	881a      	ldrh	r2, [r3, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	0023      	movs	r3, r4
 800a56a:	f001 f945 	bl	800b7f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	695a      	ldr	r2, [r3, #20]
 800a572:	1d7b      	adds	r3, r7, #5
 800a574:	33ff      	adds	r3, #255	@ 0xff
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	18d2      	adds	r2, r2, r3
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	6a1a      	ldr	r2, [r3, #32]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	429a      	cmp	r2, r3
 800a588:	d908      	bls.n	800a59c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	6a1a      	ldr	r2, [r3, #32]
 800a58e:	1d7b      	adds	r3, r7, #5
 800a590:	33ff      	adds	r3, #255	@ 0xff
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	1ad2      	subs	r2, r2, r3
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	621a      	str	r2, [r3, #32]
 800a59a:	e007      	b.n	800a5ac <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	1d7a      	adds	r2, r7, #5
 800a5a2:	32ff      	adds	r2, #255	@ 0xff
 800a5a4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d000      	beq.n	800a5b6 <USB_EPStartXfer+0x292>
 800a5b4:	e070      	b.n	800a698 <USB_EPStartXfer+0x374>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	61bb      	str	r3, [r7, #24]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2250      	movs	r2, #80	@ 0x50
 800a5be:	5a9b      	ldrh	r3, [r3, r2]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	001a      	movs	r2, r3
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	189b      	adds	r3, r3, r2
 800a5c8:	61bb      	str	r3, [r7, #24]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	00da      	lsls	r2, r3, #3
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	18d3      	adds	r3, r2, r3
 800a5d4:	4a48      	ldr	r2, [pc, #288]	@ (800a6f8 <USB_EPStartXfer+0x3d4>)
 800a5d6:	4694      	mov	ip, r2
 800a5d8:	4463      	add	r3, ip
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	059b      	lsls	r3, r3, #22
 800a5e4:	0d9b      	lsrs	r3, r3, #22
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	801a      	strh	r2, [r3, #0]
 800a5ec:	1d7b      	adds	r3, r7, #5
 800a5ee:	33ff      	adds	r3, #255	@ 0xff
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d108      	bne.n	800a608 <USB_EPStartXfer+0x2e4>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	4a42      	ldr	r2, [pc, #264]	@ (800a708 <USB_EPStartXfer+0x3e4>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	b29a      	uxth	r2, r3
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	801a      	strh	r2, [r3, #0]
 800a606:	e064      	b.n	800a6d2 <USB_EPStartXfer+0x3ae>
 800a608:	1d7b      	adds	r3, r7, #5
 800a60a:	33ff      	adds	r3, #255	@ 0xff
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a610:	d81f      	bhi.n	800a652 <USB_EPStartXfer+0x32e>
 800a612:	1d7b      	adds	r3, r7, #5
 800a614:	33ff      	adds	r3, #255	@ 0xff
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	21fc      	movs	r1, #252	@ 0xfc
 800a61c:	187a      	adds	r2, r7, r1
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	1d7b      	adds	r3, r7, #5
 800a622:	33ff      	adds	r3, #255	@ 0xff
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2201      	movs	r2, #1
 800a628:	4013      	ands	r3, r2
 800a62a:	d004      	beq.n	800a636 <USB_EPStartXfer+0x312>
 800a62c:	187b      	adds	r3, r7, r1
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	187a      	adds	r2, r7, r1
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	23fc      	movs	r3, #252	@ 0xfc
 800a63e:	18fb      	adds	r3, r7, r3
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	b29b      	uxth	r3, r3
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	b29b      	uxth	r3, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	801a      	strh	r2, [r3, #0]
 800a650:	e03f      	b.n	800a6d2 <USB_EPStartXfer+0x3ae>
 800a652:	1d7b      	adds	r3, r7, #5
 800a654:	33ff      	adds	r3, #255	@ 0xff
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	095b      	lsrs	r3, r3, #5
 800a65a:	21fc      	movs	r1, #252	@ 0xfc
 800a65c:	187a      	adds	r2, r7, r1
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	1d7b      	adds	r3, r7, #5
 800a662:	33ff      	adds	r3, #255	@ 0xff
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	221f      	movs	r2, #31
 800a668:	4013      	ands	r3, r2
 800a66a:	d104      	bne.n	800a676 <USB_EPStartXfer+0x352>
 800a66c:	187b      	adds	r3, r7, r1
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3b01      	subs	r3, #1
 800a672:	187a      	adds	r2, r7, r1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	23fc      	movs	r3, #252	@ 0xfc
 800a67e:	18fb      	adds	r3, r7, r3
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	029b      	lsls	r3, r3, #10
 800a686:	b29b      	uxth	r3, r3
 800a688:	4313      	orrs	r3, r2
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4a1e      	ldr	r2, [pc, #120]	@ (800a708 <USB_EPStartXfer+0x3e4>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	801a      	strh	r2, [r3, #0]
 800a696:	e01c      	b.n	800a6d2 <USB_EPStartXfer+0x3ae>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d118      	bne.n	800a6d2 <USB_EPStartXfer+0x3ae>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	623b      	str	r3, [r7, #32]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2250      	movs	r2, #80	@ 0x50
 800a6a8:	5a9b      	ldrh	r3, [r3, r2]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	001a      	movs	r2, r3
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	189b      	adds	r3, r3, r2
 800a6b2:	623b      	str	r3, [r7, #32]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	00da      	lsls	r2, r3, #3
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	18d3      	adds	r3, r2, r3
 800a6be:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f8 <USB_EPStartXfer+0x3d4>)
 800a6c0:	4694      	mov	ip, r2
 800a6c2:	4463      	add	r3, ip
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	1d7b      	adds	r3, r7, #5
 800a6c8:	33ff      	adds	r3, #255	@ 0xff
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6d2:	2076      	movs	r0, #118	@ 0x76
 800a6d4:	183b      	adds	r3, r7, r0
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	8912      	ldrh	r2, [r2, #8]
 800a6da:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6959      	ldr	r1, [r3, #20]
 800a6e0:	1d7b      	adds	r3, r7, #5
 800a6e2:	33ff      	adds	r3, #255	@ 0xff
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	b29c      	uxth	r4, r3
 800a6e8:	183b      	adds	r3, r7, r0
 800a6ea:	881a      	ldrh	r2, [r3, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	0023      	movs	r3, r4
 800a6f0:	f001 f882 	bl	800b7f8 <USB_WritePMA>
 800a6f4:	e329      	b.n	800ad4a <USB_EPStartXfer+0xa26>
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	00000402 	.word	0x00000402
 800a6fc:	ffff8f8f 	.word	0xffff8f8f
 800a700:	ffff8180 	.word	0xffff8180
 800a704:	00000406 	.word	0x00000406
 800a708:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d000      	beq.n	800a716 <USB_EPStartXfer+0x3f2>
 800a714:	e070      	b.n	800a7f8 <USB_EPStartXfer+0x4d4>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2250      	movs	r2, #80	@ 0x50
 800a71e:	5a9b      	ldrh	r3, [r3, r2]
 800a720:	b29b      	uxth	r3, r3
 800a722:	001a      	movs	r2, r3
 800a724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a726:	189b      	adds	r3, r3, r2
 800a728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	00da      	lsls	r2, r3, #3
 800a730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a732:	18d3      	adds	r3, r2, r3
 800a734:	4acd      	ldr	r2, [pc, #820]	@ (800aa6c <USB_EPStartXfer+0x748>)
 800a736:	4694      	mov	ip, r2
 800a738:	4463      	add	r3, ip
 800a73a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	059b      	lsls	r3, r3, #22
 800a744:	0d9b      	lsrs	r3, r3, #22
 800a746:	b29a      	uxth	r2, r3
 800a748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	1d7b      	adds	r3, r7, #5
 800a74e:	33ff      	adds	r3, #255	@ 0xff
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d108      	bne.n	800a768 <USB_EPStartXfer+0x444>
 800a756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4ac4      	ldr	r2, [pc, #784]	@ (800aa70 <USB_EPStartXfer+0x74c>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	b29a      	uxth	r2, r3
 800a762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	e064      	b.n	800a832 <USB_EPStartXfer+0x50e>
 800a768:	1d7b      	adds	r3, r7, #5
 800a76a:	33ff      	adds	r3, #255	@ 0xff
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a770:	d81f      	bhi.n	800a7b2 <USB_EPStartXfer+0x48e>
 800a772:	1d7b      	adds	r3, r7, #5
 800a774:	33ff      	adds	r3, #255	@ 0xff
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	085b      	lsrs	r3, r3, #1
 800a77a:	21f8      	movs	r1, #248	@ 0xf8
 800a77c:	187a      	adds	r2, r7, r1
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	1d7b      	adds	r3, r7, #5
 800a782:	33ff      	adds	r3, #255	@ 0xff
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2201      	movs	r2, #1
 800a788:	4013      	ands	r3, r2
 800a78a:	d004      	beq.n	800a796 <USB_EPStartXfer+0x472>
 800a78c:	187b      	adds	r3, r7, r1
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	187a      	adds	r2, r7, r1
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	23f8      	movs	r3, #248	@ 0xf8
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	029b      	lsls	r3, r3, #10
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ae:	801a      	strh	r2, [r3, #0]
 800a7b0:	e03f      	b.n	800a832 <USB_EPStartXfer+0x50e>
 800a7b2:	1d7b      	adds	r3, r7, #5
 800a7b4:	33ff      	adds	r3, #255	@ 0xff
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	095b      	lsrs	r3, r3, #5
 800a7ba:	21f8      	movs	r1, #248	@ 0xf8
 800a7bc:	187a      	adds	r2, r7, r1
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	1d7b      	adds	r3, r7, #5
 800a7c2:	33ff      	adds	r3, #255	@ 0xff
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	221f      	movs	r2, #31
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	d104      	bne.n	800a7d6 <USB_EPStartXfer+0x4b2>
 800a7cc:	187b      	adds	r3, r7, r1
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	187a      	adds	r2, r7, r1
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	23f8      	movs	r3, #248	@ 0xf8
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	029b      	lsls	r3, r3, #10
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	4aa0      	ldr	r2, [pc, #640]	@ (800aa70 <USB_EPStartXfer+0x74c>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	e01c      	b.n	800a832 <USB_EPStartXfer+0x50e>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	785b      	ldrb	r3, [r3, #1]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d118      	bne.n	800a832 <USB_EPStartXfer+0x50e>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	653b      	str	r3, [r7, #80]	@ 0x50
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2250      	movs	r2, #80	@ 0x50
 800a808:	5a9b      	ldrh	r3, [r3, r2]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	001a      	movs	r2, r3
 800a80e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a810:	189b      	adds	r3, r3, r2
 800a812:	653b      	str	r3, [r7, #80]	@ 0x50
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	00da      	lsls	r2, r3, #3
 800a81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a81c:	18d3      	adds	r3, r2, r3
 800a81e:	4a93      	ldr	r2, [pc, #588]	@ (800aa6c <USB_EPStartXfer+0x748>)
 800a820:	4694      	mov	ip, r2
 800a822:	4463      	add	r3, ip
 800a824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a826:	1d7b      	adds	r3, r7, #5
 800a828:	33ff      	adds	r3, #255	@ 0xff
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a832:	2076      	movs	r0, #118	@ 0x76
 800a834:	183b      	adds	r3, r7, r0
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	8912      	ldrh	r2, [r2, #8]
 800a83a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	6959      	ldr	r1, [r3, #20]
 800a840:	1d7b      	adds	r3, r7, #5
 800a842:	33ff      	adds	r3, #255	@ 0xff
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	b29c      	uxth	r4, r3
 800a848:	183b      	adds	r3, r7, r0
 800a84a:	881a      	ldrh	r2, [r3, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	0023      	movs	r3, r4
 800a850:	f000 ffd2 	bl	800b7f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	695a      	ldr	r2, [r3, #20]
 800a858:	1d7b      	adds	r3, r7, #5
 800a85a:	33ff      	adds	r3, #255	@ 0xff
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	18d2      	adds	r2, r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	6a1a      	ldr	r2, [r3, #32]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d908      	bls.n	800a882 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	1d7b      	adds	r3, r7, #5
 800a876:	33ff      	adds	r3, #255	@ 0xff
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	621a      	str	r2, [r3, #32]
 800a880:	e007      	b.n	800a892 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	1d7a      	adds	r2, r7, #5
 800a888:	32ff      	adds	r2, #255	@ 0xff
 800a88a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2200      	movs	r2, #0
 800a890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	643b      	str	r3, [r7, #64]	@ 0x40
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d000      	beq.n	800a8a0 <USB_EPStartXfer+0x57c>
 800a89e:	e070      	b.n	800a982 <USB_EPStartXfer+0x65e>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2250      	movs	r2, #80	@ 0x50
 800a8a8:	5a9b      	ldrh	r3, [r3, r2]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b0:	189b      	adds	r3, r3, r2
 800a8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	00da      	lsls	r2, r3, #3
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8bc:	18d3      	adds	r3, r2, r3
 800a8be:	4a6d      	ldr	r2, [pc, #436]	@ (800aa74 <USB_EPStartXfer+0x750>)
 800a8c0:	4694      	mov	ip, r2
 800a8c2:	4463      	add	r3, ip
 800a8c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	059b      	lsls	r3, r3, #22
 800a8ce:	0d9b      	lsrs	r3, r3, #22
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	801a      	strh	r2, [r3, #0]
 800a8d6:	1d7b      	adds	r3, r7, #5
 800a8d8:	33ff      	adds	r3, #255	@ 0xff
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <USB_EPStartXfer+0x5ce>
 800a8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	4a62      	ldr	r2, [pc, #392]	@ (800aa70 <USB_EPStartXfer+0x74c>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	e062      	b.n	800a9b8 <USB_EPStartXfer+0x694>
 800a8f2:	1d7b      	adds	r3, r7, #5
 800a8f4:	33ff      	adds	r3, #255	@ 0xff
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8fa:	d81f      	bhi.n	800a93c <USB_EPStartXfer+0x618>
 800a8fc:	1d7b      	adds	r3, r7, #5
 800a8fe:	33ff      	adds	r3, #255	@ 0xff
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	085b      	lsrs	r3, r3, #1
 800a904:	21f4      	movs	r1, #244	@ 0xf4
 800a906:	187a      	adds	r2, r7, r1
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	1d7b      	adds	r3, r7, #5
 800a90c:	33ff      	adds	r3, #255	@ 0xff
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2201      	movs	r2, #1
 800a912:	4013      	ands	r3, r2
 800a914:	d004      	beq.n	800a920 <USB_EPStartXfer+0x5fc>
 800a916:	187b      	adds	r3, r7, r1
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	187a      	adds	r2, r7, r1
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29a      	uxth	r2, r3
 800a926:	23f4      	movs	r3, #244	@ 0xf4
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	029b      	lsls	r3, r3, #10
 800a930:	b29b      	uxth	r3, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a938:	801a      	strh	r2, [r3, #0]
 800a93a:	e03d      	b.n	800a9b8 <USB_EPStartXfer+0x694>
 800a93c:	1d7b      	adds	r3, r7, #5
 800a93e:	33ff      	adds	r3, #255	@ 0xff
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	095b      	lsrs	r3, r3, #5
 800a944:	21f4      	movs	r1, #244	@ 0xf4
 800a946:	187a      	adds	r2, r7, r1
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	1d7b      	adds	r3, r7, #5
 800a94c:	33ff      	adds	r3, #255	@ 0xff
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	221f      	movs	r2, #31
 800a952:	4013      	ands	r3, r2
 800a954:	d104      	bne.n	800a960 <USB_EPStartXfer+0x63c>
 800a956:	187b      	adds	r3, r7, r1
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	187a      	adds	r2, r7, r1
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29a      	uxth	r2, r3
 800a966:	23f4      	movs	r3, #244	@ 0xf4
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	029b      	lsls	r3, r3, #10
 800a970:	b29b      	uxth	r3, r3
 800a972:	4313      	orrs	r3, r2
 800a974:	b29b      	uxth	r3, r3
 800a976:	4a3e      	ldr	r2, [pc, #248]	@ (800aa70 <USB_EPStartXfer+0x74c>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	801a      	strh	r2, [r3, #0]
 800a980:	e01a      	b.n	800a9b8 <USB_EPStartXfer+0x694>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d116      	bne.n	800a9b8 <USB_EPStartXfer+0x694>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2250      	movs	r2, #80	@ 0x50
 800a98e:	5a9b      	ldrh	r3, [r3, r2]
 800a990:	b29b      	uxth	r3, r3
 800a992:	001a      	movs	r2, r3
 800a994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a996:	189b      	adds	r3, r3, r2
 800a998:	643b      	str	r3, [r7, #64]	@ 0x40
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	00da      	lsls	r2, r3, #3
 800a9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a2:	18d3      	adds	r3, r2, r3
 800a9a4:	4a33      	ldr	r2, [pc, #204]	@ (800aa74 <USB_EPStartXfer+0x750>)
 800a9a6:	4694      	mov	ip, r2
 800a9a8:	4463      	add	r3, ip
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ac:	1d7b      	adds	r3, r7, #5
 800a9ae:	33ff      	adds	r3, #255	@ 0xff
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9b8:	2076      	movs	r0, #118	@ 0x76
 800a9ba:	183b      	adds	r3, r7, r0
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	8952      	ldrh	r2, [r2, #10]
 800a9c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6959      	ldr	r1, [r3, #20]
 800a9c6:	1d7b      	adds	r3, r7, #5
 800a9c8:	33ff      	adds	r3, #255	@ 0xff
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	b29c      	uxth	r4, r3
 800a9ce:	183b      	adds	r3, r7, r0
 800a9d0:	881a      	ldrh	r2, [r3, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	0023      	movs	r3, r4
 800a9d6:	f000 ff0f 	bl	800b7f8 <USB_WritePMA>
 800a9da:	e1b6      	b.n	800ad4a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	1d7a      	adds	r2, r7, #5
 800a9e2:	32ff      	adds	r2, #255	@ 0xff
 800a9e4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	18d3      	adds	r3, r2, r3
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	2062      	movs	r0, #98	@ 0x62
 800a9f6:	183b      	adds	r3, r7, r0
 800a9f8:	491f      	ldr	r1, [pc, #124]	@ (800aa78 <USB_EPStartXfer+0x754>)
 800a9fa:	400a      	ands	r2, r1
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	18d3      	adds	r3, r2, r3
 800aa08:	183a      	adds	r2, r7, r0
 800aa0a:	8812      	ldrh	r2, [r2, #0]
 800aa0c:	491b      	ldr	r1, [pc, #108]	@ (800aa7c <USB_EPStartXfer+0x758>)
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	b292      	uxth	r2, r2
 800aa12:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2250      	movs	r2, #80	@ 0x50
 800aa1c:	5a9b      	ldrh	r3, [r3, r2]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	001a      	movs	r2, r3
 800aa22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa24:	189b      	adds	r3, r3, r2
 800aa26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	00da      	lsls	r2, r3, #3
 800aa2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa30:	18d3      	adds	r3, r2, r3
 800aa32:	4a0e      	ldr	r2, [pc, #56]	@ (800aa6c <USB_EPStartXfer+0x748>)
 800aa34:	4694      	mov	ip, r2
 800aa36:	4463      	add	r3, ip
 800aa38:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa3a:	1d7b      	adds	r3, r7, #5
 800aa3c:	33ff      	adds	r3, #255	@ 0xff
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa46:	2076      	movs	r0, #118	@ 0x76
 800aa48:	183b      	adds	r3, r7, r0
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	8912      	ldrh	r2, [r2, #8]
 800aa4e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	6959      	ldr	r1, [r3, #20]
 800aa54:	1d7b      	adds	r3, r7, #5
 800aa56:	33ff      	adds	r3, #255	@ 0xff
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	b29c      	uxth	r4, r3
 800aa5c:	183b      	adds	r3, r7, r0
 800aa5e:	881a      	ldrh	r2, [r3, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	0023      	movs	r3, r4
 800aa64:	f000 fec8 	bl	800b7f8 <USB_WritePMA>
 800aa68:	e16f      	b.n	800ad4a <USB_EPStartXfer+0xa26>
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	00000402 	.word	0x00000402
 800aa70:	ffff8000 	.word	0xffff8000
 800aa74:	00000406 	.word	0x00000406
 800aa78:	ffff8e8f 	.word	0xffff8e8f
 800aa7c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	6a1a      	ldr	r2, [r3, #32]
 800aa84:	1d7b      	adds	r3, r7, #5
 800aa86:	33ff      	adds	r3, #255	@ 0xff
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	18d3      	adds	r3, r2, r3
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	001a      	movs	r2, r3
 800aaa0:	2340      	movs	r3, #64	@ 0x40
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	d100      	bne.n	800aaa8 <USB_EPStartXfer+0x784>
 800aaa6:	e0a4      	b.n	800abf2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	785b      	ldrb	r3, [r3, #1]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d000      	beq.n	800aab6 <USB_EPStartXfer+0x792>
 800aab4:	e070      	b.n	800ab98 <USB_EPStartXfer+0x874>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2250      	movs	r2, #80	@ 0x50
 800aabe:	5a9b      	ldrh	r3, [r3, r2]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	001a      	movs	r2, r3
 800aac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	00da      	lsls	r2, r3, #3
 800aad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aad2:	18d3      	adds	r3, r2, r3
 800aad4:	4ada      	ldr	r2, [pc, #872]	@ (800ae40 <USB_EPStartXfer+0xb1c>)
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	667b      	str	r3, [r7, #100]	@ 0x64
 800aadc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	059b      	lsls	r3, r3, #22
 800aae4:	0d9b      	lsrs	r3, r3, #22
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaea:	801a      	strh	r2, [r3, #0]
 800aaec:	1d7b      	adds	r3, r7, #5
 800aaee:	33ff      	adds	r3, #255	@ 0xff
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d108      	bne.n	800ab08 <USB_EPStartXfer+0x7e4>
 800aaf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4ad1      	ldr	r2, [pc, #836]	@ (800ae44 <USB_EPStartXfer+0xb20>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab04:	801a      	strh	r2, [r3, #0]
 800ab06:	e062      	b.n	800abce <USB_EPStartXfer+0x8aa>
 800ab08:	1d7b      	adds	r3, r7, #5
 800ab0a:	33ff      	adds	r3, #255	@ 0xff
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab10:	d81f      	bhi.n	800ab52 <USB_EPStartXfer+0x82e>
 800ab12:	1d7b      	adds	r3, r7, #5
 800ab14:	33ff      	adds	r3, #255	@ 0xff
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	085b      	lsrs	r3, r3, #1
 800ab1a:	21f0      	movs	r1, #240	@ 0xf0
 800ab1c:	187a      	adds	r2, r7, r1
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	1d7b      	adds	r3, r7, #5
 800ab22:	33ff      	adds	r3, #255	@ 0xff
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2201      	movs	r2, #1
 800ab28:	4013      	ands	r3, r2
 800ab2a:	d004      	beq.n	800ab36 <USB_EPStartXfer+0x812>
 800ab2c:	187b      	adds	r3, r7, r1
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3301      	adds	r3, #1
 800ab32:	187a      	adds	r2, r7, r1
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	23f0      	movs	r3, #240	@ 0xf0
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	029b      	lsls	r3, r3, #10
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab4e:	801a      	strh	r2, [r3, #0]
 800ab50:	e03d      	b.n	800abce <USB_EPStartXfer+0x8aa>
 800ab52:	1d7b      	adds	r3, r7, #5
 800ab54:	33ff      	adds	r3, #255	@ 0xff
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	21f0      	movs	r1, #240	@ 0xf0
 800ab5c:	187a      	adds	r2, r7, r1
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	1d7b      	adds	r3, r7, #5
 800ab62:	33ff      	adds	r3, #255	@ 0xff
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	221f      	movs	r2, #31
 800ab68:	4013      	ands	r3, r2
 800ab6a:	d104      	bne.n	800ab76 <USB_EPStartXfer+0x852>
 800ab6c:	187b      	adds	r3, r7, r1
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	187a      	adds	r2, r7, r1
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	23f0      	movs	r3, #240	@ 0xf0
 800ab7e:	18fb      	adds	r3, r7, r3
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	029b      	lsls	r3, r3, #10
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	4aad      	ldr	r2, [pc, #692]	@ (800ae44 <USB_EPStartXfer+0xb20>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e01a      	b.n	800abce <USB_EPStartXfer+0x8aa>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	785b      	ldrb	r3, [r3, #1]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d116      	bne.n	800abce <USB_EPStartXfer+0x8aa>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2250      	movs	r2, #80	@ 0x50
 800aba4:	5a9b      	ldrh	r3, [r3, r2]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	001a      	movs	r2, r3
 800abaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abac:	189b      	adds	r3, r3, r2
 800abae:	673b      	str	r3, [r7, #112]	@ 0x70
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	00da      	lsls	r2, r3, #3
 800abb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abb8:	18d3      	adds	r3, r2, r3
 800abba:	4aa1      	ldr	r2, [pc, #644]	@ (800ae40 <USB_EPStartXfer+0xb1c>)
 800abbc:	4694      	mov	ip, r2
 800abbe:	4463      	add	r3, ip
 800abc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abc2:	1d7b      	adds	r3, r7, #5
 800abc4:	33ff      	adds	r3, #255	@ 0xff
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	b29a      	uxth	r2, r3
 800abca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800abce:	2076      	movs	r0, #118	@ 0x76
 800abd0:	183b      	adds	r3, r7, r0
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	8952      	ldrh	r2, [r2, #10]
 800abd6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	6959      	ldr	r1, [r3, #20]
 800abdc:	1d7b      	adds	r3, r7, #5
 800abde:	33ff      	adds	r3, #255	@ 0xff
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	b29c      	uxth	r4, r3
 800abe4:	183b      	adds	r3, r7, r0
 800abe6:	881a      	ldrh	r2, [r3, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	0023      	movs	r3, r4
 800abec:	f000 fe04 	bl	800b7f8 <USB_WritePMA>
 800abf0:	e0ab      	b.n	800ad4a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d000      	beq.n	800abfc <USB_EPStartXfer+0x8d8>
 800abfa:	e070      	b.n	800acde <USB_EPStartXfer+0x9ba>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2250      	movs	r2, #80	@ 0x50
 800ac04:	5a9b      	ldrh	r3, [r3, r2]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	001a      	movs	r2, r3
 800ac0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac0c:	189b      	adds	r3, r3, r2
 800ac0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	00da      	lsls	r2, r3, #3
 800ac16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac18:	18d3      	adds	r3, r2, r3
 800ac1a:	4a8b      	ldr	r2, [pc, #556]	@ (800ae48 <USB_EPStartXfer+0xb24>)
 800ac1c:	4694      	mov	ip, r2
 800ac1e:	4463      	add	r3, ip
 800ac20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	059b      	lsls	r3, r3, #22
 800ac2a:	0d9b      	lsrs	r3, r3, #22
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	1d7b      	adds	r3, r7, #5
 800ac34:	33ff      	adds	r3, #255	@ 0xff
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d108      	bne.n	800ac4e <USB_EPStartXfer+0x92a>
 800ac3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	4a80      	ldr	r2, [pc, #512]	@ (800ae44 <USB_EPStartXfer+0xb20>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac4a:	801a      	strh	r2, [r3, #0]
 800ac4c:	e06c      	b.n	800ad28 <USB_EPStartXfer+0xa04>
 800ac4e:	1d7b      	adds	r3, r7, #5
 800ac50:	33ff      	adds	r3, #255	@ 0xff
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac56:	d81f      	bhi.n	800ac98 <USB_EPStartXfer+0x974>
 800ac58:	1d7b      	adds	r3, r7, #5
 800ac5a:	33ff      	adds	r3, #255	@ 0xff
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	085b      	lsrs	r3, r3, #1
 800ac60:	21ec      	movs	r1, #236	@ 0xec
 800ac62:	187a      	adds	r2, r7, r1
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	1d7b      	adds	r3, r7, #5
 800ac68:	33ff      	adds	r3, #255	@ 0xff
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	4013      	ands	r3, r2
 800ac70:	d004      	beq.n	800ac7c <USB_EPStartXfer+0x958>
 800ac72:	187b      	adds	r3, r7, r1
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3301      	adds	r3, #1
 800ac78:	187a      	adds	r2, r7, r1
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	23ec      	movs	r3, #236	@ 0xec
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	029b      	lsls	r3, r3, #10
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac94:	801a      	strh	r2, [r3, #0]
 800ac96:	e047      	b.n	800ad28 <USB_EPStartXfer+0xa04>
 800ac98:	1d7b      	adds	r3, r7, #5
 800ac9a:	33ff      	adds	r3, #255	@ 0xff
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	095b      	lsrs	r3, r3, #5
 800aca0:	21ec      	movs	r1, #236	@ 0xec
 800aca2:	187a      	adds	r2, r7, r1
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	1d7b      	adds	r3, r7, #5
 800aca8:	33ff      	adds	r3, #255	@ 0xff
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	221f      	movs	r2, #31
 800acae:	4013      	ands	r3, r2
 800acb0:	d104      	bne.n	800acbc <USB_EPStartXfer+0x998>
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	187a      	adds	r2, r7, r1
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	23ec      	movs	r3, #236	@ 0xec
 800acc4:	18fb      	adds	r3, r7, r3
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	029b      	lsls	r3, r3, #10
 800accc:	b29b      	uxth	r3, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	4a5c      	ldr	r2, [pc, #368]	@ (800ae44 <USB_EPStartXfer+0xb20>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	e024      	b.n	800ad28 <USB_EPStartXfer+0xa04>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d120      	bne.n	800ad28 <USB_EPStartXfer+0xa04>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2184      	movs	r1, #132	@ 0x84
 800acea:	187a      	adds	r2, r7, r1
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2250      	movs	r2, #80	@ 0x50
 800acf2:	5a9b      	ldrh	r3, [r3, r2]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	001a      	movs	r2, r3
 800acf8:	187b      	adds	r3, r7, r1
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	189b      	adds	r3, r3, r2
 800acfe:	187a      	adds	r2, r7, r1
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	00da      	lsls	r2, r3, #3
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	18d3      	adds	r3, r2, r3
 800ad0e:	4a4e      	ldr	r2, [pc, #312]	@ (800ae48 <USB_EPStartXfer+0xb24>)
 800ad10:	4694      	mov	ip, r2
 800ad12:	4463      	add	r3, ip
 800ad14:	2180      	movs	r1, #128	@ 0x80
 800ad16:	187a      	adds	r2, r7, r1
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	1d7b      	adds	r3, r7, #5
 800ad1c:	33ff      	adds	r3, #255	@ 0xff
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	187b      	adds	r3, r7, r1
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad28:	2076      	movs	r0, #118	@ 0x76
 800ad2a:	183b      	adds	r3, r7, r0
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	8912      	ldrh	r2, [r2, #8]
 800ad30:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	6959      	ldr	r1, [r3, #20]
 800ad36:	1d7b      	adds	r3, r7, #5
 800ad38:	33ff      	adds	r3, #255	@ 0xff
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	b29c      	uxth	r4, r3
 800ad3e:	183b      	adds	r3, r7, r0
 800ad40:	881a      	ldrh	r2, [r3, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	0023      	movs	r3, r4
 800ad46:	f000 fd57 	bl	800b7f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	18d3      	adds	r3, r2, r3
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	200a      	movs	r0, #10
 800ad5a:	183b      	adds	r3, r7, r0
 800ad5c:	493b      	ldr	r1, [pc, #236]	@ (800ae4c <USB_EPStartXfer+0xb28>)
 800ad5e:	400a      	ands	r2, r1
 800ad60:	801a      	strh	r2, [r3, #0]
 800ad62:	183b      	adds	r3, r7, r0
 800ad64:	183a      	adds	r2, r7, r0
 800ad66:	8812      	ldrh	r2, [r2, #0]
 800ad68:	2110      	movs	r1, #16
 800ad6a:	404a      	eors	r2, r1
 800ad6c:	801a      	strh	r2, [r3, #0]
 800ad6e:	183b      	adds	r3, r7, r0
 800ad70:	183a      	adds	r2, r7, r0
 800ad72:	8812      	ldrh	r2, [r2, #0]
 800ad74:	2120      	movs	r1, #32
 800ad76:	404a      	eors	r2, r1
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	18d3      	adds	r3, r2, r3
 800ad84:	183a      	adds	r2, r7, r0
 800ad86:	8812      	ldrh	r2, [r2, #0]
 800ad88:	4931      	ldr	r1, [pc, #196]	@ (800ae50 <USB_EPStartXfer+0xb2c>)
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	b292      	uxth	r2, r2
 800ad8e:	801a      	strh	r2, [r3, #0]
 800ad90:	f000 fbe9 	bl	800b566 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	7b1b      	ldrb	r3, [r3, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d000      	beq.n	800ad9e <USB_EPStartXfer+0xa7a>
 800ad9c:	e0a8      	b.n	800aef0 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	699a      	ldr	r2, [r3, #24]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d90d      	bls.n	800adc6 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	1d7a      	adds	r2, r7, #5
 800adb0:	32ff      	adds	r2, #255	@ 0xff
 800adb2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	1d7b      	adds	r3, r7, #5
 800adba:	33ff      	adds	r3, #255	@ 0xff
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	619a      	str	r2, [r3, #24]
 800adc4:	e007      	b.n	800add6 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	1d7a      	adds	r2, r7, #5
 800adcc:	32ff      	adds	r2, #255	@ 0xff
 800adce:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2200      	movs	r2, #0
 800add4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2190      	movs	r1, #144	@ 0x90
 800adda:	187a      	adds	r2, r7, r1
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2250      	movs	r2, #80	@ 0x50
 800ade2:	5a9b      	ldrh	r3, [r3, r2]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	001a      	movs	r2, r3
 800ade8:	187b      	adds	r3, r7, r1
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	189b      	adds	r3, r3, r2
 800adee:	187a      	adds	r2, r7, r1
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	00da      	lsls	r2, r3, #3
 800adf8:	187b      	adds	r3, r7, r1
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	18d3      	adds	r3, r2, r3
 800adfe:	4a10      	ldr	r2, [pc, #64]	@ (800ae40 <USB_EPStartXfer+0xb1c>)
 800ae00:	4694      	mov	ip, r2
 800ae02:	4463      	add	r3, ip
 800ae04:	218c      	movs	r1, #140	@ 0x8c
 800ae06:	187a      	adds	r2, r7, r1
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	187b      	adds	r3, r7, r1
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	059b      	lsls	r3, r3, #22
 800ae14:	0d9b      	lsrs	r3, r3, #22
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	187b      	adds	r3, r7, r1
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	801a      	strh	r2, [r3, #0]
 800ae1e:	1d7b      	adds	r3, r7, #5
 800ae20:	33ff      	adds	r3, #255	@ 0xff
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d115      	bne.n	800ae54 <USB_EPStartXfer+0xb30>
 800ae28:	187b      	adds	r3, r7, r1
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4a04      	ldr	r2, [pc, #16]	@ (800ae44 <USB_EPStartXfer+0xb20>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	187b      	adds	r3, r7, r1
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	801a      	strh	r2, [r3, #0]
 800ae3c:	e36e      	b.n	800b51c <USB_EPStartXfer+0x11f8>
 800ae3e:	46c0      	nop			@ (mov r8, r8)
 800ae40:	00000406 	.word	0x00000406
 800ae44:	ffff8000 	.word	0xffff8000
 800ae48:	00000402 	.word	0x00000402
 800ae4c:	ffff8fbf 	.word	0xffff8fbf
 800ae50:	ffff8080 	.word	0xffff8080
 800ae54:	1d7b      	adds	r3, r7, #5
 800ae56:	33ff      	adds	r3, #255	@ 0xff
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae5c:	d822      	bhi.n	800aea4 <USB_EPStartXfer+0xb80>
 800ae5e:	1d7b      	adds	r3, r7, #5
 800ae60:	33ff      	adds	r3, #255	@ 0xff
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	085b      	lsrs	r3, r3, #1
 800ae66:	21e8      	movs	r1, #232	@ 0xe8
 800ae68:	187a      	adds	r2, r7, r1
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	1d7b      	adds	r3, r7, #5
 800ae6e:	33ff      	adds	r3, #255	@ 0xff
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2201      	movs	r2, #1
 800ae74:	4013      	ands	r3, r2
 800ae76:	d004      	beq.n	800ae82 <USB_EPStartXfer+0xb5e>
 800ae78:	187b      	adds	r3, r7, r1
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	187a      	adds	r2, r7, r1
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	218c      	movs	r1, #140	@ 0x8c
 800ae84:	187b      	adds	r3, r7, r1
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	23e8      	movs	r3, #232	@ 0xe8
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	029b      	lsls	r3, r3, #10
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	187b      	adds	r3, r7, r1
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	801a      	strh	r2, [r3, #0]
 800aea2:	e33b      	b.n	800b51c <USB_EPStartXfer+0x11f8>
 800aea4:	1d7b      	adds	r3, r7, #5
 800aea6:	33ff      	adds	r3, #255	@ 0xff
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	095b      	lsrs	r3, r3, #5
 800aeac:	21e8      	movs	r1, #232	@ 0xe8
 800aeae:	187a      	adds	r2, r7, r1
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	1d7b      	adds	r3, r7, #5
 800aeb4:	33ff      	adds	r3, #255	@ 0xff
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	221f      	movs	r2, #31
 800aeba:	4013      	ands	r3, r2
 800aebc:	d104      	bne.n	800aec8 <USB_EPStartXfer+0xba4>
 800aebe:	187b      	adds	r3, r7, r1
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	187a      	adds	r2, r7, r1
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	218c      	movs	r1, #140	@ 0x8c
 800aeca:	187b      	adds	r3, r7, r1
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	23e8      	movs	r3, #232	@ 0xe8
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	029b      	lsls	r3, r3, #10
 800aedc:	b29b      	uxth	r3, r3
 800aede:	4313      	orrs	r3, r2
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4ad7      	ldr	r2, [pc, #860]	@ (800b240 <USB_EPStartXfer+0xf1c>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	187b      	adds	r3, r7, r1
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	801a      	strh	r2, [r3, #0]
 800aeee:	e315      	b.n	800b51c <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	78db      	ldrb	r3, [r3, #3]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d000      	beq.n	800aefa <USB_EPStartXfer+0xbd6>
 800aef8:	e189      	b.n	800b20e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d000      	beq.n	800af04 <USB_EPStartXfer+0xbe0>
 800af02:	e07b      	b.n	800affc <USB_EPStartXfer+0xcd8>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	21ac      	movs	r1, #172	@ 0xac
 800af08:	187a      	adds	r2, r7, r1
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2250      	movs	r2, #80	@ 0x50
 800af10:	5a9b      	ldrh	r3, [r3, r2]
 800af12:	b29b      	uxth	r3, r3
 800af14:	001a      	movs	r2, r3
 800af16:	187b      	adds	r3, r7, r1
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	189b      	adds	r3, r3, r2
 800af1c:	187a      	adds	r2, r7, r1
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	00da      	lsls	r2, r3, #3
 800af26:	187b      	adds	r3, r7, r1
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	18d3      	adds	r3, r2, r3
 800af2c:	4ac5      	ldr	r2, [pc, #788]	@ (800b244 <USB_EPStartXfer+0xf20>)
 800af2e:	4694      	mov	ip, r2
 800af30:	4463      	add	r3, ip
 800af32:	21a8      	movs	r1, #168	@ 0xa8
 800af34:	187a      	adds	r2, r7, r1
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	187b      	adds	r3, r7, r1
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	059b      	lsls	r3, r3, #22
 800af42:	0d9b      	lsrs	r3, r3, #22
 800af44:	b29a      	uxth	r2, r3
 800af46:	187b      	adds	r3, r7, r1
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	801a      	strh	r2, [r3, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <USB_EPStartXfer+0xc46>
 800af54:	187b      	adds	r3, r7, r1
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	4ab8      	ldr	r2, [pc, #736]	@ (800b240 <USB_EPStartXfer+0xf1c>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	b29a      	uxth	r2, r3
 800af62:	187b      	adds	r3, r7, r1
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	801a      	strh	r2, [r3, #0]
 800af68:	e06c      	b.n	800b044 <USB_EPStartXfer+0xd20>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800af70:	d820      	bhi.n	800afb4 <USB_EPStartXfer+0xc90>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	21e4      	movs	r1, #228	@ 0xe4
 800af7a:	187a      	adds	r2, r7, r1
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2201      	movs	r2, #1
 800af84:	4013      	ands	r3, r2
 800af86:	d004      	beq.n	800af92 <USB_EPStartXfer+0xc6e>
 800af88:	187b      	adds	r3, r7, r1
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3301      	adds	r3, #1
 800af8e:	187a      	adds	r2, r7, r1
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	21a8      	movs	r1, #168	@ 0xa8
 800af94:	187b      	adds	r3, r7, r1
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	23e4      	movs	r3, #228	@ 0xe4
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	187b      	adds	r3, r7, r1
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	801a      	strh	r2, [r3, #0]
 800afb2:	e047      	b.n	800b044 <USB_EPStartXfer+0xd20>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	095b      	lsrs	r3, r3, #5
 800afba:	21e4      	movs	r1, #228	@ 0xe4
 800afbc:	187a      	adds	r2, r7, r1
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	221f      	movs	r2, #31
 800afc6:	4013      	ands	r3, r2
 800afc8:	d104      	bne.n	800afd4 <USB_EPStartXfer+0xcb0>
 800afca:	187b      	adds	r3, r7, r1
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3b01      	subs	r3, #1
 800afd0:	187a      	adds	r2, r7, r1
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	21a8      	movs	r1, #168	@ 0xa8
 800afd6:	187b      	adds	r3, r7, r1
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	23e4      	movs	r3, #228	@ 0xe4
 800afe0:	18fb      	adds	r3, r7, r3
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	029b      	lsls	r3, r3, #10
 800afe8:	b29b      	uxth	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	b29b      	uxth	r3, r3
 800afee:	4a94      	ldr	r2, [pc, #592]	@ (800b240 <USB_EPStartXfer+0xf1c>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	187b      	adds	r3, r7, r1
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	801a      	strh	r2, [r3, #0]
 800affa:	e023      	b.n	800b044 <USB_EPStartXfer+0xd20>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d11f      	bne.n	800b044 <USB_EPStartXfer+0xd20>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	21b4      	movs	r1, #180	@ 0xb4
 800b008:	187a      	adds	r2, r7, r1
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2250      	movs	r2, #80	@ 0x50
 800b010:	5a9b      	ldrh	r3, [r3, r2]
 800b012:	b29b      	uxth	r3, r3
 800b014:	001a      	movs	r2, r3
 800b016:	187b      	adds	r3, r7, r1
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	189b      	adds	r3, r3, r2
 800b01c:	187a      	adds	r2, r7, r1
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	00da      	lsls	r2, r3, #3
 800b026:	187b      	adds	r3, r7, r1
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	18d3      	adds	r3, r2, r3
 800b02c:	4a85      	ldr	r2, [pc, #532]	@ (800b244 <USB_EPStartXfer+0xf20>)
 800b02e:	4694      	mov	ip, r2
 800b030:	4463      	add	r3, ip
 800b032:	21b0      	movs	r1, #176	@ 0xb0
 800b034:	187a      	adds	r2, r7, r1
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	187b      	adds	r3, r7, r1
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	801a      	strh	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	22a4      	movs	r2, #164	@ 0xa4
 800b048:	18ba      	adds	r2, r7, r2
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d000      	beq.n	800b056 <USB_EPStartXfer+0xd32>
 800b054:	e07b      	b.n	800b14e <USB_EPStartXfer+0xe2a>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	219c      	movs	r1, #156	@ 0x9c
 800b05a:	187a      	adds	r2, r7, r1
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2250      	movs	r2, #80	@ 0x50
 800b062:	5a9b      	ldrh	r3, [r3, r2]
 800b064:	b29b      	uxth	r3, r3
 800b066:	001a      	movs	r2, r3
 800b068:	187b      	adds	r3, r7, r1
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	189b      	adds	r3, r3, r2
 800b06e:	187a      	adds	r2, r7, r1
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	00da      	lsls	r2, r3, #3
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	18d3      	adds	r3, r2, r3
 800b07e:	4a72      	ldr	r2, [pc, #456]	@ (800b248 <USB_EPStartXfer+0xf24>)
 800b080:	4694      	mov	ip, r2
 800b082:	4463      	add	r3, ip
 800b084:	2198      	movs	r1, #152	@ 0x98
 800b086:	187a      	adds	r2, r7, r1
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	187b      	adds	r3, r7, r1
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	b29b      	uxth	r3, r3
 800b092:	059b      	lsls	r3, r3, #22
 800b094:	0d9b      	lsrs	r3, r3, #22
 800b096:	b29a      	uxth	r2, r3
 800b098:	187b      	adds	r3, r7, r1
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	801a      	strh	r2, [r3, #0]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10a      	bne.n	800b0bc <USB_EPStartXfer+0xd98>
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4a64      	ldr	r2, [pc, #400]	@ (800b240 <USB_EPStartXfer+0xf1c>)
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	187b      	adds	r3, r7, r1
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	801a      	strh	r2, [r3, #0]
 800b0ba:	e069      	b.n	800b190 <USB_EPStartXfer+0xe6c>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0c2:	d820      	bhi.n	800b106 <USB_EPStartXfer+0xde2>
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	085b      	lsrs	r3, r3, #1
 800b0ca:	21e0      	movs	r1, #224	@ 0xe0
 800b0cc:	187a      	adds	r2, r7, r1
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	d004      	beq.n	800b0e4 <USB_EPStartXfer+0xdc0>
 800b0da:	187b      	adds	r3, r7, r1
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	187a      	adds	r2, r7, r1
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	2198      	movs	r1, #152	@ 0x98
 800b0e6:	187b      	adds	r3, r7, r1
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	23e0      	movs	r3, #224	@ 0xe0
 800b0f0:	18fb      	adds	r3, r7, r3
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	029b      	lsls	r3, r3, #10
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	187b      	adds	r3, r7, r1
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	801a      	strh	r2, [r3, #0]
 800b104:	e044      	b.n	800b190 <USB_EPStartXfer+0xe6c>
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	095b      	lsrs	r3, r3, #5
 800b10c:	21e0      	movs	r1, #224	@ 0xe0
 800b10e:	187a      	adds	r2, r7, r1
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	221f      	movs	r2, #31
 800b118:	4013      	ands	r3, r2
 800b11a:	d104      	bne.n	800b126 <USB_EPStartXfer+0xe02>
 800b11c:	187b      	adds	r3, r7, r1
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	187a      	adds	r2, r7, r1
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	2198      	movs	r1, #152	@ 0x98
 800b128:	187b      	adds	r3, r7, r1
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	b29a      	uxth	r2, r3
 800b130:	23e0      	movs	r3, #224	@ 0xe0
 800b132:	18fb      	adds	r3, r7, r3
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	b29b      	uxth	r3, r3
 800b138:	029b      	lsls	r3, r3, #10
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	4313      	orrs	r3, r2
 800b13e:	b29b      	uxth	r3, r3
 800b140:	4a3f      	ldr	r2, [pc, #252]	@ (800b240 <USB_EPStartXfer+0xf1c>)
 800b142:	4313      	orrs	r3, r2
 800b144:	b29a      	uxth	r2, r3
 800b146:	187b      	adds	r3, r7, r1
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	801a      	strh	r2, [r3, #0]
 800b14c:	e020      	b.n	800b190 <USB_EPStartXfer+0xe6c>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d11c      	bne.n	800b190 <USB_EPStartXfer+0xe6c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2250      	movs	r2, #80	@ 0x50
 800b15a:	5a9b      	ldrh	r3, [r3, r2]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	001a      	movs	r2, r3
 800b160:	21a4      	movs	r1, #164	@ 0xa4
 800b162:	187b      	adds	r3, r7, r1
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	189b      	adds	r3, r3, r2
 800b168:	187a      	adds	r2, r7, r1
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	00da      	lsls	r2, r3, #3
 800b172:	187b      	adds	r3, r7, r1
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	4a33      	ldr	r2, [pc, #204]	@ (800b248 <USB_EPStartXfer+0xf24>)
 800b17a:	4694      	mov	ip, r2
 800b17c:	4463      	add	r3, ip
 800b17e:	21a0      	movs	r1, #160	@ 0xa0
 800b180:	187a      	adds	r2, r7, r1
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	187b      	adds	r3, r7, r1
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d100      	bne.n	800b19a <USB_EPStartXfer+0xe76>
 800b198:	e1c0      	b.n	800b51c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	18d2      	adds	r2, r2, r3
 800b1a4:	2196      	movs	r1, #150	@ 0x96
 800b1a6:	187b      	adds	r3, r7, r1
 800b1a8:	8812      	ldrh	r2, [r2, #0]
 800b1aa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1ac:	187b      	adds	r3, r7, r1
 800b1ae:	881a      	ldrh	r2, [r3, #0]
 800b1b0:	2380      	movs	r3, #128	@ 0x80
 800b1b2:	01db      	lsls	r3, r3, #7
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d004      	beq.n	800b1c2 <USB_EPStartXfer+0xe9e>
 800b1b8:	187b      	adds	r3, r7, r1
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	2240      	movs	r2, #64	@ 0x40
 800b1be:	4013      	ands	r3, r2
 800b1c0:	d10d      	bne.n	800b1de <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1c2:	2196      	movs	r1, #150	@ 0x96
 800b1c4:	187b      	adds	r3, r7, r1
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	2380      	movs	r3, #128	@ 0x80
 800b1ca:	01db      	lsls	r3, r3, #7
 800b1cc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1ce:	d000      	beq.n	800b1d2 <USB_EPStartXfer+0xeae>
 800b1d0:	e1a4      	b.n	800b51c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b1d2:	187b      	adds	r3, r7, r1
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	2240      	movs	r2, #64	@ 0x40
 800b1d8:	4013      	ands	r3, r2
 800b1da:	d000      	beq.n	800b1de <USB_EPStartXfer+0xeba>
 800b1dc:	e19e      	b.n	800b51c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	18d3      	adds	r3, r2, r3
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	2094      	movs	r0, #148	@ 0x94
 800b1ee:	183b      	adds	r3, r7, r0
 800b1f0:	4916      	ldr	r1, [pc, #88]	@ (800b24c <USB_EPStartXfer+0xf28>)
 800b1f2:	400a      	ands	r2, r1
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	18d3      	adds	r3, r2, r3
 800b200:	183a      	adds	r2, r7, r0
 800b202:	8812      	ldrh	r2, [r2, #0]
 800b204:	4912      	ldr	r1, [pc, #72]	@ (800b250 <USB_EPStartXfer+0xf2c>)
 800b206:	430a      	orrs	r2, r1
 800b208:	b292      	uxth	r2, r2
 800b20a:	801a      	strh	r2, [r3, #0]
 800b20c:	e186      	b.n	800b51c <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	78db      	ldrb	r3, [r3, #3]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d000      	beq.n	800b218 <USB_EPStartXfer+0xef4>
 800b216:	e17f      	b.n	800b518 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	699a      	ldr	r2, [r3, #24]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	429a      	cmp	r2, r3
 800b222:	d917      	bls.n	800b254 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	1d7a      	adds	r2, r7, #5
 800b22a:	32ff      	adds	r2, #255	@ 0xff
 800b22c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	1d7b      	adds	r3, r7, #5
 800b234:	33ff      	adds	r3, #255	@ 0xff
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1ad2      	subs	r2, r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	619a      	str	r2, [r3, #24]
 800b23e:	e011      	b.n	800b264 <USB_EPStartXfer+0xf40>
 800b240:	ffff8000 	.word	0xffff8000
 800b244:	00000402 	.word	0x00000402
 800b248:	00000406 	.word	0x00000406
 800b24c:	ffff8f8f 	.word	0xffff8f8f
 800b250:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	1d7a      	adds	r2, r7, #5
 800b25a:	32ff      	adds	r2, #255	@ 0xff
 800b25c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2200      	movs	r2, #0
 800b262:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	785b      	ldrb	r3, [r3, #1]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d000      	beq.n	800b26e <USB_EPStartXfer+0xf4a>
 800b26c:	e081      	b.n	800b372 <USB_EPStartXfer+0x104e>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	21cc      	movs	r1, #204	@ 0xcc
 800b272:	187a      	adds	r2, r7, r1
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2250      	movs	r2, #80	@ 0x50
 800b27a:	5a9b      	ldrh	r3, [r3, r2]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	001a      	movs	r2, r3
 800b280:	187b      	adds	r3, r7, r1
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	189b      	adds	r3, r3, r2
 800b286:	187a      	adds	r2, r7, r1
 800b288:	6013      	str	r3, [r2, #0]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	00da      	lsls	r2, r3, #3
 800b290:	187b      	adds	r3, r7, r1
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	18d3      	adds	r3, r2, r3
 800b296:	4ab6      	ldr	r2, [pc, #728]	@ (800b570 <USB_EPStartXfer+0x124c>)
 800b298:	4694      	mov	ip, r2
 800b29a:	4463      	add	r3, ip
 800b29c:	21c8      	movs	r1, #200	@ 0xc8
 800b29e:	187a      	adds	r2, r7, r1
 800b2a0:	6013      	str	r3, [r2, #0]
 800b2a2:	187b      	adds	r3, r7, r1
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	059b      	lsls	r3, r3, #22
 800b2ac:	0d9b      	lsrs	r3, r3, #22
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	187b      	adds	r3, r7, r1
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	801a      	strh	r2, [r3, #0]
 800b2b6:	1d7b      	adds	r3, r7, #5
 800b2b8:	33ff      	adds	r3, #255	@ 0xff
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <USB_EPStartXfer+0xfb2>
 800b2c0:	187b      	adds	r3, r7, r1
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4aaa      	ldr	r2, [pc, #680]	@ (800b574 <USB_EPStartXfer+0x1250>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	187b      	adds	r3, r7, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	801a      	strh	r2, [r3, #0]
 800b2d4:	e072      	b.n	800b3bc <USB_EPStartXfer+0x1098>
 800b2d6:	1d7b      	adds	r3, r7, #5
 800b2d8:	33ff      	adds	r3, #255	@ 0xff
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2de:	d822      	bhi.n	800b326 <USB_EPStartXfer+0x1002>
 800b2e0:	1d7b      	adds	r3, r7, #5
 800b2e2:	33ff      	adds	r3, #255	@ 0xff
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	21dc      	movs	r1, #220	@ 0xdc
 800b2ea:	187a      	adds	r2, r7, r1
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	1d7b      	adds	r3, r7, #5
 800b2f0:	33ff      	adds	r3, #255	@ 0xff
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	d004      	beq.n	800b304 <USB_EPStartXfer+0xfe0>
 800b2fa:	187b      	adds	r3, r7, r1
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	187a      	adds	r2, r7, r1
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	21c8      	movs	r1, #200	@ 0xc8
 800b306:	187b      	adds	r3, r7, r1
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	23dc      	movs	r3, #220	@ 0xdc
 800b310:	18fb      	adds	r3, r7, r3
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	029b      	lsls	r3, r3, #10
 800b318:	b29b      	uxth	r3, r3
 800b31a:	4313      	orrs	r3, r2
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	187b      	adds	r3, r7, r1
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	801a      	strh	r2, [r3, #0]
 800b324:	e04a      	b.n	800b3bc <USB_EPStartXfer+0x1098>
 800b326:	1d7b      	adds	r3, r7, #5
 800b328:	33ff      	adds	r3, #255	@ 0xff
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	095b      	lsrs	r3, r3, #5
 800b32e:	21dc      	movs	r1, #220	@ 0xdc
 800b330:	187a      	adds	r2, r7, r1
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	1d7b      	adds	r3, r7, #5
 800b336:	33ff      	adds	r3, #255	@ 0xff
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	221f      	movs	r2, #31
 800b33c:	4013      	ands	r3, r2
 800b33e:	d104      	bne.n	800b34a <USB_EPStartXfer+0x1026>
 800b340:	187b      	adds	r3, r7, r1
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3b01      	subs	r3, #1
 800b346:	187a      	adds	r2, r7, r1
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	21c8      	movs	r1, #200	@ 0xc8
 800b34c:	187b      	adds	r3, r7, r1
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	b29a      	uxth	r2, r3
 800b354:	23dc      	movs	r3, #220	@ 0xdc
 800b356:	18fb      	adds	r3, r7, r3
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	029b      	lsls	r3, r3, #10
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4313      	orrs	r3, r2
 800b362:	b29b      	uxth	r3, r3
 800b364:	4a83      	ldr	r2, [pc, #524]	@ (800b574 <USB_EPStartXfer+0x1250>)
 800b366:	4313      	orrs	r3, r2
 800b368:	b29a      	uxth	r2, r3
 800b36a:	187b      	adds	r3, r7, r1
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	801a      	strh	r2, [r3, #0]
 800b370:	e024      	b.n	800b3bc <USB_EPStartXfer+0x1098>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d120      	bne.n	800b3bc <USB_EPStartXfer+0x1098>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	21d4      	movs	r1, #212	@ 0xd4
 800b37e:	187a      	adds	r2, r7, r1
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2250      	movs	r2, #80	@ 0x50
 800b386:	5a9b      	ldrh	r3, [r3, r2]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	001a      	movs	r2, r3
 800b38c:	187b      	adds	r3, r7, r1
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	189b      	adds	r3, r3, r2
 800b392:	187a      	adds	r2, r7, r1
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	00da      	lsls	r2, r3, #3
 800b39c:	187b      	adds	r3, r7, r1
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	18d3      	adds	r3, r2, r3
 800b3a2:	4a73      	ldr	r2, [pc, #460]	@ (800b570 <USB_EPStartXfer+0x124c>)
 800b3a4:	4694      	mov	ip, r2
 800b3a6:	4463      	add	r3, ip
 800b3a8:	21d0      	movs	r1, #208	@ 0xd0
 800b3aa:	187a      	adds	r2, r7, r1
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	1d7b      	adds	r3, r7, #5
 800b3b0:	33ff      	adds	r3, #255	@ 0xff
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	187b      	adds	r3, r7, r1
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	801a      	strh	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	22c4      	movs	r2, #196	@ 0xc4
 800b3c0:	18ba      	adds	r2, r7, r2
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	785b      	ldrb	r3, [r3, #1]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d000      	beq.n	800b3ce <USB_EPStartXfer+0x10aa>
 800b3cc:	e081      	b.n	800b4d2 <USB_EPStartXfer+0x11ae>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	21bc      	movs	r1, #188	@ 0xbc
 800b3d2:	187a      	adds	r2, r7, r1
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2250      	movs	r2, #80	@ 0x50
 800b3da:	5a9b      	ldrh	r3, [r3, r2]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	001a      	movs	r2, r3
 800b3e0:	187b      	adds	r3, r7, r1
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	189b      	adds	r3, r3, r2
 800b3e6:	187a      	adds	r2, r7, r1
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	00da      	lsls	r2, r3, #3
 800b3f0:	187b      	adds	r3, r7, r1
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	18d3      	adds	r3, r2, r3
 800b3f6:	4a60      	ldr	r2, [pc, #384]	@ (800b578 <USB_EPStartXfer+0x1254>)
 800b3f8:	4694      	mov	ip, r2
 800b3fa:	4463      	add	r3, ip
 800b3fc:	21b8      	movs	r1, #184	@ 0xb8
 800b3fe:	187a      	adds	r2, r7, r1
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	187b      	adds	r3, r7, r1
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	059b      	lsls	r3, r3, #22
 800b40c:	0d9b      	lsrs	r3, r3, #22
 800b40e:	b29a      	uxth	r2, r3
 800b410:	187b      	adds	r3, r7, r1
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	801a      	strh	r2, [r3, #0]
 800b416:	1d7b      	adds	r3, r7, #5
 800b418:	33ff      	adds	r3, #255	@ 0xff
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <USB_EPStartXfer+0x1112>
 800b420:	187b      	adds	r3, r7, r1
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	4a52      	ldr	r2, [pc, #328]	@ (800b574 <USB_EPStartXfer+0x1250>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	187b      	adds	r3, r7, r1
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	e072      	b.n	800b51c <USB_EPStartXfer+0x11f8>
 800b436:	1d7b      	adds	r3, r7, #5
 800b438:	33ff      	adds	r3, #255	@ 0xff
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b43e:	d822      	bhi.n	800b486 <USB_EPStartXfer+0x1162>
 800b440:	1d7b      	adds	r3, r7, #5
 800b442:	33ff      	adds	r3, #255	@ 0xff
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	085b      	lsrs	r3, r3, #1
 800b448:	21d8      	movs	r1, #216	@ 0xd8
 800b44a:	187a      	adds	r2, r7, r1
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	1d7b      	adds	r3, r7, #5
 800b450:	33ff      	adds	r3, #255	@ 0xff
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2201      	movs	r2, #1
 800b456:	4013      	ands	r3, r2
 800b458:	d004      	beq.n	800b464 <USB_EPStartXfer+0x1140>
 800b45a:	187b      	adds	r3, r7, r1
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	187a      	adds	r2, r7, r1
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	21b8      	movs	r1, #184	@ 0xb8
 800b466:	187b      	adds	r3, r7, r1
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	23d8      	movs	r3, #216	@ 0xd8
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	b29b      	uxth	r3, r3
 800b476:	029b      	lsls	r3, r3, #10
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4313      	orrs	r3, r2
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	187b      	adds	r3, r7, r1
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	801a      	strh	r2, [r3, #0]
 800b484:	e04a      	b.n	800b51c <USB_EPStartXfer+0x11f8>
 800b486:	1d7b      	adds	r3, r7, #5
 800b488:	33ff      	adds	r3, #255	@ 0xff
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	095b      	lsrs	r3, r3, #5
 800b48e:	21d8      	movs	r1, #216	@ 0xd8
 800b490:	187a      	adds	r2, r7, r1
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	1d7b      	adds	r3, r7, #5
 800b496:	33ff      	adds	r3, #255	@ 0xff
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	221f      	movs	r2, #31
 800b49c:	4013      	ands	r3, r2
 800b49e:	d104      	bne.n	800b4aa <USB_EPStartXfer+0x1186>
 800b4a0:	187b      	adds	r3, r7, r1
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	187a      	adds	r2, r7, r1
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	21b8      	movs	r1, #184	@ 0xb8
 800b4ac:	187b      	adds	r3, r7, r1
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	23d8      	movs	r3, #216	@ 0xd8
 800b4b6:	18fb      	adds	r3, r7, r3
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	029b      	lsls	r3, r3, #10
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4a2b      	ldr	r2, [pc, #172]	@ (800b574 <USB_EPStartXfer+0x1250>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	187b      	adds	r3, r7, r1
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	801a      	strh	r2, [r3, #0]
 800b4d0:	e024      	b.n	800b51c <USB_EPStartXfer+0x11f8>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d120      	bne.n	800b51c <USB_EPStartXfer+0x11f8>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2250      	movs	r2, #80	@ 0x50
 800b4de:	5a9b      	ldrh	r3, [r3, r2]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	001a      	movs	r2, r3
 800b4e4:	21c4      	movs	r1, #196	@ 0xc4
 800b4e6:	187b      	adds	r3, r7, r1
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	189b      	adds	r3, r3, r2
 800b4ec:	187a      	adds	r2, r7, r1
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	00da      	lsls	r2, r3, #3
 800b4f6:	187b      	adds	r3, r7, r1
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	18d3      	adds	r3, r2, r3
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b578 <USB_EPStartXfer+0x1254>)
 800b4fe:	4694      	mov	ip, r2
 800b500:	4463      	add	r3, ip
 800b502:	21c0      	movs	r1, #192	@ 0xc0
 800b504:	187a      	adds	r2, r7, r1
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	1d7b      	adds	r3, r7, #5
 800b50a:	33ff      	adds	r3, #255	@ 0xff
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	187b      	adds	r3, r7, r1
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	e001      	b.n	800b51c <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e025      	b.n	800b568 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	18d3      	adds	r3, r2, r3
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	b29a      	uxth	r2, r3
 800b52a:	208a      	movs	r0, #138	@ 0x8a
 800b52c:	183b      	adds	r3, r7, r0
 800b52e:	4913      	ldr	r1, [pc, #76]	@ (800b57c <USB_EPStartXfer+0x1258>)
 800b530:	400a      	ands	r2, r1
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	183b      	adds	r3, r7, r0
 800b536:	183a      	adds	r2, r7, r0
 800b538:	8812      	ldrh	r2, [r2, #0]
 800b53a:	2180      	movs	r1, #128	@ 0x80
 800b53c:	0149      	lsls	r1, r1, #5
 800b53e:	404a      	eors	r2, r1
 800b540:	801a      	strh	r2, [r3, #0]
 800b542:	183b      	adds	r3, r7, r0
 800b544:	183a      	adds	r2, r7, r0
 800b546:	8812      	ldrh	r2, [r2, #0]
 800b548:	2180      	movs	r1, #128	@ 0x80
 800b54a:	0189      	lsls	r1, r1, #6
 800b54c:	404a      	eors	r2, r1
 800b54e:	801a      	strh	r2, [r3, #0]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	18d3      	adds	r3, r2, r3
 800b55a:	183a      	adds	r2, r7, r0
 800b55c:	8812      	ldrh	r2, [r2, #0]
 800b55e:	4908      	ldr	r1, [pc, #32]	@ (800b580 <USB_EPStartXfer+0x125c>)
 800b560:	430a      	orrs	r2, r1
 800b562:	b292      	uxth	r2, r2
 800b564:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	0018      	movs	r0, r3
 800b56a:	46bd      	mov	sp, r7
 800b56c:	b043      	add	sp, #268	@ 0x10c
 800b56e:	bd90      	pop	{r4, r7, pc}
 800b570:	00000402 	.word	0x00000402
 800b574:	ffff8000 	.word	0xffff8000
 800b578:	00000406 	.word	0x00000406
 800b57c:	ffffbf8f 	.word	0xffffbf8f
 800b580:	ffff8080 	.word	0xffff8080

0800b584 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d01d      	beq.n	800b5d2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	18d3      	adds	r3, r2, r3
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	200c      	movs	r0, #12
 800b5a6:	183b      	adds	r3, r7, r0
 800b5a8:	491b      	ldr	r1, [pc, #108]	@ (800b618 <USB_EPSetStall+0x94>)
 800b5aa:	400a      	ands	r2, r1
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	183b      	adds	r3, r7, r0
 800b5b0:	183a      	adds	r2, r7, r0
 800b5b2:	8812      	ldrh	r2, [r2, #0]
 800b5b4:	2110      	movs	r1, #16
 800b5b6:	404a      	eors	r2, r1
 800b5b8:	801a      	strh	r2, [r3, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	18d3      	adds	r3, r2, r3
 800b5c4:	183a      	adds	r2, r7, r0
 800b5c6:	8812      	ldrh	r2, [r2, #0]
 800b5c8:	4914      	ldr	r1, [pc, #80]	@ (800b61c <USB_EPSetStall+0x98>)
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	b292      	uxth	r2, r2
 800b5ce:	801a      	strh	r2, [r3, #0]
 800b5d0:	e01d      	b.n	800b60e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	18d3      	adds	r3, r2, r3
 800b5dc:	881b      	ldrh	r3, [r3, #0]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	200e      	movs	r0, #14
 800b5e2:	183b      	adds	r3, r7, r0
 800b5e4:	490e      	ldr	r1, [pc, #56]	@ (800b620 <USB_EPSetStall+0x9c>)
 800b5e6:	400a      	ands	r2, r1
 800b5e8:	801a      	strh	r2, [r3, #0]
 800b5ea:	183b      	adds	r3, r7, r0
 800b5ec:	183a      	adds	r2, r7, r0
 800b5ee:	8812      	ldrh	r2, [r2, #0]
 800b5f0:	2180      	movs	r1, #128	@ 0x80
 800b5f2:	0149      	lsls	r1, r1, #5
 800b5f4:	404a      	eors	r2, r1
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	18d3      	adds	r3, r2, r3
 800b602:	183a      	adds	r2, r7, r0
 800b604:	8812      	ldrh	r2, [r2, #0]
 800b606:	4905      	ldr	r1, [pc, #20]	@ (800b61c <USB_EPSetStall+0x98>)
 800b608:	430a      	orrs	r2, r1
 800b60a:	b292      	uxth	r2, r2
 800b60c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b004      	add	sp, #16
 800b616:	bd80      	pop	{r7, pc}
 800b618:	ffff8fbf 	.word	0xffff8fbf
 800b61c:	ffff8080 	.word	0xffff8080
 800b620:	ffffbf8f 	.word	0xffffbf8f

0800b624 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	7b1b      	ldrb	r3, [r3, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d000      	beq.n	800b638 <USB_EPClearStall+0x14>
 800b636:	e095      	b.n	800b764 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d046      	beq.n	800b6ce <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	18d2      	adds	r2, r2, r3
 800b64a:	2110      	movs	r1, #16
 800b64c:	187b      	adds	r3, r7, r1
 800b64e:	8812      	ldrh	r2, [r2, #0]
 800b650:	801a      	strh	r2, [r3, #0]
 800b652:	187b      	adds	r3, r7, r1
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	2240      	movs	r2, #64	@ 0x40
 800b658:	4013      	ands	r3, r2
 800b65a:	d016      	beq.n	800b68a <USB_EPClearStall+0x66>
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	18d3      	adds	r3, r2, r3
 800b666:	881b      	ldrh	r3, [r3, #0]
 800b668:	b29a      	uxth	r2, r3
 800b66a:	200e      	movs	r0, #14
 800b66c:	183b      	adds	r3, r7, r0
 800b66e:	4940      	ldr	r1, [pc, #256]	@ (800b770 <USB_EPClearStall+0x14c>)
 800b670:	400a      	ands	r2, r1
 800b672:	801a      	strh	r2, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	18d3      	adds	r3, r2, r3
 800b67e:	183a      	adds	r2, r7, r0
 800b680:	8812      	ldrh	r2, [r2, #0]
 800b682:	493c      	ldr	r1, [pc, #240]	@ (800b774 <USB_EPClearStall+0x150>)
 800b684:	430a      	orrs	r2, r1
 800b686:	b292      	uxth	r2, r2
 800b688:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	78db      	ldrb	r3, [r3, #3]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d068      	beq.n	800b764 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	18d3      	adds	r3, r2, r3
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	200c      	movs	r0, #12
 800b6a2:	183b      	adds	r3, r7, r0
 800b6a4:	4934      	ldr	r1, [pc, #208]	@ (800b778 <USB_EPClearStall+0x154>)
 800b6a6:	400a      	ands	r2, r1
 800b6a8:	801a      	strh	r2, [r3, #0]
 800b6aa:	183b      	adds	r3, r7, r0
 800b6ac:	183a      	adds	r2, r7, r0
 800b6ae:	8812      	ldrh	r2, [r2, #0]
 800b6b0:	2120      	movs	r1, #32
 800b6b2:	404a      	eors	r2, r1
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	18d3      	adds	r3, r2, r3
 800b6c0:	183a      	adds	r2, r7, r0
 800b6c2:	8812      	ldrh	r2, [r2, #0]
 800b6c4:	492d      	ldr	r1, [pc, #180]	@ (800b77c <USB_EPClearStall+0x158>)
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	b292      	uxth	r2, r2
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	e04a      	b.n	800b764 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	18d2      	adds	r2, r2, r3
 800b6d8:	2116      	movs	r1, #22
 800b6da:	187b      	adds	r3, r7, r1
 800b6dc:	8812      	ldrh	r2, [r2, #0]
 800b6de:	801a      	strh	r2, [r3, #0]
 800b6e0:	187b      	adds	r3, r7, r1
 800b6e2:	881a      	ldrh	r2, [r3, #0]
 800b6e4:	2380      	movs	r3, #128	@ 0x80
 800b6e6:	01db      	lsls	r3, r3, #7
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	d016      	beq.n	800b71a <USB_EPClearStall+0xf6>
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	18d3      	adds	r3, r2, r3
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	2014      	movs	r0, #20
 800b6fc:	183b      	adds	r3, r7, r0
 800b6fe:	491c      	ldr	r1, [pc, #112]	@ (800b770 <USB_EPClearStall+0x14c>)
 800b700:	400a      	ands	r2, r1
 800b702:	801a      	strh	r2, [r3, #0]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	18d3      	adds	r3, r2, r3
 800b70e:	183a      	adds	r2, r7, r0
 800b710:	8812      	ldrh	r2, [r2, #0]
 800b712:	491b      	ldr	r1, [pc, #108]	@ (800b780 <USB_EPClearStall+0x15c>)
 800b714:	430a      	orrs	r2, r1
 800b716:	b292      	uxth	r2, r2
 800b718:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	18d3      	adds	r3, r2, r3
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	b29a      	uxth	r2, r3
 800b728:	2012      	movs	r0, #18
 800b72a:	183b      	adds	r3, r7, r0
 800b72c:	4915      	ldr	r1, [pc, #84]	@ (800b784 <USB_EPClearStall+0x160>)
 800b72e:	400a      	ands	r2, r1
 800b730:	801a      	strh	r2, [r3, #0]
 800b732:	183b      	adds	r3, r7, r0
 800b734:	183a      	adds	r2, r7, r0
 800b736:	8812      	ldrh	r2, [r2, #0]
 800b738:	2180      	movs	r1, #128	@ 0x80
 800b73a:	0149      	lsls	r1, r1, #5
 800b73c:	404a      	eors	r2, r1
 800b73e:	801a      	strh	r2, [r3, #0]
 800b740:	183b      	adds	r3, r7, r0
 800b742:	183a      	adds	r2, r7, r0
 800b744:	8812      	ldrh	r2, [r2, #0]
 800b746:	2180      	movs	r1, #128	@ 0x80
 800b748:	0189      	lsls	r1, r1, #6
 800b74a:	404a      	eors	r2, r1
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	18d3      	adds	r3, r2, r3
 800b758:	183a      	adds	r2, r7, r0
 800b75a:	8812      	ldrh	r2, [r2, #0]
 800b75c:	4907      	ldr	r1, [pc, #28]	@ (800b77c <USB_EPClearStall+0x158>)
 800b75e:	430a      	orrs	r2, r1
 800b760:	b292      	uxth	r2, r2
 800b762:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	0018      	movs	r0, r3
 800b768:	46bd      	mov	sp, r7
 800b76a:	b006      	add	sp, #24
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	46c0      	nop			@ (mov r8, r8)
 800b770:	ffff8f8f 	.word	0xffff8f8f
 800b774:	ffff80c0 	.word	0xffff80c0
 800b778:	ffff8fbf 	.word	0xffff8fbf
 800b77c:	ffff8080 	.word	0xffff8080
 800b780:	ffffc080 	.word	0xffffc080
 800b784:	ffffbf8f 	.word	0xffffbf8f

0800b788 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	000a      	movs	r2, r1
 800b792:	1cfb      	adds	r3, r7, #3
 800b794:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b796:	1cfb      	adds	r3, r7, #3
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d103      	bne.n	800b7a6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	224c      	movs	r2, #76	@ 0x4c
 800b7a2:	2180      	movs	r1, #128	@ 0x80
 800b7a4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	b002      	add	sp, #8
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2258      	movs	r2, #88	@ 0x58
 800b7bc:	5a9b      	ldrh	r3, [r3, r2]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4a05      	ldr	r2, [pc, #20]	@ (800b7d8 <USB_DevConnect+0x28>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	b299      	uxth	r1, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2258      	movs	r2, #88	@ 0x58
 800b7ca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	b002      	add	sp, #8
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	46c0      	nop			@ (mov r8, r8)
 800b7d8:	ffff8000 	.word	0xffff8000

0800b7dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2244      	movs	r2, #68	@ 0x44
 800b7e8:	5a9b      	ldrh	r3, [r3, r2]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
}
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	b004      	add	sp, #16
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	@ 0x28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	0019      	movs	r1, r3
 800b804:	1dbb      	adds	r3, r7, #6
 800b806:	801a      	strh	r2, [r3, #0]
 800b808:	1d3b      	adds	r3, r7, #4
 800b80a:	1c0a      	adds	r2, r1, #0
 800b80c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b80e:	1d3b      	adds	r3, r7, #4
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b820:	1dbb      	adds	r3, r7, #6
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	18d3      	adds	r3, r2, r3
 800b828:	2280      	movs	r2, #128	@ 0x80
 800b82a:	00d2      	lsls	r2, r2, #3
 800b82c:	4694      	mov	ip, r2
 800b82e:	4463      	add	r3, ip
 800b830:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	627b      	str	r3, [r7, #36]	@ 0x24
 800b836:	e021      	b.n	800b87c <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	781a      	ldrb	r2, [r3, #0]
 800b83c:	2112      	movs	r1, #18
 800b83e:	187b      	adds	r3, r7, r1
 800b840:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	3301      	adds	r3, #1
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	b21b      	sxth	r3, r3
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	b21a      	sxth	r2, r3
 800b84e:	187b      	adds	r3, r7, r1
 800b850:	2000      	movs	r0, #0
 800b852:	5e1b      	ldrsh	r3, [r3, r0]
 800b854:	4313      	orrs	r3, r2
 800b856:	b21a      	sxth	r2, r3
 800b858:	187b      	adds	r3, r7, r1
 800b85a:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	187a      	adds	r2, r7, r1
 800b860:	8812      	ldrh	r2, [r2, #0]
 800b862:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	3302      	adds	r3, #2
 800b868:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	3301      	adds	r3, #1
 800b86e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	3301      	adds	r3, #1
 800b874:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b878:	3b01      	subs	r3, #1
 800b87a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1da      	bne.n	800b838 <USB_WritePMA+0x40>
  }
}
 800b882:	46c0      	nop			@ (mov r8, r8)
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	46bd      	mov	sp, r7
 800b888:	b00a      	add	sp, #40	@ 0x28
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08a      	sub	sp, #40	@ 0x28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	0019      	movs	r1, r3
 800b898:	1dbb      	adds	r3, r7, #6
 800b89a:	801a      	strh	r2, [r3, #0]
 800b89c:	1d3b      	adds	r3, r7, #4
 800b89e:	1c0a      	adds	r2, r1, #0
 800b8a0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b8a2:	1d3b      	adds	r3, r7, #4
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	085b      	lsrs	r3, r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b8b4:	1dbb      	adds	r3, r7, #6
 800b8b6:	881a      	ldrh	r2, [r3, #0]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	18d3      	adds	r3, r2, r3
 800b8bc:	2280      	movs	r2, #128	@ 0x80
 800b8be:	00d2      	lsls	r2, r2, #3
 800b8c0:	4694      	mov	ip, r2
 800b8c2:	4463      	add	r3, ip
 800b8c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ca:	e018      	b.n	800b8fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	3302      	adds	r3, #2
 800b8d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	0a1b      	lsrs	r3, r3, #8
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e3      	bne.n	800b8cc <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b904:	1d3b      	adds	r3, r7, #4
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	2201      	movs	r2, #1
 800b90a:	4013      	ands	r3, r2
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d007      	beq.n	800b922 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	701a      	strb	r2, [r3, #0]
  }
}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b00a      	add	sp, #40	@ 0x28
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	000a      	movs	r2, r1
 800b934:	1cfb      	adds	r3, r7, #3
 800b936:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b938:	230f      	movs	r3, #15
 800b93a:	18fb      	adds	r3, r7, r3
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7c1b      	ldrb	r3, [r3, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d116      	bne.n	800b976 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b948:	2380      	movs	r3, #128	@ 0x80
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	2181      	movs	r1, #129	@ 0x81
 800b952:	f002 f88c 	bl	800da6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b95c:	2380      	movs	r3, #128	@ 0x80
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	2101      	movs	r1, #1
 800b966:	f002 f882 	bl	800da6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	23b6      	movs	r3, #182	@ 0xb6
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	2101      	movs	r1, #1
 800b972:	50d1      	str	r1, [r2, r3]
 800b974:	e013      	b.n	800b99e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	2340      	movs	r3, #64	@ 0x40
 800b97a:	2202      	movs	r2, #2
 800b97c:	2181      	movs	r1, #129	@ 0x81
 800b97e:	f002 f876 	bl	800da6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	2340      	movs	r3, #64	@ 0x40
 800b98c:	2202      	movs	r2, #2
 800b98e:	2101      	movs	r1, #1
 800b990:	f002 f86d 	bl	800da6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	23b6      	movs	r3, #182	@ 0xb6
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	2101      	movs	r1, #1
 800b99c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	2308      	movs	r3, #8
 800b9a2:	2203      	movs	r2, #3
 800b9a4:	2182      	movs	r1, #130	@ 0x82
 800b9a6:	f002 f862 	bl	800da6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9b0:	2387      	movs	r3, #135	@ 0x87
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f002 f9f1 	bl	800dd9c <USBD_static_malloc>
 800b9ba:	0001      	movs	r1, r0
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	23ae      	movs	r3, #174	@ 0xae
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	23ae      	movs	r3, #174	@ 0xae
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	58d3      	ldr	r3, [r2, r3]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d104      	bne.n	800b9da <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b9d0:	230f      	movs	r3, #15
 800b9d2:	18fb      	adds	r3, r7, r3
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	e02c      	b.n	800ba34 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	23ae      	movs	r3, #174	@ 0xae
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	58d3      	ldr	r3, [r2, r3]
 800b9e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	23af      	movs	r3, #175	@ 0xaf
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	58d3      	ldr	r3, [r2, r3]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	2385      	movs	r3, #133	@ 0x85
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	2386      	movs	r3, #134	@ 0x86
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	2100      	movs	r1, #0
 800ba02:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	7c1b      	ldrb	r3, [r3, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	2381      	movs	r3, #129	@ 0x81
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	58d2      	ldr	r2, [r2, r3]
 800ba14:	2380      	movs	r3, #128	@ 0x80
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	f002 f971 	bl	800dd02 <USBD_LL_PrepareReceive>
 800ba20:	e008      	b.n	800ba34 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	2381      	movs	r3, #129	@ 0x81
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	58d2      	ldr	r2, [r2, r3]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	2340      	movs	r3, #64	@ 0x40
 800ba2e:	2101      	movs	r1, #1
 800ba30:	f002 f967 	bl	800dd02 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ba34:	230f      	movs	r3, #15
 800ba36:	18fb      	adds	r3, r7, r3
 800ba38:	781b      	ldrb	r3, [r3, #0]
}
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	b004      	add	sp, #16
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	000a      	movs	r2, r1
 800ba4c:	1cfb      	adds	r3, r7, #3
 800ba4e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ba50:	230f      	movs	r3, #15
 800ba52:	18fb      	adds	r3, r7, r3
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2181      	movs	r1, #129	@ 0x81
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f002 f83d 	bl	800dadc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f002 f835 	bl	800dadc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	23b6      	movs	r3, #182	@ 0xb6
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	2100      	movs	r1, #0
 800ba7a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2182      	movs	r1, #130	@ 0x82
 800ba80:	0018      	movs	r0, r3
 800ba82:	f002 f82b 	bl	800dadc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	23ae      	movs	r3, #174	@ 0xae
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	58d3      	ldr	r3, [r2, r3]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d011      	beq.n	800babc <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	23af      	movs	r3, #175	@ 0xaf
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	58d3      	ldr	r3, [r2, r3]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	23ae      	movs	r3, #174	@ 0xae
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	58d3      	ldr	r3, [r2, r3]
 800baac:	0018      	movs	r0, r3
 800baae:	f002 f981 	bl	800ddb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	23ae      	movs	r3, #174	@ 0xae
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	2100      	movs	r1, #0
 800baba:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800babc:	230f      	movs	r3, #15
 800babe:	18fb      	adds	r3, r7, r3
 800bac0:	781b      	ldrb	r3, [r3, #0]
}
 800bac2:	0018      	movs	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	b004      	add	sp, #16
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	23ae      	movs	r3, #174	@ 0xae
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	58d3      	ldr	r3, [r2, r3]
 800bade:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bae0:	230f      	movs	r3, #15
 800bae2:	18fb      	adds	r3, r7, r3
 800bae4:	2200      	movs	r2, #0
 800bae6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bae8:	230c      	movs	r3, #12
 800baea:	18fb      	adds	r3, r7, r3
 800baec:	2200      	movs	r2, #0
 800baee:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800baf0:	2317      	movs	r3, #23
 800baf2:	18fb      	adds	r3, r7, r3
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	001a      	movs	r2, r3
 800bafe:	2360      	movs	r3, #96	@ 0x60
 800bb00:	4013      	ands	r3, r2
 800bb02:	d03d      	beq.n	800bb80 <USBD_CDC_Setup+0xb4>
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d000      	beq.n	800bb0a <USBD_CDC_Setup+0x3e>
 800bb08:	e094      	b.n	800bc34 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	88db      	ldrh	r3, [r3, #6]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d02b      	beq.n	800bb6a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da12      	bge.n	800bb42 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	23af      	movs	r3, #175	@ 0xaf
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	58d3      	ldr	r3, [r2, r3]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bb2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	88d2      	ldrh	r2, [r2, #6]
 800bb30:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bb32:	6939      	ldr	r1, [r7, #16]
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	88da      	ldrh	r2, [r3, #6]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f001 fbaf 	bl	800d29e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bb40:	e083      	b.n	800bc4a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	7859      	ldrb	r1, [r3, #1]
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	2380      	movs	r3, #128	@ 0x80
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	88db      	ldrh	r3, [r3, #6]
 800bb52:	b2d9      	uxtb	r1, r3
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	4a40      	ldr	r2, [pc, #256]	@ (800bc58 <USBD_CDC_Setup+0x18c>)
 800bb58:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bb5a:	6939      	ldr	r1, [r7, #16]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	88da      	ldrh	r2, [r3, #6]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	0018      	movs	r0, r3
 800bb64:	f001 fbce 	bl	800d304 <USBD_CtlPrepareRx>
      break;
 800bb68:	e06f      	b.n	800bc4a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	23af      	movs	r3, #175	@ 0xaf
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	58d3      	ldr	r3, [r2, r3]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	7850      	ldrb	r0, [r2, #1]
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4798      	blx	r3
      break;
 800bb7e:	e064      	b.n	800bc4a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	785b      	ldrb	r3, [r3, #1]
 800bb84:	2b0b      	cmp	r3, #11
 800bb86:	d037      	beq.n	800bbf8 <USBD_CDC_Setup+0x12c>
 800bb88:	dc47      	bgt.n	800bc1a <USBD_CDC_Setup+0x14e>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <USBD_CDC_Setup+0xc8>
 800bb8e:	2b0a      	cmp	r3, #10
 800bb90:	d019      	beq.n	800bbc6 <USBD_CDC_Setup+0xfa>
 800bb92:	e042      	b.n	800bc1a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	23a7      	movs	r3, #167	@ 0xa7
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	5cd3      	ldrb	r3, [r2, r3]
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d107      	bne.n	800bbb0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bba0:	230c      	movs	r3, #12
 800bba2:	18f9      	adds	r1, r7, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	0018      	movs	r0, r3
 800bbaa:	f001 fb78 	bl	800d29e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bbae:	e040      	b.n	800bc32 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	0011      	movs	r1, r2
 800bbb6:	0018      	movs	r0, r3
 800bbb8:	f001 faf3 	bl	800d1a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbbc:	2317      	movs	r3, #23
 800bbbe:	18fb      	adds	r3, r7, r3
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	701a      	strb	r2, [r3, #0]
          break;
 800bbc4:	e035      	b.n	800bc32 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	23a7      	movs	r3, #167	@ 0xa7
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	5cd3      	ldrb	r3, [r2, r3]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d107      	bne.n	800bbe2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800bbd2:	230f      	movs	r3, #15
 800bbd4:	18f9      	adds	r1, r7, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f001 fb5f 	bl	800d29e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bbe0:	e027      	b.n	800bc32 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	0011      	movs	r1, r2
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f001 fada 	bl	800d1a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbee:	2317      	movs	r3, #23
 800bbf0:	18fb      	adds	r3, r7, r3
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	701a      	strb	r2, [r3, #0]
          break;
 800bbf6:	e01c      	b.n	800bc32 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	23a7      	movs	r3, #167	@ 0xa7
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	5cd3      	ldrb	r3, [r2, r3]
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d015      	beq.n	800bc30 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	0011      	movs	r1, r2
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f001 fac9 	bl	800d1a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc10:	2317      	movs	r3, #23
 800bc12:	18fb      	adds	r3, r7, r3
 800bc14:	2202      	movs	r2, #2
 800bc16:	701a      	strb	r2, [r3, #0]
          }
          break;
 800bc18:	e00a      	b.n	800bc30 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	0011      	movs	r1, r2
 800bc20:	0018      	movs	r0, r3
 800bc22:	f001 fabe 	bl	800d1a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800bc26:	2317      	movs	r3, #23
 800bc28:	18fb      	adds	r3, r7, r3
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	701a      	strb	r2, [r3, #0]
          break;
 800bc2e:	e000      	b.n	800bc32 <USBD_CDC_Setup+0x166>
          break;
 800bc30:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bc32:	e00a      	b.n	800bc4a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	0011      	movs	r1, r2
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f001 fab1 	bl	800d1a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800bc40:	2317      	movs	r3, #23
 800bc42:	18fb      	adds	r3, r7, r3
 800bc44:	2202      	movs	r2, #2
 800bc46:	701a      	strb	r2, [r3, #0]
      break;
 800bc48:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bc4a:	2317      	movs	r3, #23
 800bc4c:	18fb      	adds	r3, r7, r3
 800bc4e:	781b      	ldrb	r3, [r3, #0]
}
 800bc50:	0018      	movs	r0, r3
 800bc52:	46bd      	mov	sp, r7
 800bc54:	b006      	add	sp, #24
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	00000201 	.word	0x00000201

0800bc5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	000a      	movs	r2, r1
 800bc66:	1cfb      	adds	r3, r7, #3
 800bc68:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	23ae      	movs	r3, #174	@ 0xae
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	58d3      	ldr	r3, [r2, r3]
 800bc72:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	23b0      	movs	r3, #176	@ 0xb0
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	58d3      	ldr	r3, [r2, r3]
 800bc7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	23ae      	movs	r3, #174	@ 0xae
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	58d3      	ldr	r3, [r2, r3]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d03e      	beq.n	800bd08 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bc8a:	1cfb      	adds	r3, r7, #3
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	0013      	movs	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	189b      	adds	r3, r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	18cb      	adds	r3, r1, r3
 800bc9a:	331c      	adds	r3, #28
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d02b      	beq.n	800bcfa <USBD_CDC_DataIn+0x9e>
 800bca2:	1cfb      	adds	r3, r7, #3
 800bca4:	781a      	ldrb	r2, [r3, #0]
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	0013      	movs	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	189b      	adds	r3, r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	18cb      	adds	r3, r1, r3
 800bcb2:	331c      	adds	r3, #28
 800bcb4:	6818      	ldr	r0, [r3, #0]
 800bcb6:	1cfb      	adds	r3, r7, #3
 800bcb8:	781a      	ldrb	r2, [r3, #0]
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	0013      	movs	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	189b      	adds	r3, r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	18cb      	adds	r3, r1, r3
 800bcc6:	3320      	adds	r3, #32
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	0019      	movs	r1, r3
 800bccc:	f7f4 fabe 	bl	800024c <__aeabi_uidivmod>
 800bcd0:	1e0b      	subs	r3, r1, #0
 800bcd2:	d112      	bne.n	800bcfa <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bcd4:	1cfb      	adds	r3, r7, #3
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	0013      	movs	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	189b      	adds	r3, r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	18cb      	adds	r3, r1, r3
 800bce4:	331c      	adds	r3, #28
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bcea:	1cfb      	adds	r3, r7, #3
 800bcec:	7819      	ldrb	r1, [r3, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f001 ffce 	bl	800dc94 <USBD_LL_Transmit>
 800bcf8:	e004      	b.n	800bd04 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	2385      	movs	r3, #133	@ 0x85
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	2100      	movs	r1, #0
 800bd02:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	e000      	b.n	800bd0a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800bd08:	2302      	movs	r3, #2
  }
}
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b004      	add	sp, #16
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	000a      	movs	r2, r1
 800bd1c:	1cfb      	adds	r3, r7, #3
 800bd1e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	23ae      	movs	r3, #174	@ 0xae
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	58d3      	ldr	r3, [r2, r3]
 800bd28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bd2a:	1cfb      	adds	r3, r7, #3
 800bd2c:	781a      	ldrb	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	0011      	movs	r1, r2
 800bd32:	0018      	movs	r0, r3
 800bd34:	f002 f81c 	bl	800dd70 <USBD_LL_GetRxDataSize>
 800bd38:	0001      	movs	r1, r0
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	2383      	movs	r3, #131	@ 0x83
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	23ae      	movs	r3, #174	@ 0xae
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	58d3      	ldr	r3, [r2, r3]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d011      	beq.n	800bd72 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	23af      	movs	r3, #175	@ 0xaf
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	58d3      	ldr	r3, [r2, r3]
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	68f9      	ldr	r1, [r7, #12]
 800bd5a:	2381      	movs	r3, #129	@ 0x81
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	58c8      	ldr	r0, [r1, r3]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2183      	movs	r1, #131	@ 0x83
 800bd64:	0089      	lsls	r1, r1, #2
 800bd66:	468c      	mov	ip, r1
 800bd68:	4463      	add	r3, ip
 800bd6a:	0019      	movs	r1, r3
 800bd6c:	4790      	blx	r2

    return USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e000      	b.n	800bd74 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800bd72:	2302      	movs	r3, #2
  }
}
 800bd74:	0018      	movs	r0, r3
 800bd76:	46bd      	mov	sp, r7
 800bd78:	b004      	add	sp, #16
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd7c:	b590      	push	{r4, r7, lr}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	23ae      	movs	r3, #174	@ 0xae
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	58d3      	ldr	r3, [r2, r3]
 800bd8c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	23af      	movs	r3, #175	@ 0xaf
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	58d3      	ldr	r3, [r2, r3]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d018      	beq.n	800bdcc <USBD_CDC_EP0_RxReady+0x50>
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	2380      	movs	r3, #128	@ 0x80
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	5cd3      	ldrb	r3, [r2, r3]
 800bda2:	2bff      	cmp	r3, #255	@ 0xff
 800bda4:	d012      	beq.n	800bdcc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	23af      	movs	r3, #175	@ 0xaf
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	58d3      	ldr	r3, [r2, r3]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	68f9      	ldr	r1, [r7, #12]
 800bdb2:	2280      	movs	r2, #128	@ 0x80
 800bdb4:	0092      	lsls	r2, r2, #2
 800bdb6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800bdb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4c06      	ldr	r4, [pc, #24]	@ (800bdd8 <USBD_CDC_EP0_RxReady+0x5c>)
 800bdbe:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bdc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	2380      	movs	r3, #128	@ 0x80
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	21ff      	movs	r1, #255	@ 0xff
 800bdca:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	0018      	movs	r0, r3
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b005      	add	sp, #20
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	46c0      	nop			@ (mov r8, r8)
 800bdd8:	00000201 	.word	0x00000201

0800bddc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2243      	movs	r2, #67	@ 0x43
 800bde8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bdea:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800bdec:	0018      	movs	r0, r3
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	b002      	add	sp, #8
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000108 	.word	0x20000108

0800bdf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2243      	movs	r2, #67	@ 0x43
 800be04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800be06:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800be08:	0018      	movs	r0, r3
 800be0a:	46bd      	mov	sp, r7
 800be0c:	b002      	add	sp, #8
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	200000c4 	.word	0x200000c4

0800be14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2243      	movs	r2, #67	@ 0x43
 800be20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800be22:	4b02      	ldr	r3, [pc, #8]	@ (800be2c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800be24:	0018      	movs	r0, r3
 800be26:	46bd      	mov	sp, r7
 800be28:	b002      	add	sp, #8
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	2000014c 	.word	0x2000014c

0800be30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	220a      	movs	r2, #10
 800be3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800be3e:	4b02      	ldr	r3, [pc, #8]	@ (800be48 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800be40:	0018      	movs	r0, r3
 800be42:	46bd      	mov	sp, r7
 800be44:	b002      	add	sp, #8
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000080 	.word	0x20000080

0800be4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800be56:	200f      	movs	r0, #15
 800be58:	183b      	adds	r3, r7, r0
 800be5a:	2202      	movs	r2, #2
 800be5c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d007      	beq.n	800be74 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	23af      	movs	r3, #175	@ 0xaf
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800be6e:	183b      	adds	r3, r7, r0
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800be74:	230f      	movs	r3, #15
 800be76:	18fb      	adds	r3, r7, r3
 800be78:	781b      	ldrb	r3, [r3, #0]
}
 800be7a:	0018      	movs	r0, r3
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b004      	add	sp, #16
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b086      	sub	sp, #24
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	1dbb      	adds	r3, r7, #6
 800be8e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	23ae      	movs	r3, #174	@ 0xae
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	58d3      	ldr	r3, [r2, r3]
 800be98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	2382      	movs	r3, #130	@ 0x82
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	68b9      	ldr	r1, [r7, #8]
 800bea2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800bea4:	1dbb      	adds	r3, r7, #6
 800bea6:	8819      	ldrh	r1, [r3, #0]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	2384      	movs	r3, #132	@ 0x84
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	0018      	movs	r0, r3
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b006      	add	sp, #24
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	23ae      	movs	r3, #174	@ 0xae
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	58d3      	ldr	r3, [r2, r3]
 800becc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	2381      	movs	r3, #129	@ 0x81
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	0018      	movs	r0, r3
 800bedc:	46bd      	mov	sp, r7
 800bede:	b004      	add	sp, #16
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	23ae      	movs	r3, #174	@ 0xae
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	58d3      	ldr	r3, [r2, r3]
 800bef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	23ae      	movs	r3, #174	@ 0xae
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	58d3      	ldr	r3, [r2, r3]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d022      	beq.n	800bf46 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	2385      	movs	r3, #133	@ 0x85
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	58d3      	ldr	r3, [r2, r3]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11a      	bne.n	800bf42 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	2385      	movs	r3, #133	@ 0x85
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	2101      	movs	r1, #1
 800bf14:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	2384      	movs	r3, #132	@ 0x84
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	58d2      	ldr	r2, [r2, r3]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	2382      	movs	r3, #130	@ 0x82
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	2384      	movs	r3, #132	@ 0x84
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	000a      	movs	r2, r1
 800bf38:	2181      	movs	r1, #129	@ 0x81
 800bf3a:	f001 feab 	bl	800dc94 <USBD_LL_Transmit>

      return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e002      	b.n	800bf48 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e000      	b.n	800bf48 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800bf46:	2302      	movs	r3, #2
  }
}
 800bf48:	0018      	movs	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b004      	add	sp, #16
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	23ae      	movs	r3, #174	@ 0xae
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	58d3      	ldr	r3, [r2, r3]
 800bf60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	23ae      	movs	r3, #174	@ 0xae
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	58d3      	ldr	r3, [r2, r3]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d019      	beq.n	800bfa2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	7c1b      	ldrb	r3, [r3, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	2381      	movs	r3, #129	@ 0x81
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	58d2      	ldr	r2, [r2, r3]
 800bf7e:	2380      	movs	r3, #128	@ 0x80
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	2101      	movs	r1, #1
 800bf86:	f001 febc 	bl	800dd02 <USBD_LL_PrepareReceive>
 800bf8a:	e008      	b.n	800bf9e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	2381      	movs	r3, #129	@ 0x81
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	58d2      	ldr	r2, [r2, r3]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	2340      	movs	r3, #64	@ 0x40
 800bf98:	2101      	movs	r1, #1
 800bf9a:	f001 feb2 	bl	800dd02 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e000      	b.n	800bfa4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800bfa2:	2302      	movs	r3, #2
  }
}
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	b004      	add	sp, #16
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	1dfb      	adds	r3, r7, #7
 800bfb8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	e020      	b.n	800c006 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	23ad      	movs	r3, #173	@ 0xad
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	58d3      	ldr	r3, [r2, r3]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d004      	beq.n	800bfda <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	23ad      	movs	r3, #173	@ 0xad
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d004      	beq.n	800bfea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	23ac      	movs	r3, #172	@ 0xac
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	23a7      	movs	r3, #167	@ 0xa7
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	2101      	movs	r1, #1
 800bff2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	1dfa      	adds	r2, r7, #7
 800bff8:	7812      	ldrb	r2, [r2, #0]
 800bffa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	0018      	movs	r0, r3
 800c000:	f001 fcac 	bl	800d95c <USBD_LL_Init>

  return USBD_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	0018      	movs	r0, r3
 800c008:	46bd      	mov	sp, r7
 800c00a:	b004      	add	sp, #16
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c018:	200f      	movs	r0, #15
 800c01a:	183b      	adds	r3, r7, r0
 800c01c:	2200      	movs	r2, #0
 800c01e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d008      	beq.n	800c038 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	23ad      	movs	r3, #173	@ 0xad
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800c030:	183b      	adds	r3, r7, r0
 800c032:	2200      	movs	r2, #0
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	e003      	b.n	800c040 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c038:	230f      	movs	r3, #15
 800c03a:	18fb      	adds	r3, r7, r3
 800c03c:	2202      	movs	r2, #2
 800c03e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c040:	230f      	movs	r3, #15
 800c042:	18fb      	adds	r3, r7, r3
 800c044:	781b      	ldrb	r3, [r3, #0]
}
 800c046:	0018      	movs	r0, r3
 800c048:	46bd      	mov	sp, r7
 800c04a:	b004      	add	sp, #16
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	0018      	movs	r0, r3
 800c05a:	f001 fce3 	bl	800da24 <USBD_LL_Start>

  return USBD_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	0018      	movs	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	b002      	add	sp, #8
 800c066:	bd80      	pop	{r7, pc}

0800c068 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	0018      	movs	r0, r3
 800c074:	46bd      	mov	sp, r7
 800c076:	b002      	add	sp, #8
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c07a:	b590      	push	{r4, r7, lr}
 800c07c:	b085      	sub	sp, #20
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	000a      	movs	r2, r1
 800c084:	1cfb      	adds	r3, r7, #3
 800c086:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c088:	240f      	movs	r4, #15
 800c08a:	193b      	adds	r3, r7, r4
 800c08c:	2202      	movs	r2, #2
 800c08e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	23ad      	movs	r3, #173	@ 0xad
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	58d3      	ldr	r3, [r2, r3]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00e      	beq.n	800c0ba <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	23ad      	movs	r3, #173	@ 0xad
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	58d3      	ldr	r3, [r2, r3]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	1cfa      	adds	r2, r7, #3
 800c0a8:	7811      	ldrb	r1, [r2, #0]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	0010      	movs	r0, r2
 800c0ae:	4798      	blx	r3
 800c0b0:	1e03      	subs	r3, r0, #0
 800c0b2:	d102      	bne.n	800c0ba <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800c0b4:	193b      	adds	r3, r7, r4
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800c0ba:	230f      	movs	r3, #15
 800c0bc:	18fb      	adds	r3, r7, r3
 800c0be:	781b      	ldrb	r3, [r3, #0]
}
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	b005      	add	sp, #20
 800c0c6:	bd90      	pop	{r4, r7, pc}

0800c0c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	000a      	movs	r2, r1
 800c0d2:	1cfb      	adds	r3, r7, #3
 800c0d4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	23ad      	movs	r3, #173	@ 0xad
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	58d3      	ldr	r3, [r2, r3]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	1cfa      	adds	r2, r7, #3
 800c0e2:	7811      	ldrb	r1, [r2, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	0010      	movs	r0, r2
 800c0e8:	4798      	blx	r3

  return USBD_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b002      	add	sp, #8
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	22aa      	movs	r2, #170	@ 0xaa
 800c102:	0092      	lsls	r2, r2, #2
 800c104:	4694      	mov	ip, r2
 800c106:	4463      	add	r3, ip
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	0011      	movs	r1, r2
 800c10c:	0018      	movs	r0, r3
 800c10e:	f001 f810 	bl	800d132 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	23a5      	movs	r3, #165	@ 0xa5
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	2101      	movs	r1, #1
 800c11a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a23      	ldr	r2, [pc, #140]	@ (800c1ac <USBD_LL_SetupStage+0xb8>)
 800c120:	5a9b      	ldrh	r3, [r3, r2]
 800c122:	0019      	movs	r1, r3
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	23a6      	movs	r3, #166	@ 0xa6
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	23aa      	movs	r3, #170	@ 0xaa
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	5cd3      	ldrb	r3, [r2, r3]
 800c134:	001a      	movs	r2, r3
 800c136:	231f      	movs	r3, #31
 800c138:	4013      	ands	r3, r2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d019      	beq.n	800c172 <USBD_LL_SetupStage+0x7e>
 800c13e:	d822      	bhi.n	800c186 <USBD_LL_SetupStage+0x92>
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <USBD_LL_SetupStage+0x56>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d00a      	beq.n	800c15e <USBD_LL_SetupStage+0x6a>
 800c148:	e01d      	b.n	800c186 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	22aa      	movs	r2, #170	@ 0xaa
 800c14e:	0092      	lsls	r2, r2, #2
 800c150:	189a      	adds	r2, r3, r2
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	0011      	movs	r1, r2
 800c156:	0018      	movs	r0, r3
 800c158:	f000 fa10 	bl	800c57c <USBD_StdDevReq>
      break;
 800c15c:	e020      	b.n	800c1a0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	22aa      	movs	r2, #170	@ 0xaa
 800c162:	0092      	lsls	r2, r2, #2
 800c164:	189a      	adds	r2, r3, r2
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	0011      	movs	r1, r2
 800c16a:	0018      	movs	r0, r3
 800c16c:	f000 fa78 	bl	800c660 <USBD_StdItfReq>
      break;
 800c170:	e016      	b.n	800c1a0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	22aa      	movs	r2, #170	@ 0xaa
 800c176:	0092      	lsls	r2, r2, #2
 800c178:	189a      	adds	r2, r3, r2
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	0011      	movs	r1, r2
 800c17e:	0018      	movs	r0, r3
 800c180:	f000 fac5 	bl	800c70e <USBD_StdEPReq>
      break;
 800c184:	e00c      	b.n	800c1a0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	23aa      	movs	r3, #170	@ 0xaa
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	5cd3      	ldrb	r3, [r2, r3]
 800c18e:	227f      	movs	r2, #127	@ 0x7f
 800c190:	4393      	bics	r3, r2
 800c192:	b2da      	uxtb	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	0011      	movs	r1, r2
 800c198:	0018      	movs	r0, r3
 800c19a:	f001 fcca 	bl	800db32 <USBD_LL_StallEP>
      break;
 800c19e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	0018      	movs	r0, r3
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	b002      	add	sp, #8
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	46c0      	nop			@ (mov r8, r8)
 800c1ac:	000002ae 	.word	0x000002ae

0800c1b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	607a      	str	r2, [r7, #4]
 800c1ba:	200b      	movs	r0, #11
 800c1bc:	183b      	adds	r3, r7, r0
 800c1be:	1c0a      	adds	r2, r1, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c1c2:	183b      	adds	r3, r7, r0
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d154      	bne.n	800c274 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3355      	adds	r3, #85	@ 0x55
 800c1ce:	33ff      	adds	r3, #255	@ 0xff
 800c1d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	23a5      	movs	r3, #165	@ 0xa5
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	58d3      	ldr	r3, [r2, r3]
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d139      	bne.n	800c252 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d919      	bls.n	800c21e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	68da      	ldr	r2, [r3, #12]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c200:	429a      	cmp	r2, r3
 800c202:	d203      	bcs.n	800c20c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c208:	b29b      	uxth	r3, r3
 800c20a:	e002      	b.n	800c212 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c210:	b29b      	uxth	r3, r3
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	001a      	movs	r2, r3
 800c218:	f001 f898 	bl	800d34c <USBD_CtlContinueRx>
 800c21c:	e045      	b.n	800c2aa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	23ad      	movs	r3, #173	@ 0xad
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	58d3      	ldr	r3, [r2, r3]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00d      	beq.n	800c248 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	23a7      	movs	r3, #167	@ 0xa7
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c234:	2b03      	cmp	r3, #3
 800c236:	d107      	bne.n	800c248 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	23ad      	movs	r3, #173	@ 0xad
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	58d3      	ldr	r3, [r2, r3]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	0010      	movs	r0, r2
 800c246:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	0018      	movs	r0, r3
 800c24c:	f001 f891 	bl	800d372 <USBD_CtlSendStatus>
 800c250:	e02b      	b.n	800c2aa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	23a5      	movs	r3, #165	@ 0xa5
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	58d3      	ldr	r3, [r2, r3]
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d125      	bne.n	800c2aa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	23a5      	movs	r3, #165	@ 0xa5
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	2100      	movs	r1, #0
 800c266:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2100      	movs	r1, #0
 800c26c:	0018      	movs	r0, r3
 800c26e:	f001 fc60 	bl	800db32 <USBD_LL_StallEP>
 800c272:	e01a      	b.n	800c2aa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	23ad      	movs	r3, #173	@ 0xad
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	58d3      	ldr	r3, [r2, r3]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d011      	beq.n	800c2a6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	23a7      	movs	r3, #167	@ 0xa7
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d10b      	bne.n	800c2a6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	23ad      	movs	r3, #173	@ 0xad
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	58d3      	ldr	r3, [r2, r3]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	220b      	movs	r2, #11
 800c29a:	18ba      	adds	r2, r7, r2
 800c29c:	7811      	ldrb	r1, [r2, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	0010      	movs	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	e001      	b.n	800c2aa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e000      	b.n	800c2ac <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	b006      	add	sp, #24
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	200b      	movs	r0, #11
 800c2c0:	183b      	adds	r3, r7, r0
 800c2c2:	1c0a      	adds	r2, r1, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c2c6:	183b      	adds	r3, r7, r0
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d000      	beq.n	800c2d0 <USBD_LL_DataInStage+0x1c>
 800c2ce:	e08e      	b.n	800c3ee <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3314      	adds	r3, #20
 800c2d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	23a5      	movs	r3, #165	@ 0xa5
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	58d3      	ldr	r3, [r2, r3]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d164      	bne.n	800c3ac <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	68da      	ldr	r2, [r3, #12]
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d915      	bls.n	800c31a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	1ad2      	subs	r2, r2, r3
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	b29a      	uxth	r2, r3
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	0018      	movs	r0, r3
 800c308:	f000 ffe9 	bl	800d2de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	2300      	movs	r3, #0
 800c310:	2200      	movs	r2, #0
 800c312:	2100      	movs	r1, #0
 800c314:	f001 fcf5 	bl	800dd02 <USBD_LL_PrepareReceive>
 800c318:	e059      	b.n	800c3ce <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	0019      	movs	r1, r3
 800c324:	0010      	movs	r0, r2
 800c326:	f7f3 ff91 	bl	800024c <__aeabi_uidivmod>
 800c32a:	1e0b      	subs	r3, r1, #0
 800c32c:	d11f      	bne.n	800c36e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c336:	429a      	cmp	r2, r3
 800c338:	d319      	bcc.n	800c36e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	68f9      	ldr	r1, [r7, #12]
 800c340:	23a6      	movs	r3, #166	@ 0xa6
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c346:	429a      	cmp	r2, r3
 800c348:	d211      	bcs.n	800c36e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	0018      	movs	r0, r3
 800c352:	f000 ffc4 	bl	800d2de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	23a6      	movs	r3, #166	@ 0xa6
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	2100      	movs	r1, #0
 800c35e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	2300      	movs	r3, #0
 800c364:	2200      	movs	r2, #0
 800c366:	2100      	movs	r1, #0
 800c368:	f001 fccb 	bl	800dd02 <USBD_LL_PrepareReceive>
 800c36c:	e02f      	b.n	800c3ce <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	23ad      	movs	r3, #173	@ 0xad
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	58d3      	ldr	r3, [r2, r3]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00d      	beq.n	800c398 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	23a7      	movs	r3, #167	@ 0xa7
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c384:	2b03      	cmp	r3, #3
 800c386:	d107      	bne.n	800c398 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	23ad      	movs	r3, #173	@ 0xad
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	58d3      	ldr	r3, [r2, r3]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	0010      	movs	r0, r2
 800c396:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2180      	movs	r1, #128	@ 0x80
 800c39c:	0018      	movs	r0, r3
 800c39e:	f001 fbc8 	bl	800db32 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f000 fff8 	bl	800d39a <USBD_CtlReceiveStatus>
 800c3aa:	e010      	b.n	800c3ce <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	23a5      	movs	r3, #165	@ 0xa5
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	58d3      	ldr	r3, [r2, r3]
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d005      	beq.n	800c3c4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	23a5      	movs	r3, #165	@ 0xa5
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d104      	bne.n	800c3ce <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2180      	movs	r1, #128	@ 0x80
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f001 fbb2 	bl	800db32 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	23a8      	movs	r3, #168	@ 0xa8
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	5cd3      	ldrb	r3, [r2, r3]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d124      	bne.n	800c424 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f7ff fe43 	bl	800c068 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	23a8      	movs	r3, #168	@ 0xa8
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	54d1      	strb	r1, [r2, r3]
 800c3ec:	e01a      	b.n	800c424 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	23ad      	movs	r3, #173	@ 0xad
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	58d3      	ldr	r3, [r2, r3]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d011      	beq.n	800c420 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	23a7      	movs	r3, #167	@ 0xa7
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800c404:	2b03      	cmp	r3, #3
 800c406:	d10b      	bne.n	800c420 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	23ad      	movs	r3, #173	@ 0xad
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	58d3      	ldr	r3, [r2, r3]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	220b      	movs	r2, #11
 800c414:	18ba      	adds	r2, r7, r2
 800c416:	7811      	ldrb	r1, [r2, #0]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	0010      	movs	r0, r2
 800c41c:	4798      	blx	r3
 800c41e:	e001      	b.n	800c424 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c420:	2302      	movs	r3, #2
 800c422:	e000      	b.n	800c426 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	0018      	movs	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	b006      	add	sp, #24
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	2340      	movs	r3, #64	@ 0x40
 800c43a:	2200      	movs	r2, #0
 800c43c:	2100      	movs	r1, #0
 800c43e:	f001 fb16 	bl	800da6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	23ac      	movs	r3, #172	@ 0xac
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	2101      	movs	r1, #1
 800c44a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	23b2      	movs	r3, #178	@ 0xb2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	2140      	movs	r1, #64	@ 0x40
 800c454:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	2340      	movs	r3, #64	@ 0x40
 800c45a:	2200      	movs	r2, #0
 800c45c:	2180      	movs	r1, #128	@ 0x80
 800c45e:	f001 fb06 	bl	800da6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2240      	movs	r2, #64	@ 0x40
 800c46c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	23a7      	movs	r3, #167	@ 0xa7
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	2101      	movs	r1, #1
 800c476:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	23a5      	movs	r3, #165	@ 0xa5
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	2100      	movs	r1, #0
 800c480:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	23a9      	movs	r3, #169	@ 0xa9
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	2100      	movs	r1, #0
 800c490:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	23ae      	movs	r3, #174	@ 0xae
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	58d3      	ldr	r3, [r2, r3]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	23ad      	movs	r3, #173	@ 0xad
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	58d3      	ldr	r3, [r2, r3]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	b2d9      	uxtb	r1, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	4790      	blx	r2
  }

  return USBD_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	b002      	add	sp, #8
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	000a      	movs	r2, r1
 800c4c8:	1cfb      	adds	r3, r7, #3
 800c4ca:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	1cfa      	adds	r2, r7, #3
 800c4d0:	7812      	ldrb	r2, [r2, #0]
 800c4d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	b002      	add	sp, #8
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	23a7      	movs	r3, #167	@ 0xa7
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	5cd1      	ldrb	r1, [r2, r3]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a06      	ldr	r2, [pc, #24]	@ (800c50c <USBD_LL_Suspend+0x2c>)
 800c4f4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	23a7      	movs	r3, #167	@ 0xa7
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	2104      	movs	r1, #4
 800c4fe:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	0018      	movs	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	b002      	add	sp, #8
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	0000029d 	.word	0x0000029d

0800c510 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	23a7      	movs	r3, #167	@ 0xa7
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	5cd3      	ldrb	r3, [r2, r3]
 800c520:	2b04      	cmp	r3, #4
 800c522:	d106      	bne.n	800c532 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a05      	ldr	r2, [pc, #20]	@ (800c53c <USBD_LL_Resume+0x2c>)
 800c528:	5c99      	ldrb	r1, [r3, r2]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	23a7      	movs	r3, #167	@ 0xa7
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	0018      	movs	r0, r3
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	0000029d 	.word	0x0000029d

0800c540 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	23a7      	movs	r3, #167	@ 0xa7
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	5cd3      	ldrb	r3, [r2, r3]
 800c550:	2b03      	cmp	r3, #3
 800c552:	d10e      	bne.n	800c572 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	23ad      	movs	r3, #173	@ 0xad
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	58d3      	ldr	r3, [r2, r3]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d007      	beq.n	800c572 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	23ad      	movs	r3, #173	@ 0xad
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	58d3      	ldr	r3, [r2, r3]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	0010      	movs	r0, r2
 800c570:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	0018      	movs	r0, r3
 800c576:	46bd      	mov	sp, r7
 800c578:	b002      	add	sp, #8
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c586:	230f      	movs	r3, #15
 800c588:	18fb      	adds	r3, r7, r3
 800c58a:	2200      	movs	r2, #0
 800c58c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	001a      	movs	r2, r3
 800c594:	2360      	movs	r3, #96	@ 0x60
 800c596:	4013      	ands	r3, r2
 800c598:	2b40      	cmp	r3, #64	@ 0x40
 800c59a:	d004      	beq.n	800c5a6 <USBD_StdDevReq+0x2a>
 800c59c:	d84f      	bhi.n	800c63e <USBD_StdDevReq+0xc2>
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00b      	beq.n	800c5ba <USBD_StdDevReq+0x3e>
 800c5a2:	2b20      	cmp	r3, #32
 800c5a4:	d14b      	bne.n	800c63e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	23ad      	movs	r3, #173	@ 0xad
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	58d3      	ldr	r3, [r2, r3]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	0010      	movs	r0, r2
 800c5b6:	4798      	blx	r3
      break;
 800c5b8:	e048      	b.n	800c64c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	785b      	ldrb	r3, [r3, #1]
 800c5be:	2b09      	cmp	r3, #9
 800c5c0:	d835      	bhi.n	800c62e <USBD_StdDevReq+0xb2>
 800c5c2:	009a      	lsls	r2, r3, #2
 800c5c4:	4b25      	ldr	r3, [pc, #148]	@ (800c65c <USBD_StdDevReq+0xe0>)
 800c5c6:	18d3      	adds	r3, r2, r3
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	0011      	movs	r1, r2
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f000 fa52 	bl	800ca7c <USBD_GetDescriptor>
          break;
 800c5d8:	e030      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	0011      	movs	r1, r2
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f000 fbfd 	bl	800cde0 <USBD_SetAddress>
          break;
 800c5e6:	e029      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	0011      	movs	r1, r2
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	f000 fc4a 	bl	800ce88 <USBD_SetConfig>
          break;
 800c5f4:	e022      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	0011      	movs	r1, r2
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f000 fce7 	bl	800cfd0 <USBD_GetConfig>
          break;
 800c602:	e01b      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	0011      	movs	r1, r2
 800c60a:	0018      	movs	r0, r3
 800c60c:	f000 fd1b 	bl	800d046 <USBD_GetStatus>
          break;
 800c610:	e014      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	0011      	movs	r1, r2
 800c618:	0018      	movs	r0, r3
 800c61a:	f000 fd4e 	bl	800d0ba <USBD_SetFeature>
          break;
 800c61e:	e00d      	b.n	800c63c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	0011      	movs	r1, r2
 800c626:	0018      	movs	r0, r3
 800c628:	f000 fd5d 	bl	800d0e6 <USBD_ClrFeature>
          break;
 800c62c:	e006      	b.n	800c63c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	0011      	movs	r1, r2
 800c634:	0018      	movs	r0, r3
 800c636:	f000 fdb4 	bl	800d1a2 <USBD_CtlError>
          break;
 800c63a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c63c:	e006      	b.n	800c64c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	0011      	movs	r1, r2
 800c644:	0018      	movs	r0, r3
 800c646:	f000 fdac 	bl	800d1a2 <USBD_CtlError>
      break;
 800c64a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c64c:	230f      	movs	r3, #15
 800c64e:	18fb      	adds	r3, r7, r3
 800c650:	781b      	ldrb	r3, [r3, #0]
}
 800c652:	0018      	movs	r0, r3
 800c654:	46bd      	mov	sp, r7
 800c656:	b004      	add	sp, #16
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	08011e10 	.word	0x08011e10

0800c660 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c660:	b5b0      	push	{r4, r5, r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66a:	230f      	movs	r3, #15
 800c66c:	18fb      	adds	r3, r7, r3
 800c66e:	2200      	movs	r2, #0
 800c670:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	001a      	movs	r2, r3
 800c678:	2360      	movs	r3, #96	@ 0x60
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b40      	cmp	r3, #64	@ 0x40
 800c67e:	d004      	beq.n	800c68a <USBD_StdItfReq+0x2a>
 800c680:	d839      	bhi.n	800c6f6 <USBD_StdItfReq+0x96>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <USBD_StdItfReq+0x2a>
 800c686:	2b20      	cmp	r3, #32
 800c688:	d135      	bne.n	800c6f6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	23a7      	movs	r3, #167	@ 0xa7
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	5cd3      	ldrb	r3, [r2, r3]
 800c692:	3b01      	subs	r3, #1
 800c694:	2b02      	cmp	r3, #2
 800c696:	d825      	bhi.n	800c6e4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	889b      	ldrh	r3, [r3, #4]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d819      	bhi.n	800c6d6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	23ad      	movs	r3, #173	@ 0xad
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	58d3      	ldr	r3, [r2, r3]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	250f      	movs	r5, #15
 800c6ae:	197c      	adds	r4, r7, r5
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	0010      	movs	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	88db      	ldrh	r3, [r3, #6]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d116      	bne.n	800c6f2 <USBD_StdItfReq+0x92>
 800c6c4:	197b      	adds	r3, r7, r5
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d112      	bne.n	800c6f2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f000 fe4f 	bl	800d372 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6d4:	e00d      	b.n	800c6f2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	0011      	movs	r1, r2
 800c6dc:	0018      	movs	r0, r3
 800c6de:	f000 fd60 	bl	800d1a2 <USBD_CtlError>
          break;
 800c6e2:	e006      	b.n	800c6f2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	0011      	movs	r1, r2
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f000 fd59 	bl	800d1a2 <USBD_CtlError>
          break;
 800c6f0:	e000      	b.n	800c6f4 <USBD_StdItfReq+0x94>
          break;
 800c6f2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c6f4:	e006      	b.n	800c704 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0011      	movs	r1, r2
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f000 fd50 	bl	800d1a2 <USBD_CtlError>
      break;
 800c702:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	0018      	movs	r0, r3
 800c708:	46bd      	mov	sp, r7
 800c70a:	b004      	add	sp, #16
 800c70c:	bdb0      	pop	{r4, r5, r7, pc}

0800c70e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c70e:	b5b0      	push	{r4, r5, r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c718:	230f      	movs	r3, #15
 800c71a:	18fb      	adds	r3, r7, r3
 800c71c:	2200      	movs	r2, #0
 800c71e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	889a      	ldrh	r2, [r3, #4]
 800c724:	230e      	movs	r3, #14
 800c726:	18fb      	adds	r3, r7, r3
 800c728:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	001a      	movs	r2, r3
 800c730:	2360      	movs	r3, #96	@ 0x60
 800c732:	4013      	ands	r3, r2
 800c734:	2b40      	cmp	r3, #64	@ 0x40
 800c736:	d006      	beq.n	800c746 <USBD_StdEPReq+0x38>
 800c738:	d900      	bls.n	800c73c <USBD_StdEPReq+0x2e>
 800c73a:	e190      	b.n	800ca5e <USBD_StdEPReq+0x350>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00c      	beq.n	800c75a <USBD_StdEPReq+0x4c>
 800c740:	2b20      	cmp	r3, #32
 800c742:	d000      	beq.n	800c746 <USBD_StdEPReq+0x38>
 800c744:	e18b      	b.n	800ca5e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	23ad      	movs	r3, #173	@ 0xad
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	58d3      	ldr	r3, [r2, r3]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	0010      	movs	r0, r2
 800c756:	4798      	blx	r3
      break;
 800c758:	e188      	b.n	800ca6c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	001a      	movs	r2, r3
 800c760:	2360      	movs	r3, #96	@ 0x60
 800c762:	4013      	ands	r3, r2
 800c764:	2b20      	cmp	r3, #32
 800c766:	d10f      	bne.n	800c788 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	23ad      	movs	r3, #173	@ 0xad
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	58d3      	ldr	r3, [r2, r3]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	250f      	movs	r5, #15
 800c774:	197c      	adds	r4, r7, r5
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	0010      	movs	r0, r2
 800c77c:	4798      	blx	r3
 800c77e:	0003      	movs	r3, r0
 800c780:	7023      	strb	r3, [r4, #0]

        return ret;
 800c782:	197b      	adds	r3, r7, r5
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	e174      	b.n	800ca72 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d007      	beq.n	800c7a0 <USBD_StdEPReq+0x92>
 800c790:	dd00      	ble.n	800c794 <USBD_StdEPReq+0x86>
 800c792:	e15c      	b.n	800ca4e <USBD_StdEPReq+0x340>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d100      	bne.n	800c79a <USBD_StdEPReq+0x8c>
 800c798:	e092      	b.n	800c8c0 <USBD_StdEPReq+0x1b2>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d04b      	beq.n	800c836 <USBD_StdEPReq+0x128>
 800c79e:	e156      	b.n	800ca4e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	23a7      	movs	r3, #167	@ 0xa7
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	5cd3      	ldrb	r3, [r2, r3]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d002      	beq.n	800c7b2 <USBD_StdEPReq+0xa4>
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d01d      	beq.n	800c7ec <USBD_StdEPReq+0xde>
 800c7b0:	e039      	b.n	800c826 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7b2:	220e      	movs	r2, #14
 800c7b4:	18bb      	adds	r3, r7, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d010      	beq.n	800c7de <USBD_StdEPReq+0xd0>
 800c7bc:	18bb      	adds	r3, r7, r2
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b80      	cmp	r3, #128	@ 0x80
 800c7c2:	d00c      	beq.n	800c7de <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c7c4:	18bb      	adds	r3, r7, r2
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	0011      	movs	r1, r2
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	f001 f9b0 	bl	800db32 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2180      	movs	r1, #128	@ 0x80
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	f001 f9ab 	bl	800db32 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7dc:	e02a      	b.n	800c834 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	0011      	movs	r1, r2
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f000 fcdc 	bl	800d1a2 <USBD_CtlError>
              break;
 800c7ea:	e023      	b.n	800c834 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	885b      	ldrh	r3, [r3, #2]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d113      	bne.n	800c81c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c7f4:	220e      	movs	r2, #14
 800c7f6:	18bb      	adds	r3, r7, r2
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <USBD_StdEPReq+0x10e>
 800c7fe:	18bb      	adds	r3, r7, r2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b80      	cmp	r3, #128	@ 0x80
 800c804:	d00a      	beq.n	800c81c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	88db      	ldrh	r3, [r3, #6]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c80e:	18bb      	adds	r3, r7, r2
 800c810:	781a      	ldrb	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	0011      	movs	r1, r2
 800c816:	0018      	movs	r0, r3
 800c818:	f001 f98b 	bl	800db32 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	0018      	movs	r0, r3
 800c820:	f000 fda7 	bl	800d372 <USBD_CtlSendStatus>

              break;
 800c824:	e006      	b.n	800c834 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	0011      	movs	r1, r2
 800c82c:	0018      	movs	r0, r3
 800c82e:	f000 fcb8 	bl	800d1a2 <USBD_CtlError>
              break;
 800c832:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c834:	e112      	b.n	800ca5c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	23a7      	movs	r3, #167	@ 0xa7
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	5cd3      	ldrb	r3, [r2, r3]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d002      	beq.n	800c848 <USBD_StdEPReq+0x13a>
 800c842:	2b03      	cmp	r3, #3
 800c844:	d01d      	beq.n	800c882 <USBD_StdEPReq+0x174>
 800c846:	e032      	b.n	800c8ae <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c848:	220e      	movs	r2, #14
 800c84a:	18bb      	adds	r3, r7, r2
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d010      	beq.n	800c874 <USBD_StdEPReq+0x166>
 800c852:	18bb      	adds	r3, r7, r2
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	2b80      	cmp	r3, #128	@ 0x80
 800c858:	d00c      	beq.n	800c874 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c85a:	18bb      	adds	r3, r7, r2
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	0011      	movs	r1, r2
 800c862:	0018      	movs	r0, r3
 800c864:	f001 f965 	bl	800db32 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2180      	movs	r1, #128	@ 0x80
 800c86c:	0018      	movs	r0, r3
 800c86e:	f001 f960 	bl	800db32 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c872:	e024      	b.n	800c8be <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	0011      	movs	r1, r2
 800c87a:	0018      	movs	r0, r3
 800c87c:	f000 fc91 	bl	800d1a2 <USBD_CtlError>
              break;
 800c880:	e01d      	b.n	800c8be <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	885b      	ldrh	r3, [r3, #2]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d118      	bne.n	800c8bc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c88a:	210e      	movs	r1, #14
 800c88c:	187b      	adds	r3, r7, r1
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	227f      	movs	r2, #127	@ 0x7f
 800c892:	4013      	ands	r3, r2
 800c894:	d006      	beq.n	800c8a4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c896:	187b      	adds	r3, r7, r1
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	0011      	movs	r1, r2
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f001 f972 	bl	800db88 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	0018      	movs	r0, r3
 800c8a8:	f000 fd63 	bl	800d372 <USBD_CtlSendStatus>
              }
              break;
 800c8ac:	e006      	b.n	800c8bc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	0011      	movs	r1, r2
 800c8b4:	0018      	movs	r0, r3
 800c8b6:	f000 fc74 	bl	800d1a2 <USBD_CtlError>
              break;
 800c8ba:	e000      	b.n	800c8be <USBD_StdEPReq+0x1b0>
              break;
 800c8bc:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c8be:	e0cd      	b.n	800ca5c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	23a7      	movs	r3, #167	@ 0xa7
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	5cd3      	ldrb	r3, [r2, r3]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d002      	beq.n	800c8d2 <USBD_StdEPReq+0x1c4>
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d03c      	beq.n	800c94a <USBD_StdEPReq+0x23c>
 800c8d0:	e0b5      	b.n	800ca3e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8d2:	220e      	movs	r2, #14
 800c8d4:	18bb      	adds	r3, r7, r2
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00a      	beq.n	800c8f2 <USBD_StdEPReq+0x1e4>
 800c8dc:	18bb      	adds	r3, r7, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b80      	cmp	r3, #128	@ 0x80
 800c8e2:	d006      	beq.n	800c8f2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	0011      	movs	r1, r2
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	f000 fc59 	bl	800d1a2 <USBD_CtlError>
                break;
 800c8f0:	e0ac      	b.n	800ca4c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8f2:	220e      	movs	r2, #14
 800c8f4:	18bb      	adds	r3, r7, r2
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	b25b      	sxtb	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	da0c      	bge.n	800c918 <USBD_StdEPReq+0x20a>
 800c8fe:	18bb      	adds	r3, r7, r2
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	227f      	movs	r2, #127	@ 0x7f
 800c904:	401a      	ands	r2, r3
 800c906:	0013      	movs	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	189b      	adds	r3, r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	3310      	adds	r3, #16
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	18d3      	adds	r3, r2, r3
 800c914:	3304      	adds	r3, #4
 800c916:	e00d      	b.n	800c934 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c918:	230e      	movs	r3, #14
 800c91a:	18fb      	adds	r3, r7, r3
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	227f      	movs	r2, #127	@ 0x7f
 800c920:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c922:	0013      	movs	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	189b      	adds	r3, r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	3351      	adds	r3, #81	@ 0x51
 800c92c:	33ff      	adds	r3, #255	@ 0xff
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	18d3      	adds	r3, r2, r3
 800c932:	3304      	adds	r3, #4
 800c934:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2202      	movs	r2, #2
 800c942:	0018      	movs	r0, r3
 800c944:	f000 fcab 	bl	800d29e <USBD_CtlSendData>
              break;
 800c948:	e080      	b.n	800ca4c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c94a:	220e      	movs	r2, #14
 800c94c:	18bb      	adds	r3, r7, r2
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	b25b      	sxtb	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	da14      	bge.n	800c980 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c956:	18bb      	adds	r3, r7, r2
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	220f      	movs	r2, #15
 800c95c:	401a      	ands	r2, r3
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	0013      	movs	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	189b      	adds	r3, r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	18cb      	adds	r3, r1, r3
 800c96a:	3318      	adds	r3, #24
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d11e      	bne.n	800c9b0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	0011      	movs	r1, r2
 800c978:	0018      	movs	r0, r3
 800c97a:	f000 fc12 	bl	800d1a2 <USBD_CtlError>
                  break;
 800c97e:	e065      	b.n	800ca4c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c980:	230e      	movs	r3, #14
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	220f      	movs	r2, #15
 800c988:	401a      	ands	r2, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	23ac      	movs	r3, #172	@ 0xac
 800c98e:	0059      	lsls	r1, r3, #1
 800c990:	0013      	movs	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	189b      	adds	r3, r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	18c3      	adds	r3, r0, r3
 800c99a:	185b      	adds	r3, r3, r1
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	0011      	movs	r1, r2
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f000 fbfa 	bl	800d1a2 <USBD_CtlError>
                  break;
 800c9ae:	e04d      	b.n	800ca4c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9b0:	220e      	movs	r2, #14
 800c9b2:	18bb      	adds	r3, r7, r2
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	b25b      	sxtb	r3, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da0c      	bge.n	800c9d6 <USBD_StdEPReq+0x2c8>
 800c9bc:	18bb      	adds	r3, r7, r2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	227f      	movs	r2, #127	@ 0x7f
 800c9c2:	401a      	ands	r2, r3
 800c9c4:	0013      	movs	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	189b      	adds	r3, r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	3310      	adds	r3, #16
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	18d3      	adds	r3, r2, r3
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	e00d      	b.n	800c9f2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9d6:	230e      	movs	r3, #14
 800c9d8:	18fb      	adds	r3, r7, r3
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	227f      	movs	r2, #127	@ 0x7f
 800c9de:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9e0:	0013      	movs	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	189b      	adds	r3, r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	3351      	adds	r3, #81	@ 0x51
 800c9ea:	33ff      	adds	r3, #255	@ 0xff
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	18d3      	adds	r3, r2, r3
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c9f4:	220e      	movs	r2, #14
 800c9f6:	18bb      	adds	r3, r7, r2
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <USBD_StdEPReq+0x2f8>
 800c9fe:	18bb      	adds	r3, r7, r2
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2b80      	cmp	r3, #128	@ 0x80
 800ca04:	d103      	bne.n	800ca0e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]
 800ca0c:	e010      	b.n	800ca30 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ca0e:	230e      	movs	r3, #14
 800ca10:	18fb      	adds	r3, r7, r3
 800ca12:	781a      	ldrb	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	0011      	movs	r1, r2
 800ca18:	0018      	movs	r0, r3
 800ca1a:	f001 f8e0 	bl	800dbde <USBD_LL_IsStallEP>
 800ca1e:	1e03      	subs	r3, r0, #0
 800ca20:	d003      	beq.n	800ca2a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2201      	movs	r2, #1
 800ca26:	601a      	str	r2, [r3, #0]
 800ca28:	e002      	b.n	800ca30 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca30:	68b9      	ldr	r1, [r7, #8]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2202      	movs	r2, #2
 800ca36:	0018      	movs	r0, r3
 800ca38:	f000 fc31 	bl	800d29e <USBD_CtlSendData>
              break;
 800ca3c:	e006      	b.n	800ca4c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	0011      	movs	r1, r2
 800ca44:	0018      	movs	r0, r3
 800ca46:	f000 fbac 	bl	800d1a2 <USBD_CtlError>
              break;
 800ca4a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800ca4c:	e006      	b.n	800ca5c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	0011      	movs	r1, r2
 800ca54:	0018      	movs	r0, r3
 800ca56:	f000 fba4 	bl	800d1a2 <USBD_CtlError>
          break;
 800ca5a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ca5c:	e006      	b.n	800ca6c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	0011      	movs	r1, r2
 800ca64:	0018      	movs	r0, r3
 800ca66:	f000 fb9c 	bl	800d1a2 <USBD_CtlError>
      break;
 800ca6a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800ca6c:	230f      	movs	r3, #15
 800ca6e:	18fb      	adds	r3, r7, r3
 800ca70:	781b      	ldrb	r3, [r3, #0]
}
 800ca72:	0018      	movs	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b004      	add	sp, #16
 800ca78:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca86:	2308      	movs	r3, #8
 800ca88:	18fb      	adds	r3, r7, r3
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ca92:	230b      	movs	r3, #11
 800ca94:	18fb      	adds	r3, r7, r3
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	885b      	ldrh	r3, [r3, #2]
 800ca9e:	0a1b      	lsrs	r3, r3, #8
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	2b07      	cmp	r3, #7
 800caa4:	d900      	bls.n	800caa8 <USBD_GetDescriptor+0x2c>
 800caa6:	e159      	b.n	800cd5c <USBD_GetDescriptor+0x2e0>
 800caa8:	009a      	lsls	r2, r3, #2
 800caaa:	4bcb      	ldr	r3, [pc, #812]	@ (800cdd8 <USBD_GetDescriptor+0x35c>)
 800caac:	18d3      	adds	r3, r2, r3
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	23ac      	movs	r3, #172	@ 0xac
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	58d3      	ldr	r3, [r2, r3]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	7c12      	ldrb	r2, [r2, #16]
 800cac0:	2108      	movs	r1, #8
 800cac2:	1879      	adds	r1, r7, r1
 800cac4:	0010      	movs	r0, r2
 800cac6:	4798      	blx	r3
 800cac8:	0003      	movs	r3, r0
 800caca:	60fb      	str	r3, [r7, #12]
      break;
 800cacc:	e153      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	7c1b      	ldrb	r3, [r3, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10f      	bne.n	800caf6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	23ad      	movs	r3, #173	@ 0xad
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	58d3      	ldr	r3, [r2, r3]
 800cade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae0:	2208      	movs	r2, #8
 800cae2:	18ba      	adds	r2, r7, r2
 800cae4:	0010      	movs	r0, r2
 800cae6:	4798      	blx	r3
 800cae8:	0003      	movs	r3, r0
 800caea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	2202      	movs	r2, #2
 800caf2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800caf4:	e13f      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	23ad      	movs	r3, #173	@ 0xad
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	58d3      	ldr	r3, [r2, r3]
 800cafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb00:	2208      	movs	r2, #8
 800cb02:	18ba      	adds	r2, r7, r2
 800cb04:	0010      	movs	r0, r2
 800cb06:	4798      	blx	r3
 800cb08:	0003      	movs	r3, r0
 800cb0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	2202      	movs	r2, #2
 800cb12:	701a      	strb	r2, [r3, #0]
      break;
 800cb14:	e12f      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	885b      	ldrh	r3, [r3, #2]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b05      	cmp	r3, #5
 800cb1e:	d900      	bls.n	800cb22 <USBD_GetDescriptor+0xa6>
 800cb20:	e0d0      	b.n	800ccc4 <USBD_GetDescriptor+0x248>
 800cb22:	009a      	lsls	r2, r3, #2
 800cb24:	4bad      	ldr	r3, [pc, #692]	@ (800cddc <USBD_GetDescriptor+0x360>)
 800cb26:	18d3      	adds	r3, r2, r3
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	23ac      	movs	r3, #172	@ 0xac
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	58d3      	ldr	r3, [r2, r3]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00d      	beq.n	800cb56 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	23ac      	movs	r3, #172	@ 0xac
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	58d3      	ldr	r3, [r2, r3]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	7c12      	ldrb	r2, [r2, #16]
 800cb48:	2108      	movs	r1, #8
 800cb4a:	1879      	adds	r1, r7, r1
 800cb4c:	0010      	movs	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	0003      	movs	r3, r0
 800cb52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb54:	e0c3      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	0011      	movs	r1, r2
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f000 fb20 	bl	800d1a2 <USBD_CtlError>
            err++;
 800cb62:	210b      	movs	r1, #11
 800cb64:	187b      	adds	r3, r7, r1
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	187b      	adds	r3, r7, r1
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	701a      	strb	r2, [r3, #0]
          break;
 800cb6e:	e0b6      	b.n	800ccde <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	23ac      	movs	r3, #172	@ 0xac
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	58d3      	ldr	r3, [r2, r3]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00d      	beq.n	800cb9a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	23ac      	movs	r3, #172	@ 0xac
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	58d3      	ldr	r3, [r2, r3]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	7c12      	ldrb	r2, [r2, #16]
 800cb8c:	2108      	movs	r1, #8
 800cb8e:	1879      	adds	r1, r7, r1
 800cb90:	0010      	movs	r0, r2
 800cb92:	4798      	blx	r3
 800cb94:	0003      	movs	r3, r0
 800cb96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb98:	e0a1      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	0011      	movs	r1, r2
 800cba0:	0018      	movs	r0, r3
 800cba2:	f000 fafe 	bl	800d1a2 <USBD_CtlError>
            err++;
 800cba6:	210b      	movs	r1, #11
 800cba8:	187b      	adds	r3, r7, r1
 800cbaa:	781a      	ldrb	r2, [r3, #0]
 800cbac:	187b      	adds	r3, r7, r1
 800cbae:	3201      	adds	r2, #1
 800cbb0:	701a      	strb	r2, [r3, #0]
          break;
 800cbb2:	e094      	b.n	800ccde <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	23ac      	movs	r3, #172	@ 0xac
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	58d3      	ldr	r3, [r2, r3]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00d      	beq.n	800cbde <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	23ac      	movs	r3, #172	@ 0xac
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	58d3      	ldr	r3, [r2, r3]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	7c12      	ldrb	r2, [r2, #16]
 800cbd0:	2108      	movs	r1, #8
 800cbd2:	1879      	adds	r1, r7, r1
 800cbd4:	0010      	movs	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	0003      	movs	r3, r0
 800cbda:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbdc:	e07f      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	0011      	movs	r1, r2
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f000 fadc 	bl	800d1a2 <USBD_CtlError>
            err++;
 800cbea:	210b      	movs	r1, #11
 800cbec:	187b      	adds	r3, r7, r1
 800cbee:	781a      	ldrb	r2, [r3, #0]
 800cbf0:	187b      	adds	r3, r7, r1
 800cbf2:	3201      	adds	r2, #1
 800cbf4:	701a      	strb	r2, [r3, #0]
          break;
 800cbf6:	e072      	b.n	800ccde <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	23ac      	movs	r3, #172	@ 0xac
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	58d3      	ldr	r3, [r2, r3]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	23ac      	movs	r3, #172	@ 0xac
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	58d3      	ldr	r3, [r2, r3]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	7c12      	ldrb	r2, [r2, #16]
 800cc14:	2108      	movs	r1, #8
 800cc16:	1879      	adds	r1, r7, r1
 800cc18:	0010      	movs	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	0003      	movs	r3, r0
 800cc1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc20:	e05d      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	0011      	movs	r1, r2
 800cc28:	0018      	movs	r0, r3
 800cc2a:	f000 faba 	bl	800d1a2 <USBD_CtlError>
            err++;
 800cc2e:	210b      	movs	r1, #11
 800cc30:	187b      	adds	r3, r7, r1
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	187b      	adds	r3, r7, r1
 800cc36:	3201      	adds	r2, #1
 800cc38:	701a      	strb	r2, [r3, #0]
          break;
 800cc3a:	e050      	b.n	800ccde <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	23ac      	movs	r3, #172	@ 0xac
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	58d3      	ldr	r3, [r2, r3]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00d      	beq.n	800cc66 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	23ac      	movs	r3, #172	@ 0xac
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	58d3      	ldr	r3, [r2, r3]
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	7c12      	ldrb	r2, [r2, #16]
 800cc58:	2108      	movs	r1, #8
 800cc5a:	1879      	adds	r1, r7, r1
 800cc5c:	0010      	movs	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	0003      	movs	r3, r0
 800cc62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc64:	e03b      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	0011      	movs	r1, r2
 800cc6c:	0018      	movs	r0, r3
 800cc6e:	f000 fa98 	bl	800d1a2 <USBD_CtlError>
            err++;
 800cc72:	210b      	movs	r1, #11
 800cc74:	187b      	adds	r3, r7, r1
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	187b      	adds	r3, r7, r1
 800cc7a:	3201      	adds	r2, #1
 800cc7c:	701a      	strb	r2, [r3, #0]
          break;
 800cc7e:	e02e      	b.n	800ccde <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	23ac      	movs	r3, #172	@ 0xac
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	58d3      	ldr	r3, [r2, r3]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00d      	beq.n	800ccaa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	23ac      	movs	r3, #172	@ 0xac
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	58d3      	ldr	r3, [r2, r3]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	7c12      	ldrb	r2, [r2, #16]
 800cc9c:	2108      	movs	r1, #8
 800cc9e:	1879      	adds	r1, r7, r1
 800cca0:	0010      	movs	r0, r2
 800cca2:	4798      	blx	r3
 800cca4:	0003      	movs	r3, r0
 800cca6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cca8:	e019      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	0011      	movs	r1, r2
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	f000 fa76 	bl	800d1a2 <USBD_CtlError>
            err++;
 800ccb6:	210b      	movs	r1, #11
 800ccb8:	187b      	adds	r3, r7, r1
 800ccba:	781a      	ldrb	r2, [r3, #0]
 800ccbc:	187b      	adds	r3, r7, r1
 800ccbe:	3201      	adds	r2, #1
 800ccc0:	701a      	strb	r2, [r3, #0]
          break;
 800ccc2:	e00c      	b.n	800ccde <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	0011      	movs	r1, r2
 800ccca:	0018      	movs	r0, r3
 800cccc:	f000 fa69 	bl	800d1a2 <USBD_CtlError>
          err++;
 800ccd0:	210b      	movs	r1, #11
 800ccd2:	187b      	adds	r3, r7, r1
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	187b      	adds	r3, r7, r1
 800ccd8:	3201      	adds	r2, #1
 800ccda:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800ccdc:	e04b      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>
 800ccde:	e04a      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7c1b      	ldrb	r3, [r3, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10b      	bne.n	800cd00 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	23ad      	movs	r3, #173	@ 0xad
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	58d3      	ldr	r3, [r2, r3]
 800ccf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	18ba      	adds	r2, r7, r2
 800ccf6:	0010      	movs	r0, r2
 800ccf8:	4798      	blx	r3
 800ccfa:	0003      	movs	r3, r0
 800ccfc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccfe:	e03a      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	0011      	movs	r1, r2
 800cd06:	0018      	movs	r0, r3
 800cd08:	f000 fa4b 	bl	800d1a2 <USBD_CtlError>
        err++;
 800cd0c:	210b      	movs	r1, #11
 800cd0e:	187b      	adds	r3, r7, r1
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	3201      	adds	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]
      break;
 800cd18:	e02d      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7c1b      	ldrb	r3, [r3, #16]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10f      	bne.n	800cd42 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	23ad      	movs	r3, #173	@ 0xad
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	58d3      	ldr	r3, [r2, r3]
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd2c:	2208      	movs	r2, #8
 800cd2e:	18ba      	adds	r2, r7, r2
 800cd30:	0010      	movs	r0, r2
 800cd32:	4798      	blx	r3
 800cd34:	0003      	movs	r3, r0
 800cd36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	2207      	movs	r2, #7
 800cd3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd40:	e019      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	0011      	movs	r1, r2
 800cd48:	0018      	movs	r0, r3
 800cd4a:	f000 fa2a 	bl	800d1a2 <USBD_CtlError>
        err++;
 800cd4e:	210b      	movs	r1, #11
 800cd50:	187b      	adds	r3, r7, r1
 800cd52:	781a      	ldrb	r2, [r3, #0]
 800cd54:	187b      	adds	r3, r7, r1
 800cd56:	3201      	adds	r2, #1
 800cd58:	701a      	strb	r2, [r3, #0]
      break;
 800cd5a:	e00c      	b.n	800cd76 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	0011      	movs	r1, r2
 800cd62:	0018      	movs	r0, r3
 800cd64:	f000 fa1d 	bl	800d1a2 <USBD_CtlError>
      err++;
 800cd68:	210b      	movs	r1, #11
 800cd6a:	187b      	adds	r3, r7, r1
 800cd6c:	781a      	ldrb	r2, [r3, #0]
 800cd6e:	187b      	adds	r3, r7, r1
 800cd70:	3201      	adds	r2, #1
 800cd72:	701a      	strb	r2, [r3, #0]
      break;
 800cd74:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800cd76:	230b      	movs	r3, #11
 800cd78:	18fb      	adds	r3, r7, r3
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d127      	bne.n	800cdd0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cd80:	2108      	movs	r1, #8
 800cd82:	187b      	adds	r3, r7, r1
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d019      	beq.n	800cdbe <USBD_GetDescriptor+0x342>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	88db      	ldrh	r3, [r3, #6]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d015      	beq.n	800cdbe <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	88da      	ldrh	r2, [r3, #6]
 800cd96:	187b      	adds	r3, r7, r1
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	1c18      	adds	r0, r3, #0
 800cd9c:	1c11      	adds	r1, r2, #0
 800cd9e:	b28a      	uxth	r2, r1
 800cda0:	b283      	uxth	r3, r0
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d900      	bls.n	800cda8 <USBD_GetDescriptor+0x32c>
 800cda6:	1c01      	adds	r1, r0, #0
 800cda8:	b28a      	uxth	r2, r1
 800cdaa:	2108      	movs	r1, #8
 800cdac:	187b      	adds	r3, r7, r1
 800cdae:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cdb0:	187b      	adds	r3, r7, r1
 800cdb2:	881a      	ldrh	r2, [r3, #0]
 800cdb4:	68f9      	ldr	r1, [r7, #12]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f000 fa70 	bl	800d29e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	88db      	ldrh	r3, [r3, #6]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d105      	bne.n	800cdd2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f000 fad2 	bl	800d372 <USBD_CtlSendStatus>
 800cdce:	e000      	b.n	800cdd2 <USBD_GetDescriptor+0x356>
    return;
 800cdd0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	b004      	add	sp, #16
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	08011e38 	.word	0x08011e38
 800cddc:	08011e58 	.word	0x08011e58

0800cde0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	889b      	ldrh	r3, [r3, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d13d      	bne.n	800ce6e <USBD_SetAddress+0x8e>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	88db      	ldrh	r3, [r3, #6]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d139      	bne.n	800ce6e <USBD_SetAddress+0x8e>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce00:	d835      	bhi.n	800ce6e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	885b      	ldrh	r3, [r3, #2]
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	230f      	movs	r3, #15
 800ce0a:	18fb      	adds	r3, r7, r3
 800ce0c:	217f      	movs	r1, #127	@ 0x7f
 800ce0e:	400a      	ands	r2, r1
 800ce10:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	23a7      	movs	r3, #167	@ 0xa7
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	5cd3      	ldrb	r3, [r2, r3]
 800ce1a:	2b03      	cmp	r3, #3
 800ce1c:	d106      	bne.n	800ce2c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	0011      	movs	r1, r2
 800ce24:	0018      	movs	r0, r3
 800ce26:	f000 f9bc 	bl	800d1a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce2a:	e027      	b.n	800ce7c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	240f      	movs	r4, #15
 800ce30:	193a      	adds	r2, r7, r4
 800ce32:	4914      	ldr	r1, [pc, #80]	@ (800ce84 <USBD_SetAddress+0xa4>)
 800ce34:	7812      	ldrb	r2, [r2, #0]
 800ce36:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce38:	193b      	adds	r3, r7, r4
 800ce3a:	781a      	ldrb	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	0011      	movs	r1, r2
 800ce40:	0018      	movs	r0, r3
 800ce42:	f000 fefc 	bl	800dc3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	0018      	movs	r0, r3
 800ce4a:	f000 fa92 	bl	800d372 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce4e:	193b      	adds	r3, r7, r4
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	23a7      	movs	r3, #167	@ 0xa7
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	2102      	movs	r1, #2
 800ce5e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce60:	e00c      	b.n	800ce7c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	23a7      	movs	r3, #167	@ 0xa7
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	2101      	movs	r1, #1
 800ce6a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce6c:	e006      	b.n	800ce7c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce6e:	683a      	ldr	r2, [r7, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	0011      	movs	r1, r2
 800ce74:	0018      	movs	r0, r3
 800ce76:	f000 f994 	bl	800d1a2 <USBD_CtlError>
  }
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46c0      	nop			@ (mov r8, r8)
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	b005      	add	sp, #20
 800ce82:	bd90      	pop	{r4, r7, pc}
 800ce84:	0000029e 	.word	0x0000029e

0800ce88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	885b      	ldrh	r3, [r3, #2]
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	4b4c      	ldr	r3, [pc, #304]	@ (800cfcc <USBD_SetConfig+0x144>)
 800ce9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce9c:	4b4b      	ldr	r3, [pc, #300]	@ (800cfcc <USBD_SetConfig+0x144>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d906      	bls.n	800ceb2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	0011      	movs	r1, r2
 800ceaa:	0018      	movs	r0, r3
 800ceac:	f000 f979 	bl	800d1a2 <USBD_CtlError>
 800ceb0:	e088      	b.n	800cfc4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	23a7      	movs	r3, #167	@ 0xa7
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	5cd3      	ldrb	r3, [r2, r3]
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d002      	beq.n	800cec4 <USBD_SetConfig+0x3c>
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d029      	beq.n	800cf16 <USBD_SetConfig+0x8e>
 800cec2:	e071      	b.n	800cfa8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800cec4:	4b41      	ldr	r3, [pc, #260]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01f      	beq.n	800cf0c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800cecc:	4b3f      	ldr	r3, [pc, #252]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	001a      	movs	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	23a7      	movs	r3, #167	@ 0xa7
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	2103      	movs	r1, #3
 800cede:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cee0:	4b3a      	ldr	r3, [pc, #232]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cee2:	781a      	ldrb	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	0011      	movs	r1, r2
 800cee8:	0018      	movs	r0, r3
 800ceea:	f7ff f8c6 	bl	800c07a <USBD_SetClassConfig>
 800ceee:	0003      	movs	r3, r0
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d106      	bne.n	800cf02 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	0011      	movs	r1, r2
 800cefa:	0018      	movs	r0, r3
 800cefc:	f000 f951 	bl	800d1a2 <USBD_CtlError>
            return;
 800cf00:	e060      	b.n	800cfc4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	0018      	movs	r0, r3
 800cf06:	f000 fa34 	bl	800d372 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cf0a:	e05b      	b.n	800cfc4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	0018      	movs	r0, r3
 800cf10:	f000 fa2f 	bl	800d372 <USBD_CtlSendStatus>
        break;
 800cf14:	e056      	b.n	800cfc4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800cf16:	4b2d      	ldr	r3, [pc, #180]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d115      	bne.n	800cf4a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	23a7      	movs	r3, #167	@ 0xa7
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	2102      	movs	r1, #2
 800cf26:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800cf28:	4b28      	ldr	r3, [pc, #160]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	001a      	movs	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cf32:	4b26      	ldr	r3, [pc, #152]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf34:	781a      	ldrb	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	0011      	movs	r1, r2
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f7ff f8c4 	bl	800c0c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	0018      	movs	r0, r3
 800cf44:	f000 fa15 	bl	800d372 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cf48:	e03c      	b.n	800cfc4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800cf4a:	4b20      	ldr	r3, [pc, #128]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	001a      	movs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d022      	beq.n	800cf9e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	0011      	movs	r1, r2
 800cf62:	0018      	movs	r0, r3
 800cf64:	f7ff f8b0 	bl	800c0c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cf68:	4b18      	ldr	r3, [pc, #96]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	001a      	movs	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cf72:	4b16      	ldr	r3, [pc, #88]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cf74:	781a      	ldrb	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	0011      	movs	r1, r2
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	f7ff f87d 	bl	800c07a <USBD_SetClassConfig>
 800cf80:	0003      	movs	r3, r0
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d106      	bne.n	800cf94 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	0011      	movs	r1, r2
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	f000 f908 	bl	800d1a2 <USBD_CtlError>
            return;
 800cf92:	e017      	b.n	800cfc4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	0018      	movs	r0, r3
 800cf98:	f000 f9eb 	bl	800d372 <USBD_CtlSendStatus>
        break;
 800cf9c:	e012      	b.n	800cfc4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f000 f9e6 	bl	800d372 <USBD_CtlSendStatus>
        break;
 800cfa6:	e00d      	b.n	800cfc4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	0011      	movs	r1, r2
 800cfae:	0018      	movs	r0, r3
 800cfb0:	f000 f8f7 	bl	800d1a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cfb4:	4b05      	ldr	r3, [pc, #20]	@ (800cfcc <USBD_SetConfig+0x144>)
 800cfb6:	781a      	ldrb	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	0011      	movs	r1, r2
 800cfbc:	0018      	movs	r0, r3
 800cfbe:	f7ff f883 	bl	800c0c8 <USBD_ClrClassConfig>
        break;
 800cfc2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	b002      	add	sp, #8
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	46c0      	nop			@ (mov r8, r8)
 800cfcc:	20000a6c 	.word	0x20000a6c

0800cfd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	88db      	ldrh	r3, [r3, #6]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d006      	beq.n	800cff0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	0011      	movs	r1, r2
 800cfe8:	0018      	movs	r0, r3
 800cfea:	f000 f8da 	bl	800d1a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cfee:	e026      	b.n	800d03e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	23a7      	movs	r3, #167	@ 0xa7
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	5cd3      	ldrb	r3, [r2, r3]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	dc02      	bgt.n	800d002 <USBD_GetConfig+0x32>
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dc03      	bgt.n	800d008 <USBD_GetConfig+0x38>
 800d000:	e016      	b.n	800d030 <USBD_GetConfig+0x60>
 800d002:	2b03      	cmp	r3, #3
 800d004:	d00c      	beq.n	800d020 <USBD_GetConfig+0x50>
 800d006:	e013      	b.n	800d030 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3308      	adds	r3, #8
 800d012:	0019      	movs	r1, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	0018      	movs	r0, r3
 800d01a:	f000 f940 	bl	800d29e <USBD_CtlSendData>
        break;
 800d01e:	e00e      	b.n	800d03e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	1d19      	adds	r1, r3, #4
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	0018      	movs	r0, r3
 800d02a:	f000 f938 	bl	800d29e <USBD_CtlSendData>
        break;
 800d02e:	e006      	b.n	800d03e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800d030:	683a      	ldr	r2, [r7, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	0011      	movs	r1, r2
 800d036:	0018      	movs	r0, r3
 800d038:	f000 f8b3 	bl	800d1a2 <USBD_CtlError>
        break;
 800d03c:	46c0      	nop			@ (mov r8, r8)
}
 800d03e:	46c0      	nop			@ (mov r8, r8)
 800d040:	46bd      	mov	sp, r7
 800d042:	b002      	add	sp, #8
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b082      	sub	sp, #8
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	23a7      	movs	r3, #167	@ 0xa7
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	5cd3      	ldrb	r3, [r2, r3]
 800d058:	3b01      	subs	r3, #1
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d822      	bhi.n	800d0a4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	88db      	ldrh	r3, [r3, #6]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d006      	beq.n	800d074 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	0011      	movs	r1, r2
 800d06c:	0018      	movs	r0, r3
 800d06e:	f000 f898 	bl	800d1a2 <USBD_CtlError>
        break;
 800d072:	e01e      	b.n	800d0b2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2201      	movs	r2, #1
 800d078:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	23a9      	movs	r3, #169	@ 0xa9
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	58d3      	ldr	r3, [r2, r3]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d005      	beq.n	800d092 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	2202      	movs	r2, #2
 800d08c:	431a      	orrs	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	330c      	adds	r3, #12
 800d096:	0019      	movs	r1, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2202      	movs	r2, #2
 800d09c:	0018      	movs	r0, r3
 800d09e:	f000 f8fe 	bl	800d29e <USBD_CtlSendData>
      break;
 800d0a2:	e006      	b.n	800d0b2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800d0a4:	683a      	ldr	r2, [r7, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	0011      	movs	r1, r2
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	f000 f879 	bl	800d1a2 <USBD_CtlError>
      break;
 800d0b0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b002      	add	sp, #8
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d108      	bne.n	800d0de <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	23a9      	movs	r3, #169	@ 0xa9
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	0018      	movs	r0, r3
 800d0da:	f000 f94a 	bl	800d372 <USBD_CtlSendStatus>
  }
}
 800d0de:	46c0      	nop			@ (mov r8, r8)
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	b002      	add	sp, #8
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	23a7      	movs	r3, #167	@ 0xa7
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	5cd3      	ldrb	r3, [r2, r3]
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d80d      	bhi.n	800d11a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	885b      	ldrh	r3, [r3, #2]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d110      	bne.n	800d128 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	23a9      	movs	r3, #169	@ 0xa9
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	2100      	movs	r1, #0
 800d10e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	0018      	movs	r0, r3
 800d114:	f000 f92d 	bl	800d372 <USBD_CtlSendStatus>
      }
      break;
 800d118:	e006      	b.n	800d128 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	0011      	movs	r1, r2
 800d120:	0018      	movs	r0, r3
 800d122:	f000 f83e 	bl	800d1a2 <USBD_CtlError>
      break;
 800d126:	e000      	b.n	800d12a <USBD_ClrFeature+0x44>
      break;
 800d128:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d12a:	46c0      	nop			@ (mov r8, r8)
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b002      	add	sp, #8
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	781a      	ldrb	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	785a      	ldrb	r2, [r3, #1]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	3302      	adds	r3, #2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	001a      	movs	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	3303      	adds	r3, #3
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	18d3      	adds	r3, r2, r3
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	3304      	adds	r3, #4
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	001a      	movs	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	3305      	adds	r3, #5
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	b29b      	uxth	r3, r3
 800d178:	18d3      	adds	r3, r2, r3
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	3306      	adds	r3, #6
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	001a      	movs	r2, r3
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	3307      	adds	r3, #7
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	021b      	lsls	r3, r3, #8
 800d190:	b29b      	uxth	r3, r3
 800d192:	18d3      	adds	r3, r2, r3
 800d194:	b29a      	uxth	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	80da      	strh	r2, [r3, #6]

}
 800d19a:	46c0      	nop			@ (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	b002      	add	sp, #8
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2180      	movs	r1, #128	@ 0x80
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f000 fcbe 	bl	800db32 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	f000 fcb9 	bl	800db32 <USBD_LL_StallEP>
}
 800d1c0:	46c0      	nop			@ (mov r8, r8)
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	b002      	add	sp, #8
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d1c8:	b590      	push	{r4, r7, lr}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d1d4:	2417      	movs	r4, #23
 800d1d6:	193b      	adds	r3, r7, r4
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d03c      	beq.n	800d25c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	f000 f83d 	bl	800d264 <USBD_GetLen>
 800d1ea:	0003      	movs	r3, r0
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	18db      	adds	r3, r3, r3
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d1f8:	193b      	adds	r3, r7, r4
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	193a      	adds	r2, r7, r4
 800d1fe:	1c59      	adds	r1, r3, #1
 800d200:	7011      	strb	r1, [r2, #0]
 800d202:	001a      	movs	r2, r3
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	189b      	adds	r3, r3, r2
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7812      	ldrb	r2, [r2, #0]
 800d20c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d20e:	193b      	adds	r3, r7, r4
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	193a      	adds	r2, r7, r4
 800d214:	1c59      	adds	r1, r3, #1
 800d216:	7011      	strb	r1, [r2, #0]
 800d218:	001a      	movs	r2, r3
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	189b      	adds	r3, r3, r2
 800d21e:	2203      	movs	r2, #3
 800d220:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d222:	e017      	b.n	800d254 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	60fa      	str	r2, [r7, #12]
 800d22a:	2417      	movs	r4, #23
 800d22c:	193a      	adds	r2, r7, r4
 800d22e:	7812      	ldrb	r2, [r2, #0]
 800d230:	1939      	adds	r1, r7, r4
 800d232:	1c50      	adds	r0, r2, #1
 800d234:	7008      	strb	r0, [r1, #0]
 800d236:	0011      	movs	r1, r2
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	1852      	adds	r2, r2, r1
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d240:	193b      	adds	r3, r7, r4
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	193a      	adds	r2, r7, r4
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	7011      	strb	r1, [r2, #0]
 800d24a:	001a      	movs	r2, r3
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e3      	bne.n	800d224 <USBD_GetString+0x5c>
    }
  }
}
 800d25c:	46c0      	nop			@ (mov r8, r8)
 800d25e:	46bd      	mov	sp, r7
 800d260:	b007      	add	sp, #28
 800d262:	bd90      	pop	{r4, r7, pc}

0800d264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d26c:	230f      	movs	r3, #15
 800d26e:	18fb      	adds	r3, r7, r3
 800d270:	2200      	movs	r2, #0
 800d272:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d274:	e008      	b.n	800d288 <USBD_GetLen+0x24>
  {
    len++;
 800d276:	210f      	movs	r1, #15
 800d278:	187b      	adds	r3, r7, r1
 800d27a:	781a      	ldrb	r2, [r3, #0]
 800d27c:	187b      	adds	r3, r7, r1
 800d27e:	3201      	adds	r2, #1
 800d280:	701a      	strb	r2, [r3, #0]
    buf++;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3301      	adds	r3, #1
 800d286:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f2      	bne.n	800d276 <USBD_GetLen+0x12>
  }

  return len;
 800d290:	230f      	movs	r3, #15
 800d292:	18fb      	adds	r3, r7, r3
 800d294:	781b      	ldrb	r3, [r3, #0]
}
 800d296:	0018      	movs	r0, r3
 800d298:	46bd      	mov	sp, r7
 800d29a:	b004      	add	sp, #16
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	1dbb      	adds	r3, r7, #6
 800d2aa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	23a5      	movs	r3, #165	@ 0xa5
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800d2b6:	1dbb      	adds	r3, r7, #6
 800d2b8:	881a      	ldrh	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d2be:	1dbb      	adds	r3, r7, #6
 800d2c0:	881a      	ldrh	r2, [r3, #0]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2c6:	1dbb      	adds	r3, r7, #6
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	f000 fce0 	bl	800dc94 <USBD_LL_Transmit>

  return USBD_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	b004      	add	sp, #16
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	1dbb      	adds	r3, r7, #6
 800d2ea:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2ec:	1dbb      	adds	r3, r7, #6
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	f000 fccd 	bl	800dc94 <USBD_LL_Transmit>

  return USBD_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	46bd      	mov	sp, r7
 800d300:	b004      	add	sp, #16
 800d302:	bd80      	pop	{r7, pc}

0800d304 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	1dbb      	adds	r3, r7, #6
 800d310:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	23a5      	movs	r3, #165	@ 0xa5
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	2103      	movs	r1, #3
 800d31a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800d31c:	1dbb      	adds	r3, r7, #6
 800d31e:	8819      	ldrh	r1, [r3, #0]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	23ae      	movs	r3, #174	@ 0xae
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800d328:	1dbb      	adds	r3, r7, #6
 800d32a:	8819      	ldrh	r1, [r3, #0]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	23b0      	movs	r3, #176	@ 0xb0
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d334:	1dbb      	adds	r3, r7, #6
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	2100      	movs	r1, #0
 800d33e:	f000 fce0 	bl	800dd02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	0018      	movs	r0, r3
 800d346:	46bd      	mov	sp, r7
 800d348:	b004      	add	sp, #16
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	1dbb      	adds	r3, r7, #6
 800d358:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d35a:	1dbb      	adds	r3, r7, #6
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	2100      	movs	r1, #0
 800d364:	f000 fccd 	bl	800dd02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	0018      	movs	r0, r3
 800d36c:	46bd      	mov	sp, r7
 800d36e:	b004      	add	sp, #16
 800d370:	bd80      	pop	{r7, pc}

0800d372 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	23a5      	movs	r3, #165	@ 0xa5
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	2104      	movs	r1, #4
 800d382:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	2300      	movs	r3, #0
 800d388:	2200      	movs	r2, #0
 800d38a:	2100      	movs	r1, #0
 800d38c:	f000 fc82 	bl	800dc94 <USBD_LL_Transmit>

  return USBD_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	0018      	movs	r0, r3
 800d394:	46bd      	mov	sp, r7
 800d396:	b002      	add	sp, #8
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	23a5      	movs	r3, #165	@ 0xa5
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	2105      	movs	r1, #5
 800d3aa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	f000 fca5 	bl	800dd02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	b002      	add	sp, #8
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3c8:	4914      	ldr	r1, [pc, #80]	@ (800d41c <MX_USB_DEVICE_Init+0x58>)
 800d3ca:	4b15      	ldr	r3, [pc, #84]	@ (800d420 <MX_USB_DEVICE_Init+0x5c>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f7fe fdec 	bl	800bfac <USBD_Init>
 800d3d4:	1e03      	subs	r3, r0, #0
 800d3d6:	d001      	beq.n	800d3dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d3d8:	f7f5 fb8e 	bl	8002af8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d3dc:	4a11      	ldr	r2, [pc, #68]	@ (800d424 <MX_USB_DEVICE_Init+0x60>)
 800d3de:	4b10      	ldr	r3, [pc, #64]	@ (800d420 <MX_USB_DEVICE_Init+0x5c>)
 800d3e0:	0011      	movs	r1, r2
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	f7fe fe13 	bl	800c00e <USBD_RegisterClass>
 800d3e8:	1e03      	subs	r3, r0, #0
 800d3ea:	d001      	beq.n	800d3f0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800d3ec:	f7f5 fb84 	bl	8002af8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d3f0:	4a0d      	ldr	r2, [pc, #52]	@ (800d428 <MX_USB_DEVICE_Init+0x64>)
 800d3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d420 <MX_USB_DEVICE_Init+0x5c>)
 800d3f4:	0011      	movs	r1, r2
 800d3f6:	0018      	movs	r0, r3
 800d3f8:	f7fe fd28 	bl	800be4c <USBD_CDC_RegisterInterface>
 800d3fc:	1e03      	subs	r3, r0, #0
 800d3fe:	d001      	beq.n	800d404 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800d400:	f7f5 fb7a 	bl	8002af8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d404:	4b06      	ldr	r3, [pc, #24]	@ (800d420 <MX_USB_DEVICE_Init+0x5c>)
 800d406:	0018      	movs	r0, r3
 800d408:	f7fe fe21 	bl	800c04e <USBD_Start>
 800d40c:	1e03      	subs	r3, r0, #0
 800d40e:	d001      	beq.n	800d414 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800d410:	f7f5 fb72 	bl	8002af8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	200001a0 	.word	0x200001a0
 800d420:	20000a70 	.word	0x20000a70
 800d424:	2000008c 	.word	0x2000008c
 800d428:	20000190 	.word	0x20000190

0800d42c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d430:	4907      	ldr	r1, [pc, #28]	@ (800d450 <CDC_Init_FS+0x24>)
 800d432:	4b08      	ldr	r3, [pc, #32]	@ (800d454 <CDC_Init_FS+0x28>)
 800d434:	2200      	movs	r2, #0
 800d436:	0018      	movs	r0, r3
 800d438:	f7fe fd23 	bl	800be82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d43c:	4a06      	ldr	r2, [pc, #24]	@ (800d458 <CDC_Init_FS+0x2c>)
 800d43e:	4b05      	ldr	r3, [pc, #20]	@ (800d454 <CDC_Init_FS+0x28>)
 800d440:	0011      	movs	r1, r2
 800d442:	0018      	movs	r0, r3
 800d444:	f7fe fd39 	bl	800beba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d448:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d44a:	0018      	movs	r0, r3
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20001134 	.word	0x20001134
 800d454:	20000a70 	.word	0x20000a70
 800d458:	20000d34 	.word	0x20000d34

0800d45c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d462:	0018      	movs	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6039      	str	r1, [r7, #0]
 800d470:	0011      	movs	r1, r2
 800d472:	1dfb      	adds	r3, r7, #7
 800d474:	1c02      	adds	r2, r0, #0
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	1d3b      	adds	r3, r7, #4
 800d47a:	1c0a      	adds	r2, r1, #0
 800d47c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d47e:	1dfb      	adds	r3, r7, #7
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b23      	cmp	r3, #35	@ 0x23
 800d484:	d804      	bhi.n	800d490 <CDC_Control_FS+0x28>
 800d486:	009a      	lsls	r2, r3, #2
 800d488:	4b04      	ldr	r3, [pc, #16]	@ (800d49c <CDC_Control_FS+0x34>)
 800d48a:	18d3      	adds	r3, r2, r3
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d490:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800d492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d494:	0018      	movs	r0, r3
 800d496:	46bd      	mov	sp, r7
 800d498:	b002      	add	sp, #8
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	08011e70 	.word	0x08011e70

0800d4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	4b06      	ldr	r3, [pc, #24]	@ (800d4c8 <CDC_Receive_FS+0x28>)
 800d4ae:	0011      	movs	r1, r2
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f7fe fd02 	bl	800beba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4b6:	4b04      	ldr	r3, [pc, #16]	@ (800d4c8 <CDC_Receive_FS+0x28>)
 800d4b8:	0018      	movs	r0, r3
 800d4ba:	f7fe fd49 	bl	800bf50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	b002      	add	sp, #8
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20000a70 	.word	0x20000a70

0800d4cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4cc:	b5b0      	push	{r4, r5, r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	000a      	movs	r2, r1
 800d4d6:	1cbb      	adds	r3, r7, #2
 800d4d8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800d4da:	230f      	movs	r3, #15
 800d4dc:	18fb      	adds	r3, r7, r3
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4e2:	4a11      	ldr	r2, [pc, #68]	@ (800d528 <CDC_Transmit_FS+0x5c>)
 800d4e4:	23ae      	movs	r3, #174	@ 0xae
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	58d3      	ldr	r3, [r2, r3]
 800d4ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	2385      	movs	r3, #133	@ 0x85
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	58d3      	ldr	r3, [r2, r3]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e010      	b.n	800d51e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4fc:	1cbb      	adds	r3, r7, #2
 800d4fe:	881a      	ldrh	r2, [r3, #0]
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	4b09      	ldr	r3, [pc, #36]	@ (800d528 <CDC_Transmit_FS+0x5c>)
 800d504:	0018      	movs	r0, r3
 800d506:	f7fe fcbc 	bl	800be82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d50a:	250f      	movs	r5, #15
 800d50c:	197c      	adds	r4, r7, r5
 800d50e:	4b06      	ldr	r3, [pc, #24]	@ (800d528 <CDC_Transmit_FS+0x5c>)
 800d510:	0018      	movs	r0, r3
 800d512:	f7fe fce6 	bl	800bee2 <USBD_CDC_TransmitPacket>
 800d516:	0003      	movs	r3, r0
 800d518:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800d51a:	197b      	adds	r3, r7, r5
 800d51c:	781b      	ldrb	r3, [r3, #0]
}
 800d51e:	0018      	movs	r0, r3
 800d520:	46bd      	mov	sp, r7
 800d522:	b004      	add	sp, #16
 800d524:	bdb0      	pop	{r4, r5, r7, pc}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	20000a70 	.word	0x20000a70

0800d52c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	0002      	movs	r2, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	1dfb      	adds	r3, r7, #7
 800d538:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2212      	movs	r2, #18
 800d53e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d540:	4b02      	ldr	r3, [pc, #8]	@ (800d54c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d542:	0018      	movs	r0, r3
 800d544:	46bd      	mov	sp, r7
 800d546:	b002      	add	sp, #8
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	46c0      	nop			@ (mov r8, r8)
 800d54c:	200001bc 	.word	0x200001bc

0800d550 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	0002      	movs	r2, r0
 800d558:	6039      	str	r1, [r7, #0]
 800d55a:	1dfb      	adds	r3, r7, #7
 800d55c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2204      	movs	r2, #4
 800d562:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d564:	4b02      	ldr	r3, [pc, #8]	@ (800d570 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d566:	0018      	movs	r0, r3
 800d568:	46bd      	mov	sp, r7
 800d56a:	b002      	add	sp, #8
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	46c0      	nop			@ (mov r8, r8)
 800d570:	200001d0 	.word	0x200001d0

0800d574 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	0002      	movs	r2, r0
 800d57c:	6039      	str	r1, [r7, #0]
 800d57e:	1dfb      	adds	r3, r7, #7
 800d580:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d582:	1dfb      	adds	r3, r7, #7
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4908      	ldr	r1, [pc, #32]	@ (800d5b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d58e:	4b09      	ldr	r3, [pc, #36]	@ (800d5b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d590:	0018      	movs	r0, r3
 800d592:	f7ff fe19 	bl	800d1c8 <USBD_GetString>
 800d596:	e005      	b.n	800d5a4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	4905      	ldr	r1, [pc, #20]	@ (800d5b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d59e:	0018      	movs	r0, r3
 800d5a0:	f7ff fe12 	bl	800d1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5a4:	4b02      	ldr	r3, [pc, #8]	@ (800d5b0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d5a6:	0018      	movs	r0, r3
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	b002      	add	sp, #8
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	46c0      	nop			@ (mov r8, r8)
 800d5b0:	20001534 	.word	0x20001534
 800d5b4:	08011d50 	.word	0x08011d50

0800d5b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	0002      	movs	r2, r0
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	1dfb      	adds	r3, r7, #7
 800d5c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	4904      	ldr	r1, [pc, #16]	@ (800d5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5ca:	4b05      	ldr	r3, [pc, #20]	@ (800d5e0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	f7ff fdfb 	bl	800d1c8 <USBD_GetString>
  return USBD_StrDesc;
 800d5d2:	4b02      	ldr	r3, [pc, #8]	@ (800d5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	b002      	add	sp, #8
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	20001534 	.word	0x20001534
 800d5e0:	08011d68 	.word	0x08011d68

0800d5e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	0002      	movs	r2, r0
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	1dfb      	adds	r3, r7, #7
 800d5f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	221a      	movs	r2, #26
 800d5f6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5f8:	f000 f84c 	bl	800d694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5fc:	4b02      	ldr	r3, [pc, #8]	@ (800d608 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d5fe:	0018      	movs	r0, r3
 800d600:	46bd      	mov	sp, r7
 800d602:	b002      	add	sp, #8
 800d604:	bd80      	pop	{r7, pc}
 800d606:	46c0      	nop			@ (mov r8, r8)
 800d608:	200001d4 	.word	0x200001d4

0800d60c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	0002      	movs	r2, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	1dfb      	adds	r3, r7, #7
 800d618:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d61a:	1dfb      	adds	r3, r7, #7
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d106      	bne.n	800d630 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	4908      	ldr	r1, [pc, #32]	@ (800d648 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d626:	4b09      	ldr	r3, [pc, #36]	@ (800d64c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d628:	0018      	movs	r0, r3
 800d62a:	f7ff fdcd 	bl	800d1c8 <USBD_GetString>
 800d62e:	e005      	b.n	800d63c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	4905      	ldr	r1, [pc, #20]	@ (800d648 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d636:	0018      	movs	r0, r3
 800d638:	f7ff fdc6 	bl	800d1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d63c:	4b02      	ldr	r3, [pc, #8]	@ (800d648 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d63e:	0018      	movs	r0, r3
 800d640:	46bd      	mov	sp, r7
 800d642:	b002      	add	sp, #8
 800d644:	bd80      	pop	{r7, pc}
 800d646:	46c0      	nop			@ (mov r8, r8)
 800d648:	20001534 	.word	0x20001534
 800d64c:	08011d7c 	.word	0x08011d7c

0800d650 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	0002      	movs	r2, r0
 800d658:	6039      	str	r1, [r7, #0]
 800d65a:	1dfb      	adds	r3, r7, #7
 800d65c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d65e:	1dfb      	adds	r3, r7, #7
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d106      	bne.n	800d674 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	4908      	ldr	r1, [pc, #32]	@ (800d68c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d66a:	4b09      	ldr	r3, [pc, #36]	@ (800d690 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d66c:	0018      	movs	r0, r3
 800d66e:	f7ff fdab 	bl	800d1c8 <USBD_GetString>
 800d672:	e005      	b.n	800d680 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	4905      	ldr	r1, [pc, #20]	@ (800d68c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d678:	4b05      	ldr	r3, [pc, #20]	@ (800d690 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d67a:	0018      	movs	r0, r3
 800d67c:	f7ff fda4 	bl	800d1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d680:	4b02      	ldr	r3, [pc, #8]	@ (800d68c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d682:	0018      	movs	r0, r3
 800d684:	46bd      	mov	sp, r7
 800d686:	b002      	add	sp, #8
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	46c0      	nop			@ (mov r8, r8)
 800d68c:	20001534 	.word	0x20001534
 800d690:	08011d88 	.word	0x08011d88

0800d694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d69a:	4b10      	ldr	r3, [pc, #64]	@ (800d6dc <Get_SerialNum+0x48>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <Get_SerialNum+0x4c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e4 <Get_SerialNum+0x50>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	18d3      	adds	r3, r2, r3
 800d6b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00b      	beq.n	800d6d2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6ba:	490b      	ldr	r1, [pc, #44]	@ (800d6e8 <Get_SerialNum+0x54>)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2208      	movs	r2, #8
 800d6c0:	0018      	movs	r0, r3
 800d6c2:	f000 f815 	bl	800d6f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6c6:	4909      	ldr	r1, [pc, #36]	@ (800d6ec <Get_SerialNum+0x58>)
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	0018      	movs	r0, r3
 800d6ce:	f000 f80f 	bl	800d6f0 <IntToUnicode>
  }
}
 800d6d2:	46c0      	nop			@ (mov r8, r8)
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	b004      	add	sp, #16
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	46c0      	nop			@ (mov r8, r8)
 800d6dc:	1ffff7ac 	.word	0x1ffff7ac
 800d6e0:	1ffff7b0 	.word	0x1ffff7b0
 800d6e4:	1ffff7b4 	.word	0x1ffff7b4
 800d6e8:	200001d6 	.word	0x200001d6
 800d6ec:	200001e6 	.word	0x200001e6

0800d6f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	1dfb      	adds	r3, r7, #7
 800d6fc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d6fe:	2117      	movs	r1, #23
 800d700:	187b      	adds	r3, r7, r1
 800d702:	2200      	movs	r2, #0
 800d704:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d706:	187b      	adds	r3, r7, r1
 800d708:	2200      	movs	r2, #0
 800d70a:	701a      	strb	r2, [r3, #0]
 800d70c:	e02f      	b.n	800d76e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	0f1b      	lsrs	r3, r3, #28
 800d712:	2b09      	cmp	r3, #9
 800d714:	d80d      	bhi.n	800d732 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	0f1b      	lsrs	r3, r3, #28
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	2317      	movs	r3, #23
 800d71e:	18fb      	adds	r3, r7, r3
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	0019      	movs	r1, r3
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	185b      	adds	r3, r3, r1
 800d72a:	3230      	adds	r2, #48	@ 0x30
 800d72c:	b2d2      	uxtb	r2, r2
 800d72e:	701a      	strb	r2, [r3, #0]
 800d730:	e00c      	b.n	800d74c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	0f1b      	lsrs	r3, r3, #28
 800d736:	b2da      	uxtb	r2, r3
 800d738:	2317      	movs	r3, #23
 800d73a:	18fb      	adds	r3, r7, r3
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	0019      	movs	r1, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	185b      	adds	r3, r3, r1
 800d746:	3237      	adds	r2, #55	@ 0x37
 800d748:	b2d2      	uxtb	r2, r2
 800d74a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	011b      	lsls	r3, r3, #4
 800d750:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d752:	2117      	movs	r1, #23
 800d754:	187b      	adds	r3, r7, r1
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	3301      	adds	r3, #1
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	18d3      	adds	r3, r2, r3
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d764:	187b      	adds	r3, r7, r1
 800d766:	781a      	ldrb	r2, [r3, #0]
 800d768:	187b      	adds	r3, r7, r1
 800d76a:	3201      	adds	r2, #1
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	2317      	movs	r3, #23
 800d770:	18fa      	adds	r2, r7, r3
 800d772:	1dfb      	adds	r3, r7, #7
 800d774:	7812      	ldrb	r2, [r2, #0]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d3c8      	bcc.n	800d70e <IntToUnicode+0x1e>
  }
}
 800d77c:	46c0      	nop			@ (mov r8, r8)
 800d77e:	46c0      	nop			@ (mov r8, r8)
 800d780:	46bd      	mov	sp, r7
 800d782:	b006      	add	sp, #24
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a0e      	ldr	r2, [pc, #56]	@ (800d7d0 <HAL_PCD_MspInit+0x48>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d115      	bne.n	800d7c6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d79a:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d4 <HAL_PCD_MspInit+0x4c>)
 800d79c:	69da      	ldr	r2, [r3, #28]
 800d79e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7d4 <HAL_PCD_MspInit+0x4c>)
 800d7a0:	2180      	movs	r1, #128	@ 0x80
 800d7a2:	0409      	lsls	r1, r1, #16
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	61da      	str	r2, [r3, #28]
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d4 <HAL_PCD_MspInit+0x4c>)
 800d7aa:	69da      	ldr	r2, [r3, #28]
 800d7ac:	2380      	movs	r3, #128	@ 0x80
 800d7ae:	041b      	lsls	r3, r3, #16
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
 800d7b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	201f      	movs	r0, #31
 800d7bc:	f7f6 faa4 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d7c0:	201f      	movs	r0, #31
 800d7c2:	f7f6 fab6 	bl	8003d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d7c6:	46c0      	nop			@ (mov r8, r8)
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	b004      	add	sp, #16
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	46c0      	nop			@ (mov r8, r8)
 800d7d0:	40005c00 	.word	0x40005c00
 800d7d4:	40021000 	.word	0x40021000

0800d7d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	23b6      	movs	r3, #182	@ 0xb6
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	58d2      	ldr	r2, [r2, r3]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	21a6      	movs	r1, #166	@ 0xa6
 800d7ec:	0089      	lsls	r1, r1, #2
 800d7ee:	468c      	mov	ip, r1
 800d7f0:	4463      	add	r3, ip
 800d7f2:	0019      	movs	r1, r3
 800d7f4:	0010      	movs	r0, r2
 800d7f6:	f7fe fc7d 	bl	800c0f4 <USBD_LL_SetupStage>
}
 800d7fa:	46c0      	nop			@ (mov r8, r8)
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	b002      	add	sp, #8
 800d800:	bd80      	pop	{r7, pc}

0800d802 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d802:	b590      	push	{r4, r7, lr}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	000a      	movs	r2, r1
 800d80c:	1cfb      	adds	r3, r7, #3
 800d80e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	23b6      	movs	r3, #182	@ 0xb6
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	58d4      	ldr	r4, [r2, r3]
 800d818:	1cfb      	adds	r3, r7, #3
 800d81a:	781a      	ldrb	r2, [r3, #0]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	23b2      	movs	r3, #178	@ 0xb2
 800d820:	0059      	lsls	r1, r3, #1
 800d822:	0013      	movs	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	189b      	adds	r3, r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	18c3      	adds	r3, r0, r3
 800d82c:	185b      	adds	r3, r3, r1
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	1cfb      	adds	r3, r7, #3
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	0019      	movs	r1, r3
 800d836:	0020      	movs	r0, r4
 800d838:	f7fe fcba 	bl	800c1b0 <USBD_LL_DataOutStage>
}
 800d83c:	46c0      	nop			@ (mov r8, r8)
 800d83e:	46bd      	mov	sp, r7
 800d840:	b003      	add	sp, #12
 800d842:	bd90      	pop	{r4, r7, pc}

0800d844 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	000a      	movs	r2, r1
 800d84e:	1cfb      	adds	r3, r7, #3
 800d850:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	23b6      	movs	r3, #182	@ 0xb6
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	58d0      	ldr	r0, [r2, r3]
 800d85a:	1cfb      	adds	r3, r7, #3
 800d85c:	781a      	ldrb	r2, [r3, #0]
 800d85e:	6879      	ldr	r1, [r7, #4]
 800d860:	0013      	movs	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	189b      	adds	r3, r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	18cb      	adds	r3, r1, r3
 800d86a:	3324      	adds	r3, #36	@ 0x24
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	1cfb      	adds	r3, r7, #3
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	0019      	movs	r1, r3
 800d874:	f7fe fd1e 	bl	800c2b4 <USBD_LL_DataInStage>
}
 800d878:	46c0      	nop			@ (mov r8, r8)
 800d87a:	46bd      	mov	sp, r7
 800d87c:	b002      	add	sp, #8
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	23b6      	movs	r3, #182	@ 0xb6
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	58d3      	ldr	r3, [r2, r3]
 800d890:	0018      	movs	r0, r3
 800d892:	f7fe fe55 	bl	800c540 <USBD_LL_SOF>
}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	46bd      	mov	sp, r7
 800d89a:	b002      	add	sp, #8
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8a6:	230f      	movs	r3, #15
 800d8a8:	18fb      	adds	r3, r7, r3
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	795b      	ldrb	r3, [r3, #5]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d001      	beq.n	800d8ba <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d8b6:	f7f5 f91f 	bl	8002af8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	23b6      	movs	r3, #182	@ 0xb6
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	58d2      	ldr	r2, [r2, r3]
 800d8c2:	230f      	movs	r3, #15
 800d8c4:	18fb      	adds	r3, r7, r3
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	0019      	movs	r1, r3
 800d8ca:	0010      	movs	r0, r2
 800d8cc:	f7fe fdf7 	bl	800c4be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	23b6      	movs	r3, #182	@ 0xb6
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	58d3      	ldr	r3, [r2, r3]
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f7fe fda8 	bl	800c42e <USBD_LL_Reset>
}
 800d8de:	46c0      	nop			@ (mov r8, r8)
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	b004      	add	sp, #16
 800d8e4:	bd80      	pop	{r7, pc}
	...

0800d8e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	23b6      	movs	r3, #182	@ 0xb6
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	58d3      	ldr	r3, [r2, r3]
 800d8f8:	0018      	movs	r0, r3
 800d8fa:	f7fe fdf1 	bl	800c4e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7a5b      	ldrb	r3, [r3, #9]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d005      	beq.n	800d912 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d906:	4b05      	ldr	r3, [pc, #20]	@ (800d91c <HAL_PCD_SuspendCallback+0x34>)
 800d908:	691a      	ldr	r2, [r3, #16]
 800d90a:	4b04      	ldr	r3, [pc, #16]	@ (800d91c <HAL_PCD_SuspendCallback+0x34>)
 800d90c:	2106      	movs	r1, #6
 800d90e:	430a      	orrs	r2, r1
 800d910:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d912:	46c0      	nop			@ (mov r8, r8)
 800d914:	46bd      	mov	sp, r7
 800d916:	b002      	add	sp, #8
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	46c0      	nop			@ (mov r8, r8)
 800d91c:	e000ed00 	.word	0xe000ed00

0800d920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	7a5b      	ldrb	r3, [r3, #9]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d007      	beq.n	800d940 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d930:	4b09      	ldr	r3, [pc, #36]	@ (800d958 <HAL_PCD_ResumeCallback+0x38>)
 800d932:	691a      	ldr	r2, [r3, #16]
 800d934:	4b08      	ldr	r3, [pc, #32]	@ (800d958 <HAL_PCD_ResumeCallback+0x38>)
 800d936:	2106      	movs	r1, #6
 800d938:	438a      	bics	r2, r1
 800d93a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d93c:	f000 fa42 	bl	800ddc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	23b6      	movs	r3, #182	@ 0xb6
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	58d3      	ldr	r3, [r2, r3]
 800d948:	0018      	movs	r0, r3
 800d94a:	f7fe fde1 	bl	800c510 <USBD_LL_Resume>
}
 800d94e:	46c0      	nop			@ (mov r8, r8)
 800d950:	46bd      	mov	sp, r7
 800d952:	b002      	add	sp, #8
 800d954:	bd80      	pop	{r7, pc}
 800d956:	46c0      	nop			@ (mov r8, r8)
 800d958:	e000ed00 	.word	0xe000ed00

0800d95c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d964:	4a2d      	ldr	r2, [pc, #180]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d966:	23b6      	movs	r3, #182	@ 0xb6
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	23b0      	movs	r3, #176	@ 0xb0
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4929      	ldr	r1, [pc, #164]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d976:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d978:	4b28      	ldr	r3, [pc, #160]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d97a:	4a29      	ldr	r2, [pc, #164]	@ (800da20 <USBD_LL_Init+0xc4>)
 800d97c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d97e:	4b27      	ldr	r3, [pc, #156]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d980:	2208      	movs	r2, #8
 800d982:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d984:	4b25      	ldr	r3, [pc, #148]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d986:	2202      	movs	r2, #2
 800d988:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d98a:	4b24      	ldr	r3, [pc, #144]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d98c:	2202      	movs	r2, #2
 800d98e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d990:	4b22      	ldr	r3, [pc, #136]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d992:	2200      	movs	r2, #0
 800d994:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d996:	4b21      	ldr	r3, [pc, #132]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d998:	2200      	movs	r2, #0
 800d99a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d99c:	4b1f      	ldr	r3, [pc, #124]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d9a2:	4b1e      	ldr	r3, [pc, #120]	@ (800da1c <USBD_LL_Init+0xc0>)
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f7f6 fdd5 	bl	8004554 <HAL_PCD_Init>
 800d9aa:	1e03      	subs	r3, r0, #0
 800d9ac:	d001      	beq.n	800d9b2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d9ae:	f7f5 f8a3 	bl	8002af8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	23b0      	movs	r3, #176	@ 0xb0
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	58d0      	ldr	r0, [r2, r3]
 800d9ba:	2318      	movs	r3, #24
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2100      	movs	r1, #0
 800d9c0:	f7f8 fb86 	bl	80060d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	23b0      	movs	r3, #176	@ 0xb0
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	58d0      	ldr	r0, [r2, r3]
 800d9cc:	2358      	movs	r3, #88	@ 0x58
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	2180      	movs	r1, #128	@ 0x80
 800d9d2:	f7f8 fb7d 	bl	80060d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	23b0      	movs	r3, #176	@ 0xb0
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	58d0      	ldr	r0, [r2, r3]
 800d9de:	23c0      	movs	r3, #192	@ 0xc0
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2181      	movs	r1, #129	@ 0x81
 800d9e4:	f7f8 fb74 	bl	80060d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	23b0      	movs	r3, #176	@ 0xb0
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	58d0      	ldr	r0, [r2, r3]
 800d9f0:	2388      	movs	r3, #136	@ 0x88
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	f7f8 fb6a 	bl	80060d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	23b0      	movs	r3, #176	@ 0xb0
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	58d0      	ldr	r0, [r2, r3]
 800da04:	2380      	movs	r3, #128	@ 0x80
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	2200      	movs	r2, #0
 800da0a:	2182      	movs	r1, #130	@ 0x82
 800da0c:	f7f8 fb60 	bl	80060d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	0018      	movs	r0, r3
 800da14:	46bd      	mov	sp, r7
 800da16:	b002      	add	sp, #8
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	20001734 	.word	0x20001734
 800da20:	40005c00 	.word	0x40005c00

0800da24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da2c:	210f      	movs	r1, #15
 800da2e:	187b      	adds	r3, r7, r1
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da34:	260e      	movs	r6, #14
 800da36:	19bb      	adds	r3, r7, r6
 800da38:	2200      	movs	r2, #0
 800da3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	23b0      	movs	r3, #176	@ 0xb0
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	58d3      	ldr	r3, [r2, r3]
 800da44:	000d      	movs	r5, r1
 800da46:	187c      	adds	r4, r7, r1
 800da48:	0018      	movs	r0, r3
 800da4a:	f7f6 fe77 	bl	800473c <HAL_PCD_Start>
 800da4e:	0003      	movs	r3, r0
 800da50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da52:	19bc      	adds	r4, r7, r6
 800da54:	197b      	adds	r3, r7, r5
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	0018      	movs	r0, r3
 800da5a:	f000 f9ba 	bl	800ddd2 <USBD_Get_USB_Status>
 800da5e:	0003      	movs	r3, r0
 800da60:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800da62:	19bb      	adds	r3, r7, r6
 800da64:	781b      	ldrb	r3, [r3, #0]
}
 800da66:	0018      	movs	r0, r3
 800da68:	46bd      	mov	sp, r7
 800da6a:	b005      	add	sp, #20
 800da6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	000c      	movs	r4, r1
 800da78:	0010      	movs	r0, r2
 800da7a:	0019      	movs	r1, r3
 800da7c:	1cfb      	adds	r3, r7, #3
 800da7e:	1c22      	adds	r2, r4, #0
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	1cbb      	adds	r3, r7, #2
 800da84:	1c02      	adds	r2, r0, #0
 800da86:	701a      	strb	r2, [r3, #0]
 800da88:	003b      	movs	r3, r7
 800da8a:	1c0a      	adds	r2, r1, #0
 800da8c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da8e:	260f      	movs	r6, #15
 800da90:	19bb      	adds	r3, r7, r6
 800da92:	2200      	movs	r2, #0
 800da94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da96:	250e      	movs	r5, #14
 800da98:	197b      	adds	r3, r7, r5
 800da9a:	2200      	movs	r2, #0
 800da9c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	23b0      	movs	r3, #176	@ 0xb0
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	58d0      	ldr	r0, [r2, r3]
 800daa6:	19bc      	adds	r4, r7, r6
 800daa8:	1cbb      	adds	r3, r7, #2
 800daaa:	781d      	ldrb	r5, [r3, #0]
 800daac:	003b      	movs	r3, r7
 800daae:	881a      	ldrh	r2, [r3, #0]
 800dab0:	1cfb      	adds	r3, r7, #3
 800dab2:	7819      	ldrb	r1, [r3, #0]
 800dab4:	002b      	movs	r3, r5
 800dab6:	f7f6 ffd5 	bl	8004a64 <HAL_PCD_EP_Open>
 800daba:	0003      	movs	r3, r0
 800dabc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dabe:	250e      	movs	r5, #14
 800dac0:	197c      	adds	r4, r7, r5
 800dac2:	19bb      	adds	r3, r7, r6
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	0018      	movs	r0, r3
 800dac8:	f000 f983 	bl	800ddd2 <USBD_Get_USB_Status>
 800dacc:	0003      	movs	r3, r0
 800dace:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dad0:	197b      	adds	r3, r7, r5
 800dad2:	781b      	ldrb	r3, [r3, #0]
}
 800dad4:	0018      	movs	r0, r3
 800dad6:	46bd      	mov	sp, r7
 800dad8:	b005      	add	sp, #20
 800dada:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dadc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	000a      	movs	r2, r1
 800dae6:	1cfb      	adds	r3, r7, #3
 800dae8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daea:	210f      	movs	r1, #15
 800daec:	187b      	adds	r3, r7, r1
 800daee:	2200      	movs	r2, #0
 800daf0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf2:	260e      	movs	r6, #14
 800daf4:	19bb      	adds	r3, r7, r6
 800daf6:	2200      	movs	r2, #0
 800daf8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	23b0      	movs	r3, #176	@ 0xb0
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	58d2      	ldr	r2, [r2, r3]
 800db02:	000d      	movs	r5, r1
 800db04:	187c      	adds	r4, r7, r1
 800db06:	1cfb      	adds	r3, r7, #3
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	0019      	movs	r1, r3
 800db0c:	0010      	movs	r0, r2
 800db0e:	f7f7 f818 	bl	8004b42 <HAL_PCD_EP_Close>
 800db12:	0003      	movs	r3, r0
 800db14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db16:	19bc      	adds	r4, r7, r6
 800db18:	197b      	adds	r3, r7, r5
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	0018      	movs	r0, r3
 800db1e:	f000 f958 	bl	800ddd2 <USBD_Get_USB_Status>
 800db22:	0003      	movs	r3, r0
 800db24:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800db26:	19bb      	adds	r3, r7, r6
 800db28:	781b      	ldrb	r3, [r3, #0]
}
 800db2a:	0018      	movs	r0, r3
 800db2c:	46bd      	mov	sp, r7
 800db2e:	b005      	add	sp, #20
 800db30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db34:	b085      	sub	sp, #20
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	000a      	movs	r2, r1
 800db3c:	1cfb      	adds	r3, r7, #3
 800db3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db40:	210f      	movs	r1, #15
 800db42:	187b      	adds	r3, r7, r1
 800db44:	2200      	movs	r2, #0
 800db46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	260e      	movs	r6, #14
 800db4a:	19bb      	adds	r3, r7, r6
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	23b0      	movs	r3, #176	@ 0xb0
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	58d2      	ldr	r2, [r2, r3]
 800db58:	000d      	movs	r5, r1
 800db5a:	187c      	adds	r4, r7, r1
 800db5c:	1cfb      	adds	r3, r7, #3
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	0019      	movs	r1, r3
 800db62:	0010      	movs	r0, r2
 800db64:	f7f7 f8ca 	bl	8004cfc <HAL_PCD_EP_SetStall>
 800db68:	0003      	movs	r3, r0
 800db6a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db6c:	19bc      	adds	r4, r7, r6
 800db6e:	197b      	adds	r3, r7, r5
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	0018      	movs	r0, r3
 800db74:	f000 f92d 	bl	800ddd2 <USBD_Get_USB_Status>
 800db78:	0003      	movs	r3, r0
 800db7a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800db7c:	19bb      	adds	r3, r7, r6
 800db7e:	781b      	ldrb	r3, [r3, #0]
}
 800db80:	0018      	movs	r0, r3
 800db82:	46bd      	mov	sp, r7
 800db84:	b005      	add	sp, #20
 800db86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db88 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	000a      	movs	r2, r1
 800db92:	1cfb      	adds	r3, r7, #3
 800db94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db96:	210f      	movs	r1, #15
 800db98:	187b      	adds	r3, r7, r1
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db9e:	260e      	movs	r6, #14
 800dba0:	19bb      	adds	r3, r7, r6
 800dba2:	2200      	movs	r2, #0
 800dba4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	23b0      	movs	r3, #176	@ 0xb0
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	58d2      	ldr	r2, [r2, r3]
 800dbae:	000d      	movs	r5, r1
 800dbb0:	187c      	adds	r4, r7, r1
 800dbb2:	1cfb      	adds	r3, r7, #3
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	0019      	movs	r1, r3
 800dbb8:	0010      	movs	r0, r2
 800dbba:	f7f7 f8fb 	bl	8004db4 <HAL_PCD_EP_ClrStall>
 800dbbe:	0003      	movs	r3, r0
 800dbc0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc2:	19bc      	adds	r4, r7, r6
 800dbc4:	197b      	adds	r3, r7, r5
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	0018      	movs	r0, r3
 800dbca:	f000 f902 	bl	800ddd2 <USBD_Get_USB_Status>
 800dbce:	0003      	movs	r3, r0
 800dbd0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dbd2:	19bb      	adds	r3, r7, r6
 800dbd4:	781b      	ldrb	r3, [r3, #0]
}
 800dbd6:	0018      	movs	r0, r3
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	b005      	add	sp, #20
 800dbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbde <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	000a      	movs	r2, r1
 800dbe8:	1cfb      	adds	r3, r7, #3
 800dbea:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	23b0      	movs	r3, #176	@ 0xb0
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	58d3      	ldr	r3, [r2, r3]
 800dbf4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbf6:	1cfb      	adds	r3, r7, #3
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	b25b      	sxtb	r3, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	da0c      	bge.n	800dc1a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc00:	1cfb      	adds	r3, r7, #3
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	227f      	movs	r2, #127	@ 0x7f
 800dc06:	401a      	ands	r2, r3
 800dc08:	68f9      	ldr	r1, [r7, #12]
 800dc0a:	0013      	movs	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	189b      	adds	r3, r3, r2
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	18cb      	adds	r3, r1, r3
 800dc14:	3312      	adds	r3, #18
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	e00d      	b.n	800dc36 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc1a:	1cfb      	adds	r3, r7, #3
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	227f      	movs	r2, #127	@ 0x7f
 800dc20:	401a      	ands	r2, r3
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	23a9      	movs	r3, #169	@ 0xa9
 800dc26:	0059      	lsls	r1, r3, #1
 800dc28:	0013      	movs	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	189b      	adds	r3, r3, r2
 800dc2e:	00db      	lsls	r3, r3, #3
 800dc30:	18c3      	adds	r3, r0, r3
 800dc32:	185b      	adds	r3, r3, r1
 800dc34:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc36:	0018      	movs	r0, r3
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	b004      	add	sp, #16
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc40:	b085      	sub	sp, #20
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	000a      	movs	r2, r1
 800dc48:	1cfb      	adds	r3, r7, #3
 800dc4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc4c:	210f      	movs	r1, #15
 800dc4e:	187b      	adds	r3, r7, r1
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc54:	260e      	movs	r6, #14
 800dc56:	19bb      	adds	r3, r7, r6
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	23b0      	movs	r3, #176	@ 0xb0
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	58d2      	ldr	r2, [r2, r3]
 800dc64:	000d      	movs	r5, r1
 800dc66:	187c      	adds	r4, r7, r1
 800dc68:	1cfb      	adds	r3, r7, #3
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	0019      	movs	r1, r3
 800dc6e:	0010      	movs	r0, r2
 800dc70:	f7f6 fece 	bl	8004a10 <HAL_PCD_SetAddress>
 800dc74:	0003      	movs	r3, r0
 800dc76:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc78:	19bc      	adds	r4, r7, r6
 800dc7a:	197b      	adds	r3, r7, r5
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	0018      	movs	r0, r3
 800dc80:	f000 f8a7 	bl	800ddd2 <USBD_Get_USB_Status>
 800dc84:	0003      	movs	r3, r0
 800dc86:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dc88:	19bb      	adds	r3, r7, r6
 800dc8a:	781b      	ldrb	r3, [r3, #0]
}
 800dc8c:	0018      	movs	r0, r3
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	b005      	add	sp, #20
 800dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	0008      	movs	r0, r1
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	0019      	movs	r1, r3
 800dca2:	230b      	movs	r3, #11
 800dca4:	18fb      	adds	r3, r7, r3
 800dca6:	1c02      	adds	r2, r0, #0
 800dca8:	701a      	strb	r2, [r3, #0]
 800dcaa:	2408      	movs	r4, #8
 800dcac:	193b      	adds	r3, r7, r4
 800dcae:	1c0a      	adds	r2, r1, #0
 800dcb0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb2:	2117      	movs	r1, #23
 800dcb4:	187b      	adds	r3, r7, r1
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcba:	2516      	movs	r5, #22
 800dcbc:	197b      	adds	r3, r7, r5
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	23b0      	movs	r3, #176	@ 0xb0
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	58d0      	ldr	r0, [r2, r3]
 800dcca:	193b      	adds	r3, r7, r4
 800dccc:	881d      	ldrh	r5, [r3, #0]
 800dcce:	000e      	movs	r6, r1
 800dcd0:	187c      	adds	r4, r7, r1
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	230b      	movs	r3, #11
 800dcd6:	18fb      	adds	r3, r7, r3
 800dcd8:	7819      	ldrb	r1, [r3, #0]
 800dcda:	002b      	movs	r3, r5
 800dcdc:	f7f6 ffd2 	bl	8004c84 <HAL_PCD_EP_Transmit>
 800dce0:	0003      	movs	r3, r0
 800dce2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce4:	2516      	movs	r5, #22
 800dce6:	197c      	adds	r4, r7, r5
 800dce8:	19bb      	adds	r3, r7, r6
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	0018      	movs	r0, r3
 800dcee:	f000 f870 	bl	800ddd2 <USBD_Get_USB_Status>
 800dcf2:	0003      	movs	r3, r0
 800dcf4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dcf6:	197b      	adds	r3, r7, r5
 800dcf8:	781b      	ldrb	r3, [r3, #0]
}
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	b007      	add	sp, #28
 800dd00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dd02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd04:	b087      	sub	sp, #28
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	60f8      	str	r0, [r7, #12]
 800dd0a:	0008      	movs	r0, r1
 800dd0c:	607a      	str	r2, [r7, #4]
 800dd0e:	0019      	movs	r1, r3
 800dd10:	230b      	movs	r3, #11
 800dd12:	18fb      	adds	r3, r7, r3
 800dd14:	1c02      	adds	r2, r0, #0
 800dd16:	701a      	strb	r2, [r3, #0]
 800dd18:	2408      	movs	r4, #8
 800dd1a:	193b      	adds	r3, r7, r4
 800dd1c:	1c0a      	adds	r2, r1, #0
 800dd1e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd20:	2117      	movs	r1, #23
 800dd22:	187b      	adds	r3, r7, r1
 800dd24:	2200      	movs	r2, #0
 800dd26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd28:	2516      	movs	r5, #22
 800dd2a:	197b      	adds	r3, r7, r5
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	23b0      	movs	r3, #176	@ 0xb0
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	58d0      	ldr	r0, [r2, r3]
 800dd38:	193b      	adds	r3, r7, r4
 800dd3a:	881d      	ldrh	r5, [r3, #0]
 800dd3c:	000e      	movs	r6, r1
 800dd3e:	187c      	adds	r4, r7, r1
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	230b      	movs	r3, #11
 800dd44:	18fb      	adds	r3, r7, r3
 800dd46:	7819      	ldrb	r1, [r3, #0]
 800dd48:	002b      	movs	r3, r5
 800dd4a:	f7f6 ff4b 	bl	8004be4 <HAL_PCD_EP_Receive>
 800dd4e:	0003      	movs	r3, r0
 800dd50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd52:	2516      	movs	r5, #22
 800dd54:	197c      	adds	r4, r7, r5
 800dd56:	19bb      	adds	r3, r7, r6
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	0018      	movs	r0, r3
 800dd5c:	f000 f839 	bl	800ddd2 <USBD_Get_USB_Status>
 800dd60:	0003      	movs	r3, r0
 800dd62:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dd64:	197b      	adds	r3, r7, r5
 800dd66:	781b      	ldrb	r3, [r3, #0]
}
 800dd68:	0018      	movs	r0, r3
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	b007      	add	sp, #28
 800dd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	000a      	movs	r2, r1
 800dd7a:	1cfb      	adds	r3, r7, #3
 800dd7c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	23b0      	movs	r3, #176	@ 0xb0
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	58d2      	ldr	r2, [r2, r3]
 800dd86:	1cfb      	adds	r3, r7, #3
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	0019      	movs	r1, r3
 800dd8c:	0010      	movs	r0, r2
 800dd8e:	f7f6 ff60 	bl	8004c52 <HAL_PCD_EP_GetRxCount>
 800dd92:	0003      	movs	r3, r0
}
 800dd94:	0018      	movs	r0, r3
 800dd96:	46bd      	mov	sp, r7
 800dd98:	b002      	add	sp, #8
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dda4:	4b02      	ldr	r3, [pc, #8]	@ (800ddb0 <USBD_static_malloc+0x14>)
}
 800dda6:	0018      	movs	r0, r3
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	b002      	add	sp, #8
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	46c0      	nop			@ (mov r8, r8)
 800ddb0:	20001a10 	.word	0x20001a10

0800ddb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]

}
 800ddbc:	46c0      	nop			@ (mov r8, r8)
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	b002      	add	sp, #8
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ddc8:	f7f4 fb72 	bl	80024b0 <SystemClock_Config>
}
 800ddcc:	46c0      	nop			@ (mov r8, r8)
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	0002      	movs	r2, r0
 800ddda:	1dfb      	adds	r3, r7, #7
 800dddc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddde:	230f      	movs	r3, #15
 800dde0:	18fb      	adds	r3, r7, r3
 800dde2:	2200      	movs	r2, #0
 800dde4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800dde6:	1dfb      	adds	r3, r7, #7
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d017      	beq.n	800de1e <USBD_Get_USB_Status+0x4c>
 800ddee:	dc1b      	bgt.n	800de28 <USBD_Get_USB_Status+0x56>
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d00f      	beq.n	800de14 <USBD_Get_USB_Status+0x42>
 800ddf4:	dc18      	bgt.n	800de28 <USBD_Get_USB_Status+0x56>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <USBD_Get_USB_Status+0x2e>
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d005      	beq.n	800de0a <USBD_Get_USB_Status+0x38>
 800ddfe:	e013      	b.n	800de28 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de00:	230f      	movs	r3, #15
 800de02:	18fb      	adds	r3, r7, r3
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
    break;
 800de08:	e013      	b.n	800de32 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de0a:	230f      	movs	r3, #15
 800de0c:	18fb      	adds	r3, r7, r3
 800de0e:	2202      	movs	r2, #2
 800de10:	701a      	strb	r2, [r3, #0]
    break;
 800de12:	e00e      	b.n	800de32 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de14:	230f      	movs	r3, #15
 800de16:	18fb      	adds	r3, r7, r3
 800de18:	2201      	movs	r2, #1
 800de1a:	701a      	strb	r2, [r3, #0]
    break;
 800de1c:	e009      	b.n	800de32 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de1e:	230f      	movs	r3, #15
 800de20:	18fb      	adds	r3, r7, r3
 800de22:	2202      	movs	r2, #2
 800de24:	701a      	strb	r2, [r3, #0]
    break;
 800de26:	e004      	b.n	800de32 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800de28:	230f      	movs	r3, #15
 800de2a:	18fb      	adds	r3, r7, r3
 800de2c:	2202      	movs	r2, #2
 800de2e:	701a      	strb	r2, [r3, #0]
    break;
 800de30:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800de32:	230f      	movs	r3, #15
 800de34:	18fb      	adds	r3, r7, r3
 800de36:	781b      	ldrb	r3, [r3, #0]
}
 800de38:	0018      	movs	r0, r3
 800de3a:	46bd      	mov	sp, r7
 800de3c:	b004      	add	sp, #16
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800de40:	b5b0      	push	{r4, r5, r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800de48:	2316      	movs	r3, #22
 800de4a:	18fb      	adds	r3, r7, r3
 800de4c:	2200      	movs	r2, #0
 800de4e:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800de54:	4ba0      	ldr	r3, [pc, #640]	@ (800e0d8 <dwt_initialise+0x298>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2200      	movs	r2, #0
 800de5a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800de5c:	4b9e      	ldr	r3, [pc, #632]	@ (800e0d8 <dwt_initialise+0x298>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2200      	movs	r2, #0
 800de62:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800de64:	4b9c      	ldr	r3, [pc, #624]	@ (800e0d8 <dwt_initialise+0x298>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2200      	movs	r2, #0
 800de6a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800de6c:	4b9a      	ldr	r3, [pc, #616]	@ (800e0d8 <dwt_initialise+0x298>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2200      	movs	r2, #0
 800de72:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800de74:	4b98      	ldr	r3, [pc, #608]	@ (800e0d8 <dwt_initialise+0x298>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2200      	movs	r2, #0
 800de7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800de7c:	4b96      	ldr	r3, [pc, #600]	@ (800e0d8 <dwt_initialise+0x298>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2200      	movs	r2, #0
 800de82:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800de84:	4b94      	ldr	r3, [pc, #592]	@ (800e0d8 <dwt_initialise+0x298>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2200      	movs	r2, #0
 800de8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800de8c:	f000 f92c 	bl	800e0e8 <dwt_readdevid>
 800de90:	0003      	movs	r3, r0
 800de92:	4a92      	ldr	r2, [pc, #584]	@ (800e0dc <dwt_initialise+0x29c>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d002      	beq.n	800de9e <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800de98:	2301      	movs	r3, #1
 800de9a:	425b      	negs	r3, r3
 800de9c:	e118      	b.n	800e0d0 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2202      	movs	r2, #2
 800dea2:	4013      	ands	r3, r2
 800dea4:	d101      	bne.n	800deaa <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800dea6:	f000 ffd1 	bl	800ee4c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2202      	movs	r2, #2
 800deae:	4013      	ands	r3, r2
 800deb0:	d003      	beq.n	800deba <dwt_initialise+0x7a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	22f8      	movs	r2, #248	@ 0xf8
 800deb6:	4013      	ands	r3, r2
 800deb8:	d102      	bne.n	800dec0 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800deba:	2000      	movs	r0, #0
 800debc:	f000 fdb2 	bl	800ea24 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800dec0:	2204      	movs	r2, #4
 800dec2:	2100      	movs	r1, #0
 800dec4:	2024      	movs	r0, #36	@ 0x24
 800dec6:	f000 fc95 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2202      	movs	r2, #2
 800dece:	4013      	ands	r3, r2
 800ded0:	d118      	bne.n	800df04 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800ded2:	2004      	movs	r0, #4
 800ded4:	f000 fce8 	bl	800e8a8 <_dwt_otpread>
 800ded8:	0003      	movs	r3, r0
 800deda:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	22ff      	movs	r2, #255	@ 0xff
 800dee0:	4013      	ands	r3, r2
 800dee2:	d021      	beq.n	800df28 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800dee4:	2202      	movs	r2, #2
 800dee6:	2112      	movs	r1, #18
 800dee8:	202d      	movs	r0, #45	@ 0x2d
 800deea:	f000 fc83 	bl	800e7f4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800deee:	4b7a      	ldr	r3, [pc, #488]	@ (800e0d8 <dwt_initialise+0x298>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	8ada      	ldrh	r2, [r3, #22]
 800def4:	4b78      	ldr	r3, [pc, #480]	@ (800e0d8 <dwt_initialise+0x298>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2180      	movs	r1, #128	@ 0x80
 800defa:	0149      	lsls	r1, r1, #5
 800defc:	430a      	orrs	r2, r1
 800defe:	b292      	uxth	r2, r2
 800df00:	82da      	strh	r2, [r3, #22]
 800df02:	e011      	b.n	800df28 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800df04:	2130      	movs	r1, #48	@ 0x30
 800df06:	2028      	movs	r0, #40	@ 0x28
 800df08:	f000 fc16 	bl	800e738 <dwt_read32bitoffsetreg>
 800df0c:	0003      	movs	r3, r0
 800df0e:	4a74      	ldr	r2, [pc, #464]	@ (800e0e0 <dwt_initialise+0x2a0>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d009      	beq.n	800df28 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800df14:	4b70      	ldr	r3, [pc, #448]	@ (800e0d8 <dwt_initialise+0x298>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	8ada      	ldrh	r2, [r3, #22]
 800df1a:	4b6f      	ldr	r3, [pc, #444]	@ (800e0d8 <dwt_initialise+0x298>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2180      	movs	r1, #128	@ 0x80
 800df20:	0149      	lsls	r1, r1, #5
 800df22:	430a      	orrs	r2, r1
 800df24:	b292      	uxth	r2, r2
 800df26:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	4013      	ands	r3, r2
 800df2e:	d007      	beq.n	800df40 <dwt_initialise+0x100>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	4013      	ands	r3, r2
 800df36:	d013      	beq.n	800df60 <dwt_initialise+0x120>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2208      	movs	r2, #8
 800df3c:	4013      	ands	r3, r2
 800df3e:	d00f      	beq.n	800df60 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800df40:	201e      	movs	r0, #30
 800df42:	f000 fcb1 	bl	800e8a8 <_dwt_otpread>
 800df46:	0002      	movs	r2, r0
 800df48:	2116      	movs	r1, #22
 800df4a:	187b      	adds	r3, r7, r1
 800df4c:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800df4e:	187b      	adds	r3, r7, r1
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	0a1b      	lsrs	r3, r3, #8
 800df54:	b29a      	uxth	r2, r3
 800df56:	4b60      	ldr	r3, [pc, #384]	@ (800e0d8 <dwt_initialise+0x298>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	72da      	strb	r2, [r3, #11]
 800df5e:	e003      	b.n	800df68 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800df60:	4b5d      	ldr	r3, [pc, #372]	@ (800e0d8 <dwt_initialise+0x298>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2200      	movs	r2, #0
 800df66:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2202      	movs	r2, #2
 800df6c:	4013      	ands	r3, r2
 800df6e:	d10f      	bne.n	800df90 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800df70:	2116      	movs	r1, #22
 800df72:	187b      	adds	r3, r7, r1
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	221f      	movs	r2, #31
 800df78:	4013      	ands	r3, r2
 800df7a:	d102      	bne.n	800df82 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800df7c:	187b      	adds	r3, r7, r1
 800df7e:	2210      	movs	r2, #16
 800df80:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800df82:	2316      	movs	r3, #22
 800df84:	18fb      	adds	r3, r7, r3
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	0018      	movs	r0, r3
 800df8c:	f000 ff84 	bl	800ee98 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2210      	movs	r2, #16
 800df94:	4013      	ands	r3, r2
 800df96:	d007      	beq.n	800dfa8 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800df98:	4b4f      	ldr	r3, [pc, #316]	@ (800e0d8 <dwt_initialise+0x298>)
 800df9a:	681c      	ldr	r4, [r3, #0]
 800df9c:	2006      	movs	r0, #6
 800df9e:	f000 fc83 	bl	800e8a8 <_dwt_otpread>
 800dfa2:	0003      	movs	r3, r0
 800dfa4:	6023      	str	r3, [r4, #0]
 800dfa6:	e003      	b.n	800dfb0 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800dfa8:	4b4b      	ldr	r3, [pc, #300]	@ (800e0d8 <dwt_initialise+0x298>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	d007      	beq.n	800dfc8 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800dfb8:	4b47      	ldr	r3, [pc, #284]	@ (800e0d8 <dwt_initialise+0x298>)
 800dfba:	681c      	ldr	r4, [r3, #0]
 800dfbc:	2007      	movs	r0, #7
 800dfbe:	f000 fc73 	bl	800e8a8 <_dwt_otpread>
 800dfc2:	0003      	movs	r3, r0
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	e003      	b.n	800dfd0 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800dfc8:	4b43      	ldr	r3, [pc, #268]	@ (800e0d8 <dwt_initialise+0x298>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2240      	movs	r2, #64	@ 0x40
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	d008      	beq.n	800dfea <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800dfd8:	2008      	movs	r0, #8
 800dfda:	f000 fc65 	bl	800e8a8 <_dwt_otpread>
 800dfde:	0002      	movs	r2, r0
 800dfe0:	4b3d      	ldr	r3, [pc, #244]	@ (800e0d8 <dwt_initialise+0x298>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	b2d2      	uxtb	r2, r2
 800dfe6:	721a      	strb	r2, [r3, #8]
 800dfe8:	e003      	b.n	800dff2 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800dfea:	4b3b      	ldr	r3, [pc, #236]	@ (800e0d8 <dwt_initialise+0x298>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2200      	movs	r2, #0
 800dff0:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2280      	movs	r2, #128	@ 0x80
 800dff6:	4013      	ands	r3, r2
 800dff8:	d008      	beq.n	800e00c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800dffa:	2009      	movs	r0, #9
 800dffc:	f000 fc54 	bl	800e8a8 <_dwt_otpread>
 800e000:	0002      	movs	r2, r0
 800e002:	4b35      	ldr	r3, [pc, #212]	@ (800e0d8 <dwt_initialise+0x298>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	725a      	strb	r2, [r3, #9]
 800e00a:	e003      	b.n	800e014 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800e00c:	4b32      	ldr	r3, [pc, #200]	@ (800e0d8 <dwt_initialise+0x298>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2200      	movs	r2, #0
 800e012:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2202      	movs	r2, #2
 800e018:	4013      	ands	r3, r2
 800e01a:	d127      	bne.n	800e06c <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	4013      	ands	r3, r2
 800e022:	d00c      	beq.n	800e03e <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800e024:	f000 fc98 	bl	800e958 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800e028:	4b2b      	ldr	r3, [pc, #172]	@ (800e0d8 <dwt_initialise+0x298>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	8ada      	ldrh	r2, [r3, #22]
 800e02e:	4b2a      	ldr	r3, [pc, #168]	@ (800e0d8 <dwt_initialise+0x298>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2180      	movs	r1, #128	@ 0x80
 800e034:	0109      	lsls	r1, r1, #4
 800e036:	430a      	orrs	r2, r1
 800e038:	b292      	uxth	r2, r2
 800e03a:	82da      	strh	r2, [r3, #22]
 800e03c:	e024      	b.n	800e088 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800e03e:	250e      	movs	r5, #14
 800e040:	197c      	adds	r4, r7, r5
 800e042:	2105      	movs	r1, #5
 800e044:	2036      	movs	r0, #54	@ 0x36
 800e046:	f000 fb9e 	bl	800e786 <dwt_read16bitoffsetreg>
 800e04a:	0003      	movs	r3, r0
 800e04c:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800e04e:	0028      	movs	r0, r5
 800e050:	183b      	adds	r3, r7, r0
 800e052:	183a      	adds	r2, r7, r0
 800e054:	8812      	ldrh	r2, [r2, #0]
 800e056:	4923      	ldr	r1, [pc, #140]	@ (800e0e4 <dwt_initialise+0x2a4>)
 800e058:	400a      	ands	r2, r1
 800e05a:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800e05c:	183b      	adds	r3, r7, r0
 800e05e:	881b      	ldrh	r3, [r3, #0]
 800e060:	001a      	movs	r2, r3
 800e062:	2105      	movs	r1, #5
 800e064:	2036      	movs	r0, #54	@ 0x36
 800e066:	f000 fbd8 	bl	800e81a <dwt_write16bitoffsetreg>
 800e06a:	e00d      	b.n	800e088 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2204      	movs	r2, #4
 800e070:	4013      	ands	r3, r2
 800e072:	d109      	bne.n	800e088 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800e074:	4b18      	ldr	r3, [pc, #96]	@ (800e0d8 <dwt_initialise+0x298>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	8ada      	ldrh	r2, [r3, #22]
 800e07a:	4b17      	ldr	r3, [pc, #92]	@ (800e0d8 <dwt_initialise+0x298>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2180      	movs	r1, #128	@ 0x80
 800e080:	0109      	lsls	r1, r1, #4
 800e082:	430a      	orrs	r2, r1
 800e084:	b292      	uxth	r2, r2
 800e086:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800e088:	2001      	movs	r0, #1
 800e08a:	f000 fccb 	bl	800ea24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800e08e:	2200      	movs	r2, #0
 800e090:	210a      	movs	r1, #10
 800e092:	202c      	movs	r0, #44	@ 0x2c
 800e094:	f000 fbae 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800e098:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <dwt_initialise+0x298>)
 800e09a:	681c      	ldr	r4, [r3, #0]
 800e09c:	2100      	movs	r1, #0
 800e09e:	2004      	movs	r0, #4
 800e0a0:	f000 fb4a 	bl	800e738 <dwt_read32bitoffsetreg>
 800e0a4:	0003      	movs	r3, r0
 800e0a6:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800e0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d8 <dwt_initialise+0x298>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	0c1b      	lsrs	r3, r3, #16
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <dwt_initialise+0x298>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2103      	movs	r1, #3
 800e0b8:	400a      	ands	r2, r1
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800e0be:	4b06      	ldr	r3, [pc, #24]	@ (800e0d8 <dwt_initialise+0x298>)
 800e0c0:	681c      	ldr	r4, [r3, #0]
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	2008      	movs	r0, #8
 800e0c6:	f000 fb37 	bl	800e738 <dwt_read32bitoffsetreg>
 800e0ca:	0003      	movs	r3, r0
 800e0cc:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800e0ce:	2300      	movs	r3, #0

} // end dwt_initialise()
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	b006      	add	sp, #24
 800e0d6:	bdb0      	pop	{r4, r5, r7, pc}
 800e0d8:	200001f0 	.word	0x200001f0
 800e0dc:	deca0130 	.word	0xdeca0130
 800e0e0:	88888888 	.word	0x88888888
 800e0e4:	fffffdff 	.word	0xfffffdff

0800e0e8 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	f000 fb22 	bl	800e738 <dwt_read32bitoffsetreg>
 800e0f4:	0003      	movs	r3, r0
}
 800e0f6:	0018      	movs	r0, r3
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	001a      	movs	r2, r3
 800e10a:	210b      	movs	r1, #11
 800e10c:	202a      	movs	r0, #42	@ 0x2a
 800e10e:	f000 fb71 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	001a      	movs	r2, r3
 800e118:	2100      	movs	r1, #0
 800e11a:	201e      	movs	r0, #30
 800e11c:	f000 fb9d 	bl	800e85a <dwt_write32bitoffsetreg>

}
 800e120:	46c0      	nop			@ (mov r8, r8)
 800e122:	46bd      	mov	sp, r7
 800e124:	b002      	add	sp, #8
 800e126:	bd80      	pop	{r7, pc}

0800e128 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800e128:	b5b0      	push	{r4, r5, r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800e130:	2317      	movs	r3, #23
 800e132:	18fb      	adds	r3, r7, r3
 800e134:	2200      	movs	r2, #0
 800e136:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800e138:	2316      	movs	r3, #22
 800e13a:	18fb      	adds	r3, r7, r3
 800e13c:	2200      	movs	r2, #0
 800e13e:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800e140:	2013      	movs	r0, #19
 800e142:	183b      	adds	r3, r7, r0
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	7812      	ldrb	r2, [r2, #0]
 800e148:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	795b      	ldrb	r3, [r3, #5]
 800e14e:	0019      	movs	r1, r3
 800e150:	2314      	movs	r3, #20
 800e152:	18fb      	adds	r3, r7, r3
 800e154:	4ab6      	ldr	r2, [pc, #728]	@ (800e430 <dwt_configure+0x308>)
 800e156:	0049      	lsls	r1, r1, #1
 800e158:	5a8a      	ldrh	r2, [r1, r2]
 800e15a:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	785a      	ldrb	r2, [r3, #1]
 800e160:	2312      	movs	r3, #18
 800e162:	18fb      	adds	r3, r7, r3
 800e164:	3a01      	subs	r2, #1
 800e166:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800e168:	183b      	adds	r3, r7, r0
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b04      	cmp	r3, #4
 800e16e:	d003      	beq.n	800e178 <dwt_configure+0x50>
 800e170:	183b      	adds	r3, r7, r0
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b07      	cmp	r3, #7
 800e176:	d101      	bne.n	800e17c <dwt_configure+0x54>
 800e178:	2201      	movs	r2, #1
 800e17a:	e000      	b.n	800e17e <dwt_configure+0x56>
 800e17c:	2200      	movs	r2, #0
 800e17e:	2311      	movs	r3, #17
 800e180:	18fb      	adds	r3, r7, r3
 800e182:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	79db      	ldrb	r3, [r3, #7]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10f      	bne.n	800e1ac <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800e18c:	4ba9      	ldr	r3, [pc, #676]	@ (800e434 <dwt_configure+0x30c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	691a      	ldr	r2, [r3, #16]
 800e192:	4ba8      	ldr	r3, [pc, #672]	@ (800e434 <dwt_configure+0x30c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2180      	movs	r1, #128	@ 0x80
 800e198:	03c9      	lsls	r1, r1, #15
 800e19a:	430a      	orrs	r2, r1
 800e19c:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800e19e:	2214      	movs	r2, #20
 800e1a0:	18bb      	adds	r3, r7, r2
 800e1a2:	18ba      	adds	r2, r7, r2
 800e1a4:	8812      	ldrh	r2, [r2, #0]
 800e1a6:	08d2      	lsrs	r2, r2, #3
 800e1a8:	801a      	strh	r2, [r3, #0]
 800e1aa:	e007      	b.n	800e1bc <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800e1ac:	4ba1      	ldr	r3, [pc, #644]	@ (800e434 <dwt_configure+0x30c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	691a      	ldr	r2, [r3, #16]
 800e1b2:	4ba0      	ldr	r3, [pc, #640]	@ (800e434 <dwt_configure+0x30c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	49a0      	ldr	r1, [pc, #640]	@ (800e438 <dwt_configure+0x310>)
 800e1b8:	400a      	ands	r2, r1
 800e1ba:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800e1bc:	4b9d      	ldr	r3, [pc, #628]	@ (800e434 <dwt_configure+0x30c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	7a12      	ldrb	r2, [r2, #8]
 800e1c4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800e1c6:	4b9b      	ldr	r3, [pc, #620]	@ (800e434 <dwt_configure+0x30c>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691a      	ldr	r2, [r3, #16]
 800e1cc:	4b99      	ldr	r3, [pc, #612]	@ (800e434 <dwt_configure+0x30c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	499a      	ldr	r1, [pc, #616]	@ (800e43c <dwt_configure+0x314>)
 800e1d2:	400a      	ands	r2, r1
 800e1d4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800e1d6:	4b97      	ldr	r3, [pc, #604]	@ (800e434 <dwt_configure+0x30c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	6919      	ldr	r1, [r3, #16]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7a1b      	ldrb	r3, [r3, #8]
 800e1e0:	041a      	lsls	r2, r3, #16
 800e1e2:	23c0      	movs	r3, #192	@ 0xc0
 800e1e4:	029b      	lsls	r3, r3, #10
 800e1e6:	401a      	ands	r2, r3
 800e1e8:	4b92      	ldr	r3, [pc, #584]	@ (800e434 <dwt_configure+0x30c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800e1f0:	4b90      	ldr	r3, [pc, #576]	@ (800e434 <dwt_configure+0x30c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	001a      	movs	r2, r3
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	2004      	movs	r0, #4
 800e1fc:	f000 fb2d 	bl	800e85a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800e200:	2314      	movs	r3, #20
 800e202:	18fb      	adds	r3, r7, r3
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	498e      	ldr	r1, [pc, #568]	@ (800e440 <dwt_configure+0x318>)
 800e208:	001a      	movs	r2, r3
 800e20a:	202e      	movs	r0, #46	@ 0x2e
 800e20c:	f000 fb05 	bl	800e81a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800e210:	2512      	movs	r5, #18
 800e212:	197b      	adds	r3, r7, r5
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	0018      	movs	r0, r3
 800e218:	f000 fb78 	bl	800e90c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800e21c:	2413      	movs	r4, #19
 800e21e:	193b      	adds	r3, r7, r4
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	4a88      	ldr	r2, [pc, #544]	@ (800e444 <dwt_configure+0x31c>)
 800e224:	5cd3      	ldrb	r3, [r2, r3]
 800e226:	001a      	movs	r2, r3
 800e228:	4b87      	ldr	r3, [pc, #540]	@ (800e448 <dwt_configure+0x320>)
 800e22a:	0092      	lsls	r2, r2, #2
 800e22c:	58d3      	ldr	r3, [r2, r3]
 800e22e:	001a      	movs	r2, r3
 800e230:	2107      	movs	r1, #7
 800e232:	202b      	movs	r0, #43	@ 0x2b
 800e234:	f000 fb11 	bl	800e85a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800e238:	193b      	adds	r3, r7, r4
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	4a81      	ldr	r2, [pc, #516]	@ (800e444 <dwt_configure+0x31c>)
 800e23e:	5cd3      	ldrb	r3, [r2, r3]
 800e240:	001a      	movs	r2, r3
 800e242:	4b82      	ldr	r3, [pc, #520]	@ (800e44c <dwt_configure+0x324>)
 800e244:	5c9b      	ldrb	r3, [r3, r2]
 800e246:	001a      	movs	r2, r3
 800e248:	210b      	movs	r1, #11
 800e24a:	202b      	movs	r0, #43	@ 0x2b
 800e24c:	f000 fad2 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800e250:	2311      	movs	r3, #17
 800e252:	18fb      	adds	r3, r7, r3
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	4a7e      	ldr	r2, [pc, #504]	@ (800e450 <dwt_configure+0x328>)
 800e258:	5cd3      	ldrb	r3, [r2, r3]
 800e25a:	001a      	movs	r2, r3
 800e25c:	210b      	movs	r1, #11
 800e25e:	2028      	movs	r0, #40	@ 0x28
 800e260:	f000 fac8 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800e264:	193b      	adds	r3, r7, r4
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	4a76      	ldr	r2, [pc, #472]	@ (800e444 <dwt_configure+0x31c>)
 800e26a:	5cd3      	ldrb	r3, [r2, r3]
 800e26c:	001a      	movs	r2, r3
 800e26e:	4b79      	ldr	r3, [pc, #484]	@ (800e454 <dwt_configure+0x32c>)
 800e270:	0092      	lsls	r2, r2, #2
 800e272:	58d3      	ldr	r3, [r2, r3]
 800e274:	001a      	movs	r2, r3
 800e276:	210c      	movs	r1, #12
 800e278:	2028      	movs	r0, #40	@ 0x28
 800e27a:	f000 faee 	bl	800e85a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	79db      	ldrb	r3, [r3, #7]
 800e282:	001a      	movs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	799b      	ldrb	r3, [r3, #6]
 800e288:	0019      	movs	r1, r3
 800e28a:	4b73      	ldr	r3, [pc, #460]	@ (800e458 <dwt_configure+0x330>)
 800e28c:	0052      	lsls	r2, r2, #1
 800e28e:	1852      	adds	r2, r2, r1
 800e290:	0052      	lsls	r2, r2, #1
 800e292:	5ad3      	ldrh	r3, [r2, r3]
 800e294:	001a      	movs	r2, r3
 800e296:	2102      	movs	r1, #2
 800e298:	2027      	movs	r0, #39	@ 0x27
 800e29a:	f000 fabe 	bl	800e81a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800e29e:	197b      	adds	r3, r7, r5
 800e2a0:	781a      	ldrb	r2, [r3, #0]
 800e2a2:	4b6e      	ldr	r3, [pc, #440]	@ (800e45c <dwt_configure+0x334>)
 800e2a4:	0052      	lsls	r2, r2, #1
 800e2a6:	5ad3      	ldrh	r3, [r2, r3]
 800e2a8:	001a      	movs	r2, r3
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	2027      	movs	r0, #39	@ 0x27
 800e2ae:	f000 fab4 	bl	800e81a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	79db      	ldrb	r3, [r3, #7]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d105      	bne.n	800e2c6 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800e2ba:	2264      	movs	r2, #100	@ 0x64
 800e2bc:	2106      	movs	r1, #6
 800e2be:	2027      	movs	r0, #39	@ 0x27
 800e2c0:	f000 faab 	bl	800e81a <dwt_write16bitoffsetreg>
 800e2c4:	e018      	b.n	800e2f8 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	789b      	ldrb	r3, [r3, #2]
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d10a      	bne.n	800e2e4 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800e2ce:	2210      	movs	r2, #16
 800e2d0:	2106      	movs	r1, #6
 800e2d2:	2027      	movs	r0, #39	@ 0x27
 800e2d4:	f000 faa1 	bl	800e81a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800e2d8:	2210      	movs	r2, #16
 800e2da:	2126      	movs	r1, #38	@ 0x26
 800e2dc:	2027      	movs	r0, #39	@ 0x27
 800e2de:	f000 fa89 	bl	800e7f4 <dwt_write8bitoffsetreg>
 800e2e2:	e009      	b.n	800e2f8 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	2106      	movs	r1, #6
 800e2e8:	2027      	movs	r0, #39	@ 0x27
 800e2ea:	f000 fa96 	bl	800e81a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800e2ee:	2228      	movs	r2, #40	@ 0x28
 800e2f0:	2126      	movs	r1, #38	@ 0x26
 800e2f2:	2027      	movs	r0, #39	@ 0x27
 800e2f4:	f000 fa7e 	bl	800e7f4 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800e2f8:	2312      	movs	r3, #18
 800e2fa:	18fb      	adds	r3, r7, r3
 800e2fc:	781a      	ldrb	r2, [r3, #0]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	78db      	ldrb	r3, [r3, #3]
 800e302:	0019      	movs	r1, r3
 800e304:	4b56      	ldr	r3, [pc, #344]	@ (800e460 <dwt_configure+0x338>)
 800e306:	0092      	lsls	r2, r2, #2
 800e308:	1852      	adds	r2, r2, r1
 800e30a:	0092      	lsls	r2, r2, #2
 800e30c:	58d3      	ldr	r3, [r2, r3]
 800e30e:	001a      	movs	r2, r3
 800e310:	2108      	movs	r1, #8
 800e312:	2027      	movs	r0, #39	@ 0x27
 800e314:	f000 faa1 	bl	800e85a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	895b      	ldrh	r3, [r3, #10]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a50      	ldr	r2, [pc, #320]	@ (800e464 <dwt_configure+0x33c>)
 800e324:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	895b      	ldrh	r3, [r3, #10]
 800e32a:	001a      	movs	r2, r3
 800e32c:	2120      	movs	r1, #32
 800e32e:	2027      	movs	r0, #39	@ 0x27
 800e330:	f000 fa73 	bl	800e81a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800e334:	4b4c      	ldr	r3, [pc, #304]	@ (800e468 <dwt_configure+0x340>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	001a      	movs	r2, r3
 800e33a:	210c      	movs	r1, #12
 800e33c:	2023      	movs	r0, #35	@ 0x23
 800e33e:	f000 fa8c 	bl	800e85a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800e342:	2312      	movs	r3, #18
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	4a47      	ldr	r2, [pc, #284]	@ (800e468 <dwt_configure+0x340>)
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	18d3      	adds	r3, r2, r3
 800e34e:	3304      	adds	r3, #4
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	001a      	movs	r2, r3
 800e354:	2104      	movs	r1, #4
 800e356:	2023      	movs	r0, #35	@ 0x23
 800e358:	f000 fa5f 	bl	800e81a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	799b      	ldrb	r3, [r3, #6]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d011      	beq.n	800e388 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	79db      	ldrb	r3, [r3, #7]
 800e368:	001a      	movs	r2, r3
 800e36a:	4b40      	ldr	r3, [pc, #256]	@ (800e46c <dwt_configure+0x344>)
 800e36c:	5c9b      	ldrb	r3, [r3, r2]
 800e36e:	001a      	movs	r2, r3
 800e370:	2100      	movs	r1, #0
 800e372:	2021      	movs	r0, #33	@ 0x21
 800e374:	f000 fa3e 	bl	800e7f4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800e378:	2317      	movs	r3, #23
 800e37a:	18fb      	adds	r3, r7, r3
 800e37c:	2203      	movs	r2, #3
 800e37e:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800e380:	2316      	movs	r3, #22
 800e382:	18fb      	adds	r3, r7, r3
 800e384:	2201      	movs	r2, #1
 800e386:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e388:	2113      	movs	r1, #19
 800e38a:	187b      	adds	r3, r7, r1
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	220f      	movs	r2, #15
 800e390:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e392:	187b      	adds	r3, r7, r1
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	011b      	lsls	r3, r3, #4
 800e398:	21ff      	movs	r1, #255	@ 0xff
 800e39a:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e39c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	785b      	ldrb	r3, [r3, #1]
 800e3a2:	0499      	lsls	r1, r3, #18
 800e3a4:	23c0      	movs	r3, #192	@ 0xc0
 800e3a6:	031b      	lsls	r3, r3, #12
 800e3a8:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e3aa:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e3ac:	2317      	movs	r3, #23
 800e3ae:	18fb      	adds	r3, r7, r3
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	0519      	lsls	r1, r3, #20
 800e3b4:	23c0      	movs	r3, #192	@ 0xc0
 800e3b6:	039b      	lsls	r3, r3, #14
 800e3b8:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e3ba:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e3bc:	2316      	movs	r3, #22
 800e3be:	18fb      	adds	r3, r7, r3
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	0459      	lsls	r1, r3, #17
 800e3c4:	2380      	movs	r3, #128	@ 0x80
 800e3c6:	029b      	lsls	r3, r3, #10
 800e3c8:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e3ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	791b      	ldrb	r3, [r3, #4]
 800e3d0:	0599      	lsls	r1, r3, #22
 800e3d2:	23f8      	movs	r3, #248	@ 0xf8
 800e3d4:	04db      	lsls	r3, r3, #19
 800e3d6:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e3d8:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	795b      	ldrb	r3, [r3, #5]
 800e3de:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	001a      	movs	r2, r3
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	201f      	movs	r0, #31
 800e3ec:	f000 fa35 	bl	800e85a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	789a      	ldrb	r2, [r3, #2]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	785b      	ldrb	r3, [r3, #1]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	0419      	lsls	r1, r3, #16
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	79db      	ldrb	r3, [r3, #7]
 800e402:	035a      	lsls	r2, r3, #13
 800e404:	4b0b      	ldr	r3, [pc, #44]	@ (800e434 <dwt_configure+0x30c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	430a      	orrs	r2, r1
 800e40a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800e40c:	4b09      	ldr	r3, [pc, #36]	@ (800e434 <dwt_configure+0x30c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	001a      	movs	r2, r3
 800e414:	2100      	movs	r1, #0
 800e416:	2008      	movs	r0, #8
 800e418:	f000 fa1f 	bl	800e85a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800e41c:	2242      	movs	r2, #66	@ 0x42
 800e41e:	2100      	movs	r1, #0
 800e420:	200d      	movs	r0, #13
 800e422:	f000 f9e7 	bl	800e7f4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800e426:	46c0      	nop			@ (mov r8, r8)
 800e428:	46bd      	mov	sp, r7
 800e42a:	b006      	add	sp, #24
 800e42c:	bdb0      	pop	{r4, r5, r7, pc}
 800e42e:	46c0      	nop			@ (mov r8, r8)
 800e430:	08011fbc 	.word	0x08011fbc
 800e434:	200001f0 	.word	0x200001f0
 800e438:	ffbfffff 	.word	0xffbfffff
 800e43c:	fffcffff 	.word	0xfffcffff
 800e440:	00002804 	.word	0x00002804
 800e444:	08011f3c 	.word	0x08011f3c
 800e448:	08011f5c 	.word	0x08011f5c
 800e44c:	08011f74 	.word	0x08011f74
 800e450:	08011f7c 	.word	0x08011f7c
 800e454:	08011f44 	.word	0x08011f44
 800e458:	08011f8c 	.word	0x08011f8c
 800e45c:	08011f98 	.word	0x08011f98
 800e460:	08011f9c 	.word	0x08011f9c
 800e464:	00001041 	.word	0x00001041
 800e468:	08011f80 	.word	0x08011f80
 800e46c:	08011f88 	.word	0x08011f88

0800e470 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	0002      	movs	r2, r0
 800e478:	1dbb      	adds	r3, r7, #6
 800e47a:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800e47c:	1dbb      	adds	r3, r7, #6
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	4904      	ldr	r1, [pc, #16]	@ (800e494 <dwt_setrxantennadelay+0x24>)
 800e482:	001a      	movs	r2, r3
 800e484:	202e      	movs	r0, #46	@ 0x2e
 800e486:	f000 f9c8 	bl	800e81a <dwt_write16bitoffsetreg>
}
 800e48a:	46c0      	nop			@ (mov r8, r8)
 800e48c:	46bd      	mov	sp, r7
 800e48e:	b002      	add	sp, #8
 800e490:	bd80      	pop	{r7, pc}
 800e492:	46c0      	nop			@ (mov r8, r8)
 800e494:	00001804 	.word	0x00001804

0800e498 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	0002      	movs	r2, r0
 800e4a0:	1dbb      	adds	r3, r7, #6
 800e4a2:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800e4a4:	1dbb      	adds	r3, r7, #6
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	001a      	movs	r2, r3
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	2018      	movs	r0, #24
 800e4ae:	f000 f9b4 	bl	800e81a <dwt_write16bitoffsetreg>
}
 800e4b2:	46c0      	nop			@ (mov r8, r8)
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	b002      	add	sp, #8
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b082      	sub	sp, #8
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6039      	str	r1, [r7, #0]
 800e4c2:	0011      	movs	r1, r2
 800e4c4:	1dbb      	adds	r3, r7, #6
 800e4c6:	1c02      	adds	r2, r0, #0
 800e4c8:	801a      	strh	r2, [r3, #0]
 800e4ca:	1d3b      	adds	r3, r7, #4
 800e4cc:	1c0a      	adds	r2, r1, #0
 800e4ce:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800e4d0:	1d3b      	adds	r3, r7, #4
 800e4d2:	881a      	ldrh	r2, [r3, #0]
 800e4d4:	1dbb      	adds	r3, r7, #6
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	18d2      	adds	r2, r2, r3
 800e4da:	2380      	movs	r3, #128	@ 0x80
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	dc0d      	bgt.n	800e4fe <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800e4e2:	1dbb      	adds	r3, r7, #6
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	3b02      	subs	r3, #2
 800e4e8:	0018      	movs	r0, r3
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	1d3b      	adds	r3, r7, #4
 800e4ee:	8819      	ldrh	r1, [r3, #0]
 800e4f0:	0013      	movs	r3, r2
 800e4f2:	0002      	movs	r2, r0
 800e4f4:	2009      	movs	r0, #9
 800e4f6:	f000 f862 	bl	800e5be <dwt_writetodevice>
        return DWT_SUCCESS;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e001      	b.n	800e502 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800e502:	0018      	movs	r0, r3
 800e504:	46bd      	mov	sp, r7
 800e506:	b002      	add	sp, #8
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	603a      	str	r2, [r7, #0]
 800e514:	1dbb      	adds	r3, r7, #6
 800e516:	1c02      	adds	r2, r0, #0
 800e518:	801a      	strh	r2, [r3, #0]
 800e51a:	1d3b      	adds	r3, r7, #4
 800e51c:	1c0a      	adds	r2, r1, #0
 800e51e:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800e520:	4b0b      	ldr	r3, [pc, #44]	@ (800e550 <dwt_writetxfctrl+0x44>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	68da      	ldr	r2, [r3, #12]
 800e526:	1dbb      	adds	r3, r7, #6
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	431a      	orrs	r2, r3
 800e52c:	1d3b      	adds	r3, r7, #4
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	059b      	lsls	r3, r3, #22
 800e532:	431a      	orrs	r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	03db      	lsls	r3, r3, #15
 800e538:	4313      	orrs	r3, r2
 800e53a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	001a      	movs	r2, r3
 800e540:	2100      	movs	r1, #0
 800e542:	2008      	movs	r0, #8
 800e544:	f000 f989 	bl	800e85a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800e548:	46c0      	nop			@ (mov r8, r8)
 800e54a:	46bd      	mov	sp, r7
 800e54c:	b004      	add	sp, #16
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	200001f0 	.word	0x200001f0

0800e554 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	0008      	movs	r0, r1
 800e55e:	0011      	movs	r1, r2
 800e560:	1cbb      	adds	r3, r7, #2
 800e562:	1c02      	adds	r2, r0, #0
 800e564:	801a      	strh	r2, [r3, #0]
 800e566:	003b      	movs	r3, r7
 800e568:	1c0a      	adds	r2, r1, #0
 800e56a:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800e56c:	1cbb      	adds	r3, r7, #2
 800e56e:	881a      	ldrh	r2, [r3, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	003b      	movs	r3, r7
 800e574:	8819      	ldrh	r1, [r3, #0]
 800e576:	0003      	movs	r3, r0
 800e578:	2011      	movs	r0, #17
 800e57a:	f000 f881 	bl	800e680 <dwt_readfromdevice>
}
 800e57e:	46c0      	nop			@ (mov r8, r8)
 800e580:	46bd      	mov	sp, r7
 800e582:	b002      	add	sp, #8
 800e584:	bd80      	pop	{r7, pc}

0800e586 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2205      	movs	r2, #5
 800e592:	2100      	movs	r1, #0
 800e594:	2017      	movs	r0, #23
 800e596:	f000 f873 	bl	800e680 <dwt_readfromdevice>
}
 800e59a:	46c0      	nop			@ (mov r8, r8)
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b002      	add	sp, #8
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2205      	movs	r2, #5
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	2015      	movs	r0, #21
 800e5b2:	f000 f865 	bl	800e680 <dwt_readfromdevice>
}
 800e5b6:	46c0      	nop			@ (mov r8, r8)
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	b002      	add	sp, #8
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800e5be:	b590      	push	{r4, r7, lr}
 800e5c0:	b087      	sub	sp, #28
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	60ba      	str	r2, [r7, #8]
 800e5c6:	607b      	str	r3, [r7, #4]
 800e5c8:	240e      	movs	r4, #14
 800e5ca:	193b      	adds	r3, r7, r4
 800e5cc:	1c02      	adds	r2, r0, #0
 800e5ce:	801a      	strh	r2, [r3, #0]
 800e5d0:	200c      	movs	r0, #12
 800e5d2:	183b      	adds	r3, r7, r0
 800e5d4:	1c0a      	adds	r2, r1, #0
 800e5d6:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e5d8:	2300      	movs	r3, #0
 800e5da:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e5dc:	183b      	adds	r3, r7, r0
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10d      	bne.n	800e600 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e5e4:	193b      	adds	r3, r7, r4
 800e5e6:	881b      	ldrh	r3, [r3, #0]
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	1c59      	adds	r1, r3, #1
 800e5ee:	6179      	str	r1, [r7, #20]
 800e5f0:	2180      	movs	r1, #128	@ 0x80
 800e5f2:	4249      	negs	r1, r1
 800e5f4:	430a      	orrs	r2, r1
 800e5f6:	b2d1      	uxtb	r1, r2
 800e5f8:	2210      	movs	r2, #16
 800e5fa:	18ba      	adds	r2, r7, r2
 800e5fc:	54d1      	strb	r1, [r2, r3]
 800e5fe:	e033      	b.n	800e668 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e600:	230e      	movs	r3, #14
 800e602:	18fb      	adds	r3, r7, r3
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	b2da      	uxtb	r2, r3
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	1c59      	adds	r1, r3, #1
 800e60c:	6179      	str	r1, [r7, #20]
 800e60e:	2140      	movs	r1, #64	@ 0x40
 800e610:	4249      	negs	r1, r1
 800e612:	430a      	orrs	r2, r1
 800e614:	b2d1      	uxtb	r1, r2
 800e616:	2010      	movs	r0, #16
 800e618:	183a      	adds	r2, r7, r0
 800e61a:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e61c:	210c      	movs	r1, #12
 800e61e:	187b      	adds	r3, r7, r1
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	2b7f      	cmp	r3, #127	@ 0x7f
 800e624:	d808      	bhi.n	800e638 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	617a      	str	r2, [r7, #20]
 800e62c:	187a      	adds	r2, r7, r1
 800e62e:	8812      	ldrh	r2, [r2, #0]
 800e630:	b2d1      	uxtb	r1, r2
 800e632:	183a      	adds	r2, r7, r0
 800e634:	54d1      	strb	r1, [r2, r3]
 800e636:	e017      	b.n	800e668 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e638:	200c      	movs	r0, #12
 800e63a:	183b      	adds	r3, r7, r0
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	1c59      	adds	r1, r3, #1
 800e644:	6179      	str	r1, [r7, #20]
 800e646:	2180      	movs	r1, #128	@ 0x80
 800e648:	4249      	negs	r1, r1
 800e64a:	430a      	orrs	r2, r1
 800e64c:	b2d1      	uxtb	r1, r2
 800e64e:	2410      	movs	r4, #16
 800e650:	193a      	adds	r2, r7, r4
 800e652:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e654:	183b      	adds	r3, r7, r0
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	09db      	lsrs	r3, r3, #7
 800e65a:	b299      	uxth	r1, r3
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	617a      	str	r2, [r7, #20]
 800e662:	b2c9      	uxtb	r1, r1
 800e664:	193a      	adds	r2, r7, r4
 800e666:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	b298      	uxth	r0, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	2110      	movs	r1, #16
 800e672:	1879      	adds	r1, r7, r1
 800e674:	f000 fc58 	bl	800ef28 <writetospi>
} // end dwt_writetodevice()
 800e678:	46c0      	nop			@ (mov r8, r8)
 800e67a:	46bd      	mov	sp, r7
 800e67c:	b007      	add	sp, #28
 800e67e:	bd90      	pop	{r4, r7, pc}

0800e680 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800e680:	b590      	push	{r4, r7, lr}
 800e682:	b087      	sub	sp, #28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60ba      	str	r2, [r7, #8]
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	240e      	movs	r4, #14
 800e68c:	193b      	adds	r3, r7, r4
 800e68e:	1c02      	adds	r2, r0, #0
 800e690:	801a      	strh	r2, [r3, #0]
 800e692:	200c      	movs	r0, #12
 800e694:	183b      	adds	r3, r7, r0
 800e696:	1c0a      	adds	r2, r1, #0
 800e698:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e69a:	2300      	movs	r3, #0
 800e69c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e69e:	183b      	adds	r3, r7, r0
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d109      	bne.n	800e6ba <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	617a      	str	r2, [r7, #20]
 800e6ac:	193a      	adds	r2, r7, r4
 800e6ae:	8812      	ldrh	r2, [r2, #0]
 800e6b0:	b2d1      	uxtb	r1, r2
 800e6b2:	2210      	movs	r2, #16
 800e6b4:	18ba      	adds	r2, r7, r2
 800e6b6:	54d1      	strb	r1, [r2, r3]
 800e6b8:	e032      	b.n	800e720 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e6ba:	230e      	movs	r3, #14
 800e6bc:	18fb      	adds	r3, r7, r3
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	1c59      	adds	r1, r3, #1
 800e6c6:	6179      	str	r1, [r7, #20]
 800e6c8:	2140      	movs	r1, #64	@ 0x40
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	b2d1      	uxtb	r1, r2
 800e6ce:	2010      	movs	r0, #16
 800e6d0:	183a      	adds	r2, r7, r0
 800e6d2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e6d4:	210c      	movs	r1, #12
 800e6d6:	187b      	adds	r3, r7, r1
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6dc:	d808      	bhi.n	800e6f0 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	617a      	str	r2, [r7, #20]
 800e6e4:	187a      	adds	r2, r7, r1
 800e6e6:	8812      	ldrh	r2, [r2, #0]
 800e6e8:	b2d1      	uxtb	r1, r2
 800e6ea:	183a      	adds	r2, r7, r0
 800e6ec:	54d1      	strb	r1, [r2, r3]
 800e6ee:	e017      	b.n	800e720 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e6f0:	200c      	movs	r0, #12
 800e6f2:	183b      	adds	r3, r7, r0
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	1c59      	adds	r1, r3, #1
 800e6fc:	6179      	str	r1, [r7, #20]
 800e6fe:	2180      	movs	r1, #128	@ 0x80
 800e700:	4249      	negs	r1, r1
 800e702:	430a      	orrs	r2, r1
 800e704:	b2d1      	uxtb	r1, r2
 800e706:	2410      	movs	r4, #16
 800e708:	193a      	adds	r2, r7, r4
 800e70a:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e70c:	183b      	adds	r3, r7, r0
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	09db      	lsrs	r3, r3, #7
 800e712:	b299      	uxth	r1, r3
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	617a      	str	r2, [r7, #20]
 800e71a:	b2c9      	uxtb	r1, r1
 800e71c:	193a      	adds	r2, r7, r4
 800e71e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	b298      	uxth	r0, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	2110      	movs	r1, #16
 800e72a:	1879      	adds	r1, r7, r1
 800e72c:	f000 fc34 	bl	800ef98 <readfromspi>
} // end dwt_readfromdevice()
 800e730:	46c0      	nop			@ (mov r8, r8)
 800e732:	46bd      	mov	sp, r7
 800e734:	b007      	add	sp, #28
 800e736:	bd90      	pop	{r4, r7, pc}

0800e738 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800e742:	2300      	movs	r3, #0
 800e744:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	b298      	uxth	r0, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	b299      	uxth	r1, r3
 800e74e:	230c      	movs	r3, #12
 800e750:	18fb      	adds	r3, r7, r3
 800e752:	2204      	movs	r2, #4
 800e754:	f7ff ff94 	bl	800e680 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800e758:	2303      	movs	r3, #3
 800e75a:	613b      	str	r3, [r7, #16]
 800e75c:	e00b      	b.n	800e776 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	220c      	movs	r2, #12
 800e764:	18b9      	adds	r1, r7, r2
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	188a      	adds	r2, r1, r2
 800e76a:	7812      	ldrb	r2, [r2, #0]
 800e76c:	189b      	adds	r3, r3, r2
 800e76e:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	3b01      	subs	r3, #1
 800e774:	613b      	str	r3, [r7, #16]
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	daf0      	bge.n	800e75e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800e77c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800e77e:	0018      	movs	r0, r3
 800e780:	46bd      	mov	sp, r7
 800e782:	b006      	add	sp, #24
 800e784:	bd80      	pop	{r7, pc}

0800e786 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800e786:	b5b0      	push	{r4, r5, r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800e790:	240e      	movs	r4, #14
 800e792:	193b      	adds	r3, r7, r4
 800e794:	2200      	movs	r2, #0
 800e796:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	b298      	uxth	r0, r3
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	b299      	uxth	r1, r3
 800e7a0:	250c      	movs	r5, #12
 800e7a2:	197b      	adds	r3, r7, r5
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	f7ff ff6b 	bl	800e680 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800e7aa:	0029      	movs	r1, r5
 800e7ac:	187b      	adds	r3, r7, r1
 800e7ae:	785b      	ldrb	r3, [r3, #1]
 800e7b0:	021b      	lsls	r3, r3, #8
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	187b      	adds	r3, r7, r1
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	0019      	movs	r1, r3
 800e7ba:	193b      	adds	r3, r7, r4
 800e7bc:	1852      	adds	r2, r2, r1
 800e7be:	801a      	strh	r2, [r3, #0]
    return regval ;
 800e7c0:	193b      	adds	r3, r7, r4
 800e7c2:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800e7c4:	0018      	movs	r0, r3
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	b004      	add	sp, #16
 800e7ca:	bdb0      	pop	{r4, r5, r7, pc}

0800e7cc <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800e7cc:	b590      	push	{r4, r7, lr}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	b298      	uxth	r0, r3
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	b299      	uxth	r1, r3
 800e7de:	240f      	movs	r4, #15
 800e7e0:	193b      	adds	r3, r7, r4
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f7ff ff4c 	bl	800e680 <dwt_readfromdevice>

    return regval ;
 800e7e8:	193b      	adds	r3, r7, r4
 800e7ea:	781b      	ldrb	r3, [r3, #0]
}
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	b005      	add	sp, #20
 800e7f2:	bd90      	pop	{r4, r7, pc}

0800e7f4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	1dfb      	adds	r3, r7, #7
 800e800:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	b298      	uxth	r0, r3
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	b299      	uxth	r1, r3
 800e80a:	1dfb      	adds	r3, r7, #7
 800e80c:	2201      	movs	r2, #1
 800e80e:	f7ff fed6 	bl	800e5be <dwt_writetodevice>
}
 800e812:	46c0      	nop			@ (mov r8, r8)
 800e814:	46bd      	mov	sp, r7
 800e816:	b004      	add	sp, #16
 800e818:	bd80      	pop	{r7, pc}

0800e81a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800e81a:	b590      	push	{r4, r7, lr}
 800e81c:	b087      	sub	sp, #28
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	1dbb      	adds	r3, r7, #6
 800e826:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800e828:	1dbb      	adds	r3, r7, #6
 800e82a:	881b      	ldrh	r3, [r3, #0]
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	2414      	movs	r4, #20
 800e830:	193b      	adds	r3, r7, r4
 800e832:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800e834:	1dbb      	adds	r3, r7, #6
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	0a1b      	lsrs	r3, r3, #8
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	193b      	adds	r3, r7, r4
 800e840:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	b298      	uxth	r0, r3
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	b299      	uxth	r1, r3
 800e84a:	193b      	adds	r3, r7, r4
 800e84c:	2202      	movs	r2, #2
 800e84e:	f7ff feb6 	bl	800e5be <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800e852:	46c0      	nop			@ (mov r8, r8)
 800e854:	46bd      	mov	sp, r7
 800e856:	b007      	add	sp, #28
 800e858:	bd90      	pop	{r4, r7, pc}

0800e85a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	60f8      	str	r0, [r7, #12]
 800e862:	60b9      	str	r1, [r7, #8]
 800e864:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	e00d      	b.n	800e888 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	b2d9      	uxtb	r1, r3
 800e870:	2310      	movs	r3, #16
 800e872:	18fa      	adds	r2, r7, r3
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	18d3      	adds	r3, r2, r3
 800e878:	1c0a      	adds	r2, r1, #0
 800e87a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	0a1b      	lsrs	r3, r3, #8
 800e880:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	3301      	adds	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	ddee      	ble.n	800e86c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	b298      	uxth	r0, r3
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	b299      	uxth	r1, r3
 800e896:	2310      	movs	r3, #16
 800e898:	18fb      	adds	r3, r7, r3
 800e89a:	2204      	movs	r2, #4
 800e89c:	f7ff fe8f 	bl	800e5be <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800e8a0:	46c0      	nop			@ (mov r8, r8)
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	b006      	add	sp, #24
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	0002      	movs	r2, r0
 800e8b0:	1dbb      	adds	r3, r7, #6
 800e8b2:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800e8b4:	1dbb      	adds	r3, r7, #6
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	001a      	movs	r2, r3
 800e8ba:	2104      	movs	r1, #4
 800e8bc:	202d      	movs	r0, #45	@ 0x2d
 800e8be:	f7ff ffac 	bl	800e81a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800e8c2:	2203      	movs	r2, #3
 800e8c4:	2106      	movs	r1, #6
 800e8c6:	202d      	movs	r0, #45	@ 0x2d
 800e8c8:	f7ff ff94 	bl	800e7f4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	2106      	movs	r1, #6
 800e8d0:	202d      	movs	r0, #45	@ 0x2d
 800e8d2:	f7ff ff8f 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800e8d6:	210a      	movs	r1, #10
 800e8d8:	202d      	movs	r0, #45	@ 0x2d
 800e8da:	f7ff ff2d 	bl	800e738 <dwt_read32bitoffsetreg>
 800e8de:	0003      	movs	r3, r0
 800e8e0:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
}
 800e8e4:	0018      	movs	r0, r3
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	b004      	add	sp, #16
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2102      	movs	r1, #2
 800e8f4:	202c      	movs	r0, #44	@ 0x2c
 800e8f6:	f7ff ff7d 	bl	800e7f4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	2102      	movs	r1, #2
 800e8fe:	202c      	movs	r0, #44	@ 0x2c
 800e900:	f7ff ff78 	bl	800e7f4 <dwt_write8bitoffsetreg>
}
 800e904:	46c0      	nop			@ (mov r8, r8)
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800e914:	4b0c      	ldr	r3, [pc, #48]	@ (800e948 <_dwt_configlde+0x3c>)
 800e916:	226d      	movs	r2, #109	@ 0x6d
 800e918:	0019      	movs	r1, r3
 800e91a:	202e      	movs	r0, #46	@ 0x2e
 800e91c:	f7ff ff6a 	bl	800e7f4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d006      	beq.n	800e934 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800e926:	4a09      	ldr	r2, [pc, #36]	@ (800e94c <_dwt_configlde+0x40>)
 800e928:	4b09      	ldr	r3, [pc, #36]	@ (800e950 <_dwt_configlde+0x44>)
 800e92a:	0019      	movs	r1, r3
 800e92c:	202e      	movs	r0, #46	@ 0x2e
 800e92e:	f7ff ff74 	bl	800e81a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800e932:	e005      	b.n	800e940 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800e934:	4a07      	ldr	r2, [pc, #28]	@ (800e954 <_dwt_configlde+0x48>)
 800e936:	4b06      	ldr	r3, [pc, #24]	@ (800e950 <_dwt_configlde+0x44>)
 800e938:	0019      	movs	r1, r3
 800e93a:	202e      	movs	r0, #46	@ 0x2e
 800e93c:	f7ff ff6d 	bl	800e81a <dwt_write16bitoffsetreg>
}
 800e940:	46c0      	nop			@ (mov r8, r8)
 800e942:	46bd      	mov	sp, r7
 800e944:	b002      	add	sp, #8
 800e946:	bd80      	pop	{r7, pc}
 800e948:	00000806 	.word	0x00000806
 800e94c:	00000607 	.word	0x00000607
 800e950:	00001806 	.word	0x00001806
 800e954:	00001607 	.word	0x00001607

0800e958 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800e95c:	200e      	movs	r0, #14
 800e95e:	f000 f861 	bl	800ea24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800e962:	2380      	movs	r3, #128	@ 0x80
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	001a      	movs	r2, r3
 800e968:	2106      	movs	r1, #6
 800e96a:	202d      	movs	r0, #45	@ 0x2d
 800e96c:	f7ff ff55 	bl	800e81a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800e970:	2001      	movs	r0, #1
 800e972:	f000 facc 	bl	800ef0e <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800e976:	2001      	movs	r0, #1
 800e978:	f000 f854 	bl	800ea24 <_dwt_enableclocks>
}
 800e97c:	46c0      	nop			@ (mov r8, r8)
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
	...

0800e984 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
    if(enable)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00c      	beq.n	800e9ac <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800e992:	4b13      	ldr	r3, [pc, #76]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	691a      	ldr	r2, [r3, #16]
 800e998:	4b11      	ldr	r3, [pc, #68]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4911      	ldr	r1, [pc, #68]	@ (800e9e4 <dwt_setdblrxbuffmode+0x60>)
 800e99e:	400a      	ands	r2, r1
 800e9a0:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800e9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	751a      	strb	r2, [r3, #20]
 800e9aa:	e00c      	b.n	800e9c6 <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800e9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	691a      	ldr	r2, [r3, #16]
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2180      	movs	r1, #128	@ 0x80
 800e9b8:	0149      	lsls	r1, r1, #5
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800e9be:	4b08      	ldr	r3, [pc, #32]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800e9c6:	4b06      	ldr	r3, [pc, #24]	@ (800e9e0 <dwt_setdblrxbuffmode+0x5c>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	001a      	movs	r2, r3
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	2004      	movs	r0, #4
 800e9d2:	f7ff ff42 	bl	800e85a <dwt_write32bitoffsetreg>
}
 800e9d6:	46c0      	nop			@ (mov r8, r8)
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	b002      	add	sp, #8
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	46c0      	nop			@ (mov r8, r8)
 800e9e0:	200001f0 	.word	0x200001f0
 800e9e4:	ffffefff 	.word	0xffffefff

0800e9e8 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	201a      	movs	r0, #26
 800e9f4:	f7ff fea0 	bl	800e738 <dwt_read32bitoffsetreg>
 800e9f8:	0003      	movs	r3, r0
 800e9fa:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	0d1b      	lsrs	r3, r3, #20
 800ea00:	051b      	lsls	r3, r3, #20
 800ea02:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	031b      	lsls	r3, r3, #12
 800ea08:	0b1b      	lsrs	r3, r3, #12
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	001a      	movs	r2, r3
 800ea14:	2100      	movs	r1, #0
 800ea16:	201a      	movs	r0, #26
 800ea18:	f7ff ff1f 	bl	800e85a <dwt_write32bitoffsetreg>
}
 800ea1c:	46c0      	nop			@ (mov r8, r8)
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	b004      	add	sp, #16
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800ea2c:	230c      	movs	r3, #12
 800ea2e:	18fb      	adds	r3, r7, r3
 800ea30:	2202      	movs	r2, #2
 800ea32:	2100      	movs	r1, #0
 800ea34:	2036      	movs	r0, #54	@ 0x36
 800ea36:	f7ff fe23 	bl	800e680 <dwt_readfromdevice>
    switch(clocks)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b0e      	cmp	r3, #14
 800ea3e:	d900      	bls.n	800ea42 <_dwt_enableclocks+0x1e>
 800ea40:	e07b      	b.n	800eb3a <_dwt_enableclocks+0x116>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	009a      	lsls	r2, r3, #2
 800ea46:	4b46      	ldr	r3, [pc, #280]	@ (800eb60 <_dwt_enableclocks+0x13c>)
 800ea48:	18d3      	adds	r3, r2, r3
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800ea4e:	210c      	movs	r1, #12
 800ea50:	187b      	adds	r3, r7, r1
 800ea52:	2200      	movs	r2, #0
 800ea54:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800ea56:	187b      	adds	r3, r7, r1
 800ea58:	785b      	ldrb	r3, [r3, #1]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	4393      	bics	r3, r2
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	187b      	adds	r3, r7, r1
 800ea62:	705a      	strb	r2, [r3, #1]
        }
        break;
 800ea64:	e06a      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800ea66:	210c      	movs	r1, #12
 800ea68:	187b      	adds	r3, r7, r1
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	b25b      	sxtb	r3, r3
 800ea6e:	2203      	movs	r2, #3
 800ea70:	4393      	bics	r3, r2
 800ea72:	b25b      	sxtb	r3, r3
 800ea74:	2201      	movs	r2, #1
 800ea76:	4313      	orrs	r3, r2
 800ea78:	b25b      	sxtb	r3, r3
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	187b      	adds	r3, r7, r1
 800ea7e:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ea80:	e05c      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800ea82:	210c      	movs	r1, #12
 800ea84:	187b      	adds	r3, r7, r1
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	b25b      	sxtb	r3, r3
 800ea8a:	2203      	movs	r2, #3
 800ea8c:	4393      	bics	r3, r2
 800ea8e:	b25b      	sxtb	r3, r3
 800ea90:	2202      	movs	r2, #2
 800ea92:	4313      	orrs	r3, r2
 800ea94:	b25b      	sxtb	r3, r3
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	187b      	adds	r3, r7, r1
 800ea9a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ea9c:	e04e      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800ea9e:	210c      	movs	r1, #12
 800eaa0:	187b      	adds	r3, r7, r1
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	b25b      	sxtb	r3, r3
 800eaa6:	224c      	movs	r2, #76	@ 0x4c
 800eaa8:	4393      	bics	r3, r2
 800eaaa:	b25b      	sxtb	r3, r3
 800eaac:	2248      	movs	r2, #72	@ 0x48
 800eaae:	4313      	orrs	r3, r2
 800eab0:	b25b      	sxtb	r3, r3
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	187b      	adds	r3, r7, r1
 800eab6:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800eab8:	187b      	adds	r3, r7, r1
 800eaba:	785b      	ldrb	r3, [r3, #1]
 800eabc:	2280      	movs	r2, #128	@ 0x80
 800eabe:	4252      	negs	r2, r2
 800eac0:	4313      	orrs	r3, r2
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	187b      	adds	r3, r7, r1
 800eac6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eac8:	e038      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800eaca:	210c      	movs	r1, #12
 800eacc:	187b      	adds	r3, r7, r1
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	224c      	movs	r2, #76	@ 0x4c
 800ead2:	4393      	bics	r3, r2
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	187b      	adds	r3, r7, r1
 800ead8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800eada:	187b      	adds	r3, r7, r1
 800eadc:	785b      	ldrb	r3, [r3, #1]
 800eade:	227f      	movs	r2, #127	@ 0x7f
 800eae0:	4013      	ands	r3, r2
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	187b      	adds	r3, r7, r1
 800eae6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eae8:	e028      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800eaea:	210c      	movs	r1, #12
 800eaec:	187b      	adds	r3, r7, r1
 800eaee:	785b      	ldrb	r3, [r3, #1]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	187b      	adds	r3, r7, r1
 800eaf8:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eafa:	e01f      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800eafc:	210c      	movs	r1, #12
 800eafe:	187b      	adds	r3, r7, r1
 800eb00:	785b      	ldrb	r3, [r3, #1]
 800eb02:	2202      	movs	r2, #2
 800eb04:	4393      	bics	r3, r2
 800eb06:	b2da      	uxtb	r2, r3
 800eb08:	187b      	adds	r3, r7, r1
 800eb0a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eb0c:	e016      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800eb0e:	210c      	movs	r1, #12
 800eb10:	187b      	adds	r3, r7, r1
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	b25b      	sxtb	r3, r3
 800eb16:	2230      	movs	r2, #48	@ 0x30
 800eb18:	4393      	bics	r3, r2
 800eb1a:	b25b      	sxtb	r3, r3
 800eb1c:	2220      	movs	r2, #32
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	b25b      	sxtb	r3, r3
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	187b      	adds	r3, r7, r1
 800eb26:	701a      	strb	r2, [r3, #0]
        }
        break;
 800eb28:	e008      	b.n	800eb3c <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800eb2a:	210c      	movs	r1, #12
 800eb2c:	187b      	adds	r3, r7, r1
 800eb2e:	2201      	movs	r2, #1
 800eb30:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800eb32:	187b      	adds	r3, r7, r1
 800eb34:	2203      	movs	r2, #3
 800eb36:	705a      	strb	r2, [r3, #1]
        }
        break;
 800eb38:	e000      	b.n	800eb3c <_dwt_enableclocks+0x118>
        default:
        break;
 800eb3a:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800eb3c:	240c      	movs	r4, #12
 800eb3e:	193b      	adds	r3, r7, r4
 800eb40:	2201      	movs	r2, #1
 800eb42:	2100      	movs	r1, #0
 800eb44:	2036      	movs	r0, #54	@ 0x36
 800eb46:	f7ff fd3a 	bl	800e5be <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800eb4a:	193b      	adds	r3, r7, r4
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	2201      	movs	r2, #1
 800eb50:	2101      	movs	r1, #1
 800eb52:	2036      	movs	r0, #54	@ 0x36
 800eb54:	f7ff fd33 	bl	800e5be <dwt_writetodevice>

} // end _dwt_enableclocks()
 800eb58:	46c0      	nop			@ (mov r8, r8)
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	b005      	add	sp, #20
 800eb5e:	bd90      	pop	{r4, r7, pc}
 800eb60:	08011f00 	.word	0x08011f00

0800eb64 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800eb68:	2000      	movs	r0, #0
 800eb6a:	f7ff ff5b 	bl	800ea24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800eb6e:	2200      	movs	r2, #0
 800eb70:	2104      	movs	r1, #4
 800eb72:	2036      	movs	r0, #54	@ 0x36
 800eb74:	f7ff fe51 	bl	800e81a <dwt_write16bitoffsetreg>
}
 800eb78:	46c0      	nop			@ (mov r8, r8)
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b082      	sub	sp, #8
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	001a      	movs	r2, r3
 800eb8a:	2101      	movs	r1, #1
 800eb8c:	200a      	movs	r0, #10
 800eb8e:	f7ff fe64 	bl	800e85a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800eb92:	46c0      	nop			@ (mov r8, r8)
 800eb94:	46bd      	mov	sp, r7
 800eb96:	b002      	add	sp, #8
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800eb9c:	b5b0      	push	{r4, r5, r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	0002      	movs	r2, r0
 800eba4:	1dfb      	adds	r3, r7, #7
 800eba6:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800ebac:	210b      	movs	r1, #11
 800ebae:	187b      	adds	r3, r7, r1
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800ebb4:	2308      	movs	r3, #8
 800ebb6:	18fb      	adds	r3, r7, r3
 800ebb8:	2200      	movs	r2, #0
 800ebba:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800ebbc:	1dfb      	adds	r3, r7, #7
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	d006      	beq.n	800ebd4 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800ebc6:	187b      	adds	r3, r7, r1
 800ebc8:	2280      	movs	r2, #128	@ 0x80
 800ebca:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800ebcc:	4b21      	ldr	r3, [pc, #132]	@ (800ec54 <dwt_starttx+0xb8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800ebd4:	1dfb      	adds	r3, r7, #7
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	4013      	ands	r3, r2
 800ebdc:	d027      	beq.n	800ec2e <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800ebde:	200b      	movs	r0, #11
 800ebe0:	183b      	adds	r3, r7, r0
 800ebe2:	183a      	adds	r2, r7, r0
 800ebe4:	7812      	ldrb	r2, [r2, #0]
 800ebe6:	2106      	movs	r1, #6
 800ebe8:	430a      	orrs	r2, r1
 800ebea:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ebec:	183b      	adds	r3, r7, r0
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	001a      	movs	r2, r3
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	200d      	movs	r0, #13
 800ebf6:	f7ff fdfd 	bl	800e7f4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800ebfa:	2508      	movs	r5, #8
 800ebfc:	197c      	adds	r4, r7, r5
 800ebfe:	2103      	movs	r1, #3
 800ec00:	200f      	movs	r0, #15
 800ec02:	f7ff fdc0 	bl	800e786 <dwt_read16bitoffsetreg>
 800ec06:	0003      	movs	r3, r0
 800ec08:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800ec0a:	197b      	adds	r3, r7, r5
 800ec0c:	881a      	ldrh	r2, [r3, #0]
 800ec0e:	2381      	movs	r3, #129	@ 0x81
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	4013      	ands	r3, r2
 800ec14:	d102      	bne.n	800ec1c <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800ec16:	2300      	movs	r3, #0
 800ec18:	60fb      	str	r3, [r7, #12]
 800ec1a:	e016      	b.n	800ec4a <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800ec1c:	2240      	movs	r2, #64	@ 0x40
 800ec1e:	2100      	movs	r1, #0
 800ec20:	200d      	movs	r0, #13
 800ec22:	f7ff fde7 	bl	800e7f4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800ec26:	2301      	movs	r3, #1
 800ec28:	425b      	negs	r3, r3
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	e00d      	b.n	800ec4a <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800ec2e:	200b      	movs	r0, #11
 800ec30:	183b      	adds	r3, r7, r0
 800ec32:	183a      	adds	r2, r7, r0
 800ec34:	7812      	ldrb	r2, [r2, #0]
 800ec36:	2102      	movs	r1, #2
 800ec38:	430a      	orrs	r2, r1
 800ec3a:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ec3c:	183b      	adds	r3, r7, r0
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	001a      	movs	r2, r3
 800ec42:	2100      	movs	r1, #0
 800ec44:	200d      	movs	r0, #13
 800ec46:	f7ff fdd5 	bl	800e7f4 <dwt_write8bitoffsetreg>
    }

    return retval;
 800ec4a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800ec4c:	0018      	movs	r0, r3
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	b004      	add	sp, #16
 800ec52:	bdb0      	pop	{r4, r5, r7, pc}
 800ec54:	200001f0 	.word	0x200001f0

0800ec58 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800ec5e:	2100      	movs	r1, #0
 800ec60:	200e      	movs	r0, #14
 800ec62:	f7ff fd69 	bl	800e738 <dwt_read32bitoffsetreg>
 800ec66:	0003      	movs	r3, r0
 800ec68:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800ec6a:	f000 f932 	bl	800eed2 <decamutexon>
 800ec6e:	0003      	movs	r3, r0
 800ec70:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800ec72:	2200      	movs	r2, #0
 800ec74:	2100      	movs	r1, #0
 800ec76:	200e      	movs	r0, #14
 800ec78:	f7ff fdef 	bl	800e85a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800ec7c:	2240      	movs	r2, #64	@ 0x40
 800ec7e:	2100      	movs	r1, #0
 800ec80:	200d      	movs	r0, #13
 800ec82:	f7ff fdb7 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800ec86:	4b0d      	ldr	r3, [pc, #52]	@ (800ecbc <dwt_forcetrxoff+0x64>)
 800ec88:	001a      	movs	r2, r3
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	200f      	movs	r0, #15
 800ec8e:	f7ff fde4 	bl	800e85a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800ec92:	f000 f817 	bl	800ecc4 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	001a      	movs	r2, r3
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	200e      	movs	r0, #14
 800ec9e:	f7ff fddc 	bl	800e85a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	0018      	movs	r0, r3
 800eca6:	f000 f925 	bl	800eef4 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800ecaa:	4b05      	ldr	r3, [pc, #20]	@ (800ecc0 <dwt_forcetrxoff+0x68>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800ecb2:	46c0      	nop			@ (mov r8, r8)
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	b002      	add	sp, #8
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	46c0      	nop			@ (mov r8, r8)
 800ecbc:	2427fff8 	.word	0x2427fff8
 800ecc0:	200001f0 	.word	0x200001f0

0800ecc4 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800ecc4:	b590      	push	{r4, r7, lr}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800ecca:	1dfc      	adds	r4, r7, #7
 800eccc:	2103      	movs	r1, #3
 800ecce:	200f      	movs	r0, #15
 800ecd0:	f7ff fd7c 	bl	800e7cc <dwt_read8bitoffsetreg>
 800ecd4:	0003      	movs	r3, r0
 800ecd6:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ecd8:	1dfb      	adds	r3, r7, #7
 800ecda:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800ecdc:	1dfb      	adds	r3, r7, #7
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800ece2:	4053      	eors	r3, r2
 800ece4:	2280      	movs	r2, #128	@ 0x80
 800ece6:	4013      	ands	r3, r2
 800ece8:	d004      	beq.n	800ecf4 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800ecea:	2201      	movs	r2, #1
 800ecec:	2103      	movs	r1, #3
 800ecee:	200d      	movs	r0, #13
 800ecf0:	f7ff fd80 	bl	800e7f4 <dwt_write8bitoffsetreg>
    }
}
 800ecf4:	46c0      	nop			@ (mov r8, r8)
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	b003      	add	sp, #12
 800ecfa:	bd90      	pop	{r4, r7, pc}

0800ecfc <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800ecfc:	b5b0      	push	{r4, r5, r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2204      	movs	r2, #4
 800ed08:	4013      	ands	r3, r2
 800ed0a:	d101      	bne.n	800ed10 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800ed0c:	f7ff ffda 	bl	800ecc4 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800ed10:	210e      	movs	r1, #14
 800ed12:	187b      	adds	r3, r7, r1
 800ed14:	2280      	movs	r2, #128	@ 0x80
 800ed16:	0052      	lsls	r2, r2, #1
 800ed18:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4013      	ands	r3, r2
 800ed20:	d006      	beq.n	800ed30 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800ed22:	187b      	adds	r3, r7, r1
 800ed24:	187a      	adds	r2, r7, r1
 800ed26:	8812      	ldrh	r2, [r2, #0]
 800ed28:	2180      	movs	r1, #128	@ 0x80
 800ed2a:	0089      	lsls	r1, r1, #2
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ed30:	230e      	movs	r3, #14
 800ed32:	18fb      	adds	r3, r7, r3
 800ed34:	881b      	ldrh	r3, [r3, #0]
 800ed36:	001a      	movs	r2, r3
 800ed38:	2100      	movs	r1, #0
 800ed3a:	200d      	movs	r0, #13
 800ed3c:	f7ff fd6d 	bl	800e81a <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	4013      	ands	r3, r2
 800ed46:	d01c      	beq.n	800ed82 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800ed48:	250d      	movs	r5, #13
 800ed4a:	197c      	adds	r4, r7, r5
 800ed4c:	2103      	movs	r1, #3
 800ed4e:	200f      	movs	r0, #15
 800ed50:	f7ff fd3c 	bl	800e7cc <dwt_read8bitoffsetreg>
 800ed54:	0003      	movs	r3, r0
 800ed56:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800ed58:	197b      	adds	r3, r7, r5
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2208      	movs	r2, #8
 800ed5e:	4013      	ands	r3, r2
 800ed60:	d00f      	beq.n	800ed82 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800ed62:	f7ff ff79 	bl	800ec58 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2202      	movs	r2, #2
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	d106      	bne.n	800ed7c <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800ed6e:	2380      	movs	r3, #128	@ 0x80
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	001a      	movs	r2, r3
 800ed74:	2100      	movs	r1, #0
 800ed76:	200d      	movs	r0, #13
 800ed78:	f7ff fd4f 	bl	800e81a <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	425b      	negs	r3, r3
 800ed80:	e000      	b.n	800ed84 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800ed82:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800ed84:	0018      	movs	r0, r3
 800ed86:	46bd      	mov	sp, r7
 800ed88:	b004      	add	sp, #16
 800ed8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ed8c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800ed8c:	b5b0      	push	{r4, r5, r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	0002      	movs	r2, r0
 800ed94:	1dbb      	adds	r3, r7, #6
 800ed96:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800ed98:	250f      	movs	r5, #15
 800ed9a:	197c      	adds	r4, r7, r5
 800ed9c:	2103      	movs	r1, #3
 800ed9e:	2004      	movs	r0, #4
 800eda0:	f7ff fd14 	bl	800e7cc <dwt_read8bitoffsetreg>
 800eda4:	0003      	movs	r3, r0
 800eda6:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800eda8:	1dbb      	adds	r3, r7, #6
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01e      	beq.n	800edee <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800edb0:	1dbb      	adds	r3, r7, #6
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	001a      	movs	r2, r3
 800edb6:	2100      	movs	r1, #0
 800edb8:	200c      	movs	r0, #12
 800edba:	f7ff fd2e 	bl	800e81a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800edbe:	0028      	movs	r0, r5
 800edc0:	183b      	adds	r3, r7, r0
 800edc2:	183a      	adds	r2, r7, r0
 800edc4:	7812      	ldrb	r2, [r2, #0]
 800edc6:	2110      	movs	r1, #16
 800edc8:	430a      	orrs	r2, r1
 800edca:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800edcc:	4b15      	ldr	r3, [pc, #84]	@ (800ee24 <dwt_setrxtimeout+0x98>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	691a      	ldr	r2, [r3, #16]
 800edd2:	4b14      	ldr	r3, [pc, #80]	@ (800ee24 <dwt_setrxtimeout+0x98>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2180      	movs	r1, #128	@ 0x80
 800edd8:	0549      	lsls	r1, r1, #21
 800edda:	430a      	orrs	r2, r1
 800eddc:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800edde:	183b      	adds	r3, r7, r0
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	001a      	movs	r2, r3
 800ede4:	2103      	movs	r1, #3
 800ede6:	2004      	movs	r0, #4
 800ede8:	f7ff fd04 	bl	800e7f4 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800edec:	e015      	b.n	800ee1a <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800edee:	200f      	movs	r0, #15
 800edf0:	183b      	adds	r3, r7, r0
 800edf2:	183a      	adds	r2, r7, r0
 800edf4:	7812      	ldrb	r2, [r2, #0]
 800edf6:	2110      	movs	r1, #16
 800edf8:	438a      	bics	r2, r1
 800edfa:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800edfc:	4b09      	ldr	r3, [pc, #36]	@ (800ee24 <dwt_setrxtimeout+0x98>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	691a      	ldr	r2, [r3, #16]
 800ee02:	4b08      	ldr	r3, [pc, #32]	@ (800ee24 <dwt_setrxtimeout+0x98>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4908      	ldr	r1, [pc, #32]	@ (800ee28 <dwt_setrxtimeout+0x9c>)
 800ee08:	400a      	ands	r2, r1
 800ee0a:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800ee0c:	183b      	adds	r3, r7, r0
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	001a      	movs	r2, r3
 800ee12:	2103      	movs	r1, #3
 800ee14:	2004      	movs	r0, #4
 800ee16:	f7ff fced 	bl	800e7f4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800ee1a:	46c0      	nop			@ (mov r8, r8)
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	b004      	add	sp, #16
 800ee20:	bdb0      	pop	{r4, r5, r7, pc}
 800ee22:	46c0      	nop			@ (mov r8, r8)
 800ee24:	200001f0 	.word	0x200001f0
 800ee28:	efffffff 	.word	0xefffffff

0800ee2c <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800ee30:	22e0      	movs	r2, #224	@ 0xe0
 800ee32:	2103      	movs	r1, #3
 800ee34:	2036      	movs	r0, #54	@ 0x36
 800ee36:	f7ff fcdd 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800ee3a:	22f0      	movs	r2, #240	@ 0xf0
 800ee3c:	2103      	movs	r1, #3
 800ee3e:	2036      	movs	r0, #54	@ 0x36
 800ee40:	f7ff fcd8 	bl	800e7f4 <dwt_write8bitoffsetreg>
}
 800ee44:	46c0      	nop			@ (mov r8, r8)
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
	...

0800ee4c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800ee50:	f7ff fe88 	bl	800eb64 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800ee54:	2200      	movs	r2, #0
 800ee56:	2100      	movs	r1, #0
 800ee58:	202c      	movs	r0, #44	@ 0x2c
 800ee5a:	f7ff fcde 	bl	800e81a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800ee5e:	2200      	movs	r2, #0
 800ee60:	2106      	movs	r1, #6
 800ee62:	202c      	movs	r0, #44	@ 0x2c
 800ee64:	f7ff fcc6 	bl	800e7f4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800ee68:	f7ff fd40 	bl	800e8ec <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	2103      	movs	r1, #3
 800ee70:	2036      	movs	r0, #54	@ 0x36
 800ee72:	f7ff fcbf 	bl	800e7f4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800ee76:	2001      	movs	r0, #1
 800ee78:	f000 f849 	bl	800ef0e <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800ee7c:	22f0      	movs	r2, #240	@ 0xf0
 800ee7e:	2103      	movs	r1, #3
 800ee80:	2036      	movs	r0, #54	@ 0x36
 800ee82:	f7ff fcb7 	bl	800e7f4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800ee86:	4b03      	ldr	r3, [pc, #12]	@ (800ee94 <dwt_softreset+0x48>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	755a      	strb	r2, [r3, #21]
}
 800ee8e:	46c0      	nop			@ (mov r8, r8)
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	200001f0 	.word	0x200001f0

0800ee98 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	0002      	movs	r2, r0
 800eea0:	1dfb      	adds	r3, r7, #7
 800eea2:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800eea4:	1dfb      	adds	r3, r7, #7
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	b25b      	sxtb	r3, r3
 800eeaa:	221f      	movs	r2, #31
 800eeac:	4013      	ands	r3, r2
 800eeae:	b25b      	sxtb	r3, r3
 800eeb0:	2260      	movs	r2, #96	@ 0x60
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	b25a      	sxtb	r2, r3
 800eeb6:	210f      	movs	r1, #15
 800eeb8:	187b      	adds	r3, r7, r1
 800eeba:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800eebc:	187b      	adds	r3, r7, r1
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	001a      	movs	r2, r3
 800eec2:	210e      	movs	r1, #14
 800eec4:	202b      	movs	r0, #43	@ 0x2b
 800eec6:	f7ff fc95 	bl	800e7f4 <dwt_write8bitoffsetreg>
}
 800eeca:	46c0      	nop			@ (mov r8, r8)
 800eecc:	46bd      	mov	sp, r7
 800eece:	b004      	add	sp, #16
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800eed8:	f000 f9e2 	bl	800f2a0 <port_GetEXT_IRQStatus>
 800eedc:	0003      	movs	r3, r0
 800eede:	607b      	str	r3, [r7, #4]

	if(s) {
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800eee6:	f000 f9cb 	bl	800f280 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800eeea:	687b      	ldr	r3, [r7, #4]
}
 800eeec:	0018      	movs	r0, r3
 800eeee:	46bd      	mov	sp, r7
 800eef0:	b002      	add	sp, #8
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d001      	beq.n	800ef06 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800ef02:	f000 f9c5 	bl	800f290 <port_EnableEXT_IRQ>
	}
}
 800ef06:	46c0      	nop			@ (mov r8, r8)
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	b002      	add	sp, #8
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	0018      	movs	r0, r3
 800ef1a:	f000 f8e2 	bl	800f0e2 <Sleep>
}
 800ef1e:	46c0      	nop			@ (mov r8, r8)
 800ef20:	46bd      	mov	sp, r7
 800ef22:	b002      	add	sp, #8
 800ef24:	bd80      	pop	{r7, pc}
	...

0800ef28 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800ef28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2a:	46d6      	mov	lr, sl
 800ef2c:	4646      	mov	r6, r8
 800ef2e:	464f      	mov	r7, r9
 800ef30:	b5c0      	push	{r6, r7, lr}
 800ef32:	4682      	mov	sl, r0
 800ef34:	4689      	mov	r9, r1
 800ef36:	0015      	movs	r5, r2
 800ef38:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800ef3a:	f7ff ffca 	bl	800eed2 <decamutexon>
 800ef3e:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800ef40:	4c14      	ldr	r4, [pc, #80]	@ (800ef94 <writetospi+0x6c>)
 800ef42:	0020      	movs	r0, r4
 800ef44:	f7f8 fc84 	bl	8007850 <HAL_SPI_GetState>
 800ef48:	2801      	cmp	r0, #1
 800ef4a:	d1fa      	bne.n	800ef42 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800ef4c:	308f      	adds	r0, #143	@ 0x8f
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2110      	movs	r1, #16
 800ef52:	05c0      	lsls	r0, r0, #23
 800ef54:	f7f5 fac5 	bl	80044e2 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800ef58:	2301      	movs	r3, #1
 800ef5a:	4652      	mov	r2, sl
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	0020      	movs	r0, r4
 800ef60:	425b      	negs	r3, r3
 800ef62:	f7f7 ffe1 	bl	8006f28 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800ef66:	2301      	movs	r3, #1
 800ef68:	4641      	mov	r1, r8
 800ef6a:	b2aa      	uxth	r2, r5
 800ef6c:	425b      	negs	r3, r3
 800ef6e:	0020      	movs	r0, r4
 800ef70:	f7f7 ffda 	bl	8006f28 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800ef74:	2090      	movs	r0, #144	@ 0x90
 800ef76:	2201      	movs	r2, #1
 800ef78:	2110      	movs	r1, #16
 800ef7a:	05c0      	lsls	r0, r0, #23
 800ef7c:	f7f5 fab1 	bl	80044e2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800ef80:	0030      	movs	r0, r6
 800ef82:	f7ff ffb7 	bl	800eef4 <decamutexoff>

    return 0;
} // end writetospi()
 800ef86:	2000      	movs	r0, #0
 800ef88:	bce0      	pop	{r5, r6, r7}
 800ef8a:	46ba      	mov	sl, r7
 800ef8c:	46b1      	mov	r9, r6
 800ef8e:	46a8      	mov	r8, r5
 800ef90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef92:	46c0      	nop			@ (mov r8, r8)
 800ef94:	2000041c 	.word	0x2000041c

0800ef98 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	46de      	mov	lr, fp
 800ef9c:	4656      	mov	r6, sl
 800ef9e:	464d      	mov	r5, r9
 800efa0:	4644      	mov	r4, r8
 800efa2:	b570      	push	{r4, r5, r6, lr}
 800efa4:	4688      	mov	r8, r1
 800efa6:	0006      	movs	r6, r0
 800efa8:	4691      	mov	r9, r2
 800efaa:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800efac:	f7ff ff91 	bl	800eed2 <decamutexon>
 800efb0:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800efb2:	4d18      	ldr	r5, [pc, #96]	@ (800f014 <readfromspi+0x7c>)
 800efb4:	0028      	movs	r0, r5
 800efb6:	f7f8 fc4b 	bl	8007850 <HAL_SPI_GetState>
 800efba:	2801      	cmp	r0, #1
 800efbc:	d1fa      	bne.n	800efb4 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800efbe:	308f      	adds	r0, #143	@ 0x8f
 800efc0:	2200      	movs	r2, #0
 800efc2:	2110      	movs	r1, #16
 800efc4:	05c0      	lsls	r0, r0, #23
 800efc6:	f7f5 fa8c 	bl	80044e2 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800efca:	2e00      	cmp	r6, #0
 800efcc:	d00b      	beq.n	800efe6 <readfromspi+0x4e>
 800efce:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800efd0:	4642      	mov	r2, r8
 800efd2:	2301      	movs	r3, #1
 800efd4:	1911      	adds	r1, r2, r4
 800efd6:	0028      	movs	r0, r5
 800efd8:	2201      	movs	r2, #1
 800efda:	425b      	negs	r3, r3
    for(i=0; i<headerLength; i++)
 800efdc:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800efde:	f7f7 ffa3 	bl	8006f28 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800efe2:	42b4      	cmp	r4, r6
 800efe4:	dbf4      	blt.n	800efd0 <readfromspi+0x38>
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 800efe6:	464b      	mov	r3, r9
 800efe8:	4659      	mov	r1, fp
 800efea:	0028      	movs	r0, r5
 800efec:	b29a      	uxth	r2, r3
 800efee:	2364      	movs	r3, #100	@ 0x64
 800eff0:	f7f8 f8fa 	bl	80071e8 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800eff4:	2090      	movs	r0, #144	@ 0x90
 800eff6:	2201      	movs	r2, #1
 800eff8:	2110      	movs	r1, #16
 800effa:	05c0      	lsls	r0, r0, #23
 800effc:	f7f5 fa71 	bl	80044e2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800f000:	4650      	mov	r0, sl
 800f002:	f7ff ff77 	bl	800eef4 <decamutexoff>

    return 0;
} // end readfromspi()
 800f006:	2000      	movs	r0, #0
 800f008:	bc78      	pop	{r3, r4, r5, r6}
 800f00a:	46b3      	mov	fp, r6
 800f00c:	46aa      	mov	sl, r5
 800f00e:	46a1      	mov	r9, r4
 800f010:	4698      	mov	r8, r3
 800f012:	bd70      	pop	{r4, r5, r6, pc}
 800f014:	2000041c 	.word	0x2000041c

0800f018 <__NVIC_EnableIRQ>:
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	0002      	movs	r2, r0
 800f020:	1dfb      	adds	r3, r7, #7
 800f022:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f024:	1dfb      	adds	r3, r7, #7
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b7f      	cmp	r3, #127	@ 0x7f
 800f02a:	d809      	bhi.n	800f040 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f02c:	1dfb      	adds	r3, r7, #7
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	001a      	movs	r2, r3
 800f032:	231f      	movs	r3, #31
 800f034:	401a      	ands	r2, r3
 800f036:	4b04      	ldr	r3, [pc, #16]	@ (800f048 <__NVIC_EnableIRQ+0x30>)
 800f038:	2101      	movs	r1, #1
 800f03a:	4091      	lsls	r1, r2
 800f03c:	000a      	movs	r2, r1
 800f03e:	601a      	str	r2, [r3, #0]
}
 800f040:	46c0      	nop			@ (mov r8, r8)
 800f042:	46bd      	mov	sp, r7
 800f044:	b002      	add	sp, #8
 800f046:	bd80      	pop	{r7, pc}
 800f048:	e000e100 	.word	0xe000e100

0800f04c <__NVIC_DisableIRQ>:
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	0002      	movs	r2, r0
 800f054:	1dfb      	adds	r3, r7, #7
 800f056:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f058:	1dfb      	adds	r3, r7, #7
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f05e:	d810      	bhi.n	800f082 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f060:	1dfb      	adds	r3, r7, #7
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	001a      	movs	r2, r3
 800f066:	231f      	movs	r3, #31
 800f068:	4013      	ands	r3, r2
 800f06a:	4908      	ldr	r1, [pc, #32]	@ (800f08c <__NVIC_DisableIRQ+0x40>)
 800f06c:	2201      	movs	r2, #1
 800f06e:	409a      	lsls	r2, r3
 800f070:	0013      	movs	r3, r2
 800f072:	2280      	movs	r2, #128	@ 0x80
 800f074:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f076:	f3bf 8f4f 	dsb	sy
}
 800f07a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f07c:	f3bf 8f6f 	isb	sy
}
 800f080:	46c0      	nop			@ (mov r8, r8)
}
 800f082:	46c0      	nop			@ (mov r8, r8)
 800f084:	46bd      	mov	sp, r7
 800f086:	b002      	add	sp, #8
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	46c0      	nop			@ (mov r8, r8)
 800f08c:	e000e100 	.word	0xe000e100

0800f090 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800f098:	2300      	movs	r3, #0
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	e014      	b.n	800f0c8 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60bb      	str	r3, [r7, #8]
 800f0a2:	e004      	b.n	800f0ae <usleep+0x1e>
        {
            __NOP();
 800f0a4:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800f0a6:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	60bb      	str	r3, [r7, #8]
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	0fd8      	lsrs	r0, r3, #31
 800f0b4:	17d1      	asrs	r1, r2, #31
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	4148      	adcs	r0, r1
 800f0ba:	0003      	movs	r3, r0
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1f0      	bne.n	800f0a4 <usleep+0x14>
    for(i=0;i<usec;i++)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	60fb      	str	r3, [r7, #12]
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	419b      	sbcs	r3, r3
 800f0d0:	425b      	negs	r3, r3
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1e2      	bne.n	800f09e <usleep+0xe>
        }
    }
    return 0;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	0018      	movs	r0, r3
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b004      	add	sp, #16
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	f7f4 facb 	bl	8003688 <HAL_Delay>
}
 800f0f2:	46c0      	nop			@ (mov r8, r8)
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	b002      	add	sp, #8
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800f104:	4a09      	ldr	r2, [pc, #36]	@ (800f12c <EXTI_GetITEnStatus+0x30>)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	095b      	lsrs	r3, r3, #5
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	211f      	movs	r1, #31
 800f112:	400b      	ands	r3, r1
 800f114:	40da      	lsrs	r2, r3
 800f116:	0013      	movs	r3, r2
 800f118:	2201      	movs	r2, #1
 800f11a:	4013      	ands	r3, r2
 800f11c:	1e5a      	subs	r2, r3, #1
 800f11e:	4193      	sbcs	r3, r2
 800f120:	b2db      	uxtb	r3, r3
}
 800f122:	0018      	movs	r0, r3
 800f124:	46bd      	mov	sp, r7
 800f126:	b002      	add	sp, #8
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	46c0      	nop			@ (mov r8, r8)
 800f12c:	e000e100 	.word	0xe000e100

0800f130 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f136:	1d3b      	adds	r3, r7, #4
 800f138:	2204      	movs	r2, #4
 800f13a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f13c:	1d3b      	adds	r3, r7, #4
 800f13e:	2211      	movs	r2, #17
 800f140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f142:	1d3b      	adds	r3, r7, #4
 800f144:	2200      	movs	r2, #0
 800f146:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f148:	1d3a      	adds	r2, r7, #4
 800f14a:	2390      	movs	r3, #144	@ 0x90
 800f14c:	05db      	lsls	r3, r3, #23
 800f14e:	0011      	movs	r1, r2
 800f150:	0018      	movs	r0, r3
 800f152:	f7f5 f831 	bl	80041b8 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800f156:	2390      	movs	r3, #144	@ 0x90
 800f158:	05db      	lsls	r3, r3, #23
 800f15a:	2200      	movs	r2, #0
 800f15c:	2104      	movs	r1, #4
 800f15e:	0018      	movs	r0, r3
 800f160:	f7f5 f9bf 	bl	80044e2 <HAL_GPIO_WritePin>

    usleep(1);
 800f164:	2001      	movs	r0, #1
 800f166:	f7ff ff93 	bl	800f090 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800f16a:	2000      	movs	r0, #0
 800f16c:	f000 f807 	bl	800f17e <setup_DW1000RSTnIRQ>



    Sleep(2);
 800f170:	2002      	movs	r0, #2
 800f172:	f7ff ffb6 	bl	800f0e2 <Sleep>
}
 800f176:	46c0      	nop			@ (mov r8, r8)
 800f178:	46bd      	mov	sp, r7
 800f17a:	b006      	add	sp, #24
 800f17c:	bd80      	pop	{r7, pc}

0800f17e <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b088      	sub	sp, #32
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d01a      	beq.n	800f1c2 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f18c:	210c      	movs	r1, #12
 800f18e:	187b      	adds	r3, r7, r1
 800f190:	2204      	movs	r2, #4
 800f192:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f194:	187b      	adds	r3, r7, r1
 800f196:	2288      	movs	r2, #136	@ 0x88
 800f198:	0352      	lsls	r2, r2, #13
 800f19a:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f19c:	187b      	adds	r3, r7, r1
 800f19e:	2200      	movs	r2, #0
 800f1a0:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f1a2:	187a      	adds	r2, r7, r1
 800f1a4:	2390      	movs	r3, #144	@ 0x90
 800f1a6:	05db      	lsls	r3, r3, #23
 800f1a8:	0011      	movs	r1, r2
 800f1aa:	0018      	movs	r0, r3
 800f1ac:	f7f5 f804 	bl	80041b8 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800f1b0:	2006      	movs	r0, #6
 800f1b2:	f7f4 fdbe 	bl	8003d32 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	2105      	movs	r1, #5
 800f1ba:	2006      	movs	r0, #6
 800f1bc:	f7f4 fda4 	bl	8003d08 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800f1c0:	e01d      	b.n	800f1fe <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800f1c2:	2006      	movs	r0, #6
 800f1c4:	f7f4 fdc5 	bl	8003d52 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800f1c8:	210c      	movs	r1, #12
 800f1ca:	187b      	adds	r3, r7, r1
 800f1cc:	2204      	movs	r2, #4
 800f1ce:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f1d0:	187b      	adds	r3, r7, r1
 800f1d2:	2211      	movs	r2, #17
 800f1d4:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1d6:	187b      	adds	r3, r7, r1
 800f1d8:	2200      	movs	r2, #0
 800f1da:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f1dc:	187b      	adds	r3, r7, r1
 800f1de:	2203      	movs	r2, #3
 800f1e0:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800f1e2:	187a      	adds	r2, r7, r1
 800f1e4:	2390      	movs	r3, #144	@ 0x90
 800f1e6:	05db      	lsls	r3, r3, #23
 800f1e8:	0011      	movs	r1, r2
 800f1ea:	0018      	movs	r0, r3
 800f1ec:	f7f4 ffe4 	bl	80041b8 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800f1f0:	2390      	movs	r3, #144	@ 0x90
 800f1f2:	05db      	lsls	r3, r3, #23
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	2104      	movs	r1, #4
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f7f5 f972 	bl	80044e2 <HAL_GPIO_WritePin>
}
 800f1fe:	46c0      	nop			@ (mov r8, r8)
 800f200:	46bd      	mov	sp, r7
 800f202:	b008      	add	sp, #32
 800f204:	bd80      	pop	{r7, pc}
	...

0800f208 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f20c:	4b04      	ldr	r3, [pc, #16]	@ (800f220 <port_set_dw1000_slowrate+0x18>)
 800f20e:	2218      	movs	r2, #24
 800f210:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f212:	4b03      	ldr	r3, [pc, #12]	@ (800f220 <port_set_dw1000_slowrate+0x18>)
 800f214:	0018      	movs	r0, r3
 800f216:	f7f7 fdcf 	bl	8006db8 <HAL_SPI_Init>
}
 800f21a:	46c0      	nop			@ (mov r8, r8)
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	2000041c 	.word	0x2000041c

0800f224 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f228:	4b04      	ldr	r3, [pc, #16]	@ (800f23c <port_set_dw1000_fastrate+0x18>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800f22e:	4b03      	ldr	r3, [pc, #12]	@ (800f23c <port_set_dw1000_fastrate+0x18>)
 800f230:	0018      	movs	r0, r3
 800f232:	f7f7 fdc1 	bl	8006db8 <HAL_SPI_Init>
}
 800f236:	46c0      	nop			@ (mov r8, r8)
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	2000041c 	.word	0x2000041c

0800f240 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	0002      	movs	r2, r0
 800f248:	1dbb      	adds	r3, r7, #6
 800f24a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800f24c:	1dbb      	adds	r3, r7, #6
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	2b20      	cmp	r3, #32
 800f252:	d101      	bne.n	800f258 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800f254:	f000 f804 	bl	800f260 <process_deca_irq>
    }
}
 800f258:	46c0      	nop			@ (mov r8, r8)
 800f25a:	46bd      	mov	sp, r7
 800f25c:	b002      	add	sp, #8
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800f264:	e002      	b.n	800f26c <process_deca_irq+0xc>
    {

        port_deca_isr();
 800f266:	4b05      	ldr	r3, [pc, #20]	@ (800f27c <process_deca_irq+0x1c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800f26c:	f000 f822 	bl	800f2b4 <port_CheckEXT_IRQ>
 800f270:	1e03      	subs	r3, r0, #0
 800f272:	d1f8      	bne.n	800f266 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800f274:	46c0      	nop			@ (mov r8, r8)
 800f276:	46c0      	nop			@ (mov r8, r8)
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20001c68 	.word	0x20001c68

0800f280 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800f284:	2007      	movs	r0, #7
 800f286:	f7ff fee1 	bl	800f04c <__NVIC_DisableIRQ>
}
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800f294:	2007      	movs	r0, #7
 800f296:	f7ff febf 	bl	800f018 <__NVIC_EnableIRQ>
}
 800f29a:	46c0      	nop			@ (mov r8, r8)
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800f2a4:	2007      	movs	r0, #7
 800f2a6:	f7ff ff29 	bl	800f0fc <EXTI_GetITEnStatus>
 800f2aa:	0003      	movs	r3, r0
}
 800f2ac:	0018      	movs	r0, r3
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
	...

0800f2b4 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800f2b8:	4b04      	ldr	r3, [pc, #16]	@ (800f2cc <port_CheckEXT_IRQ+0x18>)
 800f2ba:	2120      	movs	r1, #32
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f7f5 f8f3 	bl	80044a8 <HAL_GPIO_ReadPin>
 800f2c2:	0003      	movs	r3, r0
}
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	46c0      	nop			@ (mov r8, r8)
 800f2cc:	48000400 	.word	0x48000400

0800f2d0 <__cvt>:
 800f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d2:	001f      	movs	r7, r3
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	0016      	movs	r6, r2
 800f2d8:	b08b      	sub	sp, #44	@ 0x2c
 800f2da:	429f      	cmp	r7, r3
 800f2dc:	da04      	bge.n	800f2e8 <__cvt+0x18>
 800f2de:	2180      	movs	r1, #128	@ 0x80
 800f2e0:	0609      	lsls	r1, r1, #24
 800f2e2:	187b      	adds	r3, r7, r1
 800f2e4:	001f      	movs	r7, r3
 800f2e6:	232d      	movs	r3, #45	@ 0x2d
 800f2e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f2ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f2ec:	7013      	strb	r3, [r2, #0]
 800f2ee:	2320      	movs	r3, #32
 800f2f0:	2203      	movs	r2, #3
 800f2f2:	439d      	bics	r5, r3
 800f2f4:	2d46      	cmp	r5, #70	@ 0x46
 800f2f6:	d007      	beq.n	800f308 <__cvt+0x38>
 800f2f8:	002b      	movs	r3, r5
 800f2fa:	3b45      	subs	r3, #69	@ 0x45
 800f2fc:	4259      	negs	r1, r3
 800f2fe:	414b      	adcs	r3, r1
 800f300:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f302:	3a01      	subs	r2, #1
 800f304:	18cb      	adds	r3, r1, r3
 800f306:	9310      	str	r3, [sp, #64]	@ 0x40
 800f308:	ab09      	add	r3, sp, #36	@ 0x24
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	ab08      	add	r3, sp, #32
 800f30e:	9303      	str	r3, [sp, #12]
 800f310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f312:	9200      	str	r2, [sp, #0]
 800f314:	9302      	str	r3, [sp, #8]
 800f316:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f318:	0032      	movs	r2, r6
 800f31a:	9301      	str	r3, [sp, #4]
 800f31c:	003b      	movs	r3, r7
 800f31e:	f000 fe75 	bl	801000c <_dtoa_r>
 800f322:	0004      	movs	r4, r0
 800f324:	2d47      	cmp	r5, #71	@ 0x47
 800f326:	d11b      	bne.n	800f360 <__cvt+0x90>
 800f328:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f32a:	07db      	lsls	r3, r3, #31
 800f32c:	d511      	bpl.n	800f352 <__cvt+0x82>
 800f32e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f330:	18c3      	adds	r3, r0, r3
 800f332:	9307      	str	r3, [sp, #28]
 800f334:	2200      	movs	r2, #0
 800f336:	2300      	movs	r3, #0
 800f338:	0030      	movs	r0, r6
 800f33a:	0039      	movs	r1, r7
 800f33c:	f7f1 f886 	bl	800044c <__aeabi_dcmpeq>
 800f340:	2800      	cmp	r0, #0
 800f342:	d001      	beq.n	800f348 <__cvt+0x78>
 800f344:	9b07      	ldr	r3, [sp, #28]
 800f346:	9309      	str	r3, [sp, #36]	@ 0x24
 800f348:	2230      	movs	r2, #48	@ 0x30
 800f34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f34c:	9907      	ldr	r1, [sp, #28]
 800f34e:	428b      	cmp	r3, r1
 800f350:	d320      	bcc.n	800f394 <__cvt+0xc4>
 800f352:	0020      	movs	r0, r4
 800f354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f356:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f358:	1b1b      	subs	r3, r3, r4
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	b00b      	add	sp, #44	@ 0x2c
 800f35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f362:	18c3      	adds	r3, r0, r3
 800f364:	9307      	str	r3, [sp, #28]
 800f366:	2d46      	cmp	r5, #70	@ 0x46
 800f368:	d1e4      	bne.n	800f334 <__cvt+0x64>
 800f36a:	7803      	ldrb	r3, [r0, #0]
 800f36c:	2b30      	cmp	r3, #48	@ 0x30
 800f36e:	d10c      	bne.n	800f38a <__cvt+0xba>
 800f370:	2200      	movs	r2, #0
 800f372:	2300      	movs	r3, #0
 800f374:	0030      	movs	r0, r6
 800f376:	0039      	movs	r1, r7
 800f378:	f7f1 f868 	bl	800044c <__aeabi_dcmpeq>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d104      	bne.n	800f38a <__cvt+0xba>
 800f380:	2301      	movs	r3, #1
 800f382:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f384:	1a9b      	subs	r3, r3, r2
 800f386:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f388:	6013      	str	r3, [r2, #0]
 800f38a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f38c:	9a07      	ldr	r2, [sp, #28]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	18d3      	adds	r3, r2, r3
 800f392:	e7ce      	b.n	800f332 <__cvt+0x62>
 800f394:	1c59      	adds	r1, r3, #1
 800f396:	9109      	str	r1, [sp, #36]	@ 0x24
 800f398:	701a      	strb	r2, [r3, #0]
 800f39a:	e7d6      	b.n	800f34a <__cvt+0x7a>

0800f39c <__exponent>:
 800f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f39e:	232b      	movs	r3, #43	@ 0x2b
 800f3a0:	b085      	sub	sp, #20
 800f3a2:	0005      	movs	r5, r0
 800f3a4:	1e0c      	subs	r4, r1, #0
 800f3a6:	7002      	strb	r2, [r0, #0]
 800f3a8:	da01      	bge.n	800f3ae <__exponent+0x12>
 800f3aa:	424c      	negs	r4, r1
 800f3ac:	3302      	adds	r3, #2
 800f3ae:	706b      	strb	r3, [r5, #1]
 800f3b0:	2c09      	cmp	r4, #9
 800f3b2:	dd2c      	ble.n	800f40e <__exponent+0x72>
 800f3b4:	ab02      	add	r3, sp, #8
 800f3b6:	1dde      	adds	r6, r3, #7
 800f3b8:	0020      	movs	r0, r4
 800f3ba:	210a      	movs	r1, #10
 800f3bc:	f7f1 f830 	bl	8000420 <__aeabi_idivmod>
 800f3c0:	0037      	movs	r7, r6
 800f3c2:	3130      	adds	r1, #48	@ 0x30
 800f3c4:	3e01      	subs	r6, #1
 800f3c6:	0020      	movs	r0, r4
 800f3c8:	7031      	strb	r1, [r6, #0]
 800f3ca:	210a      	movs	r1, #10
 800f3cc:	9401      	str	r4, [sp, #4]
 800f3ce:	f7f0 ff41 	bl	8000254 <__divsi3>
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	0004      	movs	r4, r0
 800f3d6:	2b63      	cmp	r3, #99	@ 0x63
 800f3d8:	dcee      	bgt.n	800f3b8 <__exponent+0x1c>
 800f3da:	1eba      	subs	r2, r7, #2
 800f3dc:	1ca8      	adds	r0, r5, #2
 800f3de:	0001      	movs	r1, r0
 800f3e0:	0013      	movs	r3, r2
 800f3e2:	3430      	adds	r4, #48	@ 0x30
 800f3e4:	7014      	strb	r4, [r2, #0]
 800f3e6:	ac02      	add	r4, sp, #8
 800f3e8:	3407      	adds	r4, #7
 800f3ea:	429c      	cmp	r4, r3
 800f3ec:	d80a      	bhi.n	800f404 <__exponent+0x68>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	4294      	cmp	r4, r2
 800f3f2:	d303      	bcc.n	800f3fc <__exponent+0x60>
 800f3f4:	3309      	adds	r3, #9
 800f3f6:	aa02      	add	r2, sp, #8
 800f3f8:	189b      	adds	r3, r3, r2
 800f3fa:	1bdb      	subs	r3, r3, r7
 800f3fc:	18c0      	adds	r0, r0, r3
 800f3fe:	1b40      	subs	r0, r0, r5
 800f400:	b005      	add	sp, #20
 800f402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f404:	781c      	ldrb	r4, [r3, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	700c      	strb	r4, [r1, #0]
 800f40a:	3101      	adds	r1, #1
 800f40c:	e7eb      	b.n	800f3e6 <__exponent+0x4a>
 800f40e:	2330      	movs	r3, #48	@ 0x30
 800f410:	18e4      	adds	r4, r4, r3
 800f412:	70ab      	strb	r3, [r5, #2]
 800f414:	1d28      	adds	r0, r5, #4
 800f416:	70ec      	strb	r4, [r5, #3]
 800f418:	e7f1      	b.n	800f3fe <__exponent+0x62>
	...

0800f41c <_printf_float>:
 800f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41e:	b097      	sub	sp, #92	@ 0x5c
 800f420:	000d      	movs	r5, r1
 800f422:	920a      	str	r2, [sp, #40]	@ 0x28
 800f424:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f426:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f428:	9009      	str	r0, [sp, #36]	@ 0x24
 800f42a:	f000 fcd7 	bl	800fddc <_localeconv_r>
 800f42e:	6803      	ldr	r3, [r0, #0]
 800f430:	0018      	movs	r0, r3
 800f432:	930d      	str	r3, [sp, #52]	@ 0x34
 800f434:	f7f0 fe68 	bl	8000108 <strlen>
 800f438:	2300      	movs	r3, #0
 800f43a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f43c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f43e:	7e2b      	ldrb	r3, [r5, #24]
 800f440:	2207      	movs	r2, #7
 800f442:	930c      	str	r3, [sp, #48]	@ 0x30
 800f444:	682b      	ldr	r3, [r5, #0]
 800f446:	930e      	str	r3, [sp, #56]	@ 0x38
 800f448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	05c9      	lsls	r1, r1, #23
 800f44e:	d545      	bpl.n	800f4dc <_printf_float+0xc0>
 800f450:	189b      	adds	r3, r3, r2
 800f452:	4393      	bics	r3, r2
 800f454:	001a      	movs	r2, r3
 800f456:	3208      	adds	r2, #8
 800f458:	6022      	str	r2, [r4, #0]
 800f45a:	2201      	movs	r2, #1
 800f45c:	681e      	ldr	r6, [r3, #0]
 800f45e:	685f      	ldr	r7, [r3, #4]
 800f460:	007b      	lsls	r3, r7, #1
 800f462:	085b      	lsrs	r3, r3, #1
 800f464:	9311      	str	r3, [sp, #68]	@ 0x44
 800f466:	9610      	str	r6, [sp, #64]	@ 0x40
 800f468:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f46a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f46c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f46e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f470:	4ba7      	ldr	r3, [pc, #668]	@ (800f710 <_printf_float+0x2f4>)
 800f472:	4252      	negs	r2, r2
 800f474:	f7f2 ff08 	bl	8002288 <__aeabi_dcmpun>
 800f478:	2800      	cmp	r0, #0
 800f47a:	d131      	bne.n	800f4e0 <_printf_float+0xc4>
 800f47c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f47e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f480:	2201      	movs	r2, #1
 800f482:	4ba3      	ldr	r3, [pc, #652]	@ (800f710 <_printf_float+0x2f4>)
 800f484:	4252      	negs	r2, r2
 800f486:	f7f0 fff1 	bl	800046c <__aeabi_dcmple>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d128      	bne.n	800f4e0 <_printf_float+0xc4>
 800f48e:	2200      	movs	r2, #0
 800f490:	2300      	movs	r3, #0
 800f492:	0030      	movs	r0, r6
 800f494:	0039      	movs	r1, r7
 800f496:	f7f0 ffdf 	bl	8000458 <__aeabi_dcmplt>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d003      	beq.n	800f4a6 <_printf_float+0x8a>
 800f49e:	002b      	movs	r3, r5
 800f4a0:	222d      	movs	r2, #45	@ 0x2d
 800f4a2:	3343      	adds	r3, #67	@ 0x43
 800f4a4:	701a      	strb	r2, [r3, #0]
 800f4a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4a8:	4f9a      	ldr	r7, [pc, #616]	@ (800f714 <_printf_float+0x2f8>)
 800f4aa:	2b47      	cmp	r3, #71	@ 0x47
 800f4ac:	d800      	bhi.n	800f4b0 <_printf_float+0x94>
 800f4ae:	4f9a      	ldr	r7, [pc, #616]	@ (800f718 <_printf_float+0x2fc>)
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	2400      	movs	r4, #0
 800f4b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4b6:	612b      	str	r3, [r5, #16]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	439a      	bics	r2, r3
 800f4bc:	602a      	str	r2, [r5, #0]
 800f4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4c0:	0029      	movs	r1, r5
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4c8:	aa15      	add	r2, sp, #84	@ 0x54
 800f4ca:	f000 f9e5 	bl	800f898 <_printf_common>
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	d000      	beq.n	800f4d4 <_printf_float+0xb8>
 800f4d2:	e09e      	b.n	800f612 <_printf_float+0x1f6>
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	4240      	negs	r0, r0
 800f4d8:	b017      	add	sp, #92	@ 0x5c
 800f4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4dc:	3307      	adds	r3, #7
 800f4de:	e7b8      	b.n	800f452 <_printf_float+0x36>
 800f4e0:	0032      	movs	r2, r6
 800f4e2:	003b      	movs	r3, r7
 800f4e4:	0030      	movs	r0, r6
 800f4e6:	0039      	movs	r1, r7
 800f4e8:	f7f2 fece 	bl	8002288 <__aeabi_dcmpun>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d00b      	beq.n	800f508 <_printf_float+0xec>
 800f4f0:	2f00      	cmp	r7, #0
 800f4f2:	da03      	bge.n	800f4fc <_printf_float+0xe0>
 800f4f4:	002b      	movs	r3, r5
 800f4f6:	222d      	movs	r2, #45	@ 0x2d
 800f4f8:	3343      	adds	r3, #67	@ 0x43
 800f4fa:	701a      	strb	r2, [r3, #0]
 800f4fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4fe:	4f87      	ldr	r7, [pc, #540]	@ (800f71c <_printf_float+0x300>)
 800f500:	2b47      	cmp	r3, #71	@ 0x47
 800f502:	d8d5      	bhi.n	800f4b0 <_printf_float+0x94>
 800f504:	4f86      	ldr	r7, [pc, #536]	@ (800f720 <_printf_float+0x304>)
 800f506:	e7d3      	b.n	800f4b0 <_printf_float+0x94>
 800f508:	2220      	movs	r2, #32
 800f50a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f50c:	686b      	ldr	r3, [r5, #4]
 800f50e:	4394      	bics	r4, r2
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	d146      	bne.n	800f5a2 <_printf_float+0x186>
 800f514:	3307      	adds	r3, #7
 800f516:	606b      	str	r3, [r5, #4]
 800f518:	2380      	movs	r3, #128	@ 0x80
 800f51a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	4313      	orrs	r3, r2
 800f520:	2200      	movs	r2, #0
 800f522:	602b      	str	r3, [r5, #0]
 800f524:	9206      	str	r2, [sp, #24]
 800f526:	aa14      	add	r2, sp, #80	@ 0x50
 800f528:	9205      	str	r2, [sp, #20]
 800f52a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f52c:	a90a      	add	r1, sp, #40	@ 0x28
 800f52e:	9204      	str	r2, [sp, #16]
 800f530:	aa13      	add	r2, sp, #76	@ 0x4c
 800f532:	9203      	str	r2, [sp, #12]
 800f534:	2223      	movs	r2, #35	@ 0x23
 800f536:	1852      	adds	r2, r2, r1
 800f538:	9202      	str	r2, [sp, #8]
 800f53a:	9301      	str	r3, [sp, #4]
 800f53c:	686b      	ldr	r3, [r5, #4]
 800f53e:	0032      	movs	r2, r6
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f544:	003b      	movs	r3, r7
 800f546:	f7ff fec3 	bl	800f2d0 <__cvt>
 800f54a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f54c:	0007      	movs	r7, r0
 800f54e:	2c47      	cmp	r4, #71	@ 0x47
 800f550:	d12d      	bne.n	800f5ae <_printf_float+0x192>
 800f552:	1cd3      	adds	r3, r2, #3
 800f554:	db02      	blt.n	800f55c <_printf_float+0x140>
 800f556:	686b      	ldr	r3, [r5, #4]
 800f558:	429a      	cmp	r2, r3
 800f55a:	dd47      	ble.n	800f5ec <_printf_float+0x1d0>
 800f55c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f55e:	3b02      	subs	r3, #2
 800f560:	b2db      	uxtb	r3, r3
 800f562:	930c      	str	r3, [sp, #48]	@ 0x30
 800f564:	0028      	movs	r0, r5
 800f566:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f568:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f56a:	3901      	subs	r1, #1
 800f56c:	3050      	adds	r0, #80	@ 0x50
 800f56e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f570:	f7ff ff14 	bl	800f39c <__exponent>
 800f574:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f576:	0004      	movs	r4, r0
 800f578:	1813      	adds	r3, r2, r0
 800f57a:	612b      	str	r3, [r5, #16]
 800f57c:	2a01      	cmp	r2, #1
 800f57e:	dc02      	bgt.n	800f586 <_printf_float+0x16a>
 800f580:	682a      	ldr	r2, [r5, #0]
 800f582:	07d2      	lsls	r2, r2, #31
 800f584:	d501      	bpl.n	800f58a <_printf_float+0x16e>
 800f586:	3301      	adds	r3, #1
 800f588:	612b      	str	r3, [r5, #16]
 800f58a:	2323      	movs	r3, #35	@ 0x23
 800f58c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f58e:	189b      	adds	r3, r3, r2
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d100      	bne.n	800f598 <_printf_float+0x17c>
 800f596:	e792      	b.n	800f4be <_printf_float+0xa2>
 800f598:	002b      	movs	r3, r5
 800f59a:	222d      	movs	r2, #45	@ 0x2d
 800f59c:	3343      	adds	r3, #67	@ 0x43
 800f59e:	701a      	strb	r2, [r3, #0]
 800f5a0:	e78d      	b.n	800f4be <_printf_float+0xa2>
 800f5a2:	2c47      	cmp	r4, #71	@ 0x47
 800f5a4:	d1b8      	bne.n	800f518 <_printf_float+0xfc>
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1b6      	bne.n	800f518 <_printf_float+0xfc>
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	e7b3      	b.n	800f516 <_printf_float+0xfa>
 800f5ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5b0:	2b65      	cmp	r3, #101	@ 0x65
 800f5b2:	d9d7      	bls.n	800f564 <_printf_float+0x148>
 800f5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5b6:	2b66      	cmp	r3, #102	@ 0x66
 800f5b8:	d11a      	bne.n	800f5f0 <_printf_float+0x1d4>
 800f5ba:	686b      	ldr	r3, [r5, #4]
 800f5bc:	2a00      	cmp	r2, #0
 800f5be:	dd09      	ble.n	800f5d4 <_printf_float+0x1b8>
 800f5c0:	612a      	str	r2, [r5, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d102      	bne.n	800f5cc <_printf_float+0x1b0>
 800f5c6:	6829      	ldr	r1, [r5, #0]
 800f5c8:	07c9      	lsls	r1, r1, #31
 800f5ca:	d50b      	bpl.n	800f5e4 <_printf_float+0x1c8>
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	189b      	adds	r3, r3, r2
 800f5d0:	612b      	str	r3, [r5, #16]
 800f5d2:	e007      	b.n	800f5e4 <_printf_float+0x1c8>
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d103      	bne.n	800f5e0 <_printf_float+0x1c4>
 800f5d8:	2201      	movs	r2, #1
 800f5da:	6829      	ldr	r1, [r5, #0]
 800f5dc:	4211      	tst	r1, r2
 800f5de:	d000      	beq.n	800f5e2 <_printf_float+0x1c6>
 800f5e0:	1c9a      	adds	r2, r3, #2
 800f5e2:	612a      	str	r2, [r5, #16]
 800f5e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5e6:	2400      	movs	r4, #0
 800f5e8:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f5ea:	e7ce      	b.n	800f58a <_printf_float+0x16e>
 800f5ec:	2367      	movs	r3, #103	@ 0x67
 800f5ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800f5f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f5f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f5f4:	4299      	cmp	r1, r3
 800f5f6:	db06      	blt.n	800f606 <_printf_float+0x1ea>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	6129      	str	r1, [r5, #16]
 800f5fc:	07db      	lsls	r3, r3, #31
 800f5fe:	d5f1      	bpl.n	800f5e4 <_printf_float+0x1c8>
 800f600:	3101      	adds	r1, #1
 800f602:	6129      	str	r1, [r5, #16]
 800f604:	e7ee      	b.n	800f5e4 <_printf_float+0x1c8>
 800f606:	2201      	movs	r2, #1
 800f608:	2900      	cmp	r1, #0
 800f60a:	dce0      	bgt.n	800f5ce <_printf_float+0x1b2>
 800f60c:	1892      	adds	r2, r2, r2
 800f60e:	1a52      	subs	r2, r2, r1
 800f610:	e7dd      	b.n	800f5ce <_printf_float+0x1b2>
 800f612:	682a      	ldr	r2, [r5, #0]
 800f614:	0553      	lsls	r3, r2, #21
 800f616:	d408      	bmi.n	800f62a <_printf_float+0x20e>
 800f618:	692b      	ldr	r3, [r5, #16]
 800f61a:	003a      	movs	r2, r7
 800f61c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f61e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f620:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f622:	47a0      	blx	r4
 800f624:	3001      	adds	r0, #1
 800f626:	d129      	bne.n	800f67c <_printf_float+0x260>
 800f628:	e754      	b.n	800f4d4 <_printf_float+0xb8>
 800f62a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f62c:	2b65      	cmp	r3, #101	@ 0x65
 800f62e:	d800      	bhi.n	800f632 <_printf_float+0x216>
 800f630:	e0db      	b.n	800f7ea <_printf_float+0x3ce>
 800f632:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f634:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f636:	2200      	movs	r2, #0
 800f638:	2300      	movs	r3, #0
 800f63a:	f7f0 ff07 	bl	800044c <__aeabi_dcmpeq>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d033      	beq.n	800f6aa <_printf_float+0x28e>
 800f642:	2301      	movs	r3, #1
 800f644:	4a37      	ldr	r2, [pc, #220]	@ (800f724 <_printf_float+0x308>)
 800f646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f648:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f64a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f64c:	47a0      	blx	r4
 800f64e:	3001      	adds	r0, #1
 800f650:	d100      	bne.n	800f654 <_printf_float+0x238>
 800f652:	e73f      	b.n	800f4d4 <_printf_float+0xb8>
 800f654:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f656:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f658:	42b3      	cmp	r3, r6
 800f65a:	db02      	blt.n	800f662 <_printf_float+0x246>
 800f65c:	682b      	ldr	r3, [r5, #0]
 800f65e:	07db      	lsls	r3, r3, #31
 800f660:	d50c      	bpl.n	800f67c <_printf_float+0x260>
 800f662:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f666:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f668:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f66c:	47a0      	blx	r4
 800f66e:	2400      	movs	r4, #0
 800f670:	3001      	adds	r0, #1
 800f672:	d100      	bne.n	800f676 <_printf_float+0x25a>
 800f674:	e72e      	b.n	800f4d4 <_printf_float+0xb8>
 800f676:	1e73      	subs	r3, r6, #1
 800f678:	42a3      	cmp	r3, r4
 800f67a:	dc0a      	bgt.n	800f692 <_printf_float+0x276>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	079b      	lsls	r3, r3, #30
 800f680:	d500      	bpl.n	800f684 <_printf_float+0x268>
 800f682:	e106      	b.n	800f892 <_printf_float+0x476>
 800f684:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f686:	68e8      	ldr	r0, [r5, #12]
 800f688:	4298      	cmp	r0, r3
 800f68a:	db00      	blt.n	800f68e <_printf_float+0x272>
 800f68c:	e724      	b.n	800f4d8 <_printf_float+0xbc>
 800f68e:	0018      	movs	r0, r3
 800f690:	e722      	b.n	800f4d8 <_printf_float+0xbc>
 800f692:	002a      	movs	r2, r5
 800f694:	2301      	movs	r3, #1
 800f696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f698:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f69a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f69c:	321a      	adds	r2, #26
 800f69e:	47b8      	blx	r7
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	d100      	bne.n	800f6a6 <_printf_float+0x28a>
 800f6a4:	e716      	b.n	800f4d4 <_printf_float+0xb8>
 800f6a6:	3401      	adds	r4, #1
 800f6a8:	e7e5      	b.n	800f676 <_printf_float+0x25a>
 800f6aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dc3b      	bgt.n	800f728 <_printf_float+0x30c>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800f724 <_printf_float+0x308>)
 800f6b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f6ba:	47a0      	blx	r4
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d100      	bne.n	800f6c2 <_printf_float+0x2a6>
 800f6c0:	e708      	b.n	800f4d4 <_printf_float+0xb8>
 800f6c2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f6c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6c6:	4333      	orrs	r3, r6
 800f6c8:	d102      	bne.n	800f6d0 <_printf_float+0x2b4>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	07db      	lsls	r3, r3, #31
 800f6ce:	d5d5      	bpl.n	800f67c <_printf_float+0x260>
 800f6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f6d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f6da:	47a0      	blx	r4
 800f6dc:	2300      	movs	r3, #0
 800f6de:	3001      	adds	r0, #1
 800f6e0:	d100      	bne.n	800f6e4 <_printf_float+0x2c8>
 800f6e2:	e6f7      	b.n	800f4d4 <_printf_float+0xb8>
 800f6e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f6ea:	425b      	negs	r3, r3
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	dc01      	bgt.n	800f6f4 <_printf_float+0x2d8>
 800f6f0:	0033      	movs	r3, r6
 800f6f2:	e792      	b.n	800f61a <_printf_float+0x1fe>
 800f6f4:	002a      	movs	r2, r5
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f6fe:	321a      	adds	r2, #26
 800f700:	47a0      	blx	r4
 800f702:	3001      	adds	r0, #1
 800f704:	d100      	bne.n	800f708 <_printf_float+0x2ec>
 800f706:	e6e5      	b.n	800f4d4 <_printf_float+0xb8>
 800f708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f70a:	3301      	adds	r3, #1
 800f70c:	e7ea      	b.n	800f6e4 <_printf_float+0x2c8>
 800f70e:	46c0      	nop			@ (mov r8, r8)
 800f710:	7fefffff 	.word	0x7fefffff
 800f714:	08011ff2 	.word	0x08011ff2
 800f718:	08011fee 	.word	0x08011fee
 800f71c:	08011ffa 	.word	0x08011ffa
 800f720:	08011ff6 	.word	0x08011ff6
 800f724:	08011ffe 	.word	0x08011ffe
 800f728:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f72a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f72c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f72e:	429e      	cmp	r6, r3
 800f730:	dd00      	ble.n	800f734 <_printf_float+0x318>
 800f732:	001e      	movs	r6, r3
 800f734:	2e00      	cmp	r6, #0
 800f736:	dc31      	bgt.n	800f79c <_printf_float+0x380>
 800f738:	43f3      	mvns	r3, r6
 800f73a:	2400      	movs	r4, #0
 800f73c:	17db      	asrs	r3, r3, #31
 800f73e:	4033      	ands	r3, r6
 800f740:	930e      	str	r3, [sp, #56]	@ 0x38
 800f742:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f746:	1af3      	subs	r3, r6, r3
 800f748:	42a3      	cmp	r3, r4
 800f74a:	dc30      	bgt.n	800f7ae <_printf_float+0x392>
 800f74c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f74e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f750:	429a      	cmp	r2, r3
 800f752:	dc38      	bgt.n	800f7c6 <_printf_float+0x3aa>
 800f754:	682b      	ldr	r3, [r5, #0]
 800f756:	07db      	lsls	r3, r3, #31
 800f758:	d435      	bmi.n	800f7c6 <_printf_float+0x3aa>
 800f75a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f75c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f75e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f760:	1b9b      	subs	r3, r3, r6
 800f762:	1b14      	subs	r4, r2, r4
 800f764:	429c      	cmp	r4, r3
 800f766:	dd00      	ble.n	800f76a <_printf_float+0x34e>
 800f768:	001c      	movs	r4, r3
 800f76a:	2c00      	cmp	r4, #0
 800f76c:	dc34      	bgt.n	800f7d8 <_printf_float+0x3bc>
 800f76e:	43e3      	mvns	r3, r4
 800f770:	2600      	movs	r6, #0
 800f772:	17db      	asrs	r3, r3, #31
 800f774:	401c      	ands	r4, r3
 800f776:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f778:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	1b1b      	subs	r3, r3, r4
 800f77e:	42b3      	cmp	r3, r6
 800f780:	dc00      	bgt.n	800f784 <_printf_float+0x368>
 800f782:	e77b      	b.n	800f67c <_printf_float+0x260>
 800f784:	002a      	movs	r2, r5
 800f786:	2301      	movs	r3, #1
 800f788:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f78c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f78e:	321a      	adds	r2, #26
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	d100      	bne.n	800f798 <_printf_float+0x37c>
 800f796:	e69d      	b.n	800f4d4 <_printf_float+0xb8>
 800f798:	3601      	adds	r6, #1
 800f79a:	e7ec      	b.n	800f776 <_printf_float+0x35a>
 800f79c:	0033      	movs	r3, r6
 800f79e:	003a      	movs	r2, r7
 800f7a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7a6:	47a0      	blx	r4
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	d1c5      	bne.n	800f738 <_printf_float+0x31c>
 800f7ac:	e692      	b.n	800f4d4 <_printf_float+0xb8>
 800f7ae:	002a      	movs	r2, r5
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f7b8:	321a      	adds	r2, #26
 800f7ba:	47b0      	blx	r6
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d100      	bne.n	800f7c2 <_printf_float+0x3a6>
 800f7c0:	e688      	b.n	800f4d4 <_printf_float+0xb8>
 800f7c2:	3401      	adds	r4, #1
 800f7c4:	e7bd      	b.n	800f742 <_printf_float+0x326>
 800f7c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7d0:	47a0      	blx	r4
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	d1c1      	bne.n	800f75a <_printf_float+0x33e>
 800f7d6:	e67d      	b.n	800f4d4 <_printf_float+0xb8>
 800f7d8:	19ba      	adds	r2, r7, r6
 800f7da:	0023      	movs	r3, r4
 800f7dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f7e2:	47b0      	blx	r6
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d1c2      	bne.n	800f76e <_printf_float+0x352>
 800f7e8:	e674      	b.n	800f4d4 <_printf_float+0xb8>
 800f7ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f7ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	dc02      	bgt.n	800f7f8 <_printf_float+0x3dc>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	421a      	tst	r2, r3
 800f7f6:	d039      	beq.n	800f86c <_printf_float+0x450>
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	003a      	movs	r2, r7
 800f7fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f800:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f802:	47b0      	blx	r6
 800f804:	3001      	adds	r0, #1
 800f806:	d100      	bne.n	800f80a <_printf_float+0x3ee>
 800f808:	e664      	b.n	800f4d4 <_printf_float+0xb8>
 800f80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f80c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f80e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f810:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f812:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f814:	47b0      	blx	r6
 800f816:	3001      	adds	r0, #1
 800f818:	d100      	bne.n	800f81c <_printf_float+0x400>
 800f81a:	e65b      	b.n	800f4d4 <_printf_float+0xb8>
 800f81c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f81e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f822:	2200      	movs	r2, #0
 800f824:	3b01      	subs	r3, #1
 800f826:	930c      	str	r3, [sp, #48]	@ 0x30
 800f828:	2300      	movs	r3, #0
 800f82a:	f7f0 fe0f 	bl	800044c <__aeabi_dcmpeq>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d11a      	bne.n	800f868 <_printf_float+0x44c>
 800f832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f834:	1c7a      	adds	r2, r7, #1
 800f836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f838:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f83a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f83c:	47b0      	blx	r6
 800f83e:	3001      	adds	r0, #1
 800f840:	d10e      	bne.n	800f860 <_printf_float+0x444>
 800f842:	e647      	b.n	800f4d4 <_printf_float+0xb8>
 800f844:	002a      	movs	r2, r5
 800f846:	2301      	movs	r3, #1
 800f848:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f84c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f84e:	321a      	adds	r2, #26
 800f850:	47b8      	blx	r7
 800f852:	3001      	adds	r0, #1
 800f854:	d100      	bne.n	800f858 <_printf_float+0x43c>
 800f856:	e63d      	b.n	800f4d4 <_printf_float+0xb8>
 800f858:	3601      	adds	r6, #1
 800f85a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f85c:	429e      	cmp	r6, r3
 800f85e:	dbf1      	blt.n	800f844 <_printf_float+0x428>
 800f860:	002a      	movs	r2, r5
 800f862:	0023      	movs	r3, r4
 800f864:	3250      	adds	r2, #80	@ 0x50
 800f866:	e6d9      	b.n	800f61c <_printf_float+0x200>
 800f868:	2600      	movs	r6, #0
 800f86a:	e7f6      	b.n	800f85a <_printf_float+0x43e>
 800f86c:	003a      	movs	r2, r7
 800f86e:	e7e2      	b.n	800f836 <_printf_float+0x41a>
 800f870:	002a      	movs	r2, r5
 800f872:	2301      	movs	r3, #1
 800f874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f878:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f87a:	3219      	adds	r2, #25
 800f87c:	47b0      	blx	r6
 800f87e:	3001      	adds	r0, #1
 800f880:	d100      	bne.n	800f884 <_printf_float+0x468>
 800f882:	e627      	b.n	800f4d4 <_printf_float+0xb8>
 800f884:	3401      	adds	r4, #1
 800f886:	68eb      	ldr	r3, [r5, #12]
 800f888:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	42a3      	cmp	r3, r4
 800f88e:	dcef      	bgt.n	800f870 <_printf_float+0x454>
 800f890:	e6f8      	b.n	800f684 <_printf_float+0x268>
 800f892:	2400      	movs	r4, #0
 800f894:	e7f7      	b.n	800f886 <_printf_float+0x46a>
 800f896:	46c0      	nop			@ (mov r8, r8)

0800f898 <_printf_common>:
 800f898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f89a:	0016      	movs	r6, r2
 800f89c:	9301      	str	r3, [sp, #4]
 800f89e:	688a      	ldr	r2, [r1, #8]
 800f8a0:	690b      	ldr	r3, [r1, #16]
 800f8a2:	000c      	movs	r4, r1
 800f8a4:	9000      	str	r0, [sp, #0]
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	da00      	bge.n	800f8ac <_printf_common+0x14>
 800f8aa:	0013      	movs	r3, r2
 800f8ac:	0022      	movs	r2, r4
 800f8ae:	6033      	str	r3, [r6, #0]
 800f8b0:	3243      	adds	r2, #67	@ 0x43
 800f8b2:	7812      	ldrb	r2, [r2, #0]
 800f8b4:	2a00      	cmp	r2, #0
 800f8b6:	d001      	beq.n	800f8bc <_printf_common+0x24>
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	6033      	str	r3, [r6, #0]
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	069b      	lsls	r3, r3, #26
 800f8c0:	d502      	bpl.n	800f8c8 <_printf_common+0x30>
 800f8c2:	6833      	ldr	r3, [r6, #0]
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	6033      	str	r3, [r6, #0]
 800f8c8:	6822      	ldr	r2, [r4, #0]
 800f8ca:	2306      	movs	r3, #6
 800f8cc:	0015      	movs	r5, r2
 800f8ce:	401d      	ands	r5, r3
 800f8d0:	421a      	tst	r2, r3
 800f8d2:	d027      	beq.n	800f924 <_printf_common+0x8c>
 800f8d4:	0023      	movs	r3, r4
 800f8d6:	3343      	adds	r3, #67	@ 0x43
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	1e5a      	subs	r2, r3, #1
 800f8dc:	4193      	sbcs	r3, r2
 800f8de:	6822      	ldr	r2, [r4, #0]
 800f8e0:	0692      	lsls	r2, r2, #26
 800f8e2:	d430      	bmi.n	800f946 <_printf_common+0xae>
 800f8e4:	0022      	movs	r2, r4
 800f8e6:	9901      	ldr	r1, [sp, #4]
 800f8e8:	9800      	ldr	r0, [sp, #0]
 800f8ea:	9d08      	ldr	r5, [sp, #32]
 800f8ec:	3243      	adds	r2, #67	@ 0x43
 800f8ee:	47a8      	blx	r5
 800f8f0:	3001      	adds	r0, #1
 800f8f2:	d025      	beq.n	800f940 <_printf_common+0xa8>
 800f8f4:	2206      	movs	r2, #6
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	2b04      	cmp	r3, #4
 800f8fe:	d105      	bne.n	800f90c <_printf_common+0x74>
 800f900:	6833      	ldr	r3, [r6, #0]
 800f902:	68e5      	ldr	r5, [r4, #12]
 800f904:	1aed      	subs	r5, r5, r3
 800f906:	43eb      	mvns	r3, r5
 800f908:	17db      	asrs	r3, r3, #31
 800f90a:	401d      	ands	r5, r3
 800f90c:	68a3      	ldr	r3, [r4, #8]
 800f90e:	6922      	ldr	r2, [r4, #16]
 800f910:	4293      	cmp	r3, r2
 800f912:	dd01      	ble.n	800f918 <_printf_common+0x80>
 800f914:	1a9b      	subs	r3, r3, r2
 800f916:	18ed      	adds	r5, r5, r3
 800f918:	2600      	movs	r6, #0
 800f91a:	42b5      	cmp	r5, r6
 800f91c:	d120      	bne.n	800f960 <_printf_common+0xc8>
 800f91e:	2000      	movs	r0, #0
 800f920:	e010      	b.n	800f944 <_printf_common+0xac>
 800f922:	3501      	adds	r5, #1
 800f924:	68e3      	ldr	r3, [r4, #12]
 800f926:	6832      	ldr	r2, [r6, #0]
 800f928:	1a9b      	subs	r3, r3, r2
 800f92a:	42ab      	cmp	r3, r5
 800f92c:	ddd2      	ble.n	800f8d4 <_printf_common+0x3c>
 800f92e:	0022      	movs	r2, r4
 800f930:	2301      	movs	r3, #1
 800f932:	9901      	ldr	r1, [sp, #4]
 800f934:	9800      	ldr	r0, [sp, #0]
 800f936:	9f08      	ldr	r7, [sp, #32]
 800f938:	3219      	adds	r2, #25
 800f93a:	47b8      	blx	r7
 800f93c:	3001      	adds	r0, #1
 800f93e:	d1f0      	bne.n	800f922 <_printf_common+0x8a>
 800f940:	2001      	movs	r0, #1
 800f942:	4240      	negs	r0, r0
 800f944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f946:	2030      	movs	r0, #48	@ 0x30
 800f948:	18e1      	adds	r1, r4, r3
 800f94a:	3143      	adds	r1, #67	@ 0x43
 800f94c:	7008      	strb	r0, [r1, #0]
 800f94e:	0021      	movs	r1, r4
 800f950:	1c5a      	adds	r2, r3, #1
 800f952:	3145      	adds	r1, #69	@ 0x45
 800f954:	7809      	ldrb	r1, [r1, #0]
 800f956:	18a2      	adds	r2, r4, r2
 800f958:	3243      	adds	r2, #67	@ 0x43
 800f95a:	3302      	adds	r3, #2
 800f95c:	7011      	strb	r1, [r2, #0]
 800f95e:	e7c1      	b.n	800f8e4 <_printf_common+0x4c>
 800f960:	0022      	movs	r2, r4
 800f962:	2301      	movs	r3, #1
 800f964:	9901      	ldr	r1, [sp, #4]
 800f966:	9800      	ldr	r0, [sp, #0]
 800f968:	9f08      	ldr	r7, [sp, #32]
 800f96a:	321a      	adds	r2, #26
 800f96c:	47b8      	blx	r7
 800f96e:	3001      	adds	r0, #1
 800f970:	d0e6      	beq.n	800f940 <_printf_common+0xa8>
 800f972:	3601      	adds	r6, #1
 800f974:	e7d1      	b.n	800f91a <_printf_common+0x82>
	...

0800f978 <_printf_i>:
 800f978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97a:	b08b      	sub	sp, #44	@ 0x2c
 800f97c:	9206      	str	r2, [sp, #24]
 800f97e:	000a      	movs	r2, r1
 800f980:	3243      	adds	r2, #67	@ 0x43
 800f982:	9307      	str	r3, [sp, #28]
 800f984:	9005      	str	r0, [sp, #20]
 800f986:	9203      	str	r2, [sp, #12]
 800f988:	7e0a      	ldrb	r2, [r1, #24]
 800f98a:	000c      	movs	r4, r1
 800f98c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f98e:	2a78      	cmp	r2, #120	@ 0x78
 800f990:	d809      	bhi.n	800f9a6 <_printf_i+0x2e>
 800f992:	2a62      	cmp	r2, #98	@ 0x62
 800f994:	d80b      	bhi.n	800f9ae <_printf_i+0x36>
 800f996:	2a00      	cmp	r2, #0
 800f998:	d100      	bne.n	800f99c <_printf_i+0x24>
 800f99a:	e0ba      	b.n	800fb12 <_printf_i+0x19a>
 800f99c:	497a      	ldr	r1, [pc, #488]	@ (800fb88 <_printf_i+0x210>)
 800f99e:	9104      	str	r1, [sp, #16]
 800f9a0:	2a58      	cmp	r2, #88	@ 0x58
 800f9a2:	d100      	bne.n	800f9a6 <_printf_i+0x2e>
 800f9a4:	e08e      	b.n	800fac4 <_printf_i+0x14c>
 800f9a6:	0025      	movs	r5, r4
 800f9a8:	3542      	adds	r5, #66	@ 0x42
 800f9aa:	702a      	strb	r2, [r5, #0]
 800f9ac:	e022      	b.n	800f9f4 <_printf_i+0x7c>
 800f9ae:	0010      	movs	r0, r2
 800f9b0:	3863      	subs	r0, #99	@ 0x63
 800f9b2:	2815      	cmp	r0, #21
 800f9b4:	d8f7      	bhi.n	800f9a6 <_printf_i+0x2e>
 800f9b6:	f7f0 fbb9 	bl	800012c <__gnu_thumb1_case_shi>
 800f9ba:	0016      	.short	0x0016
 800f9bc:	fff6001f 	.word	0xfff6001f
 800f9c0:	fff6fff6 	.word	0xfff6fff6
 800f9c4:	001ffff6 	.word	0x001ffff6
 800f9c8:	fff6fff6 	.word	0xfff6fff6
 800f9cc:	fff6fff6 	.word	0xfff6fff6
 800f9d0:	0036009f 	.word	0x0036009f
 800f9d4:	fff6007e 	.word	0xfff6007e
 800f9d8:	00b0fff6 	.word	0x00b0fff6
 800f9dc:	0036fff6 	.word	0x0036fff6
 800f9e0:	fff6fff6 	.word	0xfff6fff6
 800f9e4:	0082      	.short	0x0082
 800f9e6:	0025      	movs	r5, r4
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	3542      	adds	r5, #66	@ 0x42
 800f9ec:	1d11      	adds	r1, r2, #4
 800f9ee:	6019      	str	r1, [r3, #0]
 800f9f0:	6813      	ldr	r3, [r2, #0]
 800f9f2:	702b      	strb	r3, [r5, #0]
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e09e      	b.n	800fb36 <_printf_i+0x1be>
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	6809      	ldr	r1, [r1, #0]
 800f9fc:	1d02      	adds	r2, r0, #4
 800f9fe:	060d      	lsls	r5, r1, #24
 800fa00:	d50b      	bpl.n	800fa1a <_printf_i+0xa2>
 800fa02:	6806      	ldr	r6, [r0, #0]
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	2e00      	cmp	r6, #0
 800fa08:	da03      	bge.n	800fa12 <_printf_i+0x9a>
 800fa0a:	232d      	movs	r3, #45	@ 0x2d
 800fa0c:	9a03      	ldr	r2, [sp, #12]
 800fa0e:	4276      	negs	r6, r6
 800fa10:	7013      	strb	r3, [r2, #0]
 800fa12:	4b5d      	ldr	r3, [pc, #372]	@ (800fb88 <_printf_i+0x210>)
 800fa14:	270a      	movs	r7, #10
 800fa16:	9304      	str	r3, [sp, #16]
 800fa18:	e018      	b.n	800fa4c <_printf_i+0xd4>
 800fa1a:	6806      	ldr	r6, [r0, #0]
 800fa1c:	601a      	str	r2, [r3, #0]
 800fa1e:	0649      	lsls	r1, r1, #25
 800fa20:	d5f1      	bpl.n	800fa06 <_printf_i+0x8e>
 800fa22:	b236      	sxth	r6, r6
 800fa24:	e7ef      	b.n	800fa06 <_printf_i+0x8e>
 800fa26:	6808      	ldr	r0, [r1, #0]
 800fa28:	6819      	ldr	r1, [r3, #0]
 800fa2a:	c940      	ldmia	r1!, {r6}
 800fa2c:	0605      	lsls	r5, r0, #24
 800fa2e:	d402      	bmi.n	800fa36 <_printf_i+0xbe>
 800fa30:	0640      	lsls	r0, r0, #25
 800fa32:	d500      	bpl.n	800fa36 <_printf_i+0xbe>
 800fa34:	b2b6      	uxth	r6, r6
 800fa36:	6019      	str	r1, [r3, #0]
 800fa38:	4b53      	ldr	r3, [pc, #332]	@ (800fb88 <_printf_i+0x210>)
 800fa3a:	270a      	movs	r7, #10
 800fa3c:	9304      	str	r3, [sp, #16]
 800fa3e:	2a6f      	cmp	r2, #111	@ 0x6f
 800fa40:	d100      	bne.n	800fa44 <_printf_i+0xcc>
 800fa42:	3f02      	subs	r7, #2
 800fa44:	0023      	movs	r3, r4
 800fa46:	2200      	movs	r2, #0
 800fa48:	3343      	adds	r3, #67	@ 0x43
 800fa4a:	701a      	strb	r2, [r3, #0]
 800fa4c:	6863      	ldr	r3, [r4, #4]
 800fa4e:	60a3      	str	r3, [r4, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	db06      	blt.n	800fa62 <_printf_i+0xea>
 800fa54:	2104      	movs	r1, #4
 800fa56:	6822      	ldr	r2, [r4, #0]
 800fa58:	9d03      	ldr	r5, [sp, #12]
 800fa5a:	438a      	bics	r2, r1
 800fa5c:	6022      	str	r2, [r4, #0]
 800fa5e:	4333      	orrs	r3, r6
 800fa60:	d00c      	beq.n	800fa7c <_printf_i+0x104>
 800fa62:	9d03      	ldr	r5, [sp, #12]
 800fa64:	0030      	movs	r0, r6
 800fa66:	0039      	movs	r1, r7
 800fa68:	f7f0 fbf0 	bl	800024c <__aeabi_uidivmod>
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	3d01      	subs	r5, #1
 800fa70:	5c5b      	ldrb	r3, [r3, r1]
 800fa72:	702b      	strb	r3, [r5, #0]
 800fa74:	0033      	movs	r3, r6
 800fa76:	0006      	movs	r6, r0
 800fa78:	429f      	cmp	r7, r3
 800fa7a:	d9f3      	bls.n	800fa64 <_printf_i+0xec>
 800fa7c:	2f08      	cmp	r7, #8
 800fa7e:	d109      	bne.n	800fa94 <_printf_i+0x11c>
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	07db      	lsls	r3, r3, #31
 800fa84:	d506      	bpl.n	800fa94 <_printf_i+0x11c>
 800fa86:	6862      	ldr	r2, [r4, #4]
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	dc02      	bgt.n	800fa94 <_printf_i+0x11c>
 800fa8e:	2330      	movs	r3, #48	@ 0x30
 800fa90:	3d01      	subs	r5, #1
 800fa92:	702b      	strb	r3, [r5, #0]
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	1b5b      	subs	r3, r3, r5
 800fa98:	6123      	str	r3, [r4, #16]
 800fa9a:	9b07      	ldr	r3, [sp, #28]
 800fa9c:	0021      	movs	r1, r4
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	9805      	ldr	r0, [sp, #20]
 800faa2:	9b06      	ldr	r3, [sp, #24]
 800faa4:	aa09      	add	r2, sp, #36	@ 0x24
 800faa6:	f7ff fef7 	bl	800f898 <_printf_common>
 800faaa:	3001      	adds	r0, #1
 800faac:	d148      	bne.n	800fb40 <_printf_i+0x1c8>
 800faae:	2001      	movs	r0, #1
 800fab0:	4240      	negs	r0, r0
 800fab2:	b00b      	add	sp, #44	@ 0x2c
 800fab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab6:	2220      	movs	r2, #32
 800fab8:	6809      	ldr	r1, [r1, #0]
 800faba:	430a      	orrs	r2, r1
 800fabc:	6022      	str	r2, [r4, #0]
 800fabe:	2278      	movs	r2, #120	@ 0x78
 800fac0:	4932      	ldr	r1, [pc, #200]	@ (800fb8c <_printf_i+0x214>)
 800fac2:	9104      	str	r1, [sp, #16]
 800fac4:	0021      	movs	r1, r4
 800fac6:	3145      	adds	r1, #69	@ 0x45
 800fac8:	700a      	strb	r2, [r1, #0]
 800faca:	6819      	ldr	r1, [r3, #0]
 800facc:	6822      	ldr	r2, [r4, #0]
 800face:	c940      	ldmia	r1!, {r6}
 800fad0:	0610      	lsls	r0, r2, #24
 800fad2:	d402      	bmi.n	800fada <_printf_i+0x162>
 800fad4:	0650      	lsls	r0, r2, #25
 800fad6:	d500      	bpl.n	800fada <_printf_i+0x162>
 800fad8:	b2b6      	uxth	r6, r6
 800fada:	6019      	str	r1, [r3, #0]
 800fadc:	07d3      	lsls	r3, r2, #31
 800fade:	d502      	bpl.n	800fae6 <_printf_i+0x16e>
 800fae0:	2320      	movs	r3, #32
 800fae2:	4313      	orrs	r3, r2
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	2e00      	cmp	r6, #0
 800fae8:	d001      	beq.n	800faee <_printf_i+0x176>
 800faea:	2710      	movs	r7, #16
 800faec:	e7aa      	b.n	800fa44 <_printf_i+0xcc>
 800faee:	2220      	movs	r2, #32
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	4393      	bics	r3, r2
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	e7f8      	b.n	800faea <_printf_i+0x172>
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	680d      	ldr	r5, [r1, #0]
 800fafc:	1d10      	adds	r0, r2, #4
 800fafe:	6949      	ldr	r1, [r1, #20]
 800fb00:	6018      	str	r0, [r3, #0]
 800fb02:	6813      	ldr	r3, [r2, #0]
 800fb04:	062e      	lsls	r6, r5, #24
 800fb06:	d501      	bpl.n	800fb0c <_printf_i+0x194>
 800fb08:	6019      	str	r1, [r3, #0]
 800fb0a:	e002      	b.n	800fb12 <_printf_i+0x19a>
 800fb0c:	066d      	lsls	r5, r5, #25
 800fb0e:	d5fb      	bpl.n	800fb08 <_printf_i+0x190>
 800fb10:	8019      	strh	r1, [r3, #0]
 800fb12:	2300      	movs	r3, #0
 800fb14:	9d03      	ldr	r5, [sp, #12]
 800fb16:	6123      	str	r3, [r4, #16]
 800fb18:	e7bf      	b.n	800fa9a <_printf_i+0x122>
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	1d11      	adds	r1, r2, #4
 800fb1e:	6019      	str	r1, [r3, #0]
 800fb20:	6815      	ldr	r5, [r2, #0]
 800fb22:	2100      	movs	r1, #0
 800fb24:	0028      	movs	r0, r5
 800fb26:	6862      	ldr	r2, [r4, #4]
 800fb28:	f000 f9d7 	bl	800feda <memchr>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d001      	beq.n	800fb34 <_printf_i+0x1bc>
 800fb30:	1b40      	subs	r0, r0, r5
 800fb32:	6060      	str	r0, [r4, #4]
 800fb34:	6863      	ldr	r3, [r4, #4]
 800fb36:	6123      	str	r3, [r4, #16]
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9a03      	ldr	r2, [sp, #12]
 800fb3c:	7013      	strb	r3, [r2, #0]
 800fb3e:	e7ac      	b.n	800fa9a <_printf_i+0x122>
 800fb40:	002a      	movs	r2, r5
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	9906      	ldr	r1, [sp, #24]
 800fb46:	9805      	ldr	r0, [sp, #20]
 800fb48:	9d07      	ldr	r5, [sp, #28]
 800fb4a:	47a8      	blx	r5
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d0ae      	beq.n	800faae <_printf_i+0x136>
 800fb50:	6823      	ldr	r3, [r4, #0]
 800fb52:	079b      	lsls	r3, r3, #30
 800fb54:	d415      	bmi.n	800fb82 <_printf_i+0x20a>
 800fb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb58:	68e0      	ldr	r0, [r4, #12]
 800fb5a:	4298      	cmp	r0, r3
 800fb5c:	daa9      	bge.n	800fab2 <_printf_i+0x13a>
 800fb5e:	0018      	movs	r0, r3
 800fb60:	e7a7      	b.n	800fab2 <_printf_i+0x13a>
 800fb62:	0022      	movs	r2, r4
 800fb64:	2301      	movs	r3, #1
 800fb66:	9906      	ldr	r1, [sp, #24]
 800fb68:	9805      	ldr	r0, [sp, #20]
 800fb6a:	9e07      	ldr	r6, [sp, #28]
 800fb6c:	3219      	adds	r2, #25
 800fb6e:	47b0      	blx	r6
 800fb70:	3001      	adds	r0, #1
 800fb72:	d09c      	beq.n	800faae <_printf_i+0x136>
 800fb74:	3501      	adds	r5, #1
 800fb76:	68e3      	ldr	r3, [r4, #12]
 800fb78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb7a:	1a9b      	subs	r3, r3, r2
 800fb7c:	42ab      	cmp	r3, r5
 800fb7e:	dcf0      	bgt.n	800fb62 <_printf_i+0x1ea>
 800fb80:	e7e9      	b.n	800fb56 <_printf_i+0x1de>
 800fb82:	2500      	movs	r5, #0
 800fb84:	e7f7      	b.n	800fb76 <_printf_i+0x1fe>
 800fb86:	46c0      	nop			@ (mov r8, r8)
 800fb88:	08012000 	.word	0x08012000
 800fb8c:	08012011 	.word	0x08012011

0800fb90 <std>:
 800fb90:	2300      	movs	r3, #0
 800fb92:	b510      	push	{r4, lr}
 800fb94:	0004      	movs	r4, r0
 800fb96:	6003      	str	r3, [r0, #0]
 800fb98:	6043      	str	r3, [r0, #4]
 800fb9a:	6083      	str	r3, [r0, #8]
 800fb9c:	8181      	strh	r1, [r0, #12]
 800fb9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fba0:	81c2      	strh	r2, [r0, #14]
 800fba2:	6103      	str	r3, [r0, #16]
 800fba4:	6143      	str	r3, [r0, #20]
 800fba6:	6183      	str	r3, [r0, #24]
 800fba8:	0019      	movs	r1, r3
 800fbaa:	2208      	movs	r2, #8
 800fbac:	305c      	adds	r0, #92	@ 0x5c
 800fbae:	f000 f90d 	bl	800fdcc <memset>
 800fbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe0 <std+0x50>)
 800fbb4:	6224      	str	r4, [r4, #32]
 800fbb6:	6263      	str	r3, [r4, #36]	@ 0x24
 800fbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe4 <std+0x54>)
 800fbba:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe8 <std+0x58>)
 800fbbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800fbec <std+0x5c>)
 800fbc2:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbc4:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf0 <std+0x60>)
 800fbc6:	429c      	cmp	r4, r3
 800fbc8:	d005      	beq.n	800fbd6 <std+0x46>
 800fbca:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf4 <std+0x64>)
 800fbcc:	429c      	cmp	r4, r3
 800fbce:	d002      	beq.n	800fbd6 <std+0x46>
 800fbd0:	4b09      	ldr	r3, [pc, #36]	@ (800fbf8 <std+0x68>)
 800fbd2:	429c      	cmp	r4, r3
 800fbd4:	d103      	bne.n	800fbde <std+0x4e>
 800fbd6:	0020      	movs	r0, r4
 800fbd8:	3058      	adds	r0, #88	@ 0x58
 800fbda:	f000 f97b 	bl	800fed4 <__retarget_lock_init_recursive>
 800fbde:	bd10      	pop	{r4, pc}
 800fbe0:	0800fd19 	.word	0x0800fd19
 800fbe4:	0800fd41 	.word	0x0800fd41
 800fbe8:	0800fd79 	.word	0x0800fd79
 800fbec:	0800fda5 	.word	0x0800fda5
 800fbf0:	20001c6c 	.word	0x20001c6c
 800fbf4:	20001cd4 	.word	0x20001cd4
 800fbf8:	20001d3c 	.word	0x20001d3c

0800fbfc <stdio_exit_handler>:
 800fbfc:	b510      	push	{r4, lr}
 800fbfe:	4a03      	ldr	r2, [pc, #12]	@ (800fc0c <stdio_exit_handler+0x10>)
 800fc00:	4903      	ldr	r1, [pc, #12]	@ (800fc10 <stdio_exit_handler+0x14>)
 800fc02:	4804      	ldr	r0, [pc, #16]	@ (800fc14 <stdio_exit_handler+0x18>)
 800fc04:	f000 f86c 	bl	800fce0 <_fwalk_sglue>
 800fc08:	bd10      	pop	{r4, pc}
 800fc0a:	46c0      	nop			@ (mov r8, r8)
 800fc0c:	200001f4 	.word	0x200001f4
 800fc10:	0801163d 	.word	0x0801163d
 800fc14:	20000204 	.word	0x20000204

0800fc18 <cleanup_stdio>:
 800fc18:	6841      	ldr	r1, [r0, #4]
 800fc1a:	4b0b      	ldr	r3, [pc, #44]	@ (800fc48 <cleanup_stdio+0x30>)
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	0004      	movs	r4, r0
 800fc20:	4299      	cmp	r1, r3
 800fc22:	d001      	beq.n	800fc28 <cleanup_stdio+0x10>
 800fc24:	f001 fd0a 	bl	801163c <_fflush_r>
 800fc28:	68a1      	ldr	r1, [r4, #8]
 800fc2a:	4b08      	ldr	r3, [pc, #32]	@ (800fc4c <cleanup_stdio+0x34>)
 800fc2c:	4299      	cmp	r1, r3
 800fc2e:	d002      	beq.n	800fc36 <cleanup_stdio+0x1e>
 800fc30:	0020      	movs	r0, r4
 800fc32:	f001 fd03 	bl	801163c <_fflush_r>
 800fc36:	68e1      	ldr	r1, [r4, #12]
 800fc38:	4b05      	ldr	r3, [pc, #20]	@ (800fc50 <cleanup_stdio+0x38>)
 800fc3a:	4299      	cmp	r1, r3
 800fc3c:	d002      	beq.n	800fc44 <cleanup_stdio+0x2c>
 800fc3e:	0020      	movs	r0, r4
 800fc40:	f001 fcfc 	bl	801163c <_fflush_r>
 800fc44:	bd10      	pop	{r4, pc}
 800fc46:	46c0      	nop			@ (mov r8, r8)
 800fc48:	20001c6c 	.word	0x20001c6c
 800fc4c:	20001cd4 	.word	0x20001cd4
 800fc50:	20001d3c 	.word	0x20001d3c

0800fc54 <global_stdio_init.part.0>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	4b09      	ldr	r3, [pc, #36]	@ (800fc7c <global_stdio_init.part.0+0x28>)
 800fc58:	4a09      	ldr	r2, [pc, #36]	@ (800fc80 <global_stdio_init.part.0+0x2c>)
 800fc5a:	2104      	movs	r1, #4
 800fc5c:	601a      	str	r2, [r3, #0]
 800fc5e:	4809      	ldr	r0, [pc, #36]	@ (800fc84 <global_stdio_init.part.0+0x30>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	f7ff ff95 	bl	800fb90 <std>
 800fc66:	2201      	movs	r2, #1
 800fc68:	2109      	movs	r1, #9
 800fc6a:	4807      	ldr	r0, [pc, #28]	@ (800fc88 <global_stdio_init.part.0+0x34>)
 800fc6c:	f7ff ff90 	bl	800fb90 <std>
 800fc70:	2202      	movs	r2, #2
 800fc72:	2112      	movs	r1, #18
 800fc74:	4805      	ldr	r0, [pc, #20]	@ (800fc8c <global_stdio_init.part.0+0x38>)
 800fc76:	f7ff ff8b 	bl	800fb90 <std>
 800fc7a:	bd10      	pop	{r4, pc}
 800fc7c:	20001da4 	.word	0x20001da4
 800fc80:	0800fbfd 	.word	0x0800fbfd
 800fc84:	20001c6c 	.word	0x20001c6c
 800fc88:	20001cd4 	.word	0x20001cd4
 800fc8c:	20001d3c 	.word	0x20001d3c

0800fc90 <__sfp_lock_acquire>:
 800fc90:	b510      	push	{r4, lr}
 800fc92:	4802      	ldr	r0, [pc, #8]	@ (800fc9c <__sfp_lock_acquire+0xc>)
 800fc94:	f000 f91f 	bl	800fed6 <__retarget_lock_acquire_recursive>
 800fc98:	bd10      	pop	{r4, pc}
 800fc9a:	46c0      	nop			@ (mov r8, r8)
 800fc9c:	20001dad 	.word	0x20001dad

0800fca0 <__sfp_lock_release>:
 800fca0:	b510      	push	{r4, lr}
 800fca2:	4802      	ldr	r0, [pc, #8]	@ (800fcac <__sfp_lock_release+0xc>)
 800fca4:	f000 f918 	bl	800fed8 <__retarget_lock_release_recursive>
 800fca8:	bd10      	pop	{r4, pc}
 800fcaa:	46c0      	nop			@ (mov r8, r8)
 800fcac:	20001dad 	.word	0x20001dad

0800fcb0 <__sinit>:
 800fcb0:	b510      	push	{r4, lr}
 800fcb2:	0004      	movs	r4, r0
 800fcb4:	f7ff ffec 	bl	800fc90 <__sfp_lock_acquire>
 800fcb8:	6a23      	ldr	r3, [r4, #32]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <__sinit+0x14>
 800fcbe:	f7ff ffef 	bl	800fca0 <__sfp_lock_release>
 800fcc2:	bd10      	pop	{r4, pc}
 800fcc4:	4b04      	ldr	r3, [pc, #16]	@ (800fcd8 <__sinit+0x28>)
 800fcc6:	6223      	str	r3, [r4, #32]
 800fcc8:	4b04      	ldr	r3, [pc, #16]	@ (800fcdc <__sinit+0x2c>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1f6      	bne.n	800fcbe <__sinit+0xe>
 800fcd0:	f7ff ffc0 	bl	800fc54 <global_stdio_init.part.0>
 800fcd4:	e7f3      	b.n	800fcbe <__sinit+0xe>
 800fcd6:	46c0      	nop			@ (mov r8, r8)
 800fcd8:	0800fc19 	.word	0x0800fc19
 800fcdc:	20001da4 	.word	0x20001da4

0800fce0 <_fwalk_sglue>:
 800fce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fce2:	0014      	movs	r4, r2
 800fce4:	2600      	movs	r6, #0
 800fce6:	9000      	str	r0, [sp, #0]
 800fce8:	9101      	str	r1, [sp, #4]
 800fcea:	68a5      	ldr	r5, [r4, #8]
 800fcec:	6867      	ldr	r7, [r4, #4]
 800fcee:	3f01      	subs	r7, #1
 800fcf0:	d504      	bpl.n	800fcfc <_fwalk_sglue+0x1c>
 800fcf2:	6824      	ldr	r4, [r4, #0]
 800fcf4:	2c00      	cmp	r4, #0
 800fcf6:	d1f8      	bne.n	800fcea <_fwalk_sglue+0xa>
 800fcf8:	0030      	movs	r0, r6
 800fcfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fcfc:	89ab      	ldrh	r3, [r5, #12]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d908      	bls.n	800fd14 <_fwalk_sglue+0x34>
 800fd02:	220e      	movs	r2, #14
 800fd04:	5eab      	ldrsh	r3, [r5, r2]
 800fd06:	3301      	adds	r3, #1
 800fd08:	d004      	beq.n	800fd14 <_fwalk_sglue+0x34>
 800fd0a:	0029      	movs	r1, r5
 800fd0c:	9800      	ldr	r0, [sp, #0]
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	4798      	blx	r3
 800fd12:	4306      	orrs	r6, r0
 800fd14:	3568      	adds	r5, #104	@ 0x68
 800fd16:	e7ea      	b.n	800fcee <_fwalk_sglue+0xe>

0800fd18 <__sread>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	000c      	movs	r4, r1
 800fd1c:	250e      	movs	r5, #14
 800fd1e:	5f49      	ldrsh	r1, [r1, r5]
 800fd20:	f000 f886 	bl	800fe30 <_read_r>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	db03      	blt.n	800fd30 <__sread+0x18>
 800fd28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800fd2a:	181b      	adds	r3, r3, r0
 800fd2c:	6563      	str	r3, [r4, #84]	@ 0x54
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	89a3      	ldrh	r3, [r4, #12]
 800fd32:	4a02      	ldr	r2, [pc, #8]	@ (800fd3c <__sread+0x24>)
 800fd34:	4013      	ands	r3, r2
 800fd36:	81a3      	strh	r3, [r4, #12]
 800fd38:	e7f9      	b.n	800fd2e <__sread+0x16>
 800fd3a:	46c0      	nop			@ (mov r8, r8)
 800fd3c:	ffffefff 	.word	0xffffefff

0800fd40 <__swrite>:
 800fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd42:	001f      	movs	r7, r3
 800fd44:	898b      	ldrh	r3, [r1, #12]
 800fd46:	0005      	movs	r5, r0
 800fd48:	000c      	movs	r4, r1
 800fd4a:	0016      	movs	r6, r2
 800fd4c:	05db      	lsls	r3, r3, #23
 800fd4e:	d505      	bpl.n	800fd5c <__swrite+0x1c>
 800fd50:	230e      	movs	r3, #14
 800fd52:	5ec9      	ldrsh	r1, [r1, r3]
 800fd54:	2200      	movs	r2, #0
 800fd56:	2302      	movs	r3, #2
 800fd58:	f000 f856 	bl	800fe08 <_lseek_r>
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	4a05      	ldr	r2, [pc, #20]	@ (800fd74 <__swrite+0x34>)
 800fd60:	0028      	movs	r0, r5
 800fd62:	4013      	ands	r3, r2
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	0032      	movs	r2, r6
 800fd68:	230e      	movs	r3, #14
 800fd6a:	5ee1      	ldrsh	r1, [r4, r3]
 800fd6c:	003b      	movs	r3, r7
 800fd6e:	f000 f873 	bl	800fe58 <_write_r>
 800fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd74:	ffffefff 	.word	0xffffefff

0800fd78 <__sseek>:
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	000c      	movs	r4, r1
 800fd7c:	250e      	movs	r5, #14
 800fd7e:	5f49      	ldrsh	r1, [r1, r5]
 800fd80:	f000 f842 	bl	800fe08 <_lseek_r>
 800fd84:	89a3      	ldrh	r3, [r4, #12]
 800fd86:	1c42      	adds	r2, r0, #1
 800fd88:	d103      	bne.n	800fd92 <__sseek+0x1a>
 800fd8a:	4a05      	ldr	r2, [pc, #20]	@ (800fda0 <__sseek+0x28>)
 800fd8c:	4013      	ands	r3, r2
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	bd70      	pop	{r4, r5, r6, pc}
 800fd92:	2280      	movs	r2, #128	@ 0x80
 800fd94:	0152      	lsls	r2, r2, #5
 800fd96:	4313      	orrs	r3, r2
 800fd98:	81a3      	strh	r3, [r4, #12]
 800fd9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd9c:	e7f8      	b.n	800fd90 <__sseek+0x18>
 800fd9e:	46c0      	nop			@ (mov r8, r8)
 800fda0:	ffffefff 	.word	0xffffefff

0800fda4 <__sclose>:
 800fda4:	b510      	push	{r4, lr}
 800fda6:	230e      	movs	r3, #14
 800fda8:	5ec9      	ldrsh	r1, [r1, r3]
 800fdaa:	f000 f81b 	bl	800fde4 <_close_r>
 800fdae:	bd10      	pop	{r4, pc}

0800fdb0 <memcmp>:
 800fdb0:	b530      	push	{r4, r5, lr}
 800fdb2:	2400      	movs	r4, #0
 800fdb4:	3901      	subs	r1, #1
 800fdb6:	42a2      	cmp	r2, r4
 800fdb8:	d101      	bne.n	800fdbe <memcmp+0xe>
 800fdba:	2000      	movs	r0, #0
 800fdbc:	e005      	b.n	800fdca <memcmp+0x1a>
 800fdbe:	5d03      	ldrb	r3, [r0, r4]
 800fdc0:	3401      	adds	r4, #1
 800fdc2:	5d0d      	ldrb	r5, [r1, r4]
 800fdc4:	42ab      	cmp	r3, r5
 800fdc6:	d0f6      	beq.n	800fdb6 <memcmp+0x6>
 800fdc8:	1b58      	subs	r0, r3, r5
 800fdca:	bd30      	pop	{r4, r5, pc}

0800fdcc <memset>:
 800fdcc:	0003      	movs	r3, r0
 800fdce:	1882      	adds	r2, r0, r2
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d100      	bne.n	800fdd6 <memset+0xa>
 800fdd4:	4770      	bx	lr
 800fdd6:	7019      	strb	r1, [r3, #0]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	e7f9      	b.n	800fdd0 <memset+0x4>

0800fddc <_localeconv_r>:
 800fddc:	4800      	ldr	r0, [pc, #0]	@ (800fde0 <_localeconv_r+0x4>)
 800fdde:	4770      	bx	lr
 800fde0:	20000340 	.word	0x20000340

0800fde4 <_close_r>:
 800fde4:	2300      	movs	r3, #0
 800fde6:	b570      	push	{r4, r5, r6, lr}
 800fde8:	4d06      	ldr	r5, [pc, #24]	@ (800fe04 <_close_r+0x20>)
 800fdea:	0004      	movs	r4, r0
 800fdec:	0008      	movs	r0, r1
 800fdee:	602b      	str	r3, [r5, #0]
 800fdf0:	f7f3 f8fc 	bl	8002fec <_close>
 800fdf4:	1c43      	adds	r3, r0, #1
 800fdf6:	d103      	bne.n	800fe00 <_close_r+0x1c>
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d000      	beq.n	800fe00 <_close_r+0x1c>
 800fdfe:	6023      	str	r3, [r4, #0]
 800fe00:	bd70      	pop	{r4, r5, r6, pc}
 800fe02:	46c0      	nop			@ (mov r8, r8)
 800fe04:	20001da8 	.word	0x20001da8

0800fe08 <_lseek_r>:
 800fe08:	b570      	push	{r4, r5, r6, lr}
 800fe0a:	0004      	movs	r4, r0
 800fe0c:	0008      	movs	r0, r1
 800fe0e:	0011      	movs	r1, r2
 800fe10:	001a      	movs	r2, r3
 800fe12:	2300      	movs	r3, #0
 800fe14:	4d05      	ldr	r5, [pc, #20]	@ (800fe2c <_lseek_r+0x24>)
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	f7f3 f909 	bl	800302e <_lseek>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d103      	bne.n	800fe28 <_lseek_r+0x20>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d000      	beq.n	800fe28 <_lseek_r+0x20>
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	bd70      	pop	{r4, r5, r6, pc}
 800fe2a:	46c0      	nop			@ (mov r8, r8)
 800fe2c:	20001da8 	.word	0x20001da8

0800fe30 <_read_r>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	0004      	movs	r4, r0
 800fe34:	0008      	movs	r0, r1
 800fe36:	0011      	movs	r1, r2
 800fe38:	001a      	movs	r2, r3
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4d05      	ldr	r5, [pc, #20]	@ (800fe54 <_read_r+0x24>)
 800fe3e:	602b      	str	r3, [r5, #0]
 800fe40:	f7f3 f89b 	bl	8002f7a <_read>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d103      	bne.n	800fe50 <_read_r+0x20>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d000      	beq.n	800fe50 <_read_r+0x20>
 800fe4e:	6023      	str	r3, [r4, #0]
 800fe50:	bd70      	pop	{r4, r5, r6, pc}
 800fe52:	46c0      	nop			@ (mov r8, r8)
 800fe54:	20001da8 	.word	0x20001da8

0800fe58 <_write_r>:
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	0004      	movs	r4, r0
 800fe5c:	0008      	movs	r0, r1
 800fe5e:	0011      	movs	r1, r2
 800fe60:	001a      	movs	r2, r3
 800fe62:	2300      	movs	r3, #0
 800fe64:	4d05      	ldr	r5, [pc, #20]	@ (800fe7c <_write_r+0x24>)
 800fe66:	602b      	str	r3, [r5, #0]
 800fe68:	f7f3 f8a4 	bl	8002fb4 <_write>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d103      	bne.n	800fe78 <_write_r+0x20>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d000      	beq.n	800fe78 <_write_r+0x20>
 800fe76:	6023      	str	r3, [r4, #0]
 800fe78:	bd70      	pop	{r4, r5, r6, pc}
 800fe7a:	46c0      	nop			@ (mov r8, r8)
 800fe7c:	20001da8 	.word	0x20001da8

0800fe80 <__errno>:
 800fe80:	4b01      	ldr	r3, [pc, #4]	@ (800fe88 <__errno+0x8>)
 800fe82:	6818      	ldr	r0, [r3, #0]
 800fe84:	4770      	bx	lr
 800fe86:	46c0      	nop			@ (mov r8, r8)
 800fe88:	20000200 	.word	0x20000200

0800fe8c <__libc_init_array>:
 800fe8c:	b570      	push	{r4, r5, r6, lr}
 800fe8e:	2600      	movs	r6, #0
 800fe90:	4c0c      	ldr	r4, [pc, #48]	@ (800fec4 <__libc_init_array+0x38>)
 800fe92:	4d0d      	ldr	r5, [pc, #52]	@ (800fec8 <__libc_init_array+0x3c>)
 800fe94:	1b64      	subs	r4, r4, r5
 800fe96:	10a4      	asrs	r4, r4, #2
 800fe98:	42a6      	cmp	r6, r4
 800fe9a:	d109      	bne.n	800feb0 <__libc_init_array+0x24>
 800fe9c:	2600      	movs	r6, #0
 800fe9e:	f001 ff49 	bl	8011d34 <_init>
 800fea2:	4c0a      	ldr	r4, [pc, #40]	@ (800fecc <__libc_init_array+0x40>)
 800fea4:	4d0a      	ldr	r5, [pc, #40]	@ (800fed0 <__libc_init_array+0x44>)
 800fea6:	1b64      	subs	r4, r4, r5
 800fea8:	10a4      	asrs	r4, r4, #2
 800feaa:	42a6      	cmp	r6, r4
 800feac:	d105      	bne.n	800feba <__libc_init_array+0x2e>
 800feae:	bd70      	pop	{r4, r5, r6, pc}
 800feb0:	00b3      	lsls	r3, r6, #2
 800feb2:	58eb      	ldr	r3, [r5, r3]
 800feb4:	4798      	blx	r3
 800feb6:	3601      	adds	r6, #1
 800feb8:	e7ee      	b.n	800fe98 <__libc_init_array+0xc>
 800feba:	00b3      	lsls	r3, r6, #2
 800febc:	58eb      	ldr	r3, [r5, r3]
 800febe:	4798      	blx	r3
 800fec0:	3601      	adds	r6, #1
 800fec2:	e7f2      	b.n	800feaa <__libc_init_array+0x1e>
 800fec4:	08012364 	.word	0x08012364
 800fec8:	08012364 	.word	0x08012364
 800fecc:	08012368 	.word	0x08012368
 800fed0:	08012364 	.word	0x08012364

0800fed4 <__retarget_lock_init_recursive>:
 800fed4:	4770      	bx	lr

0800fed6 <__retarget_lock_acquire_recursive>:
 800fed6:	4770      	bx	lr

0800fed8 <__retarget_lock_release_recursive>:
 800fed8:	4770      	bx	lr

0800feda <memchr>:
 800feda:	b2c9      	uxtb	r1, r1
 800fedc:	1882      	adds	r2, r0, r2
 800fede:	4290      	cmp	r0, r2
 800fee0:	d101      	bne.n	800fee6 <memchr+0xc>
 800fee2:	2000      	movs	r0, #0
 800fee4:	4770      	bx	lr
 800fee6:	7803      	ldrb	r3, [r0, #0]
 800fee8:	428b      	cmp	r3, r1
 800feea:	d0fb      	beq.n	800fee4 <memchr+0xa>
 800feec:	3001      	adds	r0, #1
 800feee:	e7f6      	b.n	800fede <memchr+0x4>

0800fef0 <memcpy>:
 800fef0:	2300      	movs	r3, #0
 800fef2:	b510      	push	{r4, lr}
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d100      	bne.n	800fefa <memcpy+0xa>
 800fef8:	bd10      	pop	{r4, pc}
 800fefa:	5ccc      	ldrb	r4, [r1, r3]
 800fefc:	54c4      	strb	r4, [r0, r3]
 800fefe:	3301      	adds	r3, #1
 800ff00:	e7f8      	b.n	800fef4 <memcpy+0x4>

0800ff02 <quorem>:
 800ff02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff04:	6903      	ldr	r3, [r0, #16]
 800ff06:	690c      	ldr	r4, [r1, #16]
 800ff08:	b089      	sub	sp, #36	@ 0x24
 800ff0a:	9003      	str	r0, [sp, #12]
 800ff0c:	9106      	str	r1, [sp, #24]
 800ff0e:	2000      	movs	r0, #0
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	db63      	blt.n	800ffdc <quorem+0xda>
 800ff14:	000b      	movs	r3, r1
 800ff16:	3c01      	subs	r4, #1
 800ff18:	3314      	adds	r3, #20
 800ff1a:	00a5      	lsls	r5, r4, #2
 800ff1c:	9304      	str	r3, [sp, #16]
 800ff1e:	195b      	adds	r3, r3, r5
 800ff20:	9305      	str	r3, [sp, #20]
 800ff22:	9b03      	ldr	r3, [sp, #12]
 800ff24:	3314      	adds	r3, #20
 800ff26:	9301      	str	r3, [sp, #4]
 800ff28:	195d      	adds	r5, r3, r5
 800ff2a:	9b05      	ldr	r3, [sp, #20]
 800ff2c:	682f      	ldr	r7, [r5, #0]
 800ff2e:	681e      	ldr	r6, [r3, #0]
 800ff30:	0038      	movs	r0, r7
 800ff32:	3601      	adds	r6, #1
 800ff34:	0031      	movs	r1, r6
 800ff36:	f7f0 f903 	bl	8000140 <__udivsi3>
 800ff3a:	9002      	str	r0, [sp, #8]
 800ff3c:	42b7      	cmp	r7, r6
 800ff3e:	d327      	bcc.n	800ff90 <quorem+0x8e>
 800ff40:	9b04      	ldr	r3, [sp, #16]
 800ff42:	2700      	movs	r7, #0
 800ff44:	469c      	mov	ip, r3
 800ff46:	9e01      	ldr	r6, [sp, #4]
 800ff48:	9707      	str	r7, [sp, #28]
 800ff4a:	4662      	mov	r2, ip
 800ff4c:	ca08      	ldmia	r2!, {r3}
 800ff4e:	6830      	ldr	r0, [r6, #0]
 800ff50:	4694      	mov	ip, r2
 800ff52:	9a02      	ldr	r2, [sp, #8]
 800ff54:	b299      	uxth	r1, r3
 800ff56:	4351      	muls	r1, r2
 800ff58:	0c1b      	lsrs	r3, r3, #16
 800ff5a:	4353      	muls	r3, r2
 800ff5c:	19c9      	adds	r1, r1, r7
 800ff5e:	0c0a      	lsrs	r2, r1, #16
 800ff60:	189b      	adds	r3, r3, r2
 800ff62:	b289      	uxth	r1, r1
 800ff64:	b282      	uxth	r2, r0
 800ff66:	1a52      	subs	r2, r2, r1
 800ff68:	9907      	ldr	r1, [sp, #28]
 800ff6a:	0c1f      	lsrs	r7, r3, #16
 800ff6c:	1852      	adds	r2, r2, r1
 800ff6e:	0c00      	lsrs	r0, r0, #16
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	1411      	asrs	r1, r2, #16
 800ff74:	1ac3      	subs	r3, r0, r3
 800ff76:	185b      	adds	r3, r3, r1
 800ff78:	1419      	asrs	r1, r3, #16
 800ff7a:	b292      	uxth	r2, r2
 800ff7c:	041b      	lsls	r3, r3, #16
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	9b05      	ldr	r3, [sp, #20]
 800ff82:	9107      	str	r1, [sp, #28]
 800ff84:	c604      	stmia	r6!, {r2}
 800ff86:	4563      	cmp	r3, ip
 800ff88:	d2df      	bcs.n	800ff4a <quorem+0x48>
 800ff8a:	682b      	ldr	r3, [r5, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d02b      	beq.n	800ffe8 <quorem+0xe6>
 800ff90:	9906      	ldr	r1, [sp, #24]
 800ff92:	9803      	ldr	r0, [sp, #12]
 800ff94:	f001 f9b6 	bl	8011304 <__mcmp>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	db1e      	blt.n	800ffda <quorem+0xd8>
 800ff9c:	2600      	movs	r6, #0
 800ff9e:	9d01      	ldr	r5, [sp, #4]
 800ffa0:	9904      	ldr	r1, [sp, #16]
 800ffa2:	c901      	ldmia	r1!, {r0}
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b287      	uxth	r7, r0
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	1bd2      	subs	r2, r2, r7
 800ffac:	1992      	adds	r2, r2, r6
 800ffae:	0c00      	lsrs	r0, r0, #16
 800ffb0:	0c1b      	lsrs	r3, r3, #16
 800ffb2:	1a1b      	subs	r3, r3, r0
 800ffb4:	1410      	asrs	r0, r2, #16
 800ffb6:	181b      	adds	r3, r3, r0
 800ffb8:	141e      	asrs	r6, r3, #16
 800ffba:	b292      	uxth	r2, r2
 800ffbc:	041b      	lsls	r3, r3, #16
 800ffbe:	431a      	orrs	r2, r3
 800ffc0:	9b05      	ldr	r3, [sp, #20]
 800ffc2:	c504      	stmia	r5!, {r2}
 800ffc4:	428b      	cmp	r3, r1
 800ffc6:	d2ec      	bcs.n	800ffa2 <quorem+0xa0>
 800ffc8:	9a01      	ldr	r2, [sp, #4]
 800ffca:	00a3      	lsls	r3, r4, #2
 800ffcc:	18d3      	adds	r3, r2, r3
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	2a00      	cmp	r2, #0
 800ffd2:	d014      	beq.n	800fffe <quorem+0xfc>
 800ffd4:	9b02      	ldr	r3, [sp, #8]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	9302      	str	r3, [sp, #8]
 800ffda:	9802      	ldr	r0, [sp, #8]
 800ffdc:	b009      	add	sp, #36	@ 0x24
 800ffde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d104      	bne.n	800fff0 <quorem+0xee>
 800ffe6:	3c01      	subs	r4, #1
 800ffe8:	9b01      	ldr	r3, [sp, #4]
 800ffea:	3d04      	subs	r5, #4
 800ffec:	42ab      	cmp	r3, r5
 800ffee:	d3f7      	bcc.n	800ffe0 <quorem+0xde>
 800fff0:	9b03      	ldr	r3, [sp, #12]
 800fff2:	611c      	str	r4, [r3, #16]
 800fff4:	e7cc      	b.n	800ff90 <quorem+0x8e>
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	2a00      	cmp	r2, #0
 800fffa:	d104      	bne.n	8010006 <quorem+0x104>
 800fffc:	3c01      	subs	r4, #1
 800fffe:	9a01      	ldr	r2, [sp, #4]
 8010000:	3b04      	subs	r3, #4
 8010002:	429a      	cmp	r2, r3
 8010004:	d3f7      	bcc.n	800fff6 <quorem+0xf4>
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	611c      	str	r4, [r3, #16]
 801000a:	e7e3      	b.n	800ffd4 <quorem+0xd2>

0801000c <_dtoa_r>:
 801000c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000e:	0014      	movs	r4, r2
 8010010:	001d      	movs	r5, r3
 8010012:	69c6      	ldr	r6, [r0, #28]
 8010014:	b09d      	sub	sp, #116	@ 0x74
 8010016:	940a      	str	r4, [sp, #40]	@ 0x28
 8010018:	950b      	str	r5, [sp, #44]	@ 0x2c
 801001a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801001c:	9003      	str	r0, [sp, #12]
 801001e:	2e00      	cmp	r6, #0
 8010020:	d10f      	bne.n	8010042 <_dtoa_r+0x36>
 8010022:	2010      	movs	r0, #16
 8010024:	f000 fe2c 	bl	8010c80 <malloc>
 8010028:	9b03      	ldr	r3, [sp, #12]
 801002a:	1e02      	subs	r2, r0, #0
 801002c:	61d8      	str	r0, [r3, #28]
 801002e:	d104      	bne.n	801003a <_dtoa_r+0x2e>
 8010030:	21ef      	movs	r1, #239	@ 0xef
 8010032:	4bc7      	ldr	r3, [pc, #796]	@ (8010350 <_dtoa_r+0x344>)
 8010034:	48c7      	ldr	r0, [pc, #796]	@ (8010354 <_dtoa_r+0x348>)
 8010036:	f001 fb3f 	bl	80116b8 <__assert_func>
 801003a:	6046      	str	r6, [r0, #4]
 801003c:	6086      	str	r6, [r0, #8]
 801003e:	6006      	str	r6, [r0, #0]
 8010040:	60c6      	str	r6, [r0, #12]
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	6819      	ldr	r1, [r3, #0]
 8010048:	2900      	cmp	r1, #0
 801004a:	d00b      	beq.n	8010064 <_dtoa_r+0x58>
 801004c:	685a      	ldr	r2, [r3, #4]
 801004e:	2301      	movs	r3, #1
 8010050:	4093      	lsls	r3, r2
 8010052:	604a      	str	r2, [r1, #4]
 8010054:	608b      	str	r3, [r1, #8]
 8010056:	9803      	ldr	r0, [sp, #12]
 8010058:	f000 ff12 	bl	8010e80 <_Bfree>
 801005c:	2200      	movs	r2, #0
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	2d00      	cmp	r5, #0
 8010066:	da1e      	bge.n	80100a6 <_dtoa_r+0x9a>
 8010068:	2301      	movs	r3, #1
 801006a:	603b      	str	r3, [r7, #0]
 801006c:	006b      	lsls	r3, r5, #1
 801006e:	085b      	lsrs	r3, r3, #1
 8010070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010072:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010074:	4bb8      	ldr	r3, [pc, #736]	@ (8010358 <_dtoa_r+0x34c>)
 8010076:	4ab8      	ldr	r2, [pc, #736]	@ (8010358 <_dtoa_r+0x34c>)
 8010078:	403b      	ands	r3, r7
 801007a:	4293      	cmp	r3, r2
 801007c:	d116      	bne.n	80100ac <_dtoa_r+0xa0>
 801007e:	4bb7      	ldr	r3, [pc, #732]	@ (801035c <_dtoa_r+0x350>)
 8010080:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	033b      	lsls	r3, r7, #12
 8010086:	0b1b      	lsrs	r3, r3, #12
 8010088:	4323      	orrs	r3, r4
 801008a:	d101      	bne.n	8010090 <_dtoa_r+0x84>
 801008c:	f000 fd80 	bl	8010b90 <_dtoa_r+0xb84>
 8010090:	4bb3      	ldr	r3, [pc, #716]	@ (8010360 <_dtoa_r+0x354>)
 8010092:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010094:	9308      	str	r3, [sp, #32]
 8010096:	2a00      	cmp	r2, #0
 8010098:	d002      	beq.n	80100a0 <_dtoa_r+0x94>
 801009a:	4bb2      	ldr	r3, [pc, #712]	@ (8010364 <_dtoa_r+0x358>)
 801009c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	9808      	ldr	r0, [sp, #32]
 80100a2:	b01d      	add	sp, #116	@ 0x74
 80100a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a6:	2300      	movs	r3, #0
 80100a8:	603b      	str	r3, [r7, #0]
 80100aa:	e7e2      	b.n	8010072 <_dtoa_r+0x66>
 80100ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80100b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80100b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80100b8:	2200      	movs	r2, #0
 80100ba:	2300      	movs	r3, #0
 80100bc:	f7f0 f9c6 	bl	800044c <__aeabi_dcmpeq>
 80100c0:	1e06      	subs	r6, r0, #0
 80100c2:	d00b      	beq.n	80100dc <_dtoa_r+0xd0>
 80100c4:	2301      	movs	r3, #1
 80100c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80100c8:	6013      	str	r3, [r2, #0]
 80100ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <_dtoa_r+0xca>
 80100d0:	4ba5      	ldr	r3, [pc, #660]	@ (8010368 <_dtoa_r+0x35c>)
 80100d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80100d4:	6013      	str	r3, [r2, #0]
 80100d6:	4ba5      	ldr	r3, [pc, #660]	@ (801036c <_dtoa_r+0x360>)
 80100d8:	9308      	str	r3, [sp, #32]
 80100da:	e7e1      	b.n	80100a0 <_dtoa_r+0x94>
 80100dc:	ab1a      	add	r3, sp, #104	@ 0x68
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	9803      	ldr	r0, [sp, #12]
 80100e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80100e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100ea:	f001 f9c1 	bl	8011470 <__d2b>
 80100ee:	007a      	lsls	r2, r7, #1
 80100f0:	9005      	str	r0, [sp, #20]
 80100f2:	0d52      	lsrs	r2, r2, #21
 80100f4:	d100      	bne.n	80100f8 <_dtoa_r+0xec>
 80100f6:	e07b      	b.n	80101f0 <_dtoa_r+0x1e4>
 80100f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100fa:	9618      	str	r6, [sp, #96]	@ 0x60
 80100fc:	0319      	lsls	r1, r3, #12
 80100fe:	4b9c      	ldr	r3, [pc, #624]	@ (8010370 <_dtoa_r+0x364>)
 8010100:	0b09      	lsrs	r1, r1, #12
 8010102:	430b      	orrs	r3, r1
 8010104:	499b      	ldr	r1, [pc, #620]	@ (8010374 <_dtoa_r+0x368>)
 8010106:	1857      	adds	r7, r2, r1
 8010108:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801010a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801010c:	0019      	movs	r1, r3
 801010e:	2200      	movs	r2, #0
 8010110:	4b99      	ldr	r3, [pc, #612]	@ (8010378 <_dtoa_r+0x36c>)
 8010112:	f7f1 fcaf 	bl	8001a74 <__aeabi_dsub>
 8010116:	4a99      	ldr	r2, [pc, #612]	@ (801037c <_dtoa_r+0x370>)
 8010118:	4b99      	ldr	r3, [pc, #612]	@ (8010380 <_dtoa_r+0x374>)
 801011a:	f7f1 f9c5 	bl	80014a8 <__aeabi_dmul>
 801011e:	4a99      	ldr	r2, [pc, #612]	@ (8010384 <_dtoa_r+0x378>)
 8010120:	4b99      	ldr	r3, [pc, #612]	@ (8010388 <_dtoa_r+0x37c>)
 8010122:	f7f0 f9c1 	bl	80004a8 <__aeabi_dadd>
 8010126:	0004      	movs	r4, r0
 8010128:	0038      	movs	r0, r7
 801012a:	000d      	movs	r5, r1
 801012c:	f7f2 f90a 	bl	8002344 <__aeabi_i2d>
 8010130:	4a96      	ldr	r2, [pc, #600]	@ (801038c <_dtoa_r+0x380>)
 8010132:	4b97      	ldr	r3, [pc, #604]	@ (8010390 <_dtoa_r+0x384>)
 8010134:	f7f1 f9b8 	bl	80014a8 <__aeabi_dmul>
 8010138:	0002      	movs	r2, r0
 801013a:	000b      	movs	r3, r1
 801013c:	0020      	movs	r0, r4
 801013e:	0029      	movs	r1, r5
 8010140:	f7f0 f9b2 	bl	80004a8 <__aeabi_dadd>
 8010144:	0004      	movs	r4, r0
 8010146:	000d      	movs	r5, r1
 8010148:	f7f2 f8c0 	bl	80022cc <__aeabi_d2iz>
 801014c:	2200      	movs	r2, #0
 801014e:	9004      	str	r0, [sp, #16]
 8010150:	2300      	movs	r3, #0
 8010152:	0020      	movs	r0, r4
 8010154:	0029      	movs	r1, r5
 8010156:	f7f0 f97f 	bl	8000458 <__aeabi_dcmplt>
 801015a:	2800      	cmp	r0, #0
 801015c:	d00b      	beq.n	8010176 <_dtoa_r+0x16a>
 801015e:	9804      	ldr	r0, [sp, #16]
 8010160:	f7f2 f8f0 	bl	8002344 <__aeabi_i2d>
 8010164:	002b      	movs	r3, r5
 8010166:	0022      	movs	r2, r4
 8010168:	f7f0 f970 	bl	800044c <__aeabi_dcmpeq>
 801016c:	4243      	negs	r3, r0
 801016e:	4158      	adcs	r0, r3
 8010170:	9b04      	ldr	r3, [sp, #16]
 8010172:	1a1b      	subs	r3, r3, r0
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	2301      	movs	r3, #1
 8010178:	9315      	str	r3, [sp, #84]	@ 0x54
 801017a:	9b04      	ldr	r3, [sp, #16]
 801017c:	2b16      	cmp	r3, #22
 801017e:	d810      	bhi.n	80101a2 <_dtoa_r+0x196>
 8010180:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010182:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010184:	9a04      	ldr	r2, [sp, #16]
 8010186:	4b83      	ldr	r3, [pc, #524]	@ (8010394 <_dtoa_r+0x388>)
 8010188:	00d2      	lsls	r2, r2, #3
 801018a:	189b      	adds	r3, r3, r2
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	f7f0 f962 	bl	8000458 <__aeabi_dcmplt>
 8010194:	2800      	cmp	r0, #0
 8010196:	d047      	beq.n	8010228 <_dtoa_r+0x21c>
 8010198:	9b04      	ldr	r3, [sp, #16]
 801019a:	3b01      	subs	r3, #1
 801019c:	9304      	str	r3, [sp, #16]
 801019e:	2300      	movs	r3, #0
 80101a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80101a2:	2200      	movs	r2, #0
 80101a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80101a6:	9206      	str	r2, [sp, #24]
 80101a8:	1bdb      	subs	r3, r3, r7
 80101aa:	1e5a      	subs	r2, r3, #1
 80101ac:	d53e      	bpl.n	801022c <_dtoa_r+0x220>
 80101ae:	2201      	movs	r2, #1
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	9306      	str	r3, [sp, #24]
 80101b4:	2300      	movs	r3, #0
 80101b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80101b8:	9b04      	ldr	r3, [sp, #16]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	db38      	blt.n	8010230 <_dtoa_r+0x224>
 80101be:	9a04      	ldr	r2, [sp, #16]
 80101c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80101c2:	4694      	mov	ip, r2
 80101c4:	4463      	add	r3, ip
 80101c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80101c8:	2300      	movs	r3, #0
 80101ca:	9214      	str	r2, [sp, #80]	@ 0x50
 80101cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80101ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80101d0:	2401      	movs	r4, #1
 80101d2:	2b09      	cmp	r3, #9
 80101d4:	d862      	bhi.n	801029c <_dtoa_r+0x290>
 80101d6:	2b05      	cmp	r3, #5
 80101d8:	dd02      	ble.n	80101e0 <_dtoa_r+0x1d4>
 80101da:	2400      	movs	r4, #0
 80101dc:	3b04      	subs	r3, #4
 80101de:	9322      	str	r3, [sp, #136]	@ 0x88
 80101e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80101e2:	1e98      	subs	r0, r3, #2
 80101e4:	2803      	cmp	r0, #3
 80101e6:	d863      	bhi.n	80102b0 <_dtoa_r+0x2a4>
 80101e8:	f7ef ff96 	bl	8000118 <__gnu_thumb1_case_uqi>
 80101ec:	2b385654 	.word	0x2b385654
 80101f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80101f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80101f4:	18f6      	adds	r6, r6, r3
 80101f6:	4b68      	ldr	r3, [pc, #416]	@ (8010398 <_dtoa_r+0x38c>)
 80101f8:	18f2      	adds	r2, r6, r3
 80101fa:	2a20      	cmp	r2, #32
 80101fc:	dd0f      	ble.n	801021e <_dtoa_r+0x212>
 80101fe:	2340      	movs	r3, #64	@ 0x40
 8010200:	1a9b      	subs	r3, r3, r2
 8010202:	409f      	lsls	r7, r3
 8010204:	4b65      	ldr	r3, [pc, #404]	@ (801039c <_dtoa_r+0x390>)
 8010206:	0038      	movs	r0, r7
 8010208:	18f3      	adds	r3, r6, r3
 801020a:	40dc      	lsrs	r4, r3
 801020c:	4320      	orrs	r0, r4
 801020e:	f7f2 f8c7 	bl	80023a0 <__aeabi_ui2d>
 8010212:	2201      	movs	r2, #1
 8010214:	4b62      	ldr	r3, [pc, #392]	@ (80103a0 <_dtoa_r+0x394>)
 8010216:	1e77      	subs	r7, r6, #1
 8010218:	18cb      	adds	r3, r1, r3
 801021a:	9218      	str	r2, [sp, #96]	@ 0x60
 801021c:	e776      	b.n	801010c <_dtoa_r+0x100>
 801021e:	2320      	movs	r3, #32
 8010220:	0020      	movs	r0, r4
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	4098      	lsls	r0, r3
 8010226:	e7f2      	b.n	801020e <_dtoa_r+0x202>
 8010228:	9015      	str	r0, [sp, #84]	@ 0x54
 801022a:	e7ba      	b.n	80101a2 <_dtoa_r+0x196>
 801022c:	920d      	str	r2, [sp, #52]	@ 0x34
 801022e:	e7c3      	b.n	80101b8 <_dtoa_r+0x1ac>
 8010230:	9b06      	ldr	r3, [sp, #24]
 8010232:	9a04      	ldr	r2, [sp, #16]
 8010234:	1a9b      	subs	r3, r3, r2
 8010236:	9306      	str	r3, [sp, #24]
 8010238:	4253      	negs	r3, r2
 801023a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801023c:	2300      	movs	r3, #0
 801023e:	9314      	str	r3, [sp, #80]	@ 0x50
 8010240:	e7c5      	b.n	80101ce <_dtoa_r+0x1c2>
 8010242:	2301      	movs	r3, #1
 8010244:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010246:	9310      	str	r3, [sp, #64]	@ 0x40
 8010248:	4694      	mov	ip, r2
 801024a:	9b04      	ldr	r3, [sp, #16]
 801024c:	4463      	add	r3, ip
 801024e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010250:	3301      	adds	r3, #1
 8010252:	9309      	str	r3, [sp, #36]	@ 0x24
 8010254:	2b00      	cmp	r3, #0
 8010256:	dc08      	bgt.n	801026a <_dtoa_r+0x25e>
 8010258:	2301      	movs	r3, #1
 801025a:	e006      	b.n	801026a <_dtoa_r+0x25e>
 801025c:	2301      	movs	r3, #1
 801025e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010260:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010262:	2b00      	cmp	r3, #0
 8010264:	dd28      	ble.n	80102b8 <_dtoa_r+0x2ac>
 8010266:	930e      	str	r3, [sp, #56]	@ 0x38
 8010268:	9309      	str	r3, [sp, #36]	@ 0x24
 801026a:	9a03      	ldr	r2, [sp, #12]
 801026c:	2100      	movs	r1, #0
 801026e:	69d0      	ldr	r0, [r2, #28]
 8010270:	2204      	movs	r2, #4
 8010272:	0015      	movs	r5, r2
 8010274:	3514      	adds	r5, #20
 8010276:	429d      	cmp	r5, r3
 8010278:	d923      	bls.n	80102c2 <_dtoa_r+0x2b6>
 801027a:	6041      	str	r1, [r0, #4]
 801027c:	9803      	ldr	r0, [sp, #12]
 801027e:	f000 fdbb 	bl	8010df8 <_Balloc>
 8010282:	9008      	str	r0, [sp, #32]
 8010284:	2800      	cmp	r0, #0
 8010286:	d11f      	bne.n	80102c8 <_dtoa_r+0x2bc>
 8010288:	21b0      	movs	r1, #176	@ 0xb0
 801028a:	4b46      	ldr	r3, [pc, #280]	@ (80103a4 <_dtoa_r+0x398>)
 801028c:	4831      	ldr	r0, [pc, #196]	@ (8010354 <_dtoa_r+0x348>)
 801028e:	9a08      	ldr	r2, [sp, #32]
 8010290:	31ff      	adds	r1, #255	@ 0xff
 8010292:	e6d0      	b.n	8010036 <_dtoa_r+0x2a>
 8010294:	2300      	movs	r3, #0
 8010296:	e7e2      	b.n	801025e <_dtoa_r+0x252>
 8010298:	2300      	movs	r3, #0
 801029a:	e7d3      	b.n	8010244 <_dtoa_r+0x238>
 801029c:	2300      	movs	r3, #0
 801029e:	9410      	str	r4, [sp, #64]	@ 0x40
 80102a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80102a2:	3b01      	subs	r3, #1
 80102a4:	2200      	movs	r2, #0
 80102a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80102a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80102aa:	3313      	adds	r3, #19
 80102ac:	9223      	str	r2, [sp, #140]	@ 0x8c
 80102ae:	e7dc      	b.n	801026a <_dtoa_r+0x25e>
 80102b0:	2301      	movs	r3, #1
 80102b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80102b4:	3b02      	subs	r3, #2
 80102b6:	e7f5      	b.n	80102a4 <_dtoa_r+0x298>
 80102b8:	2301      	movs	r3, #1
 80102ba:	001a      	movs	r2, r3
 80102bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80102be:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c0:	e7f4      	b.n	80102ac <_dtoa_r+0x2a0>
 80102c2:	3101      	adds	r1, #1
 80102c4:	0052      	lsls	r2, r2, #1
 80102c6:	e7d4      	b.n	8010272 <_dtoa_r+0x266>
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	9a08      	ldr	r2, [sp, #32]
 80102cc:	69db      	ldr	r3, [r3, #28]
 80102ce:	601a      	str	r2, [r3, #0]
 80102d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102d2:	2b0e      	cmp	r3, #14
 80102d4:	d900      	bls.n	80102d8 <_dtoa_r+0x2cc>
 80102d6:	e0d6      	b.n	8010486 <_dtoa_r+0x47a>
 80102d8:	2c00      	cmp	r4, #0
 80102da:	d100      	bne.n	80102de <_dtoa_r+0x2d2>
 80102dc:	e0d3      	b.n	8010486 <_dtoa_r+0x47a>
 80102de:	9b04      	ldr	r3, [sp, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	dd63      	ble.n	80103ac <_dtoa_r+0x3a0>
 80102e4:	210f      	movs	r1, #15
 80102e6:	9a04      	ldr	r2, [sp, #16]
 80102e8:	4b2a      	ldr	r3, [pc, #168]	@ (8010394 <_dtoa_r+0x388>)
 80102ea:	400a      	ands	r2, r1
 80102ec:	00d2      	lsls	r2, r2, #3
 80102ee:	189b      	adds	r3, r3, r2
 80102f0:	681e      	ldr	r6, [r3, #0]
 80102f2:	685f      	ldr	r7, [r3, #4]
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	2402      	movs	r4, #2
 80102f8:	111d      	asrs	r5, r3, #4
 80102fa:	05db      	lsls	r3, r3, #23
 80102fc:	d50a      	bpl.n	8010314 <_dtoa_r+0x308>
 80102fe:	4b2a      	ldr	r3, [pc, #168]	@ (80103a8 <_dtoa_r+0x39c>)
 8010300:	400d      	ands	r5, r1
 8010302:	6a1a      	ldr	r2, [r3, #32]
 8010304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010306:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010308:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801030a:	f7f0 fc93 	bl	8000c34 <__aeabi_ddiv>
 801030e:	900a      	str	r0, [sp, #40]	@ 0x28
 8010310:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010312:	3401      	adds	r4, #1
 8010314:	4b24      	ldr	r3, [pc, #144]	@ (80103a8 <_dtoa_r+0x39c>)
 8010316:	930c      	str	r3, [sp, #48]	@ 0x30
 8010318:	2d00      	cmp	r5, #0
 801031a:	d108      	bne.n	801032e <_dtoa_r+0x322>
 801031c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801031e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010320:	0032      	movs	r2, r6
 8010322:	003b      	movs	r3, r7
 8010324:	f7f0 fc86 	bl	8000c34 <__aeabi_ddiv>
 8010328:	900a      	str	r0, [sp, #40]	@ 0x28
 801032a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801032c:	e059      	b.n	80103e2 <_dtoa_r+0x3d6>
 801032e:	2301      	movs	r3, #1
 8010330:	421d      	tst	r5, r3
 8010332:	d009      	beq.n	8010348 <_dtoa_r+0x33c>
 8010334:	18e4      	adds	r4, r4, r3
 8010336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010338:	0030      	movs	r0, r6
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	0039      	movs	r1, r7
 8010340:	f7f1 f8b2 	bl	80014a8 <__aeabi_dmul>
 8010344:	0006      	movs	r6, r0
 8010346:	000f      	movs	r7, r1
 8010348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801034a:	106d      	asrs	r5, r5, #1
 801034c:	3308      	adds	r3, #8
 801034e:	e7e2      	b.n	8010316 <_dtoa_r+0x30a>
 8010350:	0801202f 	.word	0x0801202f
 8010354:	08012046 	.word	0x08012046
 8010358:	7ff00000 	.word	0x7ff00000
 801035c:	0000270f 	.word	0x0000270f
 8010360:	0801202b 	.word	0x0801202b
 8010364:	0801202e 	.word	0x0801202e
 8010368:	08011fff 	.word	0x08011fff
 801036c:	08011ffe 	.word	0x08011ffe
 8010370:	3ff00000 	.word	0x3ff00000
 8010374:	fffffc01 	.word	0xfffffc01
 8010378:	3ff80000 	.word	0x3ff80000
 801037c:	636f4361 	.word	0x636f4361
 8010380:	3fd287a7 	.word	0x3fd287a7
 8010384:	8b60c8b3 	.word	0x8b60c8b3
 8010388:	3fc68a28 	.word	0x3fc68a28
 801038c:	509f79fb 	.word	0x509f79fb
 8010390:	3fd34413 	.word	0x3fd34413
 8010394:	08012198 	.word	0x08012198
 8010398:	00000432 	.word	0x00000432
 801039c:	00000412 	.word	0x00000412
 80103a0:	fe100000 	.word	0xfe100000
 80103a4:	0801209e 	.word	0x0801209e
 80103a8:	08012170 	.word	0x08012170
 80103ac:	9b04      	ldr	r3, [sp, #16]
 80103ae:	2402      	movs	r4, #2
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d016      	beq.n	80103e2 <_dtoa_r+0x3d6>
 80103b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80103b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80103b8:	220f      	movs	r2, #15
 80103ba:	425d      	negs	r5, r3
 80103bc:	402a      	ands	r2, r5
 80103be:	4bd5      	ldr	r3, [pc, #852]	@ (8010714 <_dtoa_r+0x708>)
 80103c0:	00d2      	lsls	r2, r2, #3
 80103c2:	189b      	adds	r3, r3, r2
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	f7f1 f86e 	bl	80014a8 <__aeabi_dmul>
 80103cc:	2701      	movs	r7, #1
 80103ce:	2300      	movs	r3, #0
 80103d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80103d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80103d4:	4ed0      	ldr	r6, [pc, #832]	@ (8010718 <_dtoa_r+0x70c>)
 80103d6:	112d      	asrs	r5, r5, #4
 80103d8:	2d00      	cmp	r5, #0
 80103da:	d000      	beq.n	80103de <_dtoa_r+0x3d2>
 80103dc:	e095      	b.n	801050a <_dtoa_r+0x4fe>
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1a2      	bne.n	8010328 <_dtoa_r+0x31c>
 80103e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80103e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80103e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d100      	bne.n	80103ee <_dtoa_r+0x3e2>
 80103ec:	e098      	b.n	8010520 <_dtoa_r+0x514>
 80103ee:	2200      	movs	r2, #0
 80103f0:	0030      	movs	r0, r6
 80103f2:	0039      	movs	r1, r7
 80103f4:	4bc9      	ldr	r3, [pc, #804]	@ (801071c <_dtoa_r+0x710>)
 80103f6:	f7f0 f82f 	bl	8000458 <__aeabi_dcmplt>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d100      	bne.n	8010400 <_dtoa_r+0x3f4>
 80103fe:	e08f      	b.n	8010520 <_dtoa_r+0x514>
 8010400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010402:	2b00      	cmp	r3, #0
 8010404:	d100      	bne.n	8010408 <_dtoa_r+0x3fc>
 8010406:	e08b      	b.n	8010520 <_dtoa_r+0x514>
 8010408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801040a:	2b00      	cmp	r3, #0
 801040c:	dd37      	ble.n	801047e <_dtoa_r+0x472>
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	2200      	movs	r2, #0
 8010412:	3b01      	subs	r3, #1
 8010414:	930c      	str	r3, [sp, #48]	@ 0x30
 8010416:	0030      	movs	r0, r6
 8010418:	4bc1      	ldr	r3, [pc, #772]	@ (8010720 <_dtoa_r+0x714>)
 801041a:	0039      	movs	r1, r7
 801041c:	f7f1 f844 	bl	80014a8 <__aeabi_dmul>
 8010420:	900a      	str	r0, [sp, #40]	@ 0x28
 8010422:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010426:	3401      	adds	r4, #1
 8010428:	0020      	movs	r0, r4
 801042a:	9311      	str	r3, [sp, #68]	@ 0x44
 801042c:	f7f1 ff8a 	bl	8002344 <__aeabi_i2d>
 8010430:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010434:	f7f1 f838 	bl	80014a8 <__aeabi_dmul>
 8010438:	4bba      	ldr	r3, [pc, #744]	@ (8010724 <_dtoa_r+0x718>)
 801043a:	2200      	movs	r2, #0
 801043c:	f7f0 f834 	bl	80004a8 <__aeabi_dadd>
 8010440:	4bb9      	ldr	r3, [pc, #740]	@ (8010728 <_dtoa_r+0x71c>)
 8010442:	0006      	movs	r6, r0
 8010444:	18cf      	adds	r7, r1, r3
 8010446:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010448:	2b00      	cmp	r3, #0
 801044a:	d16d      	bne.n	8010528 <_dtoa_r+0x51c>
 801044c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801044e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010450:	2200      	movs	r2, #0
 8010452:	4bb6      	ldr	r3, [pc, #728]	@ (801072c <_dtoa_r+0x720>)
 8010454:	f7f1 fb0e 	bl	8001a74 <__aeabi_dsub>
 8010458:	0032      	movs	r2, r6
 801045a:	003b      	movs	r3, r7
 801045c:	0004      	movs	r4, r0
 801045e:	000d      	movs	r5, r1
 8010460:	f7f0 f80e 	bl	8000480 <__aeabi_dcmpgt>
 8010464:	2800      	cmp	r0, #0
 8010466:	d000      	beq.n	801046a <_dtoa_r+0x45e>
 8010468:	e2b6      	b.n	80109d8 <_dtoa_r+0x9cc>
 801046a:	2180      	movs	r1, #128	@ 0x80
 801046c:	0609      	lsls	r1, r1, #24
 801046e:	187b      	adds	r3, r7, r1
 8010470:	0032      	movs	r2, r6
 8010472:	0020      	movs	r0, r4
 8010474:	0029      	movs	r1, r5
 8010476:	f7ef ffef 	bl	8000458 <__aeabi_dcmplt>
 801047a:	2800      	cmp	r0, #0
 801047c:	d128      	bne.n	80104d0 <_dtoa_r+0x4c4>
 801047e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010480:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010482:	930a      	str	r3, [sp, #40]	@ 0x28
 8010484:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010486:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010488:	2b00      	cmp	r3, #0
 801048a:	da00      	bge.n	801048e <_dtoa_r+0x482>
 801048c:	e174      	b.n	8010778 <_dtoa_r+0x76c>
 801048e:	9a04      	ldr	r2, [sp, #16]
 8010490:	2a0e      	cmp	r2, #14
 8010492:	dd00      	ble.n	8010496 <_dtoa_r+0x48a>
 8010494:	e170      	b.n	8010778 <_dtoa_r+0x76c>
 8010496:	4b9f      	ldr	r3, [pc, #636]	@ (8010714 <_dtoa_r+0x708>)
 8010498:	00d2      	lsls	r2, r2, #3
 801049a:	189b      	adds	r3, r3, r2
 801049c:	685c      	ldr	r4, [r3, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	9306      	str	r3, [sp, #24]
 80104a2:	9407      	str	r4, [sp, #28]
 80104a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	db00      	blt.n	80104ac <_dtoa_r+0x4a0>
 80104aa:	e0e7      	b.n	801067c <_dtoa_r+0x670>
 80104ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	dd00      	ble.n	80104b4 <_dtoa_r+0x4a8>
 80104b2:	e0e3      	b.n	801067c <_dtoa_r+0x670>
 80104b4:	d10c      	bne.n	80104d0 <_dtoa_r+0x4c4>
 80104b6:	9806      	ldr	r0, [sp, #24]
 80104b8:	9907      	ldr	r1, [sp, #28]
 80104ba:	2200      	movs	r2, #0
 80104bc:	4b9b      	ldr	r3, [pc, #620]	@ (801072c <_dtoa_r+0x720>)
 80104be:	f7f0 fff3 	bl	80014a8 <__aeabi_dmul>
 80104c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104c6:	f7ef ffe5 	bl	8000494 <__aeabi_dcmpge>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d100      	bne.n	80104d0 <_dtoa_r+0x4c4>
 80104ce:	e286      	b.n	80109de <_dtoa_r+0x9d2>
 80104d0:	2600      	movs	r6, #0
 80104d2:	0037      	movs	r7, r6
 80104d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104d6:	9c08      	ldr	r4, [sp, #32]
 80104d8:	43db      	mvns	r3, r3
 80104da:	930c      	str	r3, [sp, #48]	@ 0x30
 80104dc:	9704      	str	r7, [sp, #16]
 80104de:	2700      	movs	r7, #0
 80104e0:	0031      	movs	r1, r6
 80104e2:	9803      	ldr	r0, [sp, #12]
 80104e4:	f000 fccc 	bl	8010e80 <_Bfree>
 80104e8:	9b04      	ldr	r3, [sp, #16]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d100      	bne.n	80104f0 <_dtoa_r+0x4e4>
 80104ee:	e0bb      	b.n	8010668 <_dtoa_r+0x65c>
 80104f0:	2f00      	cmp	r7, #0
 80104f2:	d005      	beq.n	8010500 <_dtoa_r+0x4f4>
 80104f4:	429f      	cmp	r7, r3
 80104f6:	d003      	beq.n	8010500 <_dtoa_r+0x4f4>
 80104f8:	0039      	movs	r1, r7
 80104fa:	9803      	ldr	r0, [sp, #12]
 80104fc:	f000 fcc0 	bl	8010e80 <_Bfree>
 8010500:	9904      	ldr	r1, [sp, #16]
 8010502:	9803      	ldr	r0, [sp, #12]
 8010504:	f000 fcbc 	bl	8010e80 <_Bfree>
 8010508:	e0ae      	b.n	8010668 <_dtoa_r+0x65c>
 801050a:	423d      	tst	r5, r7
 801050c:	d005      	beq.n	801051a <_dtoa_r+0x50e>
 801050e:	6832      	ldr	r2, [r6, #0]
 8010510:	6873      	ldr	r3, [r6, #4]
 8010512:	f7f0 ffc9 	bl	80014a8 <__aeabi_dmul>
 8010516:	003b      	movs	r3, r7
 8010518:	3401      	adds	r4, #1
 801051a:	106d      	asrs	r5, r5, #1
 801051c:	3608      	adds	r6, #8
 801051e:	e75b      	b.n	80103d8 <_dtoa_r+0x3cc>
 8010520:	9b04      	ldr	r3, [sp, #16]
 8010522:	930c      	str	r3, [sp, #48]	@ 0x30
 8010524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010526:	e77f      	b.n	8010428 <_dtoa_r+0x41c>
 8010528:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801052a:	4b7a      	ldr	r3, [pc, #488]	@ (8010714 <_dtoa_r+0x708>)
 801052c:	3a01      	subs	r2, #1
 801052e:	00d2      	lsls	r2, r2, #3
 8010530:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010532:	189b      	adds	r3, r3, r2
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	2900      	cmp	r1, #0
 801053a:	d04c      	beq.n	80105d6 <_dtoa_r+0x5ca>
 801053c:	2000      	movs	r0, #0
 801053e:	497c      	ldr	r1, [pc, #496]	@ (8010730 <_dtoa_r+0x724>)
 8010540:	f7f0 fb78 	bl	8000c34 <__aeabi_ddiv>
 8010544:	0032      	movs	r2, r6
 8010546:	003b      	movs	r3, r7
 8010548:	f7f1 fa94 	bl	8001a74 <__aeabi_dsub>
 801054c:	9a08      	ldr	r2, [sp, #32]
 801054e:	0006      	movs	r6, r0
 8010550:	4694      	mov	ip, r2
 8010552:	000f      	movs	r7, r1
 8010554:	9b08      	ldr	r3, [sp, #32]
 8010556:	9316      	str	r3, [sp, #88]	@ 0x58
 8010558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801055a:	4463      	add	r3, ip
 801055c:	9311      	str	r3, [sp, #68]	@ 0x44
 801055e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010562:	f7f1 feb3 	bl	80022cc <__aeabi_d2iz>
 8010566:	0005      	movs	r5, r0
 8010568:	f7f1 feec 	bl	8002344 <__aeabi_i2d>
 801056c:	0002      	movs	r2, r0
 801056e:	000b      	movs	r3, r1
 8010570:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010572:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010574:	f7f1 fa7e 	bl	8001a74 <__aeabi_dsub>
 8010578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801057a:	3530      	adds	r5, #48	@ 0x30
 801057c:	1c5c      	adds	r4, r3, #1
 801057e:	701d      	strb	r5, [r3, #0]
 8010580:	0032      	movs	r2, r6
 8010582:	003b      	movs	r3, r7
 8010584:	900a      	str	r0, [sp, #40]	@ 0x28
 8010586:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010588:	f7ef ff66 	bl	8000458 <__aeabi_dcmplt>
 801058c:	2800      	cmp	r0, #0
 801058e:	d16b      	bne.n	8010668 <_dtoa_r+0x65c>
 8010590:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010594:	2000      	movs	r0, #0
 8010596:	4961      	ldr	r1, [pc, #388]	@ (801071c <_dtoa_r+0x710>)
 8010598:	f7f1 fa6c 	bl	8001a74 <__aeabi_dsub>
 801059c:	0032      	movs	r2, r6
 801059e:	003b      	movs	r3, r7
 80105a0:	f7ef ff5a 	bl	8000458 <__aeabi_dcmplt>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d000      	beq.n	80105aa <_dtoa_r+0x59e>
 80105a8:	e0c6      	b.n	8010738 <_dtoa_r+0x72c>
 80105aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105ac:	42a3      	cmp	r3, r4
 80105ae:	d100      	bne.n	80105b2 <_dtoa_r+0x5a6>
 80105b0:	e765      	b.n	801047e <_dtoa_r+0x472>
 80105b2:	2200      	movs	r2, #0
 80105b4:	0030      	movs	r0, r6
 80105b6:	0039      	movs	r1, r7
 80105b8:	4b59      	ldr	r3, [pc, #356]	@ (8010720 <_dtoa_r+0x714>)
 80105ba:	f7f0 ff75 	bl	80014a8 <__aeabi_dmul>
 80105be:	2200      	movs	r2, #0
 80105c0:	0006      	movs	r6, r0
 80105c2:	000f      	movs	r7, r1
 80105c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105c8:	4b55      	ldr	r3, [pc, #340]	@ (8010720 <_dtoa_r+0x714>)
 80105ca:	f7f0 ff6d 	bl	80014a8 <__aeabi_dmul>
 80105ce:	9416      	str	r4, [sp, #88]	@ 0x58
 80105d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80105d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80105d4:	e7c3      	b.n	801055e <_dtoa_r+0x552>
 80105d6:	0030      	movs	r0, r6
 80105d8:	0039      	movs	r1, r7
 80105da:	f7f0 ff65 	bl	80014a8 <__aeabi_dmul>
 80105de:	9d08      	ldr	r5, [sp, #32]
 80105e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80105e2:	002b      	movs	r3, r5
 80105e4:	4694      	mov	ip, r2
 80105e6:	9016      	str	r0, [sp, #88]	@ 0x58
 80105e8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80105ea:	4463      	add	r3, ip
 80105ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80105ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105f2:	f7f1 fe6b 	bl	80022cc <__aeabi_d2iz>
 80105f6:	0004      	movs	r4, r0
 80105f8:	f7f1 fea4 	bl	8002344 <__aeabi_i2d>
 80105fc:	000b      	movs	r3, r1
 80105fe:	0002      	movs	r2, r0
 8010600:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010602:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010604:	f7f1 fa36 	bl	8001a74 <__aeabi_dsub>
 8010608:	3430      	adds	r4, #48	@ 0x30
 801060a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801060c:	702c      	strb	r4, [r5, #0]
 801060e:	3501      	adds	r5, #1
 8010610:	0006      	movs	r6, r0
 8010612:	000f      	movs	r7, r1
 8010614:	42ab      	cmp	r3, r5
 8010616:	d12a      	bne.n	801066e <_dtoa_r+0x662>
 8010618:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801061a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801061c:	9b08      	ldr	r3, [sp, #32]
 801061e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010620:	469c      	mov	ip, r3
 8010622:	2200      	movs	r2, #0
 8010624:	4b42      	ldr	r3, [pc, #264]	@ (8010730 <_dtoa_r+0x724>)
 8010626:	4464      	add	r4, ip
 8010628:	f7ef ff3e 	bl	80004a8 <__aeabi_dadd>
 801062c:	0002      	movs	r2, r0
 801062e:	000b      	movs	r3, r1
 8010630:	0030      	movs	r0, r6
 8010632:	0039      	movs	r1, r7
 8010634:	f7ef ff24 	bl	8000480 <__aeabi_dcmpgt>
 8010638:	2800      	cmp	r0, #0
 801063a:	d000      	beq.n	801063e <_dtoa_r+0x632>
 801063c:	e07c      	b.n	8010738 <_dtoa_r+0x72c>
 801063e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010640:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010642:	2000      	movs	r0, #0
 8010644:	493a      	ldr	r1, [pc, #232]	@ (8010730 <_dtoa_r+0x724>)
 8010646:	f7f1 fa15 	bl	8001a74 <__aeabi_dsub>
 801064a:	0002      	movs	r2, r0
 801064c:	000b      	movs	r3, r1
 801064e:	0030      	movs	r0, r6
 8010650:	0039      	movs	r1, r7
 8010652:	f7ef ff01 	bl	8000458 <__aeabi_dcmplt>
 8010656:	2800      	cmp	r0, #0
 8010658:	d100      	bne.n	801065c <_dtoa_r+0x650>
 801065a:	e710      	b.n	801047e <_dtoa_r+0x472>
 801065c:	0023      	movs	r3, r4
 801065e:	3c01      	subs	r4, #1
 8010660:	7822      	ldrb	r2, [r4, #0]
 8010662:	2a30      	cmp	r2, #48	@ 0x30
 8010664:	d0fa      	beq.n	801065c <_dtoa_r+0x650>
 8010666:	001c      	movs	r4, r3
 8010668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801066a:	9304      	str	r3, [sp, #16]
 801066c:	e042      	b.n	80106f4 <_dtoa_r+0x6e8>
 801066e:	2200      	movs	r2, #0
 8010670:	4b2b      	ldr	r3, [pc, #172]	@ (8010720 <_dtoa_r+0x714>)
 8010672:	f7f0 ff19 	bl	80014a8 <__aeabi_dmul>
 8010676:	900a      	str	r0, [sp, #40]	@ 0x28
 8010678:	910b      	str	r1, [sp, #44]	@ 0x2c
 801067a:	e7b8      	b.n	80105ee <_dtoa_r+0x5e2>
 801067c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801067e:	9d08      	ldr	r5, [sp, #32]
 8010680:	3b01      	subs	r3, #1
 8010682:	195b      	adds	r3, r3, r5
 8010684:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010686:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010688:	930a      	str	r3, [sp, #40]	@ 0x28
 801068a:	9a06      	ldr	r2, [sp, #24]
 801068c:	9b07      	ldr	r3, [sp, #28]
 801068e:	0030      	movs	r0, r6
 8010690:	0039      	movs	r1, r7
 8010692:	f7f0 facf 	bl	8000c34 <__aeabi_ddiv>
 8010696:	f7f1 fe19 	bl	80022cc <__aeabi_d2iz>
 801069a:	9009      	str	r0, [sp, #36]	@ 0x24
 801069c:	f7f1 fe52 	bl	8002344 <__aeabi_i2d>
 80106a0:	9a06      	ldr	r2, [sp, #24]
 80106a2:	9b07      	ldr	r3, [sp, #28]
 80106a4:	f7f0 ff00 	bl	80014a8 <__aeabi_dmul>
 80106a8:	0002      	movs	r2, r0
 80106aa:	000b      	movs	r3, r1
 80106ac:	0030      	movs	r0, r6
 80106ae:	0039      	movs	r1, r7
 80106b0:	f7f1 f9e0 	bl	8001a74 <__aeabi_dsub>
 80106b4:	002b      	movs	r3, r5
 80106b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106b8:	3501      	adds	r5, #1
 80106ba:	3230      	adds	r2, #48	@ 0x30
 80106bc:	701a      	strb	r2, [r3, #0]
 80106be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106c0:	002c      	movs	r4, r5
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d14b      	bne.n	801075e <_dtoa_r+0x752>
 80106c6:	0002      	movs	r2, r0
 80106c8:	000b      	movs	r3, r1
 80106ca:	f7ef feed 	bl	80004a8 <__aeabi_dadd>
 80106ce:	9a06      	ldr	r2, [sp, #24]
 80106d0:	9b07      	ldr	r3, [sp, #28]
 80106d2:	0006      	movs	r6, r0
 80106d4:	000f      	movs	r7, r1
 80106d6:	f7ef fed3 	bl	8000480 <__aeabi_dcmpgt>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d12a      	bne.n	8010734 <_dtoa_r+0x728>
 80106de:	9a06      	ldr	r2, [sp, #24]
 80106e0:	9b07      	ldr	r3, [sp, #28]
 80106e2:	0030      	movs	r0, r6
 80106e4:	0039      	movs	r1, r7
 80106e6:	f7ef feb1 	bl	800044c <__aeabi_dcmpeq>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d002      	beq.n	80106f4 <_dtoa_r+0x6e8>
 80106ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f0:	07dd      	lsls	r5, r3, #31
 80106f2:	d41f      	bmi.n	8010734 <_dtoa_r+0x728>
 80106f4:	9905      	ldr	r1, [sp, #20]
 80106f6:	9803      	ldr	r0, [sp, #12]
 80106f8:	f000 fbc2 	bl	8010e80 <_Bfree>
 80106fc:	2300      	movs	r3, #0
 80106fe:	7023      	strb	r3, [r4, #0]
 8010700:	9b04      	ldr	r3, [sp, #16]
 8010702:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010704:	3301      	adds	r3, #1
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801070a:	2b00      	cmp	r3, #0
 801070c:	d100      	bne.n	8010710 <_dtoa_r+0x704>
 801070e:	e4c7      	b.n	80100a0 <_dtoa_r+0x94>
 8010710:	601c      	str	r4, [r3, #0]
 8010712:	e4c5      	b.n	80100a0 <_dtoa_r+0x94>
 8010714:	08012198 	.word	0x08012198
 8010718:	08012170 	.word	0x08012170
 801071c:	3ff00000 	.word	0x3ff00000
 8010720:	40240000 	.word	0x40240000
 8010724:	401c0000 	.word	0x401c0000
 8010728:	fcc00000 	.word	0xfcc00000
 801072c:	40140000 	.word	0x40140000
 8010730:	3fe00000 	.word	0x3fe00000
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	930c      	str	r3, [sp, #48]	@ 0x30
 8010738:	0023      	movs	r3, r4
 801073a:	001c      	movs	r4, r3
 801073c:	3b01      	subs	r3, #1
 801073e:	781a      	ldrb	r2, [r3, #0]
 8010740:	2a39      	cmp	r2, #57	@ 0x39
 8010742:	d108      	bne.n	8010756 <_dtoa_r+0x74a>
 8010744:	9a08      	ldr	r2, [sp, #32]
 8010746:	429a      	cmp	r2, r3
 8010748:	d1f7      	bne.n	801073a <_dtoa_r+0x72e>
 801074a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801074c:	9908      	ldr	r1, [sp, #32]
 801074e:	3201      	adds	r2, #1
 8010750:	920c      	str	r2, [sp, #48]	@ 0x30
 8010752:	2230      	movs	r2, #48	@ 0x30
 8010754:	700a      	strb	r2, [r1, #0]
 8010756:	781a      	ldrb	r2, [r3, #0]
 8010758:	3201      	adds	r2, #1
 801075a:	701a      	strb	r2, [r3, #0]
 801075c:	e784      	b.n	8010668 <_dtoa_r+0x65c>
 801075e:	2200      	movs	r2, #0
 8010760:	4bc6      	ldr	r3, [pc, #792]	@ (8010a7c <_dtoa_r+0xa70>)
 8010762:	f7f0 fea1 	bl	80014a8 <__aeabi_dmul>
 8010766:	2200      	movs	r2, #0
 8010768:	2300      	movs	r3, #0
 801076a:	0006      	movs	r6, r0
 801076c:	000f      	movs	r7, r1
 801076e:	f7ef fe6d 	bl	800044c <__aeabi_dcmpeq>
 8010772:	2800      	cmp	r0, #0
 8010774:	d089      	beq.n	801068a <_dtoa_r+0x67e>
 8010776:	e7bd      	b.n	80106f4 <_dtoa_r+0x6e8>
 8010778:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801077a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801077c:	9c06      	ldr	r4, [sp, #24]
 801077e:	2f00      	cmp	r7, #0
 8010780:	d014      	beq.n	80107ac <_dtoa_r+0x7a0>
 8010782:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010784:	2a01      	cmp	r2, #1
 8010786:	dd00      	ble.n	801078a <_dtoa_r+0x77e>
 8010788:	e0e4      	b.n	8010954 <_dtoa_r+0x948>
 801078a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801078c:	2a00      	cmp	r2, #0
 801078e:	d100      	bne.n	8010792 <_dtoa_r+0x786>
 8010790:	e0da      	b.n	8010948 <_dtoa_r+0x93c>
 8010792:	4abb      	ldr	r2, [pc, #748]	@ (8010a80 <_dtoa_r+0xa74>)
 8010794:	189b      	adds	r3, r3, r2
 8010796:	9a06      	ldr	r2, [sp, #24]
 8010798:	2101      	movs	r1, #1
 801079a:	18d2      	adds	r2, r2, r3
 801079c:	9206      	str	r2, [sp, #24]
 801079e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107a0:	9803      	ldr	r0, [sp, #12]
 80107a2:	18d3      	adds	r3, r2, r3
 80107a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80107a6:	f000 fc23 	bl	8010ff0 <__i2b>
 80107aa:	0007      	movs	r7, r0
 80107ac:	2c00      	cmp	r4, #0
 80107ae:	d00e      	beq.n	80107ce <_dtoa_r+0x7c2>
 80107b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dd0b      	ble.n	80107ce <_dtoa_r+0x7c2>
 80107b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107b8:	0023      	movs	r3, r4
 80107ba:	4294      	cmp	r4, r2
 80107bc:	dd00      	ble.n	80107c0 <_dtoa_r+0x7b4>
 80107be:	0013      	movs	r3, r2
 80107c0:	9a06      	ldr	r2, [sp, #24]
 80107c2:	1ae4      	subs	r4, r4, r3
 80107c4:	1ad2      	subs	r2, r2, r3
 80107c6:	9206      	str	r2, [sp, #24]
 80107c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80107ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d021      	beq.n	8010818 <_dtoa_r+0x80c>
 80107d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d100      	bne.n	80107dc <_dtoa_r+0x7d0>
 80107da:	e0d3      	b.n	8010984 <_dtoa_r+0x978>
 80107dc:	9e05      	ldr	r6, [sp, #20]
 80107de:	2d00      	cmp	r5, #0
 80107e0:	d014      	beq.n	801080c <_dtoa_r+0x800>
 80107e2:	0039      	movs	r1, r7
 80107e4:	002a      	movs	r2, r5
 80107e6:	9803      	ldr	r0, [sp, #12]
 80107e8:	f000 fcc4 	bl	8011174 <__pow5mult>
 80107ec:	9a05      	ldr	r2, [sp, #20]
 80107ee:	0001      	movs	r1, r0
 80107f0:	0007      	movs	r7, r0
 80107f2:	9803      	ldr	r0, [sp, #12]
 80107f4:	f000 fc14 	bl	8011020 <__multiply>
 80107f8:	0006      	movs	r6, r0
 80107fa:	9905      	ldr	r1, [sp, #20]
 80107fc:	9803      	ldr	r0, [sp, #12]
 80107fe:	f000 fb3f 	bl	8010e80 <_Bfree>
 8010802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010804:	9605      	str	r6, [sp, #20]
 8010806:	1b5b      	subs	r3, r3, r5
 8010808:	930f      	str	r3, [sp, #60]	@ 0x3c
 801080a:	d005      	beq.n	8010818 <_dtoa_r+0x80c>
 801080c:	0031      	movs	r1, r6
 801080e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010810:	9803      	ldr	r0, [sp, #12]
 8010812:	f000 fcaf 	bl	8011174 <__pow5mult>
 8010816:	9005      	str	r0, [sp, #20]
 8010818:	2101      	movs	r1, #1
 801081a:	9803      	ldr	r0, [sp, #12]
 801081c:	f000 fbe8 	bl	8010ff0 <__i2b>
 8010820:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010822:	0006      	movs	r6, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d100      	bne.n	801082a <_dtoa_r+0x81e>
 8010828:	e1bc      	b.n	8010ba4 <_dtoa_r+0xb98>
 801082a:	001a      	movs	r2, r3
 801082c:	0001      	movs	r1, r0
 801082e:	9803      	ldr	r0, [sp, #12]
 8010830:	f000 fca0 	bl	8011174 <__pow5mult>
 8010834:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010836:	0006      	movs	r6, r0
 8010838:	2500      	movs	r5, #0
 801083a:	2b01      	cmp	r3, #1
 801083c:	dc16      	bgt.n	801086c <_dtoa_r+0x860>
 801083e:	2500      	movs	r5, #0
 8010840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010842:	42ab      	cmp	r3, r5
 8010844:	d10e      	bne.n	8010864 <_dtoa_r+0x858>
 8010846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010848:	031b      	lsls	r3, r3, #12
 801084a:	42ab      	cmp	r3, r5
 801084c:	d10a      	bne.n	8010864 <_dtoa_r+0x858>
 801084e:	4b8d      	ldr	r3, [pc, #564]	@ (8010a84 <_dtoa_r+0xa78>)
 8010850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010852:	4213      	tst	r3, r2
 8010854:	d006      	beq.n	8010864 <_dtoa_r+0x858>
 8010856:	9b06      	ldr	r3, [sp, #24]
 8010858:	3501      	adds	r5, #1
 801085a:	3301      	adds	r3, #1
 801085c:	9306      	str	r3, [sp, #24]
 801085e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010860:	3301      	adds	r3, #1
 8010862:	930d      	str	r3, [sp, #52]	@ 0x34
 8010864:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010866:	2001      	movs	r0, #1
 8010868:	2b00      	cmp	r3, #0
 801086a:	d008      	beq.n	801087e <_dtoa_r+0x872>
 801086c:	6933      	ldr	r3, [r6, #16]
 801086e:	3303      	adds	r3, #3
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	18f3      	adds	r3, r6, r3
 8010874:	6858      	ldr	r0, [r3, #4]
 8010876:	f000 fb6b 	bl	8010f50 <__hi0bits>
 801087a:	2320      	movs	r3, #32
 801087c:	1a18      	subs	r0, r3, r0
 801087e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010880:	1818      	adds	r0, r3, r0
 8010882:	0002      	movs	r2, r0
 8010884:	231f      	movs	r3, #31
 8010886:	401a      	ands	r2, r3
 8010888:	4218      	tst	r0, r3
 801088a:	d100      	bne.n	801088e <_dtoa_r+0x882>
 801088c:	e081      	b.n	8010992 <_dtoa_r+0x986>
 801088e:	3301      	adds	r3, #1
 8010890:	1a9b      	subs	r3, r3, r2
 8010892:	2b04      	cmp	r3, #4
 8010894:	dd79      	ble.n	801098a <_dtoa_r+0x97e>
 8010896:	231c      	movs	r3, #28
 8010898:	1a9b      	subs	r3, r3, r2
 801089a:	9a06      	ldr	r2, [sp, #24]
 801089c:	18e4      	adds	r4, r4, r3
 801089e:	18d2      	adds	r2, r2, r3
 80108a0:	9206      	str	r2, [sp, #24]
 80108a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80108a4:	18d3      	adds	r3, r2, r3
 80108a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80108a8:	9b06      	ldr	r3, [sp, #24]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	dd05      	ble.n	80108ba <_dtoa_r+0x8ae>
 80108ae:	001a      	movs	r2, r3
 80108b0:	9905      	ldr	r1, [sp, #20]
 80108b2:	9803      	ldr	r0, [sp, #12]
 80108b4:	f000 fcba 	bl	801122c <__lshift>
 80108b8:	9005      	str	r0, [sp, #20]
 80108ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd05      	ble.n	80108cc <_dtoa_r+0x8c0>
 80108c0:	0031      	movs	r1, r6
 80108c2:	001a      	movs	r2, r3
 80108c4:	9803      	ldr	r0, [sp, #12]
 80108c6:	f000 fcb1 	bl	801122c <__lshift>
 80108ca:	0006      	movs	r6, r0
 80108cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d061      	beq.n	8010996 <_dtoa_r+0x98a>
 80108d2:	0031      	movs	r1, r6
 80108d4:	9805      	ldr	r0, [sp, #20]
 80108d6:	f000 fd15 	bl	8011304 <__mcmp>
 80108da:	2800      	cmp	r0, #0
 80108dc:	da5b      	bge.n	8010996 <_dtoa_r+0x98a>
 80108de:	9b04      	ldr	r3, [sp, #16]
 80108e0:	220a      	movs	r2, #10
 80108e2:	3b01      	subs	r3, #1
 80108e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80108e6:	9905      	ldr	r1, [sp, #20]
 80108e8:	2300      	movs	r3, #0
 80108ea:	9803      	ldr	r0, [sp, #12]
 80108ec:	f000 faec 	bl	8010ec8 <__multadd>
 80108f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108f2:	9005      	str	r0, [sp, #20]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d100      	bne.n	80108fa <_dtoa_r+0x8ee>
 80108f8:	e15b      	b.n	8010bb2 <_dtoa_r+0xba6>
 80108fa:	2300      	movs	r3, #0
 80108fc:	0039      	movs	r1, r7
 80108fe:	220a      	movs	r2, #10
 8010900:	9803      	ldr	r0, [sp, #12]
 8010902:	f000 fae1 	bl	8010ec8 <__multadd>
 8010906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010908:	0007      	movs	r7, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	dc4d      	bgt.n	80109aa <_dtoa_r+0x99e>
 801090e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010910:	2b02      	cmp	r3, #2
 8010912:	dd46      	ble.n	80109a2 <_dtoa_r+0x996>
 8010914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010916:	2b00      	cmp	r3, #0
 8010918:	d000      	beq.n	801091c <_dtoa_r+0x910>
 801091a:	e5db      	b.n	80104d4 <_dtoa_r+0x4c8>
 801091c:	0031      	movs	r1, r6
 801091e:	2205      	movs	r2, #5
 8010920:	9803      	ldr	r0, [sp, #12]
 8010922:	f000 fad1 	bl	8010ec8 <__multadd>
 8010926:	0006      	movs	r6, r0
 8010928:	0001      	movs	r1, r0
 801092a:	9805      	ldr	r0, [sp, #20]
 801092c:	f000 fcea 	bl	8011304 <__mcmp>
 8010930:	2800      	cmp	r0, #0
 8010932:	dc00      	bgt.n	8010936 <_dtoa_r+0x92a>
 8010934:	e5ce      	b.n	80104d4 <_dtoa_r+0x4c8>
 8010936:	9b08      	ldr	r3, [sp, #32]
 8010938:	9a08      	ldr	r2, [sp, #32]
 801093a:	1c5c      	adds	r4, r3, #1
 801093c:	2331      	movs	r3, #49	@ 0x31
 801093e:	7013      	strb	r3, [r2, #0]
 8010940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010942:	3301      	adds	r3, #1
 8010944:	930c      	str	r3, [sp, #48]	@ 0x30
 8010946:	e5c9      	b.n	80104dc <_dtoa_r+0x4d0>
 8010948:	2336      	movs	r3, #54	@ 0x36
 801094a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801094c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	9c06      	ldr	r4, [sp, #24]
 8010952:	e720      	b.n	8010796 <_dtoa_r+0x78a>
 8010954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010956:	1e5d      	subs	r5, r3, #1
 8010958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801095a:	42ab      	cmp	r3, r5
 801095c:	db08      	blt.n	8010970 <_dtoa_r+0x964>
 801095e:	1b5d      	subs	r5, r3, r5
 8010960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010962:	2b00      	cmp	r3, #0
 8010964:	daf4      	bge.n	8010950 <_dtoa_r+0x944>
 8010966:	9b06      	ldr	r3, [sp, #24]
 8010968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801096a:	1a9c      	subs	r4, r3, r2
 801096c:	2300      	movs	r3, #0
 801096e:	e712      	b.n	8010796 <_dtoa_r+0x78a>
 8010970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010972:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010974:	1aeb      	subs	r3, r5, r3
 8010976:	18d3      	adds	r3, r2, r3
 8010978:	9314      	str	r3, [sp, #80]	@ 0x50
 801097a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801097c:	9c06      	ldr	r4, [sp, #24]
 801097e:	2500      	movs	r5, #0
 8010980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010982:	e708      	b.n	8010796 <_dtoa_r+0x78a>
 8010984:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010986:	9905      	ldr	r1, [sp, #20]
 8010988:	e742      	b.n	8010810 <_dtoa_r+0x804>
 801098a:	2b04      	cmp	r3, #4
 801098c:	d08c      	beq.n	80108a8 <_dtoa_r+0x89c>
 801098e:	331c      	adds	r3, #28
 8010990:	e783      	b.n	801089a <_dtoa_r+0x88e>
 8010992:	0013      	movs	r3, r2
 8010994:	e7fb      	b.n	801098e <_dtoa_r+0x982>
 8010996:	9b04      	ldr	r3, [sp, #16]
 8010998:	930c      	str	r3, [sp, #48]	@ 0x30
 801099a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801099c:	930e      	str	r3, [sp, #56]	@ 0x38
 801099e:	2b00      	cmp	r3, #0
 80109a0:	ddb5      	ble.n	801090e <_dtoa_r+0x902>
 80109a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d100      	bne.n	80109aa <_dtoa_r+0x99e>
 80109a8:	e107      	b.n	8010bba <_dtoa_r+0xbae>
 80109aa:	2c00      	cmp	r4, #0
 80109ac:	dd05      	ble.n	80109ba <_dtoa_r+0x9ae>
 80109ae:	0039      	movs	r1, r7
 80109b0:	0022      	movs	r2, r4
 80109b2:	9803      	ldr	r0, [sp, #12]
 80109b4:	f000 fc3a 	bl	801122c <__lshift>
 80109b8:	0007      	movs	r7, r0
 80109ba:	9704      	str	r7, [sp, #16]
 80109bc:	2d00      	cmp	r5, #0
 80109be:	d020      	beq.n	8010a02 <_dtoa_r+0x9f6>
 80109c0:	6879      	ldr	r1, [r7, #4]
 80109c2:	9803      	ldr	r0, [sp, #12]
 80109c4:	f000 fa18 	bl	8010df8 <_Balloc>
 80109c8:	1e04      	subs	r4, r0, #0
 80109ca:	d10c      	bne.n	80109e6 <_dtoa_r+0x9da>
 80109cc:	0022      	movs	r2, r4
 80109ce:	4b2e      	ldr	r3, [pc, #184]	@ (8010a88 <_dtoa_r+0xa7c>)
 80109d0:	482e      	ldr	r0, [pc, #184]	@ (8010a8c <_dtoa_r+0xa80>)
 80109d2:	492f      	ldr	r1, [pc, #188]	@ (8010a90 <_dtoa_r+0xa84>)
 80109d4:	f7ff fb2f 	bl	8010036 <_dtoa_r+0x2a>
 80109d8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80109da:	0037      	movs	r7, r6
 80109dc:	e7ab      	b.n	8010936 <_dtoa_r+0x92a>
 80109de:	9b04      	ldr	r3, [sp, #16]
 80109e0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80109e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80109e4:	e7f9      	b.n	80109da <_dtoa_r+0x9ce>
 80109e6:	0039      	movs	r1, r7
 80109e8:	693a      	ldr	r2, [r7, #16]
 80109ea:	310c      	adds	r1, #12
 80109ec:	3202      	adds	r2, #2
 80109ee:	0092      	lsls	r2, r2, #2
 80109f0:	300c      	adds	r0, #12
 80109f2:	f7ff fa7d 	bl	800fef0 <memcpy>
 80109f6:	2201      	movs	r2, #1
 80109f8:	0021      	movs	r1, r4
 80109fa:	9803      	ldr	r0, [sp, #12]
 80109fc:	f000 fc16 	bl	801122c <__lshift>
 8010a00:	9004      	str	r0, [sp, #16]
 8010a02:	9b08      	ldr	r3, [sp, #32]
 8010a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a06:	9306      	str	r3, [sp, #24]
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	189b      	adds	r3, r3, r2
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a12:	4013      	ands	r3, r2
 8010a14:	930e      	str	r3, [sp, #56]	@ 0x38
 8010a16:	0031      	movs	r1, r6
 8010a18:	9805      	ldr	r0, [sp, #20]
 8010a1a:	f7ff fa72 	bl	800ff02 <quorem>
 8010a1e:	0039      	movs	r1, r7
 8010a20:	0005      	movs	r5, r0
 8010a22:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a24:	9805      	ldr	r0, [sp, #20]
 8010a26:	f000 fc6d 	bl	8011304 <__mcmp>
 8010a2a:	9a04      	ldr	r2, [sp, #16]
 8010a2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8010a2e:	0031      	movs	r1, r6
 8010a30:	9803      	ldr	r0, [sp, #12]
 8010a32:	f000 fc83 	bl	801133c <__mdiff>
 8010a36:	2201      	movs	r2, #1
 8010a38:	68c3      	ldr	r3, [r0, #12]
 8010a3a:	0004      	movs	r4, r0
 8010a3c:	3530      	adds	r5, #48	@ 0x30
 8010a3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d104      	bne.n	8010a4e <_dtoa_r+0xa42>
 8010a44:	0001      	movs	r1, r0
 8010a46:	9805      	ldr	r0, [sp, #20]
 8010a48:	f000 fc5c 	bl	8011304 <__mcmp>
 8010a4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8010a4e:	0021      	movs	r1, r4
 8010a50:	9803      	ldr	r0, [sp, #12]
 8010a52:	f000 fa15 	bl	8010e80 <_Bfree>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010a5a:	1c5c      	adds	r4, r3, #1
 8010a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a62:	4313      	orrs	r3, r2
 8010a64:	d116      	bne.n	8010a94 <_dtoa_r+0xa88>
 8010a66:	2d39      	cmp	r5, #57	@ 0x39
 8010a68:	d02f      	beq.n	8010aca <_dtoa_r+0xabe>
 8010a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	dd01      	ble.n	8010a74 <_dtoa_r+0xa68>
 8010a70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010a72:	3531      	adds	r5, #49	@ 0x31
 8010a74:	9b06      	ldr	r3, [sp, #24]
 8010a76:	701d      	strb	r5, [r3, #0]
 8010a78:	e532      	b.n	80104e0 <_dtoa_r+0x4d4>
 8010a7a:	46c0      	nop			@ (mov r8, r8)
 8010a7c:	40240000 	.word	0x40240000
 8010a80:	00000433 	.word	0x00000433
 8010a84:	7ff00000 	.word	0x7ff00000
 8010a88:	0801209e 	.word	0x0801209e
 8010a8c:	08012046 	.word	0x08012046
 8010a90:	000002ef 	.word	0x000002ef
 8010a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	db04      	blt.n	8010aa4 <_dtoa_r+0xa98>
 8010a9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	d11e      	bne.n	8010ae2 <_dtoa_r+0xad6>
 8010aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	dde4      	ble.n	8010a74 <_dtoa_r+0xa68>
 8010aaa:	9905      	ldr	r1, [sp, #20]
 8010aac:	2201      	movs	r2, #1
 8010aae:	9803      	ldr	r0, [sp, #12]
 8010ab0:	f000 fbbc 	bl	801122c <__lshift>
 8010ab4:	0031      	movs	r1, r6
 8010ab6:	9005      	str	r0, [sp, #20]
 8010ab8:	f000 fc24 	bl	8011304 <__mcmp>
 8010abc:	2800      	cmp	r0, #0
 8010abe:	dc02      	bgt.n	8010ac6 <_dtoa_r+0xaba>
 8010ac0:	d1d8      	bne.n	8010a74 <_dtoa_r+0xa68>
 8010ac2:	07eb      	lsls	r3, r5, #31
 8010ac4:	d5d6      	bpl.n	8010a74 <_dtoa_r+0xa68>
 8010ac6:	2d39      	cmp	r5, #57	@ 0x39
 8010ac8:	d1d2      	bne.n	8010a70 <_dtoa_r+0xa64>
 8010aca:	2339      	movs	r3, #57	@ 0x39
 8010acc:	9a06      	ldr	r2, [sp, #24]
 8010ace:	7013      	strb	r3, [r2, #0]
 8010ad0:	0023      	movs	r3, r4
 8010ad2:	001c      	movs	r4, r3
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	781a      	ldrb	r2, [r3, #0]
 8010ad8:	2a39      	cmp	r2, #57	@ 0x39
 8010ada:	d050      	beq.n	8010b7e <_dtoa_r+0xb72>
 8010adc:	3201      	adds	r2, #1
 8010ade:	701a      	strb	r2, [r3, #0]
 8010ae0:	e4fe      	b.n	80104e0 <_dtoa_r+0x4d4>
 8010ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	dd03      	ble.n	8010af0 <_dtoa_r+0xae4>
 8010ae8:	2d39      	cmp	r5, #57	@ 0x39
 8010aea:	d0ee      	beq.n	8010aca <_dtoa_r+0xabe>
 8010aec:	3501      	adds	r5, #1
 8010aee:	e7c1      	b.n	8010a74 <_dtoa_r+0xa68>
 8010af0:	9b06      	ldr	r3, [sp, #24]
 8010af2:	9a06      	ldr	r2, [sp, #24]
 8010af4:	701d      	strb	r5, [r3, #0]
 8010af6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d02b      	beq.n	8010b54 <_dtoa_r+0xb48>
 8010afc:	2300      	movs	r3, #0
 8010afe:	220a      	movs	r2, #10
 8010b00:	9905      	ldr	r1, [sp, #20]
 8010b02:	9803      	ldr	r0, [sp, #12]
 8010b04:	f000 f9e0 	bl	8010ec8 <__multadd>
 8010b08:	9b04      	ldr	r3, [sp, #16]
 8010b0a:	9005      	str	r0, [sp, #20]
 8010b0c:	429f      	cmp	r7, r3
 8010b0e:	d109      	bne.n	8010b24 <_dtoa_r+0xb18>
 8010b10:	0039      	movs	r1, r7
 8010b12:	2300      	movs	r3, #0
 8010b14:	220a      	movs	r2, #10
 8010b16:	9803      	ldr	r0, [sp, #12]
 8010b18:	f000 f9d6 	bl	8010ec8 <__multadd>
 8010b1c:	0007      	movs	r7, r0
 8010b1e:	9004      	str	r0, [sp, #16]
 8010b20:	9406      	str	r4, [sp, #24]
 8010b22:	e778      	b.n	8010a16 <_dtoa_r+0xa0a>
 8010b24:	0039      	movs	r1, r7
 8010b26:	2300      	movs	r3, #0
 8010b28:	220a      	movs	r2, #10
 8010b2a:	9803      	ldr	r0, [sp, #12]
 8010b2c:	f000 f9cc 	bl	8010ec8 <__multadd>
 8010b30:	2300      	movs	r3, #0
 8010b32:	0007      	movs	r7, r0
 8010b34:	220a      	movs	r2, #10
 8010b36:	9904      	ldr	r1, [sp, #16]
 8010b38:	9803      	ldr	r0, [sp, #12]
 8010b3a:	f000 f9c5 	bl	8010ec8 <__multadd>
 8010b3e:	9004      	str	r0, [sp, #16]
 8010b40:	e7ee      	b.n	8010b20 <_dtoa_r+0xb14>
 8010b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b44:	2401      	movs	r4, #1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	dd00      	ble.n	8010b4c <_dtoa_r+0xb40>
 8010b4a:	001c      	movs	r4, r3
 8010b4c:	9704      	str	r7, [sp, #16]
 8010b4e:	2700      	movs	r7, #0
 8010b50:	9b08      	ldr	r3, [sp, #32]
 8010b52:	191c      	adds	r4, r3, r4
 8010b54:	9905      	ldr	r1, [sp, #20]
 8010b56:	2201      	movs	r2, #1
 8010b58:	9803      	ldr	r0, [sp, #12]
 8010b5a:	f000 fb67 	bl	801122c <__lshift>
 8010b5e:	0031      	movs	r1, r6
 8010b60:	9005      	str	r0, [sp, #20]
 8010b62:	f000 fbcf 	bl	8011304 <__mcmp>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	dcb2      	bgt.n	8010ad0 <_dtoa_r+0xac4>
 8010b6a:	d101      	bne.n	8010b70 <_dtoa_r+0xb64>
 8010b6c:	07ed      	lsls	r5, r5, #31
 8010b6e:	d4af      	bmi.n	8010ad0 <_dtoa_r+0xac4>
 8010b70:	0023      	movs	r3, r4
 8010b72:	001c      	movs	r4, r3
 8010b74:	3b01      	subs	r3, #1
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	2a30      	cmp	r2, #48	@ 0x30
 8010b7a:	d0fa      	beq.n	8010b72 <_dtoa_r+0xb66>
 8010b7c:	e4b0      	b.n	80104e0 <_dtoa_r+0x4d4>
 8010b7e:	9a08      	ldr	r2, [sp, #32]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d1a6      	bne.n	8010ad2 <_dtoa_r+0xac6>
 8010b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b86:	3301      	adds	r3, #1
 8010b88:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b8a:	2331      	movs	r3, #49	@ 0x31
 8010b8c:	7013      	strb	r3, [r2, #0]
 8010b8e:	e4a7      	b.n	80104e0 <_dtoa_r+0x4d4>
 8010b90:	4b14      	ldr	r3, [pc, #80]	@ (8010be4 <_dtoa_r+0xbd8>)
 8010b92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010b94:	9308      	str	r3, [sp, #32]
 8010b96:	4b14      	ldr	r3, [pc, #80]	@ (8010be8 <_dtoa_r+0xbdc>)
 8010b98:	2a00      	cmp	r2, #0
 8010b9a:	d001      	beq.n	8010ba0 <_dtoa_r+0xb94>
 8010b9c:	f7ff fa7e 	bl	801009c <_dtoa_r+0x90>
 8010ba0:	f7ff fa7e 	bl	80100a0 <_dtoa_r+0x94>
 8010ba4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	dc00      	bgt.n	8010bac <_dtoa_r+0xba0>
 8010baa:	e648      	b.n	801083e <_dtoa_r+0x832>
 8010bac:	2001      	movs	r0, #1
 8010bae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010bb0:	e665      	b.n	801087e <_dtoa_r+0x872>
 8010bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	dc00      	bgt.n	8010bba <_dtoa_r+0xbae>
 8010bb8:	e6a9      	b.n	801090e <_dtoa_r+0x902>
 8010bba:	2400      	movs	r4, #0
 8010bbc:	0031      	movs	r1, r6
 8010bbe:	9805      	ldr	r0, [sp, #20]
 8010bc0:	f7ff f99f 	bl	800ff02 <quorem>
 8010bc4:	9b08      	ldr	r3, [sp, #32]
 8010bc6:	3030      	adds	r0, #48	@ 0x30
 8010bc8:	5518      	strb	r0, [r3, r4]
 8010bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bcc:	3401      	adds	r4, #1
 8010bce:	0005      	movs	r5, r0
 8010bd0:	42a3      	cmp	r3, r4
 8010bd2:	ddb6      	ble.n	8010b42 <_dtoa_r+0xb36>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	220a      	movs	r2, #10
 8010bd8:	9905      	ldr	r1, [sp, #20]
 8010bda:	9803      	ldr	r0, [sp, #12]
 8010bdc:	f000 f974 	bl	8010ec8 <__multadd>
 8010be0:	9005      	str	r0, [sp, #20]
 8010be2:	e7eb      	b.n	8010bbc <_dtoa_r+0xbb0>
 8010be4:	08012022 	.word	0x08012022
 8010be8:	0801202a 	.word	0x0801202a

08010bec <_free_r>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	0005      	movs	r5, r0
 8010bf0:	1e0c      	subs	r4, r1, #0
 8010bf2:	d010      	beq.n	8010c16 <_free_r+0x2a>
 8010bf4:	3c04      	subs	r4, #4
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	da00      	bge.n	8010bfe <_free_r+0x12>
 8010bfc:	18e4      	adds	r4, r4, r3
 8010bfe:	0028      	movs	r0, r5
 8010c00:	f000 f8ea 	bl	8010dd8 <__malloc_lock>
 8010c04:	4a1d      	ldr	r2, [pc, #116]	@ (8010c7c <_free_r+0x90>)
 8010c06:	6813      	ldr	r3, [r2, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d105      	bne.n	8010c18 <_free_r+0x2c>
 8010c0c:	6063      	str	r3, [r4, #4]
 8010c0e:	6014      	str	r4, [r2, #0]
 8010c10:	0028      	movs	r0, r5
 8010c12:	f000 f8e9 	bl	8010de8 <__malloc_unlock>
 8010c16:	bd70      	pop	{r4, r5, r6, pc}
 8010c18:	42a3      	cmp	r3, r4
 8010c1a:	d908      	bls.n	8010c2e <_free_r+0x42>
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	1821      	adds	r1, r4, r0
 8010c20:	428b      	cmp	r3, r1
 8010c22:	d1f3      	bne.n	8010c0c <_free_r+0x20>
 8010c24:	6819      	ldr	r1, [r3, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	1809      	adds	r1, r1, r0
 8010c2a:	6021      	str	r1, [r4, #0]
 8010c2c:	e7ee      	b.n	8010c0c <_free_r+0x20>
 8010c2e:	001a      	movs	r2, r3
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <_free_r+0x4e>
 8010c36:	42a3      	cmp	r3, r4
 8010c38:	d9f9      	bls.n	8010c2e <_free_r+0x42>
 8010c3a:	6811      	ldr	r1, [r2, #0]
 8010c3c:	1850      	adds	r0, r2, r1
 8010c3e:	42a0      	cmp	r0, r4
 8010c40:	d10b      	bne.n	8010c5a <_free_r+0x6e>
 8010c42:	6820      	ldr	r0, [r4, #0]
 8010c44:	1809      	adds	r1, r1, r0
 8010c46:	1850      	adds	r0, r2, r1
 8010c48:	6011      	str	r1, [r2, #0]
 8010c4a:	4283      	cmp	r3, r0
 8010c4c:	d1e0      	bne.n	8010c10 <_free_r+0x24>
 8010c4e:	6818      	ldr	r0, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	1841      	adds	r1, r0, r1
 8010c54:	6011      	str	r1, [r2, #0]
 8010c56:	6053      	str	r3, [r2, #4]
 8010c58:	e7da      	b.n	8010c10 <_free_r+0x24>
 8010c5a:	42a0      	cmp	r0, r4
 8010c5c:	d902      	bls.n	8010c64 <_free_r+0x78>
 8010c5e:	230c      	movs	r3, #12
 8010c60:	602b      	str	r3, [r5, #0]
 8010c62:	e7d5      	b.n	8010c10 <_free_r+0x24>
 8010c64:	6820      	ldr	r0, [r4, #0]
 8010c66:	1821      	adds	r1, r4, r0
 8010c68:	428b      	cmp	r3, r1
 8010c6a:	d103      	bne.n	8010c74 <_free_r+0x88>
 8010c6c:	6819      	ldr	r1, [r3, #0]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	1809      	adds	r1, r1, r0
 8010c72:	6021      	str	r1, [r4, #0]
 8010c74:	6063      	str	r3, [r4, #4]
 8010c76:	6054      	str	r4, [r2, #4]
 8010c78:	e7ca      	b.n	8010c10 <_free_r+0x24>
 8010c7a:	46c0      	nop			@ (mov r8, r8)
 8010c7c:	20001db4 	.word	0x20001db4

08010c80 <malloc>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	4b03      	ldr	r3, [pc, #12]	@ (8010c90 <malloc+0x10>)
 8010c84:	0001      	movs	r1, r0
 8010c86:	6818      	ldr	r0, [r3, #0]
 8010c88:	f000 f826 	bl	8010cd8 <_malloc_r>
 8010c8c:	bd10      	pop	{r4, pc}
 8010c8e:	46c0      	nop			@ (mov r8, r8)
 8010c90:	20000200 	.word	0x20000200

08010c94 <sbrk_aligned>:
 8010c94:	b570      	push	{r4, r5, r6, lr}
 8010c96:	4e0f      	ldr	r6, [pc, #60]	@ (8010cd4 <sbrk_aligned+0x40>)
 8010c98:	000d      	movs	r5, r1
 8010c9a:	6831      	ldr	r1, [r6, #0]
 8010c9c:	0004      	movs	r4, r0
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	d102      	bne.n	8010ca8 <sbrk_aligned+0x14>
 8010ca2:	f000 fcf7 	bl	8011694 <_sbrk_r>
 8010ca6:	6030      	str	r0, [r6, #0]
 8010ca8:	0029      	movs	r1, r5
 8010caa:	0020      	movs	r0, r4
 8010cac:	f000 fcf2 	bl	8011694 <_sbrk_r>
 8010cb0:	1c43      	adds	r3, r0, #1
 8010cb2:	d103      	bne.n	8010cbc <sbrk_aligned+0x28>
 8010cb4:	2501      	movs	r5, #1
 8010cb6:	426d      	negs	r5, r5
 8010cb8:	0028      	movs	r0, r5
 8010cba:	bd70      	pop	{r4, r5, r6, pc}
 8010cbc:	2303      	movs	r3, #3
 8010cbe:	1cc5      	adds	r5, r0, #3
 8010cc0:	439d      	bics	r5, r3
 8010cc2:	42a8      	cmp	r0, r5
 8010cc4:	d0f8      	beq.n	8010cb8 <sbrk_aligned+0x24>
 8010cc6:	1a29      	subs	r1, r5, r0
 8010cc8:	0020      	movs	r0, r4
 8010cca:	f000 fce3 	bl	8011694 <_sbrk_r>
 8010cce:	3001      	adds	r0, #1
 8010cd0:	d1f2      	bne.n	8010cb8 <sbrk_aligned+0x24>
 8010cd2:	e7ef      	b.n	8010cb4 <sbrk_aligned+0x20>
 8010cd4:	20001db0 	.word	0x20001db0

08010cd8 <_malloc_r>:
 8010cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cda:	2203      	movs	r2, #3
 8010cdc:	1ccb      	adds	r3, r1, #3
 8010cde:	4393      	bics	r3, r2
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	0005      	movs	r5, r0
 8010ce4:	001f      	movs	r7, r3
 8010ce6:	2b0c      	cmp	r3, #12
 8010ce8:	d234      	bcs.n	8010d54 <_malloc_r+0x7c>
 8010cea:	270c      	movs	r7, #12
 8010cec:	42b9      	cmp	r1, r7
 8010cee:	d833      	bhi.n	8010d58 <_malloc_r+0x80>
 8010cf0:	0028      	movs	r0, r5
 8010cf2:	f000 f871 	bl	8010dd8 <__malloc_lock>
 8010cf6:	4e37      	ldr	r6, [pc, #220]	@ (8010dd4 <_malloc_r+0xfc>)
 8010cf8:	6833      	ldr	r3, [r6, #0]
 8010cfa:	001c      	movs	r4, r3
 8010cfc:	2c00      	cmp	r4, #0
 8010cfe:	d12f      	bne.n	8010d60 <_malloc_r+0x88>
 8010d00:	0039      	movs	r1, r7
 8010d02:	0028      	movs	r0, r5
 8010d04:	f7ff ffc6 	bl	8010c94 <sbrk_aligned>
 8010d08:	0004      	movs	r4, r0
 8010d0a:	1c43      	adds	r3, r0, #1
 8010d0c:	d15f      	bne.n	8010dce <_malloc_r+0xf6>
 8010d0e:	6834      	ldr	r4, [r6, #0]
 8010d10:	9400      	str	r4, [sp, #0]
 8010d12:	9b00      	ldr	r3, [sp, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d14a      	bne.n	8010dae <_malloc_r+0xd6>
 8010d18:	2c00      	cmp	r4, #0
 8010d1a:	d052      	beq.n	8010dc2 <_malloc_r+0xea>
 8010d1c:	6823      	ldr	r3, [r4, #0]
 8010d1e:	0028      	movs	r0, r5
 8010d20:	18e3      	adds	r3, r4, r3
 8010d22:	9900      	ldr	r1, [sp, #0]
 8010d24:	9301      	str	r3, [sp, #4]
 8010d26:	f000 fcb5 	bl	8011694 <_sbrk_r>
 8010d2a:	9b01      	ldr	r3, [sp, #4]
 8010d2c:	4283      	cmp	r3, r0
 8010d2e:	d148      	bne.n	8010dc2 <_malloc_r+0xea>
 8010d30:	6823      	ldr	r3, [r4, #0]
 8010d32:	0028      	movs	r0, r5
 8010d34:	1aff      	subs	r7, r7, r3
 8010d36:	0039      	movs	r1, r7
 8010d38:	f7ff ffac 	bl	8010c94 <sbrk_aligned>
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	d040      	beq.n	8010dc2 <_malloc_r+0xea>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	19db      	adds	r3, r3, r7
 8010d44:	6023      	str	r3, [r4, #0]
 8010d46:	6833      	ldr	r3, [r6, #0]
 8010d48:	685a      	ldr	r2, [r3, #4]
 8010d4a:	2a00      	cmp	r2, #0
 8010d4c:	d133      	bne.n	8010db6 <_malloc_r+0xde>
 8010d4e:	9b00      	ldr	r3, [sp, #0]
 8010d50:	6033      	str	r3, [r6, #0]
 8010d52:	e019      	b.n	8010d88 <_malloc_r+0xb0>
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	dac9      	bge.n	8010cec <_malloc_r+0x14>
 8010d58:	230c      	movs	r3, #12
 8010d5a:	602b      	str	r3, [r5, #0]
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d60:	6821      	ldr	r1, [r4, #0]
 8010d62:	1bc9      	subs	r1, r1, r7
 8010d64:	d420      	bmi.n	8010da8 <_malloc_r+0xd0>
 8010d66:	290b      	cmp	r1, #11
 8010d68:	d90a      	bls.n	8010d80 <_malloc_r+0xa8>
 8010d6a:	19e2      	adds	r2, r4, r7
 8010d6c:	6027      	str	r7, [r4, #0]
 8010d6e:	42a3      	cmp	r3, r4
 8010d70:	d104      	bne.n	8010d7c <_malloc_r+0xa4>
 8010d72:	6032      	str	r2, [r6, #0]
 8010d74:	6863      	ldr	r3, [r4, #4]
 8010d76:	6011      	str	r1, [r2, #0]
 8010d78:	6053      	str	r3, [r2, #4]
 8010d7a:	e005      	b.n	8010d88 <_malloc_r+0xb0>
 8010d7c:	605a      	str	r2, [r3, #4]
 8010d7e:	e7f9      	b.n	8010d74 <_malloc_r+0x9c>
 8010d80:	6862      	ldr	r2, [r4, #4]
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	d10e      	bne.n	8010da4 <_malloc_r+0xcc>
 8010d86:	6032      	str	r2, [r6, #0]
 8010d88:	0028      	movs	r0, r5
 8010d8a:	f000 f82d 	bl	8010de8 <__malloc_unlock>
 8010d8e:	0020      	movs	r0, r4
 8010d90:	2207      	movs	r2, #7
 8010d92:	300b      	adds	r0, #11
 8010d94:	1d23      	adds	r3, r4, #4
 8010d96:	4390      	bics	r0, r2
 8010d98:	1ac2      	subs	r2, r0, r3
 8010d9a:	4298      	cmp	r0, r3
 8010d9c:	d0df      	beq.n	8010d5e <_malloc_r+0x86>
 8010d9e:	1a1b      	subs	r3, r3, r0
 8010da0:	50a3      	str	r3, [r4, r2]
 8010da2:	e7dc      	b.n	8010d5e <_malloc_r+0x86>
 8010da4:	605a      	str	r2, [r3, #4]
 8010da6:	e7ef      	b.n	8010d88 <_malloc_r+0xb0>
 8010da8:	0023      	movs	r3, r4
 8010daa:	6864      	ldr	r4, [r4, #4]
 8010dac:	e7a6      	b.n	8010cfc <_malloc_r+0x24>
 8010dae:	9c00      	ldr	r4, [sp, #0]
 8010db0:	6863      	ldr	r3, [r4, #4]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	e7ad      	b.n	8010d12 <_malloc_r+0x3a>
 8010db6:	001a      	movs	r2, r3
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	42a3      	cmp	r3, r4
 8010dbc:	d1fb      	bne.n	8010db6 <_malloc_r+0xde>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	e7da      	b.n	8010d78 <_malloc_r+0xa0>
 8010dc2:	230c      	movs	r3, #12
 8010dc4:	0028      	movs	r0, r5
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f000 f80e 	bl	8010de8 <__malloc_unlock>
 8010dcc:	e7c6      	b.n	8010d5c <_malloc_r+0x84>
 8010dce:	6007      	str	r7, [r0, #0]
 8010dd0:	e7da      	b.n	8010d88 <_malloc_r+0xb0>
 8010dd2:	46c0      	nop			@ (mov r8, r8)
 8010dd4:	20001db4 	.word	0x20001db4

08010dd8 <__malloc_lock>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	4802      	ldr	r0, [pc, #8]	@ (8010de4 <__malloc_lock+0xc>)
 8010ddc:	f7ff f87b 	bl	800fed6 <__retarget_lock_acquire_recursive>
 8010de0:	bd10      	pop	{r4, pc}
 8010de2:	46c0      	nop			@ (mov r8, r8)
 8010de4:	20001dac 	.word	0x20001dac

08010de8 <__malloc_unlock>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	4802      	ldr	r0, [pc, #8]	@ (8010df4 <__malloc_unlock+0xc>)
 8010dec:	f7ff f874 	bl	800fed8 <__retarget_lock_release_recursive>
 8010df0:	bd10      	pop	{r4, pc}
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	20001dac 	.word	0x20001dac

08010df8 <_Balloc>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	69c5      	ldr	r5, [r0, #28]
 8010dfc:	0006      	movs	r6, r0
 8010dfe:	000c      	movs	r4, r1
 8010e00:	2d00      	cmp	r5, #0
 8010e02:	d10e      	bne.n	8010e22 <_Balloc+0x2a>
 8010e04:	2010      	movs	r0, #16
 8010e06:	f7ff ff3b 	bl	8010c80 <malloc>
 8010e0a:	1e02      	subs	r2, r0, #0
 8010e0c:	61f0      	str	r0, [r6, #28]
 8010e0e:	d104      	bne.n	8010e1a <_Balloc+0x22>
 8010e10:	216b      	movs	r1, #107	@ 0x6b
 8010e12:	4b19      	ldr	r3, [pc, #100]	@ (8010e78 <_Balloc+0x80>)
 8010e14:	4819      	ldr	r0, [pc, #100]	@ (8010e7c <_Balloc+0x84>)
 8010e16:	f000 fc4f 	bl	80116b8 <__assert_func>
 8010e1a:	6045      	str	r5, [r0, #4]
 8010e1c:	6085      	str	r5, [r0, #8]
 8010e1e:	6005      	str	r5, [r0, #0]
 8010e20:	60c5      	str	r5, [r0, #12]
 8010e22:	69f5      	ldr	r5, [r6, #28]
 8010e24:	68eb      	ldr	r3, [r5, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d013      	beq.n	8010e52 <_Balloc+0x5a>
 8010e2a:	69f3      	ldr	r3, [r6, #28]
 8010e2c:	00a2      	lsls	r2, r4, #2
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	189b      	adds	r3, r3, r2
 8010e32:	6818      	ldr	r0, [r3, #0]
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d118      	bne.n	8010e6a <_Balloc+0x72>
 8010e38:	2101      	movs	r1, #1
 8010e3a:	000d      	movs	r5, r1
 8010e3c:	40a5      	lsls	r5, r4
 8010e3e:	1d6a      	adds	r2, r5, #5
 8010e40:	0030      	movs	r0, r6
 8010e42:	0092      	lsls	r2, r2, #2
 8010e44:	f000 fc56 	bl	80116f4 <_calloc_r>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d00c      	beq.n	8010e66 <_Balloc+0x6e>
 8010e4c:	6044      	str	r4, [r0, #4]
 8010e4e:	6085      	str	r5, [r0, #8]
 8010e50:	e00d      	b.n	8010e6e <_Balloc+0x76>
 8010e52:	2221      	movs	r2, #33	@ 0x21
 8010e54:	2104      	movs	r1, #4
 8010e56:	0030      	movs	r0, r6
 8010e58:	f000 fc4c 	bl	80116f4 <_calloc_r>
 8010e5c:	69f3      	ldr	r3, [r6, #28]
 8010e5e:	60e8      	str	r0, [r5, #12]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1e1      	bne.n	8010e2a <_Balloc+0x32>
 8010e66:	2000      	movs	r0, #0
 8010e68:	bd70      	pop	{r4, r5, r6, pc}
 8010e6a:	6802      	ldr	r2, [r0, #0]
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	6103      	str	r3, [r0, #16]
 8010e72:	60c3      	str	r3, [r0, #12]
 8010e74:	e7f8      	b.n	8010e68 <_Balloc+0x70>
 8010e76:	46c0      	nop			@ (mov r8, r8)
 8010e78:	0801202f 	.word	0x0801202f
 8010e7c:	080120af 	.word	0x080120af

08010e80 <_Bfree>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	69c6      	ldr	r6, [r0, #28]
 8010e84:	0005      	movs	r5, r0
 8010e86:	000c      	movs	r4, r1
 8010e88:	2e00      	cmp	r6, #0
 8010e8a:	d10e      	bne.n	8010eaa <_Bfree+0x2a>
 8010e8c:	2010      	movs	r0, #16
 8010e8e:	f7ff fef7 	bl	8010c80 <malloc>
 8010e92:	1e02      	subs	r2, r0, #0
 8010e94:	61e8      	str	r0, [r5, #28]
 8010e96:	d104      	bne.n	8010ea2 <_Bfree+0x22>
 8010e98:	218f      	movs	r1, #143	@ 0x8f
 8010e9a:	4b09      	ldr	r3, [pc, #36]	@ (8010ec0 <_Bfree+0x40>)
 8010e9c:	4809      	ldr	r0, [pc, #36]	@ (8010ec4 <_Bfree+0x44>)
 8010e9e:	f000 fc0b 	bl	80116b8 <__assert_func>
 8010ea2:	6046      	str	r6, [r0, #4]
 8010ea4:	6086      	str	r6, [r0, #8]
 8010ea6:	6006      	str	r6, [r0, #0]
 8010ea8:	60c6      	str	r6, [r0, #12]
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	d007      	beq.n	8010ebe <_Bfree+0x3e>
 8010eae:	69eb      	ldr	r3, [r5, #28]
 8010eb0:	6862      	ldr	r2, [r4, #4]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	0092      	lsls	r2, r2, #2
 8010eb6:	189b      	adds	r3, r3, r2
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	6022      	str	r2, [r4, #0]
 8010ebc:	601c      	str	r4, [r3, #0]
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}
 8010ec0:	0801202f 	.word	0x0801202f
 8010ec4:	080120af 	.word	0x080120af

08010ec8 <__multadd>:
 8010ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eca:	000f      	movs	r7, r1
 8010ecc:	9001      	str	r0, [sp, #4]
 8010ece:	000c      	movs	r4, r1
 8010ed0:	001e      	movs	r6, r3
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	690d      	ldr	r5, [r1, #16]
 8010ed6:	3714      	adds	r7, #20
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	3001      	adds	r0, #1
 8010edc:	b299      	uxth	r1, r3
 8010ede:	4351      	muls	r1, r2
 8010ee0:	0c1b      	lsrs	r3, r3, #16
 8010ee2:	4353      	muls	r3, r2
 8010ee4:	1989      	adds	r1, r1, r6
 8010ee6:	0c0e      	lsrs	r6, r1, #16
 8010ee8:	199b      	adds	r3, r3, r6
 8010eea:	0c1e      	lsrs	r6, r3, #16
 8010eec:	b289      	uxth	r1, r1
 8010eee:	041b      	lsls	r3, r3, #16
 8010ef0:	185b      	adds	r3, r3, r1
 8010ef2:	c708      	stmia	r7!, {r3}
 8010ef4:	4285      	cmp	r5, r0
 8010ef6:	dcef      	bgt.n	8010ed8 <__multadd+0x10>
 8010ef8:	2e00      	cmp	r6, #0
 8010efa:	d022      	beq.n	8010f42 <__multadd+0x7a>
 8010efc:	68a3      	ldr	r3, [r4, #8]
 8010efe:	42ab      	cmp	r3, r5
 8010f00:	dc19      	bgt.n	8010f36 <__multadd+0x6e>
 8010f02:	6861      	ldr	r1, [r4, #4]
 8010f04:	9801      	ldr	r0, [sp, #4]
 8010f06:	3101      	adds	r1, #1
 8010f08:	f7ff ff76 	bl	8010df8 <_Balloc>
 8010f0c:	1e07      	subs	r7, r0, #0
 8010f0e:	d105      	bne.n	8010f1c <__multadd+0x54>
 8010f10:	003a      	movs	r2, r7
 8010f12:	21ba      	movs	r1, #186	@ 0xba
 8010f14:	4b0c      	ldr	r3, [pc, #48]	@ (8010f48 <__multadd+0x80>)
 8010f16:	480d      	ldr	r0, [pc, #52]	@ (8010f4c <__multadd+0x84>)
 8010f18:	f000 fbce 	bl	80116b8 <__assert_func>
 8010f1c:	0021      	movs	r1, r4
 8010f1e:	6922      	ldr	r2, [r4, #16]
 8010f20:	310c      	adds	r1, #12
 8010f22:	3202      	adds	r2, #2
 8010f24:	0092      	lsls	r2, r2, #2
 8010f26:	300c      	adds	r0, #12
 8010f28:	f7fe ffe2 	bl	800fef0 <memcpy>
 8010f2c:	0021      	movs	r1, r4
 8010f2e:	9801      	ldr	r0, [sp, #4]
 8010f30:	f7ff ffa6 	bl	8010e80 <_Bfree>
 8010f34:	003c      	movs	r4, r7
 8010f36:	1d2b      	adds	r3, r5, #4
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	18e3      	adds	r3, r4, r3
 8010f3c:	3501      	adds	r5, #1
 8010f3e:	605e      	str	r6, [r3, #4]
 8010f40:	6125      	str	r5, [r4, #16]
 8010f42:	0020      	movs	r0, r4
 8010f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f46:	46c0      	nop			@ (mov r8, r8)
 8010f48:	0801209e 	.word	0x0801209e
 8010f4c:	080120af 	.word	0x080120af

08010f50 <__hi0bits>:
 8010f50:	2280      	movs	r2, #128	@ 0x80
 8010f52:	0003      	movs	r3, r0
 8010f54:	0252      	lsls	r2, r2, #9
 8010f56:	2000      	movs	r0, #0
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d201      	bcs.n	8010f60 <__hi0bits+0x10>
 8010f5c:	041b      	lsls	r3, r3, #16
 8010f5e:	3010      	adds	r0, #16
 8010f60:	2280      	movs	r2, #128	@ 0x80
 8010f62:	0452      	lsls	r2, r2, #17
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d201      	bcs.n	8010f6c <__hi0bits+0x1c>
 8010f68:	3008      	adds	r0, #8
 8010f6a:	021b      	lsls	r3, r3, #8
 8010f6c:	2280      	movs	r2, #128	@ 0x80
 8010f6e:	0552      	lsls	r2, r2, #21
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d201      	bcs.n	8010f78 <__hi0bits+0x28>
 8010f74:	3004      	adds	r0, #4
 8010f76:	011b      	lsls	r3, r3, #4
 8010f78:	2280      	movs	r2, #128	@ 0x80
 8010f7a:	05d2      	lsls	r2, r2, #23
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d201      	bcs.n	8010f84 <__hi0bits+0x34>
 8010f80:	3002      	adds	r0, #2
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	db03      	blt.n	8010f90 <__hi0bits+0x40>
 8010f88:	3001      	adds	r0, #1
 8010f8a:	4213      	tst	r3, r2
 8010f8c:	d100      	bne.n	8010f90 <__hi0bits+0x40>
 8010f8e:	2020      	movs	r0, #32
 8010f90:	4770      	bx	lr

08010f92 <__lo0bits>:
 8010f92:	6803      	ldr	r3, [r0, #0]
 8010f94:	0001      	movs	r1, r0
 8010f96:	2207      	movs	r2, #7
 8010f98:	0018      	movs	r0, r3
 8010f9a:	4010      	ands	r0, r2
 8010f9c:	4213      	tst	r3, r2
 8010f9e:	d00d      	beq.n	8010fbc <__lo0bits+0x2a>
 8010fa0:	3a06      	subs	r2, #6
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	4213      	tst	r3, r2
 8010fa6:	d105      	bne.n	8010fb4 <__lo0bits+0x22>
 8010fa8:	3002      	adds	r0, #2
 8010faa:	4203      	tst	r3, r0
 8010fac:	d003      	beq.n	8010fb6 <__lo0bits+0x24>
 8010fae:	40d3      	lsrs	r3, r2
 8010fb0:	0010      	movs	r0, r2
 8010fb2:	600b      	str	r3, [r1, #0]
 8010fb4:	4770      	bx	lr
 8010fb6:	089b      	lsrs	r3, r3, #2
 8010fb8:	600b      	str	r3, [r1, #0]
 8010fba:	e7fb      	b.n	8010fb4 <__lo0bits+0x22>
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	2a00      	cmp	r2, #0
 8010fc0:	d101      	bne.n	8010fc6 <__lo0bits+0x34>
 8010fc2:	2010      	movs	r0, #16
 8010fc4:	0c1b      	lsrs	r3, r3, #16
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	2a00      	cmp	r2, #0
 8010fca:	d101      	bne.n	8010fd0 <__lo0bits+0x3e>
 8010fcc:	3008      	adds	r0, #8
 8010fce:	0a1b      	lsrs	r3, r3, #8
 8010fd0:	071a      	lsls	r2, r3, #28
 8010fd2:	d101      	bne.n	8010fd8 <__lo0bits+0x46>
 8010fd4:	3004      	adds	r0, #4
 8010fd6:	091b      	lsrs	r3, r3, #4
 8010fd8:	079a      	lsls	r2, r3, #30
 8010fda:	d101      	bne.n	8010fe0 <__lo0bits+0x4e>
 8010fdc:	3002      	adds	r0, #2
 8010fde:	089b      	lsrs	r3, r3, #2
 8010fe0:	07da      	lsls	r2, r3, #31
 8010fe2:	d4e9      	bmi.n	8010fb8 <__lo0bits+0x26>
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	085b      	lsrs	r3, r3, #1
 8010fe8:	d1e6      	bne.n	8010fb8 <__lo0bits+0x26>
 8010fea:	2020      	movs	r0, #32
 8010fec:	e7e2      	b.n	8010fb4 <__lo0bits+0x22>
	...

08010ff0 <__i2b>:
 8010ff0:	b510      	push	{r4, lr}
 8010ff2:	000c      	movs	r4, r1
 8010ff4:	2101      	movs	r1, #1
 8010ff6:	f7ff feff 	bl	8010df8 <_Balloc>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d107      	bne.n	801100e <__i2b+0x1e>
 8010ffe:	2146      	movs	r1, #70	@ 0x46
 8011000:	4c05      	ldr	r4, [pc, #20]	@ (8011018 <__i2b+0x28>)
 8011002:	0002      	movs	r2, r0
 8011004:	4b05      	ldr	r3, [pc, #20]	@ (801101c <__i2b+0x2c>)
 8011006:	0020      	movs	r0, r4
 8011008:	31ff      	adds	r1, #255	@ 0xff
 801100a:	f000 fb55 	bl	80116b8 <__assert_func>
 801100e:	2301      	movs	r3, #1
 8011010:	6144      	str	r4, [r0, #20]
 8011012:	6103      	str	r3, [r0, #16]
 8011014:	bd10      	pop	{r4, pc}
 8011016:	46c0      	nop			@ (mov r8, r8)
 8011018:	080120af 	.word	0x080120af
 801101c:	0801209e 	.word	0x0801209e

08011020 <__multiply>:
 8011020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011022:	0014      	movs	r4, r2
 8011024:	690a      	ldr	r2, [r1, #16]
 8011026:	6923      	ldr	r3, [r4, #16]
 8011028:	000d      	movs	r5, r1
 801102a:	b089      	sub	sp, #36	@ 0x24
 801102c:	429a      	cmp	r2, r3
 801102e:	db02      	blt.n	8011036 <__multiply+0x16>
 8011030:	0023      	movs	r3, r4
 8011032:	000c      	movs	r4, r1
 8011034:	001d      	movs	r5, r3
 8011036:	6927      	ldr	r7, [r4, #16]
 8011038:	692e      	ldr	r6, [r5, #16]
 801103a:	6861      	ldr	r1, [r4, #4]
 801103c:	19bb      	adds	r3, r7, r6
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	68a3      	ldr	r3, [r4, #8]
 8011042:	19ba      	adds	r2, r7, r6
 8011044:	4293      	cmp	r3, r2
 8011046:	da00      	bge.n	801104a <__multiply+0x2a>
 8011048:	3101      	adds	r1, #1
 801104a:	f7ff fed5 	bl	8010df8 <_Balloc>
 801104e:	4684      	mov	ip, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d106      	bne.n	8011062 <__multiply+0x42>
 8011054:	21b1      	movs	r1, #177	@ 0xb1
 8011056:	4662      	mov	r2, ip
 8011058:	4b44      	ldr	r3, [pc, #272]	@ (801116c <__multiply+0x14c>)
 801105a:	4845      	ldr	r0, [pc, #276]	@ (8011170 <__multiply+0x150>)
 801105c:	0049      	lsls	r1, r1, #1
 801105e:	f000 fb2b 	bl	80116b8 <__assert_func>
 8011062:	0002      	movs	r2, r0
 8011064:	19bb      	adds	r3, r7, r6
 8011066:	3214      	adds	r2, #20
 8011068:	009b      	lsls	r3, r3, #2
 801106a:	18d3      	adds	r3, r2, r3
 801106c:	9301      	str	r3, [sp, #4]
 801106e:	2100      	movs	r1, #0
 8011070:	0013      	movs	r3, r2
 8011072:	9801      	ldr	r0, [sp, #4]
 8011074:	4283      	cmp	r3, r0
 8011076:	d328      	bcc.n	80110ca <__multiply+0xaa>
 8011078:	0023      	movs	r3, r4
 801107a:	00bf      	lsls	r7, r7, #2
 801107c:	3314      	adds	r3, #20
 801107e:	9304      	str	r3, [sp, #16]
 8011080:	3514      	adds	r5, #20
 8011082:	19db      	adds	r3, r3, r7
 8011084:	00b6      	lsls	r6, r6, #2
 8011086:	9302      	str	r3, [sp, #8]
 8011088:	19ab      	adds	r3, r5, r6
 801108a:	9307      	str	r3, [sp, #28]
 801108c:	2304      	movs	r3, #4
 801108e:	9305      	str	r3, [sp, #20]
 8011090:	0023      	movs	r3, r4
 8011092:	9902      	ldr	r1, [sp, #8]
 8011094:	3315      	adds	r3, #21
 8011096:	4299      	cmp	r1, r3
 8011098:	d305      	bcc.n	80110a6 <__multiply+0x86>
 801109a:	1b0c      	subs	r4, r1, r4
 801109c:	3c15      	subs	r4, #21
 801109e:	08a4      	lsrs	r4, r4, #2
 80110a0:	3401      	adds	r4, #1
 80110a2:	00a3      	lsls	r3, r4, #2
 80110a4:	9305      	str	r3, [sp, #20]
 80110a6:	9b07      	ldr	r3, [sp, #28]
 80110a8:	429d      	cmp	r5, r3
 80110aa:	d310      	bcc.n	80110ce <__multiply+0xae>
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	dd05      	ble.n	80110be <__multiply+0x9e>
 80110b2:	9b01      	ldr	r3, [sp, #4]
 80110b4:	3b04      	subs	r3, #4
 80110b6:	9301      	str	r3, [sp, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d052      	beq.n	8011164 <__multiply+0x144>
 80110be:	4663      	mov	r3, ip
 80110c0:	4660      	mov	r0, ip
 80110c2:	9a00      	ldr	r2, [sp, #0]
 80110c4:	611a      	str	r2, [r3, #16]
 80110c6:	b009      	add	sp, #36	@ 0x24
 80110c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ca:	c302      	stmia	r3!, {r1}
 80110cc:	e7d1      	b.n	8011072 <__multiply+0x52>
 80110ce:	682c      	ldr	r4, [r5, #0]
 80110d0:	b2a4      	uxth	r4, r4
 80110d2:	2c00      	cmp	r4, #0
 80110d4:	d01f      	beq.n	8011116 <__multiply+0xf6>
 80110d6:	2300      	movs	r3, #0
 80110d8:	0017      	movs	r7, r2
 80110da:	9e04      	ldr	r6, [sp, #16]
 80110dc:	9303      	str	r3, [sp, #12]
 80110de:	ce08      	ldmia	r6!, {r3}
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	9306      	str	r3, [sp, #24]
 80110e4:	466b      	mov	r3, sp
 80110e6:	8b1b      	ldrh	r3, [r3, #24]
 80110e8:	b288      	uxth	r0, r1
 80110ea:	4363      	muls	r3, r4
 80110ec:	181b      	adds	r3, r3, r0
 80110ee:	9803      	ldr	r0, [sp, #12]
 80110f0:	0c09      	lsrs	r1, r1, #16
 80110f2:	181b      	adds	r3, r3, r0
 80110f4:	9806      	ldr	r0, [sp, #24]
 80110f6:	0c00      	lsrs	r0, r0, #16
 80110f8:	4360      	muls	r0, r4
 80110fa:	1840      	adds	r0, r0, r1
 80110fc:	0c19      	lsrs	r1, r3, #16
 80110fe:	1841      	adds	r1, r0, r1
 8011100:	0c08      	lsrs	r0, r1, #16
 8011102:	b29b      	uxth	r3, r3
 8011104:	0409      	lsls	r1, r1, #16
 8011106:	4319      	orrs	r1, r3
 8011108:	9b02      	ldr	r3, [sp, #8]
 801110a:	9003      	str	r0, [sp, #12]
 801110c:	c702      	stmia	r7!, {r1}
 801110e:	42b3      	cmp	r3, r6
 8011110:	d8e5      	bhi.n	80110de <__multiply+0xbe>
 8011112:	9b05      	ldr	r3, [sp, #20]
 8011114:	50d0      	str	r0, [r2, r3]
 8011116:	682c      	ldr	r4, [r5, #0]
 8011118:	0c24      	lsrs	r4, r4, #16
 801111a:	d020      	beq.n	801115e <__multiply+0x13e>
 801111c:	2100      	movs	r1, #0
 801111e:	0010      	movs	r0, r2
 8011120:	6813      	ldr	r3, [r2, #0]
 8011122:	9e04      	ldr	r6, [sp, #16]
 8011124:	9103      	str	r1, [sp, #12]
 8011126:	6831      	ldr	r1, [r6, #0]
 8011128:	6807      	ldr	r7, [r0, #0]
 801112a:	b289      	uxth	r1, r1
 801112c:	4361      	muls	r1, r4
 801112e:	0c3f      	lsrs	r7, r7, #16
 8011130:	19c9      	adds	r1, r1, r7
 8011132:	9f03      	ldr	r7, [sp, #12]
 8011134:	b29b      	uxth	r3, r3
 8011136:	19c9      	adds	r1, r1, r7
 8011138:	040f      	lsls	r7, r1, #16
 801113a:	431f      	orrs	r7, r3
 801113c:	6007      	str	r7, [r0, #0]
 801113e:	ce80      	ldmia	r6!, {r7}
 8011140:	6843      	ldr	r3, [r0, #4]
 8011142:	0c3f      	lsrs	r7, r7, #16
 8011144:	4367      	muls	r7, r4
 8011146:	b29b      	uxth	r3, r3
 8011148:	0c09      	lsrs	r1, r1, #16
 801114a:	18fb      	adds	r3, r7, r3
 801114c:	185b      	adds	r3, r3, r1
 801114e:	0c19      	lsrs	r1, r3, #16
 8011150:	9103      	str	r1, [sp, #12]
 8011152:	9902      	ldr	r1, [sp, #8]
 8011154:	3004      	adds	r0, #4
 8011156:	42b1      	cmp	r1, r6
 8011158:	d8e5      	bhi.n	8011126 <__multiply+0x106>
 801115a:	9905      	ldr	r1, [sp, #20]
 801115c:	5053      	str	r3, [r2, r1]
 801115e:	3504      	adds	r5, #4
 8011160:	3204      	adds	r2, #4
 8011162:	e7a0      	b.n	80110a6 <__multiply+0x86>
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	3b01      	subs	r3, #1
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	e79f      	b.n	80110ac <__multiply+0x8c>
 801116c:	0801209e 	.word	0x0801209e
 8011170:	080120af 	.word	0x080120af

08011174 <__pow5mult>:
 8011174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011176:	2303      	movs	r3, #3
 8011178:	0015      	movs	r5, r2
 801117a:	0007      	movs	r7, r0
 801117c:	000e      	movs	r6, r1
 801117e:	401a      	ands	r2, r3
 8011180:	421d      	tst	r5, r3
 8011182:	d008      	beq.n	8011196 <__pow5mult+0x22>
 8011184:	4925      	ldr	r1, [pc, #148]	@ (801121c <__pow5mult+0xa8>)
 8011186:	3a01      	subs	r2, #1
 8011188:	0092      	lsls	r2, r2, #2
 801118a:	5852      	ldr	r2, [r2, r1]
 801118c:	2300      	movs	r3, #0
 801118e:	0031      	movs	r1, r6
 8011190:	f7ff fe9a 	bl	8010ec8 <__multadd>
 8011194:	0006      	movs	r6, r0
 8011196:	10ad      	asrs	r5, r5, #2
 8011198:	d03d      	beq.n	8011216 <__pow5mult+0xa2>
 801119a:	69fc      	ldr	r4, [r7, #28]
 801119c:	2c00      	cmp	r4, #0
 801119e:	d10f      	bne.n	80111c0 <__pow5mult+0x4c>
 80111a0:	2010      	movs	r0, #16
 80111a2:	f7ff fd6d 	bl	8010c80 <malloc>
 80111a6:	1e02      	subs	r2, r0, #0
 80111a8:	61f8      	str	r0, [r7, #28]
 80111aa:	d105      	bne.n	80111b8 <__pow5mult+0x44>
 80111ac:	21b4      	movs	r1, #180	@ 0xb4
 80111ae:	4b1c      	ldr	r3, [pc, #112]	@ (8011220 <__pow5mult+0xac>)
 80111b0:	481c      	ldr	r0, [pc, #112]	@ (8011224 <__pow5mult+0xb0>)
 80111b2:	31ff      	adds	r1, #255	@ 0xff
 80111b4:	f000 fa80 	bl	80116b8 <__assert_func>
 80111b8:	6044      	str	r4, [r0, #4]
 80111ba:	6084      	str	r4, [r0, #8]
 80111bc:	6004      	str	r4, [r0, #0]
 80111be:	60c4      	str	r4, [r0, #12]
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	689c      	ldr	r4, [r3, #8]
 80111c4:	9301      	str	r3, [sp, #4]
 80111c6:	2c00      	cmp	r4, #0
 80111c8:	d108      	bne.n	80111dc <__pow5mult+0x68>
 80111ca:	0038      	movs	r0, r7
 80111cc:	4916      	ldr	r1, [pc, #88]	@ (8011228 <__pow5mult+0xb4>)
 80111ce:	f7ff ff0f 	bl	8010ff0 <__i2b>
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	0004      	movs	r4, r0
 80111d6:	6098      	str	r0, [r3, #8]
 80111d8:	2300      	movs	r3, #0
 80111da:	6003      	str	r3, [r0, #0]
 80111dc:	2301      	movs	r3, #1
 80111de:	421d      	tst	r5, r3
 80111e0:	d00a      	beq.n	80111f8 <__pow5mult+0x84>
 80111e2:	0031      	movs	r1, r6
 80111e4:	0022      	movs	r2, r4
 80111e6:	0038      	movs	r0, r7
 80111e8:	f7ff ff1a 	bl	8011020 <__multiply>
 80111ec:	0031      	movs	r1, r6
 80111ee:	9001      	str	r0, [sp, #4]
 80111f0:	0038      	movs	r0, r7
 80111f2:	f7ff fe45 	bl	8010e80 <_Bfree>
 80111f6:	9e01      	ldr	r6, [sp, #4]
 80111f8:	106d      	asrs	r5, r5, #1
 80111fa:	d00c      	beq.n	8011216 <__pow5mult+0xa2>
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	2800      	cmp	r0, #0
 8011200:	d107      	bne.n	8011212 <__pow5mult+0x9e>
 8011202:	0022      	movs	r2, r4
 8011204:	0021      	movs	r1, r4
 8011206:	0038      	movs	r0, r7
 8011208:	f7ff ff0a 	bl	8011020 <__multiply>
 801120c:	2300      	movs	r3, #0
 801120e:	6020      	str	r0, [r4, #0]
 8011210:	6003      	str	r3, [r0, #0]
 8011212:	0004      	movs	r4, r0
 8011214:	e7e2      	b.n	80111dc <__pow5mult+0x68>
 8011216:	0030      	movs	r0, r6
 8011218:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801121a:	46c0      	nop			@ (mov r8, r8)
 801121c:	08012160 	.word	0x08012160
 8011220:	0801202f 	.word	0x0801202f
 8011224:	080120af 	.word	0x080120af
 8011228:	00000271 	.word	0x00000271

0801122c <__lshift>:
 801122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801122e:	000c      	movs	r4, r1
 8011230:	0016      	movs	r6, r2
 8011232:	6923      	ldr	r3, [r4, #16]
 8011234:	1157      	asrs	r7, r2, #5
 8011236:	b085      	sub	sp, #20
 8011238:	18fb      	adds	r3, r7, r3
 801123a:	9301      	str	r3, [sp, #4]
 801123c:	3301      	adds	r3, #1
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	6849      	ldr	r1, [r1, #4]
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	9002      	str	r0, [sp, #8]
 8011246:	9a00      	ldr	r2, [sp, #0]
 8011248:	4293      	cmp	r3, r2
 801124a:	db10      	blt.n	801126e <__lshift+0x42>
 801124c:	9802      	ldr	r0, [sp, #8]
 801124e:	f7ff fdd3 	bl	8010df8 <_Balloc>
 8011252:	2300      	movs	r3, #0
 8011254:	0001      	movs	r1, r0
 8011256:	0005      	movs	r5, r0
 8011258:	001a      	movs	r2, r3
 801125a:	3114      	adds	r1, #20
 801125c:	4298      	cmp	r0, r3
 801125e:	d10c      	bne.n	801127a <__lshift+0x4e>
 8011260:	21ef      	movs	r1, #239	@ 0xef
 8011262:	002a      	movs	r2, r5
 8011264:	4b25      	ldr	r3, [pc, #148]	@ (80112fc <__lshift+0xd0>)
 8011266:	4826      	ldr	r0, [pc, #152]	@ (8011300 <__lshift+0xd4>)
 8011268:	0049      	lsls	r1, r1, #1
 801126a:	f000 fa25 	bl	80116b8 <__assert_func>
 801126e:	3101      	adds	r1, #1
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	e7e8      	b.n	8011246 <__lshift+0x1a>
 8011274:	0098      	lsls	r0, r3, #2
 8011276:	500a      	str	r2, [r1, r0]
 8011278:	3301      	adds	r3, #1
 801127a:	42bb      	cmp	r3, r7
 801127c:	dbfa      	blt.n	8011274 <__lshift+0x48>
 801127e:	43fb      	mvns	r3, r7
 8011280:	17db      	asrs	r3, r3, #31
 8011282:	401f      	ands	r7, r3
 8011284:	00bf      	lsls	r7, r7, #2
 8011286:	0023      	movs	r3, r4
 8011288:	201f      	movs	r0, #31
 801128a:	19c9      	adds	r1, r1, r7
 801128c:	0037      	movs	r7, r6
 801128e:	6922      	ldr	r2, [r4, #16]
 8011290:	3314      	adds	r3, #20
 8011292:	0092      	lsls	r2, r2, #2
 8011294:	189a      	adds	r2, r3, r2
 8011296:	4007      	ands	r7, r0
 8011298:	4206      	tst	r6, r0
 801129a:	d029      	beq.n	80112f0 <__lshift+0xc4>
 801129c:	3001      	adds	r0, #1
 801129e:	1bc0      	subs	r0, r0, r7
 80112a0:	9003      	str	r0, [sp, #12]
 80112a2:	468c      	mov	ip, r1
 80112a4:	2000      	movs	r0, #0
 80112a6:	681e      	ldr	r6, [r3, #0]
 80112a8:	40be      	lsls	r6, r7
 80112aa:	4306      	orrs	r6, r0
 80112ac:	4660      	mov	r0, ip
 80112ae:	c040      	stmia	r0!, {r6}
 80112b0:	4684      	mov	ip, r0
 80112b2:	9e03      	ldr	r6, [sp, #12]
 80112b4:	cb01      	ldmia	r3!, {r0}
 80112b6:	40f0      	lsrs	r0, r6
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d8f4      	bhi.n	80112a6 <__lshift+0x7a>
 80112bc:	0026      	movs	r6, r4
 80112be:	3615      	adds	r6, #21
 80112c0:	2304      	movs	r3, #4
 80112c2:	42b2      	cmp	r2, r6
 80112c4:	d304      	bcc.n	80112d0 <__lshift+0xa4>
 80112c6:	1b13      	subs	r3, r2, r4
 80112c8:	3b15      	subs	r3, #21
 80112ca:	089b      	lsrs	r3, r3, #2
 80112cc:	3301      	adds	r3, #1
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	50c8      	str	r0, [r1, r3]
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d002      	beq.n	80112dc <__lshift+0xb0>
 80112d6:	9b01      	ldr	r3, [sp, #4]
 80112d8:	3302      	adds	r3, #2
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	9b00      	ldr	r3, [sp, #0]
 80112de:	9802      	ldr	r0, [sp, #8]
 80112e0:	3b01      	subs	r3, #1
 80112e2:	0021      	movs	r1, r4
 80112e4:	612b      	str	r3, [r5, #16]
 80112e6:	f7ff fdcb 	bl	8010e80 <_Bfree>
 80112ea:	0028      	movs	r0, r5
 80112ec:	b005      	add	sp, #20
 80112ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112f0:	cb01      	ldmia	r3!, {r0}
 80112f2:	c101      	stmia	r1!, {r0}
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d8fb      	bhi.n	80112f0 <__lshift+0xc4>
 80112f8:	e7f0      	b.n	80112dc <__lshift+0xb0>
 80112fa:	46c0      	nop			@ (mov r8, r8)
 80112fc:	0801209e 	.word	0x0801209e
 8011300:	080120af 	.word	0x080120af

08011304 <__mcmp>:
 8011304:	b530      	push	{r4, r5, lr}
 8011306:	690b      	ldr	r3, [r1, #16]
 8011308:	6904      	ldr	r4, [r0, #16]
 801130a:	0002      	movs	r2, r0
 801130c:	1ae0      	subs	r0, r4, r3
 801130e:	429c      	cmp	r4, r3
 8011310:	d10f      	bne.n	8011332 <__mcmp+0x2e>
 8011312:	3214      	adds	r2, #20
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	3114      	adds	r1, #20
 8011318:	0014      	movs	r4, r2
 801131a:	18c9      	adds	r1, r1, r3
 801131c:	18d2      	adds	r2, r2, r3
 801131e:	3a04      	subs	r2, #4
 8011320:	3904      	subs	r1, #4
 8011322:	6815      	ldr	r5, [r2, #0]
 8011324:	680b      	ldr	r3, [r1, #0]
 8011326:	429d      	cmp	r5, r3
 8011328:	d004      	beq.n	8011334 <__mcmp+0x30>
 801132a:	2001      	movs	r0, #1
 801132c:	429d      	cmp	r5, r3
 801132e:	d200      	bcs.n	8011332 <__mcmp+0x2e>
 8011330:	3802      	subs	r0, #2
 8011332:	bd30      	pop	{r4, r5, pc}
 8011334:	4294      	cmp	r4, r2
 8011336:	d3f2      	bcc.n	801131e <__mcmp+0x1a>
 8011338:	e7fb      	b.n	8011332 <__mcmp+0x2e>
	...

0801133c <__mdiff>:
 801133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801133e:	000c      	movs	r4, r1
 8011340:	b087      	sub	sp, #28
 8011342:	9000      	str	r0, [sp, #0]
 8011344:	0011      	movs	r1, r2
 8011346:	0020      	movs	r0, r4
 8011348:	0017      	movs	r7, r2
 801134a:	f7ff ffdb 	bl	8011304 <__mcmp>
 801134e:	1e05      	subs	r5, r0, #0
 8011350:	d110      	bne.n	8011374 <__mdiff+0x38>
 8011352:	0001      	movs	r1, r0
 8011354:	9800      	ldr	r0, [sp, #0]
 8011356:	f7ff fd4f 	bl	8010df8 <_Balloc>
 801135a:	1e02      	subs	r2, r0, #0
 801135c:	d104      	bne.n	8011368 <__mdiff+0x2c>
 801135e:	4b40      	ldr	r3, [pc, #256]	@ (8011460 <__mdiff+0x124>)
 8011360:	4840      	ldr	r0, [pc, #256]	@ (8011464 <__mdiff+0x128>)
 8011362:	4941      	ldr	r1, [pc, #260]	@ (8011468 <__mdiff+0x12c>)
 8011364:	f000 f9a8 	bl	80116b8 <__assert_func>
 8011368:	2301      	movs	r3, #1
 801136a:	6145      	str	r5, [r0, #20]
 801136c:	6103      	str	r3, [r0, #16]
 801136e:	0010      	movs	r0, r2
 8011370:	b007      	add	sp, #28
 8011372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011374:	2600      	movs	r6, #0
 8011376:	42b0      	cmp	r0, r6
 8011378:	da03      	bge.n	8011382 <__mdiff+0x46>
 801137a:	0023      	movs	r3, r4
 801137c:	003c      	movs	r4, r7
 801137e:	001f      	movs	r7, r3
 8011380:	3601      	adds	r6, #1
 8011382:	6861      	ldr	r1, [r4, #4]
 8011384:	9800      	ldr	r0, [sp, #0]
 8011386:	f7ff fd37 	bl	8010df8 <_Balloc>
 801138a:	1e02      	subs	r2, r0, #0
 801138c:	d103      	bne.n	8011396 <__mdiff+0x5a>
 801138e:	4b34      	ldr	r3, [pc, #208]	@ (8011460 <__mdiff+0x124>)
 8011390:	4834      	ldr	r0, [pc, #208]	@ (8011464 <__mdiff+0x128>)
 8011392:	4936      	ldr	r1, [pc, #216]	@ (801146c <__mdiff+0x130>)
 8011394:	e7e6      	b.n	8011364 <__mdiff+0x28>
 8011396:	6923      	ldr	r3, [r4, #16]
 8011398:	3414      	adds	r4, #20
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	18e3      	adds	r3, r4, r3
 80113a0:	0021      	movs	r1, r4
 80113a2:	9401      	str	r4, [sp, #4]
 80113a4:	003c      	movs	r4, r7
 80113a6:	9302      	str	r3, [sp, #8]
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	3414      	adds	r4, #20
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	18e3      	adds	r3, r4, r3
 80113b0:	9303      	str	r3, [sp, #12]
 80113b2:	0003      	movs	r3, r0
 80113b4:	60c6      	str	r6, [r0, #12]
 80113b6:	468c      	mov	ip, r1
 80113b8:	2000      	movs	r0, #0
 80113ba:	3314      	adds	r3, #20
 80113bc:	9304      	str	r3, [sp, #16]
 80113be:	9305      	str	r3, [sp, #20]
 80113c0:	4663      	mov	r3, ip
 80113c2:	cb20      	ldmia	r3!, {r5}
 80113c4:	b2a9      	uxth	r1, r5
 80113c6:	000e      	movs	r6, r1
 80113c8:	469c      	mov	ip, r3
 80113ca:	cc08      	ldmia	r4!, {r3}
 80113cc:	0c2d      	lsrs	r5, r5, #16
 80113ce:	b299      	uxth	r1, r3
 80113d0:	1a71      	subs	r1, r6, r1
 80113d2:	1809      	adds	r1, r1, r0
 80113d4:	0c1b      	lsrs	r3, r3, #16
 80113d6:	1408      	asrs	r0, r1, #16
 80113d8:	1aeb      	subs	r3, r5, r3
 80113da:	181b      	adds	r3, r3, r0
 80113dc:	1418      	asrs	r0, r3, #16
 80113de:	b289      	uxth	r1, r1
 80113e0:	041b      	lsls	r3, r3, #16
 80113e2:	4319      	orrs	r1, r3
 80113e4:	9b05      	ldr	r3, [sp, #20]
 80113e6:	c302      	stmia	r3!, {r1}
 80113e8:	9305      	str	r3, [sp, #20]
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	42a3      	cmp	r3, r4
 80113ee:	d8e7      	bhi.n	80113c0 <__mdiff+0x84>
 80113f0:	0039      	movs	r1, r7
 80113f2:	9c03      	ldr	r4, [sp, #12]
 80113f4:	3115      	adds	r1, #21
 80113f6:	2304      	movs	r3, #4
 80113f8:	428c      	cmp	r4, r1
 80113fa:	d304      	bcc.n	8011406 <__mdiff+0xca>
 80113fc:	1be3      	subs	r3, r4, r7
 80113fe:	3b15      	subs	r3, #21
 8011400:	089b      	lsrs	r3, r3, #2
 8011402:	3301      	adds	r3, #1
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	9901      	ldr	r1, [sp, #4]
 8011408:	18cd      	adds	r5, r1, r3
 801140a:	9904      	ldr	r1, [sp, #16]
 801140c:	002e      	movs	r6, r5
 801140e:	18cb      	adds	r3, r1, r3
 8011410:	001f      	movs	r7, r3
 8011412:	9902      	ldr	r1, [sp, #8]
 8011414:	428e      	cmp	r6, r1
 8011416:	d311      	bcc.n	801143c <__mdiff+0x100>
 8011418:	9c02      	ldr	r4, [sp, #8]
 801141a:	1ee9      	subs	r1, r5, #3
 801141c:	2000      	movs	r0, #0
 801141e:	428c      	cmp	r4, r1
 8011420:	d304      	bcc.n	801142c <__mdiff+0xf0>
 8011422:	0021      	movs	r1, r4
 8011424:	3103      	adds	r1, #3
 8011426:	1b49      	subs	r1, r1, r5
 8011428:	0889      	lsrs	r1, r1, #2
 801142a:	0088      	lsls	r0, r1, #2
 801142c:	181b      	adds	r3, r3, r0
 801142e:	3b04      	subs	r3, #4
 8011430:	6819      	ldr	r1, [r3, #0]
 8011432:	2900      	cmp	r1, #0
 8011434:	d010      	beq.n	8011458 <__mdiff+0x11c>
 8011436:	9b00      	ldr	r3, [sp, #0]
 8011438:	6113      	str	r3, [r2, #16]
 801143a:	e798      	b.n	801136e <__mdiff+0x32>
 801143c:	4684      	mov	ip, r0
 801143e:	ce02      	ldmia	r6!, {r1}
 8011440:	b288      	uxth	r0, r1
 8011442:	4460      	add	r0, ip
 8011444:	1400      	asrs	r0, r0, #16
 8011446:	0c0c      	lsrs	r4, r1, #16
 8011448:	1904      	adds	r4, r0, r4
 801144a:	4461      	add	r1, ip
 801144c:	1420      	asrs	r0, r4, #16
 801144e:	b289      	uxth	r1, r1
 8011450:	0424      	lsls	r4, r4, #16
 8011452:	4321      	orrs	r1, r4
 8011454:	c702      	stmia	r7!, {r1}
 8011456:	e7dc      	b.n	8011412 <__mdiff+0xd6>
 8011458:	9900      	ldr	r1, [sp, #0]
 801145a:	3901      	subs	r1, #1
 801145c:	9100      	str	r1, [sp, #0]
 801145e:	e7e6      	b.n	801142e <__mdiff+0xf2>
 8011460:	0801209e 	.word	0x0801209e
 8011464:	080120af 	.word	0x080120af
 8011468:	00000237 	.word	0x00000237
 801146c:	00000245 	.word	0x00000245

08011470 <__d2b>:
 8011470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011472:	2101      	movs	r1, #1
 8011474:	0016      	movs	r6, r2
 8011476:	001f      	movs	r7, r3
 8011478:	f7ff fcbe 	bl	8010df8 <_Balloc>
 801147c:	1e04      	subs	r4, r0, #0
 801147e:	d105      	bne.n	801148c <__d2b+0x1c>
 8011480:	0022      	movs	r2, r4
 8011482:	4b25      	ldr	r3, [pc, #148]	@ (8011518 <__d2b+0xa8>)
 8011484:	4825      	ldr	r0, [pc, #148]	@ (801151c <__d2b+0xac>)
 8011486:	4926      	ldr	r1, [pc, #152]	@ (8011520 <__d2b+0xb0>)
 8011488:	f000 f916 	bl	80116b8 <__assert_func>
 801148c:	033b      	lsls	r3, r7, #12
 801148e:	007d      	lsls	r5, r7, #1
 8011490:	0b1b      	lsrs	r3, r3, #12
 8011492:	0d6d      	lsrs	r5, r5, #21
 8011494:	d002      	beq.n	801149c <__d2b+0x2c>
 8011496:	2280      	movs	r2, #128	@ 0x80
 8011498:	0352      	lsls	r2, r2, #13
 801149a:	4313      	orrs	r3, r2
 801149c:	9301      	str	r3, [sp, #4]
 801149e:	2e00      	cmp	r6, #0
 80114a0:	d025      	beq.n	80114ee <__d2b+0x7e>
 80114a2:	4668      	mov	r0, sp
 80114a4:	9600      	str	r6, [sp, #0]
 80114a6:	f7ff fd74 	bl	8010f92 <__lo0bits>
 80114aa:	9b01      	ldr	r3, [sp, #4]
 80114ac:	9900      	ldr	r1, [sp, #0]
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d01b      	beq.n	80114ea <__d2b+0x7a>
 80114b2:	2220      	movs	r2, #32
 80114b4:	001e      	movs	r6, r3
 80114b6:	1a12      	subs	r2, r2, r0
 80114b8:	4096      	lsls	r6, r2
 80114ba:	0032      	movs	r2, r6
 80114bc:	40c3      	lsrs	r3, r0
 80114be:	430a      	orrs	r2, r1
 80114c0:	6162      	str	r2, [r4, #20]
 80114c2:	9301      	str	r3, [sp, #4]
 80114c4:	9e01      	ldr	r6, [sp, #4]
 80114c6:	61a6      	str	r6, [r4, #24]
 80114c8:	1e73      	subs	r3, r6, #1
 80114ca:	419e      	sbcs	r6, r3
 80114cc:	3601      	adds	r6, #1
 80114ce:	6126      	str	r6, [r4, #16]
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	d014      	beq.n	80114fe <__d2b+0x8e>
 80114d4:	2635      	movs	r6, #53	@ 0x35
 80114d6:	4b13      	ldr	r3, [pc, #76]	@ (8011524 <__d2b+0xb4>)
 80114d8:	18ed      	adds	r5, r5, r3
 80114da:	9b08      	ldr	r3, [sp, #32]
 80114dc:	182d      	adds	r5, r5, r0
 80114de:	601d      	str	r5, [r3, #0]
 80114e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114e2:	1a36      	subs	r6, r6, r0
 80114e4:	601e      	str	r6, [r3, #0]
 80114e6:	0020      	movs	r0, r4
 80114e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114ea:	6161      	str	r1, [r4, #20]
 80114ec:	e7ea      	b.n	80114c4 <__d2b+0x54>
 80114ee:	a801      	add	r0, sp, #4
 80114f0:	f7ff fd4f 	bl	8010f92 <__lo0bits>
 80114f4:	9b01      	ldr	r3, [sp, #4]
 80114f6:	2601      	movs	r6, #1
 80114f8:	6163      	str	r3, [r4, #20]
 80114fa:	3020      	adds	r0, #32
 80114fc:	e7e7      	b.n	80114ce <__d2b+0x5e>
 80114fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011528 <__d2b+0xb8>)
 8011500:	18c0      	adds	r0, r0, r3
 8011502:	9b08      	ldr	r3, [sp, #32]
 8011504:	6018      	str	r0, [r3, #0]
 8011506:	4b09      	ldr	r3, [pc, #36]	@ (801152c <__d2b+0xbc>)
 8011508:	18f3      	adds	r3, r6, r3
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	18e3      	adds	r3, r4, r3
 801150e:	6958      	ldr	r0, [r3, #20]
 8011510:	f7ff fd1e 	bl	8010f50 <__hi0bits>
 8011514:	0176      	lsls	r6, r6, #5
 8011516:	e7e3      	b.n	80114e0 <__d2b+0x70>
 8011518:	0801209e 	.word	0x0801209e
 801151c:	080120af 	.word	0x080120af
 8011520:	0000030f 	.word	0x0000030f
 8011524:	fffffbcd 	.word	0xfffffbcd
 8011528:	fffffbce 	.word	0xfffffbce
 801152c:	3fffffff 	.word	0x3fffffff

08011530 <__sflush_r>:
 8011530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011532:	220c      	movs	r2, #12
 8011534:	5e8b      	ldrsh	r3, [r1, r2]
 8011536:	0005      	movs	r5, r0
 8011538:	000c      	movs	r4, r1
 801153a:	071a      	lsls	r2, r3, #28
 801153c:	d456      	bmi.n	80115ec <__sflush_r+0xbc>
 801153e:	684a      	ldr	r2, [r1, #4]
 8011540:	2a00      	cmp	r2, #0
 8011542:	dc02      	bgt.n	801154a <__sflush_r+0x1a>
 8011544:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011546:	2a00      	cmp	r2, #0
 8011548:	dd4e      	ble.n	80115e8 <__sflush_r+0xb8>
 801154a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801154c:	2f00      	cmp	r7, #0
 801154e:	d04b      	beq.n	80115e8 <__sflush_r+0xb8>
 8011550:	2200      	movs	r2, #0
 8011552:	2080      	movs	r0, #128	@ 0x80
 8011554:	682e      	ldr	r6, [r5, #0]
 8011556:	602a      	str	r2, [r5, #0]
 8011558:	001a      	movs	r2, r3
 801155a:	0140      	lsls	r0, r0, #5
 801155c:	6a21      	ldr	r1, [r4, #32]
 801155e:	4002      	ands	r2, r0
 8011560:	4203      	tst	r3, r0
 8011562:	d033      	beq.n	80115cc <__sflush_r+0x9c>
 8011564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	075b      	lsls	r3, r3, #29
 801156a:	d506      	bpl.n	801157a <__sflush_r+0x4a>
 801156c:	6863      	ldr	r3, [r4, #4]
 801156e:	1ad2      	subs	r2, r2, r3
 8011570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <__sflush_r+0x4a>
 8011576:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011578:	1ad2      	subs	r2, r2, r3
 801157a:	2300      	movs	r3, #0
 801157c:	0028      	movs	r0, r5
 801157e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011580:	6a21      	ldr	r1, [r4, #32]
 8011582:	47b8      	blx	r7
 8011584:	89a2      	ldrh	r2, [r4, #12]
 8011586:	1c43      	adds	r3, r0, #1
 8011588:	d106      	bne.n	8011598 <__sflush_r+0x68>
 801158a:	6829      	ldr	r1, [r5, #0]
 801158c:	291d      	cmp	r1, #29
 801158e:	d846      	bhi.n	801161e <__sflush_r+0xee>
 8011590:	4b29      	ldr	r3, [pc, #164]	@ (8011638 <__sflush_r+0x108>)
 8011592:	40cb      	lsrs	r3, r1
 8011594:	07db      	lsls	r3, r3, #31
 8011596:	d542      	bpl.n	801161e <__sflush_r+0xee>
 8011598:	2300      	movs	r3, #0
 801159a:	6063      	str	r3, [r4, #4]
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	6023      	str	r3, [r4, #0]
 80115a0:	04d2      	lsls	r2, r2, #19
 80115a2:	d505      	bpl.n	80115b0 <__sflush_r+0x80>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	d102      	bne.n	80115ae <__sflush_r+0x7e>
 80115a8:	682b      	ldr	r3, [r5, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d100      	bne.n	80115b0 <__sflush_r+0x80>
 80115ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80115b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80115b2:	602e      	str	r6, [r5, #0]
 80115b4:	2900      	cmp	r1, #0
 80115b6:	d017      	beq.n	80115e8 <__sflush_r+0xb8>
 80115b8:	0023      	movs	r3, r4
 80115ba:	3344      	adds	r3, #68	@ 0x44
 80115bc:	4299      	cmp	r1, r3
 80115be:	d002      	beq.n	80115c6 <__sflush_r+0x96>
 80115c0:	0028      	movs	r0, r5
 80115c2:	f7ff fb13 	bl	8010bec <_free_r>
 80115c6:	2300      	movs	r3, #0
 80115c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80115ca:	e00d      	b.n	80115e8 <__sflush_r+0xb8>
 80115cc:	2301      	movs	r3, #1
 80115ce:	0028      	movs	r0, r5
 80115d0:	47b8      	blx	r7
 80115d2:	0002      	movs	r2, r0
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d1c6      	bne.n	8011566 <__sflush_r+0x36>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d0c3      	beq.n	8011566 <__sflush_r+0x36>
 80115de:	2b1d      	cmp	r3, #29
 80115e0:	d001      	beq.n	80115e6 <__sflush_r+0xb6>
 80115e2:	2b16      	cmp	r3, #22
 80115e4:	d11a      	bne.n	801161c <__sflush_r+0xec>
 80115e6:	602e      	str	r6, [r5, #0]
 80115e8:	2000      	movs	r0, #0
 80115ea:	e01e      	b.n	801162a <__sflush_r+0xfa>
 80115ec:	690e      	ldr	r6, [r1, #16]
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	d0fa      	beq.n	80115e8 <__sflush_r+0xb8>
 80115f2:	680f      	ldr	r7, [r1, #0]
 80115f4:	600e      	str	r6, [r1, #0]
 80115f6:	1bba      	subs	r2, r7, r6
 80115f8:	9201      	str	r2, [sp, #4]
 80115fa:	2200      	movs	r2, #0
 80115fc:	079b      	lsls	r3, r3, #30
 80115fe:	d100      	bne.n	8011602 <__sflush_r+0xd2>
 8011600:	694a      	ldr	r2, [r1, #20]
 8011602:	60a2      	str	r2, [r4, #8]
 8011604:	9b01      	ldr	r3, [sp, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	ddee      	ble.n	80115e8 <__sflush_r+0xb8>
 801160a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801160c:	0032      	movs	r2, r6
 801160e:	001f      	movs	r7, r3
 8011610:	0028      	movs	r0, r5
 8011612:	9b01      	ldr	r3, [sp, #4]
 8011614:	6a21      	ldr	r1, [r4, #32]
 8011616:	47b8      	blx	r7
 8011618:	2800      	cmp	r0, #0
 801161a:	dc07      	bgt.n	801162c <__sflush_r+0xfc>
 801161c:	89a2      	ldrh	r2, [r4, #12]
 801161e:	2340      	movs	r3, #64	@ 0x40
 8011620:	2001      	movs	r0, #1
 8011622:	4313      	orrs	r3, r2
 8011624:	b21b      	sxth	r3, r3
 8011626:	81a3      	strh	r3, [r4, #12]
 8011628:	4240      	negs	r0, r0
 801162a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	1836      	adds	r6, r6, r0
 8011630:	1a1b      	subs	r3, r3, r0
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	e7e6      	b.n	8011604 <__sflush_r+0xd4>
 8011636:	46c0      	nop			@ (mov r8, r8)
 8011638:	20400001 	.word	0x20400001

0801163c <_fflush_r>:
 801163c:	690b      	ldr	r3, [r1, #16]
 801163e:	b570      	push	{r4, r5, r6, lr}
 8011640:	0005      	movs	r5, r0
 8011642:	000c      	movs	r4, r1
 8011644:	2b00      	cmp	r3, #0
 8011646:	d102      	bne.n	801164e <_fflush_r+0x12>
 8011648:	2500      	movs	r5, #0
 801164a:	0028      	movs	r0, r5
 801164c:	bd70      	pop	{r4, r5, r6, pc}
 801164e:	2800      	cmp	r0, #0
 8011650:	d004      	beq.n	801165c <_fflush_r+0x20>
 8011652:	6a03      	ldr	r3, [r0, #32]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d101      	bne.n	801165c <_fflush_r+0x20>
 8011658:	f7fe fb2a 	bl	800fcb0 <__sinit>
 801165c:	220c      	movs	r2, #12
 801165e:	5ea3      	ldrsh	r3, [r4, r2]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d0f1      	beq.n	8011648 <_fflush_r+0xc>
 8011664:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011666:	07d2      	lsls	r2, r2, #31
 8011668:	d404      	bmi.n	8011674 <_fflush_r+0x38>
 801166a:	059b      	lsls	r3, r3, #22
 801166c:	d402      	bmi.n	8011674 <_fflush_r+0x38>
 801166e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011670:	f7fe fc31 	bl	800fed6 <__retarget_lock_acquire_recursive>
 8011674:	0028      	movs	r0, r5
 8011676:	0021      	movs	r1, r4
 8011678:	f7ff ff5a 	bl	8011530 <__sflush_r>
 801167c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801167e:	0005      	movs	r5, r0
 8011680:	07db      	lsls	r3, r3, #31
 8011682:	d4e2      	bmi.n	801164a <_fflush_r+0xe>
 8011684:	89a3      	ldrh	r3, [r4, #12]
 8011686:	059b      	lsls	r3, r3, #22
 8011688:	d4df      	bmi.n	801164a <_fflush_r+0xe>
 801168a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801168c:	f7fe fc24 	bl	800fed8 <__retarget_lock_release_recursive>
 8011690:	e7db      	b.n	801164a <_fflush_r+0xe>
	...

08011694 <_sbrk_r>:
 8011694:	2300      	movs	r3, #0
 8011696:	b570      	push	{r4, r5, r6, lr}
 8011698:	4d06      	ldr	r5, [pc, #24]	@ (80116b4 <_sbrk_r+0x20>)
 801169a:	0004      	movs	r4, r0
 801169c:	0008      	movs	r0, r1
 801169e:	602b      	str	r3, [r5, #0]
 80116a0:	f7f1 fcd0 	bl	8003044 <_sbrk>
 80116a4:	1c43      	adds	r3, r0, #1
 80116a6:	d103      	bne.n	80116b0 <_sbrk_r+0x1c>
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d000      	beq.n	80116b0 <_sbrk_r+0x1c>
 80116ae:	6023      	str	r3, [r4, #0]
 80116b0:	bd70      	pop	{r4, r5, r6, pc}
 80116b2:	46c0      	nop			@ (mov r8, r8)
 80116b4:	20001da8 	.word	0x20001da8

080116b8 <__assert_func>:
 80116b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80116ba:	0014      	movs	r4, r2
 80116bc:	001a      	movs	r2, r3
 80116be:	4b09      	ldr	r3, [pc, #36]	@ (80116e4 <__assert_func+0x2c>)
 80116c0:	0005      	movs	r5, r0
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	000e      	movs	r6, r1
 80116c6:	68d8      	ldr	r0, [r3, #12]
 80116c8:	4b07      	ldr	r3, [pc, #28]	@ (80116e8 <__assert_func+0x30>)
 80116ca:	2c00      	cmp	r4, #0
 80116cc:	d101      	bne.n	80116d2 <__assert_func+0x1a>
 80116ce:	4b07      	ldr	r3, [pc, #28]	@ (80116ec <__assert_func+0x34>)
 80116d0:	001c      	movs	r4, r3
 80116d2:	4907      	ldr	r1, [pc, #28]	@ (80116f0 <__assert_func+0x38>)
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	9402      	str	r4, [sp, #8]
 80116d8:	002b      	movs	r3, r5
 80116da:	9600      	str	r6, [sp, #0]
 80116dc:	f000 f856 	bl	801178c <fiprintf>
 80116e0:	f000 f864 	bl	80117ac <abort>
 80116e4:	20000200 	.word	0x20000200
 80116e8:	08012112 	.word	0x08012112
 80116ec:	0801214d 	.word	0x0801214d
 80116f0:	0801211f 	.word	0x0801211f

080116f4 <_calloc_r>:
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	0c0b      	lsrs	r3, r1, #16
 80116f8:	0c15      	lsrs	r5, r2, #16
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d11e      	bne.n	801173c <_calloc_r+0x48>
 80116fe:	2d00      	cmp	r5, #0
 8011700:	d10c      	bne.n	801171c <_calloc_r+0x28>
 8011702:	b289      	uxth	r1, r1
 8011704:	b294      	uxth	r4, r2
 8011706:	434c      	muls	r4, r1
 8011708:	0021      	movs	r1, r4
 801170a:	f7ff fae5 	bl	8010cd8 <_malloc_r>
 801170e:	1e05      	subs	r5, r0, #0
 8011710:	d01b      	beq.n	801174a <_calloc_r+0x56>
 8011712:	0022      	movs	r2, r4
 8011714:	2100      	movs	r1, #0
 8011716:	f7fe fb59 	bl	800fdcc <memset>
 801171a:	e016      	b.n	801174a <_calloc_r+0x56>
 801171c:	1c2b      	adds	r3, r5, #0
 801171e:	1c0c      	adds	r4, r1, #0
 8011720:	b289      	uxth	r1, r1
 8011722:	b292      	uxth	r2, r2
 8011724:	434a      	muls	r2, r1
 8011726:	b29b      	uxth	r3, r3
 8011728:	b2a1      	uxth	r1, r4
 801172a:	4359      	muls	r1, r3
 801172c:	0c14      	lsrs	r4, r2, #16
 801172e:	190c      	adds	r4, r1, r4
 8011730:	0c23      	lsrs	r3, r4, #16
 8011732:	d107      	bne.n	8011744 <_calloc_r+0x50>
 8011734:	0424      	lsls	r4, r4, #16
 8011736:	b292      	uxth	r2, r2
 8011738:	4314      	orrs	r4, r2
 801173a:	e7e5      	b.n	8011708 <_calloc_r+0x14>
 801173c:	2d00      	cmp	r5, #0
 801173e:	d101      	bne.n	8011744 <_calloc_r+0x50>
 8011740:	1c14      	adds	r4, r2, #0
 8011742:	e7ed      	b.n	8011720 <_calloc_r+0x2c>
 8011744:	230c      	movs	r3, #12
 8011746:	2500      	movs	r5, #0
 8011748:	6003      	str	r3, [r0, #0]
 801174a:	0028      	movs	r0, r5
 801174c:	bd70      	pop	{r4, r5, r6, pc}

0801174e <__ascii_mbtowc>:
 801174e:	b082      	sub	sp, #8
 8011750:	2900      	cmp	r1, #0
 8011752:	d100      	bne.n	8011756 <__ascii_mbtowc+0x8>
 8011754:	a901      	add	r1, sp, #4
 8011756:	1e10      	subs	r0, r2, #0
 8011758:	d006      	beq.n	8011768 <__ascii_mbtowc+0x1a>
 801175a:	2b00      	cmp	r3, #0
 801175c:	d006      	beq.n	801176c <__ascii_mbtowc+0x1e>
 801175e:	7813      	ldrb	r3, [r2, #0]
 8011760:	600b      	str	r3, [r1, #0]
 8011762:	7810      	ldrb	r0, [r2, #0]
 8011764:	1e43      	subs	r3, r0, #1
 8011766:	4198      	sbcs	r0, r3
 8011768:	b002      	add	sp, #8
 801176a:	4770      	bx	lr
 801176c:	2002      	movs	r0, #2
 801176e:	4240      	negs	r0, r0
 8011770:	e7fa      	b.n	8011768 <__ascii_mbtowc+0x1a>

08011772 <__ascii_wctomb>:
 8011772:	0003      	movs	r3, r0
 8011774:	1e08      	subs	r0, r1, #0
 8011776:	d005      	beq.n	8011784 <__ascii_wctomb+0x12>
 8011778:	2aff      	cmp	r2, #255	@ 0xff
 801177a:	d904      	bls.n	8011786 <__ascii_wctomb+0x14>
 801177c:	228a      	movs	r2, #138	@ 0x8a
 801177e:	2001      	movs	r0, #1
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	4240      	negs	r0, r0
 8011784:	4770      	bx	lr
 8011786:	2001      	movs	r0, #1
 8011788:	700a      	strb	r2, [r1, #0]
 801178a:	e7fb      	b.n	8011784 <__ascii_wctomb+0x12>

0801178c <fiprintf>:
 801178c:	b40e      	push	{r1, r2, r3}
 801178e:	b517      	push	{r0, r1, r2, r4, lr}
 8011790:	4c05      	ldr	r4, [pc, #20]	@ (80117a8 <fiprintf+0x1c>)
 8011792:	ab05      	add	r3, sp, #20
 8011794:	cb04      	ldmia	r3!, {r2}
 8011796:	0001      	movs	r1, r0
 8011798:	6820      	ldr	r0, [r4, #0]
 801179a:	9301      	str	r3, [sp, #4]
 801179c:	f000 f834 	bl	8011808 <_vfiprintf_r>
 80117a0:	bc1e      	pop	{r1, r2, r3, r4}
 80117a2:	bc08      	pop	{r3}
 80117a4:	b003      	add	sp, #12
 80117a6:	4718      	bx	r3
 80117a8:	20000200 	.word	0x20000200

080117ac <abort>:
 80117ac:	2006      	movs	r0, #6
 80117ae:	b510      	push	{r4, lr}
 80117b0:	f000 fa10 	bl	8011bd4 <raise>
 80117b4:	2001      	movs	r0, #1
 80117b6:	f7f1 fbd3 	bl	8002f60 <_exit>

080117ba <__sfputc_r>:
 80117ba:	6893      	ldr	r3, [r2, #8]
 80117bc:	b510      	push	{r4, lr}
 80117be:	3b01      	subs	r3, #1
 80117c0:	6093      	str	r3, [r2, #8]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	da04      	bge.n	80117d0 <__sfputc_r+0x16>
 80117c6:	6994      	ldr	r4, [r2, #24]
 80117c8:	42a3      	cmp	r3, r4
 80117ca:	db07      	blt.n	80117dc <__sfputc_r+0x22>
 80117cc:	290a      	cmp	r1, #10
 80117ce:	d005      	beq.n	80117dc <__sfputc_r+0x22>
 80117d0:	6813      	ldr	r3, [r2, #0]
 80117d2:	1c58      	adds	r0, r3, #1
 80117d4:	6010      	str	r0, [r2, #0]
 80117d6:	7019      	strb	r1, [r3, #0]
 80117d8:	0008      	movs	r0, r1
 80117da:	bd10      	pop	{r4, pc}
 80117dc:	f000 f930 	bl	8011a40 <__swbuf_r>
 80117e0:	0001      	movs	r1, r0
 80117e2:	e7f9      	b.n	80117d8 <__sfputc_r+0x1e>

080117e4 <__sfputs_r>:
 80117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e6:	0006      	movs	r6, r0
 80117e8:	000f      	movs	r7, r1
 80117ea:	0014      	movs	r4, r2
 80117ec:	18d5      	adds	r5, r2, r3
 80117ee:	42ac      	cmp	r4, r5
 80117f0:	d101      	bne.n	80117f6 <__sfputs_r+0x12>
 80117f2:	2000      	movs	r0, #0
 80117f4:	e007      	b.n	8011806 <__sfputs_r+0x22>
 80117f6:	7821      	ldrb	r1, [r4, #0]
 80117f8:	003a      	movs	r2, r7
 80117fa:	0030      	movs	r0, r6
 80117fc:	f7ff ffdd 	bl	80117ba <__sfputc_r>
 8011800:	3401      	adds	r4, #1
 8011802:	1c43      	adds	r3, r0, #1
 8011804:	d1f3      	bne.n	80117ee <__sfputs_r+0xa>
 8011806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011808 <_vfiprintf_r>:
 8011808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801180a:	b0a1      	sub	sp, #132	@ 0x84
 801180c:	000f      	movs	r7, r1
 801180e:	0015      	movs	r5, r2
 8011810:	001e      	movs	r6, r3
 8011812:	9003      	str	r0, [sp, #12]
 8011814:	2800      	cmp	r0, #0
 8011816:	d004      	beq.n	8011822 <_vfiprintf_r+0x1a>
 8011818:	6a03      	ldr	r3, [r0, #32]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d101      	bne.n	8011822 <_vfiprintf_r+0x1a>
 801181e:	f7fe fa47 	bl	800fcb0 <__sinit>
 8011822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011824:	07db      	lsls	r3, r3, #31
 8011826:	d405      	bmi.n	8011834 <_vfiprintf_r+0x2c>
 8011828:	89bb      	ldrh	r3, [r7, #12]
 801182a:	059b      	lsls	r3, r3, #22
 801182c:	d402      	bmi.n	8011834 <_vfiprintf_r+0x2c>
 801182e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011830:	f7fe fb51 	bl	800fed6 <__retarget_lock_acquire_recursive>
 8011834:	89bb      	ldrh	r3, [r7, #12]
 8011836:	071b      	lsls	r3, r3, #28
 8011838:	d502      	bpl.n	8011840 <_vfiprintf_r+0x38>
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d113      	bne.n	8011868 <_vfiprintf_r+0x60>
 8011840:	0039      	movs	r1, r7
 8011842:	9803      	ldr	r0, [sp, #12]
 8011844:	f000 f93e 	bl	8011ac4 <__swsetup_r>
 8011848:	2800      	cmp	r0, #0
 801184a:	d00d      	beq.n	8011868 <_vfiprintf_r+0x60>
 801184c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801184e:	07db      	lsls	r3, r3, #31
 8011850:	d503      	bpl.n	801185a <_vfiprintf_r+0x52>
 8011852:	2001      	movs	r0, #1
 8011854:	4240      	negs	r0, r0
 8011856:	b021      	add	sp, #132	@ 0x84
 8011858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801185a:	89bb      	ldrh	r3, [r7, #12]
 801185c:	059b      	lsls	r3, r3, #22
 801185e:	d4f8      	bmi.n	8011852 <_vfiprintf_r+0x4a>
 8011860:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011862:	f7fe fb39 	bl	800fed8 <__retarget_lock_release_recursive>
 8011866:	e7f4      	b.n	8011852 <_vfiprintf_r+0x4a>
 8011868:	2300      	movs	r3, #0
 801186a:	ac08      	add	r4, sp, #32
 801186c:	6163      	str	r3, [r4, #20]
 801186e:	3320      	adds	r3, #32
 8011870:	7663      	strb	r3, [r4, #25]
 8011872:	3310      	adds	r3, #16
 8011874:	76a3      	strb	r3, [r4, #26]
 8011876:	9607      	str	r6, [sp, #28]
 8011878:	002e      	movs	r6, r5
 801187a:	7833      	ldrb	r3, [r6, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d001      	beq.n	8011884 <_vfiprintf_r+0x7c>
 8011880:	2b25      	cmp	r3, #37	@ 0x25
 8011882:	d148      	bne.n	8011916 <_vfiprintf_r+0x10e>
 8011884:	1b73      	subs	r3, r6, r5
 8011886:	9305      	str	r3, [sp, #20]
 8011888:	42ae      	cmp	r6, r5
 801188a:	d00b      	beq.n	80118a4 <_vfiprintf_r+0x9c>
 801188c:	002a      	movs	r2, r5
 801188e:	0039      	movs	r1, r7
 8011890:	9803      	ldr	r0, [sp, #12]
 8011892:	f7ff ffa7 	bl	80117e4 <__sfputs_r>
 8011896:	3001      	adds	r0, #1
 8011898:	d100      	bne.n	801189c <_vfiprintf_r+0x94>
 801189a:	e0ae      	b.n	80119fa <_vfiprintf_r+0x1f2>
 801189c:	6963      	ldr	r3, [r4, #20]
 801189e:	9a05      	ldr	r2, [sp, #20]
 80118a0:	189b      	adds	r3, r3, r2
 80118a2:	6163      	str	r3, [r4, #20]
 80118a4:	7833      	ldrb	r3, [r6, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d100      	bne.n	80118ac <_vfiprintf_r+0xa4>
 80118aa:	e0a6      	b.n	80119fa <_vfiprintf_r+0x1f2>
 80118ac:	2201      	movs	r2, #1
 80118ae:	2300      	movs	r3, #0
 80118b0:	4252      	negs	r2, r2
 80118b2:	6062      	str	r2, [r4, #4]
 80118b4:	a904      	add	r1, sp, #16
 80118b6:	3254      	adds	r2, #84	@ 0x54
 80118b8:	1852      	adds	r2, r2, r1
 80118ba:	1c75      	adds	r5, r6, #1
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	60e3      	str	r3, [r4, #12]
 80118c0:	60a3      	str	r3, [r4, #8]
 80118c2:	7013      	strb	r3, [r2, #0]
 80118c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80118c6:	4b59      	ldr	r3, [pc, #356]	@ (8011a2c <_vfiprintf_r+0x224>)
 80118c8:	2205      	movs	r2, #5
 80118ca:	0018      	movs	r0, r3
 80118cc:	7829      	ldrb	r1, [r5, #0]
 80118ce:	9305      	str	r3, [sp, #20]
 80118d0:	f7fe fb03 	bl	800feda <memchr>
 80118d4:	1c6e      	adds	r6, r5, #1
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d11f      	bne.n	801191a <_vfiprintf_r+0x112>
 80118da:	6822      	ldr	r2, [r4, #0]
 80118dc:	06d3      	lsls	r3, r2, #27
 80118de:	d504      	bpl.n	80118ea <_vfiprintf_r+0xe2>
 80118e0:	2353      	movs	r3, #83	@ 0x53
 80118e2:	a904      	add	r1, sp, #16
 80118e4:	185b      	adds	r3, r3, r1
 80118e6:	2120      	movs	r1, #32
 80118e8:	7019      	strb	r1, [r3, #0]
 80118ea:	0713      	lsls	r3, r2, #28
 80118ec:	d504      	bpl.n	80118f8 <_vfiprintf_r+0xf0>
 80118ee:	2353      	movs	r3, #83	@ 0x53
 80118f0:	a904      	add	r1, sp, #16
 80118f2:	185b      	adds	r3, r3, r1
 80118f4:	212b      	movs	r1, #43	@ 0x2b
 80118f6:	7019      	strb	r1, [r3, #0]
 80118f8:	782b      	ldrb	r3, [r5, #0]
 80118fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80118fc:	d016      	beq.n	801192c <_vfiprintf_r+0x124>
 80118fe:	002e      	movs	r6, r5
 8011900:	2100      	movs	r1, #0
 8011902:	200a      	movs	r0, #10
 8011904:	68e3      	ldr	r3, [r4, #12]
 8011906:	7832      	ldrb	r2, [r6, #0]
 8011908:	1c75      	adds	r5, r6, #1
 801190a:	3a30      	subs	r2, #48	@ 0x30
 801190c:	2a09      	cmp	r2, #9
 801190e:	d950      	bls.n	80119b2 <_vfiprintf_r+0x1aa>
 8011910:	2900      	cmp	r1, #0
 8011912:	d111      	bne.n	8011938 <_vfiprintf_r+0x130>
 8011914:	e017      	b.n	8011946 <_vfiprintf_r+0x13e>
 8011916:	3601      	adds	r6, #1
 8011918:	e7af      	b.n	801187a <_vfiprintf_r+0x72>
 801191a:	9b05      	ldr	r3, [sp, #20]
 801191c:	6822      	ldr	r2, [r4, #0]
 801191e:	1ac0      	subs	r0, r0, r3
 8011920:	2301      	movs	r3, #1
 8011922:	4083      	lsls	r3, r0
 8011924:	4313      	orrs	r3, r2
 8011926:	0035      	movs	r5, r6
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	e7cc      	b.n	80118c6 <_vfiprintf_r+0xbe>
 801192c:	9b07      	ldr	r3, [sp, #28]
 801192e:	1d19      	adds	r1, r3, #4
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	9107      	str	r1, [sp, #28]
 8011934:	2b00      	cmp	r3, #0
 8011936:	db01      	blt.n	801193c <_vfiprintf_r+0x134>
 8011938:	930b      	str	r3, [sp, #44]	@ 0x2c
 801193a:	e004      	b.n	8011946 <_vfiprintf_r+0x13e>
 801193c:	425b      	negs	r3, r3
 801193e:	60e3      	str	r3, [r4, #12]
 8011940:	2302      	movs	r3, #2
 8011942:	4313      	orrs	r3, r2
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	7833      	ldrb	r3, [r6, #0]
 8011948:	2b2e      	cmp	r3, #46	@ 0x2e
 801194a:	d10c      	bne.n	8011966 <_vfiprintf_r+0x15e>
 801194c:	7873      	ldrb	r3, [r6, #1]
 801194e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011950:	d134      	bne.n	80119bc <_vfiprintf_r+0x1b4>
 8011952:	9b07      	ldr	r3, [sp, #28]
 8011954:	3602      	adds	r6, #2
 8011956:	1d1a      	adds	r2, r3, #4
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	9207      	str	r2, [sp, #28]
 801195c:	2b00      	cmp	r3, #0
 801195e:	da01      	bge.n	8011964 <_vfiprintf_r+0x15c>
 8011960:	2301      	movs	r3, #1
 8011962:	425b      	negs	r3, r3
 8011964:	9309      	str	r3, [sp, #36]	@ 0x24
 8011966:	4d32      	ldr	r5, [pc, #200]	@ (8011a30 <_vfiprintf_r+0x228>)
 8011968:	2203      	movs	r2, #3
 801196a:	0028      	movs	r0, r5
 801196c:	7831      	ldrb	r1, [r6, #0]
 801196e:	f7fe fab4 	bl	800feda <memchr>
 8011972:	2800      	cmp	r0, #0
 8011974:	d006      	beq.n	8011984 <_vfiprintf_r+0x17c>
 8011976:	2340      	movs	r3, #64	@ 0x40
 8011978:	1b40      	subs	r0, r0, r5
 801197a:	4083      	lsls	r3, r0
 801197c:	6822      	ldr	r2, [r4, #0]
 801197e:	3601      	adds	r6, #1
 8011980:	4313      	orrs	r3, r2
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	7831      	ldrb	r1, [r6, #0]
 8011986:	2206      	movs	r2, #6
 8011988:	482a      	ldr	r0, [pc, #168]	@ (8011a34 <_vfiprintf_r+0x22c>)
 801198a:	1c75      	adds	r5, r6, #1
 801198c:	7621      	strb	r1, [r4, #24]
 801198e:	f7fe faa4 	bl	800feda <memchr>
 8011992:	2800      	cmp	r0, #0
 8011994:	d040      	beq.n	8011a18 <_vfiprintf_r+0x210>
 8011996:	4b28      	ldr	r3, [pc, #160]	@ (8011a38 <_vfiprintf_r+0x230>)
 8011998:	2b00      	cmp	r3, #0
 801199a:	d122      	bne.n	80119e2 <_vfiprintf_r+0x1da>
 801199c:	2207      	movs	r2, #7
 801199e:	9b07      	ldr	r3, [sp, #28]
 80119a0:	3307      	adds	r3, #7
 80119a2:	4393      	bics	r3, r2
 80119a4:	3308      	adds	r3, #8
 80119a6:	9307      	str	r3, [sp, #28]
 80119a8:	6963      	ldr	r3, [r4, #20]
 80119aa:	9a04      	ldr	r2, [sp, #16]
 80119ac:	189b      	adds	r3, r3, r2
 80119ae:	6163      	str	r3, [r4, #20]
 80119b0:	e762      	b.n	8011878 <_vfiprintf_r+0x70>
 80119b2:	4343      	muls	r3, r0
 80119b4:	002e      	movs	r6, r5
 80119b6:	2101      	movs	r1, #1
 80119b8:	189b      	adds	r3, r3, r2
 80119ba:	e7a4      	b.n	8011906 <_vfiprintf_r+0xfe>
 80119bc:	2300      	movs	r3, #0
 80119be:	200a      	movs	r0, #10
 80119c0:	0019      	movs	r1, r3
 80119c2:	3601      	adds	r6, #1
 80119c4:	6063      	str	r3, [r4, #4]
 80119c6:	7832      	ldrb	r2, [r6, #0]
 80119c8:	1c75      	adds	r5, r6, #1
 80119ca:	3a30      	subs	r2, #48	@ 0x30
 80119cc:	2a09      	cmp	r2, #9
 80119ce:	d903      	bls.n	80119d8 <_vfiprintf_r+0x1d0>
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d0c8      	beq.n	8011966 <_vfiprintf_r+0x15e>
 80119d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80119d6:	e7c6      	b.n	8011966 <_vfiprintf_r+0x15e>
 80119d8:	4341      	muls	r1, r0
 80119da:	002e      	movs	r6, r5
 80119dc:	2301      	movs	r3, #1
 80119de:	1889      	adds	r1, r1, r2
 80119e0:	e7f1      	b.n	80119c6 <_vfiprintf_r+0x1be>
 80119e2:	aa07      	add	r2, sp, #28
 80119e4:	9200      	str	r2, [sp, #0]
 80119e6:	0021      	movs	r1, r4
 80119e8:	003a      	movs	r2, r7
 80119ea:	4b14      	ldr	r3, [pc, #80]	@ (8011a3c <_vfiprintf_r+0x234>)
 80119ec:	9803      	ldr	r0, [sp, #12]
 80119ee:	f7fd fd15 	bl	800f41c <_printf_float>
 80119f2:	9004      	str	r0, [sp, #16]
 80119f4:	9b04      	ldr	r3, [sp, #16]
 80119f6:	3301      	adds	r3, #1
 80119f8:	d1d6      	bne.n	80119a8 <_vfiprintf_r+0x1a0>
 80119fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119fc:	07db      	lsls	r3, r3, #31
 80119fe:	d405      	bmi.n	8011a0c <_vfiprintf_r+0x204>
 8011a00:	89bb      	ldrh	r3, [r7, #12]
 8011a02:	059b      	lsls	r3, r3, #22
 8011a04:	d402      	bmi.n	8011a0c <_vfiprintf_r+0x204>
 8011a06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a08:	f7fe fa66 	bl	800fed8 <__retarget_lock_release_recursive>
 8011a0c:	89bb      	ldrh	r3, [r7, #12]
 8011a0e:	065b      	lsls	r3, r3, #25
 8011a10:	d500      	bpl.n	8011a14 <_vfiprintf_r+0x20c>
 8011a12:	e71e      	b.n	8011852 <_vfiprintf_r+0x4a>
 8011a14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011a16:	e71e      	b.n	8011856 <_vfiprintf_r+0x4e>
 8011a18:	aa07      	add	r2, sp, #28
 8011a1a:	9200      	str	r2, [sp, #0]
 8011a1c:	0021      	movs	r1, r4
 8011a1e:	003a      	movs	r2, r7
 8011a20:	4b06      	ldr	r3, [pc, #24]	@ (8011a3c <_vfiprintf_r+0x234>)
 8011a22:	9803      	ldr	r0, [sp, #12]
 8011a24:	f7fd ffa8 	bl	800f978 <_printf_i>
 8011a28:	e7e3      	b.n	80119f2 <_vfiprintf_r+0x1ea>
 8011a2a:	46c0      	nop			@ (mov r8, r8)
 8011a2c:	0801214e 	.word	0x0801214e
 8011a30:	08012154 	.word	0x08012154
 8011a34:	08012158 	.word	0x08012158
 8011a38:	0800f41d 	.word	0x0800f41d
 8011a3c:	080117e5 	.word	0x080117e5

08011a40 <__swbuf_r>:
 8011a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a42:	0006      	movs	r6, r0
 8011a44:	000d      	movs	r5, r1
 8011a46:	0014      	movs	r4, r2
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d004      	beq.n	8011a56 <__swbuf_r+0x16>
 8011a4c:	6a03      	ldr	r3, [r0, #32]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d101      	bne.n	8011a56 <__swbuf_r+0x16>
 8011a52:	f7fe f92d 	bl	800fcb0 <__sinit>
 8011a56:	69a3      	ldr	r3, [r4, #24]
 8011a58:	60a3      	str	r3, [r4, #8]
 8011a5a:	89a3      	ldrh	r3, [r4, #12]
 8011a5c:	071b      	lsls	r3, r3, #28
 8011a5e:	d502      	bpl.n	8011a66 <__swbuf_r+0x26>
 8011a60:	6923      	ldr	r3, [r4, #16]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d109      	bne.n	8011a7a <__swbuf_r+0x3a>
 8011a66:	0021      	movs	r1, r4
 8011a68:	0030      	movs	r0, r6
 8011a6a:	f000 f82b 	bl	8011ac4 <__swsetup_r>
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d003      	beq.n	8011a7a <__swbuf_r+0x3a>
 8011a72:	2501      	movs	r5, #1
 8011a74:	426d      	negs	r5, r5
 8011a76:	0028      	movs	r0, r5
 8011a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	b2ef      	uxtb	r7, r5
 8011a80:	1ac0      	subs	r0, r0, r3
 8011a82:	6963      	ldr	r3, [r4, #20]
 8011a84:	b2ed      	uxtb	r5, r5
 8011a86:	4283      	cmp	r3, r0
 8011a88:	dc05      	bgt.n	8011a96 <__swbuf_r+0x56>
 8011a8a:	0021      	movs	r1, r4
 8011a8c:	0030      	movs	r0, r6
 8011a8e:	f7ff fdd5 	bl	801163c <_fflush_r>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d1ed      	bne.n	8011a72 <__swbuf_r+0x32>
 8011a96:	68a3      	ldr	r3, [r4, #8]
 8011a98:	3001      	adds	r0, #1
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	60a3      	str	r3, [r4, #8]
 8011a9e:	6823      	ldr	r3, [r4, #0]
 8011aa0:	1c5a      	adds	r2, r3, #1
 8011aa2:	6022      	str	r2, [r4, #0]
 8011aa4:	701f      	strb	r7, [r3, #0]
 8011aa6:	6963      	ldr	r3, [r4, #20]
 8011aa8:	4283      	cmp	r3, r0
 8011aaa:	d004      	beq.n	8011ab6 <__swbuf_r+0x76>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	07db      	lsls	r3, r3, #31
 8011ab0:	d5e1      	bpl.n	8011a76 <__swbuf_r+0x36>
 8011ab2:	2d0a      	cmp	r5, #10
 8011ab4:	d1df      	bne.n	8011a76 <__swbuf_r+0x36>
 8011ab6:	0021      	movs	r1, r4
 8011ab8:	0030      	movs	r0, r6
 8011aba:	f7ff fdbf 	bl	801163c <_fflush_r>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0d9      	beq.n	8011a76 <__swbuf_r+0x36>
 8011ac2:	e7d6      	b.n	8011a72 <__swbuf_r+0x32>

08011ac4 <__swsetup_r>:
 8011ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8011b7c <__swsetup_r+0xb8>)
 8011ac6:	b570      	push	{r4, r5, r6, lr}
 8011ac8:	0005      	movs	r5, r0
 8011aca:	6818      	ldr	r0, [r3, #0]
 8011acc:	000c      	movs	r4, r1
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d004      	beq.n	8011adc <__swsetup_r+0x18>
 8011ad2:	6a03      	ldr	r3, [r0, #32]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <__swsetup_r+0x18>
 8011ad8:	f7fe f8ea 	bl	800fcb0 <__sinit>
 8011adc:	220c      	movs	r2, #12
 8011ade:	5ea3      	ldrsh	r3, [r4, r2]
 8011ae0:	071a      	lsls	r2, r3, #28
 8011ae2:	d423      	bmi.n	8011b2c <__swsetup_r+0x68>
 8011ae4:	06da      	lsls	r2, r3, #27
 8011ae6:	d407      	bmi.n	8011af8 <__swsetup_r+0x34>
 8011ae8:	2209      	movs	r2, #9
 8011aea:	602a      	str	r2, [r5, #0]
 8011aec:	2240      	movs	r2, #64	@ 0x40
 8011aee:	2001      	movs	r0, #1
 8011af0:	4313      	orrs	r3, r2
 8011af2:	81a3      	strh	r3, [r4, #12]
 8011af4:	4240      	negs	r0, r0
 8011af6:	e03a      	b.n	8011b6e <__swsetup_r+0xaa>
 8011af8:	075b      	lsls	r3, r3, #29
 8011afa:	d513      	bpl.n	8011b24 <__swsetup_r+0x60>
 8011afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011afe:	2900      	cmp	r1, #0
 8011b00:	d008      	beq.n	8011b14 <__swsetup_r+0x50>
 8011b02:	0023      	movs	r3, r4
 8011b04:	3344      	adds	r3, #68	@ 0x44
 8011b06:	4299      	cmp	r1, r3
 8011b08:	d002      	beq.n	8011b10 <__swsetup_r+0x4c>
 8011b0a:	0028      	movs	r0, r5
 8011b0c:	f7ff f86e 	bl	8010bec <_free_r>
 8011b10:	2300      	movs	r3, #0
 8011b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b14:	2224      	movs	r2, #36	@ 0x24
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	4393      	bics	r3, r2
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	6063      	str	r3, [r4, #4]
 8011b20:	6923      	ldr	r3, [r4, #16]
 8011b22:	6023      	str	r3, [r4, #0]
 8011b24:	2308      	movs	r3, #8
 8011b26:	89a2      	ldrh	r2, [r4, #12]
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	6923      	ldr	r3, [r4, #16]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10b      	bne.n	8011b4a <__swsetup_r+0x86>
 8011b32:	21a0      	movs	r1, #160	@ 0xa0
 8011b34:	2280      	movs	r2, #128	@ 0x80
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	0089      	lsls	r1, r1, #2
 8011b3a:	0092      	lsls	r2, r2, #2
 8011b3c:	400b      	ands	r3, r1
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d003      	beq.n	8011b4a <__swsetup_r+0x86>
 8011b42:	0021      	movs	r1, r4
 8011b44:	0028      	movs	r0, r5
 8011b46:	f000 f88f 	bl	8011c68 <__smakebuf_r>
 8011b4a:	220c      	movs	r2, #12
 8011b4c:	5ea3      	ldrsh	r3, [r4, r2]
 8011b4e:	2101      	movs	r1, #1
 8011b50:	001a      	movs	r2, r3
 8011b52:	400a      	ands	r2, r1
 8011b54:	420b      	tst	r3, r1
 8011b56:	d00b      	beq.n	8011b70 <__swsetup_r+0xac>
 8011b58:	2200      	movs	r2, #0
 8011b5a:	60a2      	str	r2, [r4, #8]
 8011b5c:	6962      	ldr	r2, [r4, #20]
 8011b5e:	4252      	negs	r2, r2
 8011b60:	61a2      	str	r2, [r4, #24]
 8011b62:	2000      	movs	r0, #0
 8011b64:	6922      	ldr	r2, [r4, #16]
 8011b66:	4282      	cmp	r2, r0
 8011b68:	d101      	bne.n	8011b6e <__swsetup_r+0xaa>
 8011b6a:	061a      	lsls	r2, r3, #24
 8011b6c:	d4be      	bmi.n	8011aec <__swsetup_r+0x28>
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}
 8011b70:	0799      	lsls	r1, r3, #30
 8011b72:	d400      	bmi.n	8011b76 <__swsetup_r+0xb2>
 8011b74:	6962      	ldr	r2, [r4, #20]
 8011b76:	60a2      	str	r2, [r4, #8]
 8011b78:	e7f3      	b.n	8011b62 <__swsetup_r+0x9e>
 8011b7a:	46c0      	nop			@ (mov r8, r8)
 8011b7c:	20000200 	.word	0x20000200

08011b80 <_raise_r>:
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	0004      	movs	r4, r0
 8011b84:	000d      	movs	r5, r1
 8011b86:	291f      	cmp	r1, #31
 8011b88:	d904      	bls.n	8011b94 <_raise_r+0x14>
 8011b8a:	2316      	movs	r3, #22
 8011b8c:	6003      	str	r3, [r0, #0]
 8011b8e:	2001      	movs	r0, #1
 8011b90:	4240      	negs	r0, r0
 8011b92:	bd70      	pop	{r4, r5, r6, pc}
 8011b94:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d004      	beq.n	8011ba4 <_raise_r+0x24>
 8011b9a:	008a      	lsls	r2, r1, #2
 8011b9c:	189b      	adds	r3, r3, r2
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	2a00      	cmp	r2, #0
 8011ba2:	d108      	bne.n	8011bb6 <_raise_r+0x36>
 8011ba4:	0020      	movs	r0, r4
 8011ba6:	f000 f831 	bl	8011c0c <_getpid_r>
 8011baa:	002a      	movs	r2, r5
 8011bac:	0001      	movs	r1, r0
 8011bae:	0020      	movs	r0, r4
 8011bb0:	f000 f81a 	bl	8011be8 <_kill_r>
 8011bb4:	e7ed      	b.n	8011b92 <_raise_r+0x12>
 8011bb6:	2a01      	cmp	r2, #1
 8011bb8:	d009      	beq.n	8011bce <_raise_r+0x4e>
 8011bba:	1c51      	adds	r1, r2, #1
 8011bbc:	d103      	bne.n	8011bc6 <_raise_r+0x46>
 8011bbe:	2316      	movs	r3, #22
 8011bc0:	6003      	str	r3, [r0, #0]
 8011bc2:	2001      	movs	r0, #1
 8011bc4:	e7e5      	b.n	8011b92 <_raise_r+0x12>
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	0028      	movs	r0, r5
 8011bca:	6019      	str	r1, [r3, #0]
 8011bcc:	4790      	blx	r2
 8011bce:	2000      	movs	r0, #0
 8011bd0:	e7df      	b.n	8011b92 <_raise_r+0x12>
	...

08011bd4 <raise>:
 8011bd4:	b510      	push	{r4, lr}
 8011bd6:	4b03      	ldr	r3, [pc, #12]	@ (8011be4 <raise+0x10>)
 8011bd8:	0001      	movs	r1, r0
 8011bda:	6818      	ldr	r0, [r3, #0]
 8011bdc:	f7ff ffd0 	bl	8011b80 <_raise_r>
 8011be0:	bd10      	pop	{r4, pc}
 8011be2:	46c0      	nop			@ (mov r8, r8)
 8011be4:	20000200 	.word	0x20000200

08011be8 <_kill_r>:
 8011be8:	2300      	movs	r3, #0
 8011bea:	b570      	push	{r4, r5, r6, lr}
 8011bec:	4d06      	ldr	r5, [pc, #24]	@ (8011c08 <_kill_r+0x20>)
 8011bee:	0004      	movs	r4, r0
 8011bf0:	0008      	movs	r0, r1
 8011bf2:	0011      	movs	r1, r2
 8011bf4:	602b      	str	r3, [r5, #0]
 8011bf6:	f7f1 f9a3 	bl	8002f40 <_kill>
 8011bfa:	1c43      	adds	r3, r0, #1
 8011bfc:	d103      	bne.n	8011c06 <_kill_r+0x1e>
 8011bfe:	682b      	ldr	r3, [r5, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d000      	beq.n	8011c06 <_kill_r+0x1e>
 8011c04:	6023      	str	r3, [r4, #0]
 8011c06:	bd70      	pop	{r4, r5, r6, pc}
 8011c08:	20001da8 	.word	0x20001da8

08011c0c <_getpid_r>:
 8011c0c:	b510      	push	{r4, lr}
 8011c0e:	f7f1 f991 	bl	8002f34 <_getpid>
 8011c12:	bd10      	pop	{r4, pc}

08011c14 <__swhatbuf_r>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	000e      	movs	r6, r1
 8011c18:	001d      	movs	r5, r3
 8011c1a:	230e      	movs	r3, #14
 8011c1c:	5ec9      	ldrsh	r1, [r1, r3]
 8011c1e:	0014      	movs	r4, r2
 8011c20:	b096      	sub	sp, #88	@ 0x58
 8011c22:	2900      	cmp	r1, #0
 8011c24:	da0c      	bge.n	8011c40 <__swhatbuf_r+0x2c>
 8011c26:	89b2      	ldrh	r2, [r6, #12]
 8011c28:	2380      	movs	r3, #128	@ 0x80
 8011c2a:	0011      	movs	r1, r2
 8011c2c:	4019      	ands	r1, r3
 8011c2e:	421a      	tst	r2, r3
 8011c30:	d114      	bne.n	8011c5c <__swhatbuf_r+0x48>
 8011c32:	2380      	movs	r3, #128	@ 0x80
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	2000      	movs	r0, #0
 8011c38:	6029      	str	r1, [r5, #0]
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	b016      	add	sp, #88	@ 0x58
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	466a      	mov	r2, sp
 8011c42:	f000 f853 	bl	8011cec <_fstat_r>
 8011c46:	2800      	cmp	r0, #0
 8011c48:	dbed      	blt.n	8011c26 <__swhatbuf_r+0x12>
 8011c4a:	23f0      	movs	r3, #240	@ 0xf0
 8011c4c:	9901      	ldr	r1, [sp, #4]
 8011c4e:	021b      	lsls	r3, r3, #8
 8011c50:	4019      	ands	r1, r3
 8011c52:	4b04      	ldr	r3, [pc, #16]	@ (8011c64 <__swhatbuf_r+0x50>)
 8011c54:	18c9      	adds	r1, r1, r3
 8011c56:	424b      	negs	r3, r1
 8011c58:	4159      	adcs	r1, r3
 8011c5a:	e7ea      	b.n	8011c32 <__swhatbuf_r+0x1e>
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	2340      	movs	r3, #64	@ 0x40
 8011c60:	e7e9      	b.n	8011c36 <__swhatbuf_r+0x22>
 8011c62:	46c0      	nop			@ (mov r8, r8)
 8011c64:	ffffe000 	.word	0xffffe000

08011c68 <__smakebuf_r>:
 8011c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c6a:	2602      	movs	r6, #2
 8011c6c:	898b      	ldrh	r3, [r1, #12]
 8011c6e:	0005      	movs	r5, r0
 8011c70:	000c      	movs	r4, r1
 8011c72:	b085      	sub	sp, #20
 8011c74:	4233      	tst	r3, r6
 8011c76:	d007      	beq.n	8011c88 <__smakebuf_r+0x20>
 8011c78:	0023      	movs	r3, r4
 8011c7a:	3347      	adds	r3, #71	@ 0x47
 8011c7c:	6023      	str	r3, [r4, #0]
 8011c7e:	6123      	str	r3, [r4, #16]
 8011c80:	2301      	movs	r3, #1
 8011c82:	6163      	str	r3, [r4, #20]
 8011c84:	b005      	add	sp, #20
 8011c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c88:	ab03      	add	r3, sp, #12
 8011c8a:	aa02      	add	r2, sp, #8
 8011c8c:	f7ff ffc2 	bl	8011c14 <__swhatbuf_r>
 8011c90:	9f02      	ldr	r7, [sp, #8]
 8011c92:	9001      	str	r0, [sp, #4]
 8011c94:	0039      	movs	r1, r7
 8011c96:	0028      	movs	r0, r5
 8011c98:	f7ff f81e 	bl	8010cd8 <_malloc_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d108      	bne.n	8011cb2 <__smakebuf_r+0x4a>
 8011ca0:	220c      	movs	r2, #12
 8011ca2:	5ea3      	ldrsh	r3, [r4, r2]
 8011ca4:	059a      	lsls	r2, r3, #22
 8011ca6:	d4ed      	bmi.n	8011c84 <__smakebuf_r+0x1c>
 8011ca8:	2203      	movs	r2, #3
 8011caa:	4393      	bics	r3, r2
 8011cac:	431e      	orrs	r6, r3
 8011cae:	81a6      	strh	r6, [r4, #12]
 8011cb0:	e7e2      	b.n	8011c78 <__smakebuf_r+0x10>
 8011cb2:	2380      	movs	r3, #128	@ 0x80
 8011cb4:	89a2      	ldrh	r2, [r4, #12]
 8011cb6:	6020      	str	r0, [r4, #0]
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	81a3      	strh	r3, [r4, #12]
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	6120      	str	r0, [r4, #16]
 8011cc0:	6167      	str	r7, [r4, #20]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00c      	beq.n	8011ce0 <__smakebuf_r+0x78>
 8011cc6:	0028      	movs	r0, r5
 8011cc8:	230e      	movs	r3, #14
 8011cca:	5ee1      	ldrsh	r1, [r4, r3]
 8011ccc:	f000 f820 	bl	8011d10 <_isatty_r>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d005      	beq.n	8011ce0 <__smakebuf_r+0x78>
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	89a2      	ldrh	r2, [r4, #12]
 8011cd8:	439a      	bics	r2, r3
 8011cda:	3b02      	subs	r3, #2
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	81a3      	strh	r3, [r4, #12]
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	9a01      	ldr	r2, [sp, #4]
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	81a3      	strh	r3, [r4, #12]
 8011ce8:	e7cc      	b.n	8011c84 <__smakebuf_r+0x1c>
	...

08011cec <_fstat_r>:
 8011cec:	2300      	movs	r3, #0
 8011cee:	b570      	push	{r4, r5, r6, lr}
 8011cf0:	4d06      	ldr	r5, [pc, #24]	@ (8011d0c <_fstat_r+0x20>)
 8011cf2:	0004      	movs	r4, r0
 8011cf4:	0008      	movs	r0, r1
 8011cf6:	0011      	movs	r1, r2
 8011cf8:	602b      	str	r3, [r5, #0]
 8011cfa:	f7f1 f981 	bl	8003000 <_fstat>
 8011cfe:	1c43      	adds	r3, r0, #1
 8011d00:	d103      	bne.n	8011d0a <_fstat_r+0x1e>
 8011d02:	682b      	ldr	r3, [r5, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d000      	beq.n	8011d0a <_fstat_r+0x1e>
 8011d08:	6023      	str	r3, [r4, #0]
 8011d0a:	bd70      	pop	{r4, r5, r6, pc}
 8011d0c:	20001da8 	.word	0x20001da8

08011d10 <_isatty_r>:
 8011d10:	2300      	movs	r3, #0
 8011d12:	b570      	push	{r4, r5, r6, lr}
 8011d14:	4d06      	ldr	r5, [pc, #24]	@ (8011d30 <_isatty_r+0x20>)
 8011d16:	0004      	movs	r4, r0
 8011d18:	0008      	movs	r0, r1
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	f7f1 f97e 	bl	800301c <_isatty>
 8011d20:	1c43      	adds	r3, r0, #1
 8011d22:	d103      	bne.n	8011d2c <_isatty_r+0x1c>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d000      	beq.n	8011d2c <_isatty_r+0x1c>
 8011d2a:	6023      	str	r3, [r4, #0]
 8011d2c:	bd70      	pop	{r4, r5, r6, pc}
 8011d2e:	46c0      	nop			@ (mov r8, r8)
 8011d30:	20001da8 	.word	0x20001da8

08011d34 <_init>:
 8011d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d36:	46c0      	nop			@ (mov r8, r8)
 8011d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d3a:	bc08      	pop	{r3}
 8011d3c:	469e      	mov	lr, r3
 8011d3e:	4770      	bx	lr

08011d40 <_fini>:
 8011d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d42:	46c0      	nop			@ (mov r8, r8)
 8011d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d46:	bc08      	pop	{r3}
 8011d48:	469e      	mov	lr, r3
 8011d4a:	4770      	bx	lr
