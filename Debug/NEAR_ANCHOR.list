
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800cbd0  0800cbd0  0000dbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce70  0800ce70  0000e1c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce70  0800ce70  0000e1c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce70  0800ce70  0000e1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce70  0800ce70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce74  0800ce74  0000de74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  0800ce78  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  200001c0  0800d038  0000e1c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800d038  0000e5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176b5  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe4  00000000  00000000  0002589d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064ff  00000000  00000000  0002bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c783  00000000  00000000  0003215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2dbc  00000000  00000000  0004e8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f169a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  000f16e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f60d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000144  00000000  00000000  000f6137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cbb8 	.word	0x0800cbb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	0800cbb8 	.word	0x0800cbb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fe0b 	bl	8001e44 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fd43 	bl	8001cc0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f001 f9a0 	bl	8001588 <__aeabi_dsub>
 8000248:	f001 fd3a 	bl	8001cc0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_d2lz>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2200      	movs	r2, #0
 8000260:	2300      	movs	r3, #0
 8000262:	0004      	movs	r4, r0
 8000264:	000d      	movs	r5, r1
 8000266:	f001 fdcf 	bl	8001e08 <__aeabi_dcmplt>
 800026a:	2800      	cmp	r0, #0
 800026c:	d108      	bne.n	8000280 <__aeabi_d2lz+0x24>
 800026e:	0020      	movs	r0, r4
 8000270:	0029      	movs	r1, r5
 8000272:	f000 f80f 	bl	8000294 <__aeabi_d2ulz>
 8000276:	0002      	movs	r2, r0
 8000278:	000b      	movs	r3, r1
 800027a:	0010      	movs	r0, r2
 800027c:	0019      	movs	r1, r3
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	061b      	lsls	r3, r3, #24
 8000284:	18e9      	adds	r1, r5, r3
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f804 	bl	8000294 <__aeabi_d2ulz>
 800028c:	2300      	movs	r3, #0
 800028e:	4242      	negs	r2, r0
 8000290:	418b      	sbcs	r3, r1
 8000292:	e7f2      	b.n	800027a <__aeabi_d2lz+0x1e>

08000294 <__aeabi_d2ulz>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2200      	movs	r2, #0
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <__aeabi_d2ulz+0x34>)
 800029a:	000d      	movs	r5, r1
 800029c:	0004      	movs	r4, r0
 800029e:	f000 feab 	bl	8000ff8 <__aeabi_dmul>
 80002a2:	f7ff ffbd 	bl	8000220 <__aeabi_d2uiz>
 80002a6:	0006      	movs	r6, r0
 80002a8:	f001 fd74 	bl	8001d94 <__aeabi_ui2d>
 80002ac:	2200      	movs	r2, #0
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <__aeabi_d2ulz+0x38>)
 80002b0:	f000 fea2 	bl	8000ff8 <__aeabi_dmul>
 80002b4:	0002      	movs	r2, r0
 80002b6:	000b      	movs	r3, r1
 80002b8:	0020      	movs	r0, r4
 80002ba:	0029      	movs	r1, r5
 80002bc:	f001 f964 	bl	8001588 <__aeabi_dsub>
 80002c0:	f7ff ffae 	bl	8000220 <__aeabi_d2uiz>
 80002c4:	0031      	movs	r1, r6
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	3df00000 	.word	0x3df00000
 80002cc:	41f00000 	.word	0x41f00000

080002d0 <__aeabi_l2d>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0006      	movs	r6, r0
 80002d4:	0008      	movs	r0, r1
 80002d6:	f001 fd2f 	bl	8001d38 <__aeabi_i2d>
 80002da:	2200      	movs	r2, #0
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <__aeabi_l2d+0x28>)
 80002de:	f000 fe8b 	bl	8000ff8 <__aeabi_dmul>
 80002e2:	000d      	movs	r5, r1
 80002e4:	0004      	movs	r4, r0
 80002e6:	0030      	movs	r0, r6
 80002e8:	f001 fd54 	bl	8001d94 <__aeabi_ui2d>
 80002ec:	002b      	movs	r3, r5
 80002ee:	0022      	movs	r2, r4
 80002f0:	f000 f804 	bl	80002fc <__aeabi_dadd>
 80002f4:	bd70      	pop	{r4, r5, r6, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	41f00000 	.word	0x41f00000

080002fc <__aeabi_dadd>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	4657      	mov	r7, sl
 8000300:	464e      	mov	r6, r9
 8000302:	4645      	mov	r5, r8
 8000304:	46de      	mov	lr, fp
 8000306:	b5e0      	push	{r5, r6, r7, lr}
 8000308:	b083      	sub	sp, #12
 800030a:	9000      	str	r0, [sp, #0]
 800030c:	9101      	str	r1, [sp, #4]
 800030e:	030c      	lsls	r4, r1, #12
 8000310:	004f      	lsls	r7, r1, #1
 8000312:	0fce      	lsrs	r6, r1, #31
 8000314:	0a61      	lsrs	r1, r4, #9
 8000316:	9c00      	ldr	r4, [sp, #0]
 8000318:	031d      	lsls	r5, r3, #12
 800031a:	0f64      	lsrs	r4, r4, #29
 800031c:	430c      	orrs	r4, r1
 800031e:	9900      	ldr	r1, [sp, #0]
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	00c8      	lsls	r0, r1, #3
 8000326:	0059      	lsls	r1, r3, #1
 8000328:	0d4b      	lsrs	r3, r1, #21
 800032a:	4699      	mov	r9, r3
 800032c:	9a00      	ldr	r2, [sp, #0]
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	0a6d      	lsrs	r5, r5, #9
 8000332:	0fd9      	lsrs	r1, r3, #31
 8000334:	0f53      	lsrs	r3, r2, #29
 8000336:	432b      	orrs	r3, r5
 8000338:	469a      	mov	sl, r3
 800033a:	9b00      	ldr	r3, [sp, #0]
 800033c:	0d7f      	lsrs	r7, r7, #21
 800033e:	00da      	lsls	r2, r3, #3
 8000340:	4694      	mov	ip, r2
 8000342:	464a      	mov	r2, r9
 8000344:	46b0      	mov	r8, r6
 8000346:	1aba      	subs	r2, r7, r2
 8000348:	428e      	cmp	r6, r1
 800034a:	d100      	bne.n	800034e <__aeabi_dadd+0x52>
 800034c:	e0b0      	b.n	80004b0 <__aeabi_dadd+0x1b4>
 800034e:	2a00      	cmp	r2, #0
 8000350:	dc00      	bgt.n	8000354 <__aeabi_dadd+0x58>
 8000352:	e078      	b.n	8000446 <__aeabi_dadd+0x14a>
 8000354:	4649      	mov	r1, r9
 8000356:	2900      	cmp	r1, #0
 8000358:	d100      	bne.n	800035c <__aeabi_dadd+0x60>
 800035a:	e0e9      	b.n	8000530 <__aeabi_dadd+0x234>
 800035c:	49c9      	ldr	r1, [pc, #804]	@ (8000684 <__aeabi_dadd+0x388>)
 800035e:	428f      	cmp	r7, r1
 8000360:	d100      	bne.n	8000364 <__aeabi_dadd+0x68>
 8000362:	e195      	b.n	8000690 <__aeabi_dadd+0x394>
 8000364:	2501      	movs	r5, #1
 8000366:	2a38      	cmp	r2, #56	@ 0x38
 8000368:	dc16      	bgt.n	8000398 <__aeabi_dadd+0x9c>
 800036a:	2180      	movs	r1, #128	@ 0x80
 800036c:	4653      	mov	r3, sl
 800036e:	0409      	lsls	r1, r1, #16
 8000370:	430b      	orrs	r3, r1
 8000372:	469a      	mov	sl, r3
 8000374:	2a1f      	cmp	r2, #31
 8000376:	dd00      	ble.n	800037a <__aeabi_dadd+0x7e>
 8000378:	e1e7      	b.n	800074a <__aeabi_dadd+0x44e>
 800037a:	2120      	movs	r1, #32
 800037c:	4655      	mov	r5, sl
 800037e:	1a8b      	subs	r3, r1, r2
 8000380:	4661      	mov	r1, ip
 8000382:	409d      	lsls	r5, r3
 8000384:	40d1      	lsrs	r1, r2
 8000386:	430d      	orrs	r5, r1
 8000388:	4661      	mov	r1, ip
 800038a:	4099      	lsls	r1, r3
 800038c:	1e4b      	subs	r3, r1, #1
 800038e:	4199      	sbcs	r1, r3
 8000390:	4653      	mov	r3, sl
 8000392:	40d3      	lsrs	r3, r2
 8000394:	430d      	orrs	r5, r1
 8000396:	1ae4      	subs	r4, r4, r3
 8000398:	1b45      	subs	r5, r0, r5
 800039a:	42a8      	cmp	r0, r5
 800039c:	4180      	sbcs	r0, r0
 800039e:	4240      	negs	r0, r0
 80003a0:	1a24      	subs	r4, r4, r0
 80003a2:	0223      	lsls	r3, r4, #8
 80003a4:	d400      	bmi.n	80003a8 <__aeabi_dadd+0xac>
 80003a6:	e10f      	b.n	80005c8 <__aeabi_dadd+0x2cc>
 80003a8:	0264      	lsls	r4, r4, #9
 80003aa:	0a64      	lsrs	r4, r4, #9
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d100      	bne.n	80003b2 <__aeabi_dadd+0xb6>
 80003b0:	e139      	b.n	8000626 <__aeabi_dadd+0x32a>
 80003b2:	0020      	movs	r0, r4
 80003b4:	f001 fd50 	bl	8001e58 <__clzsi2>
 80003b8:	0003      	movs	r3, r0
 80003ba:	3b08      	subs	r3, #8
 80003bc:	2120      	movs	r1, #32
 80003be:	0028      	movs	r0, r5
 80003c0:	1aca      	subs	r2, r1, r3
 80003c2:	40d0      	lsrs	r0, r2
 80003c4:	409c      	lsls	r4, r3
 80003c6:	0002      	movs	r2, r0
 80003c8:	409d      	lsls	r5, r3
 80003ca:	4322      	orrs	r2, r4
 80003cc:	429f      	cmp	r7, r3
 80003ce:	dd00      	ble.n	80003d2 <__aeabi_dadd+0xd6>
 80003d0:	e173      	b.n	80006ba <__aeabi_dadd+0x3be>
 80003d2:	1bd8      	subs	r0, r3, r7
 80003d4:	3001      	adds	r0, #1
 80003d6:	1a09      	subs	r1, r1, r0
 80003d8:	002c      	movs	r4, r5
 80003da:	408d      	lsls	r5, r1
 80003dc:	40c4      	lsrs	r4, r0
 80003de:	1e6b      	subs	r3, r5, #1
 80003e0:	419d      	sbcs	r5, r3
 80003e2:	0013      	movs	r3, r2
 80003e4:	40c2      	lsrs	r2, r0
 80003e6:	408b      	lsls	r3, r1
 80003e8:	4325      	orrs	r5, r4
 80003ea:	2700      	movs	r7, #0
 80003ec:	0014      	movs	r4, r2
 80003ee:	431d      	orrs	r5, r3
 80003f0:	076b      	lsls	r3, r5, #29
 80003f2:	d009      	beq.n	8000408 <__aeabi_dadd+0x10c>
 80003f4:	230f      	movs	r3, #15
 80003f6:	402b      	ands	r3, r5
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d005      	beq.n	8000408 <__aeabi_dadd+0x10c>
 80003fc:	1d2b      	adds	r3, r5, #4
 80003fe:	42ab      	cmp	r3, r5
 8000400:	41ad      	sbcs	r5, r5
 8000402:	426d      	negs	r5, r5
 8000404:	1964      	adds	r4, r4, r5
 8000406:	001d      	movs	r5, r3
 8000408:	0223      	lsls	r3, r4, #8
 800040a:	d400      	bmi.n	800040e <__aeabi_dadd+0x112>
 800040c:	e12d      	b.n	800066a <__aeabi_dadd+0x36e>
 800040e:	4a9d      	ldr	r2, [pc, #628]	@ (8000684 <__aeabi_dadd+0x388>)
 8000410:	3701      	adds	r7, #1
 8000412:	4297      	cmp	r7, r2
 8000414:	d100      	bne.n	8000418 <__aeabi_dadd+0x11c>
 8000416:	e0d3      	b.n	80005c0 <__aeabi_dadd+0x2c4>
 8000418:	4646      	mov	r6, r8
 800041a:	499b      	ldr	r1, [pc, #620]	@ (8000688 <__aeabi_dadd+0x38c>)
 800041c:	08ed      	lsrs	r5, r5, #3
 800041e:	4021      	ands	r1, r4
 8000420:	074a      	lsls	r2, r1, #29
 8000422:	432a      	orrs	r2, r5
 8000424:	057c      	lsls	r4, r7, #21
 8000426:	024d      	lsls	r5, r1, #9
 8000428:	0b2d      	lsrs	r5, r5, #12
 800042a:	0d64      	lsrs	r4, r4, #21
 800042c:	0524      	lsls	r4, r4, #20
 800042e:	432c      	orrs	r4, r5
 8000430:	07f6      	lsls	r6, r6, #31
 8000432:	4334      	orrs	r4, r6
 8000434:	0010      	movs	r0, r2
 8000436:	0021      	movs	r1, r4
 8000438:	b003      	add	sp, #12
 800043a:	bcf0      	pop	{r4, r5, r6, r7}
 800043c:	46bb      	mov	fp, r7
 800043e:	46b2      	mov	sl, r6
 8000440:	46a9      	mov	r9, r5
 8000442:	46a0      	mov	r8, r4
 8000444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000446:	2a00      	cmp	r2, #0
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x150>
 800044a:	e084      	b.n	8000556 <__aeabi_dadd+0x25a>
 800044c:	464a      	mov	r2, r9
 800044e:	1bd2      	subs	r2, r2, r7
 8000450:	2f00      	cmp	r7, #0
 8000452:	d000      	beq.n	8000456 <__aeabi_dadd+0x15a>
 8000454:	e16d      	b.n	8000732 <__aeabi_dadd+0x436>
 8000456:	0025      	movs	r5, r4
 8000458:	4305      	orrs	r5, r0
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x162>
 800045c:	e127      	b.n	80006ae <__aeabi_dadd+0x3b2>
 800045e:	1e56      	subs	r6, r2, #1
 8000460:	2a01      	cmp	r2, #1
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x16a>
 8000464:	e23b      	b.n	80008de <__aeabi_dadd+0x5e2>
 8000466:	4d87      	ldr	r5, [pc, #540]	@ (8000684 <__aeabi_dadd+0x388>)
 8000468:	42aa      	cmp	r2, r5
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x172>
 800046c:	e26a      	b.n	8000944 <__aeabi_dadd+0x648>
 800046e:	2501      	movs	r5, #1
 8000470:	2e38      	cmp	r6, #56	@ 0x38
 8000472:	dc12      	bgt.n	800049a <__aeabi_dadd+0x19e>
 8000474:	0032      	movs	r2, r6
 8000476:	2a1f      	cmp	r2, #31
 8000478:	dd00      	ble.n	800047c <__aeabi_dadd+0x180>
 800047a:	e1f8      	b.n	800086e <__aeabi_dadd+0x572>
 800047c:	2620      	movs	r6, #32
 800047e:	0025      	movs	r5, r4
 8000480:	1ab6      	subs	r6, r6, r2
 8000482:	0007      	movs	r7, r0
 8000484:	4653      	mov	r3, sl
 8000486:	40b0      	lsls	r0, r6
 8000488:	40d4      	lsrs	r4, r2
 800048a:	40b5      	lsls	r5, r6
 800048c:	40d7      	lsrs	r7, r2
 800048e:	1e46      	subs	r6, r0, #1
 8000490:	41b0      	sbcs	r0, r6
 8000492:	1b1b      	subs	r3, r3, r4
 8000494:	469a      	mov	sl, r3
 8000496:	433d      	orrs	r5, r7
 8000498:	4305      	orrs	r5, r0
 800049a:	4662      	mov	r2, ip
 800049c:	1b55      	subs	r5, r2, r5
 800049e:	45ac      	cmp	ip, r5
 80004a0:	4192      	sbcs	r2, r2
 80004a2:	4653      	mov	r3, sl
 80004a4:	4252      	negs	r2, r2
 80004a6:	000e      	movs	r6, r1
 80004a8:	464f      	mov	r7, r9
 80004aa:	4688      	mov	r8, r1
 80004ac:	1a9c      	subs	r4, r3, r2
 80004ae:	e778      	b.n	80003a2 <__aeabi_dadd+0xa6>
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_dadd+0x1ba>
 80004b4:	e08e      	b.n	80005d4 <__aeabi_dadd+0x2d8>
 80004b6:	4649      	mov	r1, r9
 80004b8:	2900      	cmp	r1, #0
 80004ba:	d175      	bne.n	80005a8 <__aeabi_dadd+0x2ac>
 80004bc:	4661      	mov	r1, ip
 80004be:	4653      	mov	r3, sl
 80004c0:	4319      	orrs	r1, r3
 80004c2:	d100      	bne.n	80004c6 <__aeabi_dadd+0x1ca>
 80004c4:	e0f6      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 80004c6:	1e51      	subs	r1, r2, #1
 80004c8:	2a01      	cmp	r2, #1
 80004ca:	d100      	bne.n	80004ce <__aeabi_dadd+0x1d2>
 80004cc:	e191      	b.n	80007f2 <__aeabi_dadd+0x4f6>
 80004ce:	4d6d      	ldr	r5, [pc, #436]	@ (8000684 <__aeabi_dadd+0x388>)
 80004d0:	42aa      	cmp	r2, r5
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dadd+0x1da>
 80004d4:	e0dc      	b.n	8000690 <__aeabi_dadd+0x394>
 80004d6:	2501      	movs	r5, #1
 80004d8:	2938      	cmp	r1, #56	@ 0x38
 80004da:	dc14      	bgt.n	8000506 <__aeabi_dadd+0x20a>
 80004dc:	000a      	movs	r2, r1
 80004de:	2a1f      	cmp	r2, #31
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_dadd+0x1e8>
 80004e2:	e1a2      	b.n	800082a <__aeabi_dadd+0x52e>
 80004e4:	2120      	movs	r1, #32
 80004e6:	4653      	mov	r3, sl
 80004e8:	1a89      	subs	r1, r1, r2
 80004ea:	408b      	lsls	r3, r1
 80004ec:	001d      	movs	r5, r3
 80004ee:	4663      	mov	r3, ip
 80004f0:	40d3      	lsrs	r3, r2
 80004f2:	431d      	orrs	r5, r3
 80004f4:	4663      	mov	r3, ip
 80004f6:	408b      	lsls	r3, r1
 80004f8:	0019      	movs	r1, r3
 80004fa:	1e4b      	subs	r3, r1, #1
 80004fc:	4199      	sbcs	r1, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	40d3      	lsrs	r3, r2
 8000502:	430d      	orrs	r5, r1
 8000504:	18e4      	adds	r4, r4, r3
 8000506:	182d      	adds	r5, r5, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	4180      	sbcs	r0, r0
 800050c:	4240      	negs	r0, r0
 800050e:	1824      	adds	r4, r4, r0
 8000510:	0223      	lsls	r3, r4, #8
 8000512:	d559      	bpl.n	80005c8 <__aeabi_dadd+0x2cc>
 8000514:	4b5b      	ldr	r3, [pc, #364]	@ (8000684 <__aeabi_dadd+0x388>)
 8000516:	3701      	adds	r7, #1
 8000518:	429f      	cmp	r7, r3
 800051a:	d051      	beq.n	80005c0 <__aeabi_dadd+0x2c4>
 800051c:	2101      	movs	r1, #1
 800051e:	4b5a      	ldr	r3, [pc, #360]	@ (8000688 <__aeabi_dadd+0x38c>)
 8000520:	086a      	lsrs	r2, r5, #1
 8000522:	401c      	ands	r4, r3
 8000524:	4029      	ands	r1, r5
 8000526:	430a      	orrs	r2, r1
 8000528:	07e5      	lsls	r5, r4, #31
 800052a:	4315      	orrs	r5, r2
 800052c:	0864      	lsrs	r4, r4, #1
 800052e:	e75f      	b.n	80003f0 <__aeabi_dadd+0xf4>
 8000530:	4661      	mov	r1, ip
 8000532:	4653      	mov	r3, sl
 8000534:	4319      	orrs	r1, r3
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x23e>
 8000538:	e0bc      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 800053a:	1e51      	subs	r1, r2, #1
 800053c:	2a01      	cmp	r2, #1
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x246>
 8000540:	e164      	b.n	800080c <__aeabi_dadd+0x510>
 8000542:	4d50      	ldr	r5, [pc, #320]	@ (8000684 <__aeabi_dadd+0x388>)
 8000544:	42aa      	cmp	r2, r5
 8000546:	d100      	bne.n	800054a <__aeabi_dadd+0x24e>
 8000548:	e16a      	b.n	8000820 <__aeabi_dadd+0x524>
 800054a:	2501      	movs	r5, #1
 800054c:	2938      	cmp	r1, #56	@ 0x38
 800054e:	dd00      	ble.n	8000552 <__aeabi_dadd+0x256>
 8000550:	e722      	b.n	8000398 <__aeabi_dadd+0x9c>
 8000552:	000a      	movs	r2, r1
 8000554:	e70e      	b.n	8000374 <__aeabi_dadd+0x78>
 8000556:	4a4d      	ldr	r2, [pc, #308]	@ (800068c <__aeabi_dadd+0x390>)
 8000558:	1c7d      	adds	r5, r7, #1
 800055a:	4215      	tst	r5, r2
 800055c:	d000      	beq.n	8000560 <__aeabi_dadd+0x264>
 800055e:	e0d0      	b.n	8000702 <__aeabi_dadd+0x406>
 8000560:	0025      	movs	r5, r4
 8000562:	4662      	mov	r2, ip
 8000564:	4653      	mov	r3, sl
 8000566:	4305      	orrs	r5, r0
 8000568:	431a      	orrs	r2, r3
 800056a:	2f00      	cmp	r7, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_dadd+0x274>
 800056e:	e137      	b.n	80007e0 <__aeabi_dadd+0x4e4>
 8000570:	2d00      	cmp	r5, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_dadd+0x27a>
 8000574:	e1a8      	b.n	80008c8 <__aeabi_dadd+0x5cc>
 8000576:	2a00      	cmp	r2, #0
 8000578:	d100      	bne.n	800057c <__aeabi_dadd+0x280>
 800057a:	e16a      	b.n	8000852 <__aeabi_dadd+0x556>
 800057c:	4663      	mov	r3, ip
 800057e:	1ac5      	subs	r5, r0, r3
 8000580:	4653      	mov	r3, sl
 8000582:	1ae2      	subs	r2, r4, r3
 8000584:	42a8      	cmp	r0, r5
 8000586:	419b      	sbcs	r3, r3
 8000588:	425b      	negs	r3, r3
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	021a      	lsls	r2, r3, #8
 800058e:	d400      	bmi.n	8000592 <__aeabi_dadd+0x296>
 8000590:	e203      	b.n	800099a <__aeabi_dadd+0x69e>
 8000592:	4663      	mov	r3, ip
 8000594:	1a1d      	subs	r5, r3, r0
 8000596:	45ac      	cmp	ip, r5
 8000598:	4192      	sbcs	r2, r2
 800059a:	4653      	mov	r3, sl
 800059c:	4252      	negs	r2, r2
 800059e:	1b1c      	subs	r4, r3, r4
 80005a0:	000e      	movs	r6, r1
 80005a2:	4688      	mov	r8, r1
 80005a4:	1aa4      	subs	r4, r4, r2
 80005a6:	e723      	b.n	80003f0 <__aeabi_dadd+0xf4>
 80005a8:	4936      	ldr	r1, [pc, #216]	@ (8000684 <__aeabi_dadd+0x388>)
 80005aa:	428f      	cmp	r7, r1
 80005ac:	d070      	beq.n	8000690 <__aeabi_dadd+0x394>
 80005ae:	2501      	movs	r5, #1
 80005b0:	2a38      	cmp	r2, #56	@ 0x38
 80005b2:	dca8      	bgt.n	8000506 <__aeabi_dadd+0x20a>
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	4653      	mov	r3, sl
 80005b8:	0409      	lsls	r1, r1, #16
 80005ba:	430b      	orrs	r3, r1
 80005bc:	469a      	mov	sl, r3
 80005be:	e78e      	b.n	80004de <__aeabi_dadd+0x1e2>
 80005c0:	003c      	movs	r4, r7
 80005c2:	2500      	movs	r5, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	e731      	b.n	800042c <__aeabi_dadd+0x130>
 80005c8:	2307      	movs	r3, #7
 80005ca:	402b      	ands	r3, r5
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <__aeabi_dadd+0x2d6>
 80005d0:	e710      	b.n	80003f4 <__aeabi_dadd+0xf8>
 80005d2:	e093      	b.n	80006fc <__aeabi_dadd+0x400>
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d074      	beq.n	80006c2 <__aeabi_dadd+0x3c6>
 80005d8:	464a      	mov	r2, r9
 80005da:	1bd2      	subs	r2, r2, r7
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x2e6>
 80005e0:	e0c7      	b.n	8000772 <__aeabi_dadd+0x476>
 80005e2:	4928      	ldr	r1, [pc, #160]	@ (8000684 <__aeabi_dadd+0x388>)
 80005e4:	4589      	cmp	r9, r1
 80005e6:	d100      	bne.n	80005ea <__aeabi_dadd+0x2ee>
 80005e8:	e185      	b.n	80008f6 <__aeabi_dadd+0x5fa>
 80005ea:	2501      	movs	r5, #1
 80005ec:	2a38      	cmp	r2, #56	@ 0x38
 80005ee:	dc12      	bgt.n	8000616 <__aeabi_dadd+0x31a>
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	430c      	orrs	r4, r1
 80005f6:	2a1f      	cmp	r2, #31
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x300>
 80005fa:	e1ab      	b.n	8000954 <__aeabi_dadd+0x658>
 80005fc:	2120      	movs	r1, #32
 80005fe:	0025      	movs	r5, r4
 8000600:	1a89      	subs	r1, r1, r2
 8000602:	0007      	movs	r7, r0
 8000604:	4088      	lsls	r0, r1
 8000606:	408d      	lsls	r5, r1
 8000608:	40d7      	lsrs	r7, r2
 800060a:	1e41      	subs	r1, r0, #1
 800060c:	4188      	sbcs	r0, r1
 800060e:	40d4      	lsrs	r4, r2
 8000610:	433d      	orrs	r5, r7
 8000612:	4305      	orrs	r5, r0
 8000614:	44a2      	add	sl, r4
 8000616:	4465      	add	r5, ip
 8000618:	4565      	cmp	r5, ip
 800061a:	4192      	sbcs	r2, r2
 800061c:	4252      	negs	r2, r2
 800061e:	4452      	add	r2, sl
 8000620:	0014      	movs	r4, r2
 8000622:	464f      	mov	r7, r9
 8000624:	e774      	b.n	8000510 <__aeabi_dadd+0x214>
 8000626:	0028      	movs	r0, r5
 8000628:	f001 fc16 	bl	8001e58 <__clzsi2>
 800062c:	0003      	movs	r3, r0
 800062e:	3318      	adds	r3, #24
 8000630:	2b1f      	cmp	r3, #31
 8000632:	dc00      	bgt.n	8000636 <__aeabi_dadd+0x33a>
 8000634:	e6c2      	b.n	80003bc <__aeabi_dadd+0xc0>
 8000636:	002a      	movs	r2, r5
 8000638:	3808      	subs	r0, #8
 800063a:	4082      	lsls	r2, r0
 800063c:	429f      	cmp	r7, r3
 800063e:	dd00      	ble.n	8000642 <__aeabi_dadd+0x346>
 8000640:	e0a9      	b.n	8000796 <__aeabi_dadd+0x49a>
 8000642:	1bdb      	subs	r3, r3, r7
 8000644:	1c58      	adds	r0, r3, #1
 8000646:	281f      	cmp	r0, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_dadd+0x350>
 800064a:	e1ac      	b.n	80009a6 <__aeabi_dadd+0x6aa>
 800064c:	0015      	movs	r5, r2
 800064e:	3b1f      	subs	r3, #31
 8000650:	40dd      	lsrs	r5, r3
 8000652:	2820      	cmp	r0, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x366>
 8000656:	2340      	movs	r3, #64	@ 0x40
 8000658:	1a1b      	subs	r3, r3, r0
 800065a:	409a      	lsls	r2, r3
 800065c:	1e53      	subs	r3, r2, #1
 800065e:	419a      	sbcs	r2, r3
 8000660:	4315      	orrs	r5, r2
 8000662:	2307      	movs	r3, #7
 8000664:	2700      	movs	r7, #0
 8000666:	402b      	ands	r3, r5
 8000668:	e7b0      	b.n	80005cc <__aeabi_dadd+0x2d0>
 800066a:	08ed      	lsrs	r5, r5, #3
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <__aeabi_dadd+0x388>)
 800066e:	0762      	lsls	r2, r4, #29
 8000670:	432a      	orrs	r2, r5
 8000672:	08e4      	lsrs	r4, r4, #3
 8000674:	429f      	cmp	r7, r3
 8000676:	d00f      	beq.n	8000698 <__aeabi_dadd+0x39c>
 8000678:	0324      	lsls	r4, r4, #12
 800067a:	0b25      	lsrs	r5, r4, #12
 800067c:	057c      	lsls	r4, r7, #21
 800067e:	0d64      	lsrs	r4, r4, #21
 8000680:	e6d4      	b.n	800042c <__aeabi_dadd+0x130>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	000007ff 	.word	0x000007ff
 8000688:	ff7fffff 	.word	0xff7fffff
 800068c:	000007fe 	.word	0x000007fe
 8000690:	08c0      	lsrs	r0, r0, #3
 8000692:	0762      	lsls	r2, r4, #29
 8000694:	4302      	orrs	r2, r0
 8000696:	08e4      	lsrs	r4, r4, #3
 8000698:	0013      	movs	r3, r2
 800069a:	4323      	orrs	r3, r4
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x3a4>
 800069e:	e186      	b.n	80009ae <__aeabi_dadd+0x6b2>
 80006a0:	2580      	movs	r5, #128	@ 0x80
 80006a2:	032d      	lsls	r5, r5, #12
 80006a4:	4325      	orrs	r5, r4
 80006a6:	032d      	lsls	r5, r5, #12
 80006a8:	4cc3      	ldr	r4, [pc, #780]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80006aa:	0b2d      	lsrs	r5, r5, #12
 80006ac:	e6be      	b.n	800042c <__aeabi_dadd+0x130>
 80006ae:	4660      	mov	r0, ip
 80006b0:	4654      	mov	r4, sl
 80006b2:	000e      	movs	r6, r1
 80006b4:	0017      	movs	r7, r2
 80006b6:	08c5      	lsrs	r5, r0, #3
 80006b8:	e7d8      	b.n	800066c <__aeabi_dadd+0x370>
 80006ba:	4cc0      	ldr	r4, [pc, #768]	@ (80009bc <__aeabi_dadd+0x6c0>)
 80006bc:	1aff      	subs	r7, r7, r3
 80006be:	4014      	ands	r4, r2
 80006c0:	e696      	b.n	80003f0 <__aeabi_dadd+0xf4>
 80006c2:	4abf      	ldr	r2, [pc, #764]	@ (80009c0 <__aeabi_dadd+0x6c4>)
 80006c4:	1c79      	adds	r1, r7, #1
 80006c6:	4211      	tst	r1, r2
 80006c8:	d16b      	bne.n	80007a2 <__aeabi_dadd+0x4a6>
 80006ca:	0022      	movs	r2, r4
 80006cc:	4302      	orrs	r2, r0
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x3d8>
 80006d2:	e0db      	b.n	800088c <__aeabi_dadd+0x590>
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x3de>
 80006d8:	e12d      	b.n	8000936 <__aeabi_dadd+0x63a>
 80006da:	4662      	mov	r2, ip
 80006dc:	4653      	mov	r3, sl
 80006de:	431a      	orrs	r2, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x3e8>
 80006e2:	e0b6      	b.n	8000852 <__aeabi_dadd+0x556>
 80006e4:	4663      	mov	r3, ip
 80006e6:	18c5      	adds	r5, r0, r3
 80006e8:	4285      	cmp	r5, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4454      	add	r4, sl
 80006ee:	4240      	negs	r0, r0
 80006f0:	1824      	adds	r4, r4, r0
 80006f2:	0223      	lsls	r3, r4, #8
 80006f4:	d502      	bpl.n	80006fc <__aeabi_dadd+0x400>
 80006f6:	000f      	movs	r7, r1
 80006f8:	4bb0      	ldr	r3, [pc, #704]	@ (80009bc <__aeabi_dadd+0x6c0>)
 80006fa:	401c      	ands	r4, r3
 80006fc:	003a      	movs	r2, r7
 80006fe:	0028      	movs	r0, r5
 8000700:	e7d8      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 8000702:	4662      	mov	r2, ip
 8000704:	1a85      	subs	r5, r0, r2
 8000706:	42a8      	cmp	r0, r5
 8000708:	4192      	sbcs	r2, r2
 800070a:	4653      	mov	r3, sl
 800070c:	4252      	negs	r2, r2
 800070e:	4691      	mov	r9, r2
 8000710:	1ae3      	subs	r3, r4, r3
 8000712:	001a      	movs	r2, r3
 8000714:	464b      	mov	r3, r9
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	0013      	movs	r3, r2
 800071a:	4691      	mov	r9, r2
 800071c:	021a      	lsls	r2, r3, #8
 800071e:	d454      	bmi.n	80007ca <__aeabi_dadd+0x4ce>
 8000720:	464a      	mov	r2, r9
 8000722:	464c      	mov	r4, r9
 8000724:	432a      	orrs	r2, r5
 8000726:	d000      	beq.n	800072a <__aeabi_dadd+0x42e>
 8000728:	e640      	b.n	80003ac <__aeabi_dadd+0xb0>
 800072a:	2600      	movs	r6, #0
 800072c:	2400      	movs	r4, #0
 800072e:	2500      	movs	r5, #0
 8000730:	e67c      	b.n	800042c <__aeabi_dadd+0x130>
 8000732:	4da1      	ldr	r5, [pc, #644]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 8000734:	45a9      	cmp	r9, r5
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x43e>
 8000738:	e090      	b.n	800085c <__aeabi_dadd+0x560>
 800073a:	2501      	movs	r5, #1
 800073c:	2a38      	cmp	r2, #56	@ 0x38
 800073e:	dd00      	ble.n	8000742 <__aeabi_dadd+0x446>
 8000740:	e6ab      	b.n	800049a <__aeabi_dadd+0x19e>
 8000742:	2580      	movs	r5, #128	@ 0x80
 8000744:	042d      	lsls	r5, r5, #16
 8000746:	432c      	orrs	r4, r5
 8000748:	e695      	b.n	8000476 <__aeabi_dadd+0x17a>
 800074a:	0011      	movs	r1, r2
 800074c:	4655      	mov	r5, sl
 800074e:	3920      	subs	r1, #32
 8000750:	40cd      	lsrs	r5, r1
 8000752:	46a9      	mov	r9, r5
 8000754:	2a20      	cmp	r2, #32
 8000756:	d006      	beq.n	8000766 <__aeabi_dadd+0x46a>
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	4653      	mov	r3, sl
 800075c:	1a8a      	subs	r2, r1, r2
 800075e:	4093      	lsls	r3, r2
 8000760:	4662      	mov	r2, ip
 8000762:	431a      	orrs	r2, r3
 8000764:	4694      	mov	ip, r2
 8000766:	4665      	mov	r5, ip
 8000768:	1e6b      	subs	r3, r5, #1
 800076a:	419d      	sbcs	r5, r3
 800076c:	464b      	mov	r3, r9
 800076e:	431d      	orrs	r5, r3
 8000770:	e612      	b.n	8000398 <__aeabi_dadd+0x9c>
 8000772:	0021      	movs	r1, r4
 8000774:	4301      	orrs	r1, r0
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x47e>
 8000778:	e0c4      	b.n	8000904 <__aeabi_dadd+0x608>
 800077a:	1e51      	subs	r1, r2, #1
 800077c:	2a01      	cmp	r2, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x486>
 8000780:	e0fb      	b.n	800097a <__aeabi_dadd+0x67e>
 8000782:	4d8d      	ldr	r5, [pc, #564]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 8000784:	42aa      	cmp	r2, r5
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x48e>
 8000788:	e0b5      	b.n	80008f6 <__aeabi_dadd+0x5fa>
 800078a:	2501      	movs	r5, #1
 800078c:	2938      	cmp	r1, #56	@ 0x38
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0x496>
 8000790:	e741      	b.n	8000616 <__aeabi_dadd+0x31a>
 8000792:	000a      	movs	r2, r1
 8000794:	e72f      	b.n	80005f6 <__aeabi_dadd+0x2fa>
 8000796:	4c89      	ldr	r4, [pc, #548]	@ (80009bc <__aeabi_dadd+0x6c0>)
 8000798:	1aff      	subs	r7, r7, r3
 800079a:	4014      	ands	r4, r2
 800079c:	0762      	lsls	r2, r4, #29
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	e76a      	b.n	8000678 <__aeabi_dadd+0x37c>
 80007a2:	4a85      	ldr	r2, [pc, #532]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80007a4:	4291      	cmp	r1, r2
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x4ae>
 80007a8:	e0e3      	b.n	8000972 <__aeabi_dadd+0x676>
 80007aa:	4663      	mov	r3, ip
 80007ac:	18c2      	adds	r2, r0, r3
 80007ae:	4282      	cmp	r2, r0
 80007b0:	4180      	sbcs	r0, r0
 80007b2:	0023      	movs	r3, r4
 80007b4:	4240      	negs	r0, r0
 80007b6:	4453      	add	r3, sl
 80007b8:	181b      	adds	r3, r3, r0
 80007ba:	07dd      	lsls	r5, r3, #31
 80007bc:	085c      	lsrs	r4, r3, #1
 80007be:	2307      	movs	r3, #7
 80007c0:	0852      	lsrs	r2, r2, #1
 80007c2:	4315      	orrs	r5, r2
 80007c4:	000f      	movs	r7, r1
 80007c6:	402b      	ands	r3, r5
 80007c8:	e700      	b.n	80005cc <__aeabi_dadd+0x2d0>
 80007ca:	4663      	mov	r3, ip
 80007cc:	1a1d      	subs	r5, r3, r0
 80007ce:	45ac      	cmp	ip, r5
 80007d0:	4192      	sbcs	r2, r2
 80007d2:	4653      	mov	r3, sl
 80007d4:	4252      	negs	r2, r2
 80007d6:	1b1c      	subs	r4, r3, r4
 80007d8:	000e      	movs	r6, r1
 80007da:	4688      	mov	r8, r1
 80007dc:	1aa4      	subs	r4, r4, r2
 80007de:	e5e5      	b.n	80003ac <__aeabi_dadd+0xb0>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dadd+0x4ea>
 80007e4:	e091      	b.n	800090a <__aeabi_dadd+0x60e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d138      	bne.n	800085c <__aeabi_dadd+0x560>
 80007ea:	2480      	movs	r4, #128	@ 0x80
 80007ec:	2600      	movs	r6, #0
 80007ee:	0324      	lsls	r4, r4, #12
 80007f0:	e756      	b.n	80006a0 <__aeabi_dadd+0x3a4>
 80007f2:	4663      	mov	r3, ip
 80007f4:	18c5      	adds	r5, r0, r3
 80007f6:	4285      	cmp	r5, r0
 80007f8:	4180      	sbcs	r0, r0
 80007fa:	4454      	add	r4, sl
 80007fc:	4240      	negs	r0, r0
 80007fe:	1824      	adds	r4, r4, r0
 8000800:	2701      	movs	r7, #1
 8000802:	0223      	lsls	r3, r4, #8
 8000804:	d400      	bmi.n	8000808 <__aeabi_dadd+0x50c>
 8000806:	e6df      	b.n	80005c8 <__aeabi_dadd+0x2cc>
 8000808:	2702      	movs	r7, #2
 800080a:	e687      	b.n	800051c <__aeabi_dadd+0x220>
 800080c:	4663      	mov	r3, ip
 800080e:	1ac5      	subs	r5, r0, r3
 8000810:	42a8      	cmp	r0, r5
 8000812:	4180      	sbcs	r0, r0
 8000814:	4653      	mov	r3, sl
 8000816:	4240      	negs	r0, r0
 8000818:	1ae4      	subs	r4, r4, r3
 800081a:	2701      	movs	r7, #1
 800081c:	1a24      	subs	r4, r4, r0
 800081e:	e5c0      	b.n	80003a2 <__aeabi_dadd+0xa6>
 8000820:	0762      	lsls	r2, r4, #29
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	4302      	orrs	r2, r0
 8000826:	08e4      	lsrs	r4, r4, #3
 8000828:	e736      	b.n	8000698 <__aeabi_dadd+0x39c>
 800082a:	0011      	movs	r1, r2
 800082c:	4653      	mov	r3, sl
 800082e:	3920      	subs	r1, #32
 8000830:	40cb      	lsrs	r3, r1
 8000832:	4699      	mov	r9, r3
 8000834:	2a20      	cmp	r2, #32
 8000836:	d006      	beq.n	8000846 <__aeabi_dadd+0x54a>
 8000838:	2140      	movs	r1, #64	@ 0x40
 800083a:	4653      	mov	r3, sl
 800083c:	1a8a      	subs	r2, r1, r2
 800083e:	4093      	lsls	r3, r2
 8000840:	4662      	mov	r2, ip
 8000842:	431a      	orrs	r2, r3
 8000844:	4694      	mov	ip, r2
 8000846:	4665      	mov	r5, ip
 8000848:	1e6b      	subs	r3, r5, #1
 800084a:	419d      	sbcs	r5, r3
 800084c:	464b      	mov	r3, r9
 800084e:	431d      	orrs	r5, r3
 8000850:	e659      	b.n	8000506 <__aeabi_dadd+0x20a>
 8000852:	0762      	lsls	r2, r4, #29
 8000854:	08c0      	lsrs	r0, r0, #3
 8000856:	4302      	orrs	r2, r0
 8000858:	08e4      	lsrs	r4, r4, #3
 800085a:	e70d      	b.n	8000678 <__aeabi_dadd+0x37c>
 800085c:	4653      	mov	r3, sl
 800085e:	075a      	lsls	r2, r3, #29
 8000860:	4663      	mov	r3, ip
 8000862:	08d8      	lsrs	r0, r3, #3
 8000864:	4653      	mov	r3, sl
 8000866:	000e      	movs	r6, r1
 8000868:	4302      	orrs	r2, r0
 800086a:	08dc      	lsrs	r4, r3, #3
 800086c:	e714      	b.n	8000698 <__aeabi_dadd+0x39c>
 800086e:	0015      	movs	r5, r2
 8000870:	0026      	movs	r6, r4
 8000872:	3d20      	subs	r5, #32
 8000874:	40ee      	lsrs	r6, r5
 8000876:	2a20      	cmp	r2, #32
 8000878:	d003      	beq.n	8000882 <__aeabi_dadd+0x586>
 800087a:	2540      	movs	r5, #64	@ 0x40
 800087c:	1aaa      	subs	r2, r5, r2
 800087e:	4094      	lsls	r4, r2
 8000880:	4320      	orrs	r0, r4
 8000882:	1e42      	subs	r2, r0, #1
 8000884:	4190      	sbcs	r0, r2
 8000886:	0005      	movs	r5, r0
 8000888:	4335      	orrs	r5, r6
 800088a:	e606      	b.n	800049a <__aeabi_dadd+0x19e>
 800088c:	2a00      	cmp	r2, #0
 800088e:	d07c      	beq.n	800098a <__aeabi_dadd+0x68e>
 8000890:	4662      	mov	r2, ip
 8000892:	4653      	mov	r3, sl
 8000894:	08c0      	lsrs	r0, r0, #3
 8000896:	431a      	orrs	r2, r3
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x5a0>
 800089a:	e6fa      	b.n	8000692 <__aeabi_dadd+0x396>
 800089c:	0762      	lsls	r2, r4, #29
 800089e:	4310      	orrs	r0, r2
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	08e4      	lsrs	r4, r4, #3
 80008a4:	0312      	lsls	r2, r2, #12
 80008a6:	4214      	tst	r4, r2
 80008a8:	d008      	beq.n	80008bc <__aeabi_dadd+0x5c0>
 80008aa:	08d9      	lsrs	r1, r3, #3
 80008ac:	4211      	tst	r1, r2
 80008ae:	d105      	bne.n	80008bc <__aeabi_dadd+0x5c0>
 80008b0:	4663      	mov	r3, ip
 80008b2:	08d8      	lsrs	r0, r3, #3
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	075b      	lsls	r3, r3, #29
 80008ba:	4318      	orrs	r0, r3
 80008bc:	0f42      	lsrs	r2, r0, #29
 80008be:	00c0      	lsls	r0, r0, #3
 80008c0:	08c0      	lsrs	r0, r0, #3
 80008c2:	0752      	lsls	r2, r2, #29
 80008c4:	4302      	orrs	r2, r0
 80008c6:	e6e7      	b.n	8000698 <__aeabi_dadd+0x39c>
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x5d2>
 80008cc:	e72d      	b.n	800072a <__aeabi_dadd+0x42e>
 80008ce:	4663      	mov	r3, ip
 80008d0:	08d8      	lsrs	r0, r3, #3
 80008d2:	4653      	mov	r3, sl
 80008d4:	075a      	lsls	r2, r3, #29
 80008d6:	000e      	movs	r6, r1
 80008d8:	4302      	orrs	r2, r0
 80008da:	08dc      	lsrs	r4, r3, #3
 80008dc:	e6cc      	b.n	8000678 <__aeabi_dadd+0x37c>
 80008de:	4663      	mov	r3, ip
 80008e0:	1a1d      	subs	r5, r3, r0
 80008e2:	45ac      	cmp	ip, r5
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	4653      	mov	r3, sl
 80008e8:	4252      	negs	r2, r2
 80008ea:	1b1c      	subs	r4, r3, r4
 80008ec:	000e      	movs	r6, r1
 80008ee:	4688      	mov	r8, r1
 80008f0:	1aa4      	subs	r4, r4, r2
 80008f2:	3701      	adds	r7, #1
 80008f4:	e555      	b.n	80003a2 <__aeabi_dadd+0xa6>
 80008f6:	4663      	mov	r3, ip
 80008f8:	08d9      	lsrs	r1, r3, #3
 80008fa:	4653      	mov	r3, sl
 80008fc:	075a      	lsls	r2, r3, #29
 80008fe:	430a      	orrs	r2, r1
 8000900:	08dc      	lsrs	r4, r3, #3
 8000902:	e6c9      	b.n	8000698 <__aeabi_dadd+0x39c>
 8000904:	4660      	mov	r0, ip
 8000906:	4654      	mov	r4, sl
 8000908:	e6d4      	b.n	80006b4 <__aeabi_dadd+0x3b8>
 800090a:	08c0      	lsrs	r0, r0, #3
 800090c:	2a00      	cmp	r2, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x616>
 8000910:	e6bf      	b.n	8000692 <__aeabi_dadd+0x396>
 8000912:	0762      	lsls	r2, r4, #29
 8000914:	4310      	orrs	r0, r2
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	08e4      	lsrs	r4, r4, #3
 800091a:	0312      	lsls	r2, r2, #12
 800091c:	4214      	tst	r4, r2
 800091e:	d0cd      	beq.n	80008bc <__aeabi_dadd+0x5c0>
 8000920:	08dd      	lsrs	r5, r3, #3
 8000922:	4215      	tst	r5, r2
 8000924:	d1ca      	bne.n	80008bc <__aeabi_dadd+0x5c0>
 8000926:	4663      	mov	r3, ip
 8000928:	08d8      	lsrs	r0, r3, #3
 800092a:	4653      	mov	r3, sl
 800092c:	075b      	lsls	r3, r3, #29
 800092e:	000e      	movs	r6, r1
 8000930:	002c      	movs	r4, r5
 8000932:	4318      	orrs	r0, r3
 8000934:	e7c2      	b.n	80008bc <__aeabi_dadd+0x5c0>
 8000936:	4663      	mov	r3, ip
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	4653      	mov	r3, sl
 800093c:	075a      	lsls	r2, r3, #29
 800093e:	430a      	orrs	r2, r1
 8000940:	08dc      	lsrs	r4, r3, #3
 8000942:	e699      	b.n	8000678 <__aeabi_dadd+0x37c>
 8000944:	4663      	mov	r3, ip
 8000946:	08d8      	lsrs	r0, r3, #3
 8000948:	4653      	mov	r3, sl
 800094a:	075a      	lsls	r2, r3, #29
 800094c:	000e      	movs	r6, r1
 800094e:	4302      	orrs	r2, r0
 8000950:	08dc      	lsrs	r4, r3, #3
 8000952:	e6a1      	b.n	8000698 <__aeabi_dadd+0x39c>
 8000954:	0011      	movs	r1, r2
 8000956:	0027      	movs	r7, r4
 8000958:	3920      	subs	r1, #32
 800095a:	40cf      	lsrs	r7, r1
 800095c:	2a20      	cmp	r2, #32
 800095e:	d003      	beq.n	8000968 <__aeabi_dadd+0x66c>
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	1a8a      	subs	r2, r1, r2
 8000964:	4094      	lsls	r4, r2
 8000966:	4320      	orrs	r0, r4
 8000968:	1e42      	subs	r2, r0, #1
 800096a:	4190      	sbcs	r0, r2
 800096c:	0005      	movs	r5, r0
 800096e:	433d      	orrs	r5, r7
 8000970:	e651      	b.n	8000616 <__aeabi_dadd+0x31a>
 8000972:	000c      	movs	r4, r1
 8000974:	2500      	movs	r5, #0
 8000976:	2200      	movs	r2, #0
 8000978:	e558      	b.n	800042c <__aeabi_dadd+0x130>
 800097a:	4460      	add	r0, ip
 800097c:	4560      	cmp	r0, ip
 800097e:	4192      	sbcs	r2, r2
 8000980:	4454      	add	r4, sl
 8000982:	4252      	negs	r2, r2
 8000984:	0005      	movs	r5, r0
 8000986:	18a4      	adds	r4, r4, r2
 8000988:	e73a      	b.n	8000800 <__aeabi_dadd+0x504>
 800098a:	4653      	mov	r3, sl
 800098c:	075a      	lsls	r2, r3, #29
 800098e:	4663      	mov	r3, ip
 8000990:	08d9      	lsrs	r1, r3, #3
 8000992:	4653      	mov	r3, sl
 8000994:	430a      	orrs	r2, r1
 8000996:	08dc      	lsrs	r4, r3, #3
 8000998:	e67e      	b.n	8000698 <__aeabi_dadd+0x39c>
 800099a:	001a      	movs	r2, r3
 800099c:	001c      	movs	r4, r3
 800099e:	432a      	orrs	r2, r5
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x6a8>
 80009a2:	e6ab      	b.n	80006fc <__aeabi_dadd+0x400>
 80009a4:	e6c1      	b.n	800072a <__aeabi_dadd+0x42e>
 80009a6:	2120      	movs	r1, #32
 80009a8:	2500      	movs	r5, #0
 80009aa:	1a09      	subs	r1, r1, r0
 80009ac:	e519      	b.n	80003e2 <__aeabi_dadd+0xe6>
 80009ae:	2200      	movs	r2, #0
 80009b0:	2500      	movs	r5, #0
 80009b2:	4c01      	ldr	r4, [pc, #4]	@ (80009b8 <__aeabi_dadd+0x6bc>)
 80009b4:	e53a      	b.n	800042c <__aeabi_dadd+0x130>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	000007ff 	.word	0x000007ff
 80009bc:	ff7fffff 	.word	0xff7fffff
 80009c0:	000007fe 	.word	0x000007fe

080009c4 <__aeabi_ddiv>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	46de      	mov	lr, fp
 80009c8:	4645      	mov	r5, r8
 80009ca:	4657      	mov	r7, sl
 80009cc:	464e      	mov	r6, r9
 80009ce:	b5e0      	push	{r5, r6, r7, lr}
 80009d0:	b087      	sub	sp, #28
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	030b      	lsls	r3, r1, #12
 80009d8:	0b1b      	lsrs	r3, r3, #12
 80009da:	469b      	mov	fp, r3
 80009dc:	0fca      	lsrs	r2, r1, #31
 80009de:	004b      	lsls	r3, r1, #1
 80009e0:	0004      	movs	r4, r0
 80009e2:	4680      	mov	r8, r0
 80009e4:	0d5b      	lsrs	r3, r3, #21
 80009e6:	9202      	str	r2, [sp, #8]
 80009e8:	d100      	bne.n	80009ec <__aeabi_ddiv+0x28>
 80009ea:	e16a      	b.n	8000cc2 <__aeabi_ddiv+0x2fe>
 80009ec:	4ad4      	ldr	r2, [pc, #848]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x30>
 80009f2:	e18c      	b.n	8000d0e <__aeabi_ddiv+0x34a>
 80009f4:	4659      	mov	r1, fp
 80009f6:	0f42      	lsrs	r2, r0, #29
 80009f8:	00c9      	lsls	r1, r1, #3
 80009fa:	430a      	orrs	r2, r1
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0409      	lsls	r1, r1, #16
 8000a00:	4311      	orrs	r1, r2
 8000a02:	00c2      	lsls	r2, r0, #3
 8000a04:	4690      	mov	r8, r2
 8000a06:	4acf      	ldr	r2, [pc, #828]	@ (8000d44 <__aeabi_ddiv+0x380>)
 8000a08:	4689      	mov	r9, r1
 8000a0a:	4692      	mov	sl, r2
 8000a0c:	449a      	add	sl, r3
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2400      	movs	r4, #0
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	9e00      	ldr	r6, [sp, #0]
 8000a16:	9f01      	ldr	r7, [sp, #4]
 8000a18:	033b      	lsls	r3, r7, #12
 8000a1a:	0b1b      	lsrs	r3, r3, #12
 8000a1c:	469b      	mov	fp, r3
 8000a1e:	007b      	lsls	r3, r7, #1
 8000a20:	0030      	movs	r0, r6
 8000a22:	0d5b      	lsrs	r3, r3, #21
 8000a24:	0ffd      	lsrs	r5, r7, #31
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_ddiv+0x68>
 8000a2a:	e128      	b.n	8000c7e <__aeabi_ddiv+0x2ba>
 8000a2c:	4ac4      	ldr	r2, [pc, #784]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d100      	bne.n	8000a34 <__aeabi_ddiv+0x70>
 8000a32:	e177      	b.n	8000d24 <__aeabi_ddiv+0x360>
 8000a34:	4659      	mov	r1, fp
 8000a36:	0f72      	lsrs	r2, r6, #29
 8000a38:	00c9      	lsls	r1, r1, #3
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0409      	lsls	r1, r1, #16
 8000a40:	4311      	orrs	r1, r2
 8000a42:	468b      	mov	fp, r1
 8000a44:	49bf      	ldr	r1, [pc, #764]	@ (8000d44 <__aeabi_ddiv+0x380>)
 8000a46:	00f2      	lsls	r2, r6, #3
 8000a48:	468c      	mov	ip, r1
 8000a4a:	4651      	mov	r1, sl
 8000a4c:	4463      	add	r3, ip
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	469a      	mov	sl, r3
 8000a52:	2300      	movs	r3, #0
 8000a54:	9e02      	ldr	r6, [sp, #8]
 8000a56:	406e      	eors	r6, r5
 8000a58:	2c0f      	cmp	r4, #15
 8000a5a:	d827      	bhi.n	8000aac <__aeabi_ddiv+0xe8>
 8000a5c:	49ba      	ldr	r1, [pc, #744]	@ (8000d48 <__aeabi_ddiv+0x384>)
 8000a5e:	00a4      	lsls	r4, r4, #2
 8000a60:	5909      	ldr	r1, [r1, r4]
 8000a62:	468f      	mov	pc, r1
 8000a64:	46cb      	mov	fp, r9
 8000a66:	4642      	mov	r2, r8
 8000a68:	9e02      	ldr	r6, [sp, #8]
 8000a6a:	9b03      	ldr	r3, [sp, #12]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d016      	beq.n	8000a9e <__aeabi_ddiv+0xda>
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_ddiv+0xb2>
 8000a74:	e2a6      	b.n	8000fc4 <__aeabi_ddiv+0x600>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d000      	beq.n	8000a7c <__aeabi_ddiv+0xb8>
 8000a7a:	e0df      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2400      	movs	r4, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	051b      	lsls	r3, r3, #20
 8000a86:	4323      	orrs	r3, r4
 8000a88:	07f6      	lsls	r6, r6, #31
 8000a8a:	4333      	orrs	r3, r6
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	0019      	movs	r1, r3
 8000a90:	b007      	add	sp, #28
 8000a92:	bcf0      	pop	{r4, r5, r6, r7}
 8000a94:	46bb      	mov	fp, r7
 8000a96:	46b2      	mov	sl, r6
 8000a98:	46a9      	mov	r9, r5
 8000a9a:	46a0      	mov	r8, r4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4ba6      	ldr	r3, [pc, #664]	@ (8000d40 <__aeabi_ddiv+0x37c>)
 8000aa6:	e7ed      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000aa8:	002e      	movs	r6, r5
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_ddiv+0xa8>
 8000aac:	45cb      	cmp	fp, r9
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_ddiv+0xee>
 8000ab0:	e1d4      	b.n	8000e5c <__aeabi_ddiv+0x498>
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_ddiv+0xf2>
 8000ab4:	e1cf      	b.n	8000e56 <__aeabi_ddiv+0x492>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	425b      	negs	r3, r3
 8000aba:	469c      	mov	ip, r3
 8000abc:	4644      	mov	r4, r8
 8000abe:	4648      	mov	r0, r9
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	44e2      	add	sl, ip
 8000ac4:	465b      	mov	r3, fp
 8000ac6:	0e15      	lsrs	r5, r2, #24
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	431d      	orrs	r5, r3
 8000acc:	0c19      	lsrs	r1, r3, #16
 8000ace:	042b      	lsls	r3, r5, #16
 8000ad0:	0212      	lsls	r2, r2, #8
 8000ad2:	9500      	str	r5, [sp, #0]
 8000ad4:	0c1d      	lsrs	r5, r3, #16
 8000ad6:	4691      	mov	r9, r2
 8000ad8:	9102      	str	r1, [sp, #8]
 8000ada:	9503      	str	r5, [sp, #12]
 8000adc:	f7ff fb9a 	bl	8000214 <__aeabi_uidivmod>
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	436a      	muls	r2, r5
 8000ae4:	040b      	lsls	r3, r1, #16
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	4680      	mov	r8, r0
 8000aea:	4319      	orrs	r1, r3
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d909      	bls.n	8000b04 <__aeabi_ddiv+0x140>
 8000af0:	9d00      	ldr	r5, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	46ac      	mov	ip, r5
 8000af6:	425b      	negs	r3, r3
 8000af8:	4461      	add	r1, ip
 8000afa:	469c      	mov	ip, r3
 8000afc:	44e0      	add	r8, ip
 8000afe:	428d      	cmp	r5, r1
 8000b00:	d800      	bhi.n	8000b04 <__aeabi_ddiv+0x140>
 8000b02:	e1fb      	b.n	8000efc <__aeabi_ddiv+0x538>
 8000b04:	1a88      	subs	r0, r1, r2
 8000b06:	9902      	ldr	r1, [sp, #8]
 8000b08:	f7ff fb84 	bl	8000214 <__aeabi_uidivmod>
 8000b0c:	9a03      	ldr	r2, [sp, #12]
 8000b0e:	0424      	lsls	r4, r4, #16
 8000b10:	4342      	muls	r2, r0
 8000b12:	0409      	lsls	r1, r1, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0003      	movs	r3, r0
 8000b18:	430c      	orrs	r4, r1
 8000b1a:	42a2      	cmp	r2, r4
 8000b1c:	d906      	bls.n	8000b2c <__aeabi_ddiv+0x168>
 8000b1e:	9900      	ldr	r1, [sp, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	468c      	mov	ip, r1
 8000b24:	4464      	add	r4, ip
 8000b26:	42a1      	cmp	r1, r4
 8000b28:	d800      	bhi.n	8000b2c <__aeabi_ddiv+0x168>
 8000b2a:	e1e1      	b.n	8000ef0 <__aeabi_ddiv+0x52c>
 8000b2c:	1aa0      	subs	r0, r4, r2
 8000b2e:	4642      	mov	r2, r8
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4693      	mov	fp, r2
 8000b36:	464b      	mov	r3, r9
 8000b38:	4659      	mov	r1, fp
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	001d      	movs	r5, r3
 8000b3e:	9304      	str	r3, [sp, #16]
 8000b40:	040b      	lsls	r3, r1, #16
 8000b42:	4649      	mov	r1, r9
 8000b44:	0409      	lsls	r1, r1, #16
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	000c      	movs	r4, r1
 8000b4a:	0c1b      	lsrs	r3, r3, #16
 8000b4c:	435c      	muls	r4, r3
 8000b4e:	0c12      	lsrs	r2, r2, #16
 8000b50:	436b      	muls	r3, r5
 8000b52:	4688      	mov	r8, r1
 8000b54:	4351      	muls	r1, r2
 8000b56:	436a      	muls	r2, r5
 8000b58:	0c25      	lsrs	r5, r4, #16
 8000b5a:	46ac      	mov	ip, r5
 8000b5c:	185b      	adds	r3, r3, r1
 8000b5e:	4463      	add	r3, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d903      	bls.n	8000b6c <__aeabi_ddiv+0x1a8>
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	0249      	lsls	r1, r1, #9
 8000b68:	468c      	mov	ip, r1
 8000b6a:	4462      	add	r2, ip
 8000b6c:	0c19      	lsrs	r1, r3, #16
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	0c24      	lsrs	r4, r4, #16
 8000b74:	188a      	adds	r2, r1, r2
 8000b76:	191c      	adds	r4, r3, r4
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d302      	bcc.n	8000b82 <__aeabi_ddiv+0x1be>
 8000b7c:	d116      	bne.n	8000bac <__aeabi_ddiv+0x1e8>
 8000b7e:	42a7      	cmp	r7, r4
 8000b80:	d214      	bcs.n	8000bac <__aeabi_ddiv+0x1e8>
 8000b82:	465b      	mov	r3, fp
 8000b84:	9d00      	ldr	r5, [sp, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	444f      	add	r7, r9
 8000b8a:	9305      	str	r3, [sp, #20]
 8000b8c:	454f      	cmp	r7, r9
 8000b8e:	419b      	sbcs	r3, r3
 8000b90:	46ac      	mov	ip, r5
 8000b92:	425b      	negs	r3, r3
 8000b94:	4463      	add	r3, ip
 8000b96:	18c0      	adds	r0, r0, r3
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	d300      	bcc.n	8000b9e <__aeabi_ddiv+0x1da>
 8000b9c:	e1a1      	b.n	8000ee2 <__aeabi_ddiv+0x51e>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	d900      	bls.n	8000ba4 <__aeabi_ddiv+0x1e0>
 8000ba2:	e1f6      	b.n	8000f92 <__aeabi_ddiv+0x5ce>
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000ba6:	e1f1      	b.n	8000f8c <__aeabi_ddiv+0x5c8>
 8000ba8:	9b05      	ldr	r3, [sp, #20]
 8000baa:	469b      	mov	fp, r3
 8000bac:	1b3c      	subs	r4, r7, r4
 8000bae:	42a7      	cmp	r7, r4
 8000bb0:	41bf      	sbcs	r7, r7
 8000bb2:	9d00      	ldr	r5, [sp, #0]
 8000bb4:	1a80      	subs	r0, r0, r2
 8000bb6:	427f      	negs	r7, r7
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_ddiv+0x1fc>
 8000bbe:	e1d0      	b.n	8000f62 <__aeabi_ddiv+0x59e>
 8000bc0:	9902      	ldr	r1, [sp, #8]
 8000bc2:	f7ff fb27 	bl	8000214 <__aeabi_uidivmod>
 8000bc6:	9a03      	ldr	r2, [sp, #12]
 8000bc8:	040b      	lsls	r3, r1, #16
 8000bca:	4342      	muls	r2, r0
 8000bcc:	0c21      	lsrs	r1, r4, #16
 8000bce:	0007      	movs	r7, r0
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	428a      	cmp	r2, r1
 8000bd4:	d900      	bls.n	8000bd8 <__aeabi_ddiv+0x214>
 8000bd6:	e178      	b.n	8000eca <__aeabi_ddiv+0x506>
 8000bd8:	1a88      	subs	r0, r1, r2
 8000bda:	9902      	ldr	r1, [sp, #8]
 8000bdc:	f7ff fb1a 	bl	8000214 <__aeabi_uidivmod>
 8000be0:	9a03      	ldr	r2, [sp, #12]
 8000be2:	0424      	lsls	r4, r4, #16
 8000be4:	4342      	muls	r2, r0
 8000be6:	0409      	lsls	r1, r1, #16
 8000be8:	0c24      	lsrs	r4, r4, #16
 8000bea:	0003      	movs	r3, r0
 8000bec:	430c      	orrs	r4, r1
 8000bee:	42a2      	cmp	r2, r4
 8000bf0:	d900      	bls.n	8000bf4 <__aeabi_ddiv+0x230>
 8000bf2:	e15d      	b.n	8000eb0 <__aeabi_ddiv+0x4ec>
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	1aa4      	subs	r4, r4, r2
 8000bf8:	043a      	lsls	r2, r7, #16
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	9d04      	ldr	r5, [sp, #16]
 8000bfe:	0413      	lsls	r3, r2, #16
 8000c00:	0c1b      	lsrs	r3, r3, #16
 8000c02:	4359      	muls	r1, r3
 8000c04:	4647      	mov	r7, r8
 8000c06:	436b      	muls	r3, r5
 8000c08:	469c      	mov	ip, r3
 8000c0a:	0c10      	lsrs	r0, r2, #16
 8000c0c:	4347      	muls	r7, r0
 8000c0e:	0c0b      	lsrs	r3, r1, #16
 8000c10:	44bc      	add	ip, r7
 8000c12:	4463      	add	r3, ip
 8000c14:	4368      	muls	r0, r5
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d903      	bls.n	8000c22 <__aeabi_ddiv+0x25e>
 8000c1a:	2580      	movs	r5, #128	@ 0x80
 8000c1c:	026d      	lsls	r5, r5, #9
 8000c1e:	46ac      	mov	ip, r5
 8000c20:	4460      	add	r0, ip
 8000c22:	0c1f      	lsrs	r7, r3, #16
 8000c24:	0409      	lsls	r1, r1, #16
 8000c26:	041b      	lsls	r3, r3, #16
 8000c28:	0c09      	lsrs	r1, r1, #16
 8000c2a:	183f      	adds	r7, r7, r0
 8000c2c:	185b      	adds	r3, r3, r1
 8000c2e:	42bc      	cmp	r4, r7
 8000c30:	d200      	bcs.n	8000c34 <__aeabi_ddiv+0x270>
 8000c32:	e102      	b.n	8000e3a <__aeabi_ddiv+0x476>
 8000c34:	d100      	bne.n	8000c38 <__aeabi_ddiv+0x274>
 8000c36:	e0fd      	b.n	8000e34 <__aeabi_ddiv+0x470>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	4b43      	ldr	r3, [pc, #268]	@ (8000d4c <__aeabi_ddiv+0x388>)
 8000c3e:	4453      	add	r3, sl
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_ddiv+0x282>
 8000c44:	e0ae      	b.n	8000da4 <__aeabi_ddiv+0x3e0>
 8000c46:	0751      	lsls	r1, r2, #29
 8000c48:	d000      	beq.n	8000c4c <__aeabi_ddiv+0x288>
 8000c4a:	e198      	b.n	8000f7e <__aeabi_ddiv+0x5ba>
 8000c4c:	4659      	mov	r1, fp
 8000c4e:	01c9      	lsls	r1, r1, #7
 8000c50:	d506      	bpl.n	8000c60 <__aeabi_ddiv+0x29c>
 8000c52:	4659      	mov	r1, fp
 8000c54:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <__aeabi_ddiv+0x38c>)
 8000c56:	4019      	ands	r1, r3
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	468b      	mov	fp, r1
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4453      	add	r3, sl
 8000c60:	493c      	ldr	r1, [pc, #240]	@ (8000d54 <__aeabi_ddiv+0x390>)
 8000c62:	428b      	cmp	r3, r1
 8000c64:	dd00      	ble.n	8000c68 <__aeabi_ddiv+0x2a4>
 8000c66:	e71a      	b.n	8000a9e <__aeabi_ddiv+0xda>
 8000c68:	4659      	mov	r1, fp
 8000c6a:	08d2      	lsrs	r2, r2, #3
 8000c6c:	0749      	lsls	r1, r1, #29
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	465a      	mov	r2, fp
 8000c72:	055b      	lsls	r3, r3, #21
 8000c74:	0254      	lsls	r4, r2, #9
 8000c76:	4688      	mov	r8, r1
 8000c78:	0b24      	lsrs	r4, r4, #12
 8000c7a:	0d5b      	lsrs	r3, r3, #21
 8000c7c:	e702      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000c7e:	465a      	mov	r2, fp
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c4>
 8000c86:	e07e      	b.n	8000d86 <__aeabi_ddiv+0x3c2>
 8000c88:	465b      	mov	r3, fp
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x2cc>
 8000c8e:	e100      	b.n	8000e92 <__aeabi_ddiv+0x4ce>
 8000c90:	4658      	mov	r0, fp
 8000c92:	f001 f8e1 	bl	8001e58 <__clzsi2>
 8000c96:	0002      	movs	r2, r0
 8000c98:	0003      	movs	r3, r0
 8000c9a:	3a0b      	subs	r2, #11
 8000c9c:	271d      	movs	r7, #29
 8000c9e:	9e00      	ldr	r6, [sp, #0]
 8000ca0:	1aba      	subs	r2, r7, r2
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	4658      	mov	r0, fp
 8000ca6:	40d6      	lsrs	r6, r2
 8000ca8:	3908      	subs	r1, #8
 8000caa:	4088      	lsls	r0, r1
 8000cac:	0032      	movs	r2, r6
 8000cae:	4302      	orrs	r2, r0
 8000cb0:	4693      	mov	fp, r2
 8000cb2:	9a00      	ldr	r2, [sp, #0]
 8000cb4:	408a      	lsls	r2, r1
 8000cb6:	4928      	ldr	r1, [pc, #160]	@ (8000d58 <__aeabi_ddiv+0x394>)
 8000cb8:	4453      	add	r3, sl
 8000cba:	468a      	mov	sl, r1
 8000cbc:	449a      	add	sl, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e6c8      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000cc2:	465b      	mov	r3, fp
 8000cc4:	4303      	orrs	r3, r0
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	d056      	beq.n	8000d78 <__aeabi_ddiv+0x3b4>
 8000cca:	465b      	mov	r3, fp
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_ddiv+0x30e>
 8000cd0:	e0cd      	b.n	8000e6e <__aeabi_ddiv+0x4aa>
 8000cd2:	4658      	mov	r0, fp
 8000cd4:	f001 f8c0 	bl	8001e58 <__clzsi2>
 8000cd8:	230b      	movs	r3, #11
 8000cda:	425b      	negs	r3, r3
 8000cdc:	469c      	mov	ip, r3
 8000cde:	0002      	movs	r2, r0
 8000ce0:	4484      	add	ip, r0
 8000ce2:	4666      	mov	r6, ip
 8000ce4:	231d      	movs	r3, #29
 8000ce6:	1b9b      	subs	r3, r3, r6
 8000ce8:	0026      	movs	r6, r4
 8000cea:	0011      	movs	r1, r2
 8000cec:	4658      	mov	r0, fp
 8000cee:	40de      	lsrs	r6, r3
 8000cf0:	3908      	subs	r1, #8
 8000cf2:	4088      	lsls	r0, r1
 8000cf4:	0033      	movs	r3, r6
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	4699      	mov	r9, r3
 8000cfa:	0023      	movs	r3, r4
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <__aeabi_ddiv+0x398>)
 8000d02:	2400      	movs	r4, #0
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	469a      	mov	sl, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	e682      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d0e:	465a      	mov	r2, fp
 8000d10:	4302      	orrs	r2, r0
 8000d12:	4691      	mov	r9, r2
 8000d14:	d12a      	bne.n	8000d6c <__aeabi_ddiv+0x3a8>
 8000d16:	2200      	movs	r2, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	2408      	movs	r4, #8
 8000d20:	9303      	str	r3, [sp, #12]
 8000d22:	e677      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d24:	465a      	mov	r2, fp
 8000d26:	9b00      	ldr	r3, [sp, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <__aeabi_ddiv+0x39c>)
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	44e2      	add	sl, ip
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d117      	bne.n	8000d64 <__aeabi_ddiv+0x3a0>
 8000d34:	2302      	movs	r3, #2
 8000d36:	431c      	orrs	r4, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	469b      	mov	fp, r3
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	e689      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d40:	000007ff 	.word	0x000007ff
 8000d44:	fffffc01 	.word	0xfffffc01
 8000d48:	0800cc18 	.word	0x0800cc18
 8000d4c:	000003ff 	.word	0x000003ff
 8000d50:	feffffff 	.word	0xfeffffff
 8000d54:	000007fe 	.word	0x000007fe
 8000d58:	000003f3 	.word	0x000003f3
 8000d5c:	fffffc0d 	.word	0xfffffc0d
 8000d60:	fffff801 	.word	0xfffff801
 8000d64:	2303      	movs	r3, #3
 8000d66:	0032      	movs	r2, r6
 8000d68:	431c      	orrs	r4, r3
 8000d6a:	e673      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	2303      	movs	r3, #3
 8000d70:	46d9      	mov	r9, fp
 8000d72:	240c      	movs	r4, #12
 8000d74:	9303      	str	r3, [sp, #12]
 8000d76:	e64d      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	2404      	movs	r4, #4
 8000d82:	9303      	str	r3, [sp, #12]
 8000d84:	e646      	b.n	8000a14 <__aeabi_ddiv+0x50>
 8000d86:	2301      	movs	r3, #1
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	469b      	mov	fp, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	e660      	b.n	8000a54 <__aeabi_ddiv+0x90>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2480      	movs	r4, #128	@ 0x80
 8000d96:	4698      	mov	r8, r3
 8000d98:	2600      	movs	r6, #0
 8000d9a:	4b92      	ldr	r3, [pc, #584]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000d9c:	0324      	lsls	r4, r4, #12
 8000d9e:	e671      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000da0:	2201      	movs	r2, #1
 8000da2:	4252      	negs	r2, r2
 8000da4:	2101      	movs	r1, #1
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	2938      	cmp	r1, #56	@ 0x38
 8000daa:	dd00      	ble.n	8000dae <__aeabi_ddiv+0x3ea>
 8000dac:	e666      	b.n	8000a7c <__aeabi_ddiv+0xb8>
 8000dae:	291f      	cmp	r1, #31
 8000db0:	dc00      	bgt.n	8000db4 <__aeabi_ddiv+0x3f0>
 8000db2:	e0ab      	b.n	8000f0c <__aeabi_ddiv+0x548>
 8000db4:	201f      	movs	r0, #31
 8000db6:	4240      	negs	r0, r0
 8000db8:	1ac3      	subs	r3, r0, r3
 8000dba:	4658      	mov	r0, fp
 8000dbc:	40d8      	lsrs	r0, r3
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	2920      	cmp	r1, #32
 8000dc2:	d004      	beq.n	8000dce <__aeabi_ddiv+0x40a>
 8000dc4:	4658      	mov	r0, fp
 8000dc6:	4988      	ldr	r1, [pc, #544]	@ (8000fe8 <__aeabi_ddiv+0x624>)
 8000dc8:	4451      	add	r1, sl
 8000dca:	4088      	lsls	r0, r1
 8000dcc:	4302      	orrs	r2, r0
 8000dce:	1e51      	subs	r1, r2, #1
 8000dd0:	418a      	sbcs	r2, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	2400      	movs	r4, #0
 8000dda:	4011      	ands	r1, r2
 8000ddc:	4213      	tst	r3, r2
 8000dde:	d00c      	beq.n	8000dfa <__aeabi_ddiv+0x436>
 8000de0:	230f      	movs	r3, #15
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x426>
 8000de8:	e0f9      	b.n	8000fde <__aeabi_ddiv+0x61a>
 8000dea:	1d11      	adds	r1, r2, #4
 8000dec:	4291      	cmp	r1, r2
 8000dee:	419b      	sbcs	r3, r3
 8000df0:	000a      	movs	r2, r1
 8000df2:	425b      	negs	r3, r3
 8000df4:	0759      	lsls	r1, r3, #29
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	0b1c      	lsrs	r4, r3, #12
 8000dfa:	08d2      	lsrs	r2, r2, #3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4690      	mov	r8, r2
 8000e00:	2300      	movs	r3, #0
 8000e02:	e63f      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e04:	2480      	movs	r4, #128	@ 0x80
 8000e06:	464b      	mov	r3, r9
 8000e08:	0324      	lsls	r4, r4, #12
 8000e0a:	4223      	tst	r3, r4
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_ddiv+0x45e>
 8000e0e:	465b      	mov	r3, fp
 8000e10:	4223      	tst	r3, r4
 8000e12:	d106      	bne.n	8000e22 <__aeabi_ddiv+0x45e>
 8000e14:	431c      	orrs	r4, r3
 8000e16:	0324      	lsls	r4, r4, #12
 8000e18:	002e      	movs	r6, r5
 8000e1a:	4690      	mov	r8, r2
 8000e1c:	4b71      	ldr	r3, [pc, #452]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	e630      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e22:	2480      	movs	r4, #128	@ 0x80
 8000e24:	464b      	mov	r3, r9
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	0324      	lsls	r4, r4, #12
 8000e2c:	9e02      	ldr	r6, [sp, #8]
 8000e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000e30:	0b24      	lsrs	r4, r4, #12
 8000e32:	e627      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x476>
 8000e38:	e700      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000e3a:	9800      	ldr	r0, [sp, #0]
 8000e3c:	1e51      	subs	r1, r2, #1
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4464      	add	r4, ip
 8000e42:	4284      	cmp	r4, r0
 8000e44:	d200      	bcs.n	8000e48 <__aeabi_ddiv+0x484>
 8000e46:	e084      	b.n	8000f52 <__aeabi_ddiv+0x58e>
 8000e48:	42bc      	cmp	r4, r7
 8000e4a:	d200      	bcs.n	8000e4e <__aeabi_ddiv+0x48a>
 8000e4c:	e0ae      	b.n	8000fac <__aeabi_ddiv+0x5e8>
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0x48e>
 8000e50:	e0c1      	b.n	8000fd6 <__aeabi_ddiv+0x612>
 8000e52:	000a      	movs	r2, r1
 8000e54:	e6f0      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000e56:	4542      	cmp	r2, r8
 8000e58:	d900      	bls.n	8000e5c <__aeabi_ddiv+0x498>
 8000e5a:	e62c      	b.n	8000ab6 <__aeabi_ddiv+0xf2>
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	07dc      	lsls	r4, r3, #31
 8000e60:	0858      	lsrs	r0, r3, #1
 8000e62:	4643      	mov	r3, r8
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	431c      	orrs	r4, r3
 8000e68:	4643      	mov	r3, r8
 8000e6a:	07df      	lsls	r7, r3, #31
 8000e6c:	e62a      	b.n	8000ac4 <__aeabi_ddiv+0x100>
 8000e6e:	f000 fff3 	bl	8001e58 <__clzsi2>
 8000e72:	2315      	movs	r3, #21
 8000e74:	469c      	mov	ip, r3
 8000e76:	4484      	add	ip, r0
 8000e78:	0002      	movs	r2, r0
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	3220      	adds	r2, #32
 8000e7e:	2b1c      	cmp	r3, #28
 8000e80:	dc00      	bgt.n	8000e84 <__aeabi_ddiv+0x4c0>
 8000e82:	e72e      	b.n	8000ce2 <__aeabi_ddiv+0x31e>
 8000e84:	0023      	movs	r3, r4
 8000e86:	3808      	subs	r0, #8
 8000e88:	4083      	lsls	r3, r0
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4698      	mov	r8, r3
 8000e90:	e736      	b.n	8000d00 <__aeabi_ddiv+0x33c>
 8000e92:	f000 ffe1 	bl	8001e58 <__clzsi2>
 8000e96:	0002      	movs	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	3215      	adds	r2, #21
 8000e9c:	3320      	adds	r3, #32
 8000e9e:	2a1c      	cmp	r2, #28
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_ddiv+0x4e0>
 8000ea2:	e6fb      	b.n	8000c9c <__aeabi_ddiv+0x2d8>
 8000ea4:	9900      	ldr	r1, [sp, #0]
 8000ea6:	3808      	subs	r0, #8
 8000ea8:	4081      	lsls	r1, r0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	468b      	mov	fp, r1
 8000eae:	e702      	b.n	8000cb6 <__aeabi_ddiv+0x2f2>
 8000eb0:	9900      	ldr	r1, [sp, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	4464      	add	r4, ip
 8000eb8:	42a1      	cmp	r1, r4
 8000eba:	d900      	bls.n	8000ebe <__aeabi_ddiv+0x4fa>
 8000ebc:	e69a      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000ebe:	42a2      	cmp	r2, r4
 8000ec0:	d800      	bhi.n	8000ec4 <__aeabi_ddiv+0x500>
 8000ec2:	e697      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000ec4:	1e83      	subs	r3, r0, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	e694      	b.n	8000bf4 <__aeabi_ddiv+0x230>
 8000eca:	46ac      	mov	ip, r5
 8000ecc:	4461      	add	r1, ip
 8000ece:	3f01      	subs	r7, #1
 8000ed0:	428d      	cmp	r5, r1
 8000ed2:	d900      	bls.n	8000ed6 <__aeabi_ddiv+0x512>
 8000ed4:	e680      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000ed6:	428a      	cmp	r2, r1
 8000ed8:	d800      	bhi.n	8000edc <__aeabi_ddiv+0x518>
 8000eda:	e67d      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000edc:	1e87      	subs	r7, r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e67a      	b.n	8000bd8 <__aeabi_ddiv+0x214>
 8000ee2:	4285      	cmp	r5, r0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_ddiv+0x524>
 8000ee6:	e65f      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000ee8:	45b9      	cmp	r9, r7
 8000eea:	d900      	bls.n	8000eee <__aeabi_ddiv+0x52a>
 8000eec:	e65c      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000eee:	e656      	b.n	8000b9e <__aeabi_ddiv+0x1da>
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d800      	bhi.n	8000ef6 <__aeabi_ddiv+0x532>
 8000ef4:	e61a      	b.n	8000b2c <__aeabi_ddiv+0x168>
 8000ef6:	1e83      	subs	r3, r0, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	e617      	b.n	8000b2c <__aeabi_ddiv+0x168>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x53e>
 8000f00:	e600      	b.n	8000b04 <__aeabi_ddiv+0x140>
 8000f02:	46ac      	mov	ip, r5
 8000f04:	1e83      	subs	r3, r0, #2
 8000f06:	4698      	mov	r8, r3
 8000f08:	4461      	add	r1, ip
 8000f0a:	e5fb      	b.n	8000b04 <__aeabi_ddiv+0x140>
 8000f0c:	4837      	ldr	r0, [pc, #220]	@ (8000fec <__aeabi_ddiv+0x628>)
 8000f0e:	0014      	movs	r4, r2
 8000f10:	4450      	add	r0, sl
 8000f12:	4082      	lsls	r2, r0
 8000f14:	465b      	mov	r3, fp
 8000f16:	0017      	movs	r7, r2
 8000f18:	4083      	lsls	r3, r0
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	1e7a      	subs	r2, r7, #1
 8000f1e:	4197      	sbcs	r7, r2
 8000f20:	4323      	orrs	r3, r4
 8000f22:	433b      	orrs	r3, r7
 8000f24:	001a      	movs	r2, r3
 8000f26:	465b      	mov	r3, fp
 8000f28:	40cb      	lsrs	r3, r1
 8000f2a:	0751      	lsls	r1, r2, #29
 8000f2c:	d009      	beq.n	8000f42 <__aeabi_ddiv+0x57e>
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4011      	ands	r1, r2
 8000f32:	2904      	cmp	r1, #4
 8000f34:	d005      	beq.n	8000f42 <__aeabi_ddiv+0x57e>
 8000f36:	1d11      	adds	r1, r2, #4
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	0219      	lsls	r1, r3, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_ddiv+0x584>
 8000f46:	e755      	b.n	8000df4 <__aeabi_ddiv+0x430>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	e598      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000f52:	000a      	movs	r2, r1
 8000f54:	42bc      	cmp	r4, r7
 8000f56:	d000      	beq.n	8000f5a <__aeabi_ddiv+0x596>
 8000f58:	e66e      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000f5a:	454b      	cmp	r3, r9
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x59c>
 8000f5e:	e66b      	b.n	8000c38 <__aeabi_ddiv+0x274>
 8000f60:	e66c      	b.n	8000c3c <__aeabi_ddiv+0x278>
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <__aeabi_ddiv+0x62c>)
 8000f64:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <__aeabi_ddiv+0x630>)
 8000f66:	4453      	add	r3, sl
 8000f68:	4592      	cmp	sl, r2
 8000f6a:	da00      	bge.n	8000f6e <__aeabi_ddiv+0x5aa>
 8000f6c:	e718      	b.n	8000da0 <__aeabi_ddiv+0x3dc>
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4249      	negs	r1, r1
 8000f72:	1d0a      	adds	r2, r1, #4
 8000f74:	428a      	cmp	r2, r1
 8000f76:	4189      	sbcs	r1, r1
 8000f78:	4249      	negs	r1, r1
 8000f7a:	448b      	add	fp, r1
 8000f7c:	e666      	b.n	8000c4c <__aeabi_ddiv+0x288>
 8000f7e:	210f      	movs	r1, #15
 8000f80:	4011      	ands	r1, r2
 8000f82:	2904      	cmp	r1, #4
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x5c4>
 8000f86:	e661      	b.n	8000c4c <__aeabi_ddiv+0x288>
 8000f88:	0011      	movs	r1, r2
 8000f8a:	e7f2      	b.n	8000f72 <__aeabi_ddiv+0x5ae>
 8000f8c:	42bc      	cmp	r4, r7
 8000f8e:	d800      	bhi.n	8000f92 <__aeabi_ddiv+0x5ce>
 8000f90:	e60a      	b.n	8000ba8 <__aeabi_ddiv+0x1e4>
 8000f92:	2302      	movs	r3, #2
 8000f94:	425b      	negs	r3, r3
 8000f96:	469c      	mov	ip, r3
 8000f98:	9900      	ldr	r1, [sp, #0]
 8000f9a:	444f      	add	r7, r9
 8000f9c:	454f      	cmp	r7, r9
 8000f9e:	419b      	sbcs	r3, r3
 8000fa0:	44e3      	add	fp, ip
 8000fa2:	468c      	mov	ip, r1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	4463      	add	r3, ip
 8000fa8:	18c0      	adds	r0, r0, r3
 8000faa:	e5ff      	b.n	8000bac <__aeabi_ddiv+0x1e8>
 8000fac:	4649      	mov	r1, r9
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	0048      	lsls	r0, r1, #1
 8000fb2:	4548      	cmp	r0, r9
 8000fb4:	4189      	sbcs	r1, r1
 8000fb6:	46ac      	mov	ip, r5
 8000fb8:	4249      	negs	r1, r1
 8000fba:	4461      	add	r1, ip
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	3a02      	subs	r2, #2
 8000fc0:	1864      	adds	r4, r4, r1
 8000fc2:	e7c7      	b.n	8000f54 <__aeabi_ddiv+0x590>
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	465b      	mov	r3, fp
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	4690      	mov	r8, r2
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__aeabi_ddiv+0x620>)
 8000fd2:	0b24      	lsrs	r4, r4, #12
 8000fd4:	e556      	b.n	8000a84 <__aeabi_ddiv+0xc0>
 8000fd6:	4599      	cmp	r9, r3
 8000fd8:	d3e8      	bcc.n	8000fac <__aeabi_ddiv+0x5e8>
 8000fda:	000a      	movs	r2, r1
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_ddiv+0x596>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e708      	b.n	8000df4 <__aeabi_ddiv+0x430>
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	000007ff 	.word	0x000007ff
 8000fe8:	0000043e 	.word	0x0000043e
 8000fec:	0000041e 	.word	0x0000041e
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	fffffc02 	.word	0xfffffc02

08000ff8 <__aeabi_dmul>:
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	4657      	mov	r7, sl
 8000ffc:	46de      	mov	lr, fp
 8000ffe:	464e      	mov	r6, r9
 8001000:	4645      	mov	r5, r8
 8001002:	b5e0      	push	{r5, r6, r7, lr}
 8001004:	001f      	movs	r7, r3
 8001006:	030b      	lsls	r3, r1, #12
 8001008:	0b1b      	lsrs	r3, r3, #12
 800100a:	0016      	movs	r6, r2
 800100c:	469a      	mov	sl, r3
 800100e:	0fca      	lsrs	r2, r1, #31
 8001010:	004b      	lsls	r3, r1, #1
 8001012:	0004      	movs	r4, r0
 8001014:	4693      	mov	fp, r2
 8001016:	b087      	sub	sp, #28
 8001018:	0d5b      	lsrs	r3, r3, #21
 800101a:	d100      	bne.n	800101e <__aeabi_dmul+0x26>
 800101c:	e0d5      	b.n	80011ca <__aeabi_dmul+0x1d2>
 800101e:	4abb      	ldr	r2, [pc, #748]	@ (800130c <__aeabi_dmul+0x314>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d100      	bne.n	8001026 <__aeabi_dmul+0x2e>
 8001024:	e0f8      	b.n	8001218 <__aeabi_dmul+0x220>
 8001026:	4651      	mov	r1, sl
 8001028:	0f42      	lsrs	r2, r0, #29
 800102a:	00c9      	lsls	r1, r1, #3
 800102c:	430a      	orrs	r2, r1
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	0409      	lsls	r1, r1, #16
 8001032:	4311      	orrs	r1, r2
 8001034:	00c2      	lsls	r2, r0, #3
 8001036:	4691      	mov	r9, r2
 8001038:	4ab5      	ldr	r2, [pc, #724]	@ (8001310 <__aeabi_dmul+0x318>)
 800103a:	468a      	mov	sl, r1
 800103c:	189d      	adds	r5, r3, r2
 800103e:	2300      	movs	r3, #0
 8001040:	4698      	mov	r8, r3
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	033c      	lsls	r4, r7, #12
 8001046:	007b      	lsls	r3, r7, #1
 8001048:	0ffa      	lsrs	r2, r7, #31
 800104a:	0030      	movs	r0, r6
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	0d5b      	lsrs	r3, r3, #21
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	d100      	bne.n	8001056 <__aeabi_dmul+0x5e>
 8001054:	e096      	b.n	8001184 <__aeabi_dmul+0x18c>
 8001056:	4aad      	ldr	r2, [pc, #692]	@ (800130c <__aeabi_dmul+0x314>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d031      	beq.n	80010c0 <__aeabi_dmul+0xc8>
 800105c:	0f72      	lsrs	r2, r6, #29
 800105e:	00e4      	lsls	r4, r4, #3
 8001060:	4322      	orrs	r2, r4
 8001062:	2480      	movs	r4, #128	@ 0x80
 8001064:	0424      	lsls	r4, r4, #16
 8001066:	4314      	orrs	r4, r2
 8001068:	4aa9      	ldr	r2, [pc, #676]	@ (8001310 <__aeabi_dmul+0x318>)
 800106a:	00f0      	lsls	r0, r6, #3
 800106c:	4694      	mov	ip, r2
 800106e:	4463      	add	r3, ip
 8001070:	195b      	adds	r3, r3, r5
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	4642      	mov	r2, r8
 8001078:	2600      	movs	r6, #0
 800107a:	2a0a      	cmp	r2, #10
 800107c:	dc42      	bgt.n	8001104 <__aeabi_dmul+0x10c>
 800107e:	465a      	mov	r2, fp
 8001080:	9900      	ldr	r1, [sp, #0]
 8001082:	404a      	eors	r2, r1
 8001084:	4693      	mov	fp, r2
 8001086:	4642      	mov	r2, r8
 8001088:	2a02      	cmp	r2, #2
 800108a:	dc32      	bgt.n	80010f2 <__aeabi_dmul+0xfa>
 800108c:	3a01      	subs	r2, #1
 800108e:	2a01      	cmp	r2, #1
 8001090:	d900      	bls.n	8001094 <__aeabi_dmul+0x9c>
 8001092:	e149      	b.n	8001328 <__aeabi_dmul+0x330>
 8001094:	2e02      	cmp	r6, #2
 8001096:	d100      	bne.n	800109a <__aeabi_dmul+0xa2>
 8001098:	e0ca      	b.n	8001230 <__aeabi_dmul+0x238>
 800109a:	2e01      	cmp	r6, #1
 800109c:	d13d      	bne.n	800111a <__aeabi_dmul+0x122>
 800109e:	2300      	movs	r3, #0
 80010a0:	2400      	movs	r4, #0
 80010a2:	2200      	movs	r2, #0
 80010a4:	0010      	movs	r0, r2
 80010a6:	465a      	mov	r2, fp
 80010a8:	051b      	lsls	r3, r3, #20
 80010aa:	4323      	orrs	r3, r4
 80010ac:	07d2      	lsls	r2, r2, #31
 80010ae:	4313      	orrs	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	b007      	add	sp, #28
 80010b4:	bcf0      	pop	{r4, r5, r6, r7}
 80010b6:	46bb      	mov	fp, r7
 80010b8:	46b2      	mov	sl, r6
 80010ba:	46a9      	mov	r9, r5
 80010bc:	46a0      	mov	r8, r4
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	4b92      	ldr	r3, [pc, #584]	@ (800130c <__aeabi_dmul+0x314>)
 80010c2:	4326      	orrs	r6, r4
 80010c4:	18eb      	adds	r3, r5, r3
 80010c6:	2e00      	cmp	r6, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_dmul+0xd4>
 80010ca:	e0bb      	b.n	8001244 <__aeabi_dmul+0x24c>
 80010cc:	2203      	movs	r2, #3
 80010ce:	4641      	mov	r1, r8
 80010d0:	4311      	orrs	r1, r2
 80010d2:	465a      	mov	r2, fp
 80010d4:	4688      	mov	r8, r1
 80010d6:	9900      	ldr	r1, [sp, #0]
 80010d8:	404a      	eors	r2, r1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	0109      	lsls	r1, r1, #4
 80010de:	468c      	mov	ip, r1
 80010e0:	0029      	movs	r1, r5
 80010e2:	4461      	add	r1, ip
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	4641      	mov	r1, r8
 80010e8:	290a      	cmp	r1, #10
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dmul+0xf6>
 80010ec:	e233      	b.n	8001556 <__aeabi_dmul+0x55e>
 80010ee:	4693      	mov	fp, r2
 80010f0:	2603      	movs	r6, #3
 80010f2:	4642      	mov	r2, r8
 80010f4:	2701      	movs	r7, #1
 80010f6:	4097      	lsls	r7, r2
 80010f8:	21a6      	movs	r1, #166	@ 0xa6
 80010fa:	003a      	movs	r2, r7
 80010fc:	00c9      	lsls	r1, r1, #3
 80010fe:	400a      	ands	r2, r1
 8001100:	420f      	tst	r7, r1
 8001102:	d031      	beq.n	8001168 <__aeabi_dmul+0x170>
 8001104:	9e02      	ldr	r6, [sp, #8]
 8001106:	2e02      	cmp	r6, #2
 8001108:	d100      	bne.n	800110c <__aeabi_dmul+0x114>
 800110a:	e235      	b.n	8001578 <__aeabi_dmul+0x580>
 800110c:	2e03      	cmp	r6, #3
 800110e:	d100      	bne.n	8001112 <__aeabi_dmul+0x11a>
 8001110:	e1d2      	b.n	80014b8 <__aeabi_dmul+0x4c0>
 8001112:	4654      	mov	r4, sl
 8001114:	4648      	mov	r0, r9
 8001116:	2e01      	cmp	r6, #1
 8001118:	d0c1      	beq.n	800109e <__aeabi_dmul+0xa6>
 800111a:	9a01      	ldr	r2, [sp, #4]
 800111c:	4b7d      	ldr	r3, [pc, #500]	@ (8001314 <__aeabi_dmul+0x31c>)
 800111e:	4694      	mov	ip, r2
 8001120:	4463      	add	r3, ip
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc00      	bgt.n	8001128 <__aeabi_dmul+0x130>
 8001126:	e0c0      	b.n	80012aa <__aeabi_dmul+0x2b2>
 8001128:	0742      	lsls	r2, r0, #29
 800112a:	d009      	beq.n	8001140 <__aeabi_dmul+0x148>
 800112c:	220f      	movs	r2, #15
 800112e:	4002      	ands	r2, r0
 8001130:	2a04      	cmp	r2, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dmul+0x148>
 8001134:	1d02      	adds	r2, r0, #4
 8001136:	4282      	cmp	r2, r0
 8001138:	4180      	sbcs	r0, r0
 800113a:	4240      	negs	r0, r0
 800113c:	1824      	adds	r4, r4, r0
 800113e:	0010      	movs	r0, r2
 8001140:	01e2      	lsls	r2, r4, #7
 8001142:	d506      	bpl.n	8001152 <__aeabi_dmul+0x15a>
 8001144:	4b74      	ldr	r3, [pc, #464]	@ (8001318 <__aeabi_dmul+0x320>)
 8001146:	9a01      	ldr	r2, [sp, #4]
 8001148:	401c      	ands	r4, r3
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	4694      	mov	ip, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4463      	add	r3, ip
 8001152:	4a72      	ldr	r2, [pc, #456]	@ (800131c <__aeabi_dmul+0x324>)
 8001154:	4293      	cmp	r3, r2
 8001156:	dc6b      	bgt.n	8001230 <__aeabi_dmul+0x238>
 8001158:	0762      	lsls	r2, r4, #29
 800115a:	08c0      	lsrs	r0, r0, #3
 800115c:	0264      	lsls	r4, r4, #9
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	4302      	orrs	r2, r0
 8001162:	0b24      	lsrs	r4, r4, #12
 8001164:	0d5b      	lsrs	r3, r3, #21
 8001166:	e79d      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001168:	2190      	movs	r1, #144	@ 0x90
 800116a:	0089      	lsls	r1, r1, #2
 800116c:	420f      	tst	r7, r1
 800116e:	d163      	bne.n	8001238 <__aeabi_dmul+0x240>
 8001170:	2288      	movs	r2, #136	@ 0x88
 8001172:	423a      	tst	r2, r7
 8001174:	d100      	bne.n	8001178 <__aeabi_dmul+0x180>
 8001176:	e0d7      	b.n	8001328 <__aeabi_dmul+0x330>
 8001178:	9b00      	ldr	r3, [sp, #0]
 800117a:	46a2      	mov	sl, r4
 800117c:	469b      	mov	fp, r3
 800117e:	4681      	mov	r9, r0
 8001180:	9602      	str	r6, [sp, #8]
 8001182:	e7bf      	b.n	8001104 <__aeabi_dmul+0x10c>
 8001184:	0023      	movs	r3, r4
 8001186:	4333      	orrs	r3, r6
 8001188:	d100      	bne.n	800118c <__aeabi_dmul+0x194>
 800118a:	e07f      	b.n	800128c <__aeabi_dmul+0x294>
 800118c:	2c00      	cmp	r4, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dmul+0x19a>
 8001190:	e1ad      	b.n	80014ee <__aeabi_dmul+0x4f6>
 8001192:	0020      	movs	r0, r4
 8001194:	f000 fe60 	bl	8001e58 <__clzsi2>
 8001198:	0002      	movs	r2, r0
 800119a:	0003      	movs	r3, r0
 800119c:	3a0b      	subs	r2, #11
 800119e:	201d      	movs	r0, #29
 80011a0:	0019      	movs	r1, r3
 80011a2:	1a82      	subs	r2, r0, r2
 80011a4:	0030      	movs	r0, r6
 80011a6:	3908      	subs	r1, #8
 80011a8:	40d0      	lsrs	r0, r2
 80011aa:	408c      	lsls	r4, r1
 80011ac:	4304      	orrs	r4, r0
 80011ae:	0030      	movs	r0, r6
 80011b0:	4088      	lsls	r0, r1
 80011b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001320 <__aeabi_dmul+0x328>)
 80011b4:	1aeb      	subs	r3, r5, r3
 80011b6:	4694      	mov	ip, r2
 80011b8:	4463      	add	r3, ip
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	4642      	mov	r2, r8
 80011c0:	2600      	movs	r6, #0
 80011c2:	2a0a      	cmp	r2, #10
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_dmul+0x1d0>
 80011c6:	e75a      	b.n	800107e <__aeabi_dmul+0x86>
 80011c8:	e79c      	b.n	8001104 <__aeabi_dmul+0x10c>
 80011ca:	4653      	mov	r3, sl
 80011cc:	4303      	orrs	r3, r0
 80011ce:	4699      	mov	r9, r3
 80011d0:	d054      	beq.n	800127c <__aeabi_dmul+0x284>
 80011d2:	4653      	mov	r3, sl
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_dmul+0x1e2>
 80011d8:	e177      	b.n	80014ca <__aeabi_dmul+0x4d2>
 80011da:	4650      	mov	r0, sl
 80011dc:	f000 fe3c 	bl	8001e58 <__clzsi2>
 80011e0:	230b      	movs	r3, #11
 80011e2:	425b      	negs	r3, r3
 80011e4:	469c      	mov	ip, r3
 80011e6:	0002      	movs	r2, r0
 80011e8:	4484      	add	ip, r0
 80011ea:	0011      	movs	r1, r2
 80011ec:	4650      	mov	r0, sl
 80011ee:	3908      	subs	r1, #8
 80011f0:	4088      	lsls	r0, r1
 80011f2:	231d      	movs	r3, #29
 80011f4:	4680      	mov	r8, r0
 80011f6:	4660      	mov	r0, ip
 80011f8:	1a1b      	subs	r3, r3, r0
 80011fa:	0020      	movs	r0, r4
 80011fc:	40d8      	lsrs	r0, r3
 80011fe:	0003      	movs	r3, r0
 8001200:	4640      	mov	r0, r8
 8001202:	4303      	orrs	r3, r0
 8001204:	469a      	mov	sl, r3
 8001206:	0023      	movs	r3, r4
 8001208:	408b      	lsls	r3, r1
 800120a:	4699      	mov	r9, r3
 800120c:	2300      	movs	r3, #0
 800120e:	4d44      	ldr	r5, [pc, #272]	@ (8001320 <__aeabi_dmul+0x328>)
 8001210:	4698      	mov	r8, r3
 8001212:	1aad      	subs	r5, r5, r2
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	e715      	b.n	8001044 <__aeabi_dmul+0x4c>
 8001218:	4652      	mov	r2, sl
 800121a:	4302      	orrs	r2, r0
 800121c:	4691      	mov	r9, r2
 800121e:	d126      	bne.n	800126e <__aeabi_dmul+0x276>
 8001220:	2200      	movs	r2, #0
 8001222:	001d      	movs	r5, r3
 8001224:	2302      	movs	r3, #2
 8001226:	4692      	mov	sl, r2
 8001228:	3208      	adds	r2, #8
 800122a:	4690      	mov	r8, r2
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	e709      	b.n	8001044 <__aeabi_dmul+0x4c>
 8001230:	2400      	movs	r4, #0
 8001232:	2200      	movs	r2, #0
 8001234:	4b35      	ldr	r3, [pc, #212]	@ (800130c <__aeabi_dmul+0x314>)
 8001236:	e735      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001238:	2300      	movs	r3, #0
 800123a:	2480      	movs	r4, #128	@ 0x80
 800123c:	469b      	mov	fp, r3
 800123e:	0324      	lsls	r4, r4, #12
 8001240:	4b32      	ldr	r3, [pc, #200]	@ (800130c <__aeabi_dmul+0x314>)
 8001242:	e72f      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001244:	2202      	movs	r2, #2
 8001246:	4641      	mov	r1, r8
 8001248:	4311      	orrs	r1, r2
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	4694      	mov	ip, r2
 8001250:	002a      	movs	r2, r5
 8001252:	4462      	add	r2, ip
 8001254:	4688      	mov	r8, r1
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	290a      	cmp	r1, #10
 800125a:	dd00      	ble.n	800125e <__aeabi_dmul+0x266>
 800125c:	e752      	b.n	8001104 <__aeabi_dmul+0x10c>
 800125e:	465a      	mov	r2, fp
 8001260:	2000      	movs	r0, #0
 8001262:	9900      	ldr	r1, [sp, #0]
 8001264:	0004      	movs	r4, r0
 8001266:	404a      	eors	r2, r1
 8001268:	4693      	mov	fp, r2
 800126a:	2602      	movs	r6, #2
 800126c:	e70b      	b.n	8001086 <__aeabi_dmul+0x8e>
 800126e:	220c      	movs	r2, #12
 8001270:	001d      	movs	r5, r3
 8001272:	2303      	movs	r3, #3
 8001274:	4681      	mov	r9, r0
 8001276:	4690      	mov	r8, r2
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	e6e3      	b.n	8001044 <__aeabi_dmul+0x4c>
 800127c:	2300      	movs	r3, #0
 800127e:	469a      	mov	sl, r3
 8001280:	3304      	adds	r3, #4
 8001282:	4698      	mov	r8, r3
 8001284:	3b03      	subs	r3, #3
 8001286:	2500      	movs	r5, #0
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	e6db      	b.n	8001044 <__aeabi_dmul+0x4c>
 800128c:	4642      	mov	r2, r8
 800128e:	3301      	adds	r3, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	002b      	movs	r3, r5
 8001294:	4690      	mov	r8, r2
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	4642      	mov	r2, r8
 800129c:	2400      	movs	r4, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	2601      	movs	r6, #1
 80012a2:	2a0a      	cmp	r2, #10
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_dmul+0x2b0>
 80012a6:	e6ea      	b.n	800107e <__aeabi_dmul+0x86>
 80012a8:	e72c      	b.n	8001104 <__aeabi_dmul+0x10c>
 80012aa:	2201      	movs	r2, #1
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	2a38      	cmp	r2, #56	@ 0x38
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dmul+0x2bc>
 80012b2:	e6f4      	b.n	800109e <__aeabi_dmul+0xa6>
 80012b4:	2a1f      	cmp	r2, #31
 80012b6:	dc00      	bgt.n	80012ba <__aeabi_dmul+0x2c2>
 80012b8:	e12a      	b.n	8001510 <__aeabi_dmul+0x518>
 80012ba:	211f      	movs	r1, #31
 80012bc:	4249      	negs	r1, r1
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	0021      	movs	r1, r4
 80012c2:	40d9      	lsrs	r1, r3
 80012c4:	000b      	movs	r3, r1
 80012c6:	2a20      	cmp	r2, #32
 80012c8:	d005      	beq.n	80012d6 <__aeabi_dmul+0x2de>
 80012ca:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <__aeabi_dmul+0x32c>)
 80012cc:	9d01      	ldr	r5, [sp, #4]
 80012ce:	4694      	mov	ip, r2
 80012d0:	4465      	add	r5, ip
 80012d2:	40ac      	lsls	r4, r5
 80012d4:	4320      	orrs	r0, r4
 80012d6:	1e42      	subs	r2, r0, #1
 80012d8:	4190      	sbcs	r0, r2
 80012da:	4318      	orrs	r0, r3
 80012dc:	2307      	movs	r3, #7
 80012de:	0019      	movs	r1, r3
 80012e0:	2400      	movs	r4, #0
 80012e2:	4001      	ands	r1, r0
 80012e4:	4203      	tst	r3, r0
 80012e6:	d00c      	beq.n	8001302 <__aeabi_dmul+0x30a>
 80012e8:	230f      	movs	r3, #15
 80012ea:	4003      	ands	r3, r0
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dmul+0x2fa>
 80012f0:	e140      	b.n	8001574 <__aeabi_dmul+0x57c>
 80012f2:	1d03      	adds	r3, r0, #4
 80012f4:	4283      	cmp	r3, r0
 80012f6:	41a4      	sbcs	r4, r4
 80012f8:	0018      	movs	r0, r3
 80012fa:	4264      	negs	r4, r4
 80012fc:	0761      	lsls	r1, r4, #29
 80012fe:	0264      	lsls	r4, r4, #9
 8001300:	0b24      	lsrs	r4, r4, #12
 8001302:	08c2      	lsrs	r2, r0, #3
 8001304:	2300      	movs	r3, #0
 8001306:	430a      	orrs	r2, r1
 8001308:	e6cc      	b.n	80010a4 <__aeabi_dmul+0xac>
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff
 8001310:	fffffc01 	.word	0xfffffc01
 8001314:	000003ff 	.word	0x000003ff
 8001318:	feffffff 	.word	0xfeffffff
 800131c:	000007fe 	.word	0x000007fe
 8001320:	fffffc0d 	.word	0xfffffc0d
 8001324:	0000043e 	.word	0x0000043e
 8001328:	4649      	mov	r1, r9
 800132a:	464a      	mov	r2, r9
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	0c09      	lsrs	r1, r1, #16
 8001330:	000d      	movs	r5, r1
 8001332:	0c16      	lsrs	r6, r2, #16
 8001334:	0c02      	lsrs	r2, r0, #16
 8001336:	0400      	lsls	r0, r0, #16
 8001338:	0c00      	lsrs	r0, r0, #16
 800133a:	4345      	muls	r5, r0
 800133c:	46ac      	mov	ip, r5
 800133e:	0005      	movs	r5, r0
 8001340:	4375      	muls	r5, r6
 8001342:	46a8      	mov	r8, r5
 8001344:	0015      	movs	r5, r2
 8001346:	000f      	movs	r7, r1
 8001348:	4375      	muls	r5, r6
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	9502      	str	r5, [sp, #8]
 800134e:	002a      	movs	r2, r5
 8001350:	9d00      	ldr	r5, [sp, #0]
 8001352:	436f      	muls	r7, r5
 8001354:	4665      	mov	r5, ip
 8001356:	0c2d      	lsrs	r5, r5, #16
 8001358:	46a9      	mov	r9, r5
 800135a:	4447      	add	r7, r8
 800135c:	444f      	add	r7, r9
 800135e:	45b8      	cmp	r8, r7
 8001360:	d905      	bls.n	800136e <__aeabi_dmul+0x376>
 8001362:	0015      	movs	r5, r2
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	0252      	lsls	r2, r2, #9
 8001368:	4690      	mov	r8, r2
 800136a:	4445      	add	r5, r8
 800136c:	9502      	str	r5, [sp, #8]
 800136e:	0c3d      	lsrs	r5, r7, #16
 8001370:	9503      	str	r5, [sp, #12]
 8001372:	4665      	mov	r5, ip
 8001374:	042d      	lsls	r5, r5, #16
 8001376:	043f      	lsls	r7, r7, #16
 8001378:	0c2d      	lsrs	r5, r5, #16
 800137a:	46ac      	mov	ip, r5
 800137c:	003d      	movs	r5, r7
 800137e:	4465      	add	r5, ip
 8001380:	9504      	str	r5, [sp, #16]
 8001382:	0c25      	lsrs	r5, r4, #16
 8001384:	0424      	lsls	r4, r4, #16
 8001386:	0c24      	lsrs	r4, r4, #16
 8001388:	46ac      	mov	ip, r5
 800138a:	0025      	movs	r5, r4
 800138c:	4375      	muls	r5, r6
 800138e:	46a8      	mov	r8, r5
 8001390:	4665      	mov	r5, ip
 8001392:	000f      	movs	r7, r1
 8001394:	4369      	muls	r1, r5
 8001396:	4441      	add	r1, r8
 8001398:	4689      	mov	r9, r1
 800139a:	4367      	muls	r7, r4
 800139c:	0c39      	lsrs	r1, r7, #16
 800139e:	4449      	add	r1, r9
 80013a0:	436e      	muls	r6, r5
 80013a2:	4588      	cmp	r8, r1
 80013a4:	d903      	bls.n	80013ae <__aeabi_dmul+0x3b6>
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	0252      	lsls	r2, r2, #9
 80013aa:	4690      	mov	r8, r2
 80013ac:	4446      	add	r6, r8
 80013ae:	0c0d      	lsrs	r5, r1, #16
 80013b0:	46a8      	mov	r8, r5
 80013b2:	0035      	movs	r5, r6
 80013b4:	4445      	add	r5, r8
 80013b6:	9505      	str	r5, [sp, #20]
 80013b8:	9d03      	ldr	r5, [sp, #12]
 80013ba:	043f      	lsls	r7, r7, #16
 80013bc:	46a8      	mov	r8, r5
 80013be:	0c3f      	lsrs	r7, r7, #16
 80013c0:	0409      	lsls	r1, r1, #16
 80013c2:	19c9      	adds	r1, r1, r7
 80013c4:	4488      	add	r8, r1
 80013c6:	4645      	mov	r5, r8
 80013c8:	9503      	str	r5, [sp, #12]
 80013ca:	4655      	mov	r5, sl
 80013cc:	042e      	lsls	r6, r5, #16
 80013ce:	0c36      	lsrs	r6, r6, #16
 80013d0:	0c2f      	lsrs	r7, r5, #16
 80013d2:	0035      	movs	r5, r6
 80013d4:	4345      	muls	r5, r0
 80013d6:	4378      	muls	r0, r7
 80013d8:	4681      	mov	r9, r0
 80013da:	0038      	movs	r0, r7
 80013dc:	46a8      	mov	r8, r5
 80013de:	0c2d      	lsrs	r5, r5, #16
 80013e0:	46aa      	mov	sl, r5
 80013e2:	9a00      	ldr	r2, [sp, #0]
 80013e4:	4350      	muls	r0, r2
 80013e6:	4372      	muls	r2, r6
 80013e8:	444a      	add	r2, r9
 80013ea:	4452      	add	r2, sl
 80013ec:	4591      	cmp	r9, r2
 80013ee:	d903      	bls.n	80013f8 <__aeabi_dmul+0x400>
 80013f0:	2580      	movs	r5, #128	@ 0x80
 80013f2:	026d      	lsls	r5, r5, #9
 80013f4:	46a9      	mov	r9, r5
 80013f6:	4448      	add	r0, r9
 80013f8:	0c15      	lsrs	r5, r2, #16
 80013fa:	46a9      	mov	r9, r5
 80013fc:	4645      	mov	r5, r8
 80013fe:	042d      	lsls	r5, r5, #16
 8001400:	0c2d      	lsrs	r5, r5, #16
 8001402:	46a8      	mov	r8, r5
 8001404:	4665      	mov	r5, ip
 8001406:	437d      	muls	r5, r7
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	4448      	add	r0, r9
 800140c:	4490      	add	r8, r2
 800140e:	46a9      	mov	r9, r5
 8001410:	0032      	movs	r2, r6
 8001412:	4665      	mov	r5, ip
 8001414:	4362      	muls	r2, r4
 8001416:	436e      	muls	r6, r5
 8001418:	437c      	muls	r4, r7
 800141a:	0c17      	lsrs	r7, r2, #16
 800141c:	1936      	adds	r6, r6, r4
 800141e:	19bf      	adds	r7, r7, r6
 8001420:	42bc      	cmp	r4, r7
 8001422:	d903      	bls.n	800142c <__aeabi_dmul+0x434>
 8001424:	2480      	movs	r4, #128	@ 0x80
 8001426:	0264      	lsls	r4, r4, #9
 8001428:	46a4      	mov	ip, r4
 800142a:	44e1      	add	r9, ip
 800142c:	9c02      	ldr	r4, [sp, #8]
 800142e:	9e03      	ldr	r6, [sp, #12]
 8001430:	46a4      	mov	ip, r4
 8001432:	9d05      	ldr	r5, [sp, #20]
 8001434:	4466      	add	r6, ip
 8001436:	428e      	cmp	r6, r1
 8001438:	4189      	sbcs	r1, r1
 800143a:	46ac      	mov	ip, r5
 800143c:	0412      	lsls	r2, r2, #16
 800143e:	043c      	lsls	r4, r7, #16
 8001440:	0c12      	lsrs	r2, r2, #16
 8001442:	18a2      	adds	r2, r4, r2
 8001444:	4462      	add	r2, ip
 8001446:	4249      	negs	r1, r1
 8001448:	1854      	adds	r4, r2, r1
 800144a:	4446      	add	r6, r8
 800144c:	46a4      	mov	ip, r4
 800144e:	4546      	cmp	r6, r8
 8001450:	41a4      	sbcs	r4, r4
 8001452:	4682      	mov	sl, r0
 8001454:	4264      	negs	r4, r4
 8001456:	46a0      	mov	r8, r4
 8001458:	42aa      	cmp	r2, r5
 800145a:	4192      	sbcs	r2, r2
 800145c:	458c      	cmp	ip, r1
 800145e:	4189      	sbcs	r1, r1
 8001460:	44e2      	add	sl, ip
 8001462:	44d0      	add	r8, sl
 8001464:	4249      	negs	r1, r1
 8001466:	4252      	negs	r2, r2
 8001468:	430a      	orrs	r2, r1
 800146a:	45a0      	cmp	r8, r4
 800146c:	41a4      	sbcs	r4, r4
 800146e:	4582      	cmp	sl, r0
 8001470:	4189      	sbcs	r1, r1
 8001472:	4264      	negs	r4, r4
 8001474:	4249      	negs	r1, r1
 8001476:	430c      	orrs	r4, r1
 8001478:	4641      	mov	r1, r8
 800147a:	0c3f      	lsrs	r7, r7, #16
 800147c:	19d2      	adds	r2, r2, r7
 800147e:	1912      	adds	r2, r2, r4
 8001480:	0dcc      	lsrs	r4, r1, #23
 8001482:	9904      	ldr	r1, [sp, #16]
 8001484:	0270      	lsls	r0, r6, #9
 8001486:	4308      	orrs	r0, r1
 8001488:	1e41      	subs	r1, r0, #1
 800148a:	4188      	sbcs	r0, r1
 800148c:	4641      	mov	r1, r8
 800148e:	444a      	add	r2, r9
 8001490:	0df6      	lsrs	r6, r6, #23
 8001492:	0252      	lsls	r2, r2, #9
 8001494:	4330      	orrs	r0, r6
 8001496:	0249      	lsls	r1, r1, #9
 8001498:	4314      	orrs	r4, r2
 800149a:	4308      	orrs	r0, r1
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d535      	bpl.n	800150c <__aeabi_dmul+0x514>
 80014a0:	2201      	movs	r2, #1
 80014a2:	0843      	lsrs	r3, r0, #1
 80014a4:	4002      	ands	r2, r0
 80014a6:	4313      	orrs	r3, r2
 80014a8:	07e0      	lsls	r0, r4, #31
 80014aa:	4318      	orrs	r0, r3
 80014ac:	0864      	lsrs	r4, r4, #1
 80014ae:	e634      	b.n	800111a <__aeabi_dmul+0x122>
 80014b0:	9b00      	ldr	r3, [sp, #0]
 80014b2:	46a2      	mov	sl, r4
 80014b4:	469b      	mov	fp, r3
 80014b6:	4681      	mov	r9, r0
 80014b8:	2480      	movs	r4, #128	@ 0x80
 80014ba:	4653      	mov	r3, sl
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	431c      	orrs	r4, r3
 80014c0:	0324      	lsls	r4, r4, #12
 80014c2:	464a      	mov	r2, r9
 80014c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <__aeabi_dmul+0x588>)
 80014c6:	0b24      	lsrs	r4, r4, #12
 80014c8:	e5ec      	b.n	80010a4 <__aeabi_dmul+0xac>
 80014ca:	f000 fcc5 	bl	8001e58 <__clzsi2>
 80014ce:	2315      	movs	r3, #21
 80014d0:	469c      	mov	ip, r3
 80014d2:	4484      	add	ip, r0
 80014d4:	0002      	movs	r2, r0
 80014d6:	4663      	mov	r3, ip
 80014d8:	3220      	adds	r2, #32
 80014da:	2b1c      	cmp	r3, #28
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_dmul+0x4e8>
 80014de:	e684      	b.n	80011ea <__aeabi_dmul+0x1f2>
 80014e0:	2300      	movs	r3, #0
 80014e2:	4699      	mov	r9, r3
 80014e4:	0023      	movs	r3, r4
 80014e6:	3808      	subs	r0, #8
 80014e8:	4083      	lsls	r3, r0
 80014ea:	469a      	mov	sl, r3
 80014ec:	e68e      	b.n	800120c <__aeabi_dmul+0x214>
 80014ee:	f000 fcb3 	bl	8001e58 <__clzsi2>
 80014f2:	0002      	movs	r2, r0
 80014f4:	0003      	movs	r3, r0
 80014f6:	3215      	adds	r2, #21
 80014f8:	3320      	adds	r3, #32
 80014fa:	2a1c      	cmp	r2, #28
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_dmul+0x508>
 80014fe:	e64e      	b.n	800119e <__aeabi_dmul+0x1a6>
 8001500:	0002      	movs	r2, r0
 8001502:	0034      	movs	r4, r6
 8001504:	3a08      	subs	r2, #8
 8001506:	2000      	movs	r0, #0
 8001508:	4094      	lsls	r4, r2
 800150a:	e652      	b.n	80011b2 <__aeabi_dmul+0x1ba>
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	e604      	b.n	800111a <__aeabi_dmul+0x122>
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <__aeabi_dmul+0x58c>)
 8001512:	0021      	movs	r1, r4
 8001514:	469c      	mov	ip, r3
 8001516:	0003      	movs	r3, r0
 8001518:	9d01      	ldr	r5, [sp, #4]
 800151a:	40d3      	lsrs	r3, r2
 800151c:	4465      	add	r5, ip
 800151e:	40a9      	lsls	r1, r5
 8001520:	4319      	orrs	r1, r3
 8001522:	0003      	movs	r3, r0
 8001524:	40ab      	lsls	r3, r5
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	4183      	sbcs	r3, r0
 800152a:	4319      	orrs	r1, r3
 800152c:	0008      	movs	r0, r1
 800152e:	40d4      	lsrs	r4, r2
 8001530:	074b      	lsls	r3, r1, #29
 8001532:	d009      	beq.n	8001548 <__aeabi_dmul+0x550>
 8001534:	230f      	movs	r3, #15
 8001536:	400b      	ands	r3, r1
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <__aeabi_dmul+0x550>
 800153c:	1d0b      	adds	r3, r1, #4
 800153e:	428b      	cmp	r3, r1
 8001540:	4180      	sbcs	r0, r0
 8001542:	4240      	negs	r0, r0
 8001544:	1824      	adds	r4, r4, r0
 8001546:	0018      	movs	r0, r3
 8001548:	0223      	lsls	r3, r4, #8
 800154a:	d400      	bmi.n	800154e <__aeabi_dmul+0x556>
 800154c:	e6d6      	b.n	80012fc <__aeabi_dmul+0x304>
 800154e:	2301      	movs	r3, #1
 8001550:	2400      	movs	r4, #0
 8001552:	2200      	movs	r2, #0
 8001554:	e5a6      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001556:	290f      	cmp	r1, #15
 8001558:	d1aa      	bne.n	80014b0 <__aeabi_dmul+0x4b8>
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	4652      	mov	r2, sl
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	421a      	tst	r2, r3
 8001562:	d0a9      	beq.n	80014b8 <__aeabi_dmul+0x4c0>
 8001564:	421c      	tst	r4, r3
 8001566:	d1a7      	bne.n	80014b8 <__aeabi_dmul+0x4c0>
 8001568:	431c      	orrs	r4, r3
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	0002      	movs	r2, r0
 800156e:	469b      	mov	fp, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <__aeabi_dmul+0x588>)
 8001572:	e597      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001574:	2400      	movs	r4, #0
 8001576:	e6c1      	b.n	80012fc <__aeabi_dmul+0x304>
 8001578:	2400      	movs	r4, #0
 800157a:	4b01      	ldr	r3, [pc, #4]	@ (8001580 <__aeabi_dmul+0x588>)
 800157c:	0022      	movs	r2, r4
 800157e:	e591      	b.n	80010a4 <__aeabi_dmul+0xac>
 8001580:	000007ff 	.word	0x000007ff
 8001584:	0000041e 	.word	0x0000041e

08001588 <__aeabi_dsub>:
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	464e      	mov	r6, r9
 800158c:	4645      	mov	r5, r8
 800158e:	46de      	mov	lr, fp
 8001590:	4657      	mov	r7, sl
 8001592:	b5e0      	push	{r5, r6, r7, lr}
 8001594:	b085      	sub	sp, #20
 8001596:	9000      	str	r0, [sp, #0]
 8001598:	9101      	str	r1, [sp, #4]
 800159a:	030c      	lsls	r4, r1, #12
 800159c:	004f      	lsls	r7, r1, #1
 800159e:	0fce      	lsrs	r6, r1, #31
 80015a0:	0a61      	lsrs	r1, r4, #9
 80015a2:	9c00      	ldr	r4, [sp, #0]
 80015a4:	46b0      	mov	r8, r6
 80015a6:	0f64      	lsrs	r4, r4, #29
 80015a8:	430c      	orrs	r4, r1
 80015aa:	9900      	ldr	r1, [sp, #0]
 80015ac:	0d7f      	lsrs	r7, r7, #21
 80015ae:	00c8      	lsls	r0, r1, #3
 80015b0:	0011      	movs	r1, r2
 80015b2:	001a      	movs	r2, r3
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	469c      	mov	ip, r3
 80015b8:	9100      	str	r1, [sp, #0]
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	0051      	lsls	r1, r2, #1
 80015be:	0d4b      	lsrs	r3, r1, #21
 80015c0:	4699      	mov	r9, r3
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	9d00      	ldr	r5, [sp, #0]
 80015c6:	0fd9      	lsrs	r1, r3, #31
 80015c8:	4663      	mov	r3, ip
 80015ca:	0f6a      	lsrs	r2, r5, #29
 80015cc:	0a5b      	lsrs	r3, r3, #9
 80015ce:	4313      	orrs	r3, r2
 80015d0:	00ea      	lsls	r2, r5, #3
 80015d2:	4694      	mov	ip, r2
 80015d4:	4693      	mov	fp, r2
 80015d6:	4ac1      	ldr	r2, [pc, #772]	@ (80018dc <__aeabi_dsub+0x354>)
 80015d8:	9003      	str	r0, [sp, #12]
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	4591      	cmp	r9, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dsub+0x5a>
 80015e0:	e0cd      	b.n	800177e <__aeabi_dsub+0x1f6>
 80015e2:	2501      	movs	r5, #1
 80015e4:	4069      	eors	r1, r5
 80015e6:	464d      	mov	r5, r9
 80015e8:	1b7d      	subs	r5, r7, r5
 80015ea:	46aa      	mov	sl, r5
 80015ec:	428e      	cmp	r6, r1
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dsub+0x6a>
 80015f0:	e080      	b.n	80016f4 <__aeabi_dsub+0x16c>
 80015f2:	2d00      	cmp	r5, #0
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_dsub+0x70>
 80015f6:	e335      	b.n	8001c64 <__aeabi_dsub+0x6dc>
 80015f8:	4649      	mov	r1, r9
 80015fa:	2900      	cmp	r1, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_dsub+0x78>
 80015fe:	e0df      	b.n	80017c0 <__aeabi_dsub+0x238>
 8001600:	4297      	cmp	r7, r2
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x7e>
 8001604:	e194      	b.n	8001930 <__aeabi_dsub+0x3a8>
 8001606:	4652      	mov	r2, sl
 8001608:	2501      	movs	r5, #1
 800160a:	2a38      	cmp	r2, #56	@ 0x38
 800160c:	dc19      	bgt.n	8001642 <__aeabi_dsub+0xba>
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	9b02      	ldr	r3, [sp, #8]
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	4313      	orrs	r3, r2
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	4652      	mov	r2, sl
 800161a:	2a1f      	cmp	r2, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dsub+0x98>
 800161e:	e1e3      	b.n	80019e8 <__aeabi_dsub+0x460>
 8001620:	4653      	mov	r3, sl
 8001622:	2220      	movs	r2, #32
 8001624:	4661      	mov	r1, ip
 8001626:	9d02      	ldr	r5, [sp, #8]
 8001628:	1ad2      	subs	r2, r2, r3
 800162a:	4095      	lsls	r5, r2
 800162c:	40d9      	lsrs	r1, r3
 800162e:	430d      	orrs	r5, r1
 8001630:	4661      	mov	r1, ip
 8001632:	4091      	lsls	r1, r2
 8001634:	000a      	movs	r2, r1
 8001636:	1e51      	subs	r1, r2, #1
 8001638:	418a      	sbcs	r2, r1
 800163a:	4315      	orrs	r5, r2
 800163c:	9a02      	ldr	r2, [sp, #8]
 800163e:	40da      	lsrs	r2, r3
 8001640:	1aa4      	subs	r4, r4, r2
 8001642:	1b45      	subs	r5, r0, r5
 8001644:	42a8      	cmp	r0, r5
 8001646:	4180      	sbcs	r0, r0
 8001648:	4240      	negs	r0, r0
 800164a:	1a24      	subs	r4, r4, r0
 800164c:	0223      	lsls	r3, r4, #8
 800164e:	d400      	bmi.n	8001652 <__aeabi_dsub+0xca>
 8001650:	e13d      	b.n	80018ce <__aeabi_dsub+0x346>
 8001652:	0264      	lsls	r4, r4, #9
 8001654:	0a64      	lsrs	r4, r4, #9
 8001656:	2c00      	cmp	r4, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0xd4>
 800165a:	e147      	b.n	80018ec <__aeabi_dsub+0x364>
 800165c:	0020      	movs	r0, r4
 800165e:	f000 fbfb 	bl	8001e58 <__clzsi2>
 8001662:	0003      	movs	r3, r0
 8001664:	3b08      	subs	r3, #8
 8001666:	2120      	movs	r1, #32
 8001668:	0028      	movs	r0, r5
 800166a:	1aca      	subs	r2, r1, r3
 800166c:	40d0      	lsrs	r0, r2
 800166e:	409c      	lsls	r4, r3
 8001670:	0002      	movs	r2, r0
 8001672:	409d      	lsls	r5, r3
 8001674:	4322      	orrs	r2, r4
 8001676:	429f      	cmp	r7, r3
 8001678:	dd00      	ble.n	800167c <__aeabi_dsub+0xf4>
 800167a:	e177      	b.n	800196c <__aeabi_dsub+0x3e4>
 800167c:	1bd8      	subs	r0, r3, r7
 800167e:	3001      	adds	r0, #1
 8001680:	1a09      	subs	r1, r1, r0
 8001682:	002c      	movs	r4, r5
 8001684:	408d      	lsls	r5, r1
 8001686:	40c4      	lsrs	r4, r0
 8001688:	1e6b      	subs	r3, r5, #1
 800168a:	419d      	sbcs	r5, r3
 800168c:	0013      	movs	r3, r2
 800168e:	40c2      	lsrs	r2, r0
 8001690:	408b      	lsls	r3, r1
 8001692:	4325      	orrs	r5, r4
 8001694:	2700      	movs	r7, #0
 8001696:	0014      	movs	r4, r2
 8001698:	431d      	orrs	r5, r3
 800169a:	076b      	lsls	r3, r5, #29
 800169c:	d009      	beq.n	80016b2 <__aeabi_dsub+0x12a>
 800169e:	230f      	movs	r3, #15
 80016a0:	402b      	ands	r3, r5
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d005      	beq.n	80016b2 <__aeabi_dsub+0x12a>
 80016a6:	1d2b      	adds	r3, r5, #4
 80016a8:	42ab      	cmp	r3, r5
 80016aa:	41ad      	sbcs	r5, r5
 80016ac:	426d      	negs	r5, r5
 80016ae:	1964      	adds	r4, r4, r5
 80016b0:	001d      	movs	r5, r3
 80016b2:	0223      	lsls	r3, r4, #8
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dsub+0x130>
 80016b6:	e140      	b.n	800193a <__aeabi_dsub+0x3b2>
 80016b8:	4a88      	ldr	r2, [pc, #544]	@ (80018dc <__aeabi_dsub+0x354>)
 80016ba:	3701      	adds	r7, #1
 80016bc:	4297      	cmp	r7, r2
 80016be:	d100      	bne.n	80016c2 <__aeabi_dsub+0x13a>
 80016c0:	e101      	b.n	80018c6 <__aeabi_dsub+0x33e>
 80016c2:	2601      	movs	r6, #1
 80016c4:	4643      	mov	r3, r8
 80016c6:	4986      	ldr	r1, [pc, #536]	@ (80018e0 <__aeabi_dsub+0x358>)
 80016c8:	08ed      	lsrs	r5, r5, #3
 80016ca:	4021      	ands	r1, r4
 80016cc:	074a      	lsls	r2, r1, #29
 80016ce:	432a      	orrs	r2, r5
 80016d0:	057c      	lsls	r4, r7, #21
 80016d2:	024d      	lsls	r5, r1, #9
 80016d4:	0b2d      	lsrs	r5, r5, #12
 80016d6:	0d64      	lsrs	r4, r4, #21
 80016d8:	401e      	ands	r6, r3
 80016da:	0524      	lsls	r4, r4, #20
 80016dc:	432c      	orrs	r4, r5
 80016de:	07f6      	lsls	r6, r6, #31
 80016e0:	4334      	orrs	r4, r6
 80016e2:	0010      	movs	r0, r2
 80016e4:	0021      	movs	r1, r4
 80016e6:	b005      	add	sp, #20
 80016e8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ea:	46bb      	mov	fp, r7
 80016ec:	46b2      	mov	sl, r6
 80016ee:	46a9      	mov	r9, r5
 80016f0:	46a0      	mov	r8, r4
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_dsub+0x172>
 80016f8:	e2d0      	b.n	8001c9c <__aeabi_dsub+0x714>
 80016fa:	4649      	mov	r1, r9
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d000      	beq.n	8001702 <__aeabi_dsub+0x17a>
 8001700:	e0d4      	b.n	80018ac <__aeabi_dsub+0x324>
 8001702:	4661      	mov	r1, ip
 8001704:	9b02      	ldr	r3, [sp, #8]
 8001706:	4319      	orrs	r1, r3
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x184>
 800170a:	e12b      	b.n	8001964 <__aeabi_dsub+0x3dc>
 800170c:	1e69      	subs	r1, r5, #1
 800170e:	2d01      	cmp	r5, #1
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x18c>
 8001712:	e1d9      	b.n	8001ac8 <__aeabi_dsub+0x540>
 8001714:	4295      	cmp	r5, r2
 8001716:	d100      	bne.n	800171a <__aeabi_dsub+0x192>
 8001718:	e10a      	b.n	8001930 <__aeabi_dsub+0x3a8>
 800171a:	2501      	movs	r5, #1
 800171c:	2938      	cmp	r1, #56	@ 0x38
 800171e:	dc17      	bgt.n	8001750 <__aeabi_dsub+0x1c8>
 8001720:	468a      	mov	sl, r1
 8001722:	4653      	mov	r3, sl
 8001724:	2b1f      	cmp	r3, #31
 8001726:	dd00      	ble.n	800172a <__aeabi_dsub+0x1a2>
 8001728:	e1e7      	b.n	8001afa <__aeabi_dsub+0x572>
 800172a:	2220      	movs	r2, #32
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	9b02      	ldr	r3, [sp, #8]
 8001730:	4661      	mov	r1, ip
 8001732:	4093      	lsls	r3, r2
 8001734:	001d      	movs	r5, r3
 8001736:	4653      	mov	r3, sl
 8001738:	40d9      	lsrs	r1, r3
 800173a:	4663      	mov	r3, ip
 800173c:	4093      	lsls	r3, r2
 800173e:	001a      	movs	r2, r3
 8001740:	430d      	orrs	r5, r1
 8001742:	1e51      	subs	r1, r2, #1
 8001744:	418a      	sbcs	r2, r1
 8001746:	4653      	mov	r3, sl
 8001748:	4315      	orrs	r5, r2
 800174a:	9a02      	ldr	r2, [sp, #8]
 800174c:	40da      	lsrs	r2, r3
 800174e:	18a4      	adds	r4, r4, r2
 8001750:	182d      	adds	r5, r5, r0
 8001752:	4285      	cmp	r5, r0
 8001754:	4180      	sbcs	r0, r0
 8001756:	4240      	negs	r0, r0
 8001758:	1824      	adds	r4, r4, r0
 800175a:	0223      	lsls	r3, r4, #8
 800175c:	d400      	bmi.n	8001760 <__aeabi_dsub+0x1d8>
 800175e:	e0b6      	b.n	80018ce <__aeabi_dsub+0x346>
 8001760:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <__aeabi_dsub+0x354>)
 8001762:	3701      	adds	r7, #1
 8001764:	429f      	cmp	r7, r3
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x1e2>
 8001768:	e0ad      	b.n	80018c6 <__aeabi_dsub+0x33e>
 800176a:	2101      	movs	r1, #1
 800176c:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <__aeabi_dsub+0x358>)
 800176e:	086a      	lsrs	r2, r5, #1
 8001770:	401c      	ands	r4, r3
 8001772:	4029      	ands	r1, r5
 8001774:	430a      	orrs	r2, r1
 8001776:	07e5      	lsls	r5, r4, #31
 8001778:	4315      	orrs	r5, r2
 800177a:	0864      	lsrs	r4, r4, #1
 800177c:	e78d      	b.n	800169a <__aeabi_dsub+0x112>
 800177e:	4a59      	ldr	r2, [pc, #356]	@ (80018e4 <__aeabi_dsub+0x35c>)
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4692      	mov	sl, r2
 8001784:	4662      	mov	r2, ip
 8001786:	44ba      	add	sl, r7
 8001788:	431a      	orrs	r2, r3
 800178a:	d02c      	beq.n	80017e6 <__aeabi_dsub+0x25e>
 800178c:	428e      	cmp	r6, r1
 800178e:	d02e      	beq.n	80017ee <__aeabi_dsub+0x266>
 8001790:	4652      	mov	r2, sl
 8001792:	2a00      	cmp	r2, #0
 8001794:	d060      	beq.n	8001858 <__aeabi_dsub+0x2d0>
 8001796:	2f00      	cmp	r7, #0
 8001798:	d100      	bne.n	800179c <__aeabi_dsub+0x214>
 800179a:	e0db      	b.n	8001954 <__aeabi_dsub+0x3cc>
 800179c:	4663      	mov	r3, ip
 800179e:	000e      	movs	r6, r1
 80017a0:	9c02      	ldr	r4, [sp, #8]
 80017a2:	08d8      	lsrs	r0, r3, #3
 80017a4:	0762      	lsls	r2, r4, #29
 80017a6:	4302      	orrs	r2, r0
 80017a8:	08e4      	lsrs	r4, r4, #3
 80017aa:	0013      	movs	r3, r2
 80017ac:	4323      	orrs	r3, r4
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dsub+0x22a>
 80017b0:	e254      	b.n	8001c5c <__aeabi_dsub+0x6d4>
 80017b2:	2580      	movs	r5, #128	@ 0x80
 80017b4:	032d      	lsls	r5, r5, #12
 80017b6:	4325      	orrs	r5, r4
 80017b8:	032d      	lsls	r5, r5, #12
 80017ba:	4c48      	ldr	r4, [pc, #288]	@ (80018dc <__aeabi_dsub+0x354>)
 80017bc:	0b2d      	lsrs	r5, r5, #12
 80017be:	e78c      	b.n	80016da <__aeabi_dsub+0x152>
 80017c0:	4661      	mov	r1, ip
 80017c2:	9b02      	ldr	r3, [sp, #8]
 80017c4:	4319      	orrs	r1, r3
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x242>
 80017c8:	e0cc      	b.n	8001964 <__aeabi_dsub+0x3dc>
 80017ca:	0029      	movs	r1, r5
 80017cc:	3901      	subs	r1, #1
 80017ce:	2d01      	cmp	r5, #1
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x24c>
 80017d2:	e188      	b.n	8001ae6 <__aeabi_dsub+0x55e>
 80017d4:	4295      	cmp	r5, r2
 80017d6:	d100      	bne.n	80017da <__aeabi_dsub+0x252>
 80017d8:	e0aa      	b.n	8001930 <__aeabi_dsub+0x3a8>
 80017da:	2501      	movs	r5, #1
 80017dc:	2938      	cmp	r1, #56	@ 0x38
 80017de:	dd00      	ble.n	80017e2 <__aeabi_dsub+0x25a>
 80017e0:	e72f      	b.n	8001642 <__aeabi_dsub+0xba>
 80017e2:	468a      	mov	sl, r1
 80017e4:	e718      	b.n	8001618 <__aeabi_dsub+0x90>
 80017e6:	2201      	movs	r2, #1
 80017e8:	4051      	eors	r1, r2
 80017ea:	428e      	cmp	r6, r1
 80017ec:	d1d0      	bne.n	8001790 <__aeabi_dsub+0x208>
 80017ee:	4653      	mov	r3, sl
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x26e>
 80017f4:	e0be      	b.n	8001974 <__aeabi_dsub+0x3ec>
 80017f6:	2f00      	cmp	r7, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_dsub+0x274>
 80017fa:	e138      	b.n	8001a6e <__aeabi_dsub+0x4e6>
 80017fc:	46ca      	mov	sl, r9
 80017fe:	0022      	movs	r2, r4
 8001800:	4302      	orrs	r2, r0
 8001802:	d100      	bne.n	8001806 <__aeabi_dsub+0x27e>
 8001804:	e1e2      	b.n	8001bcc <__aeabi_dsub+0x644>
 8001806:	4653      	mov	r3, sl
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d100      	bne.n	8001810 <__aeabi_dsub+0x288>
 800180e:	e20d      	b.n	8001c2c <__aeabi_dsub+0x6a4>
 8001810:	4a32      	ldr	r2, [pc, #200]	@ (80018dc <__aeabi_dsub+0x354>)
 8001812:	4592      	cmp	sl, r2
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x290>
 8001816:	e1d2      	b.n	8001bbe <__aeabi_dsub+0x636>
 8001818:	2701      	movs	r7, #1
 800181a:	2938      	cmp	r1, #56	@ 0x38
 800181c:	dc13      	bgt.n	8001846 <__aeabi_dsub+0x2be>
 800181e:	291f      	cmp	r1, #31
 8001820:	dd00      	ble.n	8001824 <__aeabi_dsub+0x29c>
 8001822:	e1ee      	b.n	8001c02 <__aeabi_dsub+0x67a>
 8001824:	2220      	movs	r2, #32
 8001826:	9b02      	ldr	r3, [sp, #8]
 8001828:	1a52      	subs	r2, r2, r1
 800182a:	0025      	movs	r5, r4
 800182c:	0007      	movs	r7, r0
 800182e:	469a      	mov	sl, r3
 8001830:	40cc      	lsrs	r4, r1
 8001832:	4090      	lsls	r0, r2
 8001834:	4095      	lsls	r5, r2
 8001836:	40cf      	lsrs	r7, r1
 8001838:	44a2      	add	sl, r4
 800183a:	1e42      	subs	r2, r0, #1
 800183c:	4190      	sbcs	r0, r2
 800183e:	4653      	mov	r3, sl
 8001840:	432f      	orrs	r7, r5
 8001842:	4307      	orrs	r7, r0
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	003d      	movs	r5, r7
 8001848:	4465      	add	r5, ip
 800184a:	4565      	cmp	r5, ip
 800184c:	4192      	sbcs	r2, r2
 800184e:	9b02      	ldr	r3, [sp, #8]
 8001850:	4252      	negs	r2, r2
 8001852:	464f      	mov	r7, r9
 8001854:	18d4      	adds	r4, r2, r3
 8001856:	e780      	b.n	800175a <__aeabi_dsub+0x1d2>
 8001858:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <__aeabi_dsub+0x360>)
 800185a:	1c7d      	adds	r5, r7, #1
 800185c:	4215      	tst	r5, r2
 800185e:	d000      	beq.n	8001862 <__aeabi_dsub+0x2da>
 8001860:	e0aa      	b.n	80019b8 <__aeabi_dsub+0x430>
 8001862:	4662      	mov	r2, ip
 8001864:	0025      	movs	r5, r4
 8001866:	9b02      	ldr	r3, [sp, #8]
 8001868:	4305      	orrs	r5, r0
 800186a:	431a      	orrs	r2, r3
 800186c:	2f00      	cmp	r7, #0
 800186e:	d000      	beq.n	8001872 <__aeabi_dsub+0x2ea>
 8001870:	e0f5      	b.n	8001a5e <__aeabi_dsub+0x4d6>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dsub+0x2f0>
 8001876:	e16b      	b.n	8001b50 <__aeabi_dsub+0x5c8>
 8001878:	2a00      	cmp	r2, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dsub+0x2f6>
 800187c:	e152      	b.n	8001b24 <__aeabi_dsub+0x59c>
 800187e:	4663      	mov	r3, ip
 8001880:	1ac5      	subs	r5, r0, r3
 8001882:	9b02      	ldr	r3, [sp, #8]
 8001884:	1ae2      	subs	r2, r4, r3
 8001886:	42a8      	cmp	r0, r5
 8001888:	419b      	sbcs	r3, r3
 800188a:	425b      	negs	r3, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	021a      	lsls	r2, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dsub+0x30c>
 8001892:	e1d5      	b.n	8001c40 <__aeabi_dsub+0x6b8>
 8001894:	4663      	mov	r3, ip
 8001896:	1a1d      	subs	r5, r3, r0
 8001898:	45ac      	cmp	ip, r5
 800189a:	4192      	sbcs	r2, r2
 800189c:	2601      	movs	r6, #1
 800189e:	9b02      	ldr	r3, [sp, #8]
 80018a0:	4252      	negs	r2, r2
 80018a2:	1b1c      	subs	r4, r3, r4
 80018a4:	4688      	mov	r8, r1
 80018a6:	1aa4      	subs	r4, r4, r2
 80018a8:	400e      	ands	r6, r1
 80018aa:	e6f6      	b.n	800169a <__aeabi_dsub+0x112>
 80018ac:	4297      	cmp	r7, r2
 80018ae:	d03f      	beq.n	8001930 <__aeabi_dsub+0x3a8>
 80018b0:	4652      	mov	r2, sl
 80018b2:	2501      	movs	r5, #1
 80018b4:	2a38      	cmp	r2, #56	@ 0x38
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dsub+0x332>
 80018b8:	e74a      	b.n	8001750 <__aeabi_dsub+0x1c8>
 80018ba:	2280      	movs	r2, #128	@ 0x80
 80018bc:	9b02      	ldr	r3, [sp, #8]
 80018be:	0412      	lsls	r2, r2, #16
 80018c0:	4313      	orrs	r3, r2
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	e72d      	b.n	8001722 <__aeabi_dsub+0x19a>
 80018c6:	003c      	movs	r4, r7
 80018c8:	2500      	movs	r5, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	e705      	b.n	80016da <__aeabi_dsub+0x152>
 80018ce:	2307      	movs	r3, #7
 80018d0:	402b      	ands	r3, r5
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dsub+0x350>
 80018d6:	e6e2      	b.n	800169e <__aeabi_dsub+0x116>
 80018d8:	e06b      	b.n	80019b2 <__aeabi_dsub+0x42a>
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	ff7fffff 	.word	0xff7fffff
 80018e4:	fffff801 	.word	0xfffff801
 80018e8:	000007fe 	.word	0x000007fe
 80018ec:	0028      	movs	r0, r5
 80018ee:	f000 fab3 	bl	8001e58 <__clzsi2>
 80018f2:	0003      	movs	r3, r0
 80018f4:	3318      	adds	r3, #24
 80018f6:	2b1f      	cmp	r3, #31
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dsub+0x374>
 80018fa:	e6b4      	b.n	8001666 <__aeabi_dsub+0xde>
 80018fc:	002a      	movs	r2, r5
 80018fe:	3808      	subs	r0, #8
 8001900:	4082      	lsls	r2, r0
 8001902:	429f      	cmp	r7, r3
 8001904:	dd00      	ble.n	8001908 <__aeabi_dsub+0x380>
 8001906:	e0b9      	b.n	8001a7c <__aeabi_dsub+0x4f4>
 8001908:	1bdb      	subs	r3, r3, r7
 800190a:	1c58      	adds	r0, r3, #1
 800190c:	281f      	cmp	r0, #31
 800190e:	dc00      	bgt.n	8001912 <__aeabi_dsub+0x38a>
 8001910:	e1a0      	b.n	8001c54 <__aeabi_dsub+0x6cc>
 8001912:	0015      	movs	r5, r2
 8001914:	3b1f      	subs	r3, #31
 8001916:	40dd      	lsrs	r5, r3
 8001918:	2820      	cmp	r0, #32
 800191a:	d005      	beq.n	8001928 <__aeabi_dsub+0x3a0>
 800191c:	2340      	movs	r3, #64	@ 0x40
 800191e:	1a1b      	subs	r3, r3, r0
 8001920:	409a      	lsls	r2, r3
 8001922:	1e53      	subs	r3, r2, #1
 8001924:	419a      	sbcs	r2, r3
 8001926:	4315      	orrs	r5, r2
 8001928:	2307      	movs	r3, #7
 800192a:	2700      	movs	r7, #0
 800192c:	402b      	ands	r3, r5
 800192e:	e7d0      	b.n	80018d2 <__aeabi_dsub+0x34a>
 8001930:	08c0      	lsrs	r0, r0, #3
 8001932:	0762      	lsls	r2, r4, #29
 8001934:	4302      	orrs	r2, r0
 8001936:	08e4      	lsrs	r4, r4, #3
 8001938:	e737      	b.n	80017aa <__aeabi_dsub+0x222>
 800193a:	08ea      	lsrs	r2, r5, #3
 800193c:	0763      	lsls	r3, r4, #29
 800193e:	431a      	orrs	r2, r3
 8001940:	4bd3      	ldr	r3, [pc, #844]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001942:	08e4      	lsrs	r4, r4, #3
 8001944:	429f      	cmp	r7, r3
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x3c2>
 8001948:	e72f      	b.n	80017aa <__aeabi_dsub+0x222>
 800194a:	0324      	lsls	r4, r4, #12
 800194c:	0b25      	lsrs	r5, r4, #12
 800194e:	057c      	lsls	r4, r7, #21
 8001950:	0d64      	lsrs	r4, r4, #21
 8001952:	e6c2      	b.n	80016da <__aeabi_dsub+0x152>
 8001954:	46ca      	mov	sl, r9
 8001956:	0022      	movs	r2, r4
 8001958:	4302      	orrs	r2, r0
 800195a:	d158      	bne.n	8001a0e <__aeabi_dsub+0x486>
 800195c:	4663      	mov	r3, ip
 800195e:	000e      	movs	r6, r1
 8001960:	9c02      	ldr	r4, [sp, #8]
 8001962:	9303      	str	r3, [sp, #12]
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	4657      	mov	r7, sl
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	e7e7      	b.n	800193c <__aeabi_dsub+0x3b4>
 800196c:	4cc9      	ldr	r4, [pc, #804]	@ (8001c94 <__aeabi_dsub+0x70c>)
 800196e:	1aff      	subs	r7, r7, r3
 8001970:	4014      	ands	r4, r2
 8001972:	e692      	b.n	800169a <__aeabi_dsub+0x112>
 8001974:	4dc8      	ldr	r5, [pc, #800]	@ (8001c98 <__aeabi_dsub+0x710>)
 8001976:	1c7a      	adds	r2, r7, #1
 8001978:	422a      	tst	r2, r5
 800197a:	d000      	beq.n	800197e <__aeabi_dsub+0x3f6>
 800197c:	e084      	b.n	8001a88 <__aeabi_dsub+0x500>
 800197e:	0022      	movs	r2, r4
 8001980:	4302      	orrs	r2, r0
 8001982:	2f00      	cmp	r7, #0
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x400>
 8001986:	e0ef      	b.n	8001b68 <__aeabi_dsub+0x5e0>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d100      	bne.n	800198e <__aeabi_dsub+0x406>
 800198c:	e0e5      	b.n	8001b5a <__aeabi_dsub+0x5d2>
 800198e:	4662      	mov	r2, ip
 8001990:	9902      	ldr	r1, [sp, #8]
 8001992:	430a      	orrs	r2, r1
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x410>
 8001996:	e0c5      	b.n	8001b24 <__aeabi_dsub+0x59c>
 8001998:	4663      	mov	r3, ip
 800199a:	18c5      	adds	r5, r0, r3
 800199c:	468c      	mov	ip, r1
 800199e:	4285      	cmp	r5, r0
 80019a0:	4180      	sbcs	r0, r0
 80019a2:	4464      	add	r4, ip
 80019a4:	4240      	negs	r0, r0
 80019a6:	1824      	adds	r4, r4, r0
 80019a8:	0223      	lsls	r3, r4, #8
 80019aa:	d502      	bpl.n	80019b2 <__aeabi_dsub+0x42a>
 80019ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001c94 <__aeabi_dsub+0x70c>)
 80019ae:	3701      	adds	r7, #1
 80019b0:	401c      	ands	r4, r3
 80019b2:	46ba      	mov	sl, r7
 80019b4:	9503      	str	r5, [sp, #12]
 80019b6:	e7d5      	b.n	8001964 <__aeabi_dsub+0x3dc>
 80019b8:	4662      	mov	r2, ip
 80019ba:	1a85      	subs	r5, r0, r2
 80019bc:	42a8      	cmp	r0, r5
 80019be:	4192      	sbcs	r2, r2
 80019c0:	4252      	negs	r2, r2
 80019c2:	4691      	mov	r9, r2
 80019c4:	9b02      	ldr	r3, [sp, #8]
 80019c6:	1ae3      	subs	r3, r4, r3
 80019c8:	001a      	movs	r2, r3
 80019ca:	464b      	mov	r3, r9
 80019cc:	1ad2      	subs	r2, r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	4691      	mov	r9, r2
 80019d2:	021a      	lsls	r2, r3, #8
 80019d4:	d46c      	bmi.n	8001ab0 <__aeabi_dsub+0x528>
 80019d6:	464a      	mov	r2, r9
 80019d8:	464c      	mov	r4, r9
 80019da:	432a      	orrs	r2, r5
 80019dc:	d000      	beq.n	80019e0 <__aeabi_dsub+0x458>
 80019de:	e63a      	b.n	8001656 <__aeabi_dsub+0xce>
 80019e0:	2600      	movs	r6, #0
 80019e2:	2400      	movs	r4, #0
 80019e4:	2500      	movs	r5, #0
 80019e6:	e678      	b.n	80016da <__aeabi_dsub+0x152>
 80019e8:	9902      	ldr	r1, [sp, #8]
 80019ea:	4653      	mov	r3, sl
 80019ec:	000d      	movs	r5, r1
 80019ee:	3a20      	subs	r2, #32
 80019f0:	40d5      	lsrs	r5, r2
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d006      	beq.n	8001a04 <__aeabi_dsub+0x47c>
 80019f6:	2240      	movs	r2, #64	@ 0x40
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	000b      	movs	r3, r1
 80019fc:	4093      	lsls	r3, r2
 80019fe:	4662      	mov	r2, ip
 8001a00:	431a      	orrs	r2, r3
 8001a02:	4693      	mov	fp, r2
 8001a04:	465b      	mov	r3, fp
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	4193      	sbcs	r3, r2
 8001a0a:	431d      	orrs	r5, r3
 8001a0c:	e619      	b.n	8001642 <__aeabi_dsub+0xba>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x490>
 8001a16:	e0c6      	b.n	8001ba6 <__aeabi_dsub+0x61e>
 8001a18:	4e9d      	ldr	r6, [pc, #628]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001a1a:	45b2      	cmp	sl, r6
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x498>
 8001a1e:	e6bd      	b.n	800179c <__aeabi_dsub+0x214>
 8001a20:	4688      	mov	r8, r1
 8001a22:	000e      	movs	r6, r1
 8001a24:	2501      	movs	r5, #1
 8001a26:	2a38      	cmp	r2, #56	@ 0x38
 8001a28:	dc10      	bgt.n	8001a4c <__aeabi_dsub+0x4c4>
 8001a2a:	2a1f      	cmp	r2, #31
 8001a2c:	dc7f      	bgt.n	8001b2e <__aeabi_dsub+0x5a6>
 8001a2e:	2120      	movs	r1, #32
 8001a30:	0025      	movs	r5, r4
 8001a32:	1a89      	subs	r1, r1, r2
 8001a34:	0007      	movs	r7, r0
 8001a36:	4088      	lsls	r0, r1
 8001a38:	408d      	lsls	r5, r1
 8001a3a:	40d7      	lsrs	r7, r2
 8001a3c:	40d4      	lsrs	r4, r2
 8001a3e:	1e41      	subs	r1, r0, #1
 8001a40:	4188      	sbcs	r0, r1
 8001a42:	9b02      	ldr	r3, [sp, #8]
 8001a44:	433d      	orrs	r5, r7
 8001a46:	1b1b      	subs	r3, r3, r4
 8001a48:	4305      	orrs	r5, r0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	1b55      	subs	r5, r2, r5
 8001a50:	45ac      	cmp	ip, r5
 8001a52:	4192      	sbcs	r2, r2
 8001a54:	9b02      	ldr	r3, [sp, #8]
 8001a56:	4252      	negs	r2, r2
 8001a58:	464f      	mov	r7, r9
 8001a5a:	1a9c      	subs	r4, r3, r2
 8001a5c:	e5f6      	b.n	800164c <__aeabi_dsub+0xc4>
 8001a5e:	2d00      	cmp	r5, #0
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dsub+0x4dc>
 8001a62:	e0b7      	b.n	8001bd4 <__aeabi_dsub+0x64c>
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x4e2>
 8001a68:	e0f0      	b.n	8001c4c <__aeabi_dsub+0x6c4>
 8001a6a:	2601      	movs	r6, #1
 8001a6c:	400e      	ands	r6, r1
 8001a6e:	4663      	mov	r3, ip
 8001a70:	9802      	ldr	r0, [sp, #8]
 8001a72:	08d9      	lsrs	r1, r3, #3
 8001a74:	0742      	lsls	r2, r0, #29
 8001a76:	430a      	orrs	r2, r1
 8001a78:	08c4      	lsrs	r4, r0, #3
 8001a7a:	e696      	b.n	80017aa <__aeabi_dsub+0x222>
 8001a7c:	4c85      	ldr	r4, [pc, #532]	@ (8001c94 <__aeabi_dsub+0x70c>)
 8001a7e:	1aff      	subs	r7, r7, r3
 8001a80:	4014      	ands	r4, r2
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	08e4      	lsrs	r4, r4, #3
 8001a86:	e760      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001a88:	4981      	ldr	r1, [pc, #516]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x508>
 8001a8e:	e0c9      	b.n	8001c24 <__aeabi_dsub+0x69c>
 8001a90:	4663      	mov	r3, ip
 8001a92:	18c1      	adds	r1, r0, r3
 8001a94:	4281      	cmp	r1, r0
 8001a96:	4180      	sbcs	r0, r0
 8001a98:	9b02      	ldr	r3, [sp, #8]
 8001a9a:	4240      	negs	r0, r0
 8001a9c:	18e3      	adds	r3, r4, r3
 8001a9e:	181b      	adds	r3, r3, r0
 8001aa0:	07dd      	lsls	r5, r3, #31
 8001aa2:	085c      	lsrs	r4, r3, #1
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	0849      	lsrs	r1, r1, #1
 8001aa8:	430d      	orrs	r5, r1
 8001aaa:	0017      	movs	r7, r2
 8001aac:	402b      	ands	r3, r5
 8001aae:	e710      	b.n	80018d2 <__aeabi_dsub+0x34a>
 8001ab0:	4663      	mov	r3, ip
 8001ab2:	1a1d      	subs	r5, r3, r0
 8001ab4:	45ac      	cmp	ip, r5
 8001ab6:	4192      	sbcs	r2, r2
 8001ab8:	2601      	movs	r6, #1
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	4252      	negs	r2, r2
 8001abe:	1b1c      	subs	r4, r3, r4
 8001ac0:	4688      	mov	r8, r1
 8001ac2:	1aa4      	subs	r4, r4, r2
 8001ac4:	400e      	ands	r6, r1
 8001ac6:	e5c6      	b.n	8001656 <__aeabi_dsub+0xce>
 8001ac8:	4663      	mov	r3, ip
 8001aca:	18c5      	adds	r5, r0, r3
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	4285      	cmp	r5, r0
 8001ad0:	4180      	sbcs	r0, r0
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4240      	negs	r0, r0
 8001ad6:	4464      	add	r4, ip
 8001ad8:	1824      	adds	r4, r4, r0
 8001ada:	2701      	movs	r7, #1
 8001adc:	0223      	lsls	r3, r4, #8
 8001ade:	d400      	bmi.n	8001ae2 <__aeabi_dsub+0x55a>
 8001ae0:	e6f5      	b.n	80018ce <__aeabi_dsub+0x346>
 8001ae2:	2702      	movs	r7, #2
 8001ae4:	e641      	b.n	800176a <__aeabi_dsub+0x1e2>
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	1ac5      	subs	r5, r0, r3
 8001aea:	42a8      	cmp	r0, r5
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	9b02      	ldr	r3, [sp, #8]
 8001af0:	4240      	negs	r0, r0
 8001af2:	1ae4      	subs	r4, r4, r3
 8001af4:	2701      	movs	r7, #1
 8001af6:	1a24      	subs	r4, r4, r0
 8001af8:	e5a8      	b.n	800164c <__aeabi_dsub+0xc4>
 8001afa:	9d02      	ldr	r5, [sp, #8]
 8001afc:	4652      	mov	r2, sl
 8001afe:	002b      	movs	r3, r5
 8001b00:	3a20      	subs	r2, #32
 8001b02:	40d3      	lsrs	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	4653      	mov	r3, sl
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d006      	beq.n	8001b1a <__aeabi_dsub+0x592>
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	002b      	movs	r3, r5
 8001b12:	4093      	lsls	r3, r2
 8001b14:	4662      	mov	r2, ip
 8001b16:	431a      	orrs	r2, r3
 8001b18:	4693      	mov	fp, r2
 8001b1a:	465d      	mov	r5, fp
 8001b1c:	1e6b      	subs	r3, r5, #1
 8001b1e:	419d      	sbcs	r5, r3
 8001b20:	430d      	orrs	r5, r1
 8001b22:	e615      	b.n	8001750 <__aeabi_dsub+0x1c8>
 8001b24:	0762      	lsls	r2, r4, #29
 8001b26:	08c0      	lsrs	r0, r0, #3
 8001b28:	4302      	orrs	r2, r0
 8001b2a:	08e4      	lsrs	r4, r4, #3
 8001b2c:	e70d      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001b2e:	0011      	movs	r1, r2
 8001b30:	0027      	movs	r7, r4
 8001b32:	3920      	subs	r1, #32
 8001b34:	40cf      	lsrs	r7, r1
 8001b36:	2a20      	cmp	r2, #32
 8001b38:	d005      	beq.n	8001b46 <__aeabi_dsub+0x5be>
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	1a8a      	subs	r2, r1, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	0025      	movs	r5, r4
 8001b42:	4305      	orrs	r5, r0
 8001b44:	9503      	str	r5, [sp, #12]
 8001b46:	9d03      	ldr	r5, [sp, #12]
 8001b48:	1e6a      	subs	r2, r5, #1
 8001b4a:	4195      	sbcs	r5, r2
 8001b4c:	433d      	orrs	r5, r7
 8001b4e:	e77d      	b.n	8001a4c <__aeabi_dsub+0x4c4>
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x5ce>
 8001b54:	e744      	b.n	80019e0 <__aeabi_dsub+0x458>
 8001b56:	2601      	movs	r6, #1
 8001b58:	400e      	ands	r6, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	08d9      	lsrs	r1, r3, #3
 8001b5e:	9b02      	ldr	r3, [sp, #8]
 8001b60:	075a      	lsls	r2, r3, #29
 8001b62:	430a      	orrs	r2, r1
 8001b64:	08dc      	lsrs	r4, r3, #3
 8001b66:	e6f0      	b.n	800194a <__aeabi_dsub+0x3c2>
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	d028      	beq.n	8001bbe <__aeabi_dsub+0x636>
 8001b6c:	4662      	mov	r2, ip
 8001b6e:	9f02      	ldr	r7, [sp, #8]
 8001b70:	08c0      	lsrs	r0, r0, #3
 8001b72:	433a      	orrs	r2, r7
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x5f0>
 8001b76:	e6dc      	b.n	8001932 <__aeabi_dsub+0x3aa>
 8001b78:	0762      	lsls	r2, r4, #29
 8001b7a:	4310      	orrs	r0, r2
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	08e4      	lsrs	r4, r4, #3
 8001b80:	0312      	lsls	r2, r2, #12
 8001b82:	4214      	tst	r4, r2
 8001b84:	d009      	beq.n	8001b9a <__aeabi_dsub+0x612>
 8001b86:	08fd      	lsrs	r5, r7, #3
 8001b88:	4215      	tst	r5, r2
 8001b8a:	d106      	bne.n	8001b9a <__aeabi_dsub+0x612>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	2601      	movs	r6, #1
 8001b90:	002c      	movs	r4, r5
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	077b      	lsls	r3, r7, #29
 8001b96:	4318      	orrs	r0, r3
 8001b98:	400e      	ands	r6, r1
 8001b9a:	0f42      	lsrs	r2, r0, #29
 8001b9c:	00c0      	lsls	r0, r0, #3
 8001b9e:	08c0      	lsrs	r0, r0, #3
 8001ba0:	0752      	lsls	r2, r2, #29
 8001ba2:	4302      	orrs	r2, r0
 8001ba4:	e601      	b.n	80017aa <__aeabi_dsub+0x222>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	1a1d      	subs	r5, r3, r0
 8001baa:	45ac      	cmp	ip, r5
 8001bac:	4192      	sbcs	r2, r2
 8001bae:	9b02      	ldr	r3, [sp, #8]
 8001bb0:	4252      	negs	r2, r2
 8001bb2:	1b1c      	subs	r4, r3, r4
 8001bb4:	000e      	movs	r6, r1
 8001bb6:	4688      	mov	r8, r1
 8001bb8:	2701      	movs	r7, #1
 8001bba:	1aa4      	subs	r4, r4, r2
 8001bbc:	e546      	b.n	800164c <__aeabi_dsub+0xc4>
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	08d9      	lsrs	r1, r3, #3
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	075a      	lsls	r2, r3, #29
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	08dc      	lsrs	r4, r3, #3
 8001bca:	e5ee      	b.n	80017aa <__aeabi_dsub+0x222>
 8001bcc:	4663      	mov	r3, ip
 8001bce:	9c02      	ldr	r4, [sp, #8]
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	e6c7      	b.n	8001964 <__aeabi_dsub+0x3dc>
 8001bd4:	08c0      	lsrs	r0, r0, #3
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x654>
 8001bda:	e6aa      	b.n	8001932 <__aeabi_dsub+0x3aa>
 8001bdc:	0762      	lsls	r2, r4, #29
 8001bde:	4310      	orrs	r0, r2
 8001be0:	2280      	movs	r2, #128	@ 0x80
 8001be2:	08e4      	lsrs	r4, r4, #3
 8001be4:	0312      	lsls	r2, r2, #12
 8001be6:	4214      	tst	r4, r2
 8001be8:	d0d7      	beq.n	8001b9a <__aeabi_dsub+0x612>
 8001bea:	9f02      	ldr	r7, [sp, #8]
 8001bec:	08fd      	lsrs	r5, r7, #3
 8001bee:	4215      	tst	r5, r2
 8001bf0:	d1d3      	bne.n	8001b9a <__aeabi_dsub+0x612>
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	2601      	movs	r6, #1
 8001bf6:	08d8      	lsrs	r0, r3, #3
 8001bf8:	077b      	lsls	r3, r7, #29
 8001bfa:	002c      	movs	r4, r5
 8001bfc:	4318      	orrs	r0, r3
 8001bfe:	400e      	ands	r6, r1
 8001c00:	e7cb      	b.n	8001b9a <__aeabi_dsub+0x612>
 8001c02:	000a      	movs	r2, r1
 8001c04:	0027      	movs	r7, r4
 8001c06:	3a20      	subs	r2, #32
 8001c08:	40d7      	lsrs	r7, r2
 8001c0a:	2920      	cmp	r1, #32
 8001c0c:	d005      	beq.n	8001c1a <__aeabi_dsub+0x692>
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	1a52      	subs	r2, r2, r1
 8001c12:	4094      	lsls	r4, r2
 8001c14:	0025      	movs	r5, r4
 8001c16:	4305      	orrs	r5, r0
 8001c18:	9503      	str	r5, [sp, #12]
 8001c1a:	9d03      	ldr	r5, [sp, #12]
 8001c1c:	1e6a      	subs	r2, r5, #1
 8001c1e:	4195      	sbcs	r5, r2
 8001c20:	432f      	orrs	r7, r5
 8001c22:	e610      	b.n	8001846 <__aeabi_dsub+0x2be>
 8001c24:	0014      	movs	r4, r2
 8001c26:	2500      	movs	r5, #0
 8001c28:	2200      	movs	r2, #0
 8001c2a:	e556      	b.n	80016da <__aeabi_dsub+0x152>
 8001c2c:	9b02      	ldr	r3, [sp, #8]
 8001c2e:	4460      	add	r0, ip
 8001c30:	4699      	mov	r9, r3
 8001c32:	4560      	cmp	r0, ip
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	444c      	add	r4, r9
 8001c38:	4252      	negs	r2, r2
 8001c3a:	0005      	movs	r5, r0
 8001c3c:	18a4      	adds	r4, r4, r2
 8001c3e:	e74c      	b.n	8001ada <__aeabi_dsub+0x552>
 8001c40:	001a      	movs	r2, r3
 8001c42:	001c      	movs	r4, r3
 8001c44:	432a      	orrs	r2, r5
 8001c46:	d000      	beq.n	8001c4a <__aeabi_dsub+0x6c2>
 8001c48:	e6b3      	b.n	80019b2 <__aeabi_dsub+0x42a>
 8001c4a:	e6c9      	b.n	80019e0 <__aeabi_dsub+0x458>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	2600      	movs	r6, #0
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	e5ae      	b.n	80017b2 <__aeabi_dsub+0x22a>
 8001c54:	2120      	movs	r1, #32
 8001c56:	2500      	movs	r5, #0
 8001c58:	1a09      	subs	r1, r1, r0
 8001c5a:	e517      	b.n	800168c <__aeabi_dsub+0x104>
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2500      	movs	r5, #0
 8001c60:	4c0b      	ldr	r4, [pc, #44]	@ (8001c90 <__aeabi_dsub+0x708>)
 8001c62:	e53a      	b.n	80016da <__aeabi_dsub+0x152>
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x6e2>
 8001c68:	e5f6      	b.n	8001858 <__aeabi_dsub+0x2d0>
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	1bda      	subs	r2, r3, r7
 8001c6e:	4692      	mov	sl, r2
 8001c70:	2f00      	cmp	r7, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x6ee>
 8001c74:	e66f      	b.n	8001956 <__aeabi_dsub+0x3ce>
 8001c76:	2a38      	cmp	r2, #56	@ 0x38
 8001c78:	dc05      	bgt.n	8001c86 <__aeabi_dsub+0x6fe>
 8001c7a:	2680      	movs	r6, #128	@ 0x80
 8001c7c:	0436      	lsls	r6, r6, #16
 8001c7e:	4334      	orrs	r4, r6
 8001c80:	4688      	mov	r8, r1
 8001c82:	000e      	movs	r6, r1
 8001c84:	e6d1      	b.n	8001a2a <__aeabi_dsub+0x4a2>
 8001c86:	4688      	mov	r8, r1
 8001c88:	000e      	movs	r6, r1
 8001c8a:	2501      	movs	r5, #1
 8001c8c:	e6de      	b.n	8001a4c <__aeabi_dsub+0x4c4>
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	ff7fffff 	.word	0xff7fffff
 8001c98:	000007fe 	.word	0x000007fe
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x71a>
 8001ca0:	e668      	b.n	8001974 <__aeabi_dsub+0x3ec>
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	1bd9      	subs	r1, r3, r7
 8001ca6:	2f00      	cmp	r7, #0
 8001ca8:	d101      	bne.n	8001cae <__aeabi_dsub+0x726>
 8001caa:	468a      	mov	sl, r1
 8001cac:	e5a7      	b.n	80017fe <__aeabi_dsub+0x276>
 8001cae:	2701      	movs	r7, #1
 8001cb0:	2938      	cmp	r1, #56	@ 0x38
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dsub+0x72e>
 8001cb4:	e5c7      	b.n	8001846 <__aeabi_dsub+0x2be>
 8001cb6:	2280      	movs	r2, #128	@ 0x80
 8001cb8:	0412      	lsls	r2, r2, #16
 8001cba:	4314      	orrs	r4, r2
 8001cbc:	e5af      	b.n	800181e <__aeabi_dsub+0x296>
 8001cbe:	46c0      	nop			@ (mov r8, r8)

08001cc0 <__aeabi_d2iz>:
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	b570      	push	{r4, r5, r6, lr}
 8001cc6:	4d16      	ldr	r5, [pc, #88]	@ (8001d20 <__aeabi_d2iz+0x60>)
 8001cc8:	030c      	lsls	r4, r1, #12
 8001cca:	b082      	sub	sp, #8
 8001ccc:	0049      	lsls	r1, r1, #1
 8001cce:	2000      	movs	r0, #0
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	0d49      	lsrs	r1, r1, #21
 8001cd8:	0fde      	lsrs	r6, r3, #31
 8001cda:	42a9      	cmp	r1, r5
 8001cdc:	dd04      	ble.n	8001ce8 <__aeabi_d2iz+0x28>
 8001cde:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <__aeabi_d2iz+0x64>)
 8001ce0:	4281      	cmp	r1, r0
 8001ce2:	dd03      	ble.n	8001cec <__aeabi_d2iz+0x2c>
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <__aeabi_d2iz+0x68>)
 8001ce6:	18f0      	adds	r0, r6, r3
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	2080      	movs	r0, #128	@ 0x80
 8001cee:	0340      	lsls	r0, r0, #13
 8001cf0:	4320      	orrs	r0, r4
 8001cf2:	4c0e      	ldr	r4, [pc, #56]	@ (8001d2c <__aeabi_d2iz+0x6c>)
 8001cf4:	1a64      	subs	r4, r4, r1
 8001cf6:	2c1f      	cmp	r4, #31
 8001cf8:	dd08      	ble.n	8001d0c <__aeabi_d2iz+0x4c>
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <__aeabi_d2iz+0x70>)
 8001cfc:	1a5b      	subs	r3, r3, r1
 8001cfe:	40d8      	lsrs	r0, r3
 8001d00:	0003      	movs	r3, r0
 8001d02:	4258      	negs	r0, r3
 8001d04:	2e00      	cmp	r6, #0
 8001d06:	d1ef      	bne.n	8001ce8 <__aeabi_d2iz+0x28>
 8001d08:	0018      	movs	r0, r3
 8001d0a:	e7ed      	b.n	8001ce8 <__aeabi_d2iz+0x28>
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <__aeabi_d2iz+0x74>)
 8001d0e:	9a00      	ldr	r2, [sp, #0]
 8001d10:	469c      	mov	ip, r3
 8001d12:	0003      	movs	r3, r0
 8001d14:	4461      	add	r1, ip
 8001d16:	408b      	lsls	r3, r1
 8001d18:	40e2      	lsrs	r2, r4
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	e7f1      	b.n	8001d02 <__aeabi_d2iz+0x42>
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	000003fe 	.word	0x000003fe
 8001d24:	0000041d 	.word	0x0000041d
 8001d28:	7fffffff 	.word	0x7fffffff
 8001d2c:	00000433 	.word	0x00000433
 8001d30:	00000413 	.word	0x00000413
 8001d34:	fffffbed 	.word	0xfffffbed

08001d38 <__aeabi_i2d>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d016      	beq.n	8001d6c <__aeabi_i2d+0x34>
 8001d3e:	17c3      	asrs	r3, r0, #31
 8001d40:	18c5      	adds	r5, r0, r3
 8001d42:	405d      	eors	r5, r3
 8001d44:	0fc4      	lsrs	r4, r0, #31
 8001d46:	0028      	movs	r0, r5
 8001d48:	f000 f886 	bl	8001e58 <__clzsi2>
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <__aeabi_i2d+0x58>)
 8001d4e:	1a1b      	subs	r3, r3, r0
 8001d50:	055b      	lsls	r3, r3, #21
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	280a      	cmp	r0, #10
 8001d56:	dc14      	bgt.n	8001d82 <__aeabi_i2d+0x4a>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	002e      	movs	r6, r5
 8001d5c:	3215      	adds	r2, #21
 8001d5e:	4096      	lsls	r6, r2
 8001d60:	220b      	movs	r2, #11
 8001d62:	1a12      	subs	r2, r2, r0
 8001d64:	40d5      	lsrs	r5, r2
 8001d66:	032d      	lsls	r5, r5, #12
 8001d68:	0b2d      	lsrs	r5, r5, #12
 8001d6a:	e003      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	2600      	movs	r6, #0
 8001d74:	051b      	lsls	r3, r3, #20
 8001d76:	432b      	orrs	r3, r5
 8001d78:	07e4      	lsls	r4, r4, #31
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0019      	movs	r1, r3
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	380b      	subs	r0, #11
 8001d84:	4085      	lsls	r5, r0
 8001d86:	032d      	lsls	r5, r5, #12
 8001d88:	2600      	movs	r6, #0
 8001d8a:	0b2d      	lsrs	r5, r5, #12
 8001d8c:	e7f2      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	0000041e 	.word	0x0000041e

08001d94 <__aeabi_ui2d>:
 8001d94:	b510      	push	{r4, lr}
 8001d96:	1e04      	subs	r4, r0, #0
 8001d98:	d010      	beq.n	8001dbc <__aeabi_ui2d+0x28>
 8001d9a:	f000 f85d 	bl	8001e58 <__clzsi2>
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <__aeabi_ui2d+0x44>)
 8001da0:	1a1b      	subs	r3, r3, r0
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	280a      	cmp	r0, #10
 8001da8:	dc0f      	bgt.n	8001dca <__aeabi_ui2d+0x36>
 8001daa:	220b      	movs	r2, #11
 8001dac:	0021      	movs	r1, r4
 8001dae:	1a12      	subs	r2, r2, r0
 8001db0:	40d1      	lsrs	r1, r2
 8001db2:	3015      	adds	r0, #21
 8001db4:	030a      	lsls	r2, r1, #12
 8001db6:	4084      	lsls	r4, r0
 8001db8:	0b12      	lsrs	r2, r2, #12
 8001dba:	e001      	b.n	8001dc0 <__aeabi_ui2d+0x2c>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	0020      	movs	r0, r4
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	0022      	movs	r2, r4
 8001dcc:	380b      	subs	r0, #11
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	0312      	lsls	r2, r2, #12
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	0b12      	lsrs	r2, r2, #12
 8001dd6:	e7f3      	b.n	8001dc0 <__aeabi_ui2d+0x2c>
 8001dd8:	0000041e 	.word	0x0000041e

08001ddc <__aeabi_cdrcmple>:
 8001ddc:	4684      	mov	ip, r0
 8001dde:	0010      	movs	r0, r2
 8001de0:	4662      	mov	r2, ip
 8001de2:	468c      	mov	ip, r1
 8001de4:	0019      	movs	r1, r3
 8001de6:	4663      	mov	r3, ip
 8001de8:	e000      	b.n	8001dec <__aeabi_cdcmpeq>
 8001dea:	46c0      	nop			@ (mov r8, r8)

08001dec <__aeabi_cdcmpeq>:
 8001dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001dee:	f000 f909 	bl	8002004 <__ledf2>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d401      	bmi.n	8001dfa <__aeabi_cdcmpeq+0xe>
 8001df6:	2100      	movs	r1, #0
 8001df8:	42c8      	cmn	r0, r1
 8001dfa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001dfc <__aeabi_dcmpeq>:
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	f000 f849 	bl	8001e94 <__eqdf2>
 8001e02:	4240      	negs	r0, r0
 8001e04:	3001      	adds	r0, #1
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <__aeabi_dcmplt>:
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	f000 f8fb 	bl	8002004 <__ledf2>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	db01      	blt.n	8001e16 <__aeabi_dcmplt+0xe>
 8001e12:	2000      	movs	r0, #0
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	2001      	movs	r0, #1
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)

08001e1c <__aeabi_dcmple>:
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	f000 f8f1 	bl	8002004 <__ledf2>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	dd01      	ble.n	8001e2a <__aeabi_dcmple+0xe>
 8001e26:	2000      	movs	r0, #0
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)

08001e30 <__aeabi_dcmpgt>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	f000 f873 	bl	8001f1c <__gedf2>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	dc01      	bgt.n	8001e3e <__aeabi_dcmpgt+0xe>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	2001      	movs	r0, #1
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)

08001e44 <__aeabi_dcmpge>:
 8001e44:	b510      	push	{r4, lr}
 8001e46:	f000 f869 	bl	8001f1c <__gedf2>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	da01      	bge.n	8001e52 <__aeabi_dcmpge+0xe>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	2001      	movs	r0, #1
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)

08001e58 <__clzsi2>:
 8001e58:	211c      	movs	r1, #28
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	4298      	cmp	r0, r3
 8001e60:	d301      	bcc.n	8001e66 <__clzsi2+0xe>
 8001e62:	0c00      	lsrs	r0, r0, #16
 8001e64:	3910      	subs	r1, #16
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d301      	bcc.n	8001e70 <__clzsi2+0x18>
 8001e6c:	0a00      	lsrs	r0, r0, #8
 8001e6e:	3908      	subs	r1, #8
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	4298      	cmp	r0, r3
 8001e74:	d301      	bcc.n	8001e7a <__clzsi2+0x22>
 8001e76:	0900      	lsrs	r0, r0, #4
 8001e78:	3904      	subs	r1, #4
 8001e7a:	a202      	add	r2, pc, #8	@ (adr r2, 8001e84 <__clzsi2+0x2c>)
 8001e7c:	5c10      	ldrb	r0, [r2, r0]
 8001e7e:	1840      	adds	r0, r0, r1
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	02020304 	.word	0x02020304
 8001e88:	01010101 	.word	0x01010101
	...

08001e94 <__eqdf2>:
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e96:	4657      	mov	r7, sl
 8001e98:	46de      	mov	lr, fp
 8001e9a:	464e      	mov	r6, r9
 8001e9c:	4645      	mov	r5, r8
 8001e9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ea0:	000d      	movs	r5, r1
 8001ea2:	0004      	movs	r4, r0
 8001ea4:	0fe8      	lsrs	r0, r5, #31
 8001ea6:	4683      	mov	fp, r0
 8001ea8:	0309      	lsls	r1, r1, #12
 8001eaa:	0fd8      	lsrs	r0, r3, #31
 8001eac:	0b09      	lsrs	r1, r1, #12
 8001eae:	4682      	mov	sl, r0
 8001eb0:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <__eqdf2+0x84>)
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	031f      	lsls	r7, r3, #12
 8001eb6:	0069      	lsls	r1, r5, #1
 8001eb8:	005e      	lsls	r6, r3, #1
 8001eba:	0d49      	lsrs	r1, r1, #21
 8001ebc:	0b3f      	lsrs	r7, r7, #12
 8001ebe:	0d76      	lsrs	r6, r6, #21
 8001ec0:	4281      	cmp	r1, r0
 8001ec2:	d018      	beq.n	8001ef6 <__eqdf2+0x62>
 8001ec4:	4286      	cmp	r6, r0
 8001ec6:	d00f      	beq.n	8001ee8 <__eqdf2+0x54>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	42b1      	cmp	r1, r6
 8001ecc:	d10d      	bne.n	8001eea <__eqdf2+0x56>
 8001ece:	45bc      	cmp	ip, r7
 8001ed0:	d10b      	bne.n	8001eea <__eqdf2+0x56>
 8001ed2:	4294      	cmp	r4, r2
 8001ed4:	d109      	bne.n	8001eea <__eqdf2+0x56>
 8001ed6:	45d3      	cmp	fp, sl
 8001ed8:	d01c      	beq.n	8001f14 <__eqdf2+0x80>
 8001eda:	2900      	cmp	r1, #0
 8001edc:	d105      	bne.n	8001eea <__eqdf2+0x56>
 8001ede:	4660      	mov	r0, ip
 8001ee0:	4320      	orrs	r0, r4
 8001ee2:	1e43      	subs	r3, r0, #1
 8001ee4:	4198      	sbcs	r0, r3
 8001ee6:	e000      	b.n	8001eea <__eqdf2+0x56>
 8001ee8:	2001      	movs	r0, #1
 8001eea:	bcf0      	pop	{r4, r5, r6, r7}
 8001eec:	46bb      	mov	fp, r7
 8001eee:	46b2      	mov	sl, r6
 8001ef0:	46a9      	mov	r9, r5
 8001ef2:	46a0      	mov	r8, r4
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	428e      	cmp	r6, r1
 8001efa:	d1f6      	bne.n	8001eea <__eqdf2+0x56>
 8001efc:	4661      	mov	r1, ip
 8001efe:	4339      	orrs	r1, r7
 8001f00:	000f      	movs	r7, r1
 8001f02:	4317      	orrs	r7, r2
 8001f04:	4327      	orrs	r7, r4
 8001f06:	d1f0      	bne.n	8001eea <__eqdf2+0x56>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	1a98      	subs	r0, r3, r2
 8001f0e:	1e43      	subs	r3, r0, #1
 8001f10:	4198      	sbcs	r0, r3
 8001f12:	e7ea      	b.n	8001eea <__eqdf2+0x56>
 8001f14:	2000      	movs	r0, #0
 8001f16:	e7e8      	b.n	8001eea <__eqdf2+0x56>
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__gedf2>:
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	4657      	mov	r7, sl
 8001f20:	464e      	mov	r6, r9
 8001f22:	4645      	mov	r5, r8
 8001f24:	46de      	mov	lr, fp
 8001f26:	b5e0      	push	{r5, r6, r7, lr}
 8001f28:	000d      	movs	r5, r1
 8001f2a:	030f      	lsls	r7, r1, #12
 8001f2c:	0b39      	lsrs	r1, r7, #12
 8001f2e:	b083      	sub	sp, #12
 8001f30:	0004      	movs	r4, r0
 8001f32:	4680      	mov	r8, r0
 8001f34:	9101      	str	r1, [sp, #4]
 8001f36:	0058      	lsls	r0, r3, #1
 8001f38:	0fe9      	lsrs	r1, r5, #31
 8001f3a:	4f31      	ldr	r7, [pc, #196]	@ (8002000 <__gedf2+0xe4>)
 8001f3c:	0d40      	lsrs	r0, r0, #21
 8001f3e:	468c      	mov	ip, r1
 8001f40:	006e      	lsls	r6, r5, #1
 8001f42:	0319      	lsls	r1, r3, #12
 8001f44:	4682      	mov	sl, r0
 8001f46:	4691      	mov	r9, r2
 8001f48:	0d76      	lsrs	r6, r6, #21
 8001f4a:	0b09      	lsrs	r1, r1, #12
 8001f4c:	0fd8      	lsrs	r0, r3, #31
 8001f4e:	42be      	cmp	r6, r7
 8001f50:	d01f      	beq.n	8001f92 <__gedf2+0x76>
 8001f52:	45ba      	cmp	sl, r7
 8001f54:	d00f      	beq.n	8001f76 <__gedf2+0x5a>
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d12f      	bne.n	8001fba <__gedf2+0x9e>
 8001f5a:	4655      	mov	r5, sl
 8001f5c:	9e01      	ldr	r6, [sp, #4]
 8001f5e:	4334      	orrs	r4, r6
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	d127      	bne.n	8001fb4 <__gedf2+0x98>
 8001f64:	430a      	orrs	r2, r1
 8001f66:	d03a      	beq.n	8001fde <__gedf2+0xc2>
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d145      	bne.n	8001ff8 <__gedf2+0xdc>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d11a      	bne.n	8001fa6 <__gedf2+0x8a>
 8001f70:	2001      	movs	r0, #1
 8001f72:	4240      	negs	r0, r0
 8001f74:	e017      	b.n	8001fa6 <__gedf2+0x8a>
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d13b      	bne.n	8001ff2 <__gedf2+0xd6>
 8001f7a:	2e00      	cmp	r6, #0
 8001f7c:	d102      	bne.n	8001f84 <__gedf2+0x68>
 8001f7e:	9f01      	ldr	r7, [sp, #4]
 8001f80:	4327      	orrs	r7, r4
 8001f82:	d0f3      	beq.n	8001f6c <__gedf2+0x50>
 8001f84:	4584      	cmp	ip, r0
 8001f86:	d109      	bne.n	8001f9c <__gedf2+0x80>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <__gedf2+0x54>
 8001f8e:	4660      	mov	r0, ip
 8001f90:	e009      	b.n	8001fa6 <__gedf2+0x8a>
 8001f92:	9f01      	ldr	r7, [sp, #4]
 8001f94:	4327      	orrs	r7, r4
 8001f96:	d12c      	bne.n	8001ff2 <__gedf2+0xd6>
 8001f98:	45b2      	cmp	sl, r6
 8001f9a:	d024      	beq.n	8001fe6 <__gedf2+0xca>
 8001f9c:	4663      	mov	r3, ip
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4018      	ands	r0, r3
 8001fa4:	3801      	subs	r0, #1
 8001fa6:	b003      	add	sp, #12
 8001fa8:	bcf0      	pop	{r4, r5, r6, r7}
 8001faa:	46bb      	mov	fp, r7
 8001fac:	46b2      	mov	sl, r6
 8001fae:	46a9      	mov	r9, r5
 8001fb0:	46a0      	mov	r8, r4
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d0d9      	beq.n	8001f6c <__gedf2+0x50>
 8001fb8:	e7e4      	b.n	8001f84 <__gedf2+0x68>
 8001fba:	4654      	mov	r4, sl
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d0ed      	beq.n	8001f9c <__gedf2+0x80>
 8001fc0:	4584      	cmp	ip, r0
 8001fc2:	d1eb      	bne.n	8001f9c <__gedf2+0x80>
 8001fc4:	4556      	cmp	r6, sl
 8001fc6:	dce9      	bgt.n	8001f9c <__gedf2+0x80>
 8001fc8:	dbde      	blt.n	8001f88 <__gedf2+0x6c>
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d8e5      	bhi.n	8001f9c <__gedf2+0x80>
 8001fd0:	d1da      	bne.n	8001f88 <__gedf2+0x6c>
 8001fd2:	45c8      	cmp	r8, r9
 8001fd4:	d8e2      	bhi.n	8001f9c <__gedf2+0x80>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	45c8      	cmp	r8, r9
 8001fda:	d2e4      	bcs.n	8001fa6 <__gedf2+0x8a>
 8001fdc:	e7d4      	b.n	8001f88 <__gedf2+0x6c>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	2c00      	cmp	r4, #0
 8001fe2:	d0e0      	beq.n	8001fa6 <__gedf2+0x8a>
 8001fe4:	e7da      	b.n	8001f9c <__gedf2+0x80>
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	d103      	bne.n	8001ff2 <__gedf2+0xd6>
 8001fea:	4584      	cmp	ip, r0
 8001fec:	d1d6      	bne.n	8001f9c <__gedf2+0x80>
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e7d9      	b.n	8001fa6 <__gedf2+0x8a>
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	e7d6      	b.n	8001fa6 <__gedf2+0x8a>
 8001ff8:	4584      	cmp	ip, r0
 8001ffa:	d0e6      	beq.n	8001fca <__gedf2+0xae>
 8001ffc:	e7ce      	b.n	8001f9c <__gedf2+0x80>
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	000007ff 	.word	0x000007ff

08002004 <__ledf2>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	4657      	mov	r7, sl
 8002008:	464e      	mov	r6, r9
 800200a:	4645      	mov	r5, r8
 800200c:	46de      	mov	lr, fp
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	000d      	movs	r5, r1
 8002012:	030f      	lsls	r7, r1, #12
 8002014:	0004      	movs	r4, r0
 8002016:	4680      	mov	r8, r0
 8002018:	0fe8      	lsrs	r0, r5, #31
 800201a:	0b39      	lsrs	r1, r7, #12
 800201c:	4684      	mov	ip, r0
 800201e:	b083      	sub	sp, #12
 8002020:	0058      	lsls	r0, r3, #1
 8002022:	4f30      	ldr	r7, [pc, #192]	@ (80020e4 <__ledf2+0xe0>)
 8002024:	0d40      	lsrs	r0, r0, #21
 8002026:	9101      	str	r1, [sp, #4]
 8002028:	031e      	lsls	r6, r3, #12
 800202a:	0069      	lsls	r1, r5, #1
 800202c:	4682      	mov	sl, r0
 800202e:	4691      	mov	r9, r2
 8002030:	0d49      	lsrs	r1, r1, #21
 8002032:	0b36      	lsrs	r6, r6, #12
 8002034:	0fd8      	lsrs	r0, r3, #31
 8002036:	42b9      	cmp	r1, r7
 8002038:	d020      	beq.n	800207c <__ledf2+0x78>
 800203a:	45ba      	cmp	sl, r7
 800203c:	d00f      	beq.n	800205e <__ledf2+0x5a>
 800203e:	2900      	cmp	r1, #0
 8002040:	d12b      	bne.n	800209a <__ledf2+0x96>
 8002042:	9901      	ldr	r1, [sp, #4]
 8002044:	430c      	orrs	r4, r1
 8002046:	4651      	mov	r1, sl
 8002048:	2900      	cmp	r1, #0
 800204a:	d137      	bne.n	80020bc <__ledf2+0xb8>
 800204c:	4332      	orrs	r2, r6
 800204e:	d038      	beq.n	80020c2 <__ledf2+0xbe>
 8002050:	2c00      	cmp	r4, #0
 8002052:	d144      	bne.n	80020de <__ledf2+0xda>
 8002054:	2800      	cmp	r0, #0
 8002056:	d119      	bne.n	800208c <__ledf2+0x88>
 8002058:	2001      	movs	r0, #1
 800205a:	4240      	negs	r0, r0
 800205c:	e016      	b.n	800208c <__ledf2+0x88>
 800205e:	4316      	orrs	r6, r2
 8002060:	d113      	bne.n	800208a <__ledf2+0x86>
 8002062:	2900      	cmp	r1, #0
 8002064:	d102      	bne.n	800206c <__ledf2+0x68>
 8002066:	9f01      	ldr	r7, [sp, #4]
 8002068:	4327      	orrs	r7, r4
 800206a:	d0f3      	beq.n	8002054 <__ledf2+0x50>
 800206c:	4584      	cmp	ip, r0
 800206e:	d020      	beq.n	80020b2 <__ledf2+0xae>
 8002070:	4663      	mov	r3, ip
 8002072:	2002      	movs	r0, #2
 8002074:	3b01      	subs	r3, #1
 8002076:	4018      	ands	r0, r3
 8002078:	3801      	subs	r0, #1
 800207a:	e007      	b.n	800208c <__ledf2+0x88>
 800207c:	9f01      	ldr	r7, [sp, #4]
 800207e:	4327      	orrs	r7, r4
 8002080:	d103      	bne.n	800208a <__ledf2+0x86>
 8002082:	458a      	cmp	sl, r1
 8002084:	d1f4      	bne.n	8002070 <__ledf2+0x6c>
 8002086:	4316      	orrs	r6, r2
 8002088:	d01f      	beq.n	80020ca <__ledf2+0xc6>
 800208a:	2002      	movs	r0, #2
 800208c:	b003      	add	sp, #12
 800208e:	bcf0      	pop	{r4, r5, r6, r7}
 8002090:	46bb      	mov	fp, r7
 8002092:	46b2      	mov	sl, r6
 8002094:	46a9      	mov	r9, r5
 8002096:	46a0      	mov	r8, r4
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209a:	4654      	mov	r4, sl
 800209c:	2c00      	cmp	r4, #0
 800209e:	d0e7      	beq.n	8002070 <__ledf2+0x6c>
 80020a0:	4584      	cmp	ip, r0
 80020a2:	d1e5      	bne.n	8002070 <__ledf2+0x6c>
 80020a4:	4551      	cmp	r1, sl
 80020a6:	dce3      	bgt.n	8002070 <__ledf2+0x6c>
 80020a8:	db03      	blt.n	80020b2 <__ledf2+0xae>
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	42b3      	cmp	r3, r6
 80020ae:	d8df      	bhi.n	8002070 <__ledf2+0x6c>
 80020b0:	d00f      	beq.n	80020d2 <__ledf2+0xce>
 80020b2:	4663      	mov	r3, ip
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0cf      	beq.n	8002058 <__ledf2+0x54>
 80020b8:	4660      	mov	r0, ip
 80020ba:	e7e7      	b.n	800208c <__ledf2+0x88>
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d0c9      	beq.n	8002054 <__ledf2+0x50>
 80020c0:	e7d4      	b.n	800206c <__ledf2+0x68>
 80020c2:	2000      	movs	r0, #0
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d0e1      	beq.n	800208c <__ledf2+0x88>
 80020c8:	e7d2      	b.n	8002070 <__ledf2+0x6c>
 80020ca:	4584      	cmp	ip, r0
 80020cc:	d1d0      	bne.n	8002070 <__ledf2+0x6c>
 80020ce:	2000      	movs	r0, #0
 80020d0:	e7dc      	b.n	800208c <__ledf2+0x88>
 80020d2:	45c8      	cmp	r8, r9
 80020d4:	d8cc      	bhi.n	8002070 <__ledf2+0x6c>
 80020d6:	2000      	movs	r0, #0
 80020d8:	45c8      	cmp	r8, r9
 80020da:	d2d7      	bcs.n	800208c <__ledf2+0x88>
 80020dc:	e7e9      	b.n	80020b2 <__ledf2+0xae>
 80020de:	4584      	cmp	ip, r0
 80020e0:	d0e3      	beq.n	80020aa <__ledf2+0xa6>
 80020e2:	e7c5      	b.n	8002070 <__ledf2+0x6c>
 80020e4:	000007ff 	.word	0x000007ff

080020e8 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b094      	sub	sp, #80	@ 0x50
 80020ec:	af00      	add	r7, sp, #0
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80020ee:	f00a fc59 	bl	800c9a4 <reset_DW1000>
    port_set_dw1000_slowrate();
 80020f2:	f00a fcc3 	bl	800ca7c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80020f6:	2001      	movs	r0, #1
 80020f8:	f009 fb40 	bl	800b77c <dwt_initialise>
 80020fc:	0003      	movs	r3, r0
 80020fe:	3301      	adds	r3, #1
 8002100:	d101      	bne.n	8002106 <dw_main+0x1e>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	e7fd      	b.n	8002102 <dw_main+0x1a>
        { };
    }
    port_set_dw1000_fastrate();
 8002106:	f00a fcc7 	bl	800ca98 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 800210a:	4bbf      	ldr	r3, [pc, #764]	@ (8002408 <dw_main+0x320>)
 800210c:	0018      	movs	r0, r3
 800210e:	f009 fc93 	bl	800ba38 <dwt_configure>

    // dwt_setdblrxbuffmode(1);

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002112:	4bbe      	ldr	r3, [pc, #760]	@ (800240c <dw_main+0x324>)
 8002114:	0018      	movs	r0, r3
 8002116:	f009 fe33 	bl	800bd80 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800211a:	4bbc      	ldr	r3, [pc, #752]	@ (800240c <dw_main+0x324>)
 800211c:	0018      	movs	r0, r3
 800211e:	f009 fe43 	bl	800bda8 <dwt_settxantennadelay>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002122:	2000      	movs	r0, #0
 8002124:	f00a fa5c 	bl	800c5e0 <dwt_setrxtimeout>

        int i;

        for (i = 0 ; i < RX_BUF_LEN; i++ )
 8002128:	2300      	movs	r3, #0
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800212c:	e007      	b.n	800213e <dw_main+0x56>
        {
            rx_buffer[i] = 0;
 800212e:	4ab8      	ldr	r2, [pc, #736]	@ (8002410 <dw_main+0x328>)
 8002130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < RX_BUF_LEN; i++ )
 8002138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800213a:	3301      	adds	r3, #1
 800213c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800213e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002140:	2b17      	cmp	r3, #23
 8002142:	ddf4      	ble.n	800212e <dw_main+0x46>
        }

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002144:	2000      	movs	r0, #0
 8002146:	f00a fa03 	bl	800c550 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	2100      	movs	r1, #0
 800214e:	200f      	movs	r0, #15
 8002150:	f009 ff7a 	bl	800c048 <dwt_read32bitoffsetreg>
 8002154:	0002      	movs	r2, r0
 8002156:	4baf      	ldr	r3, [pc, #700]	@ (8002414 <dw_main+0x32c>)
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4bae      	ldr	r3, [pc, #696]	@ (8002414 <dw_main+0x32c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4aae      	ldr	r2, [pc, #696]	@ (8002418 <dw_main+0x330>)
 8002160:	4013      	ands	r3, r2
 8002162:	d0f3      	beq.n	800214c <dw_main+0x64>
        { };

        // uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        // CDC_Transmit_FS((uint8 *) &status_reg, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 8002164:	4bab      	ldr	r3, [pc, #684]	@ (8002414 <dw_main+0x32c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <dw_main+0x8a>
 8002170:	e13e      	b.n	80023f0 <dw_main+0x308>
        {
            uint32 frame_len;

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002172:	2100      	movs	r1, #0
 8002174:	2010      	movs	r0, #16
 8002176:	f009 ff67 	bl	800c048 <dwt_read32bitoffsetreg>
 800217a:	0003      	movs	r3, r0
 800217c:	059b      	lsls	r3, r3, #22
 800217e:	0d9b      	lsrs	r3, r3, #22
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (frame_len <= RX_BUFFER_LEN)
 8002182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	429a      	cmp	r2, r3
 800218a:	d806      	bhi.n	800219a <dw_main+0xb2>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800218c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800218e:	b299      	uxth	r1, r3
 8002190:	4b9f      	ldr	r3, [pc, #636]	@ (8002410 <dw_main+0x328>)
 8002192:	2200      	movs	r2, #0
 8002194:	0018      	movs	r0, r3
 8002196:	f009 fe65 	bl	800be64 <dwt_readrxdata>
            }

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	01db      	lsls	r3, r3, #7
 800219e:	001a      	movs	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	200f      	movs	r0, #15
 80021a4:	f009 ffe1 	bl	800c16a <dwt_write32bitoffsetreg>
            
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80021a8:	4b99      	ldr	r3, [pc, #612]	@ (8002410 <dw_main+0x328>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80021ae:	499b      	ldr	r1, [pc, #620]	@ (800241c <dw_main+0x334>)
 80021b0:	4b97      	ldr	r3, [pc, #604]	@ (8002410 <dw_main+0x328>)
 80021b2:	220a      	movs	r2, #10
 80021b4:	0018      	movs	r0, r3
 80021b6:	f00a fcc5 	bl	800cb44 <memcmp>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d1b1      	bne.n	8002122 <dw_main+0x3a>
                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                // dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
                // dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80021be:	4b98      	ldr	r3, [pc, #608]	@ (8002420 <dw_main+0x338>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b98      	ldr	r3, [pc, #608]	@ (8002424 <dw_main+0x33c>)
 80021c4:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80021c6:	4b97      	ldr	r3, [pc, #604]	@ (8002424 <dw_main+0x33c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	0019      	movs	r1, r3
 80021cc:	200f      	movs	r0, #15
 80021ce:	f009 fdfc 	bl	800bdca <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 0); /* Zero offset in TX buffer, ranging. */
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	200f      	movs	r0, #15
 80021d8:	f009 fe20 	bl	800be1c <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 80021dc:	2002      	movs	r0, #2
 80021de:	f00a f907 	bl	800c3f0 <dwt_starttx>
 80021e2:	0003      	movs	r3, r0
 80021e4:	647b      	str	r3, [r7, #68]	@ 0x44

                CDC_Transmit_FS(tx_resp_msg, sizeof(tx_resp_msg));
 80021e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002424 <dw_main+0x33c>)
 80021e8:	210f      	movs	r1, #15
 80021ea:	0018      	movs	r0, r3
 80021ec:	f008 fe0c 	bl	800ae08 <CDC_Transmit_FS>

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 80021f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f2:	3301      	adds	r3, #1
 80021f4:	d100      	bne.n	80021f8 <dw_main+0x110>
 80021f6:	e104      	b.n	8002402 <dw_main+0x31a>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	2100      	movs	r1, #0
 80021fc:	200f      	movs	r0, #15
 80021fe:	f009 ff23 	bl	800c048 <dwt_read32bitoffsetreg>
 8002202:	0002      	movs	r2, r0
 8002204:	4b83      	ldr	r3, [pc, #524]	@ (8002414 <dw_main+0x32c>)
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <dw_main+0x32c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a82      	ldr	r2, [pc, #520]	@ (8002418 <dw_main+0x330>)
 800220e:	4013      	ands	r3, r2
 8002210:	d0f3      	beq.n	80021fa <dw_main+0x112>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002212:	4b83      	ldr	r3, [pc, #524]	@ (8002420 <dw_main+0x338>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b81      	ldr	r3, [pc, #516]	@ (8002420 <dw_main+0x338>)
 800221c:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 800221e:	4b7d      	ldr	r3, [pc, #500]	@ (8002414 <dw_main+0x32c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	@ 0x80
 8002224:	01db      	lsls	r3, r3, #7
 8002226:	4013      	ands	r3, r2
 8002228:	d100      	bne.n	800222c <dw_main+0x144>
 800222a:	e0d8      	b.n	80023de <dw_main+0x2f6>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 800222c:	2381      	movs	r3, #129	@ 0x81
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	001a      	movs	r2, r3
 8002232:	2100      	movs	r1, #0
 8002234:	200f      	movs	r0, #15
 8002236:	f009 ff98 	bl	800c16a <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 800223a:	2100      	movs	r1, #0
 800223c:	2010      	movs	r0, #16
 800223e:	f009 ff03 	bl	800c048 <dwt_read32bitoffsetreg>
 8002242:	0003      	movs	r3, r0
 8002244:	227f      	movs	r2, #127	@ 0x7f
 8002246:	4013      	ands	r3, r2
 8002248:	64bb      	str	r3, [r7, #72]	@ 0x48
                    if (frame_len <= RX_BUF_LEN)
 800224a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800224c:	2b18      	cmp	r3, #24
 800224e:	d806      	bhi.n	800225e <dw_main+0x176>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002252:	b299      	uxth	r1, r3
 8002254:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <dw_main+0x328>)
 8002256:	2200      	movs	r2, #0
 8002258:	0018      	movs	r0, r3
 800225a:	f009 fe03 	bl	800be64 <dwt_readrxdata>
                    }

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 800225e:	4b6c      	ldr	r3, [pc, #432]	@ (8002410 <dw_main+0x328>)
 8002260:	2200      	movs	r2, #0
 8002262:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8002264:	4970      	ldr	r1, [pc, #448]	@ (8002428 <dw_main+0x340>)
 8002266:	4b6a      	ldr	r3, [pc, #424]	@ (8002410 <dw_main+0x328>)
 8002268:	220a      	movs	r2, #10
 800226a:	0018      	movs	r0, r3
 800226c:	f00a fc6a 	bl	800cb44 <memcmp>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d000      	beq.n	8002276 <dw_main+0x18e>
 8002274:	e755      	b.n	8002122 <dw_main+0x3a>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8002276:	f000 f8f1 	bl	800245c <get_tx_timestamp_u64>
 800227a:	0002      	movs	r2, r0
 800227c:	000b      	movs	r3, r1
 800227e:	496b      	ldr	r1, [pc, #428]	@ (800242c <dw_main+0x344>)
 8002280:	600a      	str	r2, [r1, #0]
 8002282:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 8002284:	f000 f924 	bl	80024d0 <get_rx_timestamp_u64>
 8002288:	0002      	movs	r2, r0
 800228a:	000b      	movs	r3, r1
 800228c:	4968      	ldr	r1, [pc, #416]	@ (8002430 <dw_main+0x348>)
 800228e:	600a      	str	r2, [r1, #0]
 8002290:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8002292:	230c      	movs	r3, #12
 8002294:	18fa      	adds	r2, r7, r3
 8002296:	4b67      	ldr	r3, [pc, #412]	@ (8002434 <dw_main+0x34c>)
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f952 	bl	8002544 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80022a0:	2308      	movs	r3, #8
 80022a2:	18fa      	adds	r2, r7, r3
 80022a4:	4b64      	ldr	r3, [pc, #400]	@ (8002438 <dw_main+0x350>)
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 f94b 	bl	8002544 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80022ae:	1d3a      	adds	r2, r7, #4
 80022b0:	4b62      	ldr	r3, [pc, #392]	@ (800243c <dw_main+0x354>)
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f945 	bl	8002544 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 80022ba:	4b61      	ldr	r3, [pc, #388]	@ (8002440 <dw_main+0x358>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0013      	movs	r3, r2
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <dw_main+0x344>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0013      	movs	r3, r2
 80022cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        final_rx_ts_32 = (uint32)final_rx_ts;
 80022ce:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <dw_main+0x348>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0013      	movs	r3, r2
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	0018      	movs	r0, r3
 80022e0:	f7ff fd58 	bl	8001d94 <__aeabi_ui2d>
 80022e4:	0002      	movs	r2, r0
 80022e6:	000b      	movs	r3, r1
 80022e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80022ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff fd4e 	bl	8001d94 <__aeabi_ui2d>
 80022f8:	0002      	movs	r2, r0
 80022fa:	000b      	movs	r3, r1
 80022fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fd44 	bl	8001d94 <__aeabi_ui2d>
 800230c:	0002      	movs	r2, r0
 800230e:	000b      	movs	r3, r1
 8002310:	623a      	str	r2, [r7, #32]
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002314:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fd3a 	bl	8001d94 <__aeabi_ui2d>
 8002320:	0002      	movs	r2, r0
 8002322:	000b      	movs	r3, r1
 8002324:	61ba      	str	r2, [r7, #24]
 8002326:	61fb      	str	r3, [r7, #28]
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8002328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800232e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002330:	f7fe fe62 	bl	8000ff8 <__aeabi_dmul>
 8002334:	0002      	movs	r2, r0
 8002336:	000b      	movs	r3, r1
 8002338:	0014      	movs	r4, r2
 800233a:	001d      	movs	r5, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	6a38      	ldr	r0, [r7, #32]
 8002342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002344:	f7fe fe58 	bl	8000ff8 <__aeabi_dmul>
 8002348:	0002      	movs	r2, r0
 800234a:	000b      	movs	r3, r1
 800234c:	0020      	movs	r0, r4
 800234e:	0029      	movs	r1, r5
 8002350:	f7ff f91a 	bl	8001588 <__aeabi_dsub>
 8002354:	0002      	movs	r2, r0
 8002356:	000b      	movs	r3, r1
 8002358:	0014      	movs	r4, r2
 800235a:	001d      	movs	r5, r3
 800235c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002362:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002364:	f7fd ffca 	bl	80002fc <__aeabi_dadd>
 8002368:	0002      	movs	r2, r0
 800236a:	000b      	movs	r3, r1
 800236c:	0010      	movs	r0, r2
 800236e:	0019      	movs	r1, r3
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	f7fd ffc2 	bl	80002fc <__aeabi_dadd>
 8002378:	0002      	movs	r2, r0
 800237a:	000b      	movs	r3, r1
 800237c:	0010      	movs	r0, r2
 800237e:	0019      	movs	r1, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f7fd ffba 	bl	80002fc <__aeabi_dadd>
 8002388:	0002      	movs	r2, r0
 800238a:	000b      	movs	r3, r1
 800238c:	0020      	movs	r0, r4
 800238e:	0029      	movs	r1, r5
 8002390:	f7fe fb18 	bl	80009c4 <__aeabi_ddiv>
 8002394:	0002      	movs	r2, r0
 8002396:	000b      	movs	r3, r1
 8002398:	0010      	movs	r0, r2
 800239a:	0019      	movs	r1, r3
 800239c:	f7fd ff5e 	bl	800025c <__aeabi_d2lz>
 80023a0:	0002      	movs	r2, r0
 80023a2:	000b      	movs	r3, r1
 80023a4:	613a      	str	r2, [r7, #16]
 80023a6:	617b      	str	r3, [r7, #20]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80023a8:	6938      	ldr	r0, [r7, #16]
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	f7fd ff90 	bl	80002d0 <__aeabi_l2d>
 80023b0:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <dw_main+0x35c>)
 80023b2:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <dw_main+0x360>)
 80023b4:	f7fe fe20 	bl	8000ff8 <__aeabi_dmul>
 80023b8:	0002      	movs	r2, r0
 80023ba:	000b      	movs	r3, r1
 80023bc:	4923      	ldr	r1, [pc, #140]	@ (800244c <dw_main+0x364>)
 80023be:	600a      	str	r2, [r1, #0]
 80023c0:	604b      	str	r3, [r1, #4]
                        distance = tof * SPEED_OF_LIGHT;
 80023c2:	4b22      	ldr	r3, [pc, #136]	@ (800244c <dw_main+0x364>)
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	2298      	movs	r2, #152	@ 0x98
 80023ca:	0552      	lsls	r2, r2, #21
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <dw_main+0x368>)
 80023ce:	f7fe fe13 	bl	8000ff8 <__aeabi_dmul>
 80023d2:	0002      	movs	r2, r0
 80023d4:	000b      	movs	r3, r1
 80023d6:	491f      	ldr	r1, [pc, #124]	@ (8002454 <dw_main+0x36c>)
 80023d8:	600a      	str	r2, [r1, #0]
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e6a1      	b.n	8002122 <dw_main+0x3a>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <dw_main+0x370>)
 80023e0:	001a      	movs	r2, r3
 80023e2:	2100      	movs	r1, #0
 80023e4:	200f      	movs	r0, #15
 80023e6:	f009 fec0 	bl	800c16a <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 80023ea:	f00a f949 	bl	800c680 <dwt_rxreset>
 80023ee:	e698      	b.n	8002122 <dw_main+0x3a>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <dw_main+0x370>)
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	200f      	movs	r0, #15
 80023f8:	f009 feb7 	bl	800c16a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80023fc:	f00a f940 	bl	800c680 <dwt_rxreset>
 8002400:	e68f      	b.n	8002122 <dw_main+0x3a>
                    continue;
 8002402:	46c0      	nop			@ (mov r8, r8)
    {
 8002404:	e68d      	b.n	8002122 <dw_main+0x3a>
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	20000000 	.word	0x20000000
 800240c:	00004034 	.word	0x00004034
 8002410:	200001e0 	.word	0x200001e0
 8002414:	200001f8 	.word	0x200001f8
 8002418:	2427d000 	.word	0x2427d000
 800241c:	2000000c 	.word	0x2000000c
 8002420:	200001dc 	.word	0x200001dc
 8002424:	20000018 	.word	0x20000018
 8002428:	20000028 	.word	0x20000028
 800242c:	20000208 	.word	0x20000208
 8002430:	20000210 	.word	0x20000210
 8002434:	200001ea 	.word	0x200001ea
 8002438:	200001ee 	.word	0x200001ee
 800243c:	200001f2 	.word	0x200001f2
 8002440:	20000200 	.word	0x20000200
 8002444:	3bce48fa 	.word	0x3bce48fa
 8002448:	3db13518 	.word	0x3db13518
 800244c:	20000218 	.word	0x20000218
 8002450:	41b1dd19 	.word	0x41b1dd19
 8002454:	20000220 	.word	0x20000220
 8002458:	24279000 	.word	0x24279000

0800245c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002462:	2200      	movs	r2, #0
 8002464:	2300      	movs	r3, #0
 8002466:	623a      	str	r2, [r7, #32]
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 800246a:	2314      	movs	r3, #20
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	0018      	movs	r0, r3
 8002470:	f009 fd11 	bl	800be96 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8002474:	2304      	movs	r3, #4
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e020      	b.n	80024bc <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	0e1b      	lsrs	r3, r3, #24
 800247e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002480:	0215      	lsls	r5, r2, #8
 8002482:	431d      	orrs	r5, r3
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	021c      	lsls	r4, r3, #8
 8002488:	623c      	str	r4, [r7, #32]
 800248a:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 800248c:	2314      	movs	r3, #20
 800248e:	18fa      	adds	r2, r7, r3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	18d3      	adds	r3, r2, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	0008      	movs	r0, r1
 80024a4:	4318      	orrs	r0, r3
 80024a6:	6038      	str	r0, [r7, #0]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	431a      	orrs	r2, r3
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	623a      	str	r2, [r7, #32]
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dadb      	bge.n	800247a <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 80024c2:	6a3a      	ldr	r2, [r7, #32]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024c6:	0010      	movs	r0, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b00a      	add	sp, #40	@ 0x28
 80024ce:	bdb0      	pop	{r4, r5, r7, pc}

080024d0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80024d6:	2200      	movs	r2, #0
 80024d8:	2300      	movs	r3, #0
 80024da:	623a      	str	r2, [r7, #32]
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80024de:	2314      	movs	r3, #20
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	0018      	movs	r0, r3
 80024e4:	f009 fce5 	bl	800beb2 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80024e8:	2304      	movs	r3, #4
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e020      	b.n	8002530 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f4:	0215      	lsls	r5, r2, #8
 80024f6:	431d      	orrs	r5, r3
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	021c      	lsls	r4, r3, #8
 80024fc:	623c      	str	r4, [r7, #32]
 80024fe:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 8002500:	2314      	movs	r3, #20
 8002502:	18fa      	adds	r2, r7, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	18d3      	adds	r3, r2, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	0008      	movs	r0, r1
 8002518:	4318      	orrs	r0, r3
 800251a:	6038      	str	r0, [r7, #0]
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	431a      	orrs	r2, r3
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	623a      	str	r2, [r7, #32]
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b01      	subs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	dadb      	bge.n	80024ee <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800253a:	0010      	movs	r0, r2
 800253c:	0019      	movs	r1, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b00a      	add	sp, #40	@ 0x28
 8002542:	bdb0      	pop	{r4, r5, r7, pc}

08002544 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e010      	b.n	800257c <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	188a      	adds	r2, r1, r2
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	0011      	movs	r1, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	4091      	lsls	r1, r2
 800256e:	000a      	movs	r2, r1
 8002570:	189a      	adds	r2, r3, r2
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b03      	cmp	r3, #3
 8002580:	ddeb      	ble.n	800255a <final_msg_get_ts+0x16>
    }
}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}

0800258c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002590:	f000 fc28 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002594:	f000 f814 	bl	80025c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002598:	f000 f98a 	bl	80028b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800259c:	f000 f958 	bl	8002850 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80025a0:	f000 f8da 	bl	8002758 <MX_SPI1_Init>
  MX_ADC_Init();
 80025a4:	f000 f87c 	bl	80026a0 <MX_ADC_Init>
  MX_SPI2_Init();
 80025a8:	f000 f914 	bl	80027d4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80025ac:	f008 fba8 	bl	800ad00 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  setup_DW1000RSTnIRQ(0);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f00a fa1e 	bl	800c9f2 <setup_DW1000RSTnIRQ>

  // initLCD();

  dw_main();
 80025b6:	f7ff fd97 	bl	80020e8 <dw_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	e7fd      	b.n	80025ba <main+0x2e>
	...

080025c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b099      	sub	sp, #100	@ 0x64
 80025c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c6:	242c      	movs	r4, #44	@ 0x2c
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	0018      	movs	r0, r3
 80025cc:	2334      	movs	r3, #52	@ 0x34
 80025ce:	001a      	movs	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	f00a fac5 	bl	800cb60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d6:	231c      	movs	r3, #28
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	0018      	movs	r0, r3
 80025dc:	2310      	movs	r3, #16
 80025de:	001a      	movs	r2, r3
 80025e0:	2100      	movs	r1, #0
 80025e2:	f00a fabd 	bl	800cb60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e6:	003b      	movs	r3, r7
 80025e8:	0018      	movs	r0, r3
 80025ea:	231c      	movs	r3, #28
 80025ec:	001a      	movs	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f00a fab6 	bl	800cb60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80025f4:	0021      	movs	r1, r4
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2232      	movs	r2, #50	@ 0x32
 80025fa:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2201      	movs	r2, #1
 8002600:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2201      	movs	r2, #1
 8002606:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2201      	movs	r2, #1
 800260c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2210      	movs	r2, #16
 8002612:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2210      	movs	r2, #16
 8002618:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2202      	movs	r2, #2
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	0212      	lsls	r2, r2, #8
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002628:	187b      	adds	r3, r7, r1
 800262a:	22e0      	movs	r2, #224	@ 0xe0
 800262c:	0352      	lsls	r2, r2, #13
 800262e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2201      	movs	r2, #1
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002636:	187b      	adds	r3, r7, r1
 8002638:	0018      	movs	r0, r3
 800263a:	f002 ffc9 	bl	80055d0 <HAL_RCC_OscConfig>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002642:	f000 f9fd 	bl	8002a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002646:	211c      	movs	r1, #28
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2207      	movs	r2, #7
 800264c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2202      	movs	r2, #2
 8002652:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2101      	movs	r1, #1
 8002664:	0018      	movs	r0, r3
 8002666:	f003 fb39 	bl	8005cdc <HAL_RCC_ClockConfig>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800266e:	f000 f9e7 	bl	8002a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002672:	003b      	movs	r3, r7
 8002674:	4a09      	ldr	r2, [pc, #36]	@ (800269c <SystemClock_Config+0xdc>)
 8002676:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002678:	003b      	movs	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800267e:	003b      	movs	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002684:	003b      	movs	r3, r7
 8002686:	0018      	movs	r0, r3
 8002688:	f003 fc94 	bl	8005fb4 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002690:	f000 f9d6 	bl	8002a40 <Error_Handler>
  }
}
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b019      	add	sp, #100	@ 0x64
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	00020001 	.word	0x00020001

080026a0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	0018      	movs	r0, r3
 80026aa:	230c      	movs	r3, #12
 80026ac:	001a      	movs	r2, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	f00a fa56 	bl	800cb60 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80026b4:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026b6:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <MX_ADC_Init+0xb4>)
 80026b8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026cc:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026d4:	2204      	movs	r2, #4
 80026d6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026de:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f0:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026f2:	22c2      	movs	r2, #194	@ 0xc2
 80026f4:	32ff      	adds	r2, #255	@ 0xff
 80026f6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026f8:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <MX_ADC_Init+0xb0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <MX_ADC_Init+0xb0>)
 8002700:	2224      	movs	r2, #36	@ 0x24
 8002702:	2100      	movs	r1, #0
 8002704:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <MX_ADC_Init+0xb0>)
 8002708:	2201      	movs	r2, #1
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <MX_ADC_Init+0xb0>)
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fbf0 	bl	8002ef4 <HAL_ADC_Init>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d001      	beq.n	800271c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002718:	f000 f992 	bl	8002a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2208      	movs	r2, #8
 8002720:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	0152      	lsls	r2, r2, #5
 8002728:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	0552      	lsls	r2, r2, #21
 8002730:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002732:	1d3a      	adds	r2, r7, #4
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_ADC_Init+0xb0>)
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f000 fd1b 	bl	8003174 <HAL_ADC_ConfigChannel>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002742:	f000 f97d 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b004      	add	sp, #16
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	20000228 	.word	0x20000228
 8002754:	40012400 	.word	0x40012400

08002758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <MX_SPI1_Init+0x74>)
 800275e:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <MX_SPI1_Init+0x78>)
 8002760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002764:	2282      	movs	r2, #130	@ 0x82
 8002766:	0052      	lsls	r2, r2, #1
 8002768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <MX_SPI1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002772:	22e0      	movs	r2, #224	@ 0xe0
 8002774:	00d2      	lsls	r2, r2, #3
 8002776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <MX_SPI1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	0092      	lsls	r2, r2, #2
 800278a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_SPI1_Init+0x74>)
 800278e:	2218      	movs	r2, #24
 8002790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_SPI1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027a6:	2207      	movs	r2, #7
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027b2:	2208      	movs	r2, #8
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f003 fcf9 	bl	80061b0 <HAL_SPI_Init>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80027c2:	f000 f93d 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000268 	.word	0x20000268
 80027d0:	40013000 	.word	0x40013000

080027d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027da:	4a1c      	ldr	r2, [pc, #112]	@ (800284c <MX_SPI2_Init+0x78>)
 80027dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027e0:	2282      	movs	r2, #130	@ 0x82
 80027e2:	0052      	lsls	r2, r2, #1
 80027e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027e6:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80027ec:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027ee:	22c0      	movs	r2, #192	@ 0xc0
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f4:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <MX_SPI2_Init+0x74>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002802:	2280      	movs	r2, #128	@ 0x80
 8002804:	02d2      	lsls	r2, r2, #11
 8002806:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <MX_SPI2_Init+0x74>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <MX_SPI2_Init+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002822:	2207      	movs	r2, #7
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_SPI2_Init+0x74>)
 800282e:	2208      	movs	r2, #8
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002832:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <MX_SPI2_Init+0x74>)
 8002834:	0018      	movs	r0, r3
 8002836:	f003 fcbb 	bl	80061b0 <HAL_SPI_Init>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800283e:	f000 f8ff 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200002cc 	.word	0x200002cc
 800284c:	40003800 	.word	0x40003800

08002850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002856:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <MX_USART1_UART_Init+0x5c>)
 8002858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800285c:	2296      	movs	r2, #150	@ 0x96
 800285e:	0212      	lsls	r2, r2, #8
 8002860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <MX_USART1_UART_Init+0x58>)
 8002894:	0018      	movs	r0, r3
 8002896:	f004 f825 	bl	80068e4 <HAL_UART_Init>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800289e:	f000 f8cf 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000330 	.word	0x20000330
 80028ac:	40013800 	.word	0x40013800

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	240c      	movs	r4, #12
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	0018      	movs	r0, r3
 80028bc:	2314      	movs	r3, #20
 80028be:	001a      	movs	r2, r3
 80028c0:	2100      	movs	r1, #0
 80028c2:	f00a f94d 	bl	800cb60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	03c9      	lsls	r1, r1, #15
 80028d0:	430a      	orrs	r2, r1
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	4b57      	ldr	r3, [pc, #348]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	03db      	lsls	r3, r3, #15
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b54      	ldr	r3, [pc, #336]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028e8:	2180      	movs	r1, #128	@ 0x80
 80028ea:	0289      	lsls	r1, r1, #10
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002a34 <MX_GPIO_Init+0x184>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	4b4c      	ldr	r3, [pc, #304]	@ (8002a34 <MX_GPIO_Init+0x184>)
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	02c9      	lsls	r1, r1, #11
 8002908:	430a      	orrs	r2, r1
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <MX_GPIO_Init+0x184>)
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	02db      	lsls	r3, r3, #11
 8002914:	4013      	ands	r3, r2
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 800291a:	2390      	movs	r3, #144	@ 0x90
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	2200      	movs	r2, #0
 8002920:	2111      	movs	r1, #17
 8002922:	0018      	movs	r0, r3
 8002924:	f000 ffd9 	bl	80038da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002928:	4943      	ldr	r1, [pc, #268]	@ (8002a38 <MX_GPIO_Init+0x188>)
 800292a:	4b44      	ldr	r3, [pc, #272]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 800292c:	2200      	movs	r2, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f000 ffd3 	bl	80038da <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2201      	movs	r2, #1
 800293e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 800294c:	193a      	adds	r2, r7, r4
 800294e:	2390      	movs	r3, #144	@ 0x90
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fe2b 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2204      	movs	r2, #4
 800295e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2288      	movs	r2, #136	@ 0x88
 8002964:	0352      	lsls	r2, r2, #13
 8002966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800296e:	193a      	adds	r2, r7, r4
 8002970:	2390      	movs	r3, #144	@ 0x90
 8002972:	05db      	lsls	r3, r3, #23
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fe1a 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2210      	movs	r2, #16
 8002980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2201      	movs	r2, #1
 8002986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	193b      	adds	r3, r7, r4
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2203      	movs	r2, #3
 8002992:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002994:	193a      	adds	r2, r7, r4
 8002996:	2390      	movs	r3, #144	@ 0x90
 8002998:	05db      	lsls	r3, r3, #23
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fe07 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 80029a2:	193b      	adds	r3, r7, r4
 80029a4:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <MX_GPIO_Init+0x188>)
 80029a6:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	2201      	movs	r2, #1
 80029ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 80029be:	0019      	movs	r1, r3
 80029c0:	0010      	movs	r0, r2
 80029c2:	f000 fdf5 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 80029c6:	0021      	movs	r1, r4
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	0192      	lsls	r2, r2, #6
 80029ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	000c      	movs	r4, r1
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 80029e2:	0019      	movs	r1, r3
 80029e4:	0010      	movs	r0, r2
 80029e6:	f000 fde3 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80029ea:	0021      	movs	r1, r4
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2220      	movs	r2, #32
 80029f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2288      	movs	r2, #136	@ 0x88
 80029f6:	0352      	lsls	r2, r2, #13
 80029f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2202      	movs	r2, #2
 80029fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	4a0e      	ldr	r2, [pc, #56]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f000 fdd2 	bl	80035b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2006      	movs	r0, #6
 8002a12:	f000 fd8b 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a16:	2006      	movs	r0, #6
 8002a18:	f000 fd9d 	bl	8003556 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2007      	movs	r0, #7
 8002a22:	f000 fd83 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a26:	2007      	movs	r0, #7
 8002a28:	f000 fd95 	bl	8003556 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b009      	add	sp, #36	@ 0x24
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	00000b44 	.word	0x00000b44
 8002a3c:	48000400 	.word	0x48000400

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	e7fd      	b.n	8002a48 <Error_Handler+0x8>

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	619a      	str	r2, [r3, #24]
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	0549      	lsls	r1, r1, #21
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_MspInit+0x54>)
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	055b      	lsls	r3, r3, #21
 8002a80:	4013      	ands	r3, r2
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2004      	movs	r0, #4
 8002a8c:	f000 fd4e 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002a90:	2004      	movs	r0, #4
 8002a92:	f000 fd60 	bl	8003556 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b08b      	sub	sp, #44	@ 0x2c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	2414      	movs	r4, #20
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	2314      	movs	r3, #20
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f00a f852 	bl	800cb60 <memset>
  if(hadc->Instance==ADC1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_ADC_MspInit+0x80>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12a      	bne.n	8002b1c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0089      	lsls	r1, r1, #2
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	02c9      	lsls	r1, r1, #11
 8002aec:	430a      	orrs	r2, r1
 8002aee:	615a      	str	r2, [r3, #20]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <HAL_ADC_MspInit+0x84>)
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	02db      	lsls	r3, r3, #11
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	2203      	movs	r2, #3
 8002b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <HAL_ADC_MspInit+0x88>)
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f000 fd4a 	bl	80035b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b00b      	add	sp, #44	@ 0x2c
 8002b22:	bd90      	pop	{r4, r7, pc}
 8002b24:	40012400 	.word	0x40012400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000400 	.word	0x48000400

08002b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b08d      	sub	sp, #52	@ 0x34
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	241c      	movs	r4, #28
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	2314      	movs	r3, #20
 8002b40:	001a      	movs	r2, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	f00a f80c 	bl	800cb60 <memset>
  if(hspi->Instance==SPI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a45      	ldr	r2, [pc, #276]	@ (8002c64 <HAL_SPI_MspInit+0x134>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d133      	bne.n	8002bba <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b52:	4b45      	ldr	r3, [pc, #276]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	4b44      	ldr	r3, [pc, #272]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b58:	2180      	movs	r1, #128	@ 0x80
 8002b5a:	0149      	lsls	r1, r1, #5
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b74:	2180      	movs	r1, #128	@ 0x80
 8002b76:	0289      	lsls	r1, r1, #10
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	615a      	str	r2, [r3, #20]
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	4013      	ands	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002b8a:	0021      	movs	r1, r4
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	22e0      	movs	r2, #224	@ 0xe0
 8002b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2202      	movs	r2, #2
 8002b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	187a      	adds	r2, r7, r1
 8002bac:	2390      	movs	r3, #144	@ 0x90
 8002bae:	05db      	lsls	r3, r3, #23
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fcfc 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bb8:	e04f      	b.n	8002c5a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8002c6c <HAL_SPI_MspInit+0x13c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d14a      	bne.n	8002c5a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	4b27      	ldr	r3, [pc, #156]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	01c9      	lsls	r1, r1, #7
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	61da      	str	r2, [r3, #28]
 8002bd2:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be0:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002be6:	2180      	movs	r1, #128	@ 0x80
 8002be8:	02c9      	lsls	r1, r1, #11
 8002bea:	430a      	orrs	r2, r1
 8002bec:	615a      	str	r2, [r3, #20]
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_SPI_MspInit+0x138>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	02db      	lsls	r3, r3, #11
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bfc:	211c      	movs	r1, #28
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2280      	movs	r2, #128	@ 0x80
 8002c02:	00d2      	lsls	r2, r2, #3
 8002c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	000c      	movs	r4, r1
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	2203      	movs	r2, #3
 8002c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <HAL_SPI_MspInit+0x140>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f000 fcc2 	bl	80035b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002c2c:	0021      	movs	r1, r4
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	22d0      	movs	r2, #208	@ 0xd0
 8002c32:	0212      	lsls	r2, r2, #8
 8002c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2202      	movs	r2, #2
 8002c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2203      	movs	r2, #3
 8002c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_SPI_MspInit+0x140>)
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f000 fcab 	bl	80035b0 <HAL_GPIO_Init>
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b00d      	add	sp, #52	@ 0x34
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	40013000 	.word	0x40013000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40003800 	.word	0x40003800
 8002c70:	48000400 	.word	0x48000400

08002c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	2414      	movs	r4, #20
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	0018      	movs	r0, r3
 8002c82:	2314      	movs	r3, #20
 8002c84:	001a      	movs	r2, r3
 8002c86:	2100      	movs	r1, #0
 8002c88:	f009 ff6a 	bl	800cb60 <memset>
  if(huart->Instance==USART1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_UART_MspInit+0x94>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d133      	bne.n	8002cfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	01c9      	lsls	r1, r1, #7
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	0289      	lsls	r1, r1, #10
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	615a      	str	r2, [r3, #20]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	22c0      	movs	r2, #192	@ 0xc0
 8002cd2:	00d2      	lsls	r2, r2, #3
 8002cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	0021      	movs	r1, r4
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2202      	movs	r2, #2
 8002cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2201      	movs	r2, #1
 8002cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	187a      	adds	r2, r7, r1
 8002cf2:	2390      	movs	r3, #144	@ 0x90
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fc59 	bl	80035b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b00b      	add	sp, #44	@ 0x2c
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d14:	46c0      	nop			@ (mov r8, r8)
 8002d16:	e7fd      	b.n	8002d14 <NMI_Handler+0x4>

08002d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	e7fd      	b.n	8002d1c <HardFault_Handler+0x4>

08002d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d38:	f000 f89c 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002d50:	2004      	movs	r0, #4
 8002d52:	f000 fddf 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002d60:	2020      	movs	r0, #32
 8002d62:	f000 fdd7 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <USB_IRQHandler+0x14>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 ff04 	bl	8003b80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002d78:	46c0      	nop			@ (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	20001084 	.word	0x20001084

08002d84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d90:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d94:	f7ff fff6 	bl	8002d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d98:	480c      	ldr	r0, [pc, #48]	@ (8002dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9a:	490d      	ldr	r1, [pc, #52]	@ (8002dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd4 <LoopForever+0xe>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ddc <LoopForever+0x16>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dbe:	f009 fed7 	bl	800cb70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dc2:	f7ff fbe3 	bl	800258c <main>

08002dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8002dc6:	e7fe      	b.n	8002dc6 <LoopForever>
  ldr   r0, =_estack
 8002dc8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8002dd4:	0800ce78 	.word	0x0800ce78
  ldr r2, =_sbss
 8002dd8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002ddc:	200015bc 	.word	0x200015bc

08002de0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC1_COMP_IRQHandler>
	...

08002de4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_Init+0x24>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_Init+0x24>)
 8002dee:	2110      	movs	r1, #16
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f000 f809 	bl	8002e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dfa:	f7ff fe27 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	40022000 	.word	0x40022000

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_InitTick+0x5c>)
 8002e16:	681c      	ldr	r4, [r3, #0]
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <HAL_InitTick+0x60>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	23fa      	movs	r3, #250	@ 0xfa
 8002e20:	0098      	lsls	r0, r3, #2
 8002e22:	f7fd f971 	bl	8000108 <__udivsi3>
 8002e26:	0003      	movs	r3, r0
 8002e28:	0019      	movs	r1, r3
 8002e2a:	0020      	movs	r0, r4
 8002e2c:	f7fd f96c 	bl	8000108 <__udivsi3>
 8002e30:	0003      	movs	r3, r0
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 fbaf 	bl	8003596 <HAL_SYSTICK_Config>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00f      	b.n	8002e60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d80b      	bhi.n	8002e5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	425b      	negs	r3, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fb6c 	bl	800352c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_InitTick+0x64>)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b003      	add	sp, #12
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	20000040 	.word	0x20000040
 8002e6c:	20000048 	.word	0x20000048
 8002e70:	20000044 	.word	0x20000044

08002e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_IncTick+0x1c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_IncTick+0x20>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	18d2      	adds	r2, r2, r3
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_IncTick+0x20>)
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	20000048 	.word	0x20000048
 8002e94:	200003b8 	.word	0x200003b8

08002e98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	@ (8002ea8 <HAL_GetTick+0x10>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	200003b8 	.word	0x200003b8

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	001a      	movs	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	f7ff ffe0 	bl	8002e98 <HAL_GetTick>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	20000048 	.word	0x20000048

08002ef4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	230f      	movs	r3, #15
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e125      	b.n	800315e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2234      	movs	r2, #52	@ 0x34
 8002f24:	2100      	movs	r1, #0
 8002f26:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff fdba 	bl	8002aa4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	2210      	movs	r2, #16
 8002f36:	4013      	ands	r3, r2
 8002f38:	d000      	beq.n	8002f3c <HAL_ADC_Init+0x48>
 8002f3a:	e103      	b.n	8003144 <HAL_ADC_Init+0x250>
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d000      	beq.n	8002f48 <HAL_ADC_Init+0x54>
 8002f46:	e0fd      	b.n	8003144 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002f52:	d000      	beq.n	8002f56 <HAL_ADC_Init+0x62>
 8002f54:	e0f6      	b.n	8003144 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	4a83      	ldr	r2, [pc, #524]	@ (8003168 <HAL_ADC_Init+0x274>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2202      	movs	r2, #2
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d112      	bne.n	8002f9a <HAL_ADC_Init+0xa6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d009      	beq.n	8002f96 <HAL_ADC_Init+0xa2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Init+0xa6>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_ADC_Init+0xa8>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2218      	movs	r2, #24
 8002fa8:	4393      	bics	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	0899      	lsrs	r1, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4964      	ldr	r1, [pc, #400]	@ (800316c <HAL_ADC_Init+0x278>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7e1b      	ldrb	r3, [r3, #24]
 8002fe2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e5b      	ldrb	r3, [r3, #25]
 8002fe8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e9b      	ldrb	r3, [r3, #26]
 8002ff0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ff2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d002      	beq.n	8003002 <HAL_ADC_Init+0x10e>
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	e000      	b.n	8003004 <HAL_ADC_Init+0x110>
 8003002:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003004:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800300a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d101      	bne.n	8003018 <HAL_ADC_Init+0x124>
 8003014:	2304      	movs	r3, #4
 8003016:	e000      	b.n	800301a <HAL_ADC_Init+0x126>
 8003018:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800301a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2124      	movs	r1, #36	@ 0x24
 8003020:	5c5b      	ldrb	r3, [r3, r1]
 8003022:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003024:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4313      	orrs	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7edb      	ldrb	r3, [r3, #27]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d115      	bne.n	8003060 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e9b      	ldrb	r3, [r3, #26]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	0252      	lsls	r2, r2, #9
 8003042:	4313      	orrs	r3, r2
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	e00b      	b.n	8003060 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	2220      	movs	r2, #32
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	2201      	movs	r2, #1
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	23c2      	movs	r3, #194	@ 0xc2
 8003066:	33ff      	adds	r3, #255	@ 0xff
 8003068:	429a      	cmp	r2, r3
 800306a:	d007      	beq.n	800307c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003074:	4313      	orrs	r3, r2
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4313      	orrs	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	055b      	lsls	r3, r3, #21
 8003094:	429a      	cmp	r2, r3
 8003096:	d01b      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d017      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d013      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d00f      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d00b      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d007      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d003      	beq.n	80030d0 <HAL_ADC_Init+0x1dc>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d112      	bne.n	80030f6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2107      	movs	r1, #7
 80030dc:	438a      	bics	r2, r1
 80030de:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6959      	ldr	r1, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	2207      	movs	r2, #7
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <HAL_ADC_Init+0x27c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	2203      	movs	r2, #3
 8003112:	4393      	bics	r3, r2
 8003114:	2201      	movs	r2, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800311c:	e01c      	b.n	8003158 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003122:	2212      	movs	r2, #18
 8003124:	4393      	bics	r3, r2
 8003126:	2210      	movs	r2, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003132:	2201      	movs	r2, #1
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800313a:	230f      	movs	r3, #15
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003142:	e009      	b.n	8003158 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	2210      	movs	r2, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	fffffefd 	.word	0xfffffefd
 800316c:	fffe0219 	.word	0xfffe0219
 8003170:	833fffe7 	.word	0x833fffe7

08003174 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	055b      	lsls	r3, r3, #21
 8003192:	429a      	cmp	r2, r3
 8003194:	d011      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x46>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d00d      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x46>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d009      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x46>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d005      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x46>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d001      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x46>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2234      	movs	r2, #52	@ 0x34
 80031be:	5c9b      	ldrb	r3, [r3, r2]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x54>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0d0      	b.n	800336a <HAL_ADC_ConfigChannel+0x1f6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2234      	movs	r2, #52	@ 0x34
 80031cc:	2101      	movs	r1, #1
 80031ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2204      	movs	r2, #4
 80031d8:	4013      	ands	r3, r2
 80031da:	d000      	beq.n	80031de <HAL_ADC_ConfigChannel+0x6a>
 80031dc:	e0b4      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a64      	ldr	r2, [pc, #400]	@ (8003374 <HAL_ADC_ConfigChannel+0x200>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x76>
 80031e8:	e082      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	409a      	lsls	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	055b      	lsls	r3, r3, #21
 8003208:	429a      	cmp	r2, r3
 800320a:	d037      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d033      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	2b02      	cmp	r3, #2
 800321a:	d02f      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	2b03      	cmp	r3, #3
 8003222:	d02b      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	2b04      	cmp	r3, #4
 800322a:	d027      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	2b05      	cmp	r3, #5
 8003232:	d023      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	2b06      	cmp	r3, #6
 800323a:	d01f      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	2b07      	cmp	r3, #7
 8003242:	d01b      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2107      	movs	r1, #7
 8003250:	400b      	ands	r3, r1
 8003252:	429a      	cmp	r2, r3
 8003254:	d012      	beq.n	800327c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2107      	movs	r1, #7
 8003262:	438a      	bics	r2, r1
 8003264:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6959      	ldr	r1, [r3, #20]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2207      	movs	r2, #7
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d007      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x120>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b11      	cmp	r3, #17
 800328a:	d003      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x120>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d163      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003294:	4b38      	ldr	r3, [pc, #224]	@ (8003378 <HAL_ADC_ConfigChannel+0x204>)
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b10      	cmp	r3, #16
 800329e:	d009      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x140>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b11      	cmp	r3, #17
 80032a6:	d102      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x13a>
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	03db      	lsls	r3, r3, #15
 80032ac:	e004      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x144>
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	045b      	lsls	r3, r3, #17
 80032b2:	e001      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x144>
 80032b4:	2380      	movs	r3, #128	@ 0x80
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003378 <HAL_ADC_ConfigChannel+0x204>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d14a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032c6:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <HAL_ADC_ConfigChannel+0x208>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	492d      	ldr	r1, [pc, #180]	@ (8003380 <HAL_ADC_ConfigChannel+0x20c>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fc ff1b 	bl	8000108 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	001a      	movs	r2, r3
 80032d6:	0013      	movs	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x16e>
 80032ee:	e035      	b.n	800335c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2101      	movs	r1, #1
 80032fc:	4099      	lsls	r1, r3
 80032fe:	000b      	movs	r3, r1
 8003300:	43d9      	mvns	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	400a      	ands	r2, r1
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d007      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x1ae>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b11      	cmp	r3, #17
 8003318:	d003      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x1ae>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b12      	cmp	r3, #18
 8003320:	d11c      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <HAL_ADC_ConfigChannel+0x204>)
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b10      	cmp	r3, #16
 800332c:	d007      	beq.n	800333e <HAL_ADC_ConfigChannel+0x1ca>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b11      	cmp	r3, #17
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x1c6>
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <HAL_ADC_ConfigChannel+0x210>)
 8003338:	e002      	b.n	8003340 <HAL_ADC_ConfigChannel+0x1cc>
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <HAL_ADC_ConfigChannel+0x214>)
 800333c:	e000      	b.n	8003340 <HAL_ADC_ConfigChannel+0x1cc>
 800333e:	4b13      	ldr	r3, [pc, #76]	@ (800338c <HAL_ADC_ConfigChannel+0x218>)
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <HAL_ADC_ConfigChannel+0x204>)
 8003342:	400b      	ands	r3, r1
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e009      	b.n	800335c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	2220      	movs	r2, #32
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2234      	movs	r2, #52	@ 0x34
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	781b      	ldrb	r3, [r3, #0]
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	00001001 	.word	0x00001001
 8003378:	40012708 	.word	0x40012708
 800337c:	20000040 	.word	0x20000040
 8003380:	000f4240 	.word	0x000f4240
 8003384:	ffbfffff 	.word	0xffbfffff
 8003388:	feffffff 	.word	0xfeffffff
 800338c:	ff7fffff 	.word	0xff7fffff

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	0002      	movs	r2, r0
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80033a2:	d809      	bhi.n	80033b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	001a      	movs	r2, r3
 80033aa:	231f      	movs	r3, #31
 80033ac:	401a      	ands	r2, r3
 80033ae:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_EnableIRQ+0x30>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	4091      	lsls	r1, r2
 80033b4:	000a      	movs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
  }
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	0002      	movs	r2, r0
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80033d6:	d810      	bhi.n	80033fa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	001a      	movs	r2, r3
 80033de:	231f      	movs	r3, #31
 80033e0:	4013      	ands	r3, r2
 80033e2:	4908      	ldr	r1, [pc, #32]	@ (8003404 <__NVIC_DisableIRQ+0x40>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	2280      	movs	r2, #128	@ 0x80
 80033ec:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033ee:	f3bf 8f4f 	dsb	sy
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80033f4:	f3bf 8f6f 	isb	sy
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	0002      	movs	r2, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b7f      	cmp	r3, #127	@ 0x7f
 800341c:	d828      	bhi.n	8003470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341e:	4a2f      	ldr	r2, [pc, #188]	@ (80034dc <__NVIC_SetPriority+0xd4>)
 8003420:	1dfb      	adds	r3, r7, #7
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	33c0      	adds	r3, #192	@ 0xc0
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	589b      	ldr	r3, [r3, r2]
 800342e:	1dfa      	adds	r2, r7, #7
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	0011      	movs	r1, r2
 8003434:	2203      	movs	r2, #3
 8003436:	400a      	ands	r2, r1
 8003438:	00d2      	lsls	r2, r2, #3
 800343a:	21ff      	movs	r1, #255	@ 0xff
 800343c:	4091      	lsls	r1, r2
 800343e:	000a      	movs	r2, r1
 8003440:	43d2      	mvns	r2, r2
 8003442:	401a      	ands	r2, r3
 8003444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	22ff      	movs	r2, #255	@ 0xff
 800344c:	401a      	ands	r2, r3
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	2303      	movs	r3, #3
 8003456:	4003      	ands	r3, r0
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800345c:	481f      	ldr	r0, [pc, #124]	@ (80034dc <__NVIC_SetPriority+0xd4>)
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	430a      	orrs	r2, r1
 8003468:	33c0      	adds	r3, #192	@ 0xc0
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346e:	e031      	b.n	80034d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <__NVIC_SetPriority+0xd8>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0019      	movs	r1, r3
 8003478:	230f      	movs	r3, #15
 800347a:	400b      	ands	r3, r1
 800347c:	3b08      	subs	r3, #8
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3306      	adds	r3, #6
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1dfa      	adds	r2, r7, #7
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	0011      	movs	r1, r2
 8003490:	2203      	movs	r2, #3
 8003492:	400a      	ands	r2, r1
 8003494:	00d2      	lsls	r2, r2, #3
 8003496:	21ff      	movs	r1, #255	@ 0xff
 8003498:	4091      	lsls	r1, r2
 800349a:	000a      	movs	r2, r1
 800349c:	43d2      	mvns	r2, r2
 800349e:	401a      	ands	r2, r3
 80034a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	22ff      	movs	r2, #255	@ 0xff
 80034a8:	401a      	ands	r2, r3
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	0018      	movs	r0, r3
 80034b0:	2303      	movs	r3, #3
 80034b2:	4003      	ands	r3, r0
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b8:	4809      	ldr	r0, [pc, #36]	@ (80034e0 <__NVIC_SetPriority+0xd8>)
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	001c      	movs	r4, r3
 80034c0:	230f      	movs	r3, #15
 80034c2:	4023      	ands	r3, r4
 80034c4:	3b08      	subs	r3, #8
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	430a      	orrs	r2, r1
 80034ca:	3306      	adds	r3, #6
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	18c3      	adds	r3, r0, r3
 80034d0:	3304      	adds	r3, #4
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b003      	add	sp, #12
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	045b      	lsls	r3, r3, #17
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d301      	bcc.n	80034fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f8:	2301      	movs	r3, #1
 80034fa:	e010      	b.n	800351e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <SysTick_Config+0x44>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	3a01      	subs	r2, #1
 8003502:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003504:	2301      	movs	r3, #1
 8003506:	425b      	negs	r3, r3
 8003508:	2103      	movs	r1, #3
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff ff7c 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <SysTick_Config+0x44>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <SysTick_Config+0x44>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	210f      	movs	r1, #15
 8003538:	187b      	adds	r3, r7, r1
 800353a:	1c02      	adds	r2, r0, #0
 800353c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	187b      	adds	r3, r7, r1
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	0002      	movs	r2, r0
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff ff11 	bl	8003390 <__NVIC_EnableIRQ>
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	0002      	movs	r2, r0
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b25b      	sxtb	r3, r3
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff ff1b 	bl	80033c4 <__NVIC_DisableIRQ>
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff ff9f 	bl	80034e4 <SysTick_Config>
 80035a6:	0003      	movs	r3, r0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e155      	b.n	800386c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4091      	lsls	r1, r2
 80035ca:	000a      	movs	r2, r1
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <HAL_GPIO_Init+0x28>
 80035d6:	e146      	b.n	8003866 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	4013      	ands	r3, r2
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d005      	beq.n	80035f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d130      	bne.n	8003652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	409a      	lsls	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	43da      	mvns	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
 800362c:	0013      	movs	r3, r2
 800362e:	43da      	mvns	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	2201      	movs	r2, #1
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2203      	movs	r2, #3
 8003658:	4013      	ands	r3, r2
 800365a:	2b03      	cmp	r3, #3
 800365c:	d017      	beq.n	800368e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	0013      	movs	r3, r2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	4013      	ands	r3, r2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d123      	bne.n	80036e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	58d3      	ldr	r3, [r2, r3]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2207      	movs	r2, #7
 80036ac:	4013      	ands	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	409a      	lsls	r2, r3
 80036b4:	0013      	movs	r3, r2
 80036b6:	43da      	mvns	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2107      	movs	r1, #7
 80036c6:	400b      	ands	r3, r1
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	6939      	ldr	r1, [r7, #16]
 80036e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	409a      	lsls	r2, r3
 80036f0:	0013      	movs	r3, r2
 80036f2:	43da      	mvns	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	0013      	movs	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	23c0      	movs	r3, #192	@ 0xc0
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_GPIO_Init+0x174>
 8003722:	e0a0      	b.n	8003866 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003724:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <HAL_GPIO_Init+0x2d4>)
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b56      	ldr	r3, [pc, #344]	@ (8003884 <HAL_GPIO_Init+0x2d4>)
 800372a:	2101      	movs	r1, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
 8003730:	4b54      	ldr	r3, [pc, #336]	@ (8003884 <HAL_GPIO_Init+0x2d4>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2201      	movs	r2, #1
 8003736:	4013      	ands	r3, r2
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800373c:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_GPIO_Init+0x2d8>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	589b      	ldr	r3, [r3, r2]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2203      	movs	r2, #3
 800374e:	4013      	ands	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	409a      	lsls	r2, r3
 8003756:	0013      	movs	r3, r2
 8003758:	43da      	mvns	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	2390      	movs	r3, #144	@ 0x90
 8003764:	05db      	lsls	r3, r3, #23
 8003766:	429a      	cmp	r2, r3
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x1ee>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a47      	ldr	r2, [pc, #284]	@ (800388c <HAL_GPIO_Init+0x2dc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x1ea>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a46      	ldr	r2, [pc, #280]	@ (8003890 <HAL_GPIO_Init+0x2e0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x1e6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a45      	ldr	r2, [pc, #276]	@ (8003894 <HAL_GPIO_Init+0x2e4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x1e2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a44      	ldr	r2, [pc, #272]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x1de>
 800378a:	2304      	movs	r3, #4
 800378c:	e008      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800378e:	2305      	movs	r3, #5
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 8003792:	2303      	movs	r3, #3
 8003794:	e004      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 8003796:	2302      	movs	r3, #2
 8003798:	e002      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800379e:	2300      	movs	r3, #0
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	2103      	movs	r1, #3
 80037a4:	400a      	ands	r2, r1
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	4093      	lsls	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037b0:	4935      	ldr	r1, [pc, #212]	@ (8003888 <HAL_GPIO_Init+0x2d8>)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	3302      	adds	r3, #2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	035b      	lsls	r3, r3, #13
 80037d6:	4013      	ands	r3, r2
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037e2:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037e8:	4b2c      	ldr	r3, [pc, #176]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	039b      	lsls	r3, r3, #14
 8003800:	4013      	ands	r3, r2
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800380c:	4b23      	ldr	r3, [pc, #140]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003812:	4b22      	ldr	r3, [pc, #136]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	029b      	lsls	r3, r3, #10
 800382a:	4013      	ands	r3, r2
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003836:	4b19      	ldr	r3, [pc, #100]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800383c:	4b17      	ldr	r3, [pc, #92]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43da      	mvns	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	025b      	lsls	r3, r3, #9
 8003854:	4013      	ands	r3, r2
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	40da      	lsrs	r2, r3
 8003874:	1e13      	subs	r3, r2, #0
 8003876:	d000      	beq.n	800387a <HAL_GPIO_Init+0x2ca>
 8003878:	e6a2      	b.n	80035c0 <HAL_GPIO_Init+0x10>
  } 
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	48000400 	.word	0x48000400
 8003890:	48000800 	.word	0x48000800
 8003894:	48000c00 	.word	0x48000c00
 8003898:	48001000 	.word	0x48001000
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	000a      	movs	r2, r1
 80038aa:	1cbb      	adds	r3, r7, #2
 80038ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	1cba      	adds	r2, r7, #2
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	4013      	ands	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80038ba:	230f      	movs	r3, #15
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e003      	b.n	80038cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
  }
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	0008      	movs	r0, r1
 80038e4:	0011      	movs	r1, r2
 80038e6:	1cbb      	adds	r3, r7, #2
 80038e8:	1c02      	adds	r2, r0, #0
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	1c7b      	adds	r3, r7, #1
 80038ee:	1c0a      	adds	r2, r1, #0
 80038f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f2:	1c7b      	adds	r3, r7, #1
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038fa:	1cbb      	adds	r3, r7, #2
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003902:	e003      	b.n	800390c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003904:	1cbb      	adds	r3, r7, #2
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	4013      	ands	r3, r2
 800392a:	d008      	beq.n	800393e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	0018      	movs	r0, r3
 800393a:	f009 f8bb 	bl	800cab4 <HAL_GPIO_EXTI_Callback>
  }
}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e4      	b.n	8003b28 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a73      	ldr	r2, [pc, #460]	@ (8003b30 <HAL_PCD_Init+0x1e4>)
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	23a4      	movs	r3, #164	@ 0xa4
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	2100      	movs	r1, #0
 8003972:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f007 fba4 	bl	800b0c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b30 <HAL_PCD_Init+0x1e4>)
 8003980:	2103      	movs	r1, #3
 8003982:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0018      	movs	r0, r3
 800398a:	f003 fbcd 	bl	8007128 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	230f      	movs	r3, #15
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e047      	b.n	8003a28 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003998:	200f      	movs	r0, #15
 800399a:	183b      	adds	r3, r7, r0
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	0013      	movs	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	18cb      	adds	r3, r1, r3
 80039aa:	3311      	adds	r3, #17
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	0013      	movs	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	18cb      	adds	r3, r1, r3
 80039c0:	3310      	adds	r3, #16
 80039c2:	183a      	adds	r2, r7, r0
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	0013      	movs	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	18cb      	adds	r3, r1, r3
 80039d8:	3313      	adds	r3, #19
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	0013      	movs	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	18cb      	adds	r3, r1, r3
 80039ee:	3320      	adds	r3, #32
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	0013      	movs	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	18cb      	adds	r3, r1, r3
 8003a04:	3324      	adds	r3, #36	@ 0x24
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	0013      	movs	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	3201      	adds	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	210f      	movs	r1, #15
 8003a2e:	187a      	adds	r2, r7, r1
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3b0      	bcc.n	8003998 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e056      	b.n	8003aec <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a3e:	240f      	movs	r4, #15
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	2352      	movs	r3, #82	@ 0x52
 8003a48:	33ff      	adds	r3, #255	@ 0xff
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	18c3      	adds	r3, r0, r3
 8003a56:	185b      	adds	r3, r3, r1
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	23a8      	movs	r3, #168	@ 0xa8
 8003a64:	0059      	lsls	r1, r3, #1
 8003a66:	0013      	movs	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	18c3      	adds	r3, r0, r3
 8003a70:	185b      	adds	r3, r3, r1
 8003a72:	193a      	adds	r2, r7, r4
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a78:	193b      	adds	r3, r7, r4
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	2354      	movs	r3, #84	@ 0x54
 8003a80:	33ff      	adds	r3, #255	@ 0xff
 8003a82:	0019      	movs	r1, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	189b      	adds	r3, r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	18c3      	adds	r3, r0, r3
 8003a8e:	185b      	adds	r3, r3, r1
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	23b0      	movs	r3, #176	@ 0xb0
 8003a9c:	0059      	lsls	r1, r3, #1
 8003a9e:	0013      	movs	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	18c3      	adds	r3, r0, r3
 8003aa8:	185b      	adds	r3, r3, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	23b2      	movs	r3, #178	@ 0xb2
 8003ab6:	0059      	lsls	r1, r3, #1
 8003ab8:	0013      	movs	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	189b      	adds	r3, r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	18c3      	adds	r3, r0, r3
 8003ac2:	185b      	adds	r3, r3, r1
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	23b4      	movs	r3, #180	@ 0xb4
 8003ad0:	0059      	lsls	r1, r3, #1
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	18c3      	adds	r3, r0, r3
 8003adc:	185b      	adds	r3, r3, r1
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	3201      	adds	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	791b      	ldrb	r3, [r3, #4]
 8003af0:	220f      	movs	r2, #15
 8003af2:	18ba      	adds	r2, r7, r2
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d3a1      	bcc.n	8003a3e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	f003 fb2a 	bl	800715c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <HAL_PCD_Init+0x1e4>)
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7a9b      	ldrb	r3, [r3, #10]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d103      	bne.n	8003b26 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f001 fd1f 	bl	8005564 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b005      	add	sp, #20
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	00000291 	.word	0x00000291

08003b34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	23a4      	movs	r3, #164	@ 0xa4
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_Start+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e014      	b.n	8003b76 <HAL_PCD_Start+0x42>
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	23a4      	movs	r3, #164	@ 0xa4
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	2101      	movs	r1, #1
 8003b54:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f003 face 	bl	80070fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f005 fac3 	bl	80090f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	23a4      	movs	r3, #164	@ 0xa4
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	2100      	movs	r1, #0
 8003b72:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f005 fac5 	bl	800911c <USB_ReadInterrupts>
 8003b92:	0003      	movs	r3, r0
 8003b94:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f000 fb60 	bl	8004268 <PCD_EP_ISR_Handler>

    return;
 8003ba8:	e11d      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d015      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2244      	movs	r2, #68	@ 0x44
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	498a      	ldr	r1, [pc, #552]	@ (8003dec <HAL_PCD_IRQHandler+0x26c>)
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	b291      	uxth	r1, r2
 8003bc8:	2244      	movs	r2, #68	@ 0x44
 8003bca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f007 fb03 	bl	800b1da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 f915 	bl	8003e08 <HAL_PCD_SetAddress>

    return;
 8003bde:	e102      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	2380      	movs	r3, #128	@ 0x80
 8003be4:	01db      	lsls	r3, r3, #7
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00c      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2244      	movs	r2, #68	@ 0x44
 8003bf0:	5a9b      	ldrh	r3, [r3, r2]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	497d      	ldr	r1, [pc, #500]	@ (8003df0 <HAL_PCD_IRQHandler+0x270>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	b291      	uxth	r1, r2
 8003bfe:	2244      	movs	r2, #68	@ 0x44
 8003c00:	5299      	strh	r1, [r3, r2]

    return;
 8003c02:	e0f0      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00c      	beq.n	8003c28 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2244      	movs	r2, #68	@ 0x44
 8003c14:	5a9b      	ldrh	r3, [r3, r2]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4975      	ldr	r1, [pc, #468]	@ (8003df4 <HAL_PCD_IRQHandler+0x274>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	b291      	uxth	r1, r2
 8003c22:	2244      	movs	r2, #68	@ 0x44
 8003c24:	5299      	strh	r1, [r3, r2]

    return;
 8003c26:	e0de      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	015b      	lsls	r3, r3, #5
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d038      	beq.n	8003ca4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2240      	movs	r2, #64	@ 0x40
 8003c38:	5a9b      	ldrh	r3, [r3, r2]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2104      	movs	r1, #4
 8003c42:	438a      	bics	r2, r1
 8003c44:	b291      	uxth	r1, r2
 8003c46:	2240      	movs	r2, #64	@ 0x40
 8003c48:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2240      	movs	r2, #64	@ 0x40
 8003c50:	5a9b      	ldrh	r3, [r3, r2]
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2108      	movs	r1, #8
 8003c5a:	438a      	bics	r2, r1
 8003c5c:	b291      	uxth	r1, r2
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	23b2      	movs	r3, #178	@ 0xb2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d109      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	23b2      	movs	r3, #178	@ 0xb2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	2100      	movs	r1, #0
 8003c76:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f001 fc9b 	bl	80055b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f007 fae9 	bl	800b25c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2244      	movs	r2, #68	@ 0x44
 8003c90:	5a9b      	ldrh	r3, [r3, r2]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4957      	ldr	r1, [pc, #348]	@ (8003df8 <HAL_PCD_IRQHandler+0x278>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	b291      	uxth	r1, r2
 8003c9e:	2244      	movs	r2, #68	@ 0x44
 8003ca0:	5299      	strh	r1, [r3, r2]

    return;
 8003ca2:	e0a0      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	2380      	movs	r3, #128	@ 0x80
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	4013      	ands	r3, r2
 8003cac:	d028      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	5a9b      	ldrh	r3, [r3, r2]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	b291      	uxth	r1, r2
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2244      	movs	r2, #68	@ 0x44
 8003ccc:	5a9b      	ldrh	r3, [r3, r2]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4949      	ldr	r1, [pc, #292]	@ (8003dfc <HAL_PCD_IRQHandler+0x27c>)
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	b291      	uxth	r1, r2
 8003cda:	2244      	movs	r2, #68	@ 0x44
 8003cdc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2240      	movs	r2, #64	@ 0x40
 8003ce4:	5a9b      	ldrh	r3, [r3, r2]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2104      	movs	r1, #4
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	b291      	uxth	r1, r2
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f007 fa93 	bl	800b224 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cfe:	e072      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2280      	movs	r2, #128	@ 0x80
 8003d04:	4013      	ands	r3, r2
 8003d06:	d046      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2244      	movs	r2, #68	@ 0x44
 8003d0e:	5a9b      	ldrh	r3, [r3, r2]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2180      	movs	r1, #128	@ 0x80
 8003d18:	438a      	bics	r2, r1
 8003d1a:	b291      	uxth	r1, r2
 8003d1c:	2244      	movs	r2, #68	@ 0x44
 8003d1e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	23b2      	movs	r3, #178	@ 0xb2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d12f      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2240      	movs	r2, #64	@ 0x40
 8003d32:	5a9b      	ldrh	r3, [r3, r2]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	b291      	uxth	r1, r2
 8003d40:	2240      	movs	r2, #64	@ 0x40
 8003d42:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2240      	movs	r2, #64	@ 0x40
 8003d4a:	5a9b      	ldrh	r3, [r3, r2]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2108      	movs	r1, #8
 8003d54:	430a      	orrs	r2, r1
 8003d56:	b291      	uxth	r1, r2
 8003d58:	2240      	movs	r2, #64	@ 0x40
 8003d5a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	23b2      	movs	r3, #178	@ 0xb2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	2101      	movs	r1, #1
 8003d64:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2254      	movs	r2, #84	@ 0x54
 8003d6c:	5a9b      	ldrh	r3, [r3, r2]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	223c      	movs	r2, #60	@ 0x3c
 8003d74:	4013      	ands	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	23b3      	movs	r3, #179	@ 0xb3
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2101      	movs	r1, #1
 8003d84:	0018      	movs	r0, r3
 8003d86:	f001 fc17 	bl	80055b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d8a:	e02c      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f007 fa48 	bl	800b224 <HAL_PCD_SuspendCallback>
    return;
 8003d94:	e027      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d010      	beq.n	8003dc2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2244      	movs	r2, #68	@ 0x44
 8003da6:	5a9b      	ldrh	r3, [r3, r2]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4914      	ldr	r1, [pc, #80]	@ (8003e00 <HAL_PCD_IRQHandler+0x280>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	b291      	uxth	r1, r2
 8003db4:	2244      	movs	r2, #68	@ 0x44
 8003db6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f007 f9fe 	bl	800b1bc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dc0:	e011      	b.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d00c      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2244      	movs	r2, #68	@ 0x44
 8003dd2:	5a9b      	ldrh	r3, [r3, r2]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	490a      	ldr	r1, [pc, #40]	@ (8003e04 <HAL_PCD_IRQHandler+0x284>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	b291      	uxth	r1, r2
 8003de0:	2244      	movs	r2, #68	@ 0x44
 8003de2:	5299      	strh	r1, [r3, r2]

    return;
 8003de4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b004      	add	sp, #16
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	fffffbff 	.word	0xfffffbff
 8003df0:	ffffbfff 	.word	0xffffbfff
 8003df4:	ffffdfff 	.word	0xffffdfff
 8003df8:	ffffefff 	.word	0xffffefff
 8003dfc:	fffff7ff 	.word	0xfffff7ff
 8003e00:	fffffdff 	.word	0xfffffdff
 8003e04:	fffffeff 	.word	0xfffffeff

08003e08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	000a      	movs	r2, r1
 8003e12:	1cfb      	adds	r3, r7, #3
 8003e14:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	23a4      	movs	r3, #164	@ 0xa4
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	5cd3      	ldrb	r3, [r2, r3]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_PCD_SetAddress+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e016      	b.n	8003e54 <HAL_PCD_SetAddress+0x4c>
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	23a4      	movs	r3, #164	@ 0xa4
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1cfa      	adds	r2, r7, #3
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	1cfb      	adds	r3, r7, #3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f005 f940 	bl	80090c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	23a4      	movs	r3, #164	@ 0xa4
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	2100      	movs	r1, #0
 8003e50:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	000c      	movs	r4, r1
 8003e66:	0010      	movs	r0, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	1cfb      	adds	r3, r7, #3
 8003e6c:	1c22      	adds	r2, r4, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	003b      	movs	r3, r7
 8003e72:	1c02      	adds	r2, r0, #0
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	1cbb      	adds	r3, r7, #2
 8003e78:	1c0a      	adds	r2, r1, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e7c:	230b      	movs	r3, #11
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e84:	1cfb      	adds	r3, r7, #3
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da0f      	bge.n	8003eae <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	1cfb      	adds	r3, r7, #3
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2207      	movs	r2, #7
 8003e94:	401a      	ands	r2, r3
 8003e96:	0013      	movs	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	705a      	strb	r2, [r3, #1]
 8003eac:	e00f      	b.n	8003ece <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	1cfb      	adds	r3, r7, #3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	0013      	movs	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	3351      	adds	r3, #81	@ 0x51
 8003ec0:	33ff      	adds	r3, #255	@ 0xff
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ece:	1cfb      	adds	r3, r7, #3
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003edc:	003b      	movs	r3, r7
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1cba      	adds	r2, r7, #2
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eec:	1cbb      	adds	r3, r7, #2
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d102      	bne.n	8003efa <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	23a4      	movs	r3, #164	@ 0xa4
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_PCD_EP_Open+0xae>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e013      	b.n	8003f32 <HAL_PCD_EP_Open+0xd6>
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	23a4      	movs	r3, #164	@ 0xa4
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	2101      	movs	r1, #1
 8003f12:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f003 f939 	bl	8007194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	23a4      	movs	r3, #164	@ 0xa4
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	2100      	movs	r1, #0
 8003f2a:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b005      	add	sp, #20
 8003f38:	bd90      	pop	{r4, r7, pc}

08003f3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	000a      	movs	r2, r1
 8003f44:	1cfb      	adds	r3, r7, #3
 8003f46:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f48:	1cfb      	adds	r3, r7, #3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da0f      	bge.n	8003f72 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f52:	1cfb      	adds	r3, r7, #3
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2207      	movs	r2, #7
 8003f58:	401a      	ands	r2, r3
 8003f5a:	0013      	movs	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	3310      	adds	r3, #16
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	18d3      	adds	r3, r2, r3
 8003f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	705a      	strb	r2, [r3, #1]
 8003f70:	e00f      	b.n	8003f92 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f72:	1cfb      	adds	r3, r7, #3
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2207      	movs	r2, #7
 8003f78:	401a      	ands	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	189b      	adds	r3, r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	3351      	adds	r3, #81	@ 0x51
 8003f84:	33ff      	adds	r3, #255	@ 0xff
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f92:	1cfb      	adds	r3, r7, #3
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2207      	movs	r2, #7
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	23a4      	movs	r3, #164	@ 0xa4
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_EP_Close+0x76>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e011      	b.n	8003fd4 <HAL_PCD_EP_Close+0x9a>
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	23a4      	movs	r3, #164	@ 0xa4
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f003 fc8e 	bl	80078e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	23a4      	movs	r3, #164	@ 0xa4
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	2100      	movs	r1, #0
 8003fd0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	200b      	movs	r0, #11
 8003fea:	183b      	adds	r3, r7, r0
 8003fec:	1c0a      	adds	r2, r1, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	0001      	movs	r1, r0
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	3351      	adds	r3, #81	@ 0x51
 8004004:	33ff      	adds	r3, #255	@ 0xff
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004024:	187b      	adds	r3, r7, r1
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2207      	movs	r2, #7
 800402a:	4013      	ands	r3, r2
 800402c:	b2da      	uxtb	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f003 fe12 	bl	8007c64 <USB_EPStartXfer>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b006      	add	sp, #24
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	000a      	movs	r2, r1
 8004054:	1cfb      	adds	r3, r7, #3
 8004056:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004058:	1cfb      	adds	r3, r7, #3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2207      	movs	r2, #7
 800405e:	401a      	ands	r2, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	23b6      	movs	r3, #182	@ 0xb6
 8004064:	0059      	lsls	r1, r3, #1
 8004066:	0013      	movs	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	189b      	adds	r3, r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	18c3      	adds	r3, r0, r3
 8004070:	185b      	adds	r3, r3, r1
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	200b      	movs	r0, #11
 800408a:	183b      	adds	r3, r7, r0
 800408c:	1c0a      	adds	r2, r1, #0
 800408e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	183b      	adds	r3, r7, r0
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2207      	movs	r2, #7
 8004096:	401a      	ands	r2, r3
 8004098:	0013      	movs	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	189b      	adds	r3, r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	3310      	adds	r3, #16
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2201      	movs	r2, #1
 80040cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2207      	movs	r2, #7
 80040d4:	4013      	ands	r3, r2
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f003 fdbd 	bl	8007c64 <USB_EPStartXfer>

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b006      	add	sp, #24
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	000a      	movs	r2, r1
 80040fe:	1cfb      	adds	r3, r7, #3
 8004100:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004102:	1cfb      	adds	r3, r7, #3
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2207      	movs	r2, #7
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	7912      	ldrb	r2, [r2, #4]
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e046      	b.n	80041a4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004116:	1cfb      	adds	r3, r7, #3
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	da0f      	bge.n	8004140 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004120:	1cfb      	adds	r3, r7, #3
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2207      	movs	r2, #7
 8004126:	401a      	ands	r2, r3
 8004128:	0013      	movs	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	189b      	adds	r3, r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3310      	adds	r3, #16
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	705a      	strb	r2, [r3, #1]
 800413e:	e00d      	b.n	800415c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004140:	1cfb      	adds	r3, r7, #3
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	0013      	movs	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	189b      	adds	r3, r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3351      	adds	r3, #81	@ 0x51
 800414e:	33ff      	adds	r3, #255	@ 0xff
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004162:	1cfb      	adds	r3, r7, #3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2207      	movs	r2, #7
 8004168:	4013      	ands	r3, r2
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	23a4      	movs	r3, #164	@ 0xa4
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	5cd3      	ldrb	r3, [r2, r3]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_EP_SetStall+0x8c>
 800417c:	2302      	movs	r3, #2
 800417e:	e011      	b.n	80041a4 <HAL_PCD_EP_SetStall+0xb0>
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	23a4      	movs	r3, #164	@ 0xa4
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	2101      	movs	r1, #1
 8004188:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	0011      	movs	r1, r2
 8004192:	0018      	movs	r0, r3
 8004194:	f004 fe96 	bl	8008ec4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	23a4      	movs	r3, #164	@ 0xa4
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	2100      	movs	r1, #0
 80041a0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	000a      	movs	r2, r1
 80041b6:	1cfb      	adds	r3, r7, #3
 80041b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041ba:	1cfb      	adds	r3, r7, #3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	220f      	movs	r2, #15
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	7912      	ldrb	r2, [r2, #4]
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e048      	b.n	8004260 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ce:	1cfb      	adds	r3, r7, #3
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da0f      	bge.n	80041f8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	1cfb      	adds	r3, r7, #3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2207      	movs	r2, #7
 80041de:	401a      	ands	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	189b      	adds	r3, r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	3310      	adds	r3, #16
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	705a      	strb	r2, [r3, #1]
 80041f6:	e00f      	b.n	8004218 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f8:	1cfb      	adds	r3, r7, #3
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2207      	movs	r2, #7
 80041fe:	401a      	ands	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	189b      	adds	r3, r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3351      	adds	r3, #81	@ 0x51
 800420a:	33ff      	adds	r3, #255	@ 0xff
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	18d3      	adds	r3, r2, r3
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421e:	1cfb      	adds	r3, r7, #3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2207      	movs	r2, #7
 8004224:	4013      	ands	r3, r2
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	23a4      	movs	r3, #164	@ 0xa4
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_PCD_EP_ClrStall+0x90>
 8004238:	2302      	movs	r3, #2
 800423a:	e011      	b.n	8004260 <HAL_PCD_EP_ClrStall+0xb4>
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	23a4      	movs	r3, #164	@ 0xa4
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	2101      	movs	r1, #1
 8004244:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f004 fe88 	bl	8008f64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	23a4      	movs	r3, #164	@ 0xa4
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	2100      	movs	r1, #0
 800425c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}

08004268 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b096      	sub	sp, #88	@ 0x58
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004270:	f000 fbea 	bl	8004a48 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2048      	movs	r0, #72	@ 0x48
 800427a:	183b      	adds	r3, r7, r0
 800427c:	2144      	movs	r1, #68	@ 0x44
 800427e:	5a52      	ldrh	r2, [r2, r1]
 8004280:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004282:	183b      	adds	r3, r7, r0
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	244f      	movs	r4, #79	@ 0x4f
 800428a:	193b      	adds	r3, r7, r4
 800428c:	210f      	movs	r1, #15
 800428e:	400a      	ands	r2, r1
 8004290:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004292:	193b      	adds	r3, r7, r4
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d000      	beq.n	800429c <PCD_EP_ISR_Handler+0x34>
 800429a:	e18d      	b.n	80045b8 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800429c:	183b      	adds	r3, r7, r0
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	2210      	movs	r2, #16
 80042a2:	4013      	ands	r3, r2
 80042a4:	d152      	bne.n	800434c <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	200e      	movs	r0, #14
 80042b0:	183b      	adds	r3, r7, r0
 80042b2:	49ba      	ldr	r1, [pc, #744]	@ (800459c <PCD_EP_ISR_Handler+0x334>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	183a      	adds	r2, r7, r0
 80042be:	8812      	ldrh	r2, [r2, #0]
 80042c0:	49b7      	ldr	r1, [pc, #732]	@ (80045a0 <PCD_EP_ISR_Handler+0x338>)
 80042c2:	430a      	orrs	r2, r1
 80042c4:	b292      	uxth	r2, r2
 80042c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3310      	adds	r3, #16
 80042cc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2250      	movs	r2, #80	@ 0x50
 80042d4:	5a9b      	ldrh	r3, [r3, r2]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	001a      	movs	r2, r3
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	18d2      	adds	r2, r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	18d3      	adds	r3, r2, r3
 80042e8:	4aae      	ldr	r2, [pc, #696]	@ (80045a4 <PCD_EP_ISR_Handler+0x33c>)
 80042ea:	4694      	mov	ip, r2
 80042ec:	4463      	add	r3, ip
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	0d9a      	lsrs	r2, r3, #22
 80042f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	18d2      	adds	r2, r2, r3
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2100      	movs	r1, #0
 800430a:	0018      	movs	r0, r3
 800430c:	f006 ff38 	bl	800b180 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7b1b      	ldrb	r3, [r3, #12]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <PCD_EP_ISR_Handler+0xb6>
 800431a:	f000 fb95 	bl	8004a48 <PCD_EP_ISR_Handler+0x7e0>
 800431e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <PCD_EP_ISR_Handler+0xc2>
 8004326:	f000 fb8f 	bl	8004a48 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7b1b      	ldrb	r3, [r3, #12]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2280      	movs	r2, #128	@ 0x80
 8004332:	4252      	negs	r2, r2
 8004334:	4313      	orrs	r3, r2
 8004336:	b2da      	uxtb	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0011      	movs	r1, r2
 800433e:	224c      	movs	r2, #76	@ 0x4c
 8004340:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	731a      	strb	r2, [r3, #12]
 8004348:	f000 fb7e 	bl	8004a48 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3351      	adds	r3, #81	@ 0x51
 8004350:	33ff      	adds	r3, #255	@ 0xff
 8004352:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	214c      	movs	r1, #76	@ 0x4c
 800435a:	187b      	adds	r3, r7, r1
 800435c:	8812      	ldrh	r2, [r2, #0]
 800435e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004360:	187b      	adds	r3, r7, r1
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4013      	ands	r3, r2
 800436a:	d037      	beq.n	80043dc <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2250      	movs	r2, #80	@ 0x50
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	001a      	movs	r2, r3
 8004378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	18d2      	adds	r2, r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	4a88      	ldr	r2, [pc, #544]	@ (80045a8 <PCD_EP_ISR_Handler+0x340>)
 8004388:	4694      	mov	ip, r2
 800438a:	4463      	add	r3, ip
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	059b      	lsls	r3, r3, #22
 8004390:	0d9a      	lsrs	r2, r3, #22
 8004392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004394:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	22a6      	movs	r2, #166	@ 0xa6
 800439e:	0092      	lsls	r2, r2, #2
 80043a0:	1899      	adds	r1, r3, r2
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f004 ff0d 	bl	80091ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	2010      	movs	r0, #16
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	497b      	ldr	r1, [pc, #492]	@ (80045ac <PCD_EP_ISR_Handler+0x344>)
 80043be:	400a      	ands	r2, r1
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	183a      	adds	r2, r7, r0
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	430a      	orrs	r2, r1
 80043ce:	b292      	uxth	r2, r2
 80043d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f006 fe9d 	bl	800b114 <HAL_PCD_SetupStageCallback>
 80043da:	e335      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043dc:	234c      	movs	r3, #76	@ 0x4c
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	5e9b      	ldrsh	r3, [r3, r2]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db00      	blt.n	80043ea <PCD_EP_ISR_Handler+0x182>
 80043e8:	e32e      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	201e      	movs	r0, #30
 80043f4:	183b      	adds	r3, r7, r0
 80043f6:	496d      	ldr	r1, [pc, #436]	@ (80045ac <PCD_EP_ISR_Handler+0x344>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	183a      	adds	r2, r7, r0
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	430a      	orrs	r2, r1
 8004408:	b292      	uxth	r2, r2
 800440a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2250      	movs	r2, #80	@ 0x50
 8004412:	5a9b      	ldrh	r3, [r3, r2]
 8004414:	b29b      	uxth	r3, r3
 8004416:	001a      	movs	r2, r3
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	18d2      	adds	r2, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	4a60      	ldr	r2, [pc, #384]	@ (80045a8 <PCD_EP_ISR_Handler+0x340>)
 8004428:	4694      	mov	ip, r2
 800442a:	4463      	add	r3, ip
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	059b      	lsls	r3, r3, #22
 8004430:	0d9a      	lsrs	r2, r3, #22
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01a      	beq.n	8004474 <PCD_EP_ISR_Handler+0x20c>
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444c:	6959      	ldr	r1, [r3, #20]
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004454:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004456:	b29b      	uxth	r3, r3
 8004458:	f004 feb7 	bl	80091ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800445c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	18d2      	adds	r2, r2, r3
 8004466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004468:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2100      	movs	r1, #0
 800446e:	0018      	movs	r0, r3
 8004470:	f006 fe65 	bl	800b13e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	214c      	movs	r1, #76	@ 0x4c
 800447a:	187b      	adds	r3, r7, r1
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004480:	187b      	adds	r3, r7, r1
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	4013      	ands	r3, r2
 800448a:	d000      	beq.n	800448e <PCD_EP_ISR_Handler+0x226>
 800448c:	e2dc      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
 800448e:	187b      	adds	r3, r7, r1
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	23c0      	movs	r3, #192	@ 0xc0
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	401a      	ands	r2, r3
 8004498:	23c0      	movs	r3, #192	@ 0xc0
 800449a:	019b      	lsls	r3, r3, #6
 800449c:	429a      	cmp	r2, r3
 800449e:	d100      	bne.n	80044a2 <PCD_EP_ISR_Handler+0x23a>
 80044a0:	e2d2      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2250      	movs	r2, #80	@ 0x50
 80044ae:	5a9b      	ldrh	r3, [r3, r2]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	001a      	movs	r2, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4a3a      	ldr	r2, [pc, #232]	@ (80045a8 <PCD_EP_ISR_Handler+0x340>)
 80044be:	4694      	mov	ip, r2
 80044c0:	4463      	add	r3, ip
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	059b      	lsls	r3, r3, #22
 80044cc:	0d9b      	lsrs	r3, r3, #22
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <PCD_EP_ISR_Handler+0x286>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	4a2f      	ldr	r2, [pc, #188]	@ (80045a0 <PCD_EP_ISR_Handler+0x338>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	e035      	b.n	800455a <PCD_EP_ISR_Handler+0x2f2>
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80044f4:	d817      	bhi.n	8004526 <PCD_EP_ISR_Handler+0x2be>
 80044f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d002      	beq.n	800450e <PCD_EP_ISR_Handler+0x2a6>
 8004508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450a:	3301      	adds	r3, #1
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29a      	uxth	r2, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004516:	b29b      	uxth	r3, r3
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	b29b      	uxth	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	b29a      	uxth	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	e019      	b.n	800455a <PCD_EP_ISR_Handler+0x2f2>
 8004526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	647b      	str	r3, [r7, #68]	@ 0x44
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	221f      	movs	r2, #31
 8004534:	4013      	ands	r3, r2
 8004536:	d102      	bne.n	800453e <PCD_EP_ISR_Handler+0x2d6>
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	3b01      	subs	r3, #1
 800453c:	647b      	str	r3, [r7, #68]	@ 0x44
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29a      	uxth	r2, r3
 8004544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004546:	b29b      	uxth	r3, r3
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	b29b      	uxth	r3, r3
 800454c:	4313      	orrs	r3, r2
 800454e:	b29b      	uxth	r3, r3
 8004550:	4a13      	ldr	r2, [pc, #76]	@ (80045a0 <PCD_EP_ISR_Handler+0x338>)
 8004552:	4313      	orrs	r3, r2
 8004554:	b29a      	uxth	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29a      	uxth	r2, r3
 8004562:	2012      	movs	r0, #18
 8004564:	183b      	adds	r3, r7, r0
 8004566:	4912      	ldr	r1, [pc, #72]	@ (80045b0 <PCD_EP_ISR_Handler+0x348>)
 8004568:	400a      	ands	r2, r1
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	183b      	adds	r3, r7, r0
 800456e:	183a      	adds	r2, r7, r0
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	2180      	movs	r1, #128	@ 0x80
 8004574:	0149      	lsls	r1, r1, #5
 8004576:	404a      	eors	r2, r1
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	183b      	adds	r3, r7, r0
 800457c:	183a      	adds	r2, r7, r0
 800457e:	8812      	ldrh	r2, [r2, #0]
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	0189      	lsls	r1, r1, #6
 8004584:	404a      	eors	r2, r1
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	183a      	adds	r2, r7, r0
 800458e:	8812      	ldrh	r2, [r2, #0]
 8004590:	4908      	ldr	r1, [pc, #32]	@ (80045b4 <PCD_EP_ISR_Handler+0x34c>)
 8004592:	430a      	orrs	r2, r1
 8004594:	b292      	uxth	r2, r2
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	e256      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	ffff8f0f 	.word	0xffff8f0f
 80045a0:	ffff8000 	.word	0xffff8000
 80045a4:	00000402 	.word	0x00000402
 80045a8:	00000406 	.word	0x00000406
 80045ac:	00000f8f 	.word	0x00000f8f
 80045b0:	ffffbf8f 	.word	0xffffbf8f
 80045b4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	001a      	movs	r2, r3
 80045be:	204f      	movs	r0, #79	@ 0x4f
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	18d2      	adds	r2, r2, r3
 80045c8:	214c      	movs	r1, #76	@ 0x4c
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	8812      	ldrh	r2, [r2, #0]
 80045ce:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	2200      	movs	r2, #0
 80045d4:	5e9b      	ldrsh	r3, [r3, r2]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db00      	blt.n	80045dc <PCD_EP_ISR_Handler+0x374>
 80045da:	e0fa      	b.n	80047d2 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	001a      	movs	r2, r3
 80045e2:	183b      	adds	r3, r7, r0
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	244a      	movs	r4, #74	@ 0x4a
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	49d1      	ldr	r1, [pc, #836]	@ (8004938 <PCD_EP_ISR_Handler+0x6d0>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	001a      	movs	r2, r3
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	18d3      	adds	r3, r2, r3
 8004606:	193a      	adds	r2, r7, r4
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	430a      	orrs	r2, r1
 800460e:	b292      	uxth	r2, r2
 8004610:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004612:	183b      	adds	r3, r7, r0
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	0013      	movs	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	189b      	adds	r3, r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	3351      	adds	r3, #81	@ 0x51
 8004620:	33ff      	adds	r3, #255	@ 0xff
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	18d3      	adds	r3, r2, r3
 8004626:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462a:	7b1b      	ldrb	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d125      	bne.n	800467c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2250      	movs	r2, #80	@ 0x50
 8004636:	5a9b      	ldrh	r3, [r3, r2]
 8004638:	b29b      	uxth	r3, r3
 800463a:	001a      	movs	r2, r3
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	18d2      	adds	r2, r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	4abc      	ldr	r2, [pc, #752]	@ (800493c <PCD_EP_ISR_Handler+0x6d4>)
 800464c:	4694      	mov	ip, r2
 800464e:	4463      	add	r3, ip
 8004650:	881a      	ldrh	r2, [r3, #0]
 8004652:	2450      	movs	r4, #80	@ 0x50
 8004654:	193b      	adds	r3, r7, r4
 8004656:	0592      	lsls	r2, r2, #22
 8004658:	0d92      	lsrs	r2, r2, #22
 800465a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800465c:	193b      	adds	r3, r7, r4
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d100      	bne.n	8004666 <PCD_EP_ISR_Handler+0x3fe>
 8004664:	e08d      	b.n	8004782 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	88da      	ldrh	r2, [r3, #6]
 8004672:	193b      	adds	r3, r7, r4
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	f004 fda8 	bl	80091ca <USB_ReadPMA>
 800467a:	e082      	b.n	8004782 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	78db      	ldrb	r3, [r3, #3]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d10c      	bne.n	800469e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004684:	2350      	movs	r3, #80	@ 0x50
 8004686:	18fc      	adds	r4, r7, r3
 8004688:	234c      	movs	r3, #76	@ 0x4c
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f000 f9ec 	bl	8004a70 <HAL_PCD_EP_DB_Receive>
 8004698:	0003      	movs	r3, r0
 800469a:	8023      	strh	r3, [r4, #0]
 800469c:	e071      	b.n	8004782 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	001a      	movs	r2, r3
 80046a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	2052      	movs	r0, #82	@ 0x52
 80046b2:	183b      	adds	r3, r7, r0
 80046b4:	49a2      	ldr	r1, [pc, #648]	@ (8004940 <PCD_EP_ISR_Handler+0x6d8>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	001a      	movs	r2, r3
 80046c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	183a      	adds	r2, r7, r0
 80046ca:	8812      	ldrh	r2, [r2, #0]
 80046cc:	499d      	ldr	r1, [pc, #628]	@ (8004944 <PCD_EP_ISR_Handler+0x6dc>)
 80046ce:	430a      	orrs	r2, r1
 80046d0:	b292      	uxth	r2, r2
 80046d2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	001a      	movs	r2, r3
 80046da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	18d3      	adds	r3, r2, r3
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	001a      	movs	r2, r3
 80046e8:	2380      	movs	r3, #128	@ 0x80
 80046ea:	01db      	lsls	r3, r3, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	d024      	beq.n	800473a <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2250      	movs	r2, #80	@ 0x50
 80046f6:	5a9b      	ldrh	r3, [r3, r2]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	001a      	movs	r2, r3
 80046fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	18d2      	adds	r2, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	4a8f      	ldr	r2, [pc, #572]	@ (8004948 <PCD_EP_ISR_Handler+0x6e0>)
 800470c:	4694      	mov	ip, r2
 800470e:	4463      	add	r3, ip
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	2450      	movs	r4, #80	@ 0x50
 8004714:	193b      	adds	r3, r7, r4
 8004716:	0592      	lsls	r2, r2, #22
 8004718:	0d92      	lsrs	r2, r2, #22
 800471a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800471c:	193b      	adds	r3, r7, r4
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02e      	beq.n	8004782 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	6959      	ldr	r1, [r3, #20]
 800472c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472e:	891a      	ldrh	r2, [r3, #8]
 8004730:	193b      	adds	r3, r7, r4
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	f004 fd49 	bl	80091ca <USB_ReadPMA>
 8004738:	e023      	b.n	8004782 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2250      	movs	r2, #80	@ 0x50
 8004740:	5a9b      	ldrh	r3, [r3, r2]
 8004742:	b29b      	uxth	r3, r3
 8004744:	001a      	movs	r2, r3
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	18d2      	adds	r2, r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	18d3      	adds	r3, r2, r3
 8004754:	4a79      	ldr	r2, [pc, #484]	@ (800493c <PCD_EP_ISR_Handler+0x6d4>)
 8004756:	4694      	mov	ip, r2
 8004758:	4463      	add	r3, ip
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	2450      	movs	r4, #80	@ 0x50
 800475e:	193b      	adds	r3, r7, r4
 8004760:	0592      	lsls	r2, r2, #22
 8004762:	0d92      	lsrs	r2, r2, #22
 8004764:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004766:	193b      	adds	r3, r7, r4
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	6959      	ldr	r1, [r3, #20]
 8004776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004778:	895a      	ldrh	r2, [r3, #10]
 800477a:	193b      	adds	r3, r7, r4
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f004 fd24 	bl	80091ca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	2150      	movs	r1, #80	@ 0x50
 8004788:	187b      	adds	r3, r7, r1
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	18d2      	adds	r2, r2, r3
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	187b      	adds	r3, r7, r1
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	18d2      	adds	r2, r2, r3
 800479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80047a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <PCD_EP_ISR_Handler+0x54c>
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d207      	bcs.n	80047c4 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80047b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	0011      	movs	r1, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f006 fcbe 	bl	800b13e <HAL_PCD_DataOutStageCallback>
 80047c2:	e006      	b.n	80047d2 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f003 fa49 	bl	8007c64 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80047d2:	244c      	movs	r4, #76	@ 0x4c
 80047d4:	193b      	adds	r3, r7, r4
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	4013      	ands	r3, r2
 80047dc:	d100      	bne.n	80047e0 <PCD_EP_ISR_Handler+0x578>
 80047de:	e133      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80047e0:	204f      	movs	r0, #79	@ 0x4f
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	0013      	movs	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	3310      	adds	r3, #16
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	001a      	movs	r2, r3
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	18d3      	adds	r3, r2, r3
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29a      	uxth	r2, r3
 8004808:	2542      	movs	r5, #66	@ 0x42
 800480a:	197b      	adds	r3, r7, r5
 800480c:	494f      	ldr	r1, [pc, #316]	@ (800494c <PCD_EP_ISR_Handler+0x6e4>)
 800480e:	400a      	ands	r2, r1
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	001a      	movs	r2, r3
 8004818:	183b      	adds	r3, r7, r0
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	197a      	adds	r2, r7, r5
 8004822:	8812      	ldrh	r2, [r2, #0]
 8004824:	494a      	ldr	r1, [pc, #296]	@ (8004950 <PCD_EP_ISR_Handler+0x6e8>)
 8004826:	430a      	orrs	r2, r1
 8004828:	b292      	uxth	r2, r2
 800482a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800482c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482e:	78db      	ldrb	r3, [r3, #3]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d000      	beq.n	8004836 <PCD_EP_ISR_Handler+0x5ce>
 8004834:	e0af      	b.n	8004996 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800483c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483e:	7b1b      	ldrb	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d100      	bne.n	8004846 <PCD_EP_ISR_Handler+0x5de>
 8004844:	e09f      	b.n	8004986 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004846:	193b      	adds	r3, r7, r4
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	4013      	ands	r3, r2
 800484e:	d046      	beq.n	80048de <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d125      	bne.n	80048a4 <PCD_EP_ISR_Handler+0x63c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2250      	movs	r2, #80	@ 0x50
 8004864:	5a9b      	ldrh	r3, [r3, r2]
 8004866:	b29b      	uxth	r3, r3
 8004868:	001a      	movs	r2, r3
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	189b      	adds	r3, r3, r2
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	00da      	lsls	r2, r3, #3
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	18d3      	adds	r3, r2, r3
 800487a:	4a33      	ldr	r2, [pc, #204]	@ (8004948 <PCD_EP_ISR_Handler+0x6e0>)
 800487c:	4694      	mov	ip, r2
 800487e:	4463      	add	r3, ip
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	0d9b      	lsrs	r3, r3, #22
 800488c:	b29a      	uxth	r2, r3
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	4a2d      	ldr	r2, [pc, #180]	@ (8004950 <PCD_EP_ISR_Handler+0x6e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	b29a      	uxth	r2, r3
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e070      	b.n	8004986 <PCD_EP_ISR_Handler+0x71e>
 80048a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d16c      	bne.n	8004986 <PCD_EP_ISR_Handler+0x71e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2250      	movs	r2, #80	@ 0x50
 80048b8:	5a9b      	ldrh	r3, [r3, r2]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	001a      	movs	r2, r3
 80048be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c0:	189b      	adds	r3, r3, r2
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00da      	lsls	r2, r3, #3
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	18d3      	adds	r3, r2, r3
 80048ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004948 <PCD_EP_ISR_Handler+0x6e0>)
 80048d0:	4694      	mov	ip, r2
 80048d2:	4463      	add	r3, ip
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	2200      	movs	r2, #0
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e053      	b.n	8004986 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d133      	bne.n	8004954 <PCD_EP_ISR_Handler+0x6ec>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2250      	movs	r2, #80	@ 0x50
 80048f8:	5a9b      	ldrh	r3, [r3, r2]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	001a      	movs	r2, r3
 80048fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004900:	189b      	adds	r3, r3, r2
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
 8004904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	00da      	lsls	r2, r3, #3
 800490a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <PCD_EP_ISR_Handler+0x6d4>)
 8004910:	4694      	mov	ip, r2
 8004912:	4463      	add	r3, ip
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	0d9b      	lsrs	r3, r3, #22
 8004920:	b29a      	uxth	r2, r3
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	4a08      	ldr	r2, [pc, #32]	@ (8004950 <PCD_EP_ISR_Handler+0x6e8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	b29a      	uxth	r2, r3
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	e026      	b.n	8004986 <PCD_EP_ISR_Handler+0x71e>
 8004938:	00000f8f 	.word	0x00000f8f
 800493c:	00000406 	.word	0x00000406
 8004940:	ffff8f8f 	.word	0xffff8f8f
 8004944:	ffff80c0 	.word	0xffff80c0
 8004948:	00000402 	.word	0x00000402
 800494c:	ffff8f0f 	.word	0xffff8f0f
 8004950:	ffff8000 	.word	0xffff8000
 8004954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d114      	bne.n	8004986 <PCD_EP_ISR_Handler+0x71e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2250      	movs	r2, #80	@ 0x50
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	b29b      	uxth	r3, r3
 8004966:	001a      	movs	r2, r3
 8004968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496a:	189b      	adds	r3, r3, r2
 800496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	00da      	lsls	r2, r3, #3
 8004974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004976:	18d3      	adds	r3, r2, r3
 8004978:	4a3b      	ldr	r2, [pc, #236]	@ (8004a68 <PCD_EP_ISR_Handler+0x800>)
 800497a:	4694      	mov	ip, r2
 800497c:	4463      	add	r3, ip
 800497e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	2200      	movs	r2, #0
 8004984:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0011      	movs	r1, r2
 800498e:	0018      	movs	r0, r3
 8004990:	f006 fbf6 	bl	800b180 <HAL_PCD_DataInStageCallback>
 8004994:	e058      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004996:	234c      	movs	r3, #76	@ 0x4c
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d149      	bne.n	8004a38 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2250      	movs	r2, #80	@ 0x50
 80049aa:	5a9b      	ldrh	r3, [r3, r2]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	18d2      	adds	r2, r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	18d3      	adds	r3, r2, r3
 80049be:	4a2b      	ldr	r2, [pc, #172]	@ (8004a6c <PCD_EP_ISR_Handler+0x804>)
 80049c0:	4694      	mov	ip, r2
 80049c2:	4463      	add	r3, ip
 80049c4:	881a      	ldrh	r2, [r3, #0]
 80049c6:	2140      	movs	r1, #64	@ 0x40
 80049c8:	187b      	adds	r3, r7, r1
 80049ca:	0592      	lsls	r2, r2, #22
 80049cc:	0d92      	lsrs	r2, r2, #22
 80049ce:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	187b      	adds	r3, r7, r1
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d907      	bls.n	80049ec <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80049dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	187b      	adds	r3, r7, r1
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e8:	619a      	str	r2, [r3, #24]
 80049ea:	e002      	b.n	80049f2 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80049ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ee:	2200      	movs	r2, #0
 80049f0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0011      	movs	r1, r2
 8004a02:	0018      	movs	r0, r3
 8004a04:	f006 fbbc 	bl	800b180 <HAL_PCD_DataInStageCallback>
 8004a08:	e01e      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	2140      	movs	r1, #64	@ 0x40
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	18d2      	adds	r2, r2, r3
 8004a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a18:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	18d2      	adds	r2, r2, r3
 8004a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a26:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f003 f917 	bl	8007c64 <USB_EPStartXfer>
 8004a36:	e007      	b.n	8004a48 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004a38:	234c      	movs	r3, #76	@ 0x4c
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f930 	bl	8004ca8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2244      	movs	r2, #68	@ 0x44
 8004a4e:	5a9b      	ldrh	r3, [r3, r2]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	b21b      	sxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da01      	bge.n	8004a5c <PCD_EP_ISR_Handler+0x7f4>
 8004a58:	f7ff fc0c 	bl	8004274 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b016      	add	sp, #88	@ 0x58
 8004a64:	bdb0      	pop	{r4, r5, r7, pc}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	00000406 	.word	0x00000406
 8004a6c:	00000402 	.word	0x00000402

08004a70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b089      	sub	sp, #36	@ 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	1dbb      	adds	r3, r7, #6
 8004a7c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a7e:	1dbb      	adds	r3, r7, #6
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	4013      	ands	r3, r2
 8004a88:	d100      	bne.n	8004a8c <HAL_PCD_EP_DB_Receive+0x1c>
 8004a8a:	e07d      	b.n	8004b88 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2250      	movs	r2, #80	@ 0x50
 8004a92:	5a9b      	ldrh	r3, [r3, r2]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	001a      	movs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	18d2      	adds	r2, r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	18d3      	adds	r3, r2, r3
 8004aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8004c90 <HAL_PCD_EP_DB_Receive+0x220>)
 8004aa8:	4694      	mov	ip, r2
 8004aaa:	4463      	add	r3, ip
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	211a      	movs	r1, #26
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	0592      	lsls	r2, r2, #22
 8004ab4:	0d92      	lsrs	r2, r2, #22
 8004ab6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d307      	bcc.n	8004ad4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	619a      	str	r2, [r3, #24]
 8004ad2:	e002      	b.n	8004ada <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d121      	bne.n	8004b26 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	2018      	movs	r0, #24
 8004af6:	183b      	adds	r3, r7, r0
 8004af8:	4966      	ldr	r1, [pc, #408]	@ (8004c94 <HAL_PCD_EP_DB_Receive+0x224>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	183a      	adds	r2, r7, r0
 8004b02:	8812      	ldrh	r2, [r2, #0]
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	0189      	lsls	r1, r1, #6
 8004b08:	404a      	eors	r2, r1
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	001a      	movs	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	18d3      	adds	r3, r2, r3
 8004b1a:	183a      	adds	r2, r7, r0
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	495e      	ldr	r1, [pc, #376]	@ (8004c98 <HAL_PCD_EP_DB_Receive+0x228>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	b292      	uxth	r2, r2
 8004b24:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b26:	1dbb      	adds	r3, r7, #6
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	2240      	movs	r2, #64	@ 0x40
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d01a      	beq.n	8004b66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	001a      	movs	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	18d3      	adds	r3, r2, r3
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	2016      	movs	r0, #22
 8004b44:	183b      	adds	r3, r7, r0
 8004b46:	4955      	ldr	r1, [pc, #340]	@ (8004c9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004b48:	400a      	ands	r2, r1
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	001a      	movs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	183a      	adds	r2, r7, r0
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	4950      	ldr	r1, [pc, #320]	@ (8004ca0 <HAL_PCD_EP_DB_Receive+0x230>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	b292      	uxth	r2, r2
 8004b64:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004b66:	241a      	movs	r4, #26
 8004b68:	193b      	adds	r3, r7, r4
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d100      	bne.n	8004b72 <HAL_PCD_EP_DB_Receive+0x102>
 8004b70:	e086      	b.n	8004c80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6959      	ldr	r1, [r3, #20]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	891a      	ldrh	r2, [r3, #8]
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	f004 fb22 	bl	80091ca <USB_ReadPMA>
 8004b86:	e07b      	b.n	8004c80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2250      	movs	r2, #80	@ 0x50
 8004b8e:	5a9b      	ldrh	r3, [r3, r2]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	001a      	movs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	18d2      	adds	r2, r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	4a40      	ldr	r2, [pc, #256]	@ (8004ca4 <HAL_PCD_EP_DB_Receive+0x234>)
 8004ba4:	4694      	mov	ip, r2
 8004ba6:	4463      	add	r3, ip
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	211a      	movs	r1, #26
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	0592      	lsls	r2, r2, #22
 8004bb0:	0d92      	lsrs	r2, r2, #22
 8004bb2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	699a      	ldr	r2, [r3, #24]
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d307      	bcc.n	8004bd0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	619a      	str	r2, [r3, #24]
 8004bce:	e002      	b.n	8004bd6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	001a      	movs	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	201e      	movs	r0, #30
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	4927      	ldr	r1, [pc, #156]	@ (8004c94 <HAL_PCD_EP_DB_Receive+0x224>)
 8004bf6:	400a      	ands	r2, r1
 8004bf8:	801a      	strh	r2, [r3, #0]
 8004bfa:	183b      	adds	r3, r7, r0
 8004bfc:	183a      	adds	r2, r7, r0
 8004bfe:	8812      	ldrh	r2, [r2, #0]
 8004c00:	2180      	movs	r1, #128	@ 0x80
 8004c02:	0189      	lsls	r1, r1, #6
 8004c04:	404a      	eors	r2, r1
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	183a      	adds	r2, r7, r0
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	491f      	ldr	r1, [pc, #124]	@ (8004c98 <HAL_PCD_EP_DB_Receive+0x228>)
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c22:	1dbb      	adds	r3, r7, #6
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	2240      	movs	r2, #64	@ 0x40
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d11a      	bne.n	8004c62 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	001a      	movs	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	18d3      	adds	r3, r2, r3
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	201c      	movs	r0, #28
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	4916      	ldr	r1, [pc, #88]	@ (8004c9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004c44:	400a      	ands	r2, r1
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	18d3      	adds	r3, r2, r3
 8004c56:	183a      	adds	r2, r7, r0
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	4911      	ldr	r1, [pc, #68]	@ (8004ca0 <HAL_PCD_EP_DB_Receive+0x230>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004c62:	241a      	movs	r4, #26
 8004c64:	193b      	adds	r3, r7, r4
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6959      	ldr	r1, [r3, #20]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	895a      	ldrh	r2, [r3, #10]
 8004c78:	193b      	adds	r3, r7, r4
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	f004 faa5 	bl	80091ca <USB_ReadPMA>
    }
  }

  return count;
 8004c80:	231a      	movs	r3, #26
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	881b      	ldrh	r3, [r3, #0]
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b009      	add	sp, #36	@ 0x24
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	00000402 	.word	0x00000402
 8004c94:	ffffbf8f 	.word	0xffffbf8f
 8004c98:	ffff8080 	.word	0xffff8080
 8004c9c:	ffff8f8f 	.word	0xffff8f8f
 8004ca0:	ffff80c0 	.word	0xffff80c0
 8004ca4:	00000406 	.word	0x00000406

08004ca8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b0a4      	sub	sp, #144	@ 0x90
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	1dbb      	adds	r3, r7, #6
 8004cb4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2240      	movs	r2, #64	@ 0x40
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004cc0:	e1e4      	b.n	800508c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2250      	movs	r2, #80	@ 0x50
 8004cc8:	5a9b      	ldrh	r3, [r3, r2]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	001a      	movs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	18d2      	adds	r2, r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	4ad0      	ldr	r2, [pc, #832]	@ (8005020 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004cde:	4694      	mov	ip, r2
 8004ce0:	4463      	add	r3, ip
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	2188      	movs	r1, #136	@ 0x88
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	0592      	lsls	r2, r2, #22
 8004cea:	0d92      	lsrs	r2, r2, #22
 8004cec:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	187b      	adds	r3, r7, r1
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d907      	bls.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	187b      	adds	r3, r7, r1
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	1ad2      	subs	r2, r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	619a      	str	r2, [r3, #24]
 8004d08:	e002      	b.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d000      	beq.n	8004d1a <HAL_PCD_EP_DB_Transmit+0x72>
 8004d18:	e0b5      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d125      	bne.n	8004d6e <HAL_PCD_EP_DB_Transmit+0xc6>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2250      	movs	r2, #80	@ 0x50
 8004d2e:	5a9b      	ldrh	r3, [r3, r2]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	001a      	movs	r2, r3
 8004d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	00da      	lsls	r2, r3, #3
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	18d3      	adds	r3, r2, r3
 8004d44:	4ab6      	ldr	r2, [pc, #728]	@ (8005020 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004d46:	4694      	mov	ip, r2
 8004d48:	4463      	add	r3, ip
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	059b      	lsls	r3, r3, #22
 8004d54:	0d9b      	lsrs	r3, r3, #22
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	4ab0      	ldr	r2, [pc, #704]	@ (8005024 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e01b      	b.n	8004da6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d117      	bne.n	8004da6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2250      	movs	r2, #80	@ 0x50
 8004d82:	5a9b      	ldrh	r3, [r3, r2]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	001a      	movs	r2, r3
 8004d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	00da      	lsls	r2, r3, #3
 8004d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	4aa1      	ldr	r2, [pc, #644]	@ (8005020 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004d9a:	4694      	mov	ip, r2
 8004d9c:	4463      	add	r3, ip
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	2200      	movs	r2, #0
 8004da4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d125      	bne.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x158>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2250      	movs	r2, #80	@ 0x50
 8004dc0:	5a9b      	ldrh	r3, [r3, r2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	00da      	lsls	r2, r3, #3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	4a94      	ldr	r2, [pc, #592]	@ (8005028 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004dd8:	4694      	mov	ip, r2
 8004dda:	4463      	add	r3, ip
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	059b      	lsls	r3, r3, #22
 8004de6:	0d9b      	lsrs	r3, r3, #22
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4a8b      	ldr	r2, [pc, #556]	@ (8005024 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	e018      	b.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d114      	bne.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2250      	movs	r2, #80	@ 0x50
 8004e0e:	5a9b      	ldrh	r3, [r3, r2]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	001a      	movs	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	00da      	lsls	r2, r3, #3
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	4a80      	ldr	r2, [pc, #512]	@ (8005028 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004e26:	4694      	mov	ip, r2
 8004e28:	4463      	add	r3, ip
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0011      	movs	r1, r2
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f006 f9a0 	bl	800b180 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	01db      	lsls	r3, r3, #7
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004e4c:	e308      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	001a      	movs	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	2016      	movs	r0, #22
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	4971      	ldr	r1, [pc, #452]	@ (800502c <HAL_PCD_EP_DB_Transmit+0x384>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	001a      	movs	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	18d3      	adds	r3, r2, r3
 8004e78:	183a      	adds	r2, r7, r0
 8004e7a:	8812      	ldrh	r2, [r2, #0]
 8004e7c:	496c      	ldr	r1, [pc, #432]	@ (8005030 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	b292      	uxth	r2, r2
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e2ec      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e86:	1dbb      	adds	r3, r7, #6
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	01db      	lsls	r3, r3, #7
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d01a      	beq.n	8004ec8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	001a      	movs	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	18d3      	adds	r3, r2, r3
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	208a      	movs	r0, #138	@ 0x8a
 8004ea6:	183b      	adds	r3, r7, r0
 8004ea8:	4960      	ldr	r1, [pc, #384]	@ (800502c <HAL_PCD_EP_DB_Transmit+0x384>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	18d3      	adds	r3, r2, r3
 8004ebc:	183a      	adds	r2, r7, r0
 8004ebe:	8812      	ldrh	r2, [r2, #0]
 8004ec0:	495b      	ldr	r1, [pc, #364]	@ (8005030 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2224      	movs	r2, #36	@ 0x24
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d000      	beq.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004ed2:	e2c5      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	2188      	movs	r1, #136	@ 0x88
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	18d2      	adds	r2, r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	18d2      	adds	r2, r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d30c      	bcc.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	218c      	movs	r1, #140	@ 0x8c
 8004f04:	187a      	adds	r2, r7, r1
 8004f06:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	621a      	str	r2, [r3, #32]
 8004f16:	e01a      	b.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004f20:	2388      	movs	r3, #136	@ 0x88
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	228c      	movs	r2, #140	@ 0x8c
 8004f28:	18ba      	adds	r2, r7, r2
 8004f2a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2224      	movs	r2, #36	@ 0x24
 8004f30:	2100      	movs	r1, #0
 8004f32:	5499      	strb	r1, [r3, r2]
 8004f34:	e00b      	b.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2224      	movs	r2, #36	@ 0x24
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	228c      	movs	r2, #140	@ 0x8c
 8004f44:	18ba      	adds	r2, r7, r2
 8004f46:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d000      	beq.n	8004f58 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8004f56:	e06d      	b.n	8005034 <HAL_PCD_EP_DB_Transmit+0x38c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2250      	movs	r2, #80	@ 0x50
 8004f64:	5a9b      	ldrh	r3, [r3, r2]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	001a      	movs	r2, r3
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00da      	lsls	r2, r3, #3
 8004f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	4a29      	ldr	r2, [pc, #164]	@ (8005020 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004f7c:	4694      	mov	ip, r2
 8004f7e:	4463      	add	r3, ip
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	059b      	lsls	r3, r3, #22
 8004f8a:	0d9b      	lsrs	r3, r3, #22
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	238c      	movs	r3, #140	@ 0x8c
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <HAL_PCD_EP_DB_Transmit+0x306>
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	801a      	strh	r2, [r3, #0]
 8004fac:	e061      	b.n	8005072 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004fae:	228c      	movs	r2, #140	@ 0x8c
 8004fb0:	18bb      	adds	r3, r7, r2
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fb6:	d817      	bhi.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x340>
 8004fb8:	18bb      	adds	r3, r7, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc0:	18bb      	adds	r3, r7, r2
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d002      	beq.n	8004fd0 <HAL_PCD_EP_DB_Transmit+0x328>
 8004fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fcc:	3301      	adds	r3, #1
 8004fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e044      	b.n	8005072 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004fe8:	228c      	movs	r2, #140	@ 0x8c
 8004fea:	18bb      	adds	r3, r7, r2
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff2:	18bb      	adds	r3, r7, r2
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	221f      	movs	r2, #31
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d102      	bne.n	8005002 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffe:	3b01      	subs	r3, #1
 8005000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29a      	uxth	r2, r3
 8005008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29b      	uxth	r3, r3
 8005010:	4313      	orrs	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	4a03      	ldr	r2, [pc, #12]	@ (8005024 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	b29a      	uxth	r2, r3
 800501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e028      	b.n	8005072 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005020:	00000402 	.word	0x00000402
 8005024:	ffff8000 	.word	0xffff8000
 8005028:	00000406 	.word	0x00000406
 800502c:	ffff8f8f 	.word	0xffff8f8f
 8005030:	ffffc080 	.word	0xffffc080
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d11a      	bne.n	8005072 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2250      	movs	r2, #80	@ 0x50
 8005048:	5a9b      	ldrh	r3, [r3, r2]
 800504a:	b29b      	uxth	r3, r3
 800504c:	001a      	movs	r2, r3
 800504e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005050:	189b      	adds	r3, r3, r2
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	00da      	lsls	r2, r3, #3
 800505a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505c:	18d3      	adds	r3, r2, r3
 800505e:	4ad9      	ldr	r2, [pc, #868]	@ (80053c4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005060:	4694      	mov	ip, r2
 8005062:	4463      	add	r3, ip
 8005064:	643b      	str	r3, [r7, #64]	@ 0x40
 8005066:	238c      	movs	r3, #140	@ 0x8c
 8005068:	18fb      	adds	r3, r7, r3
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b29a      	uxth	r2, r3
 800506e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005070:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6959      	ldr	r1, [r3, #20]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	891a      	ldrh	r2, [r3, #8]
 800507e:	238c      	movs	r3, #140	@ 0x8c
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f004 f857 	bl	8009138 <USB_WritePMA>
 800508a:	e1e9      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2250      	movs	r2, #80	@ 0x50
 8005092:	5a9b      	ldrh	r3, [r3, r2]
 8005094:	b29b      	uxth	r3, r3
 8005096:	001a      	movs	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	18d2      	adds	r2, r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	4ac8      	ldr	r2, [pc, #800]	@ (80053c8 <HAL_PCD_EP_DB_Transmit+0x720>)
 80050a8:	4694      	mov	ip, r2
 80050aa:	4463      	add	r3, ip
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	2188      	movs	r1, #136	@ 0x88
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	0592      	lsls	r2, r2, #22
 80050b4:	0d92      	lsrs	r2, r2, #22
 80050b6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	699a      	ldr	r2, [r3, #24]
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d307      	bcc.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	619a      	str	r2, [r3, #24]
 80050d2:	e002      	b.n	80050da <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d000      	beq.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80050e2:	e0bb      	b.n	800525c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d125      	bne.n	8005138 <HAL_PCD_EP_DB_Transmit+0x490>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2250      	movs	r2, #80	@ 0x50
 80050f8:	5a9b      	ldrh	r3, [r3, r2]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	001a      	movs	r2, r3
 80050fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005100:	189b      	adds	r3, r3, r2
 8005102:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00da      	lsls	r2, r3, #3
 800510a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	4aad      	ldr	r2, [pc, #692]	@ (80053c4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005110:	4694      	mov	ip, r2
 8005112:	4463      	add	r3, ip
 8005114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	059b      	lsls	r3, r3, #22
 800511e:	0d9b      	lsrs	r3, r3, #22
 8005120:	b29a      	uxth	r2, r3
 8005122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4aa7      	ldr	r2, [pc, #668]	@ (80053cc <HAL_PCD_EP_DB_Transmit+0x724>)
 800512e:	4313      	orrs	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e01b      	b.n	8005170 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d117      	bne.n	8005170 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	667b      	str	r3, [r7, #100]	@ 0x64
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2250      	movs	r2, #80	@ 0x50
 800514c:	5a9b      	ldrh	r3, [r3, r2]
 800514e:	b29b      	uxth	r3, r3
 8005150:	001a      	movs	r2, r3
 8005152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005154:	189b      	adds	r3, r3, r2
 8005156:	667b      	str	r3, [r7, #100]	@ 0x64
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	00da      	lsls	r2, r3, #3
 800515e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005160:	18d3      	adds	r3, r2, r3
 8005162:	4a98      	ldr	r2, [pc, #608]	@ (80053c4 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005164:	4694      	mov	ip, r2
 8005166:	4463      	add	r3, ip
 8005168:	663b      	str	r3, [r7, #96]	@ 0x60
 800516a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800516c:	2200      	movs	r2, #0
 800516e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	677b      	str	r3, [r7, #116]	@ 0x74
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d12b      	bne.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2250      	movs	r2, #80	@ 0x50
 800518a:	5a9b      	ldrh	r3, [r3, r2]
 800518c:	b29b      	uxth	r3, r3
 800518e:	001a      	movs	r2, r3
 8005190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005192:	189b      	adds	r3, r3, r2
 8005194:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	00da      	lsls	r2, r3, #3
 800519c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800519e:	18d3      	adds	r3, r2, r3
 80051a0:	4a89      	ldr	r2, [pc, #548]	@ (80053c8 <HAL_PCD_EP_DB_Transmit+0x720>)
 80051a2:	4694      	mov	ip, r2
 80051a4:	4463      	add	r3, ip
 80051a6:	2184      	movs	r1, #132	@ 0x84
 80051a8:	187a      	adds	r2, r7, r1
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	0d9b      	lsrs	r3, r3, #22
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4a80      	ldr	r2, [pc, #512]	@ (80053cc <HAL_PCD_EP_DB_Transmit+0x724>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e018      	b.n	8005208 <HAL_PCD_EP_DB_Transmit+0x560>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d114      	bne.n	8005208 <HAL_PCD_EP_DB_Transmit+0x560>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2250      	movs	r2, #80	@ 0x50
 80051e4:	5a9b      	ldrh	r3, [r3, r2]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	001a      	movs	r2, r3
 80051ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	00da      	lsls	r2, r3, #3
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	4a73      	ldr	r2, [pc, #460]	@ (80053c8 <HAL_PCD_EP_DB_Transmit+0x720>)
 80051fc:	4694      	mov	ip, r2
 80051fe:	4463      	add	r3, ip
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70
 8005202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005204:	2200      	movs	r2, #0
 8005206:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	0011      	movs	r1, r2
 8005210:	0018      	movs	r0, r3
 8005212:	f005 ffb5 	bl	800b180 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	2380      	movs	r3, #128	@ 0x80
 800521c:	01db      	lsls	r3, r3, #7
 800521e:	4013      	ands	r3, r2
 8005220:	d000      	beq.n	8005224 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005222:	e11d      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	001a      	movs	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	2082      	movs	r0, #130	@ 0x82
 8005238:	183b      	adds	r3, r7, r0
 800523a:	4965      	ldr	r1, [pc, #404]	@ (80053d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800523c:	400a      	ands	r2, r1
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	001a      	movs	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	183a      	adds	r2, r7, r0
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	4960      	ldr	r1, [pc, #384]	@ (80053d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005254:	430a      	orrs	r2, r1
 8005256:	b292      	uxth	r2, r2
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e101      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800525c:	1dbb      	adds	r3, r7, #6
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	01db      	lsls	r3, r3, #7
 8005264:	4013      	ands	r3, r2
 8005266:	d11a      	bne.n	800529e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	001a      	movs	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29a      	uxth	r2, r3
 800527a:	204e      	movs	r0, #78	@ 0x4e
 800527c:	183b      	adds	r3, r7, r0
 800527e:	4954      	ldr	r1, [pc, #336]	@ (80053d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005280:	400a      	ands	r2, r1
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	001a      	movs	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	183a      	adds	r2, r7, r0
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	494f      	ldr	r1, [pc, #316]	@ (80053d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005298:	430a      	orrs	r2, r1
 800529a:	b292      	uxth	r2, r2
 800529c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2224      	movs	r2, #36	@ 0x24
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d000      	beq.n	80052aa <HAL_PCD_EP_DB_Transmit+0x602>
 80052a8:	e0da      	b.n	8005460 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	2188      	movs	r1, #136	@ 0x88
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	18d2      	adds	r2, r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	18d2      	adds	r2, r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d30c      	bcc.n	80052ee <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	218c      	movs	r1, #140	@ 0x8c
 80052da:	187a      	adds	r2, r7, r1
 80052dc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	621a      	str	r2, [r3, #32]
 80052ec:	e01a      	b.n	8005324 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80052f6:	2388      	movs	r3, #136	@ 0x88
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	228c      	movs	r2, #140	@ 0x8c
 80052fe:	18ba      	adds	r2, r7, r2
 8005300:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2224      	movs	r2, #36	@ 0x24
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]
 800530a:	e00b      	b.n	8005324 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	228c      	movs	r2, #140	@ 0x8c
 8005312:	18ba      	adds	r2, r7, r2
 8005314:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2224      	movs	r2, #36	@ 0x24
 8005320:	2100      	movs	r1, #0
 8005322:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	657b      	str	r3, [r7, #84]	@ 0x54
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d000      	beq.n	8005334 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005332:	e06d      	b.n	8005410 <HAL_PCD_EP_DB_Transmit+0x768>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2250      	movs	r2, #80	@ 0x50
 8005340:	5a9b      	ldrh	r3, [r3, r2]
 8005342:	b29b      	uxth	r3, r3
 8005344:	001a      	movs	r2, r3
 8005346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005348:	189b      	adds	r3, r3, r2
 800534a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	00da      	lsls	r2, r3, #3
 8005352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005354:	18d3      	adds	r3, r2, r3
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005358:	4694      	mov	ip, r2
 800535a:	4463      	add	r3, ip
 800535c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800535e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	059b      	lsls	r3, r3, #22
 8005366:	0d9b      	lsrs	r3, r3, #22
 8005368:	b29a      	uxth	r2, r3
 800536a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	238c      	movs	r3, #140	@ 0x8c
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <HAL_PCD_EP_DB_Transmit+0x724>)
 8005380:	4313      	orrs	r3, r2
 8005382:	b29a      	uxth	r2, r3
 8005384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e05e      	b.n	8005448 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800538a:	228c      	movs	r2, #140	@ 0x8c
 800538c:	18bb      	adds	r3, r7, r2
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b3e      	cmp	r3, #62	@ 0x3e
 8005392:	d821      	bhi.n	80053d8 <HAL_PCD_EP_DB_Transmit+0x730>
 8005394:	18bb      	adds	r3, r7, r2
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800539c:	18bb      	adds	r3, r7, r2
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	d002      	beq.n	80053ac <HAL_PCD_EP_DB_Transmit+0x704>
 80053a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053a8:	3301      	adds	r3, #1
 80053aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e041      	b.n	8005448 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80053c4:	00000402 	.word	0x00000402
 80053c8:	00000406 	.word	0x00000406
 80053cc:	ffff8000 	.word	0xffff8000
 80053d0:	ffff8f8f 	.word	0xffff8f8f
 80053d4:	ffffc080 	.word	0xffffc080
 80053d8:	228c      	movs	r2, #140	@ 0x8c
 80053da:	18bb      	adds	r3, r7, r2
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e2:	18bb      	adds	r3, r7, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	221f      	movs	r2, #31
 80053e8:	4013      	ands	r3, r2
 80053ea:	d102      	bne.n	80053f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 80053ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ee:	3b01      	subs	r3, #1
 80053f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	4a2c      	ldr	r2, [pc, #176]	@ (80054b8 <HAL_PCD_EP_DB_Transmit+0x810>)
 8005406:	4313      	orrs	r3, r2
 8005408:	b29a      	uxth	r2, r3
 800540a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	e01b      	b.n	8005448 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d117      	bne.n	8005448 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2250      	movs	r2, #80	@ 0x50
 800541e:	5a9b      	ldrh	r3, [r3, r2]
 8005420:	b29b      	uxth	r3, r3
 8005422:	001a      	movs	r2, r3
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	189b      	adds	r3, r3, r2
 8005428:	657b      	str	r3, [r7, #84]	@ 0x54
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	00da      	lsls	r2, r3, #3
 8005430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005432:	18d3      	adds	r3, r2, r3
 8005434:	4a21      	ldr	r2, [pc, #132]	@ (80054bc <HAL_PCD_EP_DB_Transmit+0x814>)
 8005436:	4694      	mov	ip, r2
 8005438:	4463      	add	r3, ip
 800543a:	653b      	str	r3, [r7, #80]	@ 0x50
 800543c:	238c      	movs	r3, #140	@ 0x8c
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005446:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6959      	ldr	r1, [r3, #20]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	895a      	ldrh	r2, [r3, #10]
 8005454:	238c      	movs	r3, #140	@ 0x8c
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f003 fe6c 	bl	8009138 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	18d3      	adds	r3, r2, r3
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29a      	uxth	r2, r3
 8005472:	2014      	movs	r0, #20
 8005474:	183b      	adds	r3, r7, r0
 8005476:	4912      	ldr	r1, [pc, #72]	@ (80054c0 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005478:	400a      	ands	r2, r1
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	183b      	adds	r3, r7, r0
 800547e:	183a      	adds	r2, r7, r0
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	2110      	movs	r1, #16
 8005484:	404a      	eors	r2, r1
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	183b      	adds	r3, r7, r0
 800548a:	183a      	adds	r2, r7, r0
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	2120      	movs	r1, #32
 8005490:	404a      	eors	r2, r1
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	001a      	movs	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	183a      	adds	r2, r7, r0
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	4907      	ldr	r1, [pc, #28]	@ (80054c4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	b292      	uxth	r2, r2
 80054ac:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b024      	add	sp, #144	@ 0x90
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	ffff8000 	.word	0xffff8000
 80054bc:	00000406 	.word	0x00000406
 80054c0:	ffff8fbf 	.word	0xffff8fbf
 80054c4:	ffff8080 	.word	0xffff8080

080054c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	0008      	movs	r0, r1
 80054d2:	0011      	movs	r1, r2
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	240a      	movs	r4, #10
 80054d8:	193b      	adds	r3, r7, r4
 80054da:	1c02      	adds	r2, r0, #0
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	2308      	movs	r3, #8
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	1c0a      	adds	r2, r1, #0
 80054e4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054e6:	0021      	movs	r1, r4
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00c      	beq.n	8005510 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	2207      	movs	r2, #7
 80054fc:	401a      	ands	r2, r3
 80054fe:	0013      	movs	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	189b      	adds	r3, r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	3310      	adds	r3, #16
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e00b      	b.n	8005528 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005510:	230a      	movs	r3, #10
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	881a      	ldrh	r2, [r3, #0]
 8005516:	0013      	movs	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	189b      	adds	r3, r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	3351      	adds	r3, #81	@ 0x51
 8005520:	33ff      	adds	r3, #255	@ 0xff
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	18d3      	adds	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005528:	2308      	movs	r3, #8
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	b29a      	uxth	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	80da      	strh	r2, [r3, #6]
 8005540:	e00b      	b.n	800555a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2201      	movs	r2, #1
 8005546:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	b29a      	uxth	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	b29a      	uxth	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b007      	add	sp, #28
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	23b4      	movs	r3, #180	@ 0xb4
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	2101      	movs	r1, #1
 800557a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	23b2      	movs	r3, #178	@ 0xb2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	2100      	movs	r1, #0
 8005584:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2254      	movs	r2, #84	@ 0x54
 800558a:	5a9b      	ldrh	r3, [r3, r2]
 800558c:	b29b      	uxth	r3, r3
 800558e:	2201      	movs	r2, #1
 8005590:	4313      	orrs	r3, r2
 8005592:	b299      	uxth	r1, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2254      	movs	r2, #84	@ 0x54
 8005598:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2254      	movs	r2, #84	@ 0x54
 800559e:	5a9b      	ldrh	r3, [r3, r2]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2202      	movs	r2, #2
 80055a4:	4313      	orrs	r3, r2
 80055a6:	b299      	uxth	r1, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2254      	movs	r2, #84	@ 0x54
 80055ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b004      	add	sp, #16
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	000a      	movs	r2, r1
 80055c2:	1cfb      	adds	r3, r7, #3
 80055c4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b002      	add	sp, #8
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f000 fb76 	bl	8005cd0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	d100      	bne.n	80055f0 <HAL_RCC_OscConfig+0x20>
 80055ee:	e08e      	b.n	800570e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055f0:	4bc5      	ldr	r3, [pc, #788]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	220c      	movs	r2, #12
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d00e      	beq.n	800561a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055fc:	4bc2      	ldr	r3, [pc, #776]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	220c      	movs	r2, #12
 8005602:	4013      	ands	r3, r2
 8005604:	2b08      	cmp	r3, #8
 8005606:	d117      	bne.n	8005638 <HAL_RCC_OscConfig+0x68>
 8005608:	4bbf      	ldr	r3, [pc, #764]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	23c0      	movs	r3, #192	@ 0xc0
 800560e:	025b      	lsls	r3, r3, #9
 8005610:	401a      	ands	r2, r3
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	025b      	lsls	r3, r3, #9
 8005616:	429a      	cmp	r2, r3
 8005618:	d10e      	bne.n	8005638 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561a:	4bbb      	ldr	r3, [pc, #748]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	4013      	ands	r3, r2
 8005624:	d100      	bne.n	8005628 <HAL_RCC_OscConfig+0x58>
 8005626:	e071      	b.n	800570c <HAL_RCC_OscConfig+0x13c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d000      	beq.n	8005632 <HAL_RCC_OscConfig+0x62>
 8005630:	e06c      	b.n	800570c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f000 fb4c 	bl	8005cd0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <HAL_RCC_OscConfig+0x80>
 8005640:	4bb1      	ldr	r3, [pc, #708]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4bb0      	ldr	r3, [pc, #704]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	0249      	lsls	r1, r1, #9
 800564a:	430a      	orrs	r2, r1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e02f      	b.n	80056b0 <HAL_RCC_OscConfig+0xe0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0xa2>
 8005658:	4bab      	ldr	r3, [pc, #684]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4baa      	ldr	r3, [pc, #680]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800565e:	49ab      	ldr	r1, [pc, #684]	@ (800590c <HAL_RCC_OscConfig+0x33c>)
 8005660:	400a      	ands	r2, r1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	4ba8      	ldr	r3, [pc, #672]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4ba7      	ldr	r3, [pc, #668]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800566a:	49a9      	ldr	r1, [pc, #676]	@ (8005910 <HAL_RCC_OscConfig+0x340>)
 800566c:	400a      	ands	r2, r1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e01e      	b.n	80056b0 <HAL_RCC_OscConfig+0xe0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d10e      	bne.n	8005698 <HAL_RCC_OscConfig+0xc8>
 800567a:	4ba3      	ldr	r3, [pc, #652]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4ba2      	ldr	r3, [pc, #648]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005680:	2180      	movs	r1, #128	@ 0x80
 8005682:	02c9      	lsls	r1, r1, #11
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	4b9f      	ldr	r3, [pc, #636]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b9e      	ldr	r3, [pc, #632]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800568e:	2180      	movs	r1, #128	@ 0x80
 8005690:	0249      	lsls	r1, r1, #9
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0xe0>
 8005698:	4b9b      	ldr	r3, [pc, #620]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b9a      	ldr	r3, [pc, #616]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800569e:	499b      	ldr	r1, [pc, #620]	@ (800590c <HAL_RCC_OscConfig+0x33c>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	4b98      	ldr	r3, [pc, #608]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b97      	ldr	r3, [pc, #604]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80056aa:	4999      	ldr	r1, [pc, #612]	@ (8005910 <HAL_RCC_OscConfig+0x340>)
 80056ac:	400a      	ands	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d014      	beq.n	80056e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7fd fbee 	bl	8002e98 <HAL_GetTick>
 80056bc:	0003      	movs	r3, r0
 80056be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c2:	f7fd fbe9 	bl	8002e98 <HAL_GetTick>
 80056c6:	0002      	movs	r2, r0
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b64      	cmp	r3, #100	@ 0x64
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e2fd      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	2380      	movs	r3, #128	@ 0x80
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	4013      	ands	r3, r2
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0xf2>
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e2:	f7fd fbd9 	bl	8002e98 <HAL_GetTick>
 80056e6:	0003      	movs	r3, r0
 80056e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fd fbd4 	bl	8002e98 <HAL_GetTick>
 80056f0:	0002      	movs	r2, r0
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	@ 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e2e8      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fe:	4b82      	ldr	r3, [pc, #520]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	4013      	ands	r3, r2
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x11c>
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2202      	movs	r2, #2
 8005714:	4013      	ands	r3, r2
 8005716:	d100      	bne.n	800571a <HAL_RCC_OscConfig+0x14a>
 8005718:	e06c      	b.n	80057f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800571a:	4b7b      	ldr	r3, [pc, #492]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	220c      	movs	r2, #12
 8005720:	4013      	ands	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005724:	4b78      	ldr	r3, [pc, #480]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	220c      	movs	r2, #12
 800572a:	4013      	ands	r3, r2
 800572c:	2b08      	cmp	r3, #8
 800572e:	d11f      	bne.n	8005770 <HAL_RCC_OscConfig+0x1a0>
 8005730:	4b75      	ldr	r3, [pc, #468]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	23c0      	movs	r3, #192	@ 0xc0
 8005736:	025b      	lsls	r3, r3, #9
 8005738:	401a      	ands	r2, r3
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	429a      	cmp	r2, r3
 8005740:	d116      	bne.n	8005770 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	4b71      	ldr	r3, [pc, #452]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2202      	movs	r2, #2
 8005748:	4013      	ands	r3, r2
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x188>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e2bb      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b6b      	ldr	r3, [pc, #428]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	22f8      	movs	r2, #248	@ 0xf8
 800575e:	4393      	bics	r3, r2
 8005760:	0019      	movs	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00da      	lsls	r2, r3, #3
 8005768:	4b67      	ldr	r3, [pc, #412]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576e:	e041      	b.n	80057f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d024      	beq.n	80057c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005778:	4b63      	ldr	r3, [pc, #396]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b62      	ldr	r3, [pc, #392]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800577e:	2101      	movs	r1, #1
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fd fb88 	bl	8002e98 <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800578e:	f7fd fb83 	bl	8002e98 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e297      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a0:	4b59      	ldr	r3, [pc, #356]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2202      	movs	r2, #2
 80057a6:	4013      	ands	r3, r2
 80057a8:	d0f1      	beq.n	800578e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b57      	ldr	r3, [pc, #348]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	22f8      	movs	r2, #248	@ 0xf8
 80057b0:	4393      	bics	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	00da      	lsls	r2, r3, #3
 80057ba:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e018      	b.n	80057f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c2:	4b51      	ldr	r3, [pc, #324]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b50      	ldr	r3, [pc, #320]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057c8:	2101      	movs	r1, #1
 80057ca:	438a      	bics	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fd fb63 	bl	8002e98 <HAL_GetTick>
 80057d2:	0003      	movs	r3, r0
 80057d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d8:	f7fd fb5e 	bl	8002e98 <HAL_GetTick>
 80057dc:	0002      	movs	r2, r0
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e272      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2202      	movs	r2, #2
 80057f0:	4013      	ands	r3, r2
 80057f2:	d1f1      	bne.n	80057d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	4013      	ands	r3, r2
 80057fc:	d036      	beq.n	800586c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d019      	beq.n	800583a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005806:	4b40      	ldr	r3, [pc, #256]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800580a:	4b3f      	ldr	r3, [pc, #252]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800580c:	2101      	movs	r1, #1
 800580e:	430a      	orrs	r2, r1
 8005810:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fd fb41 	bl	8002e98 <HAL_GetTick>
 8005816:	0003      	movs	r3, r0
 8005818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581c:	f7fd fb3c 	bl	8002e98 <HAL_GetTick>
 8005820:	0002      	movs	r2, r0
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e250      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	4b36      	ldr	r3, [pc, #216]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	2202      	movs	r2, #2
 8005834:	4013      	ands	r3, r2
 8005836:	d0f1      	beq.n	800581c <HAL_RCC_OscConfig+0x24c>
 8005838:	e018      	b.n	800586c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583a:	4b33      	ldr	r3, [pc, #204]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800583c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800583e:	4b32      	ldr	r3, [pc, #200]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005840:	2101      	movs	r1, #1
 8005842:	438a      	bics	r2, r1
 8005844:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fd fb27 	bl	8002e98 <HAL_GetTick>
 800584a:	0003      	movs	r3, r0
 800584c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005850:	f7fd fb22 	bl	8002e98 <HAL_GetTick>
 8005854:	0002      	movs	r2, r0
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e236      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005862:	4b29      	ldr	r3, [pc, #164]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	2202      	movs	r2, #2
 8005868:	4013      	ands	r3, r2
 800586a:	d1f1      	bne.n	8005850 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2204      	movs	r2, #4
 8005872:	4013      	ands	r3, r2
 8005874:	d100      	bne.n	8005878 <HAL_RCC_OscConfig+0x2a8>
 8005876:	e0b5      	b.n	80059e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005878:	201f      	movs	r0, #31
 800587a:	183b      	adds	r3, r7, r0
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005880:	4b21      	ldr	r3, [pc, #132]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	055b      	lsls	r3, r3, #21
 8005888:	4013      	ands	r3, r2
 800588a:	d110      	bne.n	80058ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588c:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 8005892:	2180      	movs	r1, #128	@ 0x80
 8005894:	0549      	lsls	r1, r1, #21
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	055b      	lsls	r3, r3, #21
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058a8:	183b      	adds	r3, r7, r0
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b19      	ldr	r3, [pc, #100]	@ (8005914 <HAL_RCC_OscConfig+0x344>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	2380      	movs	r3, #128	@ 0x80
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4013      	ands	r3, r2
 80058b8:	d11a      	bne.n	80058f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ba:	4b16      	ldr	r3, [pc, #88]	@ (8005914 <HAL_RCC_OscConfig+0x344>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <HAL_RCC_OscConfig+0x344>)
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0049      	lsls	r1, r1, #1
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c8:	f7fd fae6 	bl	8002e98 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fd fae1 	bl	8002e98 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b64      	cmp	r3, #100	@ 0x64
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e1f5      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <HAL_RCC_OscConfig+0x344>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10f      	bne.n	8005918 <HAL_RCC_OscConfig+0x348>
 80058f8:	4b03      	ldr	r3, [pc, #12]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	4b02      	ldr	r3, [pc, #8]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058fe:	2101      	movs	r1, #1
 8005900:	430a      	orrs	r2, r1
 8005902:	621a      	str	r2, [r3, #32]
 8005904:	e036      	b.n	8005974 <HAL_RCC_OscConfig+0x3a4>
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	40021000 	.word	0x40021000
 800590c:	fffeffff 	.word	0xfffeffff
 8005910:	fffbffff 	.word	0xfffbffff
 8005914:	40007000 	.word	0x40007000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <HAL_RCC_OscConfig+0x36a>
 8005920:	4bca      	ldr	r3, [pc, #808]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	4bc9      	ldr	r3, [pc, #804]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005926:	2101      	movs	r1, #1
 8005928:	438a      	bics	r2, r1
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	4bc7      	ldr	r3, [pc, #796]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	4bc6      	ldr	r3, [pc, #792]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005932:	2104      	movs	r1, #4
 8005934:	438a      	bics	r2, r1
 8005936:	621a      	str	r2, [r3, #32]
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x3a4>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x38c>
 8005942:	4bc2      	ldr	r3, [pc, #776]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	4bc1      	ldr	r3, [pc, #772]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005948:	2104      	movs	r1, #4
 800594a:	430a      	orrs	r2, r1
 800594c:	621a      	str	r2, [r3, #32]
 800594e:	4bbf      	ldr	r3, [pc, #764]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	4bbe      	ldr	r3, [pc, #760]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005954:	2101      	movs	r1, #1
 8005956:	430a      	orrs	r2, r1
 8005958:	621a      	str	r2, [r3, #32]
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x3a4>
 800595c:	4bbb      	ldr	r3, [pc, #748]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	4bba      	ldr	r3, [pc, #744]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005962:	2101      	movs	r1, #1
 8005964:	438a      	bics	r2, r1
 8005966:	621a      	str	r2, [r3, #32]
 8005968:	4bb8      	ldr	r3, [pc, #736]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	4bb7      	ldr	r3, [pc, #732]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 800596e:	2104      	movs	r1, #4
 8005970:	438a      	bics	r2, r1
 8005972:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d014      	beq.n	80059a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597c:	f7fd fa8c 	bl	8002e98 <HAL_GetTick>
 8005980:	0003      	movs	r3, r0
 8005982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e009      	b.n	800599a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fd fa87 	bl	8002e98 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	4aaf      	ldr	r2, [pc, #700]	@ (8005c50 <HAL_RCC_OscConfig+0x680>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e19a      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599a:	4bac      	ldr	r3, [pc, #688]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	2202      	movs	r2, #2
 80059a0:	4013      	ands	r3, r2
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x3b6>
 80059a4:	e013      	b.n	80059ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fd fa77 	bl	8002e98 <HAL_GetTick>
 80059aa:	0003      	movs	r3, r0
 80059ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ae:	e009      	b.n	80059c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fd fa72 	bl	8002e98 <HAL_GetTick>
 80059b4:	0002      	movs	r2, r0
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	4aa5      	ldr	r2, [pc, #660]	@ (8005c50 <HAL_RCC_OscConfig+0x680>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e185      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c4:	4ba1      	ldr	r3, [pc, #644]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	2202      	movs	r2, #2
 80059ca:	4013      	ands	r3, r2
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059ce:	231f      	movs	r3, #31
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d8:	4b9c      	ldr	r3, [pc, #624]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	4b9b      	ldr	r3, [pc, #620]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 80059de:	499d      	ldr	r1, [pc, #628]	@ (8005c54 <HAL_RCC_OscConfig+0x684>)
 80059e0:	400a      	ands	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2210      	movs	r2, #16
 80059ea:	4013      	ands	r3, r2
 80059ec:	d063      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d12a      	bne.n	8005a4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80059f6:	4b95      	ldr	r3, [pc, #596]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 80059f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fa:	4b94      	ldr	r3, [pc, #592]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 80059fc:	2104      	movs	r1, #4
 80059fe:	430a      	orrs	r2, r1
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005a02:	4b92      	ldr	r3, [pc, #584]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a06:	4b91      	ldr	r3, [pc, #580]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a08:	2101      	movs	r1, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0e:	f7fd fa43 	bl	8002e98 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a18:	f7fd fa3e 	bl	8002e98 <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e152      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a2a:	4b88      	ldr	r3, [pc, #544]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2e:	2202      	movs	r2, #2
 8005a30:	4013      	ands	r3, r2
 8005a32:	d0f1      	beq.n	8005a18 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a34:	4b85      	ldr	r3, [pc, #532]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a38:	22f8      	movs	r2, #248	@ 0xf8
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	00da      	lsls	r2, r3, #3
 8005a44:	4b81      	ldr	r3, [pc, #516]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a46:	430a      	orrs	r2, r1
 8005a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a4a:	e034      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	3305      	adds	r3, #5
 8005a52:	d111      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005a54:	4b7d      	ldr	r3, [pc, #500]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a58:	4b7c      	ldr	r3, [pc, #496]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	438a      	bics	r2, r1
 8005a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a60:	4b7a      	ldr	r3, [pc, #488]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	22f8      	movs	r2, #248	@ 0xf8
 8005a66:	4393      	bics	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	00da      	lsls	r2, r3, #3
 8005a70:	4b76      	ldr	r3, [pc, #472]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a72:	430a      	orrs	r2, r1
 8005a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a76:	e01e      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a78:	4b74      	ldr	r3, [pc, #464]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a7c:	4b73      	ldr	r3, [pc, #460]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a7e:	2104      	movs	r1, #4
 8005a80:	430a      	orrs	r2, r1
 8005a82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005a84:	4b71      	ldr	r3, [pc, #452]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a88:	4b70      	ldr	r3, [pc, #448]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a90:	f7fd fa02 	bl	8002e98 <HAL_GetTick>
 8005a94:	0003      	movs	r3, r0
 8005a96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a9a:	f7fd f9fd 	bl	8002e98 <HAL_GetTick>
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e111      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005aac:	4b67      	ldr	r3, [pc, #412]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d1f1      	bne.n	8005a9a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	4013      	ands	r3, r2
 8005abe:	d05c      	beq.n	8005b7a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005ac0:	4b62      	ldr	r3, [pc, #392]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	220c      	movs	r2, #12
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d00e      	beq.n	8005aea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005acc:	4b5f      	ldr	r3, [pc, #380]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	220c      	movs	r2, #12
 8005ad2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d114      	bne.n	8005b02 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	23c0      	movs	r3, #192	@ 0xc0
 8005ade:	025b      	lsls	r3, r3, #9
 8005ae0:	401a      	ands	r2, r3
 8005ae2:	23c0      	movs	r3, #192	@ 0xc0
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10b      	bne.n	8005b02 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005aea:	4b58      	ldr	r3, [pc, #352]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	029b      	lsls	r3, r3, #10
 8005af2:	4013      	ands	r3, r2
 8005af4:	d040      	beq.n	8005b78 <HAL_RCC_OscConfig+0x5a8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d03c      	beq.n	8005b78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0e6      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01b      	beq.n	8005b42 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005b0a:	4b50      	ldr	r3, [pc, #320]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b10:	2180      	movs	r1, #128	@ 0x80
 8005b12:	0249      	lsls	r1, r1, #9
 8005b14:	430a      	orrs	r2, r1
 8005b16:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fd f9be 	bl	8002e98 <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b22:	f7fd f9b9 	bl	8002e98 <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e0cd      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005b34:	4b45      	ldr	r3, [pc, #276]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b38:	2380      	movs	r3, #128	@ 0x80
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x552>
 8005b40:	e01b      	b.n	8005b7a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005b42:	4b42      	ldr	r3, [pc, #264]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b46:	4b41      	ldr	r3, [pc, #260]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b48:	4943      	ldr	r1, [pc, #268]	@ (8005c58 <HAL_RCC_OscConfig+0x688>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fd f9a3 	bl	8002e98 <HAL_GetTick>
 8005b52:	0003      	movs	r3, r0
 8005b54:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b58:	f7fd f99e 	bl	8002e98 <HAL_GetTick>
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0b2      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005b6a:	4b38      	ldr	r3, [pc, #224]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	4013      	ands	r3, r2
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x588>
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005b78:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d100      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5b4>
 8005b82:	e0a4      	b.n	8005cce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b84:	4b31      	ldr	r3, [pc, #196]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	220c      	movs	r2, #12
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d100      	bne.n	8005b92 <HAL_RCC_OscConfig+0x5c2>
 8005b90:	e078      	b.n	8005c84 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d14c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005ba0:	492e      	ldr	r1, [pc, #184]	@ (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba6:	f7fd f977 	bl	8002e98 <HAL_GetTick>
 8005baa:	0003      	movs	r3, r0
 8005bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fd f972 	bl	8002e98 <HAL_GetTick>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e086      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc2:	4b22      	ldr	r3, [pc, #136]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	049b      	lsls	r3, r3, #18
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bce:	4b1f      	ldr	r3, [pc, #124]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	220f      	movs	r2, #15
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005bde:	430a      	orrs	r2, r1
 8005be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005be2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <HAL_RCC_OscConfig+0x690>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfc:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b12      	ldr	r3, [pc, #72]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005c02:	2180      	movs	r1, #128	@ 0x80
 8005c04:	0449      	lsls	r1, r1, #17
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0a:	f7fd f945 	bl	8002e98 <HAL_GetTick>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c14:	f7fd f940 	bl	8002e98 <HAL_GetTick>
 8005c18:	0002      	movs	r2, r0
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e054      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c26:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	2380      	movs	r3, #128	@ 0x80
 8005c2c:	049b      	lsls	r3, r3, #18
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x644>
 8005c32:	e04c      	b.n	8005cce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b04      	ldr	r3, [pc, #16]	@ (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005c3a:	4908      	ldr	r1, [pc, #32]	@ (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005c3c:	400a      	ands	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c40:	f7fd f92a 	bl	8002e98 <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c48:	e015      	b.n	8005c76 <HAL_RCC_OscConfig+0x6a6>
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	00001388 	.word	0x00001388
 8005c54:	efffffff 	.word	0xefffffff
 8005c58:	fffeffff 	.word	0xfffeffff
 8005c5c:	feffffff 	.word	0xfeffffff
 8005c60:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c64:	f7fd f918 	bl	8002e98 <HAL_GetTick>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e02c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c76:	4b18      	ldr	r3, [pc, #96]	@ (8005cd8 <HAL_RCC_OscConfig+0x708>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	2380      	movs	r3, #128	@ 0x80
 8005c7c:	049b      	lsls	r3, r3, #18
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x694>
 8005c82:	e024      	b.n	8005cce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e01f      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005c90:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <HAL_RCC_OscConfig+0x708>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005c96:	4b10      	ldr	r3, [pc, #64]	@ (8005cd8 <HAL_RCC_OscConfig+0x708>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	23c0      	movs	r3, #192	@ 0xc0
 8005ca0:	025b      	lsls	r3, r3, #9
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d10e      	bne.n	8005cca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	220f      	movs	r2, #15
 8005cb0:	401a      	ands	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	23f0      	movs	r3, #240	@ 0xf0
 8005cbe:	039b      	lsls	r3, r3, #14
 8005cc0:	401a      	ands	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d001      	beq.n	8005cce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b008      	add	sp, #32
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000

08005cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0bf      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b61      	ldr	r3, [pc, #388]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d911      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	4393      	bics	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	4b5b      	ldr	r3, [pc, #364]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d10:	4b59      	ldr	r3, [pc, #356]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4013      	ands	r3, r2
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0a6      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2202      	movs	r2, #2
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d015      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2204      	movs	r2, #4
 8005d32:	4013      	ands	r3, r2
 8005d34:	d006      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d36:	4b51      	ldr	r3, [pc, #324]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4b50      	ldr	r3, [pc, #320]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d3c:	21e0      	movs	r1, #224	@ 0xe0
 8005d3e:	00c9      	lsls	r1, r1, #3
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d44:	4b4d      	ldr	r3, [pc, #308]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	22f0      	movs	r2, #240	@ 0xf0
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	4b4a      	ldr	r3, [pc, #296]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d04c      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b44      	ldr	r3, [pc, #272]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	2380      	movs	r3, #128	@ 0x80
 8005d70:	029b      	lsls	r3, r3, #10
 8005d72:	4013      	ands	r3, r2
 8005d74:	d120      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e07a      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d82:	4b3e      	ldr	r3, [pc, #248]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	049b      	lsls	r3, r3, #18
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d114      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e06e      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005d9a:	4b38      	ldr	r3, [pc, #224]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	4013      	ands	r3, r2
 8005da4:	d108      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e062      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b34      	ldr	r3, [pc, #208]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2202      	movs	r2, #2
 8005db0:	4013      	ands	r3, r2
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e05b      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005db8:	4b30      	ldr	r3, [pc, #192]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	4393      	bics	r3, r2
 8005dc0:	0019      	movs	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fd f864 	bl	8002e98 <HAL_GetTick>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd4:	e009      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd6:	f7fd f85f 	bl	8002e98 <HAL_GetTick>
 8005dda:	0002      	movs	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	4a27      	ldr	r2, [pc, #156]	@ (8005e80 <HAL_RCC_ClockConfig+0x1a4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e042      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	220c      	movs	r2, #12
 8005df0:	401a      	ands	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1ec      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2201      	movs	r2, #1
 8005e02:	4013      	ands	r3, r2
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d211      	bcs.n	8005e2e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4393      	bics	r3, r2
 8005e12:	0019      	movs	r1, r3
 8005e14:	4b18      	ldr	r3, [pc, #96]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1c:	4b16      	ldr	r3, [pc, #88]	@ (8005e78 <HAL_RCC_ClockConfig+0x19c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	4013      	ands	r3, r2
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d001      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e020      	b.n	8005e70 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2204      	movs	r2, #4
 8005e34:	4013      	ands	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e38:	4b10      	ldr	r3, [pc, #64]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a11      	ldr	r2, [pc, #68]	@ (8005e84 <HAL_RCC_ClockConfig+0x1a8>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e4c:	f000 f820 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8005e50:	0001      	movs	r1, r0
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <HAL_RCC_ClockConfig+0x1a0>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	220f      	movs	r2, #15
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e88 <HAL_RCC_ClockConfig+0x1ac>)
 8005e5e:	5cd3      	ldrb	r3, [r2, r3]
 8005e60:	000a      	movs	r2, r1
 8005e62:	40da      	lsrs	r2, r3
 8005e64:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <HAL_RCC_ClockConfig+0x1b0>)
 8005e66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e68:	2003      	movs	r0, #3
 8005e6a:	f7fc ffcf 	bl	8002e0c <HAL_InitTick>
  
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b004      	add	sp, #16
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40022000 	.word	0x40022000
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	00001388 	.word	0x00001388
 8005e84:	fffff8ff 	.word	0xfffff8ff
 8005e88:	0800cc58 	.word	0x0800cc58
 8005e8c:	20000040 	.word	0x20000040

08005e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	220c      	movs	r2, #12
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d046      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0xb8>
 8005eba:	d848      	bhi.n	8005f4e <HAL_RCC_GetSysClockFreq+0xbe>
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d002      	beq.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x36>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x3c>
 8005ec4:	e043      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ec6:	4b27      	ldr	r3, [pc, #156]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ec8:	613b      	str	r3, [r7, #16]
      break;
 8005eca:	e043      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0c9b      	lsrs	r3, r3, #18
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	4a24      	ldr	r2, [pc, #144]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005eda:	4b21      	ldr	r3, [pc, #132]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	220f      	movs	r2, #15
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0xdc>)
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
 8005ee6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	23c0      	movs	r3, #192	@ 0xc0
 8005eec:	025b      	lsls	r3, r3, #9
 8005eee:	401a      	ands	r2, r3
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	025b      	lsls	r3, r3, #9
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	481a      	ldr	r0, [pc, #104]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005efc:	f7fa f904 	bl	8000108 <__udivsi3>
 8005f00:	0003      	movs	r3, r0
 8005f02:	001a      	movs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4353      	muls	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e01a      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	23c0      	movs	r3, #192	@ 0xc0
 8005f10:	025b      	lsls	r3, r3, #9
 8005f12:	401a      	ands	r2, r3
 8005f14:	23c0      	movs	r3, #192	@ 0xc0
 8005f16:	025b      	lsls	r3, r3, #9
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4814      	ldr	r0, [pc, #80]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005f20:	f7fa f8f2 	bl	8000108 <__udivsi3>
 8005f24:	0003      	movs	r3, r0
 8005f26:	001a      	movs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4353      	muls	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f34:	f7fa f8e8 	bl	8000108 <__udivsi3>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	001a      	movs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4353      	muls	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	613b      	str	r3, [r7, #16]
      break;
 8005f46:	e005      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005f4a:	613b      	str	r3, [r7, #16]
      break;
 8005f4c:	e002      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f4e:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f50:	613b      	str	r3, [r7, #16]
      break;
 8005f52:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f54:	693b      	ldr	r3, [r7, #16]
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b006      	add	sp, #24
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	40021000 	.word	0x40021000
 8005f64:	007a1200 	.word	0x007a1200
 8005f68:	0800cc70 	.word	0x0800cc70
 8005f6c:	0800cc80 	.word	0x0800cc80
 8005f70:	02dc6c00 	.word	0x02dc6c00

08005f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f78:	4b02      	ldr	r3, [pc, #8]	@ (8005f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
}
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	20000040 	.word	0x20000040

08005f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005f8c:	f7ff fff2 	bl	8005f74 <HAL_RCC_GetHCLKFreq>
 8005f90:	0001      	movs	r1, r0
 8005f92:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	2207      	movs	r2, #7
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f9e:	5cd3      	ldrb	r3, [r2, r3]
 8005fa0:	40d9      	lsrs	r1, r3
 8005fa2:	000b      	movs	r3, r1
}    
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	0800cc68 	.word	0x0800cc68

08005fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	025b      	lsls	r3, r3, #9
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d100      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005fd0:	e08e      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2017      	movs	r0, #23
 8005fd4:	183b      	adds	r3, r7, r0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fda:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	2380      	movs	r3, #128	@ 0x80
 8005fe0:	055b      	lsls	r3, r3, #21
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d110      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	4b6a      	ldr	r3, [pc, #424]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fec:	2180      	movs	r1, #128	@ 0x80
 8005fee:	0549      	lsls	r1, r1, #21
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	61da      	str	r2, [r3, #28]
 8005ff4:	4b67      	ldr	r3, [pc, #412]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	055b      	lsls	r3, r3, #21
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006002:	183b      	adds	r3, r7, r0
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	4b63      	ldr	r3, [pc, #396]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4013      	ands	r3, r2
 8006012:	d11a      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006014:	4b60      	ldr	r3, [pc, #384]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b5f      	ldr	r3, [pc, #380]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800601a:	2180      	movs	r1, #128	@ 0x80
 800601c:	0049      	lsls	r1, r1, #1
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006022:	f7fc ff39 	bl	8002e98 <HAL_GetTick>
 8006026:	0003      	movs	r3, r0
 8006028:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	e008      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602c:	f7fc ff34 	bl	8002e98 <HAL_GetTick>
 8006030:	0002      	movs	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	@ 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e0a6      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603e:	4b56      	ldr	r3, [pc, #344]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	2380      	movs	r3, #128	@ 0x80
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4013      	ands	r3, r2
 8006048:	d0f0      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800604a:	4b52      	ldr	r3, [pc, #328]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	23c0      	movs	r3, #192	@ 0xc0
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4013      	ands	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d034      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	23c0      	movs	r3, #192	@ 0xc0
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4013      	ands	r3, r2
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d02c      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606c:	4b49      	ldr	r3, [pc, #292]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	4a4a      	ldr	r2, [pc, #296]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006076:	4b47      	ldr	r3, [pc, #284]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	4b46      	ldr	r3, [pc, #280]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800607c:	2180      	movs	r1, #128	@ 0x80
 800607e:	0249      	lsls	r1, r1, #9
 8006080:	430a      	orrs	r2, r1
 8006082:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006084:	4b43      	ldr	r3, [pc, #268]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	4b42      	ldr	r3, [pc, #264]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800608a:	4945      	ldr	r1, [pc, #276]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800608c:	400a      	ands	r2, r1
 800608e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006090:	4b40      	ldr	r3, [pc, #256]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	4013      	ands	r3, r2
 800609c:	d013      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fc fefb 	bl	8002e98 <HAL_GetTick>
 80060a2:	0003      	movs	r3, r0
 80060a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	e009      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fc fef6 	bl	8002e98 <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a3c      	ldr	r2, [pc, #240]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e067      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060bc:	4b35      	ldr	r3, [pc, #212]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	2202      	movs	r2, #2
 80060c2:	4013      	ands	r3, r2
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060c6:	4b33      	ldr	r3, [pc, #204]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	4a34      	ldr	r2, [pc, #208]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	0019      	movs	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060d6:	430a      	orrs	r2, r1
 80060d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060da:	2317      	movs	r3, #23
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060ea:	492f      	ldr	r1, [pc, #188]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	4013      	ands	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060fa:	4b26      	ldr	r3, [pc, #152]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	2203      	movs	r2, #3
 8006100:	4393      	bics	r3, r2
 8006102:	0019      	movs	r1, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800610a:	430a      	orrs	r2, r1
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2202      	movs	r2, #2
 8006114:	4013      	ands	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006118:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	4a23      	ldr	r2, [pc, #140]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800611e:	4013      	ands	r3, r2
 8006120:	0019      	movs	r1, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	4b1b      	ldr	r3, [pc, #108]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006128:	430a      	orrs	r2, r1
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2220      	movs	r2, #32
 8006132:	4013      	ands	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006136:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613a:	2210      	movs	r2, #16
 800613c:	4393      	bics	r3, r2
 800613e:	0019      	movs	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	4b13      	ldr	r3, [pc, #76]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006146:	430a      	orrs	r2, r1
 8006148:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	2380      	movs	r3, #128	@ 0x80
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	4013      	ands	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006156:	4b0f      	ldr	r3, [pc, #60]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	2280      	movs	r2, #128	@ 0x80
 800615c:	4393      	bics	r3, r2
 800615e:	0019      	movs	r1, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006166:	430a      	orrs	r2, r1
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4013      	ands	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006176:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	2240      	movs	r2, #64	@ 0x40
 800617c:	4393      	bics	r3, r2
 800617e:	0019      	movs	r1, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	4b03      	ldr	r3, [pc, #12]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006186:	430a      	orrs	r2, r1
 8006188:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b006      	add	sp, #24
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40021000 	.word	0x40021000
 8006198:	40007000 	.word	0x40007000
 800619c:	fffffcff 	.word	0xfffffcff
 80061a0:	fffeffff 	.word	0xfffeffff
 80061a4:	00001388 	.word	0x00001388
 80061a8:	efffffff 	.word	0xefffffff
 80061ac:	fffcffff 	.word	0xfffcffff

080061b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0a8      	b.n	8006314 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	2382      	movs	r3, #130	@ 0x82
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d009      	beq.n	80061ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	61da      	str	r2, [r3, #28]
 80061dc:	e005      	b.n	80061ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	225d      	movs	r2, #93	@ 0x5d
 80061f4:	5c9b      	ldrb	r3, [r3, r2]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	225c      	movs	r2, #92	@ 0x5c
 8006200:	2100      	movs	r1, #0
 8006202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0018      	movs	r0, r3
 8006208:	f7fc fc92 	bl	8002b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	225d      	movs	r2, #93	@ 0x5d
 8006210:	2102      	movs	r1, #2
 8006212:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2140      	movs	r1, #64	@ 0x40
 8006220:	438a      	bics	r2, r1
 8006222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	23e0      	movs	r3, #224	@ 0xe0
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e002      	b.n	800623c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006236:	2380      	movs	r3, #128	@ 0x80
 8006238:	015b      	lsls	r3, r3, #5
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	23f0      	movs	r3, #240	@ 0xf0
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	429a      	cmp	r2, r3
 8006246:	d008      	beq.n	800625a <HAL_SPI_Init+0xaa>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	23e0      	movs	r3, #224	@ 0xe0
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	429a      	cmp	r2, r3
 8006252:	d002      	beq.n	800625a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	2382      	movs	r3, #130	@ 0x82
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	401a      	ands	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6899      	ldr	r1, [r3, #8]
 8006268:	2384      	movs	r3, #132	@ 0x84
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	400b      	ands	r3, r1
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2102      	movs	r1, #2
 8006276:	400b      	ands	r3, r1
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2101      	movs	r1, #1
 8006280:	400b      	ands	r3, r1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6999      	ldr	r1, [r3, #24]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	400b      	ands	r3, r1
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2138      	movs	r1, #56	@ 0x38
 8006296:	400b      	ands	r3, r1
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	400b      	ands	r3, r1
 80062a2:	431a      	orrs	r2, r3
 80062a4:	0011      	movs	r1, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062aa:	2380      	movs	r3, #128	@ 0x80
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	401a      	ands	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	2204      	movs	r2, #4
 80062c0:	401a      	ands	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	2110      	movs	r1, #16
 80062c8:	400b      	ands	r3, r1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d0:	2108      	movs	r1, #8
 80062d2:	400b      	ands	r3, r1
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	23f0      	movs	r3, #240	@ 0xf0
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	400b      	ands	r3, r1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	0011      	movs	r1, r2
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	2380      	movs	r3, #128	@ 0x80
 80062e8:	015b      	lsls	r3, r3, #5
 80062ea:	401a      	ands	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4907      	ldr	r1, [pc, #28]	@ (800631c <HAL_SPI_Init+0x16c>)
 8006300:	400a      	ands	r2, r1
 8006302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	225d      	movs	r2, #93	@ 0x5d
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}
 800631c:	fffff7ff 	.word	0xfffff7ff

08006320 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	1dbb      	adds	r3, r7, #6
 800632e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006330:	231f      	movs	r3, #31
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	225c      	movs	r2, #92	@ 0x5c
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_SPI_Transmit+0x26>
 8006342:	2302      	movs	r3, #2
 8006344:	e147      	b.n	80065d6 <HAL_SPI_Transmit+0x2b6>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	225c      	movs	r2, #92	@ 0x5c
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800634e:	f7fc fda3 	bl	8002e98 <HAL_GetTick>
 8006352:	0003      	movs	r3, r0
 8006354:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006356:	2316      	movs	r3, #22
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	1dba      	adds	r2, r7, #6
 800635c:	8812      	ldrh	r2, [r2, #0]
 800635e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	225d      	movs	r2, #93	@ 0x5d
 8006364:	5c9b      	ldrb	r3, [r3, r2]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d004      	beq.n	8006376 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800636c:	231f      	movs	r3, #31
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	2202      	movs	r2, #2
 8006372:	701a      	strb	r2, [r3, #0]
    goto error;
 8006374:	e128      	b.n	80065c8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_SPI_Transmit+0x64>
 800637c:	1dbb      	adds	r3, r7, #6
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006384:	231f      	movs	r3, #31
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
    goto error;
 800638c:	e11c      	b.n	80065c8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	225d      	movs	r2, #93	@ 0x5d
 8006392:	2103      	movs	r1, #3
 8006394:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1dba      	adds	r2, r7, #6
 80063a6:	8812      	ldrh	r2, [r2, #0]
 80063a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1dba      	adds	r2, r7, #6
 80063ae:	8812      	ldrh	r2, [r2, #0]
 80063b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2244      	movs	r2, #68	@ 0x44
 80063bc:	2100      	movs	r1, #0
 80063be:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2246      	movs	r2, #70	@ 0x46
 80063c4:	2100      	movs	r1, #0
 80063c6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	429a      	cmp	r2, r3
 80063de:	d110      	bne.n	8006402 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2140      	movs	r1, #64	@ 0x40
 80063ec:	438a      	bics	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2180      	movs	r1, #128	@ 0x80
 80063fc:	01c9      	lsls	r1, r1, #7
 80063fe:	430a      	orrs	r2, r1
 8006400:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2240      	movs	r2, #64	@ 0x40
 800640a:	4013      	ands	r3, r2
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d007      	beq.n	8006420 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2140      	movs	r1, #64	@ 0x40
 800641c:	430a      	orrs	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	23e0      	movs	r3, #224	@ 0xe0
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	429a      	cmp	r2, r3
 800642a:	d952      	bls.n	80064d2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_SPI_Transmit+0x11e>
 8006434:	2316      	movs	r3, #22
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d143      	bne.n	80064c6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	881a      	ldrh	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	1c9a      	adds	r2, r3, #2
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006462:	e030      	b.n	80064c6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2202      	movs	r2, #2
 800646c:	4013      	ands	r3, r2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d112      	bne.n	8006498 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006496:	e016      	b.n	80064c6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006498:	f7fc fcfe 	bl	8002e98 <HAL_GetTick>
 800649c:	0002      	movs	r2, r0
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d802      	bhi.n	80064ae <HAL_SPI_Transmit+0x18e>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	d102      	bne.n	80064b4 <HAL_SPI_Transmit+0x194>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d108      	bne.n	80064c6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80064b4:	231f      	movs	r3, #31
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	2203      	movs	r2, #3
 80064ba:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	225d      	movs	r2, #93	@ 0x5d
 80064c0:	2101      	movs	r1, #1
 80064c2:	5499      	strb	r1, [r3, r2]
          goto error;
 80064c4:	e080      	b.n	80065c8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1c9      	bne.n	8006464 <HAL_SPI_Transmit+0x144>
 80064d0:	e053      	b.n	800657a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <HAL_SPI_Transmit+0x1c4>
 80064da:	2316      	movs	r3, #22
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d145      	bne.n	8006570 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800650a:	e031      	b.n	8006570 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2202      	movs	r2, #2
 8006514:	4013      	ands	r3, r2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d113      	bne.n	8006542 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006540:	e016      	b.n	8006570 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006542:	f7fc fca9 	bl	8002e98 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d802      	bhi.n	8006558 <HAL_SPI_Transmit+0x238>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x23e>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800655e:	231f      	movs	r3, #31
 8006560:	18fb      	adds	r3, r7, r3
 8006562:	2203      	movs	r2, #3
 8006564:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	225d      	movs	r2, #93	@ 0x5d
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]
          goto error;
 800656e:	e02b      	b.n	80065c8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1c8      	bne.n	800650c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 f969 	bl	8006858 <SPI_EndRxTxTransaction>
 8006586:	1e03      	subs	r3, r0, #0
 8006588:	d002      	beq.n	8006590 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80065b6:	231f      	movs	r3, #31
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e003      	b.n	80065c8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	225d      	movs	r2, #93	@ 0x5d
 80065c4:	2101      	movs	r1, #1
 80065c6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	225c      	movs	r2, #92	@ 0x5c
 80065cc:	2100      	movs	r1, #0
 80065ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065d0:	231f      	movs	r3, #31
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	781b      	ldrb	r3, [r3, #0]
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b008      	add	sp, #32
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	225d      	movs	r2, #93	@ 0x5d
 80065ea:	5c9b      	ldrb	r3, [r3, r2]
 80065ec:	b2db      	uxtb	r3, r3
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006608:	f7fc fc46 	bl	8002e98 <HAL_GetTick>
 800660c:	0002      	movs	r2, r0
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	18d3      	adds	r3, r2, r3
 8006616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006618:	f7fc fc3e 	bl	8002e98 <HAL_GetTick>
 800661c:	0003      	movs	r3, r0
 800661e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006620:	4b3a      	ldr	r3, [pc, #232]	@ (800670c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	015b      	lsls	r3, r3, #5
 8006626:	0d1b      	lsrs	r3, r3, #20
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	4353      	muls	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662e:	e058      	b.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	d055      	beq.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006636:	f7fc fc2f 	bl	8002e98 <HAL_GetTick>
 800663a:	0002      	movs	r2, r0
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	429a      	cmp	r2, r3
 8006644:	d902      	bls.n	800664c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d142      	bne.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	21e0      	movs	r1, #224	@ 0xe0
 8006658:	438a      	bics	r2, r1
 800665a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	2382      	movs	r3, #130	@ 0x82
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	429a      	cmp	r2, r3
 8006666:	d113      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	2380      	movs	r3, #128	@ 0x80
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	429a      	cmp	r2, r3
 8006672:	d005      	beq.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	2380      	movs	r3, #128	@ 0x80
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	429a      	cmp	r2, r3
 800667e:	d107      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2140      	movs	r1, #64	@ 0x40
 800668c:	438a      	bics	r2, r1
 800668e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	019b      	lsls	r3, r3, #6
 8006698:	429a      	cmp	r2, r3
 800669a:	d110      	bne.n	80066be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	491a      	ldr	r1, [pc, #104]	@ (8006710 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80066a8:	400a      	ands	r2, r1
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2180      	movs	r1, #128	@ 0x80
 80066b8:	0189      	lsls	r1, r1, #6
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	225d      	movs	r2, #93	@ 0x5d
 80066c2:	2101      	movs	r1, #1
 80066c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	225c      	movs	r2, #92	@ 0x5c
 80066ca:	2100      	movs	r1, #0
 80066cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e017      	b.n	8006702 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	3b01      	subs	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	425a      	negs	r2, r3
 80066f2:	4153      	adcs	r3, r2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	001a      	movs	r2, r3
 80066f8:	1dfb      	adds	r3, r7, #7
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d197      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b008      	add	sp, #32
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	20000040 	.word	0x20000040
 8006710:	ffffdfff 	.word	0xffffdfff

08006714 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	@ 0x28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006722:	2317      	movs	r3, #23
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800672a:	f7fc fbb5 	bl	8002e98 <HAL_GetTick>
 800672e:	0002      	movs	r2, r0
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	18d3      	adds	r3, r2, r3
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800673a:	f7fc fbad 	bl	8002e98 <HAL_GetTick>
 800673e:	0003      	movs	r3, r0
 8006740:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800674a:	4b41      	ldr	r3, [pc, #260]	@ (8006850 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	0013      	movs	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	189b      	adds	r3, r3, r2
 8006754:	00da      	lsls	r2, r3, #3
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	0d1b      	lsrs	r3, r3, #20
 800675a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675c:	4353      	muls	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006760:	e068      	b.n	8006834 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	23c0      	movs	r3, #192	@ 0xc0
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	429a      	cmp	r2, r3
 800676a:	d10a      	bne.n	8006782 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d107      	bne.n	8006782 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	2117      	movs	r1, #23
 800677a:	187b      	adds	r3, r7, r1
 800677c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800677e:	187b      	adds	r3, r7, r1
 8006780:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	d055      	beq.n	8006834 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006788:	f7fc fb86 	bl	8002e98 <HAL_GetTick>
 800678c:	0002      	movs	r2, r0
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006794:	429a      	cmp	r2, r3
 8006796:	d902      	bls.n	800679e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d142      	bne.n	8006824 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	21e0      	movs	r1, #224	@ 0xe0
 80067aa:	438a      	bics	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	2382      	movs	r3, #130	@ 0x82
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d113      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d005      	beq.n	80067d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d107      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	@ 0x40
 80067de:	438a      	bics	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067e6:	2380      	movs	r3, #128	@ 0x80
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d110      	bne.n	8006810 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4916      	ldr	r1, [pc, #88]	@ (8006854 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067fa:	400a      	ands	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2180      	movs	r1, #128	@ 0x80
 800680a:	0189      	lsls	r1, r1, #6
 800680c:	430a      	orrs	r2, r1
 800680e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	225d      	movs	r2, #93	@ 0x5d
 8006814:	2101      	movs	r1, #1
 8006816:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	225c      	movs	r2, #92	@ 0x5c
 800681c:	2100      	movs	r1, #0
 800681e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e010      	b.n	8006846 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	3b01      	subs	r3, #1
 8006832:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d18e      	bne.n	8006762 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b00a      	add	sp, #40	@ 0x28
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	20000040 	.word	0x20000040
 8006854:	ffffdfff 	.word	0xffffdfff

08006858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	23c0      	movs	r3, #192	@ 0xc0
 8006868:	0159      	lsls	r1, r3, #5
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	0013      	movs	r3, r2
 8006872:	2200      	movs	r2, #0
 8006874:	f7ff ff4e 	bl	8006714 <SPI_WaitFifoStateUntilTimeout>
 8006878:	1e03      	subs	r3, r0, #0
 800687a:	d007      	beq.n	800688c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006880:	2220      	movs	r2, #32
 8006882:	431a      	orrs	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e027      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	0013      	movs	r3, r2
 8006896:	2200      	movs	r2, #0
 8006898:	2180      	movs	r1, #128	@ 0x80
 800689a:	f7ff fead 	bl	80065f8 <SPI_WaitFlagStateUntilTimeout>
 800689e:	1e03      	subs	r3, r0, #0
 80068a0:	d007      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a6:	2220      	movs	r2, #32
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e014      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	23c0      	movs	r3, #192	@ 0xc0
 80068b6:	00d9      	lsls	r1, r3, #3
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	0013      	movs	r3, r2
 80068c0:	2200      	movs	r2, #0
 80068c2:	f7ff ff27 	bl	8006714 <SPI_WaitFifoStateUntilTimeout>
 80068c6:	1e03      	subs	r3, r0, #0
 80068c8:	d007      	beq.n	80068da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	2220      	movs	r2, #32
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e000      	b.n	80068dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	0018      	movs	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	b004      	add	sp, #16
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e044      	b.n	8006980 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2278      	movs	r2, #120	@ 0x78
 8006902:	2100      	movs	r1, #0
 8006904:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0018      	movs	r0, r3
 800690a:	f7fc f9b3 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2224      	movs	r2, #36	@ 0x24
 8006912:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2101      	movs	r1, #1
 8006920:	438a      	bics	r2, r1
 8006922:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f9b4 	bl	8006c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 f828 	bl	800698c <UART_SetConfig>
 800693c:	0003      	movs	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e01c      	b.n	8006980 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	490d      	ldr	r1, [pc, #52]	@ (8006988 <HAL_UART_Init+0xa4>)
 8006952:	400a      	ands	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	212a      	movs	r1, #42	@ 0x2a
 8006962:	438a      	bics	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2101      	movs	r1, #1
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 fa43 	bl	8006e04 <UART_CheckIdleState>
 800697e:	0003      	movs	r3, r0
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	b002      	add	sp, #8
 8006986:	bd80      	pop	{r7, pc}
 8006988:	ffffb7ff 	.word	0xffffb7ff

0800698c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006994:	231e      	movs	r3, #30
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4aaf      	ldr	r2, [pc, #700]	@ (8006c78 <UART_SetConfig+0x2ec>)
 80069bc:	4013      	ands	r3, r2
 80069be:	0019      	movs	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4aaa      	ldr	r2, [pc, #680]	@ (8006c7c <UART_SetConfig+0x2f0>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	0019      	movs	r1, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4aa1      	ldr	r2, [pc, #644]	@ (8006c80 <UART_SetConfig+0x2f4>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a9d      	ldr	r2, [pc, #628]	@ (8006c84 <UART_SetConfig+0x2f8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d127      	bne.n	8006a62 <UART_SetConfig+0xd6>
 8006a12:	4b9d      	ldr	r3, [pc, #628]	@ (8006c88 <UART_SetConfig+0x2fc>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a16:	2203      	movs	r2, #3
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d00d      	beq.n	8006a3a <UART_SetConfig+0xae>
 8006a1e:	d81b      	bhi.n	8006a58 <UART_SetConfig+0xcc>
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d014      	beq.n	8006a4e <UART_SetConfig+0xc2>
 8006a24:	d818      	bhi.n	8006a58 <UART_SetConfig+0xcc>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <UART_SetConfig+0xa4>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d00a      	beq.n	8006a44 <UART_SetConfig+0xb8>
 8006a2e:	e013      	b.n	8006a58 <UART_SetConfig+0xcc>
 8006a30:	231f      	movs	r3, #31
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e065      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006a3a:	231f      	movs	r3, #31
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	2202      	movs	r2, #2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e060      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006a44:	231f      	movs	r3, #31
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	2204      	movs	r2, #4
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e05b      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006a4e:	231f      	movs	r3, #31
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	2208      	movs	r2, #8
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e056      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006a58:	231f      	movs	r3, #31
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e051      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a89      	ldr	r2, [pc, #548]	@ (8006c8c <UART_SetConfig+0x300>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d134      	bne.n	8006ad6 <UART_SetConfig+0x14a>
 8006a6c:	4b86      	ldr	r3, [pc, #536]	@ (8006c88 <UART_SetConfig+0x2fc>)
 8006a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a70:	23c0      	movs	r3, #192	@ 0xc0
 8006a72:	029b      	lsls	r3, r3, #10
 8006a74:	4013      	ands	r3, r2
 8006a76:	22c0      	movs	r2, #192	@ 0xc0
 8006a78:	0292      	lsls	r2, r2, #10
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d017      	beq.n	8006aae <UART_SetConfig+0x122>
 8006a7e:	22c0      	movs	r2, #192	@ 0xc0
 8006a80:	0292      	lsls	r2, r2, #10
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d822      	bhi.n	8006acc <UART_SetConfig+0x140>
 8006a86:	2280      	movs	r2, #128	@ 0x80
 8006a88:	0292      	lsls	r2, r2, #10
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d019      	beq.n	8006ac2 <UART_SetConfig+0x136>
 8006a8e:	2280      	movs	r2, #128	@ 0x80
 8006a90:	0292      	lsls	r2, r2, #10
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d81a      	bhi.n	8006acc <UART_SetConfig+0x140>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <UART_SetConfig+0x118>
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	0252      	lsls	r2, r2, #9
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00a      	beq.n	8006ab8 <UART_SetConfig+0x12c>
 8006aa2:	e013      	b.n	8006acc <UART_SetConfig+0x140>
 8006aa4:	231f      	movs	r3, #31
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e02b      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006aae:	231f      	movs	r3, #31
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e026      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006ab8:	231f      	movs	r3, #31
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2204      	movs	r2, #4
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e021      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006ac2:	231f      	movs	r3, #31
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e01c      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006acc:	231f      	movs	r3, #31
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e017      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6d      	ldr	r2, [pc, #436]	@ (8006c90 <UART_SetConfig+0x304>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d104      	bne.n	8006aea <UART_SetConfig+0x15e>
 8006ae0:	231f      	movs	r3, #31
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e00d      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a69      	ldr	r2, [pc, #420]	@ (8006c94 <UART_SetConfig+0x308>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d104      	bne.n	8006afe <UART_SetConfig+0x172>
 8006af4:	231f      	movs	r3, #31
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e003      	b.n	8006b06 <UART_SetConfig+0x17a>
 8006afe:	231f      	movs	r3, #31
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	2210      	movs	r2, #16
 8006b04:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d15c      	bne.n	8006bcc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8006b12:	231f      	movs	r3, #31
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d015      	beq.n	8006b48 <UART_SetConfig+0x1bc>
 8006b1c:	dc18      	bgt.n	8006b50 <UART_SetConfig+0x1c4>
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d00d      	beq.n	8006b3e <UART_SetConfig+0x1b2>
 8006b22:	dc15      	bgt.n	8006b50 <UART_SetConfig+0x1c4>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <UART_SetConfig+0x1a2>
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d005      	beq.n	8006b38 <UART_SetConfig+0x1ac>
 8006b2c:	e010      	b.n	8006b50 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7ff fa2b 	bl	8005f88 <HAL_RCC_GetPCLK1Freq>
 8006b32:	0003      	movs	r3, r0
 8006b34:	61bb      	str	r3, [r7, #24]
        break;
 8006b36:	e012      	b.n	8006b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b38:	4b57      	ldr	r3, [pc, #348]	@ (8006c98 <UART_SetConfig+0x30c>)
 8006b3a:	61bb      	str	r3, [r7, #24]
        break;
 8006b3c:	e00f      	b.n	8006b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3e:	f7ff f9a7 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8006b42:	0003      	movs	r3, r0
 8006b44:	61bb      	str	r3, [r7, #24]
        break;
 8006b46:	e00a      	b.n	8006b5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b48:	2380      	movs	r3, #128	@ 0x80
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	61bb      	str	r3, [r7, #24]
        break;
 8006b4e:	e006      	b.n	8006b5e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b54:	231e      	movs	r3, #30
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
        break;
 8006b5c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d100      	bne.n	8006b66 <UART_SetConfig+0x1da>
 8006b64:	e07a      	b.n	8006c5c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	005a      	lsls	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	18d2      	adds	r2, r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	0019      	movs	r1, r3
 8006b78:	0010      	movs	r0, r2
 8006b7a:	f7f9 fac5 	bl	8000108 <__udivsi3>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d91c      	bls.n	8006bc2 <UART_SetConfig+0x236>
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	2380      	movs	r3, #128	@ 0x80
 8006b8c:	025b      	lsls	r3, r3, #9
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d217      	bcs.n	8006bc2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	200e      	movs	r0, #14
 8006b98:	183b      	adds	r3, r7, r0
 8006b9a:	210f      	movs	r1, #15
 8006b9c:	438a      	bics	r2, r1
 8006b9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2207      	movs	r2, #7
 8006ba8:	4013      	ands	r3, r2
 8006baa:	b299      	uxth	r1, r3
 8006bac:	183b      	adds	r3, r7, r0
 8006bae:	183a      	adds	r2, r7, r0
 8006bb0:	8812      	ldrh	r2, [r2, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	183a      	adds	r2, r7, r0
 8006bbc:	8812      	ldrh	r2, [r2, #0]
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	e04c      	b.n	8006c5c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc2:	231e      	movs	r3, #30
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e047      	b.n	8006c5c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bcc:	231f      	movs	r3, #31
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d015      	beq.n	8006c02 <UART_SetConfig+0x276>
 8006bd6:	dc18      	bgt.n	8006c0a <UART_SetConfig+0x27e>
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d00d      	beq.n	8006bf8 <UART_SetConfig+0x26c>
 8006bdc:	dc15      	bgt.n	8006c0a <UART_SetConfig+0x27e>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <UART_SetConfig+0x25c>
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d005      	beq.n	8006bf2 <UART_SetConfig+0x266>
 8006be6:	e010      	b.n	8006c0a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be8:	f7ff f9ce 	bl	8005f88 <HAL_RCC_GetPCLK1Freq>
 8006bec:	0003      	movs	r3, r0
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e012      	b.n	8006c18 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf2:	4b29      	ldr	r3, [pc, #164]	@ (8006c98 <UART_SetConfig+0x30c>)
 8006bf4:	61bb      	str	r3, [r7, #24]
        break;
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf8:	f7ff f94a 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8006bfc:	0003      	movs	r3, r0
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e00a      	b.n	8006c18 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c02:	2380      	movs	r3, #128	@ 0x80
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	61bb      	str	r3, [r7, #24]
        break;
 8006c08:	e006      	b.n	8006c18 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c0e:	231e      	movs	r3, #30
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
        break;
 8006c16:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01e      	beq.n	8006c5c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085a      	lsrs	r2, r3, #1
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	18d2      	adds	r2, r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	0019      	movs	r1, r3
 8006c2e:	0010      	movs	r0, r2
 8006c30:	f7f9 fa6a 	bl	8000108 <__udivsi3>
 8006c34:	0003      	movs	r3, r0
 8006c36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d90a      	bls.n	8006c54 <UART_SetConfig+0x2c8>
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	2380      	movs	r3, #128	@ 0x80
 8006c42:	025b      	lsls	r3, r3, #9
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d205      	bcs.n	8006c54 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60da      	str	r2, [r3, #12]
 8006c52:	e003      	b.n	8006c5c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c54:	231e      	movs	r3, #30
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	2201      	movs	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c68:	231e      	movs	r3, #30
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
}
 8006c6e:	0018      	movs	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b008      	add	sp, #32
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			@ (mov r8, r8)
 8006c78:	efff69f3 	.word	0xefff69f3
 8006c7c:	ffffcfff 	.word	0xffffcfff
 8006c80:	fffff4ff 	.word	0xfffff4ff
 8006c84:	40013800 	.word	0x40013800
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40004400 	.word	0x40004400
 8006c90:	40004800 	.word	0x40004800
 8006c94:	40004c00 	.word	0x40004c00
 8006c98:	007a1200 	.word	0x007a1200

08006c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	2208      	movs	r2, #8
 8006caa:	4013      	ands	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8006de0 <UART_AdvFeatureConfig+0x144>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	0019      	movs	r1, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4a43      	ldr	r2, [pc, #268]	@ (8006de4 <UART_AdvFeatureConfig+0x148>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	0019      	movs	r1, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	2202      	movs	r2, #2
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8006de8 <UART_AdvFeatureConfig+0x14c>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	2204      	movs	r2, #4
 8006d10:	4013      	ands	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4a34      	ldr	r2, [pc, #208]	@ (8006dec <UART_AdvFeatureConfig+0x150>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	2210      	movs	r2, #16
 8006d32:	4013      	ands	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8006df0 <UART_AdvFeatureConfig+0x154>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	0019      	movs	r1, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d52:	2220      	movs	r2, #32
 8006d54:	4013      	ands	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4a25      	ldr	r2, [pc, #148]	@ (8006df4 <UART_AdvFeatureConfig+0x158>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	0019      	movs	r1, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	2240      	movs	r2, #64	@ 0x40
 8006d76:	4013      	ands	r3, r2
 8006d78:	d01d      	beq.n	8006db6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a1d      	ldr	r2, [pc, #116]	@ (8006df8 <UART_AdvFeatureConfig+0x15c>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	0019      	movs	r1, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d96:	2380      	movs	r3, #128	@ 0x80
 8006d98:	035b      	lsls	r3, r3, #13
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d10b      	bne.n	8006db6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a15      	ldr	r2, [pc, #84]	@ (8006dfc <UART_AdvFeatureConfig+0x160>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	2280      	movs	r2, #128	@ 0x80
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006e00 <UART_AdvFeatureConfig+0x164>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }
}
 8006dd8:	46c0      	nop			@ (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	ffff7fff 	.word	0xffff7fff
 8006de4:	fffdffff 	.word	0xfffdffff
 8006de8:	fffeffff 	.word	0xfffeffff
 8006dec:	fffbffff 	.word	0xfffbffff
 8006df0:	ffffefff 	.word	0xffffefff
 8006df4:	ffffdfff 	.word	0xffffdfff
 8006df8:	ffefffff 	.word	0xffefffff
 8006dfc:	ff9fffff 	.word	0xff9fffff
 8006e00:	fff7ffff 	.word	0xfff7ffff

08006e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b092      	sub	sp, #72	@ 0x48
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2284      	movs	r2, #132	@ 0x84
 8006e10:	2100      	movs	r1, #0
 8006e12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e14:	f7fc f840 	bl	8002e98 <HAL_GetTick>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2208      	movs	r2, #8
 8006e24:	4013      	ands	r3, r2
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d12c      	bne.n	8006e84 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	2280      	movs	r2, #128	@ 0x80
 8006e2e:	0391      	lsls	r1, r2, #14
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4a46      	ldr	r2, [pc, #280]	@ (8006f4c <UART_CheckIdleState+0x148>)
 8006e34:	9200      	str	r2, [sp, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f000 f88c 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006e3c:	1e03      	subs	r3, r0, #0
 8006e3e:	d021      	beq.n	8006e84 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e40:	f3ef 8310 	mrs	r3, PRIMASK
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	f383 8810 	msr	PRIMASK, r3
}
 8006e54:	46c0      	nop			@ (mov r8, r8)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2180      	movs	r1, #128	@ 0x80
 8006e62:	438a      	bics	r2, r1
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6c:	f383 8810 	msr	PRIMASK, r3
}
 8006e70:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2278      	movs	r2, #120	@ 0x78
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e05f      	b.n	8006f44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d146      	bne.n	8006f20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	2280      	movs	r2, #128	@ 0x80
 8006e96:	03d1      	lsls	r1, r2, #15
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f4c <UART_CheckIdleState+0x148>)
 8006e9c:	9200      	str	r2, [sp, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f000 f858 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006ea4:	1e03      	subs	r3, r0, #0
 8006ea6:	d03b      	beq.n	8006f20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8006eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f383 8810 	msr	PRIMASK, r3
}
 8006ebc:	46c0      	nop			@ (mov r8, r8)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4921      	ldr	r1, [pc, #132]	@ (8006f50 <UART_CheckIdleState+0x14c>)
 8006eca:	400a      	ands	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f383 8810 	msr	PRIMASK, r3
}
 8006ed8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eda:	f3ef 8310 	mrs	r3, PRIMASK
 8006ede:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	46c0      	nop			@ (mov r8, r8)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2101      	movs	r1, #1
 8006efc:	438a      	bics	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2280      	movs	r2, #128	@ 0x80
 8006f10:	2120      	movs	r1, #32
 8006f12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2278      	movs	r2, #120	@ 0x78
 8006f18:	2100      	movs	r1, #0
 8006f1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e011      	b.n	8006f44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2280      	movs	r2, #128	@ 0x80
 8006f2a:	2120      	movs	r1, #32
 8006f2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2278      	movs	r2, #120	@ 0x78
 8006f3e:	2100      	movs	r1, #0
 8006f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b010      	add	sp, #64	@ 0x40
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	01ffffff 	.word	0x01ffffff
 8006f50:	fffffedf 	.word	0xfffffedf

08006f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	1dfb      	adds	r3, r7, #7
 8006f62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f64:	e051      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	d04e      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6c:	f7fb ff94 	bl	8002e98 <HAL_GetTick>
 8006f70:	0002      	movs	r2, r0
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e051      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d03b      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b80      	cmp	r3, #128	@ 0x80
 8006f96:	d038      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b40      	cmp	r3, #64	@ 0x40
 8006f9c:	d035      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d111      	bne.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 f83c 	bl	8007034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2284      	movs	r2, #132	@ 0x84
 8006fc0:	2108      	movs	r1, #8
 8006fc2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2278      	movs	r2, #120	@ 0x78
 8006fc8:	2100      	movs	r1, #0
 8006fca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e02c      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69da      	ldr	r2, [r3, #28]
 8006fd6:	2380      	movs	r3, #128	@ 0x80
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	401a      	ands	r2, r3
 8006fdc:	2380      	movs	r3, #128	@ 0x80
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d112      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2280      	movs	r2, #128	@ 0x80
 8006fea:	0112      	lsls	r2, r2, #4
 8006fec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f000 f81f 	bl	8007034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2284      	movs	r2, #132	@ 0x84
 8006ffa:	2120      	movs	r1, #32
 8006ffc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2278      	movs	r2, #120	@ 0x78
 8007002:	2100      	movs	r1, #0
 8007004:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e00f      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4013      	ands	r3, r2
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	425a      	negs	r2, r3
 800701a:	4153      	adcs	r3, r2
 800701c:	b2db      	uxtb	r3, r3
 800701e:	001a      	movs	r2, r3
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d09e      	beq.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	0018      	movs	r0, r3
 800702c:	46bd      	mov	sp, r7
 800702e:	b004      	add	sp, #16
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08e      	sub	sp, #56	@ 0x38
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703c:	f3ef 8310 	mrs	r3, PRIMASK
 8007040:	617b      	str	r3, [r7, #20]
  return(result);
 8007042:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
 8007046:	2301      	movs	r3, #1
 8007048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f383 8810 	msr	PRIMASK, r3
}
 8007050:	46c0      	nop			@ (mov r8, r8)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4926      	ldr	r1, [pc, #152]	@ (80070f8 <UART_EndRxTransfer+0xc4>)
 800705e:	400a      	ands	r2, r1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f383 8810 	msr	PRIMASK, r3
}
 800706c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	623b      	str	r3, [r7, #32]
  return(result);
 8007074:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30
 8007078:	2301      	movs	r3, #1
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2101      	movs	r1, #1
 8007090:	438a      	bics	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	f383 8810 	msr	PRIMASK, r3
}
 800709e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d118      	bne.n	80070da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2110      	movs	r1, #16
 80070ca:	438a      	bics	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2280      	movs	r2, #128	@ 0x80
 80070de:	2120      	movs	r1, #32
 80070e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b00e      	add	sp, #56	@ 0x38
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			@ (mov r8, r8)
 80070f8:	fffffedf 	.word	0xfffffedf

080070fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2244      	movs	r2, #68	@ 0x44
 8007108:	2100      	movs	r1, #0
 800710a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800710c:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <USB_EnableGlobalInt+0x28>)
 800710e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	b299      	uxth	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2240      	movs	r2, #64	@ 0x40
 8007118:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b004      	add	sp, #16
 8007122:	bd80      	pop	{r7, pc}
 8007124:	0000bf80 	.word	0x0000bf80

08007128 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007130:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <USB_DisableGlobalInt+0x30>)
 8007132:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2240      	movs	r2, #64	@ 0x40
 8007138:	5a9b      	ldrh	r3, [r3, r2]
 800713a:	b29b      	uxth	r3, r3
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	b292      	uxth	r2, r2
 8007140:	43d2      	mvns	r2, r2
 8007142:	b292      	uxth	r2, r2
 8007144:	4013      	ands	r3, r2
 8007146:	b299      	uxth	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2240      	movs	r2, #64	@ 0x40
 800714c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	0018      	movs	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	b004      	add	sp, #16
 8007156:	bd80      	pop	{r7, pc}
 8007158:	0000bf80 	.word	0x0000bf80

0800715c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	6019      	str	r1, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2240      	movs	r2, #64	@ 0x40
 800716e:	2101      	movs	r1, #1
 8007170:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2240      	movs	r2, #64	@ 0x40
 8007176:	2100      	movs	r1, #0
 8007178:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2244      	movs	r2, #68	@ 0x44
 800717e:	2100      	movs	r1, #0
 8007180:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2250      	movs	r2, #80	@ 0x50
 8007186:	2100      	movs	r1, #0
 8007188:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b004      	add	sp, #16
 8007192:	bd80      	pop	{r7, pc}

08007194 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b09c      	sub	sp, #112	@ 0x70
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800719e:	236f      	movs	r3, #111	@ 0x6f
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	236c      	movs	r3, #108	@ 0x6c
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	49a1      	ldr	r1, [pc, #644]	@ (8007440 <USB_ActivateEndpoint+0x2ac>)
 80071ba:	400a      	ands	r2, r1
 80071bc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	78db      	ldrb	r3, [r3, #3]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d017      	beq.n	80071f6 <USB_ActivateEndpoint+0x62>
 80071c6:	dc28      	bgt.n	800721a <USB_ActivateEndpoint+0x86>
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d00e      	beq.n	80071ea <USB_ActivateEndpoint+0x56>
 80071cc:	dc25      	bgt.n	800721a <USB_ActivateEndpoint+0x86>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <USB_ActivateEndpoint+0x44>
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d018      	beq.n	8007208 <USB_ActivateEndpoint+0x74>
 80071d6:	e020      	b.n	800721a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80071d8:	226c      	movs	r2, #108	@ 0x6c
 80071da:	18bb      	adds	r3, r7, r2
 80071dc:	18ba      	adds	r2, r7, r2
 80071de:	8812      	ldrh	r2, [r2, #0]
 80071e0:	2180      	movs	r1, #128	@ 0x80
 80071e2:	0089      	lsls	r1, r1, #2
 80071e4:	430a      	orrs	r2, r1
 80071e6:	801a      	strh	r2, [r3, #0]
      break;
 80071e8:	e01c      	b.n	8007224 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80071ea:	226c      	movs	r2, #108	@ 0x6c
 80071ec:	18bb      	adds	r3, r7, r2
 80071ee:	18ba      	adds	r2, r7, r2
 80071f0:	8812      	ldrh	r2, [r2, #0]
 80071f2:	801a      	strh	r2, [r3, #0]
      break;
 80071f4:	e016      	b.n	8007224 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071f6:	226c      	movs	r2, #108	@ 0x6c
 80071f8:	18bb      	adds	r3, r7, r2
 80071fa:	18ba      	adds	r2, r7, r2
 80071fc:	8812      	ldrh	r2, [r2, #0]
 80071fe:	21c0      	movs	r1, #192	@ 0xc0
 8007200:	00c9      	lsls	r1, r1, #3
 8007202:	430a      	orrs	r2, r1
 8007204:	801a      	strh	r2, [r3, #0]
      break;
 8007206:	e00d      	b.n	8007224 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007208:	226c      	movs	r2, #108	@ 0x6c
 800720a:	18bb      	adds	r3, r7, r2
 800720c:	18ba      	adds	r2, r7, r2
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	2180      	movs	r1, #128	@ 0x80
 8007212:	00c9      	lsls	r1, r1, #3
 8007214:	430a      	orrs	r2, r1
 8007216:	801a      	strh	r2, [r3, #0]
      break;
 8007218:	e004      	b.n	8007224 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800721a:	236f      	movs	r3, #111	@ 0x6f
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
      break;
 8007222:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	18d3      	adds	r3, r2, r3
 800722e:	226c      	movs	r2, #108	@ 0x6c
 8007230:	18ba      	adds	r2, r7, r2
 8007232:	8812      	ldrh	r2, [r2, #0]
 8007234:	4983      	ldr	r1, [pc, #524]	@ (8007444 <USB_ActivateEndpoint+0x2b0>)
 8007236:	430a      	orrs	r2, r1
 8007238:	b292      	uxth	r2, r2
 800723a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	18d3      	adds	r3, r2, r3
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	b21b      	sxth	r3, r3
 800724c:	4a7e      	ldr	r2, [pc, #504]	@ (8007448 <USB_ActivateEndpoint+0x2b4>)
 800724e:	4013      	ands	r3, r2
 8007250:	b21a      	sxth	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b21b      	sxth	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b21a      	sxth	r2, r3
 800725c:	2166      	movs	r1, #102	@ 0x66
 800725e:	187b      	adds	r3, r7, r1
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	18d3      	adds	r3, r2, r3
 800726c:	187a      	adds	r2, r7, r1
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	4974      	ldr	r1, [pc, #464]	@ (8007444 <USB_ActivateEndpoint+0x2b0>)
 8007272:	430a      	orrs	r2, r1
 8007274:	b292      	uxth	r2, r2
 8007276:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	7b1b      	ldrb	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d000      	beq.n	8007282 <USB_ActivateEndpoint+0xee>
 8007280:	e177      	b.n	8007572 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d100      	bne.n	800728c <USB_ActivateEndpoint+0xf8>
 800728a:	e07a      	b.n	8007382 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2250      	movs	r2, #80	@ 0x50
 8007294:	5a9b      	ldrh	r3, [r3, r2]
 8007296:	b29b      	uxth	r3, r3
 8007298:	001a      	movs	r2, r3
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	189b      	adds	r3, r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00da      	lsls	r2, r3, #3
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	18d3      	adds	r3, r2, r3
 80072aa:	2280      	movs	r2, #128	@ 0x80
 80072ac:	00d2      	lsls	r2, r2, #3
 80072ae:	4694      	mov	ip, r2
 80072b0:	4463      	add	r3, ip
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	18db      	adds	r3, r3, r3
 80072be:	b29a      	uxth	r2, r3
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	18d2      	adds	r2, r2, r3
 80072ce:	2112      	movs	r1, #18
 80072d0:	187b      	adds	r3, r7, r1
 80072d2:	8812      	ldrh	r2, [r2, #0]
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	2240      	movs	r2, #64	@ 0x40
 80072dc:	4013      	ands	r3, r2
 80072de:	d016      	beq.n	800730e <USB_ActivateEndpoint+0x17a>
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	18d3      	adds	r3, r2, r3
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	2010      	movs	r0, #16
 80072f0:	183b      	adds	r3, r7, r0
 80072f2:	4955      	ldr	r1, [pc, #340]	@ (8007448 <USB_ActivateEndpoint+0x2b4>)
 80072f4:	400a      	ands	r2, r1
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	18d3      	adds	r3, r2, r3
 8007302:	183a      	adds	r2, r7, r0
 8007304:	8812      	ldrh	r2, [r2, #0]
 8007306:	4951      	ldr	r1, [pc, #324]	@ (800744c <USB_ActivateEndpoint+0x2b8>)
 8007308:	430a      	orrs	r2, r1
 800730a:	b292      	uxth	r2, r2
 800730c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	78db      	ldrb	r3, [r3, #3]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d01d      	beq.n	8007352 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	18d3      	adds	r3, r2, r3
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29a      	uxth	r2, r3
 8007324:	200c      	movs	r0, #12
 8007326:	183b      	adds	r3, r7, r0
 8007328:	4949      	ldr	r1, [pc, #292]	@ (8007450 <USB_ActivateEndpoint+0x2bc>)
 800732a:	400a      	ands	r2, r1
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	183b      	adds	r3, r7, r0
 8007330:	183a      	adds	r2, r7, r0
 8007332:	8812      	ldrh	r2, [r2, #0]
 8007334:	2120      	movs	r1, #32
 8007336:	404a      	eors	r2, r1
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	18d3      	adds	r3, r2, r3
 8007344:	183a      	adds	r2, r7, r0
 8007346:	8812      	ldrh	r2, [r2, #0]
 8007348:	493e      	ldr	r1, [pc, #248]	@ (8007444 <USB_ActivateEndpoint+0x2b0>)
 800734a:	430a      	orrs	r2, r1
 800734c:	b292      	uxth	r2, r2
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e2b5      	b.n	80078be <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	18d3      	adds	r3, r2, r3
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29a      	uxth	r2, r3
 8007360:	200e      	movs	r0, #14
 8007362:	183b      	adds	r3, r7, r0
 8007364:	493a      	ldr	r1, [pc, #232]	@ (8007450 <USB_ActivateEndpoint+0x2bc>)
 8007366:	400a      	ands	r2, r1
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	18d3      	adds	r3, r2, r3
 8007374:	183a      	adds	r2, r7, r0
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	4932      	ldr	r1, [pc, #200]	@ (8007444 <USB_ActivateEndpoint+0x2b0>)
 800737a:	430a      	orrs	r2, r1
 800737c:	b292      	uxth	r2, r2
 800737e:	801a      	strh	r2, [r3, #0]
 8007380:	e29d      	b.n	80078be <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2250      	movs	r2, #80	@ 0x50
 800738a:	5a9b      	ldrh	r3, [r3, r2]
 800738c:	b29b      	uxth	r3, r3
 800738e:	001a      	movs	r2, r3
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	189b      	adds	r3, r3, r2
 8007394:	633b      	str	r3, [r7, #48]	@ 0x30
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007454 <USB_ActivateEndpoint+0x2c0>)
 80073a2:	4694      	mov	ip, r2
 80073a4:	4463      	add	r3, ip
 80073a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	88db      	ldrh	r3, [r3, #6]
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	18db      	adds	r3, r3, r3
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2250      	movs	r2, #80	@ 0x50
 80073c0:	5a9b      	ldrh	r3, [r3, r2]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	001a      	movs	r2, r3
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	00da      	lsls	r2, r3, #3
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	18d3      	adds	r3, r2, r3
 80073d6:	4a20      	ldr	r2, [pc, #128]	@ (8007458 <USB_ActivateEndpoint+0x2c4>)
 80073d8:	4694      	mov	ip, r2
 80073da:	4463      	add	r3, ip
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	059b      	lsls	r3, r3, #22
 80073e6:	0d9b      	lsrs	r3, r3, #22
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <USB_ActivateEndpoint+0x274>
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4a17      	ldr	r2, [pc, #92]	@ (800745c <USB_ActivateEndpoint+0x2c8>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e045      	b.n	8007494 <USB_ActivateEndpoint+0x300>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b3e      	cmp	r3, #62	@ 0x3e
 800740e:	d827      	bhi.n	8007460 <USB_ActivateEndpoint+0x2cc>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2201      	movs	r2, #1
 800741e:	4013      	ands	r3, r2
 8007420:	d002      	beq.n	8007428 <USB_ActivateEndpoint+0x294>
 8007422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007424:	3301      	adds	r3, #1
 8007426:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29a      	uxth	r2, r3
 800742e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007430:	b29b      	uxth	r3, r3
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e029      	b.n	8007494 <USB_ActivateEndpoint+0x300>
 8007440:	ffff898f 	.word	0xffff898f
 8007444:	ffff8080 	.word	0xffff8080
 8007448:	ffff8f8f 	.word	0xffff8f8f
 800744c:	ffff80c0 	.word	0xffff80c0
 8007450:	ffff8fbf 	.word	0xffff8fbf
 8007454:	00000404 	.word	0x00000404
 8007458:	00000406 	.word	0x00000406
 800745c:	ffff8000 	.word	0xffff8000
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	221f      	movs	r2, #31
 800746e:	4013      	ands	r3, r2
 8007470:	d102      	bne.n	8007478 <USB_ActivateEndpoint+0x2e4>
 8007472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007474:	3b01      	subs	r3, #1
 8007476:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29a      	uxth	r2, r3
 800747e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007480:	b29b      	uxth	r3, r3
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	b29b      	uxth	r3, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	4ab5      	ldr	r2, [pc, #724]	@ (8007760 <USB_ActivateEndpoint+0x5cc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	b29a      	uxth	r2, r3
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	18d2      	adds	r2, r2, r3
 800749e:	2122      	movs	r1, #34	@ 0x22
 80074a0:	187b      	adds	r3, r7, r1
 80074a2:	8812      	ldrh	r2, [r2, #0]
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	187b      	adds	r3, r7, r1
 80074a8:	881a      	ldrh	r2, [r3, #0]
 80074aa:	2380      	movs	r3, #128	@ 0x80
 80074ac:	01db      	lsls	r3, r3, #7
 80074ae:	4013      	ands	r3, r2
 80074b0:	d016      	beq.n	80074e0 <USB_ActivateEndpoint+0x34c>
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29a      	uxth	r2, r3
 80074c0:	2020      	movs	r0, #32
 80074c2:	183b      	adds	r3, r7, r0
 80074c4:	49a7      	ldr	r1, [pc, #668]	@ (8007764 <USB_ActivateEndpoint+0x5d0>)
 80074c6:	400a      	ands	r2, r1
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	18d3      	adds	r3, r2, r3
 80074d4:	183a      	adds	r2, r7, r0
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	49a3      	ldr	r1, [pc, #652]	@ (8007768 <USB_ActivateEndpoint+0x5d4>)
 80074da:	430a      	orrs	r2, r1
 80074dc:	b292      	uxth	r2, r2
 80074de:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d125      	bne.n	8007534 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	18d3      	adds	r3, r2, r3
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	201c      	movs	r0, #28
 80074f8:	183b      	adds	r3, r7, r0
 80074fa:	499c      	ldr	r1, [pc, #624]	@ (800776c <USB_ActivateEndpoint+0x5d8>)
 80074fc:	400a      	ands	r2, r1
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	183b      	adds	r3, r7, r0
 8007502:	183a      	adds	r2, r7, r0
 8007504:	8812      	ldrh	r2, [r2, #0]
 8007506:	2180      	movs	r1, #128	@ 0x80
 8007508:	0149      	lsls	r1, r1, #5
 800750a:	404a      	eors	r2, r1
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	183b      	adds	r3, r7, r0
 8007510:	183a      	adds	r2, r7, r0
 8007512:	8812      	ldrh	r2, [r2, #0]
 8007514:	2180      	movs	r1, #128	@ 0x80
 8007516:	0189      	lsls	r1, r1, #6
 8007518:	404a      	eors	r2, r1
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	183a      	adds	r2, r7, r0
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	4991      	ldr	r1, [pc, #580]	@ (8007770 <USB_ActivateEndpoint+0x5dc>)
 800752c:	430a      	orrs	r2, r1
 800752e:	b292      	uxth	r2, r2
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	e1c4      	b.n	80078be <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	18d3      	adds	r3, r2, r3
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29a      	uxth	r2, r3
 8007542:	201e      	movs	r0, #30
 8007544:	183b      	adds	r3, r7, r0
 8007546:	4989      	ldr	r1, [pc, #548]	@ (800776c <USB_ActivateEndpoint+0x5d8>)
 8007548:	400a      	ands	r2, r1
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	183b      	adds	r3, r7, r0
 800754e:	183a      	adds	r2, r7, r0
 8007550:	8812      	ldrh	r2, [r2, #0]
 8007552:	2180      	movs	r1, #128	@ 0x80
 8007554:	0189      	lsls	r1, r1, #6
 8007556:	404a      	eors	r2, r1
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	18d3      	adds	r3, r2, r3
 8007564:	183a      	adds	r2, r7, r0
 8007566:	8812      	ldrh	r2, [r2, #0]
 8007568:	4981      	ldr	r1, [pc, #516]	@ (8007770 <USB_ActivateEndpoint+0x5dc>)
 800756a:	430a      	orrs	r2, r1
 800756c:	b292      	uxth	r2, r2
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	e1a5      	b.n	80078be <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	78db      	ldrb	r3, [r3, #3]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d117      	bne.n	80075aa <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	18d3      	adds	r3, r2, r3
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	2062      	movs	r0, #98	@ 0x62
 800758a:	183b      	adds	r3, r7, r0
 800758c:	4975      	ldr	r1, [pc, #468]	@ (8007764 <USB_ActivateEndpoint+0x5d0>)
 800758e:	400a      	ands	r2, r1
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	183a      	adds	r2, r7, r0
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	4974      	ldr	r1, [pc, #464]	@ (8007774 <USB_ActivateEndpoint+0x5e0>)
 80075a2:	430a      	orrs	r2, r1
 80075a4:	b292      	uxth	r2, r2
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e016      	b.n	80075d8 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	18d3      	adds	r3, r2, r3
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	2064      	movs	r0, #100	@ 0x64
 80075ba:	183b      	adds	r3, r7, r0
 80075bc:	496e      	ldr	r1, [pc, #440]	@ (8007778 <USB_ActivateEndpoint+0x5e4>)
 80075be:	400a      	ands	r2, r1
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	18d3      	adds	r3, r2, r3
 80075cc:	183a      	adds	r2, r7, r0
 80075ce:	8812      	ldrh	r2, [r2, #0]
 80075d0:	4967      	ldr	r1, [pc, #412]	@ (8007770 <USB_ActivateEndpoint+0x5dc>)
 80075d2:	430a      	orrs	r2, r1
 80075d4:	b292      	uxth	r2, r2
 80075d6:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2250      	movs	r2, #80	@ 0x50
 80075e0:	5a9b      	ldrh	r3, [r3, r2]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	001a      	movs	r2, r3
 80075e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	00da      	lsls	r2, r3, #3
 80075f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	2280      	movs	r2, #128	@ 0x80
 80075f8:	00d2      	lsls	r2, r2, #3
 80075fa:	4694      	mov	ip, r2
 80075fc:	4463      	add	r3, ip
 80075fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	891b      	ldrh	r3, [r3, #8]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	b29b      	uxth	r3, r3
 8007608:	18db      	adds	r3, r3, r3
 800760a:	b29a      	uxth	r2, r3
 800760c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	657b      	str	r3, [r7, #84]	@ 0x54
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2250      	movs	r2, #80	@ 0x50
 8007618:	5a9b      	ldrh	r3, [r3, r2]
 800761a:	b29b      	uxth	r3, r3
 800761c:	001a      	movs	r2, r3
 800761e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007620:	189b      	adds	r3, r3, r2
 8007622:	657b      	str	r3, [r7, #84]	@ 0x54
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	00da      	lsls	r2, r3, #3
 800762a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800762c:	18d3      	adds	r3, r2, r3
 800762e:	4a53      	ldr	r2, [pc, #332]	@ (800777c <USB_ActivateEndpoint+0x5e8>)
 8007630:	4694      	mov	ip, r2
 8007632:	4463      	add	r3, ip
 8007634:	653b      	str	r3, [r7, #80]	@ 0x50
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	895b      	ldrh	r3, [r3, #10]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	b29b      	uxth	r3, r3
 800763e:	18db      	adds	r3, r3, r3
 8007640:	b29a      	uxth	r2, r3
 8007642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007644:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d000      	beq.n	8007650 <USB_ActivateEndpoint+0x4bc>
 800764e:	e09b      	b.n	8007788 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	18d2      	adds	r2, r2, r3
 800765a:	2140      	movs	r1, #64	@ 0x40
 800765c:	187b      	adds	r3, r7, r1
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	187b      	adds	r3, r7, r1
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	2380      	movs	r3, #128	@ 0x80
 8007668:	01db      	lsls	r3, r3, #7
 800766a:	4013      	ands	r3, r2
 800766c:	d016      	beq.n	800769c <USB_ActivateEndpoint+0x508>
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29a      	uxth	r2, r3
 800767c:	203e      	movs	r0, #62	@ 0x3e
 800767e:	183b      	adds	r3, r7, r0
 8007680:	4938      	ldr	r1, [pc, #224]	@ (8007764 <USB_ActivateEndpoint+0x5d0>)
 8007682:	400a      	ands	r2, r1
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	18d3      	adds	r3, r2, r3
 8007690:	183a      	adds	r2, r7, r0
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	4934      	ldr	r1, [pc, #208]	@ (8007768 <USB_ActivateEndpoint+0x5d4>)
 8007696:	430a      	orrs	r2, r1
 8007698:	b292      	uxth	r2, r2
 800769a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	18d2      	adds	r2, r2, r3
 80076a6:	213c      	movs	r1, #60	@ 0x3c
 80076a8:	187b      	adds	r3, r7, r1
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	187b      	adds	r3, r7, r1
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	2240      	movs	r2, #64	@ 0x40
 80076b4:	4013      	ands	r3, r2
 80076b6:	d016      	beq.n	80076e6 <USB_ActivateEndpoint+0x552>
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	18d3      	adds	r3, r2, r3
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	203a      	movs	r0, #58	@ 0x3a
 80076c8:	183b      	adds	r3, r7, r0
 80076ca:	4926      	ldr	r1, [pc, #152]	@ (8007764 <USB_ActivateEndpoint+0x5d0>)
 80076cc:	400a      	ands	r2, r1
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	18d3      	adds	r3, r2, r3
 80076da:	183a      	adds	r2, r7, r0
 80076dc:	8812      	ldrh	r2, [r2, #0]
 80076de:	4928      	ldr	r1, [pc, #160]	@ (8007780 <USB_ActivateEndpoint+0x5ec>)
 80076e0:	430a      	orrs	r2, r1
 80076e2:	b292      	uxth	r2, r2
 80076e4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	18d3      	adds	r3, r2, r3
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	2038      	movs	r0, #56	@ 0x38
 80076f6:	183b      	adds	r3, r7, r0
 80076f8:	491c      	ldr	r1, [pc, #112]	@ (800776c <USB_ActivateEndpoint+0x5d8>)
 80076fa:	400a      	ands	r2, r1
 80076fc:	801a      	strh	r2, [r3, #0]
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	183a      	adds	r2, r7, r0
 8007702:	8812      	ldrh	r2, [r2, #0]
 8007704:	2180      	movs	r1, #128	@ 0x80
 8007706:	0149      	lsls	r1, r1, #5
 8007708:	404a      	eors	r2, r1
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	183b      	adds	r3, r7, r0
 800770e:	183a      	adds	r2, r7, r0
 8007710:	8812      	ldrh	r2, [r2, #0]
 8007712:	2180      	movs	r1, #128	@ 0x80
 8007714:	0189      	lsls	r1, r1, #6
 8007716:	404a      	eors	r2, r1
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	183a      	adds	r2, r7, r0
 8007726:	8812      	ldrh	r2, [r2, #0]
 8007728:	4911      	ldr	r1, [pc, #68]	@ (8007770 <USB_ActivateEndpoint+0x5dc>)
 800772a:	430a      	orrs	r2, r1
 800772c:	b292      	uxth	r2, r2
 800772e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	18d3      	adds	r3, r2, r3
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29a      	uxth	r2, r3
 800773e:	2036      	movs	r0, #54	@ 0x36
 8007740:	183b      	adds	r3, r7, r0
 8007742:	4910      	ldr	r1, [pc, #64]	@ (8007784 <USB_ActivateEndpoint+0x5f0>)
 8007744:	400a      	ands	r2, r1
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	183a      	adds	r2, r7, r0
 8007754:	8812      	ldrh	r2, [r2, #0]
 8007756:	4906      	ldr	r1, [pc, #24]	@ (8007770 <USB_ActivateEndpoint+0x5dc>)
 8007758:	430a      	orrs	r2, r1
 800775a:	b292      	uxth	r2, r2
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e0ae      	b.n	80078be <USB_ActivateEndpoint+0x72a>
 8007760:	ffff8000 	.word	0xffff8000
 8007764:	ffff8f8f 	.word	0xffff8f8f
 8007768:	ffffc080 	.word	0xffffc080
 800776c:	ffffbf8f 	.word	0xffffbf8f
 8007770:	ffff8080 	.word	0xffff8080
 8007774:	ffff8180 	.word	0xffff8180
 8007778:	ffff8e8f 	.word	0xffff8e8f
 800777c:	00000404 	.word	0x00000404
 8007780:	ffff80c0 	.word	0xffff80c0
 8007784:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	18d2      	adds	r2, r2, r3
 8007792:	214e      	movs	r1, #78	@ 0x4e
 8007794:	187b      	adds	r3, r7, r1
 8007796:	8812      	ldrh	r2, [r2, #0]
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	187b      	adds	r3, r7, r1
 800779c:	881a      	ldrh	r2, [r3, #0]
 800779e:	2380      	movs	r3, #128	@ 0x80
 80077a0:	01db      	lsls	r3, r3, #7
 80077a2:	4013      	ands	r3, r2
 80077a4:	d016      	beq.n	80077d4 <USB_ActivateEndpoint+0x640>
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	18d3      	adds	r3, r2, r3
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	204c      	movs	r0, #76	@ 0x4c
 80077b6:	183b      	adds	r3, r7, r0
 80077b8:	4944      	ldr	r1, [pc, #272]	@ (80078cc <USB_ActivateEndpoint+0x738>)
 80077ba:	400a      	ands	r2, r1
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	18d3      	adds	r3, r2, r3
 80077c8:	183a      	adds	r2, r7, r0
 80077ca:	8812      	ldrh	r2, [r2, #0]
 80077cc:	4940      	ldr	r1, [pc, #256]	@ (80078d0 <USB_ActivateEndpoint+0x73c>)
 80077ce:	430a      	orrs	r2, r1
 80077d0:	b292      	uxth	r2, r2
 80077d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	18d2      	adds	r2, r2, r3
 80077de:	214a      	movs	r1, #74	@ 0x4a
 80077e0:	187b      	adds	r3, r7, r1
 80077e2:	8812      	ldrh	r2, [r2, #0]
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	187b      	adds	r3, r7, r1
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	2240      	movs	r2, #64	@ 0x40
 80077ec:	4013      	ands	r3, r2
 80077ee:	d016      	beq.n	800781e <USB_ActivateEndpoint+0x68a>
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	18d3      	adds	r3, r2, r3
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	2048      	movs	r0, #72	@ 0x48
 8007800:	183b      	adds	r3, r7, r0
 8007802:	4932      	ldr	r1, [pc, #200]	@ (80078cc <USB_ActivateEndpoint+0x738>)
 8007804:	400a      	ands	r2, r1
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	18d3      	adds	r3, r2, r3
 8007812:	183a      	adds	r2, r7, r0
 8007814:	8812      	ldrh	r2, [r2, #0]
 8007816:	492f      	ldr	r1, [pc, #188]	@ (80078d4 <USB_ActivateEndpoint+0x740>)
 8007818:	430a      	orrs	r2, r1
 800781a:	b292      	uxth	r2, r2
 800781c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	78db      	ldrb	r3, [r3, #3]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d01d      	beq.n	8007862 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	18d3      	adds	r3, r2, r3
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29a      	uxth	r2, r3
 8007834:	2044      	movs	r0, #68	@ 0x44
 8007836:	183b      	adds	r3, r7, r0
 8007838:	4927      	ldr	r1, [pc, #156]	@ (80078d8 <USB_ActivateEndpoint+0x744>)
 800783a:	400a      	ands	r2, r1
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	183b      	adds	r3, r7, r0
 8007840:	183a      	adds	r2, r7, r0
 8007842:	8812      	ldrh	r2, [r2, #0]
 8007844:	2120      	movs	r1, #32
 8007846:	404a      	eors	r2, r1
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	18d3      	adds	r3, r2, r3
 8007854:	183a      	adds	r2, r7, r0
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	4920      	ldr	r1, [pc, #128]	@ (80078dc <USB_ActivateEndpoint+0x748>)
 800785a:	430a      	orrs	r2, r1
 800785c:	b292      	uxth	r2, r2
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	e016      	b.n	8007890 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	18d3      	adds	r3, r2, r3
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29a      	uxth	r2, r3
 8007870:	2046      	movs	r0, #70	@ 0x46
 8007872:	183b      	adds	r3, r7, r0
 8007874:	4918      	ldr	r1, [pc, #96]	@ (80078d8 <USB_ActivateEndpoint+0x744>)
 8007876:	400a      	ands	r2, r1
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	18d3      	adds	r3, r2, r3
 8007884:	183a      	adds	r2, r7, r0
 8007886:	8812      	ldrh	r2, [r2, #0]
 8007888:	4914      	ldr	r1, [pc, #80]	@ (80078dc <USB_ActivateEndpoint+0x748>)
 800788a:	430a      	orrs	r2, r1
 800788c:	b292      	uxth	r2, r2
 800788e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	18d3      	adds	r3, r2, r3
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	2042      	movs	r0, #66	@ 0x42
 80078a0:	183b      	adds	r3, r7, r0
 80078a2:	490f      	ldr	r1, [pc, #60]	@ (80078e0 <USB_ActivateEndpoint+0x74c>)
 80078a4:	400a      	ands	r2, r1
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	18d3      	adds	r3, r2, r3
 80078b2:	183a      	adds	r2, r7, r0
 80078b4:	8812      	ldrh	r2, [r2, #0]
 80078b6:	4909      	ldr	r1, [pc, #36]	@ (80078dc <USB_ActivateEndpoint+0x748>)
 80078b8:	430a      	orrs	r2, r1
 80078ba:	b292      	uxth	r2, r2
 80078bc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80078be:	236f      	movs	r3, #111	@ 0x6f
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	781b      	ldrb	r3, [r3, #0]
}
 80078c4:	0018      	movs	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b01c      	add	sp, #112	@ 0x70
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	ffff8f8f 	.word	0xffff8f8f
 80078d0:	ffffc080 	.word	0xffffc080
 80078d4:	ffff80c0 	.word	0xffff80c0
 80078d8:	ffff8fbf 	.word	0xffff8fbf
 80078dc:	ffff8080 	.word	0xffff8080
 80078e0:	ffffbf8f 	.word	0xffffbf8f

080078e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	@ 0x30
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d000      	beq.n	80078f8 <USB_DeactivateEndpoint+0x14>
 80078f6:	e07e      	b.n	80079f6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d03c      	beq.n	800797a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	18d2      	adds	r2, r2, r3
 800790a:	210c      	movs	r1, #12
 800790c:	187b      	adds	r3, r7, r1
 800790e:	8812      	ldrh	r2, [r2, #0]
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	187b      	adds	r3, r7, r1
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	2240      	movs	r2, #64	@ 0x40
 8007918:	4013      	ands	r3, r2
 800791a:	d016      	beq.n	800794a <USB_DeactivateEndpoint+0x66>
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	18d3      	adds	r3, r2, r3
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29a      	uxth	r2, r3
 800792a:	200a      	movs	r0, #10
 800792c:	183b      	adds	r3, r7, r0
 800792e:	49c7      	ldr	r1, [pc, #796]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007930:	400a      	ands	r2, r1
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	18d3      	adds	r3, r2, r3
 800793e:	183a      	adds	r2, r7, r0
 8007940:	8812      	ldrh	r2, [r2, #0]
 8007942:	49c3      	ldr	r1, [pc, #780]	@ (8007c50 <USB_DeactivateEndpoint+0x36c>)
 8007944:	430a      	orrs	r2, r1
 8007946:	b292      	uxth	r2, r2
 8007948:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	18d3      	adds	r3, r2, r3
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	2008      	movs	r0, #8
 800795a:	183b      	adds	r3, r7, r0
 800795c:	49bd      	ldr	r1, [pc, #756]	@ (8007c54 <USB_DeactivateEndpoint+0x370>)
 800795e:	400a      	ands	r2, r1
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	183a      	adds	r2, r7, r0
 800796e:	8812      	ldrh	r2, [r2, #0]
 8007970:	49b9      	ldr	r1, [pc, #740]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 8007972:	430a      	orrs	r2, r1
 8007974:	b292      	uxth	r2, r2
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	e163      	b.n	8007c42 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	18d2      	adds	r2, r2, r3
 8007984:	2112      	movs	r1, #18
 8007986:	187b      	adds	r3, r7, r1
 8007988:	8812      	ldrh	r2, [r2, #0]
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	187b      	adds	r3, r7, r1
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	2380      	movs	r3, #128	@ 0x80
 8007992:	01db      	lsls	r3, r3, #7
 8007994:	4013      	ands	r3, r2
 8007996:	d016      	beq.n	80079c6 <USB_DeactivateEndpoint+0xe2>
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	18d3      	adds	r3, r2, r3
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	2010      	movs	r0, #16
 80079a8:	183b      	adds	r3, r7, r0
 80079aa:	49a8      	ldr	r1, [pc, #672]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 80079ac:	400a      	ands	r2, r1
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	18d3      	adds	r3, r2, r3
 80079ba:	183a      	adds	r2, r7, r0
 80079bc:	8812      	ldrh	r2, [r2, #0]
 80079be:	49a7      	ldr	r1, [pc, #668]	@ (8007c5c <USB_DeactivateEndpoint+0x378>)
 80079c0:	430a      	orrs	r2, r1
 80079c2:	b292      	uxth	r2, r2
 80079c4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	18d3      	adds	r3, r2, r3
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	200e      	movs	r0, #14
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	49a1      	ldr	r1, [pc, #644]	@ (8007c60 <USB_DeactivateEndpoint+0x37c>)
 80079da:	400a      	ands	r2, r1
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	18d3      	adds	r3, r2, r3
 80079e8:	183a      	adds	r2, r7, r0
 80079ea:	8812      	ldrh	r2, [r2, #0]
 80079ec:	499a      	ldr	r1, [pc, #616]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 80079ee:	430a      	orrs	r2, r1
 80079f0:	b292      	uxth	r2, r2
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	e125      	b.n	8007c42 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d000      	beq.n	8007a00 <USB_DeactivateEndpoint+0x11c>
 80079fe:	e090      	b.n	8007b22 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	18d2      	adds	r2, r2, r3
 8007a0a:	2120      	movs	r1, #32
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	8812      	ldrh	r2, [r2, #0]
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	881a      	ldrh	r2, [r3, #0]
 8007a16:	2380      	movs	r3, #128	@ 0x80
 8007a18:	01db      	lsls	r3, r3, #7
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d016      	beq.n	8007a4c <USB_DeactivateEndpoint+0x168>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	18d3      	adds	r3, r2, r3
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	201e      	movs	r0, #30
 8007a2e:	183b      	adds	r3, r7, r0
 8007a30:	4986      	ldr	r1, [pc, #536]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007a32:	400a      	ands	r2, r1
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	18d3      	adds	r3, r2, r3
 8007a40:	183a      	adds	r2, r7, r0
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	4985      	ldr	r1, [pc, #532]	@ (8007c5c <USB_DeactivateEndpoint+0x378>)
 8007a46:	430a      	orrs	r2, r1
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	18d2      	adds	r2, r2, r3
 8007a56:	211c      	movs	r1, #28
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	8812      	ldrh	r2, [r2, #0]
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	187b      	adds	r3, r7, r1
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	2240      	movs	r2, #64	@ 0x40
 8007a64:	4013      	ands	r3, r2
 8007a66:	d016      	beq.n	8007a96 <USB_DeactivateEndpoint+0x1b2>
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	18d3      	adds	r3, r2, r3
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	201a      	movs	r0, #26
 8007a78:	183b      	adds	r3, r7, r0
 8007a7a:	4974      	ldr	r1, [pc, #464]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	183a      	adds	r2, r7, r0
 8007a8c:	8812      	ldrh	r2, [r2, #0]
 8007a8e:	4970      	ldr	r1, [pc, #448]	@ (8007c50 <USB_DeactivateEndpoint+0x36c>)
 8007a90:	430a      	orrs	r2, r1
 8007a92:	b292      	uxth	r2, r2
 8007a94:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	18d3      	adds	r3, r2, r3
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	2018      	movs	r0, #24
 8007aa6:	183b      	adds	r3, r7, r0
 8007aa8:	4968      	ldr	r1, [pc, #416]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007aaa:	400a      	ands	r2, r1
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	18d3      	adds	r3, r2, r3
 8007ab8:	183a      	adds	r2, r7, r0
 8007aba:	8812      	ldrh	r2, [r2, #0]
 8007abc:	4964      	ldr	r1, [pc, #400]	@ (8007c50 <USB_DeactivateEndpoint+0x36c>)
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	b292      	uxth	r2, r2
 8007ac2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	18d3      	adds	r3, r2, r3
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	2016      	movs	r0, #22
 8007ad4:	183b      	adds	r3, r7, r0
 8007ad6:	4962      	ldr	r1, [pc, #392]	@ (8007c60 <USB_DeactivateEndpoint+0x37c>)
 8007ad8:	400a      	ands	r2, r1
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	183a      	adds	r2, r7, r0
 8007ae8:	8812      	ldrh	r2, [r2, #0]
 8007aea:	495b      	ldr	r1, [pc, #364]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 8007aec:	430a      	orrs	r2, r1
 8007aee:	b292      	uxth	r2, r2
 8007af0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	2014      	movs	r0, #20
 8007b02:	183b      	adds	r3, r7, r0
 8007b04:	4953      	ldr	r1, [pc, #332]	@ (8007c54 <USB_DeactivateEndpoint+0x370>)
 8007b06:	400a      	ands	r2, r1
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	18d3      	adds	r3, r2, r3
 8007b14:	183a      	adds	r2, r7, r0
 8007b16:	8812      	ldrh	r2, [r2, #0]
 8007b18:	494f      	ldr	r1, [pc, #316]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	e08f      	b.n	8007c42 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	18d2      	adds	r2, r2, r3
 8007b2c:	212e      	movs	r1, #46	@ 0x2e
 8007b2e:	187b      	adds	r3, r7, r1
 8007b30:	8812      	ldrh	r2, [r2, #0]
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	187b      	adds	r3, r7, r1
 8007b36:	881a      	ldrh	r2, [r3, #0]
 8007b38:	2380      	movs	r3, #128	@ 0x80
 8007b3a:	01db      	lsls	r3, r3, #7
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d016      	beq.n	8007b6e <USB_DeactivateEndpoint+0x28a>
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	18d3      	adds	r3, r2, r3
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	202c      	movs	r0, #44	@ 0x2c
 8007b50:	183b      	adds	r3, r7, r0
 8007b52:	493e      	ldr	r1, [pc, #248]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007b54:	400a      	ands	r2, r1
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	183a      	adds	r2, r7, r0
 8007b64:	8812      	ldrh	r2, [r2, #0]
 8007b66:	493d      	ldr	r1, [pc, #244]	@ (8007c5c <USB_DeactivateEndpoint+0x378>)
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	b292      	uxth	r2, r2
 8007b6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	18d2      	adds	r2, r2, r3
 8007b78:	212a      	movs	r1, #42	@ 0x2a
 8007b7a:	187b      	adds	r3, r7, r1
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	187b      	adds	r3, r7, r1
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	2240      	movs	r2, #64	@ 0x40
 8007b86:	4013      	ands	r3, r2
 8007b88:	d016      	beq.n	8007bb8 <USB_DeactivateEndpoint+0x2d4>
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	18d3      	adds	r3, r2, r3
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	2028      	movs	r0, #40	@ 0x28
 8007b9a:	183b      	adds	r3, r7, r0
 8007b9c:	492b      	ldr	r1, [pc, #172]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007b9e:	400a      	ands	r2, r1
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	18d3      	adds	r3, r2, r3
 8007bac:	183a      	adds	r2, r7, r0
 8007bae:	8812      	ldrh	r2, [r2, #0]
 8007bb0:	4927      	ldr	r1, [pc, #156]	@ (8007c50 <USB_DeactivateEndpoint+0x36c>)
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	18d3      	adds	r3, r2, r3
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	2026      	movs	r0, #38	@ 0x26
 8007bc8:	183b      	adds	r3, r7, r0
 8007bca:	4920      	ldr	r1, [pc, #128]	@ (8007c4c <USB_DeactivateEndpoint+0x368>)
 8007bcc:	400a      	ands	r2, r1
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	183a      	adds	r2, r7, r0
 8007bdc:	8812      	ldrh	r2, [r2, #0]
 8007bde:	491f      	ldr	r1, [pc, #124]	@ (8007c5c <USB_DeactivateEndpoint+0x378>)
 8007be0:	430a      	orrs	r2, r1
 8007be2:	b292      	uxth	r2, r2
 8007be4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	2024      	movs	r0, #36	@ 0x24
 8007bf6:	183b      	adds	r3, r7, r0
 8007bf8:	4916      	ldr	r1, [pc, #88]	@ (8007c54 <USB_DeactivateEndpoint+0x370>)
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	183a      	adds	r2, r7, r0
 8007c0a:	8812      	ldrh	r2, [r2, #0]
 8007c0c:	4912      	ldr	r1, [pc, #72]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	b292      	uxth	r2, r2
 8007c12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	2022      	movs	r0, #34	@ 0x22
 8007c24:	183b      	adds	r3, r7, r0
 8007c26:	490e      	ldr	r1, [pc, #56]	@ (8007c60 <USB_DeactivateEndpoint+0x37c>)
 8007c28:	400a      	ands	r2, r1
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	18d3      	adds	r3, r2, r3
 8007c36:	183a      	adds	r2, r7, r0
 8007c38:	8812      	ldrh	r2, [r2, #0]
 8007c3a:	4907      	ldr	r1, [pc, #28]	@ (8007c58 <USB_DeactivateEndpoint+0x374>)
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b00c      	add	sp, #48	@ 0x30
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	ffff8f8f 	.word	0xffff8f8f
 8007c50:	ffff80c0 	.word	0xffff80c0
 8007c54:	ffff8fbf 	.word	0xffff8fbf
 8007c58:	ffff8080 	.word	0xffff8080
 8007c5c:	ffffc080 	.word	0xffffc080
 8007c60:	ffffbf8f 	.word	0xffffbf8f

08007c64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b0c3      	sub	sp, #268	@ 0x10c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d001      	beq.n	8007c7a <USB_EPStartXfer+0x16>
 8007c76:	f000 fd2d 	bl	80086d4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d905      	bls.n	8007c92 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	1d7a      	adds	r2, r7, #5
 8007c8c:	32ff      	adds	r2, #255	@ 0xff
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	e004      	b.n	8007c9c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	1d7a      	adds	r2, r7, #5
 8007c98:	32ff      	adds	r2, #255	@ 0xff
 8007c9a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	7b1b      	ldrb	r3, [r3, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d125      	bne.n	8007cf0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	6959      	ldr	r1, [r3, #20]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	88da      	ldrh	r2, [r3, #6]
 8007cac:	1d7b      	adds	r3, r7, #5
 8007cae:	33ff      	adds	r3, #255	@ 0xff
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fa3f 	bl	8009138 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2250      	movs	r2, #80	@ 0x50
 8007cc2:	5a9b      	ldrh	r3, [r3, r2]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	00da      	lsls	r2, r3, #3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	18d3      	adds	r3, r2, r3
 8007cd8:	4ad7      	ldr	r2, [pc, #860]	@ (8008038 <USB_EPStartXfer+0x3d4>)
 8007cda:	4694      	mov	ip, r2
 8007cdc:	4463      	add	r3, ip
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	1d7b      	adds	r3, r7, #5
 8007ce2:	33ff      	adds	r3, #255	@ 0xff
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	f000 fccd 	bl	800868a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	78db      	ldrb	r3, [r3, #3]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d000      	beq.n	8007cfa <USB_EPStartXfer+0x96>
 8007cf8:	e362      	b.n	80083c0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d800      	bhi.n	8007d08 <USB_EPStartXfer+0xa4>
 8007d06:	e309      	b.n	800831c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	18d3      	adds	r3, r2, r3
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	2056      	movs	r0, #86	@ 0x56
 8007d18:	183b      	adds	r3, r7, r0
 8007d1a:	49c8      	ldr	r1, [pc, #800]	@ (800803c <USB_EPStartXfer+0x3d8>)
 8007d1c:	400a      	ands	r2, r1
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	18d3      	adds	r3, r2, r3
 8007d2a:	183a      	adds	r2, r7, r0
 8007d2c:	8812      	ldrh	r2, [r2, #0]
 8007d2e:	49c4      	ldr	r1, [pc, #784]	@ (8008040 <USB_EPStartXfer+0x3dc>)
 8007d30:	430a      	orrs	r2, r1
 8007d32:	b292      	uxth	r2, r2
 8007d34:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	6a1a      	ldr	r2, [r3, #32]
 8007d3a:	1d7b      	adds	r3, r7, #5
 8007d3c:	33ff      	adds	r3, #255	@ 0xff
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	1ad2      	subs	r2, r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	18d3      	adds	r3, r2, r3
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	001a      	movs	r2, r3
 8007d56:	2340      	movs	r3, #64	@ 0x40
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <USB_EPStartXfer+0xfa>
 8007d5c:	e176      	b.n	800804c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d000      	beq.n	8007d6c <USB_EPStartXfer+0x108>
 8007d6a:	e074      	b.n	8007e56 <USB_EPStartXfer+0x1f2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2250      	movs	r2, #80	@ 0x50
 8007d74:	5a9b      	ldrh	r3, [r3, r2]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	001a      	movs	r2, r3
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	189b      	adds	r3, r3, r2
 8007d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	00da      	lsls	r2, r3, #3
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	18d3      	adds	r3, r2, r3
 8007d8a:	4aae      	ldr	r2, [pc, #696]	@ (8008044 <USB_EPStartXfer+0x3e0>)
 8007d8c:	4694      	mov	ip, r2
 8007d8e:	4463      	add	r3, ip
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	059b      	lsls	r3, r3, #22
 8007d9a:	0d9b      	lsrs	r3, r3, #22
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	1d7b      	adds	r3, r7, #5
 8007da4:	33ff      	adds	r3, #255	@ 0xff
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d108      	bne.n	8007dbe <USB_EPStartXfer+0x15a>
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4aa5      	ldr	r2, [pc, #660]	@ (8008048 <USB_EPStartXfer+0x3e4>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	e066      	b.n	8007e8c <USB_EPStartXfer+0x228>
 8007dbe:	1d7b      	adds	r3, r7, #5
 8007dc0:	33ff      	adds	r3, #255	@ 0xff
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dc6:	d821      	bhi.n	8007e0c <USB_EPStartXfer+0x1a8>
 8007dc8:	1d7b      	adds	r3, r7, #5
 8007dca:	33ff      	adds	r3, #255	@ 0xff
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	1c7a      	adds	r2, r7, #1
 8007dd2:	32ff      	adds	r2, #255	@ 0xff
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	1d7b      	adds	r3, r7, #5
 8007dd8:	33ff      	adds	r3, #255	@ 0xff
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	4013      	ands	r3, r2
 8007de0:	d006      	beq.n	8007df0 <USB_EPStartXfer+0x18c>
 8007de2:	1c7b      	adds	r3, r7, #1
 8007de4:	33ff      	adds	r3, #255	@ 0xff
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	1c7a      	adds	r2, r7, #1
 8007dec:	32ff      	adds	r2, #255	@ 0xff
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	1c7b      	adds	r3, r7, #1
 8007df8:	33ff      	adds	r3, #255	@ 0xff
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	029b      	lsls	r3, r3, #10
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	e03f      	b.n	8007e8c <USB_EPStartXfer+0x228>
 8007e0c:	1d7b      	adds	r3, r7, #5
 8007e0e:	33ff      	adds	r3, #255	@ 0xff
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	1c7a      	adds	r2, r7, #1
 8007e16:	32ff      	adds	r2, #255	@ 0xff
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	1d7b      	adds	r3, r7, #5
 8007e1c:	33ff      	adds	r3, #255	@ 0xff
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	221f      	movs	r2, #31
 8007e22:	4013      	ands	r3, r2
 8007e24:	d106      	bne.n	8007e34 <USB_EPStartXfer+0x1d0>
 8007e26:	1c7b      	adds	r3, r7, #1
 8007e28:	33ff      	adds	r3, #255	@ 0xff
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	1c7a      	adds	r2, r7, #1
 8007e30:	32ff      	adds	r2, #255	@ 0xff
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	1c7b      	adds	r3, r7, #1
 8007e3c:	33ff      	adds	r3, #255	@ 0xff
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	029b      	lsls	r3, r3, #10
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4313      	orrs	r3, r2
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8008048 <USB_EPStartXfer+0x3e4>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e01a      	b.n	8007e8c <USB_EPStartXfer+0x228>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d116      	bne.n	8007e8c <USB_EPStartXfer+0x228>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2250      	movs	r2, #80	@ 0x50
 8007e62:	5a9b      	ldrh	r3, [r3, r2]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	001a      	movs	r2, r3
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	00da      	lsls	r2, r3, #3
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	18d3      	adds	r3, r2, r3
 8007e78:	4a72      	ldr	r2, [pc, #456]	@ (8008044 <USB_EPStartXfer+0x3e0>)
 8007e7a:	4694      	mov	ip, r2
 8007e7c:	4463      	add	r3, ip
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e80:	1d7b      	adds	r3, r7, #5
 8007e82:	33ff      	adds	r3, #255	@ 0xff
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e8c:	2076      	movs	r0, #118	@ 0x76
 8007e8e:	183b      	adds	r3, r7, r0
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	8952      	ldrh	r2, [r2, #10]
 8007e94:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6959      	ldr	r1, [r3, #20]
 8007e9a:	1d7b      	adds	r3, r7, #5
 8007e9c:	33ff      	adds	r3, #255	@ 0xff
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	b29c      	uxth	r4, r3
 8007ea2:	183b      	adds	r3, r7, r0
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	0023      	movs	r3, r4
 8007eaa:	f001 f945 	bl	8009138 <USB_WritePMA>
            ep->xfer_buff += len;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	1d7b      	adds	r3, r7, #5
 8007eb4:	33ff      	adds	r3, #255	@ 0xff
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	18d2      	adds	r2, r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d908      	bls.n	8007edc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6a1a      	ldr	r2, [r3, #32]
 8007ece:	1d7b      	adds	r3, r7, #5
 8007ed0:	33ff      	adds	r3, #255	@ 0xff
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1ad2      	subs	r2, r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	621a      	str	r2, [r3, #32]
 8007eda:	e007      	b.n	8007eec <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	1d7a      	adds	r2, r7, #5
 8007ee2:	32ff      	adds	r2, #255	@ 0xff
 8007ee4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d000      	beq.n	8007ef6 <USB_EPStartXfer+0x292>
 8007ef4:	e070      	b.n	8007fd8 <USB_EPStartXfer+0x374>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2250      	movs	r2, #80	@ 0x50
 8007efe:	5a9b      	ldrh	r3, [r3, r2]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	001a      	movs	r2, r3
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	00da      	lsls	r2, r3, #3
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	18d3      	adds	r3, r2, r3
 8007f14:	4a48      	ldr	r2, [pc, #288]	@ (8008038 <USB_EPStartXfer+0x3d4>)
 8007f16:	4694      	mov	ip, r2
 8007f18:	4463      	add	r3, ip
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	059b      	lsls	r3, r3, #22
 8007f24:	0d9b      	lsrs	r3, r3, #22
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	1d7b      	adds	r3, r7, #5
 8007f2e:	33ff      	adds	r3, #255	@ 0xff
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d108      	bne.n	8007f48 <USB_EPStartXfer+0x2e4>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4a42      	ldr	r2, [pc, #264]	@ (8008048 <USB_EPStartXfer+0x3e4>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e064      	b.n	8008012 <USB_EPStartXfer+0x3ae>
 8007f48:	1d7b      	adds	r3, r7, #5
 8007f4a:	33ff      	adds	r3, #255	@ 0xff
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f50:	d81f      	bhi.n	8007f92 <USB_EPStartXfer+0x32e>
 8007f52:	1d7b      	adds	r3, r7, #5
 8007f54:	33ff      	adds	r3, #255	@ 0xff
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	21fc      	movs	r1, #252	@ 0xfc
 8007f5c:	187a      	adds	r2, r7, r1
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	1d7b      	adds	r3, r7, #5
 8007f62:	33ff      	adds	r3, #255	@ 0xff
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d004      	beq.n	8007f76 <USB_EPStartXfer+0x312>
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	187a      	adds	r2, r7, r1
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	23fc      	movs	r3, #252	@ 0xfc
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	029b      	lsls	r3, r3, #10
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e03f      	b.n	8008012 <USB_EPStartXfer+0x3ae>
 8007f92:	1d7b      	adds	r3, r7, #5
 8007f94:	33ff      	adds	r3, #255	@ 0xff
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	21fc      	movs	r1, #252	@ 0xfc
 8007f9c:	187a      	adds	r2, r7, r1
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	1d7b      	adds	r3, r7, #5
 8007fa2:	33ff      	adds	r3, #255	@ 0xff
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	221f      	movs	r2, #31
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d104      	bne.n	8007fb6 <USB_EPStartXfer+0x352>
 8007fac:	187b      	adds	r3, r7, r1
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	187a      	adds	r2, r7, r1
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	23fc      	movs	r3, #252	@ 0xfc
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	029b      	lsls	r3, r3, #10
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8008048 <USB_EPStartXfer+0x3e4>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	e01c      	b.n	8008012 <USB_EPStartXfer+0x3ae>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d118      	bne.n	8008012 <USB_EPStartXfer+0x3ae>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2250      	movs	r2, #80	@ 0x50
 8007fe8:	5a9b      	ldrh	r3, [r3, r2]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	001a      	movs	r2, r3
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	623b      	str	r3, [r7, #32]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	00da      	lsls	r2, r3, #3
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	18d3      	adds	r3, r2, r3
 8007ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8008038 <USB_EPStartXfer+0x3d4>)
 8008000:	4694      	mov	ip, r2
 8008002:	4463      	add	r3, ip
 8008004:	61fb      	str	r3, [r7, #28]
 8008006:	1d7b      	adds	r3, r7, #5
 8008008:	33ff      	adds	r3, #255	@ 0xff
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008012:	2076      	movs	r0, #118	@ 0x76
 8008014:	183b      	adds	r3, r7, r0
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	8912      	ldrh	r2, [r2, #8]
 800801a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6959      	ldr	r1, [r3, #20]
 8008020:	1d7b      	adds	r3, r7, #5
 8008022:	33ff      	adds	r3, #255	@ 0xff
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	b29c      	uxth	r4, r3
 8008028:	183b      	adds	r3, r7, r0
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	0023      	movs	r3, r4
 8008030:	f001 f882 	bl	8009138 <USB_WritePMA>
 8008034:	e329      	b.n	800868a <USB_EPStartXfer+0xa26>
 8008036:	46c0      	nop			@ (mov r8, r8)
 8008038:	00000402 	.word	0x00000402
 800803c:	ffff8f8f 	.word	0xffff8f8f
 8008040:	ffff8180 	.word	0xffff8180
 8008044:	00000406 	.word	0x00000406
 8008048:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d000      	beq.n	8008056 <USB_EPStartXfer+0x3f2>
 8008054:	e070      	b.n	8008138 <USB_EPStartXfer+0x4d4>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2250      	movs	r2, #80	@ 0x50
 800805e:	5a9b      	ldrh	r3, [r3, r2]
 8008060:	b29b      	uxth	r3, r3
 8008062:	001a      	movs	r2, r3
 8008064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008066:	189b      	adds	r3, r3, r2
 8008068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	00da      	lsls	r2, r3, #3
 8008070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008072:	18d3      	adds	r3, r2, r3
 8008074:	4acd      	ldr	r2, [pc, #820]	@ (80083ac <USB_EPStartXfer+0x748>)
 8008076:	4694      	mov	ip, r2
 8008078:	4463      	add	r3, ip
 800807a:	647b      	str	r3, [r7, #68]	@ 0x44
 800807c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	059b      	lsls	r3, r3, #22
 8008084:	0d9b      	lsrs	r3, r3, #22
 8008086:	b29a      	uxth	r2, r3
 8008088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	1d7b      	adds	r3, r7, #5
 800808e:	33ff      	adds	r3, #255	@ 0xff
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <USB_EPStartXfer+0x444>
 8008096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	4ac4      	ldr	r2, [pc, #784]	@ (80083b0 <USB_EPStartXfer+0x74c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e064      	b.n	8008172 <USB_EPStartXfer+0x50e>
 80080a8:	1d7b      	adds	r3, r7, #5
 80080aa:	33ff      	adds	r3, #255	@ 0xff
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80080b0:	d81f      	bhi.n	80080f2 <USB_EPStartXfer+0x48e>
 80080b2:	1d7b      	adds	r3, r7, #5
 80080b4:	33ff      	adds	r3, #255	@ 0xff
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	21f8      	movs	r1, #248	@ 0xf8
 80080bc:	187a      	adds	r2, r7, r1
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	1d7b      	adds	r3, r7, #5
 80080c2:	33ff      	adds	r3, #255	@ 0xff
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	4013      	ands	r3, r2
 80080ca:	d004      	beq.n	80080d6 <USB_EPStartXfer+0x472>
 80080cc:	187b      	adds	r3, r7, r1
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	187a      	adds	r2, r7, r1
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	23f8      	movs	r3, #248	@ 0xf8
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	029b      	lsls	r3, r3, #10
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4313      	orrs	r3, r2
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	e03f      	b.n	8008172 <USB_EPStartXfer+0x50e>
 80080f2:	1d7b      	adds	r3, r7, #5
 80080f4:	33ff      	adds	r3, #255	@ 0xff
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	21f8      	movs	r1, #248	@ 0xf8
 80080fc:	187a      	adds	r2, r7, r1
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	1d7b      	adds	r3, r7, #5
 8008102:	33ff      	adds	r3, #255	@ 0xff
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	221f      	movs	r2, #31
 8008108:	4013      	ands	r3, r2
 800810a:	d104      	bne.n	8008116 <USB_EPStartXfer+0x4b2>
 800810c:	187b      	adds	r3, r7, r1
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	187a      	adds	r2, r7, r1
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29a      	uxth	r2, r3
 800811c:	23f8      	movs	r3, #248	@ 0xf8
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	b29b      	uxth	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b29b      	uxth	r3, r3
 800812c:	4aa0      	ldr	r2, [pc, #640]	@ (80083b0 <USB_EPStartXfer+0x74c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	e01c      	b.n	8008172 <USB_EPStartXfer+0x50e>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d118      	bne.n	8008172 <USB_EPStartXfer+0x50e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	653b      	str	r3, [r7, #80]	@ 0x50
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2250      	movs	r2, #80	@ 0x50
 8008148:	5a9b      	ldrh	r3, [r3, r2]
 800814a:	b29b      	uxth	r3, r3
 800814c:	001a      	movs	r2, r3
 800814e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008150:	189b      	adds	r3, r3, r2
 8008152:	653b      	str	r3, [r7, #80]	@ 0x50
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	00da      	lsls	r2, r3, #3
 800815a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800815c:	18d3      	adds	r3, r2, r3
 800815e:	4a93      	ldr	r2, [pc, #588]	@ (80083ac <USB_EPStartXfer+0x748>)
 8008160:	4694      	mov	ip, r2
 8008162:	4463      	add	r3, ip
 8008164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008166:	1d7b      	adds	r3, r7, #5
 8008168:	33ff      	adds	r3, #255	@ 0xff
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	b29a      	uxth	r2, r3
 800816e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008170:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008172:	2076      	movs	r0, #118	@ 0x76
 8008174:	183b      	adds	r3, r7, r0
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	8912      	ldrh	r2, [r2, #8]
 800817a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	6959      	ldr	r1, [r3, #20]
 8008180:	1d7b      	adds	r3, r7, #5
 8008182:	33ff      	adds	r3, #255	@ 0xff
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	b29c      	uxth	r4, r3
 8008188:	183b      	adds	r3, r7, r0
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	0023      	movs	r3, r4
 8008190:	f000 ffd2 	bl	8009138 <USB_WritePMA>
            ep->xfer_buff += len;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	1d7b      	adds	r3, r7, #5
 800819a:	33ff      	adds	r3, #255	@ 0xff
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	18d2      	adds	r2, r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d908      	bls.n	80081c2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	1d7b      	adds	r3, r7, #5
 80081b6:	33ff      	adds	r3, #255	@ 0xff
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	621a      	str	r2, [r3, #32]
 80081c0:	e007      	b.n	80081d2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	1d7a      	adds	r2, r7, #5
 80081c8:	32ff      	adds	r2, #255	@ 0xff
 80081ca:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2200      	movs	r2, #0
 80081d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	785b      	ldrb	r3, [r3, #1]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d000      	beq.n	80081e0 <USB_EPStartXfer+0x57c>
 80081de:	e070      	b.n	80082c2 <USB_EPStartXfer+0x65e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2250      	movs	r2, #80	@ 0x50
 80081e8:	5a9b      	ldrh	r3, [r3, r2]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	001a      	movs	r2, r3
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	00da      	lsls	r2, r3, #3
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	18d3      	adds	r3, r2, r3
 80081fe:	4a6d      	ldr	r2, [pc, #436]	@ (80083b4 <USB_EPStartXfer+0x750>)
 8008200:	4694      	mov	ip, r2
 8008202:	4463      	add	r3, ip
 8008204:	637b      	str	r3, [r7, #52]	@ 0x34
 8008206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	0d9b      	lsrs	r3, r3, #22
 8008210:	b29a      	uxth	r2, r3
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	1d7b      	adds	r3, r7, #5
 8008218:	33ff      	adds	r3, #255	@ 0xff
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d108      	bne.n	8008232 <USB_EPStartXfer+0x5ce>
 8008220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	4a62      	ldr	r2, [pc, #392]	@ (80083b0 <USB_EPStartXfer+0x74c>)
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e062      	b.n	80082f8 <USB_EPStartXfer+0x694>
 8008232:	1d7b      	adds	r3, r7, #5
 8008234:	33ff      	adds	r3, #255	@ 0xff
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b3e      	cmp	r3, #62	@ 0x3e
 800823a:	d81f      	bhi.n	800827c <USB_EPStartXfer+0x618>
 800823c:	1d7b      	adds	r3, r7, #5
 800823e:	33ff      	adds	r3, #255	@ 0xff
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	21f4      	movs	r1, #244	@ 0xf4
 8008246:	187a      	adds	r2, r7, r1
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	1d7b      	adds	r3, r7, #5
 800824c:	33ff      	adds	r3, #255	@ 0xff
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2201      	movs	r2, #1
 8008252:	4013      	ands	r3, r2
 8008254:	d004      	beq.n	8008260 <USB_EPStartXfer+0x5fc>
 8008256:	187b      	adds	r3, r7, r1
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	187a      	adds	r2, r7, r1
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29a      	uxth	r2, r3
 8008266:	23f4      	movs	r3, #244	@ 0xf4
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	029b      	lsls	r3, r3, #10
 8008270:	b29b      	uxth	r3, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	b29a      	uxth	r2, r3
 8008276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	e03d      	b.n	80082f8 <USB_EPStartXfer+0x694>
 800827c:	1d7b      	adds	r3, r7, #5
 800827e:	33ff      	adds	r3, #255	@ 0xff
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	21f4      	movs	r1, #244	@ 0xf4
 8008286:	187a      	adds	r2, r7, r1
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	1d7b      	adds	r3, r7, #5
 800828c:	33ff      	adds	r3, #255	@ 0xff
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	221f      	movs	r2, #31
 8008292:	4013      	ands	r3, r2
 8008294:	d104      	bne.n	80082a0 <USB_EPStartXfer+0x63c>
 8008296:	187b      	adds	r3, r7, r1
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3b01      	subs	r3, #1
 800829c:	187a      	adds	r2, r7, r1
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	23f4      	movs	r3, #244	@ 0xf4
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	029b      	lsls	r3, r3, #10
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4a3e      	ldr	r2, [pc, #248]	@ (80083b0 <USB_EPStartXfer+0x74c>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e01a      	b.n	80082f8 <USB_EPStartXfer+0x694>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d116      	bne.n	80082f8 <USB_EPStartXfer+0x694>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2250      	movs	r2, #80	@ 0x50
 80082ce:	5a9b      	ldrh	r3, [r3, r2]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	001a      	movs	r2, r3
 80082d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d6:	189b      	adds	r3, r3, r2
 80082d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	00da      	lsls	r2, r3, #3
 80082e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e2:	18d3      	adds	r3, r2, r3
 80082e4:	4a33      	ldr	r2, [pc, #204]	@ (80083b4 <USB_EPStartXfer+0x750>)
 80082e6:	4694      	mov	ip, r2
 80082e8:	4463      	add	r3, ip
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ec:	1d7b      	adds	r3, r7, #5
 80082ee:	33ff      	adds	r3, #255	@ 0xff
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082f8:	2076      	movs	r0, #118	@ 0x76
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	8952      	ldrh	r2, [r2, #10]
 8008300:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6959      	ldr	r1, [r3, #20]
 8008306:	1d7b      	adds	r3, r7, #5
 8008308:	33ff      	adds	r3, #255	@ 0xff
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	b29c      	uxth	r4, r3
 800830e:	183b      	adds	r3, r7, r0
 8008310:	881a      	ldrh	r2, [r3, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	0023      	movs	r3, r4
 8008316:	f000 ff0f 	bl	8009138 <USB_WritePMA>
 800831a:	e1b6      	b.n	800868a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	1d7a      	adds	r2, r7, #5
 8008322:	32ff      	adds	r2, #255	@ 0xff
 8008324:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	18d3      	adds	r3, r2, r3
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29a      	uxth	r2, r3
 8008334:	2062      	movs	r0, #98	@ 0x62
 8008336:	183b      	adds	r3, r7, r0
 8008338:	491f      	ldr	r1, [pc, #124]	@ (80083b8 <USB_EPStartXfer+0x754>)
 800833a:	400a      	ands	r2, r1
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	183a      	adds	r2, r7, r0
 800834a:	8812      	ldrh	r2, [r2, #0]
 800834c:	491b      	ldr	r1, [pc, #108]	@ (80083bc <USB_EPStartXfer+0x758>)
 800834e:	430a      	orrs	r2, r1
 8008350:	b292      	uxth	r2, r2
 8008352:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2250      	movs	r2, #80	@ 0x50
 800835c:	5a9b      	ldrh	r3, [r3, r2]
 800835e:	b29b      	uxth	r3, r3
 8008360:	001a      	movs	r2, r3
 8008362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008364:	189b      	adds	r3, r3, r2
 8008366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	00da      	lsls	r2, r3, #3
 800836e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008370:	18d3      	adds	r3, r2, r3
 8008372:	4a0e      	ldr	r2, [pc, #56]	@ (80083ac <USB_EPStartXfer+0x748>)
 8008374:	4694      	mov	ip, r2
 8008376:	4463      	add	r3, ip
 8008378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800837a:	1d7b      	adds	r3, r7, #5
 800837c:	33ff      	adds	r3, #255	@ 0xff
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	b29a      	uxth	r2, r3
 8008382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008384:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008386:	2076      	movs	r0, #118	@ 0x76
 8008388:	183b      	adds	r3, r7, r0
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	8912      	ldrh	r2, [r2, #8]
 800838e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6959      	ldr	r1, [r3, #20]
 8008394:	1d7b      	adds	r3, r7, #5
 8008396:	33ff      	adds	r3, #255	@ 0xff
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	b29c      	uxth	r4, r3
 800839c:	183b      	adds	r3, r7, r0
 800839e:	881a      	ldrh	r2, [r3, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	0023      	movs	r3, r4
 80083a4:	f000 fec8 	bl	8009138 <USB_WritePMA>
 80083a8:	e16f      	b.n	800868a <USB_EPStartXfer+0xa26>
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	00000402 	.word	0x00000402
 80083b0:	ffff8000 	.word	0xffff8000
 80083b4:	00000406 	.word	0x00000406
 80083b8:	ffff8e8f 	.word	0xffff8e8f
 80083bc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	6a1a      	ldr	r2, [r3, #32]
 80083c4:	1d7b      	adds	r3, r7, #5
 80083c6:	33ff      	adds	r3, #255	@ 0xff
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	18d3      	adds	r3, r2, r3
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	001a      	movs	r2, r3
 80083e0:	2340      	movs	r3, #64	@ 0x40
 80083e2:	4013      	ands	r3, r2
 80083e4:	d100      	bne.n	80083e8 <USB_EPStartXfer+0x784>
 80083e6:	e0a4      	b.n	8008532 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d000      	beq.n	80083f6 <USB_EPStartXfer+0x792>
 80083f4:	e070      	b.n	80084d8 <USB_EPStartXfer+0x874>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2250      	movs	r2, #80	@ 0x50
 80083fe:	5a9b      	ldrh	r3, [r3, r2]
 8008400:	b29b      	uxth	r3, r3
 8008402:	001a      	movs	r2, r3
 8008404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008406:	189b      	adds	r3, r3, r2
 8008408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	00da      	lsls	r2, r3, #3
 8008410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008412:	18d3      	adds	r3, r2, r3
 8008414:	4ada      	ldr	r2, [pc, #872]	@ (8008780 <USB_EPStartXfer+0xb1c>)
 8008416:	4694      	mov	ip, r2
 8008418:	4463      	add	r3, ip
 800841a:	667b      	str	r3, [r7, #100]	@ 0x64
 800841c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	059b      	lsls	r3, r3, #22
 8008424:	0d9b      	lsrs	r3, r3, #22
 8008426:	b29a      	uxth	r2, r3
 8008428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	1d7b      	adds	r3, r7, #5
 800842e:	33ff      	adds	r3, #255	@ 0xff
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d108      	bne.n	8008448 <USB_EPStartXfer+0x7e4>
 8008436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	4ad1      	ldr	r2, [pc, #836]	@ (8008784 <USB_EPStartXfer+0xb20>)
 800843e:	4313      	orrs	r3, r2
 8008440:	b29a      	uxth	r2, r3
 8008442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e062      	b.n	800850e <USB_EPStartXfer+0x8aa>
 8008448:	1d7b      	adds	r3, r7, #5
 800844a:	33ff      	adds	r3, #255	@ 0xff
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008450:	d81f      	bhi.n	8008492 <USB_EPStartXfer+0x82e>
 8008452:	1d7b      	adds	r3, r7, #5
 8008454:	33ff      	adds	r3, #255	@ 0xff
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	21f0      	movs	r1, #240	@ 0xf0
 800845c:	187a      	adds	r2, r7, r1
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	1d7b      	adds	r3, r7, #5
 8008462:	33ff      	adds	r3, #255	@ 0xff
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2201      	movs	r2, #1
 8008468:	4013      	ands	r3, r2
 800846a:	d004      	beq.n	8008476 <USB_EPStartXfer+0x812>
 800846c:	187b      	adds	r3, r7, r1
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	187a      	adds	r2, r7, r1
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29a      	uxth	r2, r3
 800847c:	23f0      	movs	r3, #240	@ 0xf0
 800847e:	18fb      	adds	r3, r7, r3
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	b29b      	uxth	r3, r3
 8008488:	4313      	orrs	r3, r2
 800848a:	b29a      	uxth	r2, r3
 800848c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	e03d      	b.n	800850e <USB_EPStartXfer+0x8aa>
 8008492:	1d7b      	adds	r3, r7, #5
 8008494:	33ff      	adds	r3, #255	@ 0xff
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	21f0      	movs	r1, #240	@ 0xf0
 800849c:	187a      	adds	r2, r7, r1
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	1d7b      	adds	r3, r7, #5
 80084a2:	33ff      	adds	r3, #255	@ 0xff
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	221f      	movs	r2, #31
 80084a8:	4013      	ands	r3, r2
 80084aa:	d104      	bne.n	80084b6 <USB_EPStartXfer+0x852>
 80084ac:	187b      	adds	r3, r7, r1
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	187a      	adds	r2, r7, r1
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	23f0      	movs	r3, #240	@ 0xf0
 80084be:	18fb      	adds	r3, r7, r3
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	029b      	lsls	r3, r3, #10
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	4313      	orrs	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4aad      	ldr	r2, [pc, #692]	@ (8008784 <USB_EPStartXfer+0xb20>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	e01a      	b.n	800850e <USB_EPStartXfer+0x8aa>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d116      	bne.n	800850e <USB_EPStartXfer+0x8aa>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2250      	movs	r2, #80	@ 0x50
 80084e4:	5a9b      	ldrh	r3, [r3, r2]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	001a      	movs	r2, r3
 80084ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	00da      	lsls	r2, r3, #3
 80084f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084f8:	18d3      	adds	r3, r2, r3
 80084fa:	4aa1      	ldr	r2, [pc, #644]	@ (8008780 <USB_EPStartXfer+0xb1c>)
 80084fc:	4694      	mov	ip, r2
 80084fe:	4463      	add	r3, ip
 8008500:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008502:	1d7b      	adds	r3, r7, #5
 8008504:	33ff      	adds	r3, #255	@ 0xff
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	b29a      	uxth	r2, r3
 800850a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800850e:	2076      	movs	r0, #118	@ 0x76
 8008510:	183b      	adds	r3, r7, r0
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	8952      	ldrh	r2, [r2, #10]
 8008516:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	6959      	ldr	r1, [r3, #20]
 800851c:	1d7b      	adds	r3, r7, #5
 800851e:	33ff      	adds	r3, #255	@ 0xff
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	b29c      	uxth	r4, r3
 8008524:	183b      	adds	r3, r7, r0
 8008526:	881a      	ldrh	r2, [r3, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	0023      	movs	r3, r4
 800852c:	f000 fe04 	bl	8009138 <USB_WritePMA>
 8008530:	e0ab      	b.n	800868a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d000      	beq.n	800853c <USB_EPStartXfer+0x8d8>
 800853a:	e070      	b.n	800861e <USB_EPStartXfer+0x9ba>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2250      	movs	r2, #80	@ 0x50
 8008544:	5a9b      	ldrh	r3, [r3, r2]
 8008546:	b29b      	uxth	r3, r3
 8008548:	001a      	movs	r2, r3
 800854a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800854c:	189b      	adds	r3, r3, r2
 800854e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	00da      	lsls	r2, r3, #3
 8008556:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	4a8b      	ldr	r2, [pc, #556]	@ (8008788 <USB_EPStartXfer+0xb24>)
 800855c:	4694      	mov	ip, r2
 800855e:	4463      	add	r3, ip
 8008560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008562:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	059b      	lsls	r3, r3, #22
 800856a:	0d9b      	lsrs	r3, r3, #22
 800856c:	b29a      	uxth	r2, r3
 800856e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	1d7b      	adds	r3, r7, #5
 8008574:	33ff      	adds	r3, #255	@ 0xff
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d108      	bne.n	800858e <USB_EPStartXfer+0x92a>
 800857c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	4a80      	ldr	r2, [pc, #512]	@ (8008784 <USB_EPStartXfer+0xb20>)
 8008584:	4313      	orrs	r3, r2
 8008586:	b29a      	uxth	r2, r3
 8008588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e06c      	b.n	8008668 <USB_EPStartXfer+0xa04>
 800858e:	1d7b      	adds	r3, r7, #5
 8008590:	33ff      	adds	r3, #255	@ 0xff
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b3e      	cmp	r3, #62	@ 0x3e
 8008596:	d81f      	bhi.n	80085d8 <USB_EPStartXfer+0x974>
 8008598:	1d7b      	adds	r3, r7, #5
 800859a:	33ff      	adds	r3, #255	@ 0xff
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	21ec      	movs	r1, #236	@ 0xec
 80085a2:	187a      	adds	r2, r7, r1
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	1d7b      	adds	r3, r7, #5
 80085a8:	33ff      	adds	r3, #255	@ 0xff
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2201      	movs	r2, #1
 80085ae:	4013      	ands	r3, r2
 80085b0:	d004      	beq.n	80085bc <USB_EPStartXfer+0x958>
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	187a      	adds	r2, r7, r1
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	23ec      	movs	r3, #236	@ 0xec
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e047      	b.n	8008668 <USB_EPStartXfer+0xa04>
 80085d8:	1d7b      	adds	r3, r7, #5
 80085da:	33ff      	adds	r3, #255	@ 0xff
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	21ec      	movs	r1, #236	@ 0xec
 80085e2:	187a      	adds	r2, r7, r1
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	1d7b      	adds	r3, r7, #5
 80085e8:	33ff      	adds	r3, #255	@ 0xff
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	221f      	movs	r2, #31
 80085ee:	4013      	ands	r3, r2
 80085f0:	d104      	bne.n	80085fc <USB_EPStartXfer+0x998>
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	187a      	adds	r2, r7, r1
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29a      	uxth	r2, r3
 8008602:	23ec      	movs	r3, #236	@ 0xec
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	029b      	lsls	r3, r3, #10
 800860c:	b29b      	uxth	r3, r3
 800860e:	4313      	orrs	r3, r2
 8008610:	b29b      	uxth	r3, r3
 8008612:	4a5c      	ldr	r2, [pc, #368]	@ (8008784 <USB_EPStartXfer+0xb20>)
 8008614:	4313      	orrs	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	e024      	b.n	8008668 <USB_EPStartXfer+0xa04>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d120      	bne.n	8008668 <USB_EPStartXfer+0xa04>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2184      	movs	r1, #132	@ 0x84
 800862a:	187a      	adds	r2, r7, r1
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2250      	movs	r2, #80	@ 0x50
 8008632:	5a9b      	ldrh	r3, [r3, r2]
 8008634:	b29b      	uxth	r3, r3
 8008636:	001a      	movs	r2, r3
 8008638:	187b      	adds	r3, r7, r1
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	189b      	adds	r3, r3, r2
 800863e:	187a      	adds	r2, r7, r1
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	00da      	lsls	r2, r3, #3
 8008648:	187b      	adds	r3, r7, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	18d3      	adds	r3, r2, r3
 800864e:	4a4e      	ldr	r2, [pc, #312]	@ (8008788 <USB_EPStartXfer+0xb24>)
 8008650:	4694      	mov	ip, r2
 8008652:	4463      	add	r3, ip
 8008654:	2180      	movs	r1, #128	@ 0x80
 8008656:	187a      	adds	r2, r7, r1
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	1d7b      	adds	r3, r7, #5
 800865c:	33ff      	adds	r3, #255	@ 0xff
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	b29a      	uxth	r2, r3
 8008662:	187b      	adds	r3, r7, r1
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008668:	2076      	movs	r0, #118	@ 0x76
 800866a:	183b      	adds	r3, r7, r0
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	8912      	ldrh	r2, [r2, #8]
 8008670:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6959      	ldr	r1, [r3, #20]
 8008676:	1d7b      	adds	r3, r7, #5
 8008678:	33ff      	adds	r3, #255	@ 0xff
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b29c      	uxth	r4, r3
 800867e:	183b      	adds	r3, r7, r0
 8008680:	881a      	ldrh	r2, [r3, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	0023      	movs	r3, r4
 8008686:	f000 fd57 	bl	8009138 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29a      	uxth	r2, r3
 8008698:	200a      	movs	r0, #10
 800869a:	183b      	adds	r3, r7, r0
 800869c:	493b      	ldr	r1, [pc, #236]	@ (800878c <USB_EPStartXfer+0xb28>)
 800869e:	400a      	ands	r2, r1
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	183b      	adds	r3, r7, r0
 80086a4:	183a      	adds	r2, r7, r0
 80086a6:	8812      	ldrh	r2, [r2, #0]
 80086a8:	2110      	movs	r1, #16
 80086aa:	404a      	eors	r2, r1
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	183b      	adds	r3, r7, r0
 80086b0:	183a      	adds	r2, r7, r0
 80086b2:	8812      	ldrh	r2, [r2, #0]
 80086b4:	2120      	movs	r1, #32
 80086b6:	404a      	eors	r2, r1
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	18d3      	adds	r3, r2, r3
 80086c4:	183a      	adds	r2, r7, r0
 80086c6:	8812      	ldrh	r2, [r2, #0]
 80086c8:	4931      	ldr	r1, [pc, #196]	@ (8008790 <USB_EPStartXfer+0xb2c>)
 80086ca:	430a      	orrs	r2, r1
 80086cc:	b292      	uxth	r2, r2
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	f000 fbe9 	bl	8008ea6 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	7b1b      	ldrb	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d000      	beq.n	80086de <USB_EPStartXfer+0xa7a>
 80086dc:	e0a8      	b.n	8008830 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d90d      	bls.n	8008706 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	1d7a      	adds	r2, r7, #5
 80086f0:	32ff      	adds	r2, #255	@ 0xff
 80086f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	1d7b      	adds	r3, r7, #5
 80086fa:	33ff      	adds	r3, #255	@ 0xff
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	619a      	str	r2, [r3, #24]
 8008704:	e007      	b.n	8008716 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	1d7a      	adds	r2, r7, #5
 800870c:	32ff      	adds	r2, #255	@ 0xff
 800870e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2190      	movs	r1, #144	@ 0x90
 800871a:	187a      	adds	r2, r7, r1
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2250      	movs	r2, #80	@ 0x50
 8008722:	5a9b      	ldrh	r3, [r3, r2]
 8008724:	b29b      	uxth	r3, r3
 8008726:	001a      	movs	r2, r3
 8008728:	187b      	adds	r3, r7, r1
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	189b      	adds	r3, r3, r2
 800872e:	187a      	adds	r2, r7, r1
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	00da      	lsls	r2, r3, #3
 8008738:	187b      	adds	r3, r7, r1
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	18d3      	adds	r3, r2, r3
 800873e:	4a10      	ldr	r2, [pc, #64]	@ (8008780 <USB_EPStartXfer+0xb1c>)
 8008740:	4694      	mov	ip, r2
 8008742:	4463      	add	r3, ip
 8008744:	218c      	movs	r1, #140	@ 0x8c
 8008746:	187a      	adds	r2, r7, r1
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	187b      	adds	r3, r7, r1
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	059b      	lsls	r3, r3, #22
 8008754:	0d9b      	lsrs	r3, r3, #22
 8008756:	b29a      	uxth	r2, r3
 8008758:	187b      	adds	r3, r7, r1
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	1d7b      	adds	r3, r7, #5
 8008760:	33ff      	adds	r3, #255	@ 0xff
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d115      	bne.n	8008794 <USB_EPStartXfer+0xb30>
 8008768:	187b      	adds	r3, r7, r1
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	4a04      	ldr	r2, [pc, #16]	@ (8008784 <USB_EPStartXfer+0xb20>)
 8008772:	4313      	orrs	r3, r2
 8008774:	b29a      	uxth	r2, r3
 8008776:	187b      	adds	r3, r7, r1
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	e36e      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	00000406 	.word	0x00000406
 8008784:	ffff8000 	.word	0xffff8000
 8008788:	00000402 	.word	0x00000402
 800878c:	ffff8fbf 	.word	0xffff8fbf
 8008790:	ffff8080 	.word	0xffff8080
 8008794:	1d7b      	adds	r3, r7, #5
 8008796:	33ff      	adds	r3, #255	@ 0xff
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b3e      	cmp	r3, #62	@ 0x3e
 800879c:	d822      	bhi.n	80087e4 <USB_EPStartXfer+0xb80>
 800879e:	1d7b      	adds	r3, r7, #5
 80087a0:	33ff      	adds	r3, #255	@ 0xff
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	21e8      	movs	r1, #232	@ 0xe8
 80087a8:	187a      	adds	r2, r7, r1
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	1d7b      	adds	r3, r7, #5
 80087ae:	33ff      	adds	r3, #255	@ 0xff
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	4013      	ands	r3, r2
 80087b6:	d004      	beq.n	80087c2 <USB_EPStartXfer+0xb5e>
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	187a      	adds	r2, r7, r1
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	218c      	movs	r1, #140	@ 0x8c
 80087c4:	187b      	adds	r3, r7, r1
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	23e8      	movs	r3, #232	@ 0xe8
 80087ce:	18fb      	adds	r3, r7, r3
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	029b      	lsls	r3, r3, #10
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	b29a      	uxth	r2, r3
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	801a      	strh	r2, [r3, #0]
 80087e2:	e33b      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
 80087e4:	1d7b      	adds	r3, r7, #5
 80087e6:	33ff      	adds	r3, #255	@ 0xff
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	21e8      	movs	r1, #232	@ 0xe8
 80087ee:	187a      	adds	r2, r7, r1
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	1d7b      	adds	r3, r7, #5
 80087f4:	33ff      	adds	r3, #255	@ 0xff
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	221f      	movs	r2, #31
 80087fa:	4013      	ands	r3, r2
 80087fc:	d104      	bne.n	8008808 <USB_EPStartXfer+0xba4>
 80087fe:	187b      	adds	r3, r7, r1
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3b01      	subs	r3, #1
 8008804:	187a      	adds	r2, r7, r1
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	218c      	movs	r1, #140	@ 0x8c
 800880a:	187b      	adds	r3, r7, r1
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29a      	uxth	r2, r3
 8008812:	23e8      	movs	r3, #232	@ 0xe8
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	b29b      	uxth	r3, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	b29b      	uxth	r3, r3
 8008822:	4ad7      	ldr	r2, [pc, #860]	@ (8008b80 <USB_EPStartXfer+0xf1c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	187b      	adds	r3, r7, r1
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	e315      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	78db      	ldrb	r3, [r3, #3]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d000      	beq.n	800883a <USB_EPStartXfer+0xbd6>
 8008838:	e189      	b.n	8008b4e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d000      	beq.n	8008844 <USB_EPStartXfer+0xbe0>
 8008842:	e07b      	b.n	800893c <USB_EPStartXfer+0xcd8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	21ac      	movs	r1, #172	@ 0xac
 8008848:	187a      	adds	r2, r7, r1
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2250      	movs	r2, #80	@ 0x50
 8008850:	5a9b      	ldrh	r3, [r3, r2]
 8008852:	b29b      	uxth	r3, r3
 8008854:	001a      	movs	r2, r3
 8008856:	187b      	adds	r3, r7, r1
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	189b      	adds	r3, r3, r2
 800885c:	187a      	adds	r2, r7, r1
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	00da      	lsls	r2, r3, #3
 8008866:	187b      	adds	r3, r7, r1
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	18d3      	adds	r3, r2, r3
 800886c:	4ac5      	ldr	r2, [pc, #788]	@ (8008b84 <USB_EPStartXfer+0xf20>)
 800886e:	4694      	mov	ip, r2
 8008870:	4463      	add	r3, ip
 8008872:	21a8      	movs	r1, #168	@ 0xa8
 8008874:	187a      	adds	r2, r7, r1
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	187b      	adds	r3, r7, r1
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	059b      	lsls	r3, r3, #22
 8008882:	0d9b      	lsrs	r3, r3, #22
 8008884:	b29a      	uxth	r2, r3
 8008886:	187b      	adds	r3, r7, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <USB_EPStartXfer+0xc46>
 8008894:	187b      	adds	r3, r7, r1
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	b29b      	uxth	r3, r3
 800889c:	4ab8      	ldr	r2, [pc, #736]	@ (8008b80 <USB_EPStartXfer+0xf1c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	187b      	adds	r3, r7, r1
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	e06c      	b.n	8008984 <USB_EPStartXfer+0xd20>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b0:	d820      	bhi.n	80088f4 <USB_EPStartXfer+0xc90>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	21e4      	movs	r1, #228	@ 0xe4
 80088ba:	187a      	adds	r2, r7, r1
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2201      	movs	r2, #1
 80088c4:	4013      	ands	r3, r2
 80088c6:	d004      	beq.n	80088d2 <USB_EPStartXfer+0xc6e>
 80088c8:	187b      	adds	r3, r7, r1
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	187a      	adds	r2, r7, r1
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	21a8      	movs	r1, #168	@ 0xa8
 80088d4:	187b      	adds	r3, r7, r1
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	23e4      	movs	r3, #228	@ 0xe4
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e047      	b.n	8008984 <USB_EPStartXfer+0xd20>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	095b      	lsrs	r3, r3, #5
 80088fa:	21e4      	movs	r1, #228	@ 0xe4
 80088fc:	187a      	adds	r2, r7, r1
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	221f      	movs	r2, #31
 8008906:	4013      	ands	r3, r2
 8008908:	d104      	bne.n	8008914 <USB_EPStartXfer+0xcb0>
 800890a:	187b      	adds	r3, r7, r1
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3b01      	subs	r3, #1
 8008910:	187a      	adds	r2, r7, r1
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	21a8      	movs	r1, #168	@ 0xa8
 8008916:	187b      	adds	r3, r7, r1
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	23e4      	movs	r3, #228	@ 0xe4
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	029b      	lsls	r3, r3, #10
 8008928:	b29b      	uxth	r3, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	b29b      	uxth	r3, r3
 800892e:	4a94      	ldr	r2, [pc, #592]	@ (8008b80 <USB_EPStartXfer+0xf1c>)
 8008930:	4313      	orrs	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	187b      	adds	r3, r7, r1
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e023      	b.n	8008984 <USB_EPStartXfer+0xd20>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d11f      	bne.n	8008984 <USB_EPStartXfer+0xd20>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	21b4      	movs	r1, #180	@ 0xb4
 8008948:	187a      	adds	r2, r7, r1
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2250      	movs	r2, #80	@ 0x50
 8008950:	5a9b      	ldrh	r3, [r3, r2]
 8008952:	b29b      	uxth	r3, r3
 8008954:	001a      	movs	r2, r3
 8008956:	187b      	adds	r3, r7, r1
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	189b      	adds	r3, r3, r2
 800895c:	187a      	adds	r2, r7, r1
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	00da      	lsls	r2, r3, #3
 8008966:	187b      	adds	r3, r7, r1
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	18d3      	adds	r3, r2, r3
 800896c:	4a85      	ldr	r2, [pc, #532]	@ (8008b84 <USB_EPStartXfer+0xf20>)
 800896e:	4694      	mov	ip, r2
 8008970:	4463      	add	r3, ip
 8008972:	21b0      	movs	r1, #176	@ 0xb0
 8008974:	187a      	adds	r2, r7, r1
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	b29a      	uxth	r2, r3
 800897e:	187b      	adds	r3, r7, r1
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	22a4      	movs	r2, #164	@ 0xa4
 8008988:	18ba      	adds	r2, r7, r2
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d000      	beq.n	8008996 <USB_EPStartXfer+0xd32>
 8008994:	e07b      	b.n	8008a8e <USB_EPStartXfer+0xe2a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	219c      	movs	r1, #156	@ 0x9c
 800899a:	187a      	adds	r2, r7, r1
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2250      	movs	r2, #80	@ 0x50
 80089a2:	5a9b      	ldrh	r3, [r3, r2]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	001a      	movs	r2, r3
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	189b      	adds	r3, r3, r2
 80089ae:	187a      	adds	r2, r7, r1
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	00da      	lsls	r2, r3, #3
 80089b8:	187b      	adds	r3, r7, r1
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	18d3      	adds	r3, r2, r3
 80089be:	4a72      	ldr	r2, [pc, #456]	@ (8008b88 <USB_EPStartXfer+0xf24>)
 80089c0:	4694      	mov	ip, r2
 80089c2:	4463      	add	r3, ip
 80089c4:	2198      	movs	r1, #152	@ 0x98
 80089c6:	187a      	adds	r2, r7, r1
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	187b      	adds	r3, r7, r1
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	059b      	lsls	r3, r3, #22
 80089d4:	0d9b      	lsrs	r3, r3, #22
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <USB_EPStartXfer+0xd98>
 80089e6:	187b      	adds	r3, r7, r1
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4a64      	ldr	r2, [pc, #400]	@ (8008b80 <USB_EPStartXfer+0xf1c>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	801a      	strh	r2, [r3, #0]
 80089fa:	e069      	b.n	8008ad0 <USB_EPStartXfer+0xe6c>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a02:	d820      	bhi.n	8008a46 <USB_EPStartXfer+0xde2>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	21e0      	movs	r1, #224	@ 0xe0
 8008a0c:	187a      	adds	r2, r7, r1
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2201      	movs	r2, #1
 8008a16:	4013      	ands	r3, r2
 8008a18:	d004      	beq.n	8008a24 <USB_EPStartXfer+0xdc0>
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	187a      	adds	r2, r7, r1
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	2198      	movs	r1, #152	@ 0x98
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	23e0      	movs	r3, #224	@ 0xe0
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	029b      	lsls	r3, r3, #10
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e044      	b.n	8008ad0 <USB_EPStartXfer+0xe6c>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	21e0      	movs	r1, #224	@ 0xe0
 8008a4e:	187a      	adds	r2, r7, r1
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	221f      	movs	r2, #31
 8008a58:	4013      	ands	r3, r2
 8008a5a:	d104      	bne.n	8008a66 <USB_EPStartXfer+0xe02>
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	187a      	adds	r2, r7, r1
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	2198      	movs	r1, #152	@ 0x98
 8008a68:	187b      	adds	r3, r7, r1
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	23e0      	movs	r3, #224	@ 0xe0
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	029b      	lsls	r3, r3, #10
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4a3f      	ldr	r2, [pc, #252]	@ (8008b80 <USB_EPStartXfer+0xf1c>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	187b      	adds	r3, r7, r1
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e020      	b.n	8008ad0 <USB_EPStartXfer+0xe6c>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d11c      	bne.n	8008ad0 <USB_EPStartXfer+0xe6c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2250      	movs	r2, #80	@ 0x50
 8008a9a:	5a9b      	ldrh	r3, [r3, r2]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	001a      	movs	r2, r3
 8008aa0:	21a4      	movs	r1, #164	@ 0xa4
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	187a      	adds	r2, r7, r1
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	00da      	lsls	r2, r3, #3
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	18d3      	adds	r3, r2, r3
 8008ab8:	4a33      	ldr	r2, [pc, #204]	@ (8008b88 <USB_EPStartXfer+0xf24>)
 8008aba:	4694      	mov	ip, r2
 8008abc:	4463      	add	r3, ip
 8008abe:	21a0      	movs	r1, #160	@ 0xa0
 8008ac0:	187a      	adds	r2, r7, r1
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d100      	bne.n	8008ada <USB_EPStartXfer+0xe76>
 8008ad8:	e1c0      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	18d2      	adds	r2, r2, r3
 8008ae4:	2196      	movs	r1, #150	@ 0x96
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	8812      	ldrh	r2, [r2, #0]
 8008aea:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008aec:	187b      	adds	r3, r7, r1
 8008aee:	881a      	ldrh	r2, [r3, #0]
 8008af0:	2380      	movs	r3, #128	@ 0x80
 8008af2:	01db      	lsls	r3, r3, #7
 8008af4:	4013      	ands	r3, r2
 8008af6:	d004      	beq.n	8008b02 <USB_EPStartXfer+0xe9e>
 8008af8:	187b      	adds	r3, r7, r1
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	2240      	movs	r2, #64	@ 0x40
 8008afe:	4013      	ands	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b02:	2196      	movs	r1, #150	@ 0x96
 8008b04:	187b      	adds	r3, r7, r1
 8008b06:	881a      	ldrh	r2, [r3, #0]
 8008b08:	2380      	movs	r3, #128	@ 0x80
 8008b0a:	01db      	lsls	r3, r3, #7
 8008b0c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b0e:	d000      	beq.n	8008b12 <USB_EPStartXfer+0xeae>
 8008b10:	e1a4      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b12:	187b      	adds	r3, r7, r1
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	2240      	movs	r2, #64	@ 0x40
 8008b18:	4013      	ands	r3, r2
 8008b1a:	d000      	beq.n	8008b1e <USB_EPStartXfer+0xeba>
 8008b1c:	e19e      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	18d3      	adds	r3, r2, r3
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	2094      	movs	r0, #148	@ 0x94
 8008b2e:	183b      	adds	r3, r7, r0
 8008b30:	4916      	ldr	r1, [pc, #88]	@ (8008b8c <USB_EPStartXfer+0xf28>)
 8008b32:	400a      	ands	r2, r1
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	18d3      	adds	r3, r2, r3
 8008b40:	183a      	adds	r2, r7, r0
 8008b42:	8812      	ldrh	r2, [r2, #0]
 8008b44:	4912      	ldr	r1, [pc, #72]	@ (8008b90 <USB_EPStartXfer+0xf2c>)
 8008b46:	430a      	orrs	r2, r1
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e186      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	78db      	ldrb	r3, [r3, #3]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d000      	beq.n	8008b58 <USB_EPStartXfer+0xef4>
 8008b56:	e17f      	b.n	8008e58 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d917      	bls.n	8008b94 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	1d7a      	adds	r2, r7, #5
 8008b6a:	32ff      	adds	r2, #255	@ 0xff
 8008b6c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	1d7b      	adds	r3, r7, #5
 8008b74:	33ff      	adds	r3, #255	@ 0xff
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	1ad2      	subs	r2, r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	619a      	str	r2, [r3, #24]
 8008b7e:	e011      	b.n	8008ba4 <USB_EPStartXfer+0xf40>
 8008b80:	ffff8000 	.word	0xffff8000
 8008b84:	00000402 	.word	0x00000402
 8008b88:	00000406 	.word	0x00000406
 8008b8c:	ffff8f8f 	.word	0xffff8f8f
 8008b90:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	1d7a      	adds	r2, r7, #5
 8008b9a:	32ff      	adds	r2, #255	@ 0xff
 8008b9c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d000      	beq.n	8008bae <USB_EPStartXfer+0xf4a>
 8008bac:	e081      	b.n	8008cb2 <USB_EPStartXfer+0x104e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	21cc      	movs	r1, #204	@ 0xcc
 8008bb2:	187a      	adds	r2, r7, r1
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2250      	movs	r2, #80	@ 0x50
 8008bba:	5a9b      	ldrh	r3, [r3, r2]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	187b      	adds	r3, r7, r1
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	189b      	adds	r3, r3, r2
 8008bc6:	187a      	adds	r2, r7, r1
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	00da      	lsls	r2, r3, #3
 8008bd0:	187b      	adds	r3, r7, r1
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	18d3      	adds	r3, r2, r3
 8008bd6:	4ab6      	ldr	r2, [pc, #728]	@ (8008eb0 <USB_EPStartXfer+0x124c>)
 8008bd8:	4694      	mov	ip, r2
 8008bda:	4463      	add	r3, ip
 8008bdc:	21c8      	movs	r1, #200	@ 0xc8
 8008bde:	187a      	adds	r2, r7, r1
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	187b      	adds	r3, r7, r1
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	059b      	lsls	r3, r3, #22
 8008bec:	0d9b      	lsrs	r3, r3, #22
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	187b      	adds	r3, r7, r1
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	1d7b      	adds	r3, r7, #5
 8008bf8:	33ff      	adds	r3, #255	@ 0xff
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <USB_EPStartXfer+0xfb2>
 8008c00:	187b      	adds	r3, r7, r1
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4aaa      	ldr	r2, [pc, #680]	@ (8008eb4 <USB_EPStartXfer+0x1250>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	e072      	b.n	8008cfc <USB_EPStartXfer+0x1098>
 8008c16:	1d7b      	adds	r3, r7, #5
 8008c18:	33ff      	adds	r3, #255	@ 0xff
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c1e:	d822      	bhi.n	8008c66 <USB_EPStartXfer+0x1002>
 8008c20:	1d7b      	adds	r3, r7, #5
 8008c22:	33ff      	adds	r3, #255	@ 0xff
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	21dc      	movs	r1, #220	@ 0xdc
 8008c2a:	187a      	adds	r2, r7, r1
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	1d7b      	adds	r3, r7, #5
 8008c30:	33ff      	adds	r3, #255	@ 0xff
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2201      	movs	r2, #1
 8008c36:	4013      	ands	r3, r2
 8008c38:	d004      	beq.n	8008c44 <USB_EPStartXfer+0xfe0>
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	187a      	adds	r2, r7, r1
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	21c8      	movs	r1, #200	@ 0xc8
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	23dc      	movs	r3, #220	@ 0xdc
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	e04a      	b.n	8008cfc <USB_EPStartXfer+0x1098>
 8008c66:	1d7b      	adds	r3, r7, #5
 8008c68:	33ff      	adds	r3, #255	@ 0xff
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	21dc      	movs	r1, #220	@ 0xdc
 8008c70:	187a      	adds	r2, r7, r1
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	1d7b      	adds	r3, r7, #5
 8008c76:	33ff      	adds	r3, #255	@ 0xff
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	221f      	movs	r2, #31
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d104      	bne.n	8008c8a <USB_EPStartXfer+0x1026>
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	187a      	adds	r2, r7, r1
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	21c8      	movs	r1, #200	@ 0xc8
 8008c8c:	187b      	adds	r3, r7, r1
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	23dc      	movs	r3, #220	@ 0xdc
 8008c96:	18fb      	adds	r3, r7, r3
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4a83      	ldr	r2, [pc, #524]	@ (8008eb4 <USB_EPStartXfer+0x1250>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	187b      	adds	r3, r7, r1
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	e024      	b.n	8008cfc <USB_EPStartXfer+0x1098>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d120      	bne.n	8008cfc <USB_EPStartXfer+0x1098>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	21d4      	movs	r1, #212	@ 0xd4
 8008cbe:	187a      	adds	r2, r7, r1
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2250      	movs	r2, #80	@ 0x50
 8008cc6:	5a9b      	ldrh	r3, [r3, r2]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	001a      	movs	r2, r3
 8008ccc:	187b      	adds	r3, r7, r1
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	189b      	adds	r3, r3, r2
 8008cd2:	187a      	adds	r2, r7, r1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	00da      	lsls	r2, r3, #3
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	18d3      	adds	r3, r2, r3
 8008ce2:	4a73      	ldr	r2, [pc, #460]	@ (8008eb0 <USB_EPStartXfer+0x124c>)
 8008ce4:	4694      	mov	ip, r2
 8008ce6:	4463      	add	r3, ip
 8008ce8:	21d0      	movs	r1, #208	@ 0xd0
 8008cea:	187a      	adds	r2, r7, r1
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	1d7b      	adds	r3, r7, #5
 8008cf0:	33ff      	adds	r3, #255	@ 0xff
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	187b      	adds	r3, r7, r1
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	22c4      	movs	r2, #196	@ 0xc4
 8008d00:	18ba      	adds	r2, r7, r2
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	785b      	ldrb	r3, [r3, #1]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d000      	beq.n	8008d0e <USB_EPStartXfer+0x10aa>
 8008d0c:	e081      	b.n	8008e12 <USB_EPStartXfer+0x11ae>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	21bc      	movs	r1, #188	@ 0xbc
 8008d12:	187a      	adds	r2, r7, r1
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2250      	movs	r2, #80	@ 0x50
 8008d1a:	5a9b      	ldrh	r3, [r3, r2]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	001a      	movs	r2, r3
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	00da      	lsls	r2, r3, #3
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	18d3      	adds	r3, r2, r3
 8008d36:	4a60      	ldr	r2, [pc, #384]	@ (8008eb8 <USB_EPStartXfer+0x1254>)
 8008d38:	4694      	mov	ip, r2
 8008d3a:	4463      	add	r3, ip
 8008d3c:	21b8      	movs	r1, #184	@ 0xb8
 8008d3e:	187a      	adds	r2, r7, r1
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	187b      	adds	r3, r7, r1
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	059b      	lsls	r3, r3, #22
 8008d4c:	0d9b      	lsrs	r3, r3, #22
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	187b      	adds	r3, r7, r1
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	1d7b      	adds	r3, r7, #5
 8008d58:	33ff      	adds	r3, #255	@ 0xff
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <USB_EPStartXfer+0x1112>
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4a52      	ldr	r2, [pc, #328]	@ (8008eb4 <USB_EPStartXfer+0x1250>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	187b      	adds	r3, r7, r1
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e072      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
 8008d76:	1d7b      	adds	r3, r7, #5
 8008d78:	33ff      	adds	r3, #255	@ 0xff
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d7e:	d822      	bhi.n	8008dc6 <USB_EPStartXfer+0x1162>
 8008d80:	1d7b      	adds	r3, r7, #5
 8008d82:	33ff      	adds	r3, #255	@ 0xff
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	21d8      	movs	r1, #216	@ 0xd8
 8008d8a:	187a      	adds	r2, r7, r1
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	1d7b      	adds	r3, r7, #5
 8008d90:	33ff      	adds	r3, #255	@ 0xff
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4013      	ands	r3, r2
 8008d98:	d004      	beq.n	8008da4 <USB_EPStartXfer+0x1140>
 8008d9a:	187b      	adds	r3, r7, r1
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	187a      	adds	r2, r7, r1
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	21b8      	movs	r1, #184	@ 0xb8
 8008da6:	187b      	adds	r3, r7, r1
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	23d8      	movs	r3, #216	@ 0xd8
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	029b      	lsls	r3, r3, #10
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	187b      	adds	r3, r7, r1
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	e04a      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
 8008dc6:	1d7b      	adds	r3, r7, #5
 8008dc8:	33ff      	adds	r3, #255	@ 0xff
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	21d8      	movs	r1, #216	@ 0xd8
 8008dd0:	187a      	adds	r2, r7, r1
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	1d7b      	adds	r3, r7, #5
 8008dd6:	33ff      	adds	r3, #255	@ 0xff
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	221f      	movs	r2, #31
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d104      	bne.n	8008dea <USB_EPStartXfer+0x1186>
 8008de0:	187b      	adds	r3, r7, r1
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	187a      	adds	r2, r7, r1
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	21b8      	movs	r1, #184	@ 0xb8
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	23d8      	movs	r3, #216	@ 0xd8
 8008df6:	18fb      	adds	r3, r7, r3
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	029b      	lsls	r3, r3, #10
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4313      	orrs	r3, r2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	4a2b      	ldr	r2, [pc, #172]	@ (8008eb4 <USB_EPStartXfer+0x1250>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	187b      	adds	r3, r7, r1
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e024      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d120      	bne.n	8008e5c <USB_EPStartXfer+0x11f8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2250      	movs	r2, #80	@ 0x50
 8008e1e:	5a9b      	ldrh	r3, [r3, r2]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	001a      	movs	r2, r3
 8008e24:	21c4      	movs	r1, #196	@ 0xc4
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	187a      	adds	r2, r7, r1
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	00da      	lsls	r2, r3, #3
 8008e36:	187b      	adds	r3, r7, r1
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	18d3      	adds	r3, r2, r3
 8008e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb8 <USB_EPStartXfer+0x1254>)
 8008e3e:	4694      	mov	ip, r2
 8008e40:	4463      	add	r3, ip
 8008e42:	21c0      	movs	r1, #192	@ 0xc0
 8008e44:	187a      	adds	r2, r7, r1
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	1d7b      	adds	r3, r7, #5
 8008e4a:	33ff      	adds	r3, #255	@ 0xff
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	187b      	adds	r3, r7, r1
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	e001      	b.n	8008e5c <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e025      	b.n	8008ea8 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	208a      	movs	r0, #138	@ 0x8a
 8008e6c:	183b      	adds	r3, r7, r0
 8008e6e:	4913      	ldr	r1, [pc, #76]	@ (8008ebc <USB_EPStartXfer+0x1258>)
 8008e70:	400a      	ands	r2, r1
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	183b      	adds	r3, r7, r0
 8008e76:	183a      	adds	r2, r7, r0
 8008e78:	8812      	ldrh	r2, [r2, #0]
 8008e7a:	2180      	movs	r1, #128	@ 0x80
 8008e7c:	0149      	lsls	r1, r1, #5
 8008e7e:	404a      	eors	r2, r1
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	183b      	adds	r3, r7, r0
 8008e84:	183a      	adds	r2, r7, r0
 8008e86:	8812      	ldrh	r2, [r2, #0]
 8008e88:	2180      	movs	r1, #128	@ 0x80
 8008e8a:	0189      	lsls	r1, r1, #6
 8008e8c:	404a      	eors	r2, r1
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	18d3      	adds	r3, r2, r3
 8008e9a:	183a      	adds	r2, r7, r0
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	4908      	ldr	r1, [pc, #32]	@ (8008ec0 <USB_EPStartXfer+0x125c>)
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	b292      	uxth	r2, r2
 8008ea4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	b043      	add	sp, #268	@ 0x10c
 8008eae:	bd90      	pop	{r4, r7, pc}
 8008eb0:	00000402 	.word	0x00000402
 8008eb4:	ffff8000 	.word	0xffff8000
 8008eb8:	00000406 	.word	0x00000406
 8008ebc:	ffffbf8f 	.word	0xffffbf8f
 8008ec0:	ffff8080 	.word	0xffff8080

08008ec4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01d      	beq.n	8008f12 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	18d3      	adds	r3, r2, r3
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	200c      	movs	r0, #12
 8008ee6:	183b      	adds	r3, r7, r0
 8008ee8:	491b      	ldr	r1, [pc, #108]	@ (8008f58 <USB_EPSetStall+0x94>)
 8008eea:	400a      	ands	r2, r1
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	183b      	adds	r3, r7, r0
 8008ef0:	183a      	adds	r2, r7, r0
 8008ef2:	8812      	ldrh	r2, [r2, #0]
 8008ef4:	2110      	movs	r1, #16
 8008ef6:	404a      	eors	r2, r1
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	183a      	adds	r2, r7, r0
 8008f06:	8812      	ldrh	r2, [r2, #0]
 8008f08:	4914      	ldr	r1, [pc, #80]	@ (8008f5c <USB_EPSetStall+0x98>)
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	801a      	strh	r2, [r3, #0]
 8008f10:	e01d      	b.n	8008f4e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	18d3      	adds	r3, r2, r3
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	200e      	movs	r0, #14
 8008f22:	183b      	adds	r3, r7, r0
 8008f24:	490e      	ldr	r1, [pc, #56]	@ (8008f60 <USB_EPSetStall+0x9c>)
 8008f26:	400a      	ands	r2, r1
 8008f28:	801a      	strh	r2, [r3, #0]
 8008f2a:	183b      	adds	r3, r7, r0
 8008f2c:	183a      	adds	r2, r7, r0
 8008f2e:	8812      	ldrh	r2, [r2, #0]
 8008f30:	2180      	movs	r1, #128	@ 0x80
 8008f32:	0149      	lsls	r1, r1, #5
 8008f34:	404a      	eors	r2, r1
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	18d3      	adds	r3, r2, r3
 8008f42:	183a      	adds	r2, r7, r0
 8008f44:	8812      	ldrh	r2, [r2, #0]
 8008f46:	4905      	ldr	r1, [pc, #20]	@ (8008f5c <USB_EPSetStall+0x98>)
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	b292      	uxth	r2, r2
 8008f4c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b004      	add	sp, #16
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	ffff8fbf 	.word	0xffff8fbf
 8008f5c:	ffff8080 	.word	0xffff8080
 8008f60:	ffffbf8f 	.word	0xffffbf8f

08008f64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	7b1b      	ldrb	r3, [r3, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d000      	beq.n	8008f78 <USB_EPClearStall+0x14>
 8008f76:	e095      	b.n	80090a4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	785b      	ldrb	r3, [r3, #1]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d046      	beq.n	800900e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	18d2      	adds	r2, r2, r3
 8008f8a:	2110      	movs	r1, #16
 8008f8c:	187b      	adds	r3, r7, r1
 8008f8e:	8812      	ldrh	r2, [r2, #0]
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	2240      	movs	r2, #64	@ 0x40
 8008f98:	4013      	ands	r3, r2
 8008f9a:	d016      	beq.n	8008fca <USB_EPClearStall+0x66>
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	18d3      	adds	r3, r2, r3
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	200e      	movs	r0, #14
 8008fac:	183b      	adds	r3, r7, r0
 8008fae:	4940      	ldr	r1, [pc, #256]	@ (80090b0 <USB_EPClearStall+0x14c>)
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	18d3      	adds	r3, r2, r3
 8008fbe:	183a      	adds	r2, r7, r0
 8008fc0:	8812      	ldrh	r2, [r2, #0]
 8008fc2:	493c      	ldr	r1, [pc, #240]	@ (80090b4 <USB_EPClearStall+0x150>)
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	b292      	uxth	r2, r2
 8008fc8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	78db      	ldrb	r3, [r3, #3]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d068      	beq.n	80090a4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	18d3      	adds	r3, r2, r3
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	200c      	movs	r0, #12
 8008fe2:	183b      	adds	r3, r7, r0
 8008fe4:	4934      	ldr	r1, [pc, #208]	@ (80090b8 <USB_EPClearStall+0x154>)
 8008fe6:	400a      	ands	r2, r1
 8008fe8:	801a      	strh	r2, [r3, #0]
 8008fea:	183b      	adds	r3, r7, r0
 8008fec:	183a      	adds	r2, r7, r0
 8008fee:	8812      	ldrh	r2, [r2, #0]
 8008ff0:	2120      	movs	r1, #32
 8008ff2:	404a      	eors	r2, r1
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	18d3      	adds	r3, r2, r3
 8009000:	183a      	adds	r2, r7, r0
 8009002:	8812      	ldrh	r2, [r2, #0]
 8009004:	492d      	ldr	r1, [pc, #180]	@ (80090bc <USB_EPClearStall+0x158>)
 8009006:	430a      	orrs	r2, r1
 8009008:	b292      	uxth	r2, r2
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	e04a      	b.n	80090a4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18d2      	adds	r2, r2, r3
 8009018:	2116      	movs	r1, #22
 800901a:	187b      	adds	r3, r7, r1
 800901c:	8812      	ldrh	r2, [r2, #0]
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	187b      	adds	r3, r7, r1
 8009022:	881a      	ldrh	r2, [r3, #0]
 8009024:	2380      	movs	r3, #128	@ 0x80
 8009026:	01db      	lsls	r3, r3, #7
 8009028:	4013      	ands	r3, r2
 800902a:	d016      	beq.n	800905a <USB_EPClearStall+0xf6>
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	18d3      	adds	r3, r2, r3
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29a      	uxth	r2, r3
 800903a:	2014      	movs	r0, #20
 800903c:	183b      	adds	r3, r7, r0
 800903e:	491c      	ldr	r1, [pc, #112]	@ (80090b0 <USB_EPClearStall+0x14c>)
 8009040:	400a      	ands	r2, r1
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	18d3      	adds	r3, r2, r3
 800904e:	183a      	adds	r2, r7, r0
 8009050:	8812      	ldrh	r2, [r2, #0]
 8009052:	491b      	ldr	r1, [pc, #108]	@ (80090c0 <USB_EPClearStall+0x15c>)
 8009054:	430a      	orrs	r2, r1
 8009056:	b292      	uxth	r2, r2
 8009058:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	18d3      	adds	r3, r2, r3
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	b29a      	uxth	r2, r3
 8009068:	2012      	movs	r0, #18
 800906a:	183b      	adds	r3, r7, r0
 800906c:	4915      	ldr	r1, [pc, #84]	@ (80090c4 <USB_EPClearStall+0x160>)
 800906e:	400a      	ands	r2, r1
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	183b      	adds	r3, r7, r0
 8009074:	183a      	adds	r2, r7, r0
 8009076:	8812      	ldrh	r2, [r2, #0]
 8009078:	2180      	movs	r1, #128	@ 0x80
 800907a:	0149      	lsls	r1, r1, #5
 800907c:	404a      	eors	r2, r1
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	183b      	adds	r3, r7, r0
 8009082:	183a      	adds	r2, r7, r0
 8009084:	8812      	ldrh	r2, [r2, #0]
 8009086:	2180      	movs	r1, #128	@ 0x80
 8009088:	0189      	lsls	r1, r1, #6
 800908a:	404a      	eors	r2, r1
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	18d3      	adds	r3, r2, r3
 8009098:	183a      	adds	r2, r7, r0
 800909a:	8812      	ldrh	r2, [r2, #0]
 800909c:	4907      	ldr	r1, [pc, #28]	@ (80090bc <USB_EPClearStall+0x158>)
 800909e:	430a      	orrs	r2, r1
 80090a0:	b292      	uxth	r2, r2
 80090a2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	0018      	movs	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	b006      	add	sp, #24
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	46c0      	nop			@ (mov r8, r8)
 80090b0:	ffff8f8f 	.word	0xffff8f8f
 80090b4:	ffff80c0 	.word	0xffff80c0
 80090b8:	ffff8fbf 	.word	0xffff8fbf
 80090bc:	ffff8080 	.word	0xffff8080
 80090c0:	ffffc080 	.word	0xffffc080
 80090c4:	ffffbf8f 	.word	0xffffbf8f

080090c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	000a      	movs	r2, r1
 80090d2:	1cfb      	adds	r3, r7, #3
 80090d4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80090d6:	1cfb      	adds	r3, r7, #3
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	224c      	movs	r2, #76	@ 0x4c
 80090e2:	2180      	movs	r1, #128	@ 0x80
 80090e4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2258      	movs	r2, #88	@ 0x58
 80090fc:	5a9b      	ldrh	r3, [r3, r2]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	4a05      	ldr	r2, [pc, #20]	@ (8009118 <USB_DevConnect+0x28>)
 8009102:	4313      	orrs	r3, r2
 8009104:	b299      	uxth	r1, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2258      	movs	r2, #88	@ 0x58
 800910a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	0018      	movs	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	b002      	add	sp, #8
 8009114:	bd80      	pop	{r7, pc}
 8009116:	46c0      	nop			@ (mov r8, r8)
 8009118:	ffff8000 	.word	0xffff8000

0800911c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2244      	movs	r2, #68	@ 0x44
 8009128:	5a9b      	ldrh	r3, [r3, r2]
 800912a:	b29b      	uxth	r3, r3
 800912c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	0018      	movs	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	b004      	add	sp, #16
 8009136:	bd80      	pop	{r7, pc}

08009138 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	0019      	movs	r1, r3
 8009144:	1dbb      	adds	r3, r7, #6
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	1d3b      	adds	r3, r7, #4
 800914a:	1c0a      	adds	r2, r1, #0
 800914c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800914e:	1d3b      	adds	r3, r7, #4
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009160:	1dbb      	adds	r3, r7, #6
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	18d3      	adds	r3, r2, r3
 8009168:	2280      	movs	r2, #128	@ 0x80
 800916a:	00d2      	lsls	r2, r2, #3
 800916c:	4694      	mov	ip, r2
 800916e:	4463      	add	r3, ip
 8009170:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
 8009176:	e020      	b.n	80091ba <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	2112      	movs	r1, #18
 800917e:	187b      	adds	r3, r7, r1
 8009180:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	3301      	adds	r3, #1
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	b21a      	sxth	r2, r3
 800918c:	187b      	adds	r3, r7, r1
 800918e:	2000      	movs	r0, #0
 8009190:	5e1b      	ldrsh	r3, [r3, r0]
 8009192:	4313      	orrs	r3, r2
 8009194:	b21a      	sxth	r2, r3
 8009196:	187b      	adds	r3, r7, r1
 8009198:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	187a      	adds	r2, r7, r1
 800919e:	8812      	ldrh	r2, [r2, #0]
 80091a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	3302      	adds	r3, #2
 80091a6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	3301      	adds	r3, #1
 80091ac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	3301      	adds	r3, #1
 80091b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	3b01      	subs	r3, #1
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1db      	bne.n	8009178 <USB_WritePMA+0x40>
  }
}
 80091c0:	46c0      	nop			@ (mov r8, r8)
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	46bd      	mov	sp, r7
 80091c6:	b00a      	add	sp, #40	@ 0x28
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b08a      	sub	sp, #40	@ 0x28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	0019      	movs	r1, r3
 80091d6:	1dbb      	adds	r3, r7, #6
 80091d8:	801a      	strh	r2, [r3, #0]
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	1c0a      	adds	r2, r1, #0
 80091de:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091e0:	1d3b      	adds	r3, r7, #4
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091f2:	1dbb      	adds	r3, r7, #6
 80091f4:	881a      	ldrh	r2, [r3, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	18d3      	adds	r3, r2, r3
 80091fa:	2280      	movs	r2, #128	@ 0x80
 80091fc:	00d2      	lsls	r2, r2, #3
 80091fe:	4694      	mov	ip, r2
 8009200:	4463      	add	r3, ip
 8009202:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
 8009208:	e018      	b.n	800923c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	b29b      	uxth	r3, r3
 8009210:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	3302      	adds	r3, #2
 8009216:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	b2da      	uxtb	r2, r3
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	3301      	adds	r3, #1
 8009224:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	0a1b      	lsrs	r3, r3, #8
 800922a:	b2da      	uxtb	r2, r3
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	3301      	adds	r3, #1
 8009234:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	3b01      	subs	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e3      	bne.n	800920a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009242:	1d3b      	adds	r3, r7, #4
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	2201      	movs	r2, #1
 8009248:	4013      	ands	r3, r2
 800924a:	b29b      	uxth	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	701a      	strb	r2, [r3, #0]
  }
}
 8009260:	46c0      	nop			@ (mov r8, r8)
 8009262:	46bd      	mov	sp, r7
 8009264:	b00a      	add	sp, #40	@ 0x28
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	000a      	movs	r2, r1
 8009272:	1cfb      	adds	r3, r7, #3
 8009274:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009276:	230f      	movs	r3, #15
 8009278:	18fb      	adds	r3, r7, r3
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7c1b      	ldrb	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d116      	bne.n	80092b4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009286:	2380      	movs	r3, #128	@ 0x80
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	2202      	movs	r2, #2
 800928e:	2181      	movs	r1, #129	@ 0x81
 8009290:	f002 f88b 	bl	800b3aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800929a:	2380      	movs	r3, #128	@ 0x80
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	2101      	movs	r1, #1
 80092a4:	f002 f881 	bl	800b3aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	23b6      	movs	r3, #182	@ 0xb6
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	2101      	movs	r1, #1
 80092b0:	50d1      	str	r1, [r2, r3]
 80092b2:	e013      	b.n	80092dc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	2340      	movs	r3, #64	@ 0x40
 80092b8:	2202      	movs	r2, #2
 80092ba:	2181      	movs	r1, #129	@ 0x81
 80092bc:	f002 f875 	bl	800b3aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	2340      	movs	r3, #64	@ 0x40
 80092ca:	2202      	movs	r2, #2
 80092cc:	2101      	movs	r1, #1
 80092ce:	f002 f86c 	bl	800b3aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	23b6      	movs	r3, #182	@ 0xb6
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	2101      	movs	r1, #1
 80092da:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	2308      	movs	r3, #8
 80092e0:	2203      	movs	r2, #3
 80092e2:	2182      	movs	r1, #130	@ 0x82
 80092e4:	f002 f861 	bl	800b3aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092ee:	2387      	movs	r3, #135	@ 0x87
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f002 f9f0 	bl	800b6d8 <USBD_static_malloc>
 80092f8:	0001      	movs	r1, r0
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	23ae      	movs	r3, #174	@ 0xae
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	23ae      	movs	r3, #174	@ 0xae
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	58d3      	ldr	r3, [r2, r3]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800930e:	230f      	movs	r3, #15
 8009310:	18fb      	adds	r3, r7, r3
 8009312:	2201      	movs	r2, #1
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	e02c      	b.n	8009372 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	23ae      	movs	r3, #174	@ 0xae
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	58d3      	ldr	r3, [r2, r3]
 8009320:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	23af      	movs	r3, #175	@ 0xaf
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	58d3      	ldr	r3, [r2, r3]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	2385      	movs	r3, #133	@ 0x85
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	2100      	movs	r1, #0
 8009336:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	2386      	movs	r3, #134	@ 0x86
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	2100      	movs	r1, #0
 8009340:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7c1b      	ldrb	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	2381      	movs	r3, #129	@ 0x81
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	58d2      	ldr	r2, [r2, r3]
 8009352:	2380      	movs	r3, #128	@ 0x80
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	2101      	movs	r1, #1
 800935a:	f002 f970 	bl	800b63e <USBD_LL_PrepareReceive>
 800935e:	e008      	b.n	8009372 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	2381      	movs	r3, #129	@ 0x81
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	58d2      	ldr	r2, [r2, r3]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	2340      	movs	r3, #64	@ 0x40
 800936c:	2101      	movs	r1, #1
 800936e:	f002 f966 	bl	800b63e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009372:	230f      	movs	r3, #15
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	781b      	ldrb	r3, [r3, #0]
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	b004      	add	sp, #16
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	000a      	movs	r2, r1
 800938a:	1cfb      	adds	r3, r7, #3
 800938c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800938e:	230f      	movs	r3, #15
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	2200      	movs	r2, #0
 8009394:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2181      	movs	r1, #129	@ 0x81
 800939a:	0018      	movs	r0, r3
 800939c:	f002 f83c 	bl	800b418 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2101      	movs	r1, #1
 80093aa:	0018      	movs	r0, r3
 80093ac:	f002 f834 	bl	800b418 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	23b6      	movs	r3, #182	@ 0xb6
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	2100      	movs	r1, #0
 80093b8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2182      	movs	r1, #130	@ 0x82
 80093be:	0018      	movs	r0, r3
 80093c0:	f002 f82a 	bl	800b418 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	23ae      	movs	r3, #174	@ 0xae
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	58d3      	ldr	r3, [r2, r3]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	23af      	movs	r3, #175	@ 0xaf
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	58d3      	ldr	r3, [r2, r3]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	23ae      	movs	r3, #174	@ 0xae
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	58d3      	ldr	r3, [r2, r3]
 80093ea:	0018      	movs	r0, r3
 80093ec:	f002 f980 	bl	800b6f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	23ae      	movs	r3, #174	@ 0xae
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	2100      	movs	r1, #0
 80093f8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80093fa:	230f      	movs	r3, #15
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	781b      	ldrb	r3, [r3, #0]
}
 8009400:	0018      	movs	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	b004      	add	sp, #16
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	23ae      	movs	r3, #174	@ 0xae
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	58d3      	ldr	r3, [r2, r3]
 800941a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800941c:	230f      	movs	r3, #15
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009424:	230c      	movs	r3, #12
 8009426:	18fb      	adds	r3, r7, r3
 8009428:	2200      	movs	r2, #0
 800942a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800942c:	2317      	movs	r3, #23
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	001a      	movs	r2, r3
 800943a:	2360      	movs	r3, #96	@ 0x60
 800943c:	4013      	ands	r3, r2
 800943e:	d03d      	beq.n	80094bc <USBD_CDC_Setup+0xb4>
 8009440:	2b20      	cmp	r3, #32
 8009442:	d000      	beq.n	8009446 <USBD_CDC_Setup+0x3e>
 8009444:	e094      	b.n	8009570 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	88db      	ldrh	r3, [r3, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d02b      	beq.n	80094a6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b25b      	sxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	da12      	bge.n	800947e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	23af      	movs	r3, #175	@ 0xaf
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	58d3      	ldr	r3, [r2, r3]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009466:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	88d2      	ldrh	r2, [r2, #6]
 800946c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800946e:	6939      	ldr	r1, [r7, #16]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	88da      	ldrh	r2, [r3, #6]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	0018      	movs	r0, r3
 8009478:	f001 fbaf 	bl	800abda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800947c:	e083      	b.n	8009586 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	7859      	ldrb	r1, [r3, #1]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	88db      	ldrh	r3, [r3, #6]
 800948e:	b2d9      	uxtb	r1, r3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	4a40      	ldr	r2, [pc, #256]	@ (8009594 <USBD_CDC_Setup+0x18c>)
 8009494:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009496:	6939      	ldr	r1, [r7, #16]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	88da      	ldrh	r2, [r3, #6]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	0018      	movs	r0, r3
 80094a0:	f001 fbce 	bl	800ac40 <USBD_CtlPrepareRx>
      break;
 80094a4:	e06f      	b.n	8009586 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	23af      	movs	r3, #175	@ 0xaf
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	58d3      	ldr	r3, [r2, r3]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	7850      	ldrb	r0, [r2, #1]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	4798      	blx	r3
      break;
 80094ba:	e064      	b.n	8009586 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	d037      	beq.n	8009534 <USBD_CDC_Setup+0x12c>
 80094c4:	dc47      	bgt.n	8009556 <USBD_CDC_Setup+0x14e>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <USBD_CDC_Setup+0xc8>
 80094ca:	2b0a      	cmp	r3, #10
 80094cc:	d019      	beq.n	8009502 <USBD_CDC_Setup+0xfa>
 80094ce:	e042      	b.n	8009556 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	23a7      	movs	r3, #167	@ 0xa7
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	5cd3      	ldrb	r3, [r2, r3]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d107      	bne.n	80094ec <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094dc:	230c      	movs	r3, #12
 80094de:	18f9      	adds	r1, r7, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	0018      	movs	r0, r3
 80094e6:	f001 fb78 	bl	800abda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ea:	e040      	b.n	800956e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	0011      	movs	r1, r2
 80094f2:	0018      	movs	r0, r3
 80094f4:	f001 faf3 	bl	800aade <USBD_CtlError>
            ret = USBD_FAIL;
 80094f8:	2317      	movs	r3, #23
 80094fa:	18fb      	adds	r3, r7, r3
 80094fc:	2202      	movs	r2, #2
 80094fe:	701a      	strb	r2, [r3, #0]
          break;
 8009500:	e035      	b.n	800956e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	23a7      	movs	r3, #167	@ 0xa7
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	5cd3      	ldrb	r3, [r2, r3]
 800950a:	2b03      	cmp	r3, #3
 800950c:	d107      	bne.n	800951e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800950e:	230f      	movs	r3, #15
 8009510:	18f9      	adds	r1, r7, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	0018      	movs	r0, r3
 8009518:	f001 fb5f 	bl	800abda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800951c:	e027      	b.n	800956e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	0011      	movs	r1, r2
 8009524:	0018      	movs	r0, r3
 8009526:	f001 fada 	bl	800aade <USBD_CtlError>
            ret = USBD_FAIL;
 800952a:	2317      	movs	r3, #23
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
          break;
 8009532:	e01c      	b.n	800956e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	23a7      	movs	r3, #167	@ 0xa7
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	5cd3      	ldrb	r3, [r2, r3]
 800953c:	2b03      	cmp	r3, #3
 800953e:	d015      	beq.n	800956c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	0011      	movs	r1, r2
 8009546:	0018      	movs	r0, r3
 8009548:	f001 fac9 	bl	800aade <USBD_CtlError>
            ret = USBD_FAIL;
 800954c:	2317      	movs	r3, #23
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	2202      	movs	r2, #2
 8009552:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009554:	e00a      	b.n	800956c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	0011      	movs	r1, r2
 800955c:	0018      	movs	r0, r3
 800955e:	f001 fabe 	bl	800aade <USBD_CtlError>
          ret = USBD_FAIL;
 8009562:	2317      	movs	r3, #23
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	2202      	movs	r2, #2
 8009568:	701a      	strb	r2, [r3, #0]
          break;
 800956a:	e000      	b.n	800956e <USBD_CDC_Setup+0x166>
          break;
 800956c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800956e:	e00a      	b.n	8009586 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	0011      	movs	r1, r2
 8009576:	0018      	movs	r0, r3
 8009578:	f001 fab1 	bl	800aade <USBD_CtlError>
      ret = USBD_FAIL;
 800957c:	2317      	movs	r3, #23
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	2202      	movs	r2, #2
 8009582:	701a      	strb	r2, [r3, #0]
      break;
 8009584:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009586:	2317      	movs	r3, #23
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	781b      	ldrb	r3, [r3, #0]
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b006      	add	sp, #24
 8009592:	bd80      	pop	{r7, pc}
 8009594:	00000201 	.word	0x00000201

08009598 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	000a      	movs	r2, r1
 80095a2:	1cfb      	adds	r3, r7, #3
 80095a4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	23ae      	movs	r3, #174	@ 0xae
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	58d3      	ldr	r3, [r2, r3]
 80095ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	23b0      	movs	r3, #176	@ 0xb0
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	58d3      	ldr	r3, [r2, r3]
 80095b8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	23ae      	movs	r3, #174	@ 0xae
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	58d3      	ldr	r3, [r2, r3]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d03e      	beq.n	8009644 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095c6:	1cfb      	adds	r3, r7, #3
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	0013      	movs	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	189b      	adds	r3, r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	18cb      	adds	r3, r1, r3
 80095d6:	331c      	adds	r3, #28
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d02b      	beq.n	8009636 <USBD_CDC_DataIn+0x9e>
 80095de:	1cfb      	adds	r3, r7, #3
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	0013      	movs	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	189b      	adds	r3, r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	18cb      	adds	r3, r1, r3
 80095ee:	331c      	adds	r3, #28
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	1cfb      	adds	r3, r7, #3
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	0013      	movs	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	189b      	adds	r3, r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	18cb      	adds	r3, r1, r3
 8009602:	3320      	adds	r3, #32
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	0019      	movs	r1, r3
 8009608:	f7f6 fe04 	bl	8000214 <__aeabi_uidivmod>
 800960c:	1e0b      	subs	r3, r1, #0
 800960e:	d112      	bne.n	8009636 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009610:	1cfb      	adds	r3, r7, #3
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	0013      	movs	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	189b      	adds	r3, r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	18cb      	adds	r3, r1, r3
 8009620:	331c      	adds	r3, #28
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009626:	1cfb      	adds	r3, r7, #3
 8009628:	7819      	ldrb	r1, [r3, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	f001 ffce 	bl	800b5d0 <USBD_LL_Transmit>
 8009634:	e004      	b.n	8009640 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	2385      	movs	r3, #133	@ 0x85
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	2100      	movs	r1, #0
 800963e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e000      	b.n	8009646 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009644:	2302      	movs	r3, #2
  }
}
 8009646:	0018      	movs	r0, r3
 8009648:	46bd      	mov	sp, r7
 800964a:	b004      	add	sp, #16
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	000a      	movs	r2, r1
 8009658:	1cfb      	adds	r3, r7, #3
 800965a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	23ae      	movs	r3, #174	@ 0xae
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	58d3      	ldr	r3, [r2, r3]
 8009664:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009666:	1cfb      	adds	r3, r7, #3
 8009668:	781a      	ldrb	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	0011      	movs	r1, r2
 800966e:	0018      	movs	r0, r3
 8009670:	f002 f81c 	bl	800b6ac <USBD_LL_GetRxDataSize>
 8009674:	0001      	movs	r1, r0
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	2383      	movs	r3, #131	@ 0x83
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	23ae      	movs	r3, #174	@ 0xae
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	58d3      	ldr	r3, [r2, r3]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	23af      	movs	r3, #175	@ 0xaf
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	58d3      	ldr	r3, [r2, r3]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	68f9      	ldr	r1, [r7, #12]
 8009696:	2381      	movs	r3, #129	@ 0x81
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	58c8      	ldr	r0, [r1, r3]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2183      	movs	r1, #131	@ 0x83
 80096a0:	0089      	lsls	r1, r1, #2
 80096a2:	468c      	mov	ip, r1
 80096a4:	4463      	add	r3, ip
 80096a6:	0019      	movs	r1, r3
 80096a8:	4790      	blx	r2

    return USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	0018      	movs	r0, r3
 80096b2:	46bd      	mov	sp, r7
 80096b4:	b004      	add	sp, #16
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096b8:	b590      	push	{r4, r7, lr}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	23ae      	movs	r3, #174	@ 0xae
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	58d3      	ldr	r3, [r2, r3]
 80096c8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	23af      	movs	r3, #175	@ 0xaf
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	58d3      	ldr	r3, [r2, r3]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d018      	beq.n	8009708 <USBD_CDC_EP0_RxReady+0x50>
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	2380      	movs	r3, #128	@ 0x80
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	5cd3      	ldrb	r3, [r2, r3]
 80096de:	2bff      	cmp	r3, #255	@ 0xff
 80096e0:	d012      	beq.n	8009708 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	23af      	movs	r3, #175	@ 0xaf
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	58d3      	ldr	r3, [r2, r3]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	68f9      	ldr	r1, [r7, #12]
 80096ee:	2280      	movs	r2, #128	@ 0x80
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80096f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4c06      	ldr	r4, [pc, #24]	@ (8009714 <USBD_CDC_EP0_RxReady+0x5c>)
 80096fa:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	2380      	movs	r3, #128	@ 0x80
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	21ff      	movs	r1, #255	@ 0xff
 8009706:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	0018      	movs	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	b005      	add	sp, #20
 8009710:	bd90      	pop	{r4, r7, pc}
 8009712:	46c0      	nop			@ (mov r8, r8)
 8009714:	00000201 	.word	0x00000201

08009718 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2243      	movs	r2, #67	@ 0x43
 8009724:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009726:	4b02      	ldr	r3, [pc, #8]	@ (8009730 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009728:	0018      	movs	r0, r3
 800972a:	46bd      	mov	sp, r7
 800972c:	b002      	add	sp, #8
 800972e:	bd80      	pop	{r7, pc}
 8009730:	200000d4 	.word	0x200000d4

08009734 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2243      	movs	r2, #67	@ 0x43
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009742:	4b02      	ldr	r3, [pc, #8]	@ (800974c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000090 	.word	0x20000090

08009750 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2243      	movs	r2, #67	@ 0x43
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800975e:	4b02      	ldr	r3, [pc, #8]	@ (8009768 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009760:	0018      	movs	r0, r3
 8009762:	46bd      	mov	sp, r7
 8009764:	b002      	add	sp, #8
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000118 	.word	0x20000118

0800976c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	220a      	movs	r2, #10
 8009778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800977a:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800977c:	0018      	movs	r0, r3
 800977e:	46bd      	mov	sp, r7
 8009780:	b002      	add	sp, #8
 8009782:	bd80      	pop	{r7, pc}
 8009784:	2000004c 	.word	0x2000004c

08009788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009792:	200f      	movs	r0, #15
 8009794:	183b      	adds	r3, r7, r0
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	23af      	movs	r3, #175	@ 0xaf
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80097aa:	183b      	adds	r3, r7, r0
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80097b0:	230f      	movs	r3, #15
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	781b      	ldrb	r3, [r3, #0]
}
 80097b6:	0018      	movs	r0, r3
 80097b8:	46bd      	mov	sp, r7
 80097ba:	b004      	add	sp, #16
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b086      	sub	sp, #24
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	1dbb      	adds	r3, r7, #6
 80097ca:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	23ae      	movs	r3, #174	@ 0xae
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	58d3      	ldr	r3, [r2, r3]
 80097d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	2382      	movs	r3, #130	@ 0x82
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	68b9      	ldr	r1, [r7, #8]
 80097de:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80097e0:	1dbb      	adds	r3, r7, #6
 80097e2:	8819      	ldrh	r1, [r3, #0]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	2384      	movs	r3, #132	@ 0x84
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	0018      	movs	r0, r3
 80097f0:	46bd      	mov	sp, r7
 80097f2:	b006      	add	sp, #24
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	23ae      	movs	r3, #174	@ 0xae
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	58d3      	ldr	r3, [r2, r3]
 8009808:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	2381      	movs	r3, #129	@ 0x81
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	0018      	movs	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	b004      	add	sp, #16
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	23ae      	movs	r3, #174	@ 0xae
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	58d3      	ldr	r3, [r2, r3]
 800982e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	23ae      	movs	r3, #174	@ 0xae
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	58d3      	ldr	r3, [r2, r3]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d022      	beq.n	8009882 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	2385      	movs	r3, #133	@ 0x85
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	58d3      	ldr	r3, [r2, r3]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11a      	bne.n	800987e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	2385      	movs	r3, #133	@ 0x85
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	2101      	movs	r1, #1
 8009850:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	2384      	movs	r3, #132	@ 0x84
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	58d2      	ldr	r2, [r2, r3]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	2382      	movs	r3, #130	@ 0x82
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	2384      	movs	r3, #132	@ 0x84
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800986e:	b29b      	uxth	r3, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	000a      	movs	r2, r1
 8009874:	2181      	movs	r1, #129	@ 0x81
 8009876:	f001 feab 	bl	800b5d0 <USBD_LL_Transmit>

      return USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	e002      	b.n	8009884 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009882:	2302      	movs	r3, #2
  }
}
 8009884:	0018      	movs	r0, r3
 8009886:	46bd      	mov	sp, r7
 8009888:	b004      	add	sp, #16
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	23ae      	movs	r3, #174	@ 0xae
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	58d3      	ldr	r3, [r2, r3]
 800989c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	23ae      	movs	r3, #174	@ 0xae
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	58d3      	ldr	r3, [r2, r3]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d019      	beq.n	80098de <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7c1b      	ldrb	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	2381      	movs	r3, #129	@ 0x81
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	58d2      	ldr	r2, [r2, r3]
 80098ba:	2380      	movs	r3, #128	@ 0x80
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	2101      	movs	r1, #1
 80098c2:	f001 febc 	bl	800b63e <USBD_LL_PrepareReceive>
 80098c6:	e008      	b.n	80098da <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	2381      	movs	r3, #129	@ 0x81
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	58d2      	ldr	r2, [r2, r3]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	2101      	movs	r1, #1
 80098d6:	f001 feb2 	bl	800b63e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b004      	add	sp, #16
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	1dfb      	adds	r3, r7, #7
 80098f4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098fc:	2302      	movs	r3, #2
 80098fe:	e020      	b.n	8009942 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	23ad      	movs	r3, #173	@ 0xad
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	58d3      	ldr	r3, [r2, r3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	23ad      	movs	r3, #173	@ 0xad
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	2100      	movs	r1, #0
 8009914:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	23ac      	movs	r3, #172	@ 0xac
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	23a7      	movs	r3, #167	@ 0xa7
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	2101      	movs	r1, #1
 800992e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	1dfa      	adds	r2, r7, #7
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	0018      	movs	r0, r3
 800993c:	f001 fcac 	bl	800b298 <USBD_LL_Init>

  return USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	0018      	movs	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	b004      	add	sp, #16
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009954:	200f      	movs	r0, #15
 8009956:	183b      	adds	r3, r7, r0
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d008      	beq.n	8009974 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	23ad      	movs	r3, #173	@ 0xad
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800996c:	183b      	adds	r3, r7, r0
 800996e:	2200      	movs	r2, #0
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e003      	b.n	800997c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009974:	230f      	movs	r3, #15
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	2202      	movs	r2, #2
 800997a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800997c:	230f      	movs	r3, #15
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	781b      	ldrb	r3, [r3, #0]
}
 8009982:	0018      	movs	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	b004      	add	sp, #16
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	0018      	movs	r0, r3
 8009996:	f001 fce3 	bl	800b360 <USBD_LL_Start>

  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	b002      	add	sp, #8
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b002      	add	sp, #8
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099b6:	b590      	push	{r4, r7, lr}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	000a      	movs	r2, r1
 80099c0:	1cfb      	adds	r3, r7, #3
 80099c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80099c4:	240f      	movs	r4, #15
 80099c6:	193b      	adds	r3, r7, r4
 80099c8:	2202      	movs	r2, #2
 80099ca:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	23ad      	movs	r3, #173	@ 0xad
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	58d3      	ldr	r3, [r2, r3]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00e      	beq.n	80099f6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	23ad      	movs	r3, #173	@ 0xad
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	58d3      	ldr	r3, [r2, r3]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	1cfa      	adds	r2, r7, #3
 80099e4:	7811      	ldrb	r1, [r2, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	0010      	movs	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	1e03      	subs	r3, r0, #0
 80099ee:	d102      	bne.n	80099f6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80099f0:	193b      	adds	r3, r7, r4
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80099f6:	230f      	movs	r3, #15
 80099f8:	18fb      	adds	r3, r7, r3
 80099fa:	781b      	ldrb	r3, [r3, #0]
}
 80099fc:	0018      	movs	r0, r3
 80099fe:	46bd      	mov	sp, r7
 8009a00:	b005      	add	sp, #20
 8009a02:	bd90      	pop	{r4, r7, pc}

08009a04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	000a      	movs	r2, r1
 8009a0e:	1cfb      	adds	r3, r7, #3
 8009a10:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	23ad      	movs	r3, #173	@ 0xad
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	58d3      	ldr	r3, [r2, r3]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1cfa      	adds	r2, r7, #3
 8009a1e:	7811      	ldrb	r1, [r2, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	0010      	movs	r0, r2
 8009a24:	4798      	blx	r3

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	0018      	movs	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b002      	add	sp, #8
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	22aa      	movs	r2, #170	@ 0xaa
 8009a3e:	0092      	lsls	r2, r2, #2
 8009a40:	4694      	mov	ip, r2
 8009a42:	4463      	add	r3, ip
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	0011      	movs	r1, r2
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f001 f810 	bl	800aa6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	23a5      	movs	r3, #165	@ 0xa5
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	2101      	movs	r1, #1
 8009a56:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a23      	ldr	r2, [pc, #140]	@ (8009ae8 <USBD_LL_SetupStage+0xb8>)
 8009a5c:	5a9b      	ldrh	r3, [r3, r2]
 8009a5e:	0019      	movs	r1, r3
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	23a6      	movs	r3, #166	@ 0xa6
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	23aa      	movs	r3, #170	@ 0xaa
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	5cd3      	ldrb	r3, [r2, r3]
 8009a70:	001a      	movs	r2, r3
 8009a72:	231f      	movs	r3, #31
 8009a74:	4013      	ands	r3, r2
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d019      	beq.n	8009aae <USBD_LL_SetupStage+0x7e>
 8009a7a:	d822      	bhi.n	8009ac2 <USBD_LL_SetupStage+0x92>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <USBD_LL_SetupStage+0x56>
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d00a      	beq.n	8009a9a <USBD_LL_SetupStage+0x6a>
 8009a84:	e01d      	b.n	8009ac2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	22aa      	movs	r2, #170	@ 0xaa
 8009a8a:	0092      	lsls	r2, r2, #2
 8009a8c:	189a      	adds	r2, r3, r2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0011      	movs	r1, r2
 8009a92:	0018      	movs	r0, r3
 8009a94:	f000 fa10 	bl	8009eb8 <USBD_StdDevReq>
      break;
 8009a98:	e020      	b.n	8009adc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	22aa      	movs	r2, #170	@ 0xaa
 8009a9e:	0092      	lsls	r2, r2, #2
 8009aa0:	189a      	adds	r2, r3, r2
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	0011      	movs	r1, r2
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 fa78 	bl	8009f9c <USBD_StdItfReq>
      break;
 8009aac:	e016      	b.n	8009adc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	22aa      	movs	r2, #170	@ 0xaa
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	189a      	adds	r2, r3, r2
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	0011      	movs	r1, r2
 8009aba:	0018      	movs	r0, r3
 8009abc:	f000 fac5 	bl	800a04a <USBD_StdEPReq>
      break;
 8009ac0:	e00c      	b.n	8009adc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	23aa      	movs	r3, #170	@ 0xaa
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	5cd3      	ldrb	r3, [r2, r3]
 8009aca:	227f      	movs	r2, #127	@ 0x7f
 8009acc:	4393      	bics	r3, r2
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	0011      	movs	r1, r2
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f001 fcca 	bl	800b46e <USBD_LL_StallEP>
      break;
 8009ada:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	0018      	movs	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b002      	add	sp, #8
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	46c0      	nop			@ (mov r8, r8)
 8009ae8:	000002ae 	.word	0x000002ae

08009aec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	200b      	movs	r0, #11
 8009af8:	183b      	adds	r3, r7, r0
 8009afa:	1c0a      	adds	r2, r1, #0
 8009afc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009afe:	183b      	adds	r3, r7, r0
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d154      	bne.n	8009bb0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3355      	adds	r3, #85	@ 0x55
 8009b0a:	33ff      	adds	r3, #255	@ 0xff
 8009b0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	23a5      	movs	r3, #165	@ 0xa5
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	58d3      	ldr	r3, [r2, r3]
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d139      	bne.n	8009b8e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d919      	bls.n	8009b5a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d203      	bcs.n	8009b48 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	e002      	b.n	8009b4e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	001a      	movs	r2, r3
 8009b54:	f001 f898 	bl	800ac88 <USBD_CtlContinueRx>
 8009b58:	e045      	b.n	8009be6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	23ad      	movs	r3, #173	@ 0xad
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	58d3      	ldr	r3, [r2, r3]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00d      	beq.n	8009b84 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	23a7      	movs	r3, #167	@ 0xa7
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d107      	bne.n	8009b84 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	23ad      	movs	r3, #173	@ 0xad
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	58d3      	ldr	r3, [r2, r3]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	0010      	movs	r0, r2
 8009b82:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	0018      	movs	r0, r3
 8009b88:	f001 f891 	bl	800acae <USBD_CtlSendStatus>
 8009b8c:	e02b      	b.n	8009be6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	23a5      	movs	r3, #165	@ 0xa5
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	58d3      	ldr	r3, [r2, r3]
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	d125      	bne.n	8009be6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	23a5      	movs	r3, #165	@ 0xa5
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f001 fc60 	bl	800b46e <USBD_LL_StallEP>
 8009bae:	e01a      	b.n	8009be6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	23ad      	movs	r3, #173	@ 0xad
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	58d3      	ldr	r3, [r2, r3]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	23a7      	movs	r3, #167	@ 0xa7
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d10b      	bne.n	8009be2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	23ad      	movs	r3, #173	@ 0xad
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	58d3      	ldr	r3, [r2, r3]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	220b      	movs	r2, #11
 8009bd6:	18ba      	adds	r2, r7, r2
 8009bd8:	7811      	ldrb	r1, [r2, #0]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	0010      	movs	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	e001      	b.n	8009be6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009be2:	2302      	movs	r3, #2
 8009be4:	e000      	b.n	8009be8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	0018      	movs	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b006      	add	sp, #24
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	200b      	movs	r0, #11
 8009bfc:	183b      	adds	r3, r7, r0
 8009bfe:	1c0a      	adds	r2, r1, #0
 8009c00:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c02:	183b      	adds	r3, r7, r0
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d000      	beq.n	8009c0c <USBD_LL_DataInStage+0x1c>
 8009c0a:	e08e      	b.n	8009d2a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	23a5      	movs	r3, #165	@ 0xa5
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	58d3      	ldr	r3, [r2, r3]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d164      	bne.n	8009ce8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d915      	bls.n	8009c56 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	0018      	movs	r0, r3
 8009c44:	f000 ffe9 	bl	800ac1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f001 fcf5 	bl	800b63e <USBD_LL_PrepareReceive>
 8009c54:	e059      	b.n	8009d0a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	689a      	ldr	r2, [r3, #8]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	0019      	movs	r1, r3
 8009c60:	0010      	movs	r0, r2
 8009c62:	f7f6 fad7 	bl	8000214 <__aeabi_uidivmod>
 8009c66:	1e0b      	subs	r3, r1, #0
 8009c68:	d11f      	bne.n	8009caa <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d319      	bcc.n	8009caa <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	23a6      	movs	r3, #166	@ 0xa6
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d211      	bcs.n	8009caa <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	f000 ffc4 	bl	800ac1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	23a6      	movs	r3, #166	@ 0xa6
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	2100      	movs	r1, #0
 8009c9a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	f001 fccb 	bl	800b63e <USBD_LL_PrepareReceive>
 8009ca8:	e02f      	b.n	8009d0a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	23ad      	movs	r3, #173	@ 0xad
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	58d3      	ldr	r3, [r2, r3]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00d      	beq.n	8009cd4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	23a7      	movs	r3, #167	@ 0xa7
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d107      	bne.n	8009cd4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	23ad      	movs	r3, #173	@ 0xad
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	58d3      	ldr	r3, [r2, r3]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	0010      	movs	r0, r2
 8009cd2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2180      	movs	r1, #128	@ 0x80
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f001 fbc8 	bl	800b46e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f000 fff8 	bl	800acd6 <USBD_CtlReceiveStatus>
 8009ce6:	e010      	b.n	8009d0a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	23a5      	movs	r3, #165	@ 0xa5
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	58d3      	ldr	r3, [r2, r3]
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d005      	beq.n	8009d00 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	23a5      	movs	r3, #165	@ 0xa5
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2180      	movs	r1, #128	@ 0x80
 8009d04:	0018      	movs	r0, r3
 8009d06:	f001 fbb2 	bl	800b46e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	23a8      	movs	r3, #168	@ 0xa8
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	5cd3      	ldrb	r3, [r2, r3]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d124      	bne.n	8009d60 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f7ff fe43 	bl	80099a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	23a8      	movs	r3, #168	@ 0xa8
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	2100      	movs	r1, #0
 8009d26:	54d1      	strb	r1, [r2, r3]
 8009d28:	e01a      	b.n	8009d60 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	23ad      	movs	r3, #173	@ 0xad
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	58d3      	ldr	r3, [r2, r3]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d011      	beq.n	8009d5c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	23a7      	movs	r3, #167	@ 0xa7
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d10b      	bne.n	8009d5c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	23ad      	movs	r3, #173	@ 0xad
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	58d3      	ldr	r3, [r2, r3]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	220b      	movs	r2, #11
 8009d50:	18ba      	adds	r2, r7, r2
 8009d52:	7811      	ldrb	r1, [r2, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	0010      	movs	r0, r2
 8009d58:	4798      	blx	r3
 8009d5a:	e001      	b.n	8009d60 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e000      	b.n	8009d62 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b006      	add	sp, #24
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	2340      	movs	r3, #64	@ 0x40
 8009d76:	2200      	movs	r2, #0
 8009d78:	2100      	movs	r1, #0
 8009d7a:	f001 fb16 	bl	800b3aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	23ac      	movs	r3, #172	@ 0xac
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	2101      	movs	r1, #1
 8009d86:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	23b2      	movs	r3, #178	@ 0xb2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	2140      	movs	r1, #64	@ 0x40
 8009d90:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	2340      	movs	r3, #64	@ 0x40
 8009d96:	2200      	movs	r2, #0
 8009d98:	2180      	movs	r1, #128	@ 0x80
 8009d9a:	f001 fb06 	bl	800b3aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2240      	movs	r2, #64	@ 0x40
 8009da8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	23a7      	movs	r3, #167	@ 0xa7
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	2101      	movs	r1, #1
 8009db2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	23a5      	movs	r3, #165	@ 0xa5
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	2100      	movs	r1, #0
 8009dbc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	23a9      	movs	r3, #169	@ 0xa9
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	2100      	movs	r1, #0
 8009dcc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	23ae      	movs	r3, #174	@ 0xae
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	58d3      	ldr	r3, [r2, r3]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	23ad      	movs	r3, #173	@ 0xad
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	58d3      	ldr	r3, [r2, r3]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	b2d9      	uxtb	r1, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	0018      	movs	r0, r3
 8009dee:	4790      	blx	r2
  }

  return USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	0018      	movs	r0, r3
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b002      	add	sp, #8
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	000a      	movs	r2, r1
 8009e04:	1cfb      	adds	r3, r7, #3
 8009e06:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	1cfa      	adds	r2, r7, #3
 8009e0c:	7812      	ldrb	r2, [r2, #0]
 8009e0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b002      	add	sp, #8
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	23a7      	movs	r3, #167	@ 0xa7
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	5cd1      	ldrb	r1, [r2, r3]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a06      	ldr	r2, [pc, #24]	@ (8009e48 <USBD_LL_Suspend+0x2c>)
 8009e30:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	23a7      	movs	r3, #167	@ 0xa7
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	2104      	movs	r1, #4
 8009e3a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b002      	add	sp, #8
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	46c0      	nop			@ (mov r8, r8)
 8009e48:	0000029d 	.word	0x0000029d

08009e4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	23a7      	movs	r3, #167	@ 0xa7
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	5cd3      	ldrb	r3, [r2, r3]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d106      	bne.n	8009e6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a05      	ldr	r2, [pc, #20]	@ (8009e78 <USBD_LL_Resume+0x2c>)
 8009e64:	5c99      	ldrb	r1, [r3, r2]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	23a7      	movs	r3, #167	@ 0xa7
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b002      	add	sp, #8
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	0000029d 	.word	0x0000029d

08009e7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	23a7      	movs	r3, #167	@ 0xa7
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	5cd3      	ldrb	r3, [r2, r3]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d10e      	bne.n	8009eae <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	23ad      	movs	r3, #173	@ 0xad
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	58d3      	ldr	r3, [r2, r3]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	23ad      	movs	r3, #173	@ 0xad
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	58d3      	ldr	r3, [r2, r3]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	0010      	movs	r0, r2
 8009eac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec2:	230f      	movs	r3, #15
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	001a      	movs	r2, r3
 8009ed0:	2360      	movs	r3, #96	@ 0x60
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	2b40      	cmp	r3, #64	@ 0x40
 8009ed6:	d004      	beq.n	8009ee2 <USBD_StdDevReq+0x2a>
 8009ed8:	d84f      	bhi.n	8009f7a <USBD_StdDevReq+0xc2>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <USBD_StdDevReq+0x3e>
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d14b      	bne.n	8009f7a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	23ad      	movs	r3, #173	@ 0xad
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	58d3      	ldr	r3, [r2, r3]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	0010      	movs	r0, r2
 8009ef2:	4798      	blx	r3
      break;
 8009ef4:	e048      	b.n	8009f88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b09      	cmp	r3, #9
 8009efc:	d835      	bhi.n	8009f6a <USBD_StdDevReq+0xb2>
 8009efe:	009a      	lsls	r2, r3, #2
 8009f00:	4b25      	ldr	r3, [pc, #148]	@ (8009f98 <USBD_StdDevReq+0xe0>)
 8009f02:	18d3      	adds	r3, r2, r3
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	0011      	movs	r1, r2
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f000 fa52 	bl	800a3b8 <USBD_GetDescriptor>
          break;
 8009f14:	e030      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	0011      	movs	r1, r2
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f000 fbfd 	bl	800a71c <USBD_SetAddress>
          break;
 8009f22:	e029      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	0011      	movs	r1, r2
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	f000 fc4a 	bl	800a7c4 <USBD_SetConfig>
          break;
 8009f30:	e022      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	0011      	movs	r1, r2
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 fce7 	bl	800a90c <USBD_GetConfig>
          break;
 8009f3e:	e01b      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0011      	movs	r1, r2
 8009f46:	0018      	movs	r0, r3
 8009f48:	f000 fd1b 	bl	800a982 <USBD_GetStatus>
          break;
 8009f4c:	e014      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	0011      	movs	r1, r2
 8009f54:	0018      	movs	r0, r3
 8009f56:	f000 fd4e 	bl	800a9f6 <USBD_SetFeature>
          break;
 8009f5a:	e00d      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	0011      	movs	r1, r2
 8009f62:	0018      	movs	r0, r3
 8009f64:	f000 fd5d 	bl	800aa22 <USBD_ClrFeature>
          break;
 8009f68:	e006      	b.n	8009f78 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0011      	movs	r1, r2
 8009f70:	0018      	movs	r0, r3
 8009f72:	f000 fdb4 	bl	800aade <USBD_CtlError>
          break;
 8009f76:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009f78:	e006      	b.n	8009f88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	0011      	movs	r1, r2
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 fdac 	bl	800aade <USBD_CtlError>
      break;
 8009f86:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009f88:	230f      	movs	r3, #15
 8009f8a:	18fb      	adds	r3, r7, r3
 8009f8c:	781b      	ldrb	r3, [r3, #0]
}
 8009f8e:	0018      	movs	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b004      	add	sp, #16
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	0800cc90 	.word	0x0800cc90

08009f9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fa6:	230f      	movs	r3, #15
 8009fa8:	18fb      	adds	r3, r7, r3
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	2360      	movs	r3, #96	@ 0x60
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	2b40      	cmp	r3, #64	@ 0x40
 8009fba:	d004      	beq.n	8009fc6 <USBD_StdItfReq+0x2a>
 8009fbc:	d839      	bhi.n	800a032 <USBD_StdItfReq+0x96>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <USBD_StdItfReq+0x2a>
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d135      	bne.n	800a032 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	23a7      	movs	r3, #167	@ 0xa7
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	5cd3      	ldrb	r3, [r2, r3]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d825      	bhi.n	800a020 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	889b      	ldrh	r3, [r3, #4]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d819      	bhi.n	800a012 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	23ad      	movs	r3, #173	@ 0xad
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	58d3      	ldr	r3, [r2, r3]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	250f      	movs	r5, #15
 8009fea:	197c      	adds	r4, r7, r5
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	0010      	movs	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	0003      	movs	r3, r0
 8009ff6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	88db      	ldrh	r3, [r3, #6]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d116      	bne.n	800a02e <USBD_StdItfReq+0x92>
 800a000:	197b      	adds	r3, r7, r5
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d112      	bne.n	800a02e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	0018      	movs	r0, r3
 800a00c:	f000 fe4f 	bl	800acae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a010:	e00d      	b.n	800a02e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	0011      	movs	r1, r2
 800a018:	0018      	movs	r0, r3
 800a01a:	f000 fd60 	bl	800aade <USBD_CtlError>
          break;
 800a01e:	e006      	b.n	800a02e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	0011      	movs	r1, r2
 800a026:	0018      	movs	r0, r3
 800a028:	f000 fd59 	bl	800aade <USBD_CtlError>
          break;
 800a02c:	e000      	b.n	800a030 <USBD_StdItfReq+0x94>
          break;
 800a02e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a030:	e006      	b.n	800a040 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	0011      	movs	r1, r2
 800a038:	0018      	movs	r0, r3
 800a03a:	f000 fd50 	bl	800aade <USBD_CtlError>
      break;
 800a03e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b004      	add	sp, #16
 800a048:	bdb0      	pop	{r4, r5, r7, pc}

0800a04a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a04a:	b5b0      	push	{r4, r5, r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a054:	230f      	movs	r3, #15
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	889a      	ldrh	r2, [r3, #4]
 800a060:	230e      	movs	r3, #14
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	001a      	movs	r2, r3
 800a06c:	2360      	movs	r3, #96	@ 0x60
 800a06e:	4013      	ands	r3, r2
 800a070:	2b40      	cmp	r3, #64	@ 0x40
 800a072:	d006      	beq.n	800a082 <USBD_StdEPReq+0x38>
 800a074:	d900      	bls.n	800a078 <USBD_StdEPReq+0x2e>
 800a076:	e190      	b.n	800a39a <USBD_StdEPReq+0x350>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00c      	beq.n	800a096 <USBD_StdEPReq+0x4c>
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d000      	beq.n	800a082 <USBD_StdEPReq+0x38>
 800a080:	e18b      	b.n	800a39a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	23ad      	movs	r3, #173	@ 0xad
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	58d3      	ldr	r3, [r2, r3]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	0010      	movs	r0, r2
 800a092:	4798      	blx	r3
      break;
 800a094:	e188      	b.n	800a3a8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	001a      	movs	r2, r3
 800a09c:	2360      	movs	r3, #96	@ 0x60
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d10f      	bne.n	800a0c4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	23ad      	movs	r3, #173	@ 0xad
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	58d3      	ldr	r3, [r2, r3]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	250f      	movs	r5, #15
 800a0b0:	197c      	adds	r4, r7, r5
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	0010      	movs	r0, r2
 800a0b8:	4798      	blx	r3
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	7023      	strb	r3, [r4, #0]

        return ret;
 800a0be:	197b      	adds	r3, r7, r5
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	e174      	b.n	800a3ae <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d007      	beq.n	800a0dc <USBD_StdEPReq+0x92>
 800a0cc:	dd00      	ble.n	800a0d0 <USBD_StdEPReq+0x86>
 800a0ce:	e15c      	b.n	800a38a <USBD_StdEPReq+0x340>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d100      	bne.n	800a0d6 <USBD_StdEPReq+0x8c>
 800a0d4:	e092      	b.n	800a1fc <USBD_StdEPReq+0x1b2>
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d04b      	beq.n	800a172 <USBD_StdEPReq+0x128>
 800a0da:	e156      	b.n	800a38a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	23a7      	movs	r3, #167	@ 0xa7
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	5cd3      	ldrb	r3, [r2, r3]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d002      	beq.n	800a0ee <USBD_StdEPReq+0xa4>
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d01d      	beq.n	800a128 <USBD_StdEPReq+0xde>
 800a0ec:	e039      	b.n	800a162 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ee:	220e      	movs	r2, #14
 800a0f0:	18bb      	adds	r3, r7, r2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d010      	beq.n	800a11a <USBD_StdEPReq+0xd0>
 800a0f8:	18bb      	adds	r3, r7, r2
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2b80      	cmp	r3, #128	@ 0x80
 800a0fe:	d00c      	beq.n	800a11a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a100:	18bb      	adds	r3, r7, r2
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	0011      	movs	r1, r2
 800a108:	0018      	movs	r0, r3
 800a10a:	f001 f9b0 	bl	800b46e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2180      	movs	r1, #128	@ 0x80
 800a112:	0018      	movs	r0, r3
 800a114:	f001 f9ab 	bl	800b46e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a118:	e02a      	b.n	800a170 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	0011      	movs	r1, r2
 800a120:	0018      	movs	r0, r3
 800a122:	f000 fcdc 	bl	800aade <USBD_CtlError>
              break;
 800a126:	e023      	b.n	800a170 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	885b      	ldrh	r3, [r3, #2]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d113      	bne.n	800a158 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a130:	220e      	movs	r2, #14
 800a132:	18bb      	adds	r3, r7, r2
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00e      	beq.n	800a158 <USBD_StdEPReq+0x10e>
 800a13a:	18bb      	adds	r3, r7, r2
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b80      	cmp	r3, #128	@ 0x80
 800a140:	d00a      	beq.n	800a158 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	88db      	ldrh	r3, [r3, #6]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a14a:	18bb      	adds	r3, r7, r2
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0011      	movs	r1, r2
 800a152:	0018      	movs	r0, r3
 800a154:	f001 f98b 	bl	800b46e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	0018      	movs	r0, r3
 800a15c:	f000 fda7 	bl	800acae <USBD_CtlSendStatus>

              break;
 800a160:	e006      	b.n	800a170 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	0011      	movs	r1, r2
 800a168:	0018      	movs	r0, r3
 800a16a:	f000 fcb8 	bl	800aade <USBD_CtlError>
              break;
 800a16e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a170:	e112      	b.n	800a398 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	23a7      	movs	r3, #167	@ 0xa7
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	5cd3      	ldrb	r3, [r2, r3]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d002      	beq.n	800a184 <USBD_StdEPReq+0x13a>
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d01d      	beq.n	800a1be <USBD_StdEPReq+0x174>
 800a182:	e032      	b.n	800a1ea <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a184:	220e      	movs	r2, #14
 800a186:	18bb      	adds	r3, r7, r2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <USBD_StdEPReq+0x166>
 800a18e:	18bb      	adds	r3, r7, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b80      	cmp	r3, #128	@ 0x80
 800a194:	d00c      	beq.n	800a1b0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a196:	18bb      	adds	r3, r7, r2
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	0011      	movs	r1, r2
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f001 f965 	bl	800b46e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2180      	movs	r1, #128	@ 0x80
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f001 f960 	bl	800b46e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1ae:	e024      	b.n	800a1fa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	0011      	movs	r1, r2
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 fc91 	bl	800aade <USBD_CtlError>
              break;
 800a1bc:	e01d      	b.n	800a1fa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	885b      	ldrh	r3, [r3, #2]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d118      	bne.n	800a1f8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1c6:	210e      	movs	r1, #14
 800a1c8:	187b      	adds	r3, r7, r1
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	227f      	movs	r2, #127	@ 0x7f
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	d006      	beq.n	800a1e0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1d2:	187b      	adds	r3, r7, r1
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	0011      	movs	r1, r2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f001 f972 	bl	800b4c4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f000 fd63 	bl	800acae <USBD_CtlSendStatus>
              }
              break;
 800a1e8:	e006      	b.n	800a1f8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	0011      	movs	r1, r2
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f000 fc74 	bl	800aade <USBD_CtlError>
              break;
 800a1f6:	e000      	b.n	800a1fa <USBD_StdEPReq+0x1b0>
              break;
 800a1f8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a1fa:	e0cd      	b.n	800a398 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	23a7      	movs	r3, #167	@ 0xa7
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	5cd3      	ldrb	r3, [r2, r3]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d002      	beq.n	800a20e <USBD_StdEPReq+0x1c4>
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d03c      	beq.n	800a286 <USBD_StdEPReq+0x23c>
 800a20c:	e0b5      	b.n	800a37a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a20e:	220e      	movs	r2, #14
 800a210:	18bb      	adds	r3, r7, r2
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <USBD_StdEPReq+0x1e4>
 800a218:	18bb      	adds	r3, r7, r2
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b80      	cmp	r3, #128	@ 0x80
 800a21e:	d006      	beq.n	800a22e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	0011      	movs	r1, r2
 800a226:	0018      	movs	r0, r3
 800a228:	f000 fc59 	bl	800aade <USBD_CtlError>
                break;
 800a22c:	e0ac      	b.n	800a388 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a22e:	220e      	movs	r2, #14
 800a230:	18bb      	adds	r3, r7, r2
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	b25b      	sxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	da0c      	bge.n	800a254 <USBD_StdEPReq+0x20a>
 800a23a:	18bb      	adds	r3, r7, r2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	227f      	movs	r2, #127	@ 0x7f
 800a240:	401a      	ands	r2, r3
 800a242:	0013      	movs	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	189b      	adds	r3, r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	3310      	adds	r3, #16
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	18d3      	adds	r3, r2, r3
 800a250:	3304      	adds	r3, #4
 800a252:	e00d      	b.n	800a270 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a254:	230e      	movs	r3, #14
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	227f      	movs	r2, #127	@ 0x7f
 800a25c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a25e:	0013      	movs	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	189b      	adds	r3, r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	3351      	adds	r3, #81	@ 0x51
 800a268:	33ff      	adds	r3, #255	@ 0xff
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	3304      	adds	r3, #4
 800a270:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a278:	68b9      	ldr	r1, [r7, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	0018      	movs	r0, r3
 800a280:	f000 fcab 	bl	800abda <USBD_CtlSendData>
              break;
 800a284:	e080      	b.n	800a388 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a286:	220e      	movs	r2, #14
 800a288:	18bb      	adds	r3, r7, r2
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	b25b      	sxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da14      	bge.n	800a2bc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a292:	18bb      	adds	r3, r7, r2
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	220f      	movs	r2, #15
 800a298:	401a      	ands	r2, r3
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	0013      	movs	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	189b      	adds	r3, r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	18cb      	adds	r3, r1, r3
 800a2a6:	3318      	adds	r3, #24
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d11e      	bne.n	800a2ec <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	0011      	movs	r1, r2
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 fc12 	bl	800aade <USBD_CtlError>
                  break;
 800a2ba:	e065      	b.n	800a388 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2bc:	230e      	movs	r3, #14
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	220f      	movs	r2, #15
 800a2c4:	401a      	ands	r2, r3
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	23ac      	movs	r3, #172	@ 0xac
 800a2ca:	0059      	lsls	r1, r3, #1
 800a2cc:	0013      	movs	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	189b      	adds	r3, r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	18c3      	adds	r3, r0, r3
 800a2d6:	185b      	adds	r3, r3, r1
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0011      	movs	r1, r2
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 fbfa 	bl	800aade <USBD_CtlError>
                  break;
 800a2ea:	e04d      	b.n	800a388 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2ec:	220e      	movs	r2, #14
 800a2ee:	18bb      	adds	r3, r7, r2
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b25b      	sxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da0c      	bge.n	800a312 <USBD_StdEPReq+0x2c8>
 800a2f8:	18bb      	adds	r3, r7, r2
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	227f      	movs	r2, #127	@ 0x7f
 800a2fe:	401a      	ands	r2, r3
 800a300:	0013      	movs	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	189b      	adds	r3, r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	3310      	adds	r3, #16
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	18d3      	adds	r3, r2, r3
 800a30e:	3304      	adds	r3, #4
 800a310:	e00d      	b.n	800a32e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a312:	230e      	movs	r3, #14
 800a314:	18fb      	adds	r3, r7, r3
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	227f      	movs	r2, #127	@ 0x7f
 800a31a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a31c:	0013      	movs	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	189b      	adds	r3, r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	3351      	adds	r3, #81	@ 0x51
 800a326:	33ff      	adds	r3, #255	@ 0xff
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	18d3      	adds	r3, r2, r3
 800a32c:	3304      	adds	r3, #4
 800a32e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a330:	220e      	movs	r2, #14
 800a332:	18bb      	adds	r3, r7, r2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <USBD_StdEPReq+0x2f8>
 800a33a:	18bb      	adds	r3, r7, r2
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b80      	cmp	r3, #128	@ 0x80
 800a340:	d103      	bne.n	800a34a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	e010      	b.n	800a36c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a34a:	230e      	movs	r3, #14
 800a34c:	18fb      	adds	r3, r7, r3
 800a34e:	781a      	ldrb	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	0011      	movs	r1, r2
 800a354:	0018      	movs	r0, r3
 800a356:	f001 f8e0 	bl	800b51a <USBD_LL_IsStallEP>
 800a35a:	1e03      	subs	r3, r0, #0
 800a35c:	d003      	beq.n	800a366 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2201      	movs	r2, #1
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	e002      	b.n	800a36c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a36c:	68b9      	ldr	r1, [r7, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2202      	movs	r2, #2
 800a372:	0018      	movs	r0, r3
 800a374:	f000 fc31 	bl	800abda <USBD_CtlSendData>
              break;
 800a378:	e006      	b.n	800a388 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	0011      	movs	r1, r2
 800a380:	0018      	movs	r0, r3
 800a382:	f000 fbac 	bl	800aade <USBD_CtlError>
              break;
 800a386:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a388:	e006      	b.n	800a398 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	0011      	movs	r1, r2
 800a390:	0018      	movs	r0, r3
 800a392:	f000 fba4 	bl	800aade <USBD_CtlError>
          break;
 800a396:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a398:	e006      	b.n	800a3a8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	0011      	movs	r1, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f000 fb9c 	bl	800aade <USBD_CtlError>
      break;
 800a3a6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a3a8:	230f      	movs	r3, #15
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	781b      	ldrb	r3, [r3, #0]
}
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	b004      	add	sp, #16
 800a3b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a3b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3c2:	2308      	movs	r3, #8
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3ce:	230b      	movs	r3, #11
 800a3d0:	18fb      	adds	r3, r7, r3
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	885b      	ldrh	r3, [r3, #2]
 800a3da:	0a1b      	lsrs	r3, r3, #8
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	d900      	bls.n	800a3e4 <USBD_GetDescriptor+0x2c>
 800a3e2:	e159      	b.n	800a698 <USBD_GetDescriptor+0x2e0>
 800a3e4:	009a      	lsls	r2, r3, #2
 800a3e6:	4bcb      	ldr	r3, [pc, #812]	@ (800a714 <USBD_GetDescriptor+0x35c>)
 800a3e8:	18d3      	adds	r3, r2, r3
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	23ac      	movs	r3, #172	@ 0xac
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	58d3      	ldr	r3, [r2, r3]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7c12      	ldrb	r2, [r2, #16]
 800a3fc:	2108      	movs	r1, #8
 800a3fe:	1879      	adds	r1, r7, r1
 800a400:	0010      	movs	r0, r2
 800a402:	4798      	blx	r3
 800a404:	0003      	movs	r3, r0
 800a406:	60fb      	str	r3, [r7, #12]
      break;
 800a408:	e153      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	7c1b      	ldrb	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10f      	bne.n	800a432 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	23ad      	movs	r3, #173	@ 0xad
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	58d3      	ldr	r3, [r2, r3]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	2208      	movs	r2, #8
 800a41e:	18ba      	adds	r2, r7, r2
 800a420:	0010      	movs	r0, r2
 800a422:	4798      	blx	r3
 800a424:	0003      	movs	r3, r0
 800a426:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	2202      	movs	r2, #2
 800a42e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a430:	e13f      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	23ad      	movs	r3, #173	@ 0xad
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	58d3      	ldr	r3, [r2, r3]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	2208      	movs	r2, #8
 800a43e:	18ba      	adds	r2, r7, r2
 800a440:	0010      	movs	r0, r2
 800a442:	4798      	blx	r3
 800a444:	0003      	movs	r3, r0
 800a446:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3301      	adds	r3, #1
 800a44c:	2202      	movs	r2, #2
 800a44e:	701a      	strb	r2, [r3, #0]
      break;
 800a450:	e12f      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	885b      	ldrh	r3, [r3, #2]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b05      	cmp	r3, #5
 800a45a:	d900      	bls.n	800a45e <USBD_GetDescriptor+0xa6>
 800a45c:	e0d0      	b.n	800a600 <USBD_GetDescriptor+0x248>
 800a45e:	009a      	lsls	r2, r3, #2
 800a460:	4bad      	ldr	r3, [pc, #692]	@ (800a718 <USBD_GetDescriptor+0x360>)
 800a462:	18d3      	adds	r3, r2, r3
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	23ac      	movs	r3, #172	@ 0xac
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	58d3      	ldr	r3, [r2, r3]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00d      	beq.n	800a492 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	23ac      	movs	r3, #172	@ 0xac
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	58d3      	ldr	r3, [r2, r3]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	7c12      	ldrb	r2, [r2, #16]
 800a484:	2108      	movs	r1, #8
 800a486:	1879      	adds	r1, r7, r1
 800a488:	0010      	movs	r0, r2
 800a48a:	4798      	blx	r3
 800a48c:	0003      	movs	r3, r0
 800a48e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a490:	e0c3      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0011      	movs	r1, r2
 800a498:	0018      	movs	r0, r3
 800a49a:	f000 fb20 	bl	800aade <USBD_CtlError>
            err++;
 800a49e:	210b      	movs	r1, #11
 800a4a0:	187b      	adds	r3, r7, r1
 800a4a2:	781a      	ldrb	r2, [r3, #0]
 800a4a4:	187b      	adds	r3, r7, r1
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	701a      	strb	r2, [r3, #0]
          break;
 800a4aa:	e0b6      	b.n	800a61a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	23ac      	movs	r3, #172	@ 0xac
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	58d3      	ldr	r3, [r2, r3]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00d      	beq.n	800a4d6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	23ac      	movs	r3, #172	@ 0xac
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	58d3      	ldr	r3, [r2, r3]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	7c12      	ldrb	r2, [r2, #16]
 800a4c8:	2108      	movs	r1, #8
 800a4ca:	1879      	adds	r1, r7, r1
 800a4cc:	0010      	movs	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	0003      	movs	r3, r0
 800a4d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4d4:	e0a1      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	0011      	movs	r1, r2
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f000 fafe 	bl	800aade <USBD_CtlError>
            err++;
 800a4e2:	210b      	movs	r1, #11
 800a4e4:	187b      	adds	r3, r7, r1
 800a4e6:	781a      	ldrb	r2, [r3, #0]
 800a4e8:	187b      	adds	r3, r7, r1
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
          break;
 800a4ee:	e094      	b.n	800a61a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	23ac      	movs	r3, #172	@ 0xac
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	58d3      	ldr	r3, [r2, r3]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00d      	beq.n	800a51a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	23ac      	movs	r3, #172	@ 0xac
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	58d3      	ldr	r3, [r2, r3]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7c12      	ldrb	r2, [r2, #16]
 800a50c:	2108      	movs	r1, #8
 800a50e:	1879      	adds	r1, r7, r1
 800a510:	0010      	movs	r0, r2
 800a512:	4798      	blx	r3
 800a514:	0003      	movs	r3, r0
 800a516:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a518:	e07f      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	0011      	movs	r1, r2
 800a520:	0018      	movs	r0, r3
 800a522:	f000 fadc 	bl	800aade <USBD_CtlError>
            err++;
 800a526:	210b      	movs	r1, #11
 800a528:	187b      	adds	r3, r7, r1
 800a52a:	781a      	ldrb	r2, [r3, #0]
 800a52c:	187b      	adds	r3, r7, r1
 800a52e:	3201      	adds	r2, #1
 800a530:	701a      	strb	r2, [r3, #0]
          break;
 800a532:	e072      	b.n	800a61a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	23ac      	movs	r3, #172	@ 0xac
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	58d3      	ldr	r3, [r2, r3]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00d      	beq.n	800a55e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	23ac      	movs	r3, #172	@ 0xac
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	58d3      	ldr	r3, [r2, r3]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	2108      	movs	r1, #8
 800a552:	1879      	adds	r1, r7, r1
 800a554:	0010      	movs	r0, r2
 800a556:	4798      	blx	r3
 800a558:	0003      	movs	r3, r0
 800a55a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55c:	e05d      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	0011      	movs	r1, r2
 800a564:	0018      	movs	r0, r3
 800a566:	f000 faba 	bl	800aade <USBD_CtlError>
            err++;
 800a56a:	210b      	movs	r1, #11
 800a56c:	187b      	adds	r3, r7, r1
 800a56e:	781a      	ldrb	r2, [r3, #0]
 800a570:	187b      	adds	r3, r7, r1
 800a572:	3201      	adds	r2, #1
 800a574:	701a      	strb	r2, [r3, #0]
          break;
 800a576:	e050      	b.n	800a61a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	23ac      	movs	r3, #172	@ 0xac
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	58d3      	ldr	r3, [r2, r3]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00d      	beq.n	800a5a2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	23ac      	movs	r3, #172	@ 0xac
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	58d3      	ldr	r3, [r2, r3]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	7c12      	ldrb	r2, [r2, #16]
 800a594:	2108      	movs	r1, #8
 800a596:	1879      	adds	r1, r7, r1
 800a598:	0010      	movs	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	0003      	movs	r3, r0
 800a59e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5a0:	e03b      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	0011      	movs	r1, r2
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f000 fa98 	bl	800aade <USBD_CtlError>
            err++;
 800a5ae:	210b      	movs	r1, #11
 800a5b0:	187b      	adds	r3, r7, r1
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	187b      	adds	r3, r7, r1
 800a5b6:	3201      	adds	r2, #1
 800a5b8:	701a      	strb	r2, [r3, #0]
          break;
 800a5ba:	e02e      	b.n	800a61a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	23ac      	movs	r3, #172	@ 0xac
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	58d3      	ldr	r3, [r2, r3]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	23ac      	movs	r3, #172	@ 0xac
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	58d3      	ldr	r3, [r2, r3]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	7c12      	ldrb	r2, [r2, #16]
 800a5d8:	2108      	movs	r1, #8
 800a5da:	1879      	adds	r1, r7, r1
 800a5dc:	0010      	movs	r0, r2
 800a5de:	4798      	blx	r3
 800a5e0:	0003      	movs	r3, r0
 800a5e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e4:	e019      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	0011      	movs	r1, r2
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f000 fa76 	bl	800aade <USBD_CtlError>
            err++;
 800a5f2:	210b      	movs	r1, #11
 800a5f4:	187b      	adds	r3, r7, r1
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	187b      	adds	r3, r7, r1
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
          break;
 800a5fe:	e00c      	b.n	800a61a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0011      	movs	r1, r2
 800a606:	0018      	movs	r0, r3
 800a608:	f000 fa69 	bl	800aade <USBD_CtlError>
          err++;
 800a60c:	210b      	movs	r1, #11
 800a60e:	187b      	adds	r3, r7, r1
 800a610:	781a      	ldrb	r2, [r3, #0]
 800a612:	187b      	adds	r3, r7, r1
 800a614:	3201      	adds	r2, #1
 800a616:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a618:	e04b      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>
 800a61a:	e04a      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7c1b      	ldrb	r3, [r3, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10b      	bne.n	800a63c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	23ad      	movs	r3, #173	@ 0xad
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	58d3      	ldr	r3, [r2, r3]
 800a62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62e:	2208      	movs	r2, #8
 800a630:	18ba      	adds	r2, r7, r2
 800a632:	0010      	movs	r0, r2
 800a634:	4798      	blx	r3
 800a636:	0003      	movs	r3, r0
 800a638:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a63a:	e03a      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	0011      	movs	r1, r2
 800a642:	0018      	movs	r0, r3
 800a644:	f000 fa4b 	bl	800aade <USBD_CtlError>
        err++;
 800a648:	210b      	movs	r1, #11
 800a64a:	187b      	adds	r3, r7, r1
 800a64c:	781a      	ldrb	r2, [r3, #0]
 800a64e:	187b      	adds	r3, r7, r1
 800a650:	3201      	adds	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
      break;
 800a654:	e02d      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	7c1b      	ldrb	r3, [r3, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10f      	bne.n	800a67e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	23ad      	movs	r3, #173	@ 0xad
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	58d3      	ldr	r3, [r2, r3]
 800a666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a668:	2208      	movs	r2, #8
 800a66a:	18ba      	adds	r2, r7, r2
 800a66c:	0010      	movs	r0, r2
 800a66e:	4798      	blx	r3
 800a670:	0003      	movs	r3, r0
 800a672:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	2207      	movs	r2, #7
 800a67a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a67c:	e019      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	0011      	movs	r1, r2
 800a684:	0018      	movs	r0, r3
 800a686:	f000 fa2a 	bl	800aade <USBD_CtlError>
        err++;
 800a68a:	210b      	movs	r1, #11
 800a68c:	187b      	adds	r3, r7, r1
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	187b      	adds	r3, r7, r1
 800a692:	3201      	adds	r2, #1
 800a694:	701a      	strb	r2, [r3, #0]
      break;
 800a696:	e00c      	b.n	800a6b2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0011      	movs	r1, r2
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f000 fa1d 	bl	800aade <USBD_CtlError>
      err++;
 800a6a4:	210b      	movs	r1, #11
 800a6a6:	187b      	adds	r3, r7, r1
 800a6a8:	781a      	ldrb	r2, [r3, #0]
 800a6aa:	187b      	adds	r3, r7, r1
 800a6ac:	3201      	adds	r2, #1
 800a6ae:	701a      	strb	r2, [r3, #0]
      break;
 800a6b0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800a6b2:	230b      	movs	r3, #11
 800a6b4:	18fb      	adds	r3, r7, r3
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d127      	bne.n	800a70c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a6bc:	2108      	movs	r1, #8
 800a6be:	187b      	adds	r3, r7, r1
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d019      	beq.n	800a6fa <USBD_GetDescriptor+0x342>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	88db      	ldrh	r3, [r3, #6]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d015      	beq.n	800a6fa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	88da      	ldrh	r2, [r3, #6]
 800a6d2:	187b      	adds	r3, r7, r1
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	1c18      	adds	r0, r3, #0
 800a6d8:	1c11      	adds	r1, r2, #0
 800a6da:	b28a      	uxth	r2, r1
 800a6dc:	b283      	uxth	r3, r0
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d900      	bls.n	800a6e4 <USBD_GetDescriptor+0x32c>
 800a6e2:	1c01      	adds	r1, r0, #0
 800a6e4:	b28a      	uxth	r2, r1
 800a6e6:	2108      	movs	r1, #8
 800a6e8:	187b      	adds	r3, r7, r1
 800a6ea:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	881a      	ldrh	r2, [r3, #0]
 800a6f0:	68f9      	ldr	r1, [r7, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f000 fa70 	bl	800abda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	88db      	ldrh	r3, [r3, #6]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	0018      	movs	r0, r3
 800a706:	f000 fad2 	bl	800acae <USBD_CtlSendStatus>
 800a70a:	e000      	b.n	800a70e <USBD_GetDescriptor+0x356>
    return;
 800a70c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a70e:	46bd      	mov	sp, r7
 800a710:	b004      	add	sp, #16
 800a712:	bd80      	pop	{r7, pc}
 800a714:	0800ccb8 	.word	0x0800ccb8
 800a718:	0800ccd8 	.word	0x0800ccd8

0800a71c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a71c:	b590      	push	{r4, r7, lr}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	889b      	ldrh	r3, [r3, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d13d      	bne.n	800a7aa <USBD_SetAddress+0x8e>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	88db      	ldrh	r3, [r3, #6]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d139      	bne.n	800a7aa <USBD_SetAddress+0x8e>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a73c:	d835      	bhi.n	800a7aa <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	230f      	movs	r3, #15
 800a746:	18fb      	adds	r3, r7, r3
 800a748:	217f      	movs	r1, #127	@ 0x7f
 800a74a:	400a      	ands	r2, r1
 800a74c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	23a7      	movs	r3, #167	@ 0xa7
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	5cd3      	ldrb	r3, [r2, r3]
 800a756:	2b03      	cmp	r3, #3
 800a758:	d106      	bne.n	800a768 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	0011      	movs	r1, r2
 800a760:	0018      	movs	r0, r3
 800a762:	f000 f9bc 	bl	800aade <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a766:	e027      	b.n	800a7b8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	240f      	movs	r4, #15
 800a76c:	193a      	adds	r2, r7, r4
 800a76e:	4914      	ldr	r1, [pc, #80]	@ (800a7c0 <USBD_SetAddress+0xa4>)
 800a770:	7812      	ldrb	r2, [r2, #0]
 800a772:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a774:	193b      	adds	r3, r7, r4
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	0011      	movs	r1, r2
 800a77c:	0018      	movs	r0, r3
 800a77e:	f000 fefc 	bl	800b57a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	0018      	movs	r0, r3
 800a786:	f000 fa92 	bl	800acae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a78a:	193b      	adds	r3, r7, r4
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	23a7      	movs	r3, #167	@ 0xa7
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	2102      	movs	r1, #2
 800a79a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79c:	e00c      	b.n	800a7b8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	23a7      	movs	r3, #167	@ 0xa7
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a8:	e006      	b.n	800a7b8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	0011      	movs	r1, r2
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f000 f994 	bl	800aade <USBD_CtlError>
  }
}
 800a7b6:	46c0      	nop			@ (mov r8, r8)
 800a7b8:	46c0      	nop			@ (mov r8, r8)
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b005      	add	sp, #20
 800a7be:	bd90      	pop	{r4, r7, pc}
 800a7c0:	0000029e 	.word	0x0000029e

0800a7c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	4b4c      	ldr	r3, [pc, #304]	@ (800a908 <USBD_SetConfig+0x144>)
 800a7d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7d8:	4b4b      	ldr	r3, [pc, #300]	@ (800a908 <USBD_SetConfig+0x144>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d906      	bls.n	800a7ee <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	0011      	movs	r1, r2
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f000 f979 	bl	800aade <USBD_CtlError>
 800a7ec:	e088      	b.n	800a900 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	23a7      	movs	r3, #167	@ 0xa7
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	5cd3      	ldrb	r3, [r2, r3]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d002      	beq.n	800a800 <USBD_SetConfig+0x3c>
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d029      	beq.n	800a852 <USBD_SetConfig+0x8e>
 800a7fe:	e071      	b.n	800a8e4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a800:	4b41      	ldr	r3, [pc, #260]	@ (800a908 <USBD_SetConfig+0x144>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01f      	beq.n	800a848 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a808:	4b3f      	ldr	r3, [pc, #252]	@ (800a908 <USBD_SetConfig+0x144>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	001a      	movs	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	23a7      	movs	r3, #167	@ 0xa7
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	2103      	movs	r1, #3
 800a81a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a81c:	4b3a      	ldr	r3, [pc, #232]	@ (800a908 <USBD_SetConfig+0x144>)
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	0011      	movs	r1, r2
 800a824:	0018      	movs	r0, r3
 800a826:	f7ff f8c6 	bl	80099b6 <USBD_SetClassConfig>
 800a82a:	0003      	movs	r3, r0
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d106      	bne.n	800a83e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	0011      	movs	r1, r2
 800a836:	0018      	movs	r0, r3
 800a838:	f000 f951 	bl	800aade <USBD_CtlError>
            return;
 800a83c:	e060      	b.n	800a900 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	0018      	movs	r0, r3
 800a842:	f000 fa34 	bl	800acae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a846:	e05b      	b.n	800a900 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	0018      	movs	r0, r3
 800a84c:	f000 fa2f 	bl	800acae <USBD_CtlSendStatus>
        break;
 800a850:	e056      	b.n	800a900 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a852:	4b2d      	ldr	r3, [pc, #180]	@ (800a908 <USBD_SetConfig+0x144>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d115      	bne.n	800a886 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	23a7      	movs	r3, #167	@ 0xa7
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	2102      	movs	r1, #2
 800a862:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a864:	4b28      	ldr	r3, [pc, #160]	@ (800a908 <USBD_SetConfig+0x144>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	001a      	movs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a86e:	4b26      	ldr	r3, [pc, #152]	@ (800a908 <USBD_SetConfig+0x144>)
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	0011      	movs	r1, r2
 800a876:	0018      	movs	r0, r3
 800a878:	f7ff f8c4 	bl	8009a04 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	0018      	movs	r0, r3
 800a880:	f000 fa15 	bl	800acae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a884:	e03c      	b.n	800a900 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a886:	4b20      	ldr	r3, [pc, #128]	@ (800a908 <USBD_SetConfig+0x144>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	001a      	movs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	429a      	cmp	r2, r3
 800a892:	d022      	beq.n	800a8da <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	0011      	movs	r1, r2
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f7ff f8b0 	bl	8009a04 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a8a4:	4b18      	ldr	r3, [pc, #96]	@ (800a908 <USBD_SetConfig+0x144>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	001a      	movs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a8ae:	4b16      	ldr	r3, [pc, #88]	@ (800a908 <USBD_SetConfig+0x144>)
 800a8b0:	781a      	ldrb	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	0011      	movs	r1, r2
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f7ff f87d 	bl	80099b6 <USBD_SetClassConfig>
 800a8bc:	0003      	movs	r3, r0
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d106      	bne.n	800a8d0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	0011      	movs	r1, r2
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	f000 f908 	bl	800aade <USBD_CtlError>
            return;
 800a8ce:	e017      	b.n	800a900 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	f000 f9eb 	bl	800acae <USBD_CtlSendStatus>
        break;
 800a8d8:	e012      	b.n	800a900 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f000 f9e6 	bl	800acae <USBD_CtlSendStatus>
        break;
 800a8e2:	e00d      	b.n	800a900 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	0011      	movs	r1, r2
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	f000 f8f7 	bl	800aade <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a8f0:	4b05      	ldr	r3, [pc, #20]	@ (800a908 <USBD_SetConfig+0x144>)
 800a8f2:	781a      	ldrb	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	0011      	movs	r1, r2
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	f7ff f883 	bl	8009a04 <USBD_ClrClassConfig>
        break;
 800a8fe:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a900:	46bd      	mov	sp, r7
 800a902:	b002      	add	sp, #8
 800a904:	bd80      	pop	{r7, pc}
 800a906:	46c0      	nop			@ (mov r8, r8)
 800a908:	200003bc 	.word	0x200003bc

0800a90c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	88db      	ldrh	r3, [r3, #6]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d006      	beq.n	800a92c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	0011      	movs	r1, r2
 800a924:	0018      	movs	r0, r3
 800a926:	f000 f8da 	bl	800aade <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a92a:	e026      	b.n	800a97a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	23a7      	movs	r3, #167	@ 0xa7
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	5cd3      	ldrb	r3, [r2, r3]
 800a934:	2b02      	cmp	r3, #2
 800a936:	dc02      	bgt.n	800a93e <USBD_GetConfig+0x32>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dc03      	bgt.n	800a944 <USBD_GetConfig+0x38>
 800a93c:	e016      	b.n	800a96c <USBD_GetConfig+0x60>
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d00c      	beq.n	800a95c <USBD_GetConfig+0x50>
 800a942:	e013      	b.n	800a96c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3308      	adds	r3, #8
 800a94e:	0019      	movs	r1, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	0018      	movs	r0, r3
 800a956:	f000 f940 	bl	800abda <USBD_CtlSendData>
        break;
 800a95a:	e00e      	b.n	800a97a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1d19      	adds	r1, r3, #4
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	0018      	movs	r0, r3
 800a966:	f000 f938 	bl	800abda <USBD_CtlSendData>
        break;
 800a96a:	e006      	b.n	800a97a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	0011      	movs	r1, r2
 800a972:	0018      	movs	r0, r3
 800a974:	f000 f8b3 	bl	800aade <USBD_CtlError>
        break;
 800a978:	46c0      	nop			@ (mov r8, r8)
}
 800a97a:	46c0      	nop			@ (mov r8, r8)
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b002      	add	sp, #8
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	23a7      	movs	r3, #167	@ 0xa7
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	5cd3      	ldrb	r3, [r2, r3]
 800a994:	3b01      	subs	r3, #1
 800a996:	2b02      	cmp	r3, #2
 800a998:	d822      	bhi.n	800a9e0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	88db      	ldrh	r3, [r3, #6]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d006      	beq.n	800a9b0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	0011      	movs	r1, r2
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f000 f898 	bl	800aade <USBD_CtlError>
        break;
 800a9ae:	e01e      	b.n	800a9ee <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	23a9      	movs	r3, #169	@ 0xa9
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	58d3      	ldr	r3, [r2, r3]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	330c      	adds	r3, #12
 800a9d2:	0019      	movs	r1, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f000 f8fe 	bl	800abda <USBD_CtlSendData>
      break;
 800a9de:	e006      	b.n	800a9ee <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	0011      	movs	r1, r2
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	f000 f879 	bl	800aade <USBD_CtlError>
      break;
 800a9ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b002      	add	sp, #8
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d108      	bne.n	800aa1a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	23a9      	movs	r3, #169	@ 0xa9
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	2101      	movs	r1, #1
 800aa10:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	0018      	movs	r0, r3
 800aa16:	f000 f94a 	bl	800acae <USBD_CtlSendStatus>
  }
}
 800aa1a:	46c0      	nop			@ (mov r8, r8)
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	b002      	add	sp, #8
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	23a7      	movs	r3, #167	@ 0xa7
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	5cd3      	ldrb	r3, [r2, r3]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d80d      	bhi.n	800aa56 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	885b      	ldrh	r3, [r3, #2]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d110      	bne.n	800aa64 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	23a9      	movs	r3, #169	@ 0xa9
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	2100      	movs	r1, #0
 800aa4a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	0018      	movs	r0, r3
 800aa50:	f000 f92d 	bl	800acae <USBD_CtlSendStatus>
      }
      break;
 800aa54:	e006      	b.n	800aa64 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	0011      	movs	r1, r2
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 f83e 	bl	800aade <USBD_CtlError>
      break;
 800aa62:	e000      	b.n	800aa66 <USBD_ClrFeature+0x44>
      break;
 800aa64:	46c0      	nop			@ (mov r8, r8)
  }
}
 800aa66:	46c0      	nop			@ (mov r8, r8)
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	b002      	add	sp, #8
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781a      	ldrb	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	785a      	ldrb	r2, [r3, #1]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	3302      	adds	r3, #2
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	001a      	movs	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	3303      	adds	r3, #3
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	18d3      	adds	r3, r2, r3
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	3305      	adds	r3, #5
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	18d3      	adds	r3, r2, r3
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	3306      	adds	r3, #6
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	001a      	movs	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3307      	adds	r3, #7
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	021b      	lsls	r3, r3, #8
 800aacc:	b29b      	uxth	r3, r3
 800aace:	18d3      	adds	r3, r2, r3
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	80da      	strh	r2, [r3, #6]

}
 800aad6:	46c0      	nop			@ (mov r8, r8)
 800aad8:	46bd      	mov	sp, r7
 800aada:	b002      	add	sp, #8
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2180      	movs	r1, #128	@ 0x80
 800aaec:	0018      	movs	r0, r3
 800aaee:	f000 fcbe 	bl	800b46e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f000 fcb9 	bl	800b46e <USBD_LL_StallEP>
}
 800aafc:	46c0      	nop			@ (mov r8, r8)
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b002      	add	sp, #8
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab04:	b590      	push	{r4, r7, lr}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab10:	2417      	movs	r4, #23
 800ab12:	193b      	adds	r3, r7, r4
 800ab14:	2200      	movs	r2, #0
 800ab16:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d03c      	beq.n	800ab98 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	0018      	movs	r0, r3
 800ab22:	f000 f83d 	bl	800aba0 <USBD_GetLen>
 800ab26:	0003      	movs	r3, r0
 800ab28:	3301      	adds	r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	18db      	adds	r3, r3, r3
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab34:	193b      	adds	r3, r7, r4
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	193a      	adds	r2, r7, r4
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	7011      	strb	r1, [r2, #0]
 800ab3e:	001a      	movs	r2, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	189b      	adds	r3, r3, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	7812      	ldrb	r2, [r2, #0]
 800ab48:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab4a:	193b      	adds	r3, r7, r4
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	193a      	adds	r2, r7, r4
 800ab50:	1c59      	adds	r1, r3, #1
 800ab52:	7011      	strb	r1, [r2, #0]
 800ab54:	001a      	movs	r2, r3
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	189b      	adds	r3, r3, r2
 800ab5a:	2203      	movs	r2, #3
 800ab5c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab5e:	e017      	b.n	800ab90 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	60fa      	str	r2, [r7, #12]
 800ab66:	2417      	movs	r4, #23
 800ab68:	193a      	adds	r2, r7, r4
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	1939      	adds	r1, r7, r4
 800ab6e:	1c50      	adds	r0, r2, #1
 800ab70:	7008      	strb	r0, [r1, #0]
 800ab72:	0011      	movs	r1, r2
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	1852      	adds	r2, r2, r1
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ab7c:	193b      	adds	r3, r7, r4
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	193a      	adds	r2, r7, r4
 800ab82:	1c59      	adds	r1, r3, #1
 800ab84:	7011      	strb	r1, [r2, #0]
 800ab86:	001a      	movs	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	189b      	adds	r3, r3, r2
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e3      	bne.n	800ab60 <USBD_GetString+0x5c>
    }
  }
}
 800ab98:	46c0      	nop			@ (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b007      	add	sp, #28
 800ab9e:	bd90      	pop	{r4, r7, pc}

0800aba0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aba8:	230f      	movs	r3, #15
 800abaa:	18fb      	adds	r3, r7, r3
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800abb0:	e008      	b.n	800abc4 <USBD_GetLen+0x24>
  {
    len++;
 800abb2:	210f      	movs	r1, #15
 800abb4:	187b      	adds	r3, r7, r1
 800abb6:	781a      	ldrb	r2, [r3, #0]
 800abb8:	187b      	adds	r3, r7, r1
 800abba:	3201      	adds	r2, #1
 800abbc:	701a      	strb	r2, [r3, #0]
    buf++;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3301      	adds	r3, #1
 800abc2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f2      	bne.n	800abb2 <USBD_GetLen+0x12>
  }

  return len;
 800abcc:	230f      	movs	r3, #15
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	781b      	ldrb	r3, [r3, #0]
}
 800abd2:	0018      	movs	r0, r3
 800abd4:	46bd      	mov	sp, r7
 800abd6:	b004      	add	sp, #16
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	1dbb      	adds	r3, r7, #6
 800abe6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	23a5      	movs	r3, #165	@ 0xa5
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	2102      	movs	r1, #2
 800abf0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800abf2:	1dbb      	adds	r3, r7, #6
 800abf4:	881a      	ldrh	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800abfa:	1dbb      	adds	r3, r7, #6
 800abfc:	881a      	ldrh	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac02:	1dbb      	adds	r3, r7, #6
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	f000 fce0 	bl	800b5d0 <USBD_LL_Transmit>

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	0018      	movs	r0, r3
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b004      	add	sp, #16
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	1dbb      	adds	r3, r7, #6
 800ac26:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac28:	1dbb      	adds	r3, r7, #6
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	2100      	movs	r1, #0
 800ac32:	f000 fccd 	bl	800b5d0 <USBD_LL_Transmit>

  return USBD_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	0018      	movs	r0, r3
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	b004      	add	sp, #16
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	1dbb      	adds	r3, r7, #6
 800ac4c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	23a5      	movs	r3, #165	@ 0xa5
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	2103      	movs	r1, #3
 800ac56:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ac58:	1dbb      	adds	r3, r7, #6
 800ac5a:	8819      	ldrh	r1, [r3, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	23ae      	movs	r3, #174	@ 0xae
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800ac64:	1dbb      	adds	r3, r7, #6
 800ac66:	8819      	ldrh	r1, [r3, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	23b0      	movs	r3, #176	@ 0xb0
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac70:	1dbb      	adds	r3, r7, #6
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f000 fce0 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	0018      	movs	r0, r3
 800ac82:	46bd      	mov	sp, r7
 800ac84:	b004      	add	sp, #16
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	1dbb      	adds	r3, r7, #6
 800ac94:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac96:	1dbb      	adds	r3, r7, #6
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f000 fccd 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	0018      	movs	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b004      	add	sp, #16
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	23a5      	movs	r3, #165	@ 0xa5
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	2104      	movs	r1, #4
 800acbe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	2300      	movs	r3, #0
 800acc4:	2200      	movs	r2, #0
 800acc6:	2100      	movs	r1, #0
 800acc8:	f000 fc82 	bl	800b5d0 <USBD_LL_Transmit>

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	0018      	movs	r0, r3
 800acd0:	46bd      	mov	sp, r7
 800acd2:	b002      	add	sp, #8
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	23a5      	movs	r3, #165	@ 0xa5
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	2105      	movs	r1, #5
 800ace6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	2300      	movs	r3, #0
 800acec:	2200      	movs	r2, #0
 800acee:	2100      	movs	r1, #0
 800acf0:	f000 fca5 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	0018      	movs	r0, r3
 800acf8:	46bd      	mov	sp, r7
 800acfa:	b002      	add	sp, #8
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad04:	4914      	ldr	r1, [pc, #80]	@ (800ad58 <MX_USB_DEVICE_Init+0x58>)
 800ad06:	4b15      	ldr	r3, [pc, #84]	@ (800ad5c <MX_USB_DEVICE_Init+0x5c>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f7fe fdec 	bl	80098e8 <USBD_Init>
 800ad10:	1e03      	subs	r3, r0, #0
 800ad12:	d001      	beq.n	800ad18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad14:	f7f7 fe94 	bl	8002a40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad18:	4a11      	ldr	r2, [pc, #68]	@ (800ad60 <MX_USB_DEVICE_Init+0x60>)
 800ad1a:	4b10      	ldr	r3, [pc, #64]	@ (800ad5c <MX_USB_DEVICE_Init+0x5c>)
 800ad1c:	0011      	movs	r1, r2
 800ad1e:	0018      	movs	r0, r3
 800ad20:	f7fe fe13 	bl	800994a <USBD_RegisterClass>
 800ad24:	1e03      	subs	r3, r0, #0
 800ad26:	d001      	beq.n	800ad2c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ad28:	f7f7 fe8a 	bl	8002a40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad2c:	4a0d      	ldr	r2, [pc, #52]	@ (800ad64 <MX_USB_DEVICE_Init+0x64>)
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad5c <MX_USB_DEVICE_Init+0x5c>)
 800ad30:	0011      	movs	r1, r2
 800ad32:	0018      	movs	r0, r3
 800ad34:	f7fe fd28 	bl	8009788 <USBD_CDC_RegisterInterface>
 800ad38:	1e03      	subs	r3, r0, #0
 800ad3a:	d001      	beq.n	800ad40 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800ad3c:	f7f7 fe80 	bl	8002a40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad40:	4b06      	ldr	r3, [pc, #24]	@ (800ad5c <MX_USB_DEVICE_Init+0x5c>)
 800ad42:	0018      	movs	r0, r3
 800ad44:	f7fe fe21 	bl	800998a <USBD_Start>
 800ad48:	1e03      	subs	r3, r0, #0
 800ad4a:	d001      	beq.n	800ad50 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800ad4c:	f7f7 fe78 	bl	8002a40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad50:	46c0      	nop			@ (mov r8, r8)
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	2000016c 	.word	0x2000016c
 800ad5c:	200003c0 	.word	0x200003c0
 800ad60:	20000058 	.word	0x20000058
 800ad64:	2000015c 	.word	0x2000015c

0800ad68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad6c:	4907      	ldr	r1, [pc, #28]	@ (800ad8c <CDC_Init_FS+0x24>)
 800ad6e:	4b08      	ldr	r3, [pc, #32]	@ (800ad90 <CDC_Init_FS+0x28>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	0018      	movs	r0, r3
 800ad74:	f7fe fd23 	bl	80097be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad78:	4a06      	ldr	r2, [pc, #24]	@ (800ad94 <CDC_Init_FS+0x2c>)
 800ad7a:	4b05      	ldr	r3, [pc, #20]	@ (800ad90 <CDC_Init_FS+0x28>)
 800ad7c:	0011      	movs	r1, r2
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f7fe fd39 	bl	80097f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad84:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad86:	0018      	movs	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000a84 	.word	0x20000a84
 800ad90:	200003c0 	.word	0x200003c0
 800ad94:	20000684 	.word	0x20000684

0800ad98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad9e:	0018      	movs	r0, r3
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6039      	str	r1, [r7, #0]
 800adac:	0011      	movs	r1, r2
 800adae:	1dfb      	adds	r3, r7, #7
 800adb0:	1c02      	adds	r2, r0, #0
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	1d3b      	adds	r3, r7, #4
 800adb6:	1c0a      	adds	r2, r1, #0
 800adb8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800adba:	1dfb      	adds	r3, r7, #7
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b23      	cmp	r3, #35	@ 0x23
 800adc0:	d804      	bhi.n	800adcc <CDC_Control_FS+0x28>
 800adc2:	009a      	lsls	r2, r3, #2
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <CDC_Control_FS+0x34>)
 800adc6:	18d3      	adds	r3, r2, r3
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800adcc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800adce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800add0:	0018      	movs	r0, r3
 800add2:	46bd      	mov	sp, r7
 800add4:	b002      	add	sp, #8
 800add6:	bd80      	pop	{r7, pc}
 800add8:	0800ccf0 	.word	0x0800ccf0

0800addc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4b06      	ldr	r3, [pc, #24]	@ (800ae04 <CDC_Receive_FS+0x28>)
 800adea:	0011      	movs	r1, r2
 800adec:	0018      	movs	r0, r3
 800adee:	f7fe fd02 	bl	80097f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adf2:	4b04      	ldr	r3, [pc, #16]	@ (800ae04 <CDC_Receive_FS+0x28>)
 800adf4:	0018      	movs	r0, r3
 800adf6:	f7fe fd49 	bl	800988c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800adfa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b002      	add	sp, #8
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	200003c0 	.word	0x200003c0

0800ae08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae08:	b5b0      	push	{r4, r5, r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	000a      	movs	r2, r1
 800ae12:	1cbb      	adds	r3, r7, #2
 800ae14:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800ae16:	230f      	movs	r3, #15
 800ae18:	18fb      	adds	r3, r7, r3
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae1e:	4a11      	ldr	r2, [pc, #68]	@ (800ae64 <CDC_Transmit_FS+0x5c>)
 800ae20:	23ae      	movs	r3, #174	@ 0xae
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	58d3      	ldr	r3, [r2, r3]
 800ae26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	2385      	movs	r3, #133	@ 0x85
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	58d3      	ldr	r3, [r2, r3]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e010      	b.n	800ae5a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae38:	1cbb      	adds	r3, r7, #2
 800ae3a:	881a      	ldrh	r2, [r3, #0]
 800ae3c:	6879      	ldr	r1, [r7, #4]
 800ae3e:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <CDC_Transmit_FS+0x5c>)
 800ae40:	0018      	movs	r0, r3
 800ae42:	f7fe fcbc 	bl	80097be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae46:	250f      	movs	r5, #15
 800ae48:	197c      	adds	r4, r7, r5
 800ae4a:	4b06      	ldr	r3, [pc, #24]	@ (800ae64 <CDC_Transmit_FS+0x5c>)
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f7fe fce6 	bl	800981e <USBD_CDC_TransmitPacket>
 800ae52:	0003      	movs	r3, r0
 800ae54:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800ae56:	197b      	adds	r3, r7, r5
 800ae58:	781b      	ldrb	r3, [r3, #0]
}
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b004      	add	sp, #16
 800ae60:	bdb0      	pop	{r4, r5, r7, pc}
 800ae62:	46c0      	nop			@ (mov r8, r8)
 800ae64:	200003c0 	.word	0x200003c0

0800ae68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	0002      	movs	r2, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	1dfb      	adds	r3, r7, #7
 800ae74:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2212      	movs	r2, #18
 800ae7a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae7c:	4b02      	ldr	r3, [pc, #8]	@ (800ae88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae7e:	0018      	movs	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b002      	add	sp, #8
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	20000188 	.word	0x20000188

0800ae8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	0002      	movs	r2, r0
 800ae94:	6039      	str	r1, [r7, #0]
 800ae96:	1dfb      	adds	r3, r7, #7
 800ae98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aea0:	4b02      	ldr	r3, [pc, #8]	@ (800aeac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b002      	add	sp, #8
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	46c0      	nop			@ (mov r8, r8)
 800aeac:	2000019c 	.word	0x2000019c

0800aeb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	0002      	movs	r2, r0
 800aeb8:	6039      	str	r1, [r7, #0]
 800aeba:	1dfb      	adds	r3, r7, #7
 800aebc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800aebe:	1dfb      	adds	r3, r7, #7
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	4908      	ldr	r1, [pc, #32]	@ (800aeec <USBD_FS_ProductStrDescriptor+0x3c>)
 800aeca:	4b09      	ldr	r3, [pc, #36]	@ (800aef0 <USBD_FS_ProductStrDescriptor+0x40>)
 800aecc:	0018      	movs	r0, r3
 800aece:	f7ff fe19 	bl	800ab04 <USBD_GetString>
 800aed2:	e005      	b.n	800aee0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	4905      	ldr	r1, [pc, #20]	@ (800aeec <USBD_FS_ProductStrDescriptor+0x3c>)
 800aed8:	4b05      	ldr	r3, [pc, #20]	@ (800aef0 <USBD_FS_ProductStrDescriptor+0x40>)
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7ff fe12 	bl	800ab04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aee0:	4b02      	ldr	r3, [pc, #8]	@ (800aeec <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b002      	add	sp, #8
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	20000e84 	.word	0x20000e84
 800aef0:	0800cbd0 	.word	0x0800cbd0

0800aef4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	0002      	movs	r2, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	1dfb      	adds	r3, r7, #7
 800af00:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	4904      	ldr	r1, [pc, #16]	@ (800af18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af06:	4b05      	ldr	r3, [pc, #20]	@ (800af1c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800af08:	0018      	movs	r0, r3
 800af0a:	f7ff fdfb 	bl	800ab04 <USBD_GetString>
  return USBD_StrDesc;
 800af0e:	4b02      	ldr	r3, [pc, #8]	@ (800af18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800af10:	0018      	movs	r0, r3
 800af12:	46bd      	mov	sp, r7
 800af14:	b002      	add	sp, #8
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20000e84 	.word	0x20000e84
 800af1c:	0800cbe8 	.word	0x0800cbe8

0800af20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	0002      	movs	r2, r0
 800af28:	6039      	str	r1, [r7, #0]
 800af2a:	1dfb      	adds	r3, r7, #7
 800af2c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	221a      	movs	r2, #26
 800af32:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af34:	f000 f84c 	bl	800afd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af38:	4b02      	ldr	r3, [pc, #8]	@ (800af44 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800af3a:	0018      	movs	r0, r3
 800af3c:	46bd      	mov	sp, r7
 800af3e:	b002      	add	sp, #8
 800af40:	bd80      	pop	{r7, pc}
 800af42:	46c0      	nop			@ (mov r8, r8)
 800af44:	200001a0 	.word	0x200001a0

0800af48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	0002      	movs	r2, r0
 800af50:	6039      	str	r1, [r7, #0]
 800af52:	1dfb      	adds	r3, r7, #7
 800af54:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800af56:	1dfb      	adds	r3, r7, #7
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	4908      	ldr	r1, [pc, #32]	@ (800af84 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800af62:	4b09      	ldr	r3, [pc, #36]	@ (800af88 <USBD_FS_ConfigStrDescriptor+0x40>)
 800af64:	0018      	movs	r0, r3
 800af66:	f7ff fdcd 	bl	800ab04 <USBD_GetString>
 800af6a:	e005      	b.n	800af78 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	4905      	ldr	r1, [pc, #20]	@ (800af84 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800af70:	4b05      	ldr	r3, [pc, #20]	@ (800af88 <USBD_FS_ConfigStrDescriptor+0x40>)
 800af72:	0018      	movs	r0, r3
 800af74:	f7ff fdc6 	bl	800ab04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af78:	4b02      	ldr	r3, [pc, #8]	@ (800af84 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800af7a:	0018      	movs	r0, r3
 800af7c:	46bd      	mov	sp, r7
 800af7e:	b002      	add	sp, #8
 800af80:	bd80      	pop	{r7, pc}
 800af82:	46c0      	nop			@ (mov r8, r8)
 800af84:	20000e84 	.word	0x20000e84
 800af88:	0800cbfc 	.word	0x0800cbfc

0800af8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	0002      	movs	r2, r0
 800af94:	6039      	str	r1, [r7, #0]
 800af96:	1dfb      	adds	r3, r7, #7
 800af98:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800af9a:	1dfb      	adds	r3, r7, #7
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	4908      	ldr	r1, [pc, #32]	@ (800afc8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800afa6:	4b09      	ldr	r3, [pc, #36]	@ (800afcc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800afa8:	0018      	movs	r0, r3
 800afaa:	f7ff fdab 	bl	800ab04 <USBD_GetString>
 800afae:	e005      	b.n	800afbc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	4905      	ldr	r1, [pc, #20]	@ (800afc8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800afb4:	4b05      	ldr	r3, [pc, #20]	@ (800afcc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800afb6:	0018      	movs	r0, r3
 800afb8:	f7ff fda4 	bl	800ab04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afbc:	4b02      	ldr	r3, [pc, #8]	@ (800afc8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800afbe:	0018      	movs	r0, r3
 800afc0:	46bd      	mov	sp, r7
 800afc2:	b002      	add	sp, #8
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	20000e84 	.word	0x20000e84
 800afcc:	0800cc08 	.word	0x0800cc08

0800afd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afd6:	4b10      	ldr	r3, [pc, #64]	@ (800b018 <Get_SerialNum+0x48>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afdc:	4b0f      	ldr	r3, [pc, #60]	@ (800b01c <Get_SerialNum+0x4c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afe2:	4b0f      	ldr	r3, [pc, #60]	@ (800b020 <Get_SerialNum+0x50>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	18d3      	adds	r3, r2, r3
 800afee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00b      	beq.n	800b00e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aff6:	490b      	ldr	r1, [pc, #44]	@ (800b024 <Get_SerialNum+0x54>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2208      	movs	r2, #8
 800affc:	0018      	movs	r0, r3
 800affe:	f000 f815 	bl	800b02c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b002:	4909      	ldr	r1, [pc, #36]	@ (800b028 <Get_SerialNum+0x58>)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2204      	movs	r2, #4
 800b008:	0018      	movs	r0, r3
 800b00a:	f000 f80f 	bl	800b02c <IntToUnicode>
  }
}
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	46bd      	mov	sp, r7
 800b012:	b004      	add	sp, #16
 800b014:	bd80      	pop	{r7, pc}
 800b016:	46c0      	nop			@ (mov r8, r8)
 800b018:	1ffff7ac 	.word	0x1ffff7ac
 800b01c:	1ffff7b0 	.word	0x1ffff7b0
 800b020:	1ffff7b4 	.word	0x1ffff7b4
 800b024:	200001a2 	.word	0x200001a2
 800b028:	200001b2 	.word	0x200001b2

0800b02c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	1dfb      	adds	r3, r7, #7
 800b038:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b03a:	2117      	movs	r1, #23
 800b03c:	187b      	adds	r3, r7, r1
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b042:	187b      	adds	r3, r7, r1
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e02f      	b.n	800b0aa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	0f1b      	lsrs	r3, r3, #28
 800b04e:	2b09      	cmp	r3, #9
 800b050:	d80d      	bhi.n	800b06e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	0f1b      	lsrs	r3, r3, #28
 800b056:	b2da      	uxtb	r2, r3
 800b058:	2317      	movs	r3, #23
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	0019      	movs	r1, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	185b      	adds	r3, r3, r1
 800b066:	3230      	adds	r2, #48	@ 0x30
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	701a      	strb	r2, [r3, #0]
 800b06c:	e00c      	b.n	800b088 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	0f1b      	lsrs	r3, r3, #28
 800b072:	b2da      	uxtb	r2, r3
 800b074:	2317      	movs	r3, #23
 800b076:	18fb      	adds	r3, r7, r3
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	0019      	movs	r1, r3
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	185b      	adds	r3, r3, r1
 800b082:	3237      	adds	r2, #55	@ 0x37
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b08e:	2117      	movs	r1, #23
 800b090:	187b      	adds	r3, r7, r1
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	3301      	adds	r3, #1
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	18d3      	adds	r3, r2, r3
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0a0:	187b      	adds	r3, r7, r1
 800b0a2:	781a      	ldrb	r2, [r3, #0]
 800b0a4:	187b      	adds	r3, r7, r1
 800b0a6:	3201      	adds	r2, #1
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	2317      	movs	r3, #23
 800b0ac:	18fa      	adds	r2, r7, r3
 800b0ae:	1dfb      	adds	r3, r7, #7
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d3c8      	bcc.n	800b04a <IntToUnicode+0x1e>
  }
}
 800b0b8:	46c0      	nop			@ (mov r8, r8)
 800b0ba:	46c0      	nop			@ (mov r8, r8)
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	b006      	add	sp, #24
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0e      	ldr	r2, [pc, #56]	@ (800b10c <HAL_PCD_MspInit+0x48>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d115      	bne.n	800b102 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b0d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b110 <HAL_PCD_MspInit+0x4c>)
 800b0d8:	69da      	ldr	r2, [r3, #28]
 800b0da:	4b0d      	ldr	r3, [pc, #52]	@ (800b110 <HAL_PCD_MspInit+0x4c>)
 800b0dc:	2180      	movs	r1, #128	@ 0x80
 800b0de:	0409      	lsls	r1, r1, #16
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	61da      	str	r2, [r3, #28]
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <HAL_PCD_MspInit+0x4c>)
 800b0e6:	69da      	ldr	r2, [r3, #28]
 800b0e8:	2380      	movs	r3, #128	@ 0x80
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	201f      	movs	r0, #31
 800b0f8:	f7f8 fa18 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b0fc:	201f      	movs	r0, #31
 800b0fe:	f7f8 fa2a 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	46bd      	mov	sp, r7
 800b106:	b004      	add	sp, #16
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	46c0      	nop			@ (mov r8, r8)
 800b10c:	40005c00 	.word	0x40005c00
 800b110:	40021000 	.word	0x40021000

0800b114 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	23b6      	movs	r3, #182	@ 0xb6
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	58d2      	ldr	r2, [r2, r3]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	21a6      	movs	r1, #166	@ 0xa6
 800b128:	0089      	lsls	r1, r1, #2
 800b12a:	468c      	mov	ip, r1
 800b12c:	4463      	add	r3, ip
 800b12e:	0019      	movs	r1, r3
 800b130:	0010      	movs	r0, r2
 800b132:	f7fe fc7d 	bl	8009a30 <USBD_LL_SetupStage>
}
 800b136:	46c0      	nop			@ (mov r8, r8)
 800b138:	46bd      	mov	sp, r7
 800b13a:	b002      	add	sp, #8
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b13e:	b590      	push	{r4, r7, lr}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	000a      	movs	r2, r1
 800b148:	1cfb      	adds	r3, r7, #3
 800b14a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	23b6      	movs	r3, #182	@ 0xb6
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	58d4      	ldr	r4, [r2, r3]
 800b154:	1cfb      	adds	r3, r7, #3
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	23b2      	movs	r3, #178	@ 0xb2
 800b15c:	0059      	lsls	r1, r3, #1
 800b15e:	0013      	movs	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	189b      	adds	r3, r3, r2
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	18c3      	adds	r3, r0, r3
 800b168:	185b      	adds	r3, r3, r1
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	1cfb      	adds	r3, r7, #3
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	0019      	movs	r1, r3
 800b172:	0020      	movs	r0, r4
 800b174:	f7fe fcba 	bl	8009aec <USBD_LL_DataOutStage>
}
 800b178:	46c0      	nop			@ (mov r8, r8)
 800b17a:	46bd      	mov	sp, r7
 800b17c:	b003      	add	sp, #12
 800b17e:	bd90      	pop	{r4, r7, pc}

0800b180 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	000a      	movs	r2, r1
 800b18a:	1cfb      	adds	r3, r7, #3
 800b18c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	23b6      	movs	r3, #182	@ 0xb6
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	58d0      	ldr	r0, [r2, r3]
 800b196:	1cfb      	adds	r3, r7, #3
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	0013      	movs	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	189b      	adds	r3, r3, r2
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	18cb      	adds	r3, r1, r3
 800b1a6:	3324      	adds	r3, #36	@ 0x24
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	1cfb      	adds	r3, r7, #3
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	0019      	movs	r1, r3
 800b1b0:	f7fe fd1e 	bl	8009bf0 <USBD_LL_DataInStage>
}
 800b1b4:	46c0      	nop			@ (mov r8, r8)
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	b002      	add	sp, #8
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	23b6      	movs	r3, #182	@ 0xb6
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	58d3      	ldr	r3, [r2, r3]
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7fe fe55 	bl	8009e7c <USBD_LL_SOF>
}
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	b002      	add	sp, #8
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1e2:	230f      	movs	r3, #15
 800b1e4:	18fb      	adds	r3, r7, r3
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	795b      	ldrb	r3, [r3, #5]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d001      	beq.n	800b1f6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b1f2:	f7f7 fc25 	bl	8002a40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	23b6      	movs	r3, #182	@ 0xb6
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	58d2      	ldr	r2, [r2, r3]
 800b1fe:	230f      	movs	r3, #15
 800b200:	18fb      	adds	r3, r7, r3
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	0019      	movs	r1, r3
 800b206:	0010      	movs	r0, r2
 800b208:	f7fe fdf7 	bl	8009dfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	23b6      	movs	r3, #182	@ 0xb6
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	58d3      	ldr	r3, [r2, r3]
 800b214:	0018      	movs	r0, r3
 800b216:	f7fe fda8 	bl	8009d6a <USBD_LL_Reset>
}
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b004      	add	sp, #16
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	23b6      	movs	r3, #182	@ 0xb6
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	58d3      	ldr	r3, [r2, r3]
 800b234:	0018      	movs	r0, r3
 800b236:	f7fe fdf1 	bl	8009e1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	7a5b      	ldrb	r3, [r3, #9]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b242:	4b05      	ldr	r3, [pc, #20]	@ (800b258 <HAL_PCD_SuspendCallback+0x34>)
 800b244:	691a      	ldr	r2, [r3, #16]
 800b246:	4b04      	ldr	r3, [pc, #16]	@ (800b258 <HAL_PCD_SuspendCallback+0x34>)
 800b248:	2106      	movs	r1, #6
 800b24a:	430a      	orrs	r2, r1
 800b24c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b24e:	46c0      	nop			@ (mov r8, r8)
 800b250:	46bd      	mov	sp, r7
 800b252:	b002      	add	sp, #8
 800b254:	bd80      	pop	{r7, pc}
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	e000ed00 	.word	0xe000ed00

0800b25c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7a5b      	ldrb	r3, [r3, #9]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d007      	beq.n	800b27c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b26c:	4b09      	ldr	r3, [pc, #36]	@ (800b294 <HAL_PCD_ResumeCallback+0x38>)
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	4b08      	ldr	r3, [pc, #32]	@ (800b294 <HAL_PCD_ResumeCallback+0x38>)
 800b272:	2106      	movs	r1, #6
 800b274:	438a      	bics	r2, r1
 800b276:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b278:	f000 fa42 	bl	800b700 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	23b6      	movs	r3, #182	@ 0xb6
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	58d3      	ldr	r3, [r2, r3]
 800b284:	0018      	movs	r0, r3
 800b286:	f7fe fde1 	bl	8009e4c <USBD_LL_Resume>
}
 800b28a:	46c0      	nop			@ (mov r8, r8)
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b002      	add	sp, #8
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	e000ed00 	.word	0xe000ed00

0800b298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b2a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2a2:	23b6      	movs	r3, #182	@ 0xb6
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	23b0      	movs	r3, #176	@ 0xb0
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4929      	ldr	r1, [pc, #164]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2b2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b2b4:	4b28      	ldr	r3, [pc, #160]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2b6:	4a29      	ldr	r2, [pc, #164]	@ (800b35c <USBD_LL_Init+0xc4>)
 800b2b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b2ba:	4b27      	ldr	r3, [pc, #156]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2bc:	2208      	movs	r2, #8
 800b2be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2c0:	4b25      	ldr	r3, [pc, #148]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2c6:	4b24      	ldr	r3, [pc, #144]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2cc:	4b22      	ldr	r3, [pc, #136]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b2d2:	4b21      	ldr	r3, [pc, #132]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b2d8:	4b1f      	ldr	r3, [pc, #124]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b2de:	4b1e      	ldr	r3, [pc, #120]	@ (800b358 <USBD_LL_Init+0xc0>)
 800b2e0:	0018      	movs	r0, r3
 800b2e2:	f7f8 fb33 	bl	800394c <HAL_PCD_Init>
 800b2e6:	1e03      	subs	r3, r0, #0
 800b2e8:	d001      	beq.n	800b2ee <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b2ea:	f7f7 fba9 	bl	8002a40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	23b0      	movs	r3, #176	@ 0xb0
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	58d0      	ldr	r0, [r2, r3]
 800b2f6:	2318      	movs	r3, #24
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	f7fa f8e4 	bl	80054c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	23b0      	movs	r3, #176	@ 0xb0
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	58d0      	ldr	r0, [r2, r3]
 800b308:	2358      	movs	r3, #88	@ 0x58
 800b30a:	2200      	movs	r2, #0
 800b30c:	2180      	movs	r1, #128	@ 0x80
 800b30e:	f7fa f8db 	bl	80054c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	23b0      	movs	r3, #176	@ 0xb0
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	58d0      	ldr	r0, [r2, r3]
 800b31a:	23c0      	movs	r3, #192	@ 0xc0
 800b31c:	2200      	movs	r2, #0
 800b31e:	2181      	movs	r1, #129	@ 0x81
 800b320:	f7fa f8d2 	bl	80054c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	23b0      	movs	r3, #176	@ 0xb0
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	58d0      	ldr	r0, [r2, r3]
 800b32c:	2388      	movs	r3, #136	@ 0x88
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	2200      	movs	r2, #0
 800b332:	2101      	movs	r1, #1
 800b334:	f7fa f8c8 	bl	80054c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	23b0      	movs	r3, #176	@ 0xb0
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	58d0      	ldr	r0, [r2, r3]
 800b340:	2380      	movs	r3, #128	@ 0x80
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	2200      	movs	r2, #0
 800b346:	2182      	movs	r1, #130	@ 0x82
 800b348:	f7fa f8be 	bl	80054c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	0018      	movs	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	b002      	add	sp, #8
 800b354:	bd80      	pop	{r7, pc}
 800b356:	46c0      	nop			@ (mov r8, r8)
 800b358:	20001084 	.word	0x20001084
 800b35c:	40005c00 	.word	0x40005c00

0800b360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b368:	210f      	movs	r1, #15
 800b36a:	187b      	adds	r3, r7, r1
 800b36c:	2200      	movs	r2, #0
 800b36e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b370:	260e      	movs	r6, #14
 800b372:	19bb      	adds	r3, r7, r6
 800b374:	2200      	movs	r2, #0
 800b376:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	23b0      	movs	r3, #176	@ 0xb0
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	58d3      	ldr	r3, [r2, r3]
 800b380:	000d      	movs	r5, r1
 800b382:	187c      	adds	r4, r7, r1
 800b384:	0018      	movs	r0, r3
 800b386:	f7f8 fbd5 	bl	8003b34 <HAL_PCD_Start>
 800b38a:	0003      	movs	r3, r0
 800b38c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38e:	19bc      	adds	r4, r7, r6
 800b390:	197b      	adds	r3, r7, r5
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	0018      	movs	r0, r3
 800b396:	f000 f9ba 	bl	800b70e <USBD_Get_USB_Status>
 800b39a:	0003      	movs	r3, r0
 800b39c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b39e:	19bb      	adds	r3, r7, r6
 800b3a0:	781b      	ldrb	r3, [r3, #0]
}
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	b005      	add	sp, #20
 800b3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	000c      	movs	r4, r1
 800b3b4:	0010      	movs	r0, r2
 800b3b6:	0019      	movs	r1, r3
 800b3b8:	1cfb      	adds	r3, r7, #3
 800b3ba:	1c22      	adds	r2, r4, #0
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	1cbb      	adds	r3, r7, #2
 800b3c0:	1c02      	adds	r2, r0, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	003b      	movs	r3, r7
 800b3c6:	1c0a      	adds	r2, r1, #0
 800b3c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ca:	260f      	movs	r6, #15
 800b3cc:	19bb      	adds	r3, r7, r6
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d2:	250e      	movs	r5, #14
 800b3d4:	197b      	adds	r3, r7, r5
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	23b0      	movs	r3, #176	@ 0xb0
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	58d0      	ldr	r0, [r2, r3]
 800b3e2:	19bc      	adds	r4, r7, r6
 800b3e4:	1cbb      	adds	r3, r7, #2
 800b3e6:	781d      	ldrb	r5, [r3, #0]
 800b3e8:	003b      	movs	r3, r7
 800b3ea:	881a      	ldrh	r2, [r3, #0]
 800b3ec:	1cfb      	adds	r3, r7, #3
 800b3ee:	7819      	ldrb	r1, [r3, #0]
 800b3f0:	002b      	movs	r3, r5
 800b3f2:	f7f8 fd33 	bl	8003e5c <HAL_PCD_EP_Open>
 800b3f6:	0003      	movs	r3, r0
 800b3f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3fa:	250e      	movs	r5, #14
 800b3fc:	197c      	adds	r4, r7, r5
 800b3fe:	19bb      	adds	r3, r7, r6
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	0018      	movs	r0, r3
 800b404:	f000 f983 	bl	800b70e <USBD_Get_USB_Status>
 800b408:	0003      	movs	r3, r0
 800b40a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b40c:	197b      	adds	r3, r7, r5
 800b40e:	781b      	ldrb	r3, [r3, #0]
}
 800b410:	0018      	movs	r0, r3
 800b412:	46bd      	mov	sp, r7
 800b414:	b005      	add	sp, #20
 800b416:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b418 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	000a      	movs	r2, r1
 800b422:	1cfb      	adds	r3, r7, #3
 800b424:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b426:	210f      	movs	r1, #15
 800b428:	187b      	adds	r3, r7, r1
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42e:	260e      	movs	r6, #14
 800b430:	19bb      	adds	r3, r7, r6
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	23b0      	movs	r3, #176	@ 0xb0
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	58d2      	ldr	r2, [r2, r3]
 800b43e:	000d      	movs	r5, r1
 800b440:	187c      	adds	r4, r7, r1
 800b442:	1cfb      	adds	r3, r7, #3
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	0019      	movs	r1, r3
 800b448:	0010      	movs	r0, r2
 800b44a:	f7f8 fd76 	bl	8003f3a <HAL_PCD_EP_Close>
 800b44e:	0003      	movs	r3, r0
 800b450:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b452:	19bc      	adds	r4, r7, r6
 800b454:	197b      	adds	r3, r7, r5
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	0018      	movs	r0, r3
 800b45a:	f000 f958 	bl	800b70e <USBD_Get_USB_Status>
 800b45e:	0003      	movs	r3, r0
 800b460:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b462:	19bb      	adds	r3, r7, r6
 800b464:	781b      	ldrb	r3, [r3, #0]
}
 800b466:	0018      	movs	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	b005      	add	sp, #20
 800b46c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b46e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b46e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	000a      	movs	r2, r1
 800b478:	1cfb      	adds	r3, r7, #3
 800b47a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	210f      	movs	r1, #15
 800b47e:	187b      	adds	r3, r7, r1
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b484:	260e      	movs	r6, #14
 800b486:	19bb      	adds	r3, r7, r6
 800b488:	2200      	movs	r2, #0
 800b48a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	23b0      	movs	r3, #176	@ 0xb0
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	58d2      	ldr	r2, [r2, r3]
 800b494:	000d      	movs	r5, r1
 800b496:	187c      	adds	r4, r7, r1
 800b498:	1cfb      	adds	r3, r7, #3
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	0019      	movs	r1, r3
 800b49e:	0010      	movs	r0, r2
 800b4a0:	f7f8 fe28 	bl	80040f4 <HAL_PCD_EP_SetStall>
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a8:	19bc      	adds	r4, r7, r6
 800b4aa:	197b      	adds	r3, r7, r5
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f000 f92d 	bl	800b70e <USBD_Get_USB_Status>
 800b4b4:	0003      	movs	r3, r0
 800b4b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b4b8:	19bb      	adds	r3, r7, r6
 800b4ba:	781b      	ldrb	r3, [r3, #0]
}
 800b4bc:	0018      	movs	r0, r3
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	b005      	add	sp, #20
 800b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	000a      	movs	r2, r1
 800b4ce:	1cfb      	adds	r3, r7, #3
 800b4d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d2:	210f      	movs	r1, #15
 800b4d4:	187b      	adds	r3, r7, r1
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4da:	260e      	movs	r6, #14
 800b4dc:	19bb      	adds	r3, r7, r6
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	23b0      	movs	r3, #176	@ 0xb0
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	58d2      	ldr	r2, [r2, r3]
 800b4ea:	000d      	movs	r5, r1
 800b4ec:	187c      	adds	r4, r7, r1
 800b4ee:	1cfb      	adds	r3, r7, #3
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	0019      	movs	r1, r3
 800b4f4:	0010      	movs	r0, r2
 800b4f6:	f7f8 fe59 	bl	80041ac <HAL_PCD_EP_ClrStall>
 800b4fa:	0003      	movs	r3, r0
 800b4fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4fe:	19bc      	adds	r4, r7, r6
 800b500:	197b      	adds	r3, r7, r5
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	0018      	movs	r0, r3
 800b506:	f000 f902 	bl	800b70e <USBD_Get_USB_Status>
 800b50a:	0003      	movs	r3, r0
 800b50c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b50e:	19bb      	adds	r3, r7, r6
 800b510:	781b      	ldrb	r3, [r3, #0]
}
 800b512:	0018      	movs	r0, r3
 800b514:	46bd      	mov	sp, r7
 800b516:	b005      	add	sp, #20
 800b518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b51a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	000a      	movs	r2, r1
 800b524:	1cfb      	adds	r3, r7, #3
 800b526:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	23b0      	movs	r3, #176	@ 0xb0
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	58d3      	ldr	r3, [r2, r3]
 800b530:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b532:	1cfb      	adds	r3, r7, #3
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	b25b      	sxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da0c      	bge.n	800b556 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b53c:	1cfb      	adds	r3, r7, #3
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	227f      	movs	r2, #127	@ 0x7f
 800b542:	401a      	ands	r2, r3
 800b544:	68f9      	ldr	r1, [r7, #12]
 800b546:	0013      	movs	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	189b      	adds	r3, r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	18cb      	adds	r3, r1, r3
 800b550:	3312      	adds	r3, #18
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	e00d      	b.n	800b572 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b556:	1cfb      	adds	r3, r7, #3
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	227f      	movs	r2, #127	@ 0x7f
 800b55c:	401a      	ands	r2, r3
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	23a9      	movs	r3, #169	@ 0xa9
 800b562:	0059      	lsls	r1, r3, #1
 800b564:	0013      	movs	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	189b      	adds	r3, r3, r2
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	18c3      	adds	r3, r0, r3
 800b56e:	185b      	adds	r3, r3, r1
 800b570:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b572:	0018      	movs	r0, r3
 800b574:	46bd      	mov	sp, r7
 800b576:	b004      	add	sp, #16
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b57a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57c:	b085      	sub	sp, #20
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	000a      	movs	r2, r1
 800b584:	1cfb      	adds	r3, r7, #3
 800b586:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b588:	210f      	movs	r1, #15
 800b58a:	187b      	adds	r3, r7, r1
 800b58c:	2200      	movs	r2, #0
 800b58e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b590:	260e      	movs	r6, #14
 800b592:	19bb      	adds	r3, r7, r6
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	23b0      	movs	r3, #176	@ 0xb0
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	58d2      	ldr	r2, [r2, r3]
 800b5a0:	000d      	movs	r5, r1
 800b5a2:	187c      	adds	r4, r7, r1
 800b5a4:	1cfb      	adds	r3, r7, #3
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	0010      	movs	r0, r2
 800b5ac:	f7f8 fc2c 	bl	8003e08 <HAL_PCD_SetAddress>
 800b5b0:	0003      	movs	r3, r0
 800b5b2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b4:	19bc      	adds	r4, r7, r6
 800b5b6:	197b      	adds	r3, r7, r5
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f000 f8a7 	bl	800b70e <USBD_Get_USB_Status>
 800b5c0:	0003      	movs	r3, r0
 800b5c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b5c4:	19bb      	adds	r3, r7, r6
 800b5c6:	781b      	ldrb	r3, [r3, #0]
}
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	0008      	movs	r0, r1
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	0019      	movs	r1, r3
 800b5de:	230b      	movs	r3, #11
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	1c02      	adds	r2, r0, #0
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	2408      	movs	r4, #8
 800b5e8:	193b      	adds	r3, r7, r4
 800b5ea:	1c0a      	adds	r2, r1, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ee:	2117      	movs	r1, #23
 800b5f0:	187b      	adds	r3, r7, r1
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f6:	2516      	movs	r5, #22
 800b5f8:	197b      	adds	r3, r7, r5
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	23b0      	movs	r3, #176	@ 0xb0
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	58d0      	ldr	r0, [r2, r3]
 800b606:	193b      	adds	r3, r7, r4
 800b608:	881d      	ldrh	r5, [r3, #0]
 800b60a:	000e      	movs	r6, r1
 800b60c:	187c      	adds	r4, r7, r1
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	230b      	movs	r3, #11
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	7819      	ldrb	r1, [r3, #0]
 800b616:	002b      	movs	r3, r5
 800b618:	f7f8 fd30 	bl	800407c <HAL_PCD_EP_Transmit>
 800b61c:	0003      	movs	r3, r0
 800b61e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b620:	2516      	movs	r5, #22
 800b622:	197c      	adds	r4, r7, r5
 800b624:	19bb      	adds	r3, r7, r6
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 f870 	bl	800b70e <USBD_Get_USB_Status>
 800b62e:	0003      	movs	r3, r0
 800b630:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b632:	197b      	adds	r3, r7, r5
 800b634:	781b      	ldrb	r3, [r3, #0]
}
 800b636:	0018      	movs	r0, r3
 800b638:	46bd      	mov	sp, r7
 800b63a:	b007      	add	sp, #28
 800b63c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b63e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b63e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b640:	b087      	sub	sp, #28
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	0008      	movs	r0, r1
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	0019      	movs	r1, r3
 800b64c:	230b      	movs	r3, #11
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	1c02      	adds	r2, r0, #0
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	2408      	movs	r4, #8
 800b656:	193b      	adds	r3, r7, r4
 800b658:	1c0a      	adds	r2, r1, #0
 800b65a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65c:	2117      	movs	r1, #23
 800b65e:	187b      	adds	r3, r7, r1
 800b660:	2200      	movs	r2, #0
 800b662:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b664:	2516      	movs	r5, #22
 800b666:	197b      	adds	r3, r7, r5
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	23b0      	movs	r3, #176	@ 0xb0
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	58d0      	ldr	r0, [r2, r3]
 800b674:	193b      	adds	r3, r7, r4
 800b676:	881d      	ldrh	r5, [r3, #0]
 800b678:	000e      	movs	r6, r1
 800b67a:	187c      	adds	r4, r7, r1
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	230b      	movs	r3, #11
 800b680:	18fb      	adds	r3, r7, r3
 800b682:	7819      	ldrb	r1, [r3, #0]
 800b684:	002b      	movs	r3, r5
 800b686:	f7f8 fca9 	bl	8003fdc <HAL_PCD_EP_Receive>
 800b68a:	0003      	movs	r3, r0
 800b68c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b68e:	2516      	movs	r5, #22
 800b690:	197c      	adds	r4, r7, r5
 800b692:	19bb      	adds	r3, r7, r6
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	0018      	movs	r0, r3
 800b698:	f000 f839 	bl	800b70e <USBD_Get_USB_Status>
 800b69c:	0003      	movs	r3, r0
 800b69e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6a0:	197b      	adds	r3, r7, r5
 800b6a2:	781b      	ldrb	r3, [r3, #0]
}
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	b007      	add	sp, #28
 800b6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	000a      	movs	r2, r1
 800b6b6:	1cfb      	adds	r3, r7, #3
 800b6b8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	23b0      	movs	r3, #176	@ 0xb0
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	58d2      	ldr	r2, [r2, r3]
 800b6c2:	1cfb      	adds	r3, r7, #3
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	0019      	movs	r1, r3
 800b6c8:	0010      	movs	r0, r2
 800b6ca:	f7f8 fcbe 	bl	800404a <HAL_PCD_EP_GetRxCount>
 800b6ce:	0003      	movs	r3, r0
}
 800b6d0:	0018      	movs	r0, r3
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	b002      	add	sp, #8
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6e0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ec <USBD_static_malloc+0x14>)
}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b002      	add	sp, #8
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			@ (mov r8, r8)
 800b6ec:	20001360 	.word	0x20001360

0800b6f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]

}
 800b6f8:	46c0      	nop			@ (mov r8, r8)
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	b002      	add	sp, #8
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b704:	f7f6 ff5c 	bl	80025c0 <SystemClock_Config>
}
 800b708:	46c0      	nop			@ (mov r8, r8)
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	0002      	movs	r2, r0
 800b716:	1dfb      	adds	r3, r7, #7
 800b718:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b71a:	230f      	movs	r3, #15
 800b71c:	18fb      	adds	r3, r7, r3
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b722:	1dfb      	adds	r3, r7, #7
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	2b03      	cmp	r3, #3
 800b728:	d017      	beq.n	800b75a <USBD_Get_USB_Status+0x4c>
 800b72a:	dc1b      	bgt.n	800b764 <USBD_Get_USB_Status+0x56>
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d00f      	beq.n	800b750 <USBD_Get_USB_Status+0x42>
 800b730:	dc18      	bgt.n	800b764 <USBD_Get_USB_Status+0x56>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <USBD_Get_USB_Status+0x2e>
 800b736:	2b01      	cmp	r3, #1
 800b738:	d005      	beq.n	800b746 <USBD_Get_USB_Status+0x38>
 800b73a:	e013      	b.n	800b764 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b73c:	230f      	movs	r3, #15
 800b73e:	18fb      	adds	r3, r7, r3
 800b740:	2200      	movs	r2, #0
 800b742:	701a      	strb	r2, [r3, #0]
    break;
 800b744:	e013      	b.n	800b76e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b746:	230f      	movs	r3, #15
 800b748:	18fb      	adds	r3, r7, r3
 800b74a:	2202      	movs	r2, #2
 800b74c:	701a      	strb	r2, [r3, #0]
    break;
 800b74e:	e00e      	b.n	800b76e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b750:	230f      	movs	r3, #15
 800b752:	18fb      	adds	r3, r7, r3
 800b754:	2201      	movs	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
    break;
 800b758:	e009      	b.n	800b76e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b75a:	230f      	movs	r3, #15
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	2202      	movs	r2, #2
 800b760:	701a      	strb	r2, [r3, #0]
    break;
 800b762:	e004      	b.n	800b76e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b764:	230f      	movs	r3, #15
 800b766:	18fb      	adds	r3, r7, r3
 800b768:	2202      	movs	r2, #2
 800b76a:	701a      	strb	r2, [r3, #0]
    break;
 800b76c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800b76e:	230f      	movs	r3, #15
 800b770:	18fb      	adds	r3, r7, r3
 800b772:	781b      	ldrb	r3, [r3, #0]
}
 800b774:	0018      	movs	r0, r3
 800b776:	46bd      	mov	sp, r7
 800b778:	b004      	add	sp, #16
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800b77c:	b5b0      	push	{r4, r5, r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800b784:	2316      	movs	r3, #22
 800b786:	18fb      	adds	r3, r7, r3
 800b788:	2200      	movs	r2, #0
 800b78a:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800b790:	4ba0      	ldr	r3, [pc, #640]	@ (800ba14 <dwt_initialise+0x298>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2200      	movs	r2, #0
 800b796:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800b798:	4b9e      	ldr	r3, [pc, #632]	@ (800ba14 <dwt_initialise+0x298>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2200      	movs	r2, #0
 800b79e:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800b7a0:	4b9c      	ldr	r3, [pc, #624]	@ (800ba14 <dwt_initialise+0x298>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800b7a8:	4b9a      	ldr	r3, [pc, #616]	@ (800ba14 <dwt_initialise+0x298>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800b7b0:	4b98      	ldr	r3, [pc, #608]	@ (800ba14 <dwt_initialise+0x298>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800b7b8:	4b96      	ldr	r3, [pc, #600]	@ (800ba14 <dwt_initialise+0x298>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800b7c0:	4b94      	ldr	r3, [pc, #592]	@ (800ba14 <dwt_initialise+0x298>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800b7c8:	f000 f92c 	bl	800ba24 <dwt_readdevid>
 800b7cc:	0003      	movs	r3, r0
 800b7ce:	4a92      	ldr	r2, [pc, #584]	@ (800ba18 <dwt_initialise+0x29c>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d002      	beq.n	800b7da <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	425b      	negs	r3, r3
 800b7d8:	e118      	b.n	800ba0c <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2202      	movs	r2, #2
 800b7de:	4013      	ands	r3, r2
 800b7e0:	d101      	bne.n	800b7e6 <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800b7e2:	f000 ff5d 	bl	800c6a0 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	d003      	beq.n	800b7f6 <dwt_initialise+0x7a>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	22f8      	movs	r2, #248	@ 0xf8
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	d102      	bne.n	800b7fc <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f000 fd4c 	bl	800c294 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800b7fc:	2204      	movs	r2, #4
 800b7fe:	2100      	movs	r1, #0
 800b800:	2024      	movs	r0, #36	@ 0x24
 800b802:	f000 fc7f 	bl	800c104 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2202      	movs	r2, #2
 800b80a:	4013      	ands	r3, r2
 800b80c:	d118      	bne.n	800b840 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800b80e:	2004      	movs	r0, #4
 800b810:	f000 fcd2 	bl	800c1b8 <_dwt_otpread>
 800b814:	0003      	movs	r3, r0
 800b816:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	22ff      	movs	r2, #255	@ 0xff
 800b81c:	4013      	ands	r3, r2
 800b81e:	d021      	beq.n	800b864 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800b820:	2202      	movs	r2, #2
 800b822:	2112      	movs	r1, #18
 800b824:	202d      	movs	r0, #45	@ 0x2d
 800b826:	f000 fc6d 	bl	800c104 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800b82a:	4b7a      	ldr	r3, [pc, #488]	@ (800ba14 <dwt_initialise+0x298>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	8ada      	ldrh	r2, [r3, #22]
 800b830:	4b78      	ldr	r3, [pc, #480]	@ (800ba14 <dwt_initialise+0x298>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2180      	movs	r1, #128	@ 0x80
 800b836:	0149      	lsls	r1, r1, #5
 800b838:	430a      	orrs	r2, r1
 800b83a:	b292      	uxth	r2, r2
 800b83c:	82da      	strh	r2, [r3, #22]
 800b83e:	e011      	b.n	800b864 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800b840:	2130      	movs	r1, #48	@ 0x30
 800b842:	2028      	movs	r0, #40	@ 0x28
 800b844:	f000 fc00 	bl	800c048 <dwt_read32bitoffsetreg>
 800b848:	0003      	movs	r3, r0
 800b84a:	4a74      	ldr	r2, [pc, #464]	@ (800ba1c <dwt_initialise+0x2a0>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d009      	beq.n	800b864 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800b850:	4b70      	ldr	r3, [pc, #448]	@ (800ba14 <dwt_initialise+0x298>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	8ada      	ldrh	r2, [r3, #22]
 800b856:	4b6f      	ldr	r3, [pc, #444]	@ (800ba14 <dwt_initialise+0x298>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2180      	movs	r1, #128	@ 0x80
 800b85c:	0149      	lsls	r1, r1, #5
 800b85e:	430a      	orrs	r2, r1
 800b860:	b292      	uxth	r2, r2
 800b862:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	4013      	ands	r3, r2
 800b86a:	d007      	beq.n	800b87c <dwt_initialise+0x100>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	4013      	ands	r3, r2
 800b872:	d013      	beq.n	800b89c <dwt_initialise+0x120>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2208      	movs	r2, #8
 800b878:	4013      	ands	r3, r2
 800b87a:	d00f      	beq.n	800b89c <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800b87c:	201e      	movs	r0, #30
 800b87e:	f000 fc9b 	bl	800c1b8 <_dwt_otpread>
 800b882:	0002      	movs	r2, r0
 800b884:	2116      	movs	r1, #22
 800b886:	187b      	adds	r3, r7, r1
 800b888:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800b88a:	187b      	adds	r3, r7, r1
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	0a1b      	lsrs	r3, r3, #8
 800b890:	b29a      	uxth	r2, r3
 800b892:	4b60      	ldr	r3, [pc, #384]	@ (800ba14 <dwt_initialise+0x298>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	72da      	strb	r2, [r3, #11]
 800b89a:	e003      	b.n	800b8a4 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800b89c:	4b5d      	ldr	r3, [pc, #372]	@ (800ba14 <dwt_initialise+0x298>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	d10f      	bne.n	800b8cc <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800b8ac:	2116      	movs	r1, #22
 800b8ae:	187b      	adds	r3, r7, r1
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	221f      	movs	r2, #31
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	d102      	bne.n	800b8be <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800b8b8:	187b      	adds	r3, r7, r1
 800b8ba:	2210      	movs	r2, #16
 800b8bc:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800b8be:	2316      	movs	r3, #22
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	f000 ff10 	bl	800c6ec <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2210      	movs	r2, #16
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	d007      	beq.n	800b8e4 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800b8d4:	4b4f      	ldr	r3, [pc, #316]	@ (800ba14 <dwt_initialise+0x298>)
 800b8d6:	681c      	ldr	r4, [r3, #0]
 800b8d8:	2006      	movs	r0, #6
 800b8da:	f000 fc6d 	bl	800c1b8 <_dwt_otpread>
 800b8de:	0003      	movs	r3, r0
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	e003      	b.n	800b8ec <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800b8e4:	4b4b      	ldr	r3, [pc, #300]	@ (800ba14 <dwt_initialise+0x298>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	d007      	beq.n	800b904 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800b8f4:	4b47      	ldr	r3, [pc, #284]	@ (800ba14 <dwt_initialise+0x298>)
 800b8f6:	681c      	ldr	r4, [r3, #0]
 800b8f8:	2007      	movs	r0, #7
 800b8fa:	f000 fc5d 	bl	800c1b8 <_dwt_otpread>
 800b8fe:	0003      	movs	r3, r0
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	e003      	b.n	800b90c <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800b904:	4b43      	ldr	r3, [pc, #268]	@ (800ba14 <dwt_initialise+0x298>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2200      	movs	r2, #0
 800b90a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2240      	movs	r2, #64	@ 0x40
 800b910:	4013      	ands	r3, r2
 800b912:	d008      	beq.n	800b926 <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800b914:	2008      	movs	r0, #8
 800b916:	f000 fc4f 	bl	800c1b8 <_dwt_otpread>
 800b91a:	0002      	movs	r2, r0
 800b91c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba14 <dwt_initialise+0x298>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	b2d2      	uxtb	r2, r2
 800b922:	721a      	strb	r2, [r3, #8]
 800b924:	e003      	b.n	800b92e <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800b926:	4b3b      	ldr	r3, [pc, #236]	@ (800ba14 <dwt_initialise+0x298>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2200      	movs	r2, #0
 800b92c:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2280      	movs	r2, #128	@ 0x80
 800b932:	4013      	ands	r3, r2
 800b934:	d008      	beq.n	800b948 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800b936:	2009      	movs	r0, #9
 800b938:	f000 fc3e 	bl	800c1b8 <_dwt_otpread>
 800b93c:	0002      	movs	r2, r0
 800b93e:	4b35      	ldr	r3, [pc, #212]	@ (800ba14 <dwt_initialise+0x298>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	b2d2      	uxtb	r2, r2
 800b944:	725a      	strb	r2, [r3, #9]
 800b946:	e003      	b.n	800b950 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800b948:	4b32      	ldr	r3, [pc, #200]	@ (800ba14 <dwt_initialise+0x298>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2200      	movs	r2, #0
 800b94e:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2202      	movs	r2, #2
 800b954:	4013      	ands	r3, r2
 800b956:	d127      	bne.n	800b9a8 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	4013      	ands	r3, r2
 800b95e:	d00c      	beq.n	800b97a <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800b960:	f000 fc82 	bl	800c268 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800b964:	4b2b      	ldr	r3, [pc, #172]	@ (800ba14 <dwt_initialise+0x298>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	8ada      	ldrh	r2, [r3, #22]
 800b96a:	4b2a      	ldr	r3, [pc, #168]	@ (800ba14 <dwt_initialise+0x298>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2180      	movs	r1, #128	@ 0x80
 800b970:	0109      	lsls	r1, r1, #4
 800b972:	430a      	orrs	r2, r1
 800b974:	b292      	uxth	r2, r2
 800b976:	82da      	strh	r2, [r3, #22]
 800b978:	e024      	b.n	800b9c4 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800b97a:	250e      	movs	r5, #14
 800b97c:	197c      	adds	r4, r7, r5
 800b97e:	2105      	movs	r1, #5
 800b980:	2036      	movs	r0, #54	@ 0x36
 800b982:	f000 fb88 	bl	800c096 <dwt_read16bitoffsetreg>
 800b986:	0003      	movs	r3, r0
 800b988:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800b98a:	0028      	movs	r0, r5
 800b98c:	183b      	adds	r3, r7, r0
 800b98e:	183a      	adds	r2, r7, r0
 800b990:	8812      	ldrh	r2, [r2, #0]
 800b992:	4923      	ldr	r1, [pc, #140]	@ (800ba20 <dwt_initialise+0x2a4>)
 800b994:	400a      	ands	r2, r1
 800b996:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800b998:	183b      	adds	r3, r7, r0
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	001a      	movs	r2, r3
 800b99e:	2105      	movs	r1, #5
 800b9a0:	2036      	movs	r0, #54	@ 0x36
 800b9a2:	f000 fbc2 	bl	800c12a <dwt_write16bitoffsetreg>
 800b9a6:	e00d      	b.n	800b9c4 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2204      	movs	r2, #4
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d109      	bne.n	800b9c4 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800b9b0:	4b18      	ldr	r3, [pc, #96]	@ (800ba14 <dwt_initialise+0x298>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	8ada      	ldrh	r2, [r3, #22]
 800b9b6:	4b17      	ldr	r3, [pc, #92]	@ (800ba14 <dwt_initialise+0x298>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2180      	movs	r1, #128	@ 0x80
 800b9bc:	0109      	lsls	r1, r1, #4
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	b292      	uxth	r2, r2
 800b9c2:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f000 fc65 	bl	800c294 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	210a      	movs	r1, #10
 800b9ce:	202c      	movs	r0, #44	@ 0x2c
 800b9d0:	f000 fb98 	bl	800c104 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800b9d4:	4b0f      	ldr	r3, [pc, #60]	@ (800ba14 <dwt_initialise+0x298>)
 800b9d6:	681c      	ldr	r4, [r3, #0]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	2004      	movs	r0, #4
 800b9dc:	f000 fb34 	bl	800c048 <dwt_read32bitoffsetreg>
 800b9e0:	0003      	movs	r3, r0
 800b9e2:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800b9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800ba14 <dwt_initialise+0x298>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	0c1b      	lsrs	r3, r3, #16
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ba14 <dwt_initialise+0x298>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2103      	movs	r1, #3
 800b9f4:	400a      	ands	r2, r1
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800b9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <dwt_initialise+0x298>)
 800b9fc:	681c      	ldr	r4, [r3, #0]
 800b9fe:	2100      	movs	r1, #0
 800ba00:	2008      	movs	r0, #8
 800ba02:	f000 fb21 	bl	800c048 <dwt_read32bitoffsetreg>
 800ba06:	0003      	movs	r3, r0
 800ba08:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800ba0a:	2300      	movs	r3, #0

} // end dwt_initialise()
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	b006      	add	sp, #24
 800ba12:	bdb0      	pop	{r4, r5, r7, pc}
 800ba14:	200001bc 	.word	0x200001bc
 800ba18:	deca0130 	.word	0xdeca0130
 800ba1c:	88888888 	.word	0x88888888
 800ba20:	fffffdff 	.word	0xfffffdff

0800ba24 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f000 fb0c 	bl	800c048 <dwt_read32bitoffsetreg>
 800ba30:	0003      	movs	r3, r0
}
 800ba32:	0018      	movs	r0, r3
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800ba38:	b5b0      	push	{r4, r5, r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800ba40:	2317      	movs	r3, #23
 800ba42:	18fb      	adds	r3, r7, r3
 800ba44:	2200      	movs	r2, #0
 800ba46:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800ba48:	2316      	movs	r3, #22
 800ba4a:	18fb      	adds	r3, r7, r3
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800ba50:	2013      	movs	r0, #19
 800ba52:	183b      	adds	r3, r7, r0
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	7812      	ldrb	r2, [r2, #0]
 800ba58:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	795b      	ldrb	r3, [r3, #5]
 800ba5e:	0019      	movs	r1, r3
 800ba60:	2314      	movs	r3, #20
 800ba62:	18fb      	adds	r3, r7, r3
 800ba64:	4ab6      	ldr	r2, [pc, #728]	@ (800bd40 <dwt_configure+0x308>)
 800ba66:	0049      	lsls	r1, r1, #1
 800ba68:	5a8a      	ldrh	r2, [r1, r2]
 800ba6a:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	785a      	ldrb	r2, [r3, #1]
 800ba70:	2312      	movs	r3, #18
 800ba72:	18fb      	adds	r3, r7, r3
 800ba74:	3a01      	subs	r2, #1
 800ba76:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800ba78:	183b      	adds	r3, r7, r0
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d003      	beq.n	800ba88 <dwt_configure+0x50>
 800ba80:	183b      	adds	r3, r7, r0
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b07      	cmp	r3, #7
 800ba86:	d101      	bne.n	800ba8c <dwt_configure+0x54>
 800ba88:	2201      	movs	r2, #1
 800ba8a:	e000      	b.n	800ba8e <dwt_configure+0x56>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2311      	movs	r3, #17
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	79db      	ldrb	r3, [r3, #7]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10f      	bne.n	800babc <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800ba9c:	4ba9      	ldr	r3, [pc, #676]	@ (800bd44 <dwt_configure+0x30c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	691a      	ldr	r2, [r3, #16]
 800baa2:	4ba8      	ldr	r3, [pc, #672]	@ (800bd44 <dwt_configure+0x30c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2180      	movs	r1, #128	@ 0x80
 800baa8:	03c9      	lsls	r1, r1, #15
 800baaa:	430a      	orrs	r2, r1
 800baac:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800baae:	2214      	movs	r2, #20
 800bab0:	18bb      	adds	r3, r7, r2
 800bab2:	18ba      	adds	r2, r7, r2
 800bab4:	8812      	ldrh	r2, [r2, #0]
 800bab6:	08d2      	lsrs	r2, r2, #3
 800bab8:	801a      	strh	r2, [r3, #0]
 800baba:	e007      	b.n	800bacc <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800babc:	4ba1      	ldr	r3, [pc, #644]	@ (800bd44 <dwt_configure+0x30c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	691a      	ldr	r2, [r3, #16]
 800bac2:	4ba0      	ldr	r3, [pc, #640]	@ (800bd44 <dwt_configure+0x30c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	49a0      	ldr	r1, [pc, #640]	@ (800bd48 <dwt_configure+0x310>)
 800bac8:	400a      	ands	r2, r1
 800baca:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800bacc:	4b9d      	ldr	r3, [pc, #628]	@ (800bd44 <dwt_configure+0x30c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	7a12      	ldrb	r2, [r2, #8]
 800bad4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800bad6:	4b9b      	ldr	r3, [pc, #620]	@ (800bd44 <dwt_configure+0x30c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	691a      	ldr	r2, [r3, #16]
 800badc:	4b99      	ldr	r3, [pc, #612]	@ (800bd44 <dwt_configure+0x30c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	499a      	ldr	r1, [pc, #616]	@ (800bd4c <dwt_configure+0x314>)
 800bae2:	400a      	ands	r2, r1
 800bae4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800bae6:	4b97      	ldr	r3, [pc, #604]	@ (800bd44 <dwt_configure+0x30c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	6919      	ldr	r1, [r3, #16]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7a1b      	ldrb	r3, [r3, #8]
 800baf0:	041a      	lsls	r2, r3, #16
 800baf2:	23c0      	movs	r3, #192	@ 0xc0
 800baf4:	029b      	lsls	r3, r3, #10
 800baf6:	401a      	ands	r2, r3
 800baf8:	4b92      	ldr	r3, [pc, #584]	@ (800bd44 <dwt_configure+0x30c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800bb00:	4b90      	ldr	r3, [pc, #576]	@ (800bd44 <dwt_configure+0x30c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	001a      	movs	r2, r3
 800bb08:	2100      	movs	r1, #0
 800bb0a:	2004      	movs	r0, #4
 800bb0c:	f000 fb2d 	bl	800c16a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800bb10:	2314      	movs	r3, #20
 800bb12:	18fb      	adds	r3, r7, r3
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	498e      	ldr	r1, [pc, #568]	@ (800bd50 <dwt_configure+0x318>)
 800bb18:	001a      	movs	r2, r3
 800bb1a:	202e      	movs	r0, #46	@ 0x2e
 800bb1c:	f000 fb05 	bl	800c12a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800bb20:	2512      	movs	r5, #18
 800bb22:	197b      	adds	r3, r7, r5
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	0018      	movs	r0, r3
 800bb28:	f000 fb78 	bl	800c21c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800bb2c:	2413      	movs	r4, #19
 800bb2e:	193b      	adds	r3, r7, r4
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	4a88      	ldr	r2, [pc, #544]	@ (800bd54 <dwt_configure+0x31c>)
 800bb34:	5cd3      	ldrb	r3, [r2, r3]
 800bb36:	001a      	movs	r2, r3
 800bb38:	4b87      	ldr	r3, [pc, #540]	@ (800bd58 <dwt_configure+0x320>)
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	58d3      	ldr	r3, [r2, r3]
 800bb3e:	001a      	movs	r2, r3
 800bb40:	2107      	movs	r1, #7
 800bb42:	202b      	movs	r0, #43	@ 0x2b
 800bb44:	f000 fb11 	bl	800c16a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800bb48:	193b      	adds	r3, r7, r4
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	4a81      	ldr	r2, [pc, #516]	@ (800bd54 <dwt_configure+0x31c>)
 800bb4e:	5cd3      	ldrb	r3, [r2, r3]
 800bb50:	001a      	movs	r2, r3
 800bb52:	4b82      	ldr	r3, [pc, #520]	@ (800bd5c <dwt_configure+0x324>)
 800bb54:	5c9b      	ldrb	r3, [r3, r2]
 800bb56:	001a      	movs	r2, r3
 800bb58:	210b      	movs	r1, #11
 800bb5a:	202b      	movs	r0, #43	@ 0x2b
 800bb5c:	f000 fad2 	bl	800c104 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800bb60:	2311      	movs	r3, #17
 800bb62:	18fb      	adds	r3, r7, r3
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	4a7e      	ldr	r2, [pc, #504]	@ (800bd60 <dwt_configure+0x328>)
 800bb68:	5cd3      	ldrb	r3, [r2, r3]
 800bb6a:	001a      	movs	r2, r3
 800bb6c:	210b      	movs	r1, #11
 800bb6e:	2028      	movs	r0, #40	@ 0x28
 800bb70:	f000 fac8 	bl	800c104 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800bb74:	193b      	adds	r3, r7, r4
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	4a76      	ldr	r2, [pc, #472]	@ (800bd54 <dwt_configure+0x31c>)
 800bb7a:	5cd3      	ldrb	r3, [r2, r3]
 800bb7c:	001a      	movs	r2, r3
 800bb7e:	4b79      	ldr	r3, [pc, #484]	@ (800bd64 <dwt_configure+0x32c>)
 800bb80:	0092      	lsls	r2, r2, #2
 800bb82:	58d3      	ldr	r3, [r2, r3]
 800bb84:	001a      	movs	r2, r3
 800bb86:	210c      	movs	r1, #12
 800bb88:	2028      	movs	r0, #40	@ 0x28
 800bb8a:	f000 faee 	bl	800c16a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	79db      	ldrb	r3, [r3, #7]
 800bb92:	001a      	movs	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	799b      	ldrb	r3, [r3, #6]
 800bb98:	0019      	movs	r1, r3
 800bb9a:	4b73      	ldr	r3, [pc, #460]	@ (800bd68 <dwt_configure+0x330>)
 800bb9c:	0052      	lsls	r2, r2, #1
 800bb9e:	1852      	adds	r2, r2, r1
 800bba0:	0052      	lsls	r2, r2, #1
 800bba2:	5ad3      	ldrh	r3, [r2, r3]
 800bba4:	001a      	movs	r2, r3
 800bba6:	2102      	movs	r1, #2
 800bba8:	2027      	movs	r0, #39	@ 0x27
 800bbaa:	f000 fabe 	bl	800c12a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800bbae:	197b      	adds	r3, r7, r5
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	4b6e      	ldr	r3, [pc, #440]	@ (800bd6c <dwt_configure+0x334>)
 800bbb4:	0052      	lsls	r2, r2, #1
 800bbb6:	5ad3      	ldrh	r3, [r2, r3]
 800bbb8:	001a      	movs	r2, r3
 800bbba:	2104      	movs	r1, #4
 800bbbc:	2027      	movs	r0, #39	@ 0x27
 800bbbe:	f000 fab4 	bl	800c12a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	79db      	ldrb	r3, [r3, #7]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d105      	bne.n	800bbd6 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800bbca:	2264      	movs	r2, #100	@ 0x64
 800bbcc:	2106      	movs	r1, #6
 800bbce:	2027      	movs	r0, #39	@ 0x27
 800bbd0:	f000 faab 	bl	800c12a <dwt_write16bitoffsetreg>
 800bbd4:	e018      	b.n	800bc08 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	789b      	ldrb	r3, [r3, #2]
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d10a      	bne.n	800bbf4 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800bbde:	2210      	movs	r2, #16
 800bbe0:	2106      	movs	r1, #6
 800bbe2:	2027      	movs	r0, #39	@ 0x27
 800bbe4:	f000 faa1 	bl	800c12a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800bbe8:	2210      	movs	r2, #16
 800bbea:	2126      	movs	r1, #38	@ 0x26
 800bbec:	2027      	movs	r0, #39	@ 0x27
 800bbee:	f000 fa89 	bl	800c104 <dwt_write8bitoffsetreg>
 800bbf2:	e009      	b.n	800bc08 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	2106      	movs	r1, #6
 800bbf8:	2027      	movs	r0, #39	@ 0x27
 800bbfa:	f000 fa96 	bl	800c12a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800bbfe:	2228      	movs	r2, #40	@ 0x28
 800bc00:	2126      	movs	r1, #38	@ 0x26
 800bc02:	2027      	movs	r0, #39	@ 0x27
 800bc04:	f000 fa7e 	bl	800c104 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800bc08:	2312      	movs	r3, #18
 800bc0a:	18fb      	adds	r3, r7, r3
 800bc0c:	781a      	ldrb	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	78db      	ldrb	r3, [r3, #3]
 800bc12:	0019      	movs	r1, r3
 800bc14:	4b56      	ldr	r3, [pc, #344]	@ (800bd70 <dwt_configure+0x338>)
 800bc16:	0092      	lsls	r2, r2, #2
 800bc18:	1852      	adds	r2, r2, r1
 800bc1a:	0092      	lsls	r2, r2, #2
 800bc1c:	58d3      	ldr	r3, [r2, r3]
 800bc1e:	001a      	movs	r2, r3
 800bc20:	2108      	movs	r1, #8
 800bc22:	2027      	movs	r0, #39	@ 0x27
 800bc24:	f000 faa1 	bl	800c16a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	895b      	ldrh	r3, [r3, #10]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a50      	ldr	r2, [pc, #320]	@ (800bd74 <dwt_configure+0x33c>)
 800bc34:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	895b      	ldrh	r3, [r3, #10]
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	2120      	movs	r1, #32
 800bc3e:	2027      	movs	r0, #39	@ 0x27
 800bc40:	f000 fa73 	bl	800c12a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800bc44:	4b4c      	ldr	r3, [pc, #304]	@ (800bd78 <dwt_configure+0x340>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	001a      	movs	r2, r3
 800bc4a:	210c      	movs	r1, #12
 800bc4c:	2023      	movs	r0, #35	@ 0x23
 800bc4e:	f000 fa8c 	bl	800c16a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800bc52:	2312      	movs	r3, #18
 800bc54:	18fb      	adds	r3, r7, r3
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	4a47      	ldr	r2, [pc, #284]	@ (800bd78 <dwt_configure+0x340>)
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	18d3      	adds	r3, r2, r3
 800bc5e:	3304      	adds	r3, #4
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	001a      	movs	r2, r3
 800bc64:	2104      	movs	r1, #4
 800bc66:	2023      	movs	r0, #35	@ 0x23
 800bc68:	f000 fa5f 	bl	800c12a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	799b      	ldrb	r3, [r3, #6]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d011      	beq.n	800bc98 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	79db      	ldrb	r3, [r3, #7]
 800bc78:	001a      	movs	r2, r3
 800bc7a:	4b40      	ldr	r3, [pc, #256]	@ (800bd7c <dwt_configure+0x344>)
 800bc7c:	5c9b      	ldrb	r3, [r3, r2]
 800bc7e:	001a      	movs	r2, r3
 800bc80:	2100      	movs	r1, #0
 800bc82:	2021      	movs	r0, #33	@ 0x21
 800bc84:	f000 fa3e 	bl	800c104 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800bc88:	2317      	movs	r3, #23
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800bc90:	2316      	movs	r3, #22
 800bc92:	18fb      	adds	r3, r7, r3
 800bc94:	2201      	movs	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bc98:	2113      	movs	r1, #19
 800bc9a:	187b      	adds	r3, r7, r1
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	220f      	movs	r2, #15
 800bca0:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bca2:	187b      	adds	r3, r7, r1
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	21ff      	movs	r1, #255	@ 0xff
 800bcaa:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bcac:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	785b      	ldrb	r3, [r3, #1]
 800bcb2:	0499      	lsls	r1, r3, #18
 800bcb4:	23c0      	movs	r3, #192	@ 0xc0
 800bcb6:	031b      	lsls	r3, r3, #12
 800bcb8:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bcba:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800bcbc:	2317      	movs	r3, #23
 800bcbe:	18fb      	adds	r3, r7, r3
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	0519      	lsls	r1, r3, #20
 800bcc4:	23c0      	movs	r3, #192	@ 0xc0
 800bcc6:	039b      	lsls	r3, r3, #14
 800bcc8:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800bcca:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bccc:	2316      	movs	r3, #22
 800bcce:	18fb      	adds	r3, r7, r3
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	0459      	lsls	r1, r3, #17
 800bcd4:	2380      	movs	r3, #128	@ 0x80
 800bcd6:	029b      	lsls	r3, r3, #10
 800bcd8:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800bcda:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	791b      	ldrb	r3, [r3, #4]
 800bce0:	0599      	lsls	r1, r3, #22
 800bce2:	23f8      	movs	r3, #248	@ 0xf8
 800bce4:	04db      	lsls	r3, r3, #19
 800bce6:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bce8:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	795b      	ldrb	r3, [r3, #5]
 800bcee:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	001a      	movs	r2, r3
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	201f      	movs	r0, #31
 800bcfc:	f000 fa35 	bl	800c16a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	789a      	ldrb	r2, [r3, #2]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	785b      	ldrb	r3, [r3, #1]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	0419      	lsls	r1, r3, #16
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	79db      	ldrb	r3, [r3, #7]
 800bd12:	035a      	lsls	r2, r3, #13
 800bd14:	4b0b      	ldr	r3, [pc, #44]	@ (800bd44 <dwt_configure+0x30c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800bd1c:	4b09      	ldr	r3, [pc, #36]	@ (800bd44 <dwt_configure+0x30c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	001a      	movs	r2, r3
 800bd24:	2100      	movs	r1, #0
 800bd26:	2008      	movs	r0, #8
 800bd28:	f000 fa1f 	bl	800c16a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800bd2c:	2242      	movs	r2, #66	@ 0x42
 800bd2e:	2100      	movs	r1, #0
 800bd30:	200d      	movs	r0, #13
 800bd32:	f000 f9e7 	bl	800c104 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	b006      	add	sp, #24
 800bd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	0800ce3c 	.word	0x0800ce3c
 800bd44:	200001bc 	.word	0x200001bc
 800bd48:	ffbfffff 	.word	0xffbfffff
 800bd4c:	fffcffff 	.word	0xfffcffff
 800bd50:	00002804 	.word	0x00002804
 800bd54:	0800cdbc 	.word	0x0800cdbc
 800bd58:	0800cddc 	.word	0x0800cddc
 800bd5c:	0800cdf4 	.word	0x0800cdf4
 800bd60:	0800cdfc 	.word	0x0800cdfc
 800bd64:	0800cdc4 	.word	0x0800cdc4
 800bd68:	0800ce0c 	.word	0x0800ce0c
 800bd6c:	0800ce18 	.word	0x0800ce18
 800bd70:	0800ce1c 	.word	0x0800ce1c
 800bd74:	00001041 	.word	0x00001041
 800bd78:	0800ce00 	.word	0x0800ce00
 800bd7c:	0800ce08 	.word	0x0800ce08

0800bd80 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	0002      	movs	r2, r0
 800bd88:	1dbb      	adds	r3, r7, #6
 800bd8a:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800bd8c:	1dbb      	adds	r3, r7, #6
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	4904      	ldr	r1, [pc, #16]	@ (800bda4 <dwt_setrxantennadelay+0x24>)
 800bd92:	001a      	movs	r2, r3
 800bd94:	202e      	movs	r0, #46	@ 0x2e
 800bd96:	f000 f9c8 	bl	800c12a <dwt_write16bitoffsetreg>
}
 800bd9a:	46c0      	nop			@ (mov r8, r8)
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	b002      	add	sp, #8
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	46c0      	nop			@ (mov r8, r8)
 800bda4:	00001804 	.word	0x00001804

0800bda8 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	0002      	movs	r2, r0
 800bdb0:	1dbb      	adds	r3, r7, #6
 800bdb2:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800bdb4:	1dbb      	adds	r3, r7, #6
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	001a      	movs	r2, r3
 800bdba:	2100      	movs	r1, #0
 800bdbc:	2018      	movs	r0, #24
 800bdbe:	f000 f9b4 	bl	800c12a <dwt_write16bitoffsetreg>
}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	b002      	add	sp, #8
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	0011      	movs	r1, r2
 800bdd4:	1dbb      	adds	r3, r7, #6
 800bdd6:	1c02      	adds	r2, r0, #0
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	1d3b      	adds	r3, r7, #4
 800bddc:	1c0a      	adds	r2, r1, #0
 800bdde:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800bde0:	1d3b      	adds	r3, r7, #4
 800bde2:	881a      	ldrh	r2, [r3, #0]
 800bde4:	1dbb      	adds	r3, r7, #6
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	18d2      	adds	r2, r2, r3
 800bdea:	2380      	movs	r3, #128	@ 0x80
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	dc0d      	bgt.n	800be0e <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800bdf2:	1dbb      	adds	r3, r7, #6
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	3b02      	subs	r3, #2
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	1d3b      	adds	r3, r7, #4
 800bdfe:	8819      	ldrh	r1, [r3, #0]
 800be00:	0013      	movs	r3, r2
 800be02:	0002      	movs	r2, r0
 800be04:	2009      	movs	r0, #9
 800be06:	f000 f862 	bl	800bece <dwt_writetodevice>
        return DWT_SUCCESS;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e001      	b.n	800be12 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800be12:	0018      	movs	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	b002      	add	sp, #8
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	603a      	str	r2, [r7, #0]
 800be24:	1dbb      	adds	r3, r7, #6
 800be26:	1c02      	adds	r2, r0, #0
 800be28:	801a      	strh	r2, [r3, #0]
 800be2a:	1d3b      	adds	r3, r7, #4
 800be2c:	1c0a      	adds	r2, r1, #0
 800be2e:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800be30:	4b0b      	ldr	r3, [pc, #44]	@ (800be60 <dwt_writetxfctrl+0x44>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	1dbb      	adds	r3, r7, #6
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	1d3b      	adds	r3, r7, #4
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	059b      	lsls	r3, r3, #22
 800be42:	431a      	orrs	r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	03db      	lsls	r3, r3, #15
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	001a      	movs	r2, r3
 800be50:	2100      	movs	r1, #0
 800be52:	2008      	movs	r0, #8
 800be54:	f000 f989 	bl	800c16a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800be58:	46c0      	nop			@ (mov r8, r8)
 800be5a:	46bd      	mov	sp, r7
 800be5c:	b004      	add	sp, #16
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200001bc 	.word	0x200001bc

0800be64 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	0008      	movs	r0, r1
 800be6e:	0011      	movs	r1, r2
 800be70:	1cbb      	adds	r3, r7, #2
 800be72:	1c02      	adds	r2, r0, #0
 800be74:	801a      	strh	r2, [r3, #0]
 800be76:	003b      	movs	r3, r7
 800be78:	1c0a      	adds	r2, r1, #0
 800be7a:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800be7c:	1cbb      	adds	r3, r7, #2
 800be7e:	881a      	ldrh	r2, [r3, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	003b      	movs	r3, r7
 800be84:	8819      	ldrh	r1, [r3, #0]
 800be86:	0003      	movs	r3, r0
 800be88:	2011      	movs	r0, #17
 800be8a:	f000 f881 	bl	800bf90 <dwt_readfromdevice>
}
 800be8e:	46c0      	nop			@ (mov r8, r8)
 800be90:	46bd      	mov	sp, r7
 800be92:	b002      	add	sp, #8
 800be94:	bd80      	pop	{r7, pc}

0800be96 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b082      	sub	sp, #8
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2205      	movs	r2, #5
 800bea2:	2100      	movs	r1, #0
 800bea4:	2017      	movs	r0, #23
 800bea6:	f000 f873 	bl	800bf90 <dwt_readfromdevice>
}
 800beaa:	46c0      	nop			@ (mov r8, r8)
 800beac:	46bd      	mov	sp, r7
 800beae:	b002      	add	sp, #8
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2205      	movs	r2, #5
 800bebe:	2100      	movs	r1, #0
 800bec0:	2015      	movs	r0, #21
 800bec2:	f000 f865 	bl	800bf90 <dwt_readfromdevice>
}
 800bec6:	46c0      	nop			@ (mov r8, r8)
 800bec8:	46bd      	mov	sp, r7
 800beca:	b002      	add	sp, #8
 800becc:	bd80      	pop	{r7, pc}

0800bece <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800bece:	b590      	push	{r4, r7, lr}
 800bed0:	b087      	sub	sp, #28
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60ba      	str	r2, [r7, #8]
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	240e      	movs	r4, #14
 800beda:	193b      	adds	r3, r7, r4
 800bedc:	1c02      	adds	r2, r0, #0
 800bede:	801a      	strh	r2, [r3, #0]
 800bee0:	200c      	movs	r0, #12
 800bee2:	183b      	adds	r3, r7, r0
 800bee4:	1c0a      	adds	r2, r1, #0
 800bee6:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800bee8:	2300      	movs	r3, #0
 800beea:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800beec:	183b      	adds	r3, r7, r0
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10d      	bne.n	800bf10 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800bef4:	193b      	adds	r3, r7, r4
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	1c59      	adds	r1, r3, #1
 800befe:	6179      	str	r1, [r7, #20]
 800bf00:	2180      	movs	r1, #128	@ 0x80
 800bf02:	4249      	negs	r1, r1
 800bf04:	430a      	orrs	r2, r1
 800bf06:	b2d1      	uxtb	r1, r2
 800bf08:	2210      	movs	r2, #16
 800bf0a:	18ba      	adds	r2, r7, r2
 800bf0c:	54d1      	strb	r1, [r2, r3]
 800bf0e:	e033      	b.n	800bf78 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800bf10:	230e      	movs	r3, #14
 800bf12:	18fb      	adds	r3, r7, r3
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	1c59      	adds	r1, r3, #1
 800bf1c:	6179      	str	r1, [r7, #20]
 800bf1e:	2140      	movs	r1, #64	@ 0x40
 800bf20:	4249      	negs	r1, r1
 800bf22:	430a      	orrs	r2, r1
 800bf24:	b2d1      	uxtb	r1, r2
 800bf26:	2010      	movs	r0, #16
 800bf28:	183a      	adds	r2, r7, r0
 800bf2a:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800bf2c:	210c      	movs	r1, #12
 800bf2e:	187b      	adds	r3, r7, r1
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf34:	d808      	bhi.n	800bf48 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	1c5a      	adds	r2, r3, #1
 800bf3a:	617a      	str	r2, [r7, #20]
 800bf3c:	187a      	adds	r2, r7, r1
 800bf3e:	8812      	ldrh	r2, [r2, #0]
 800bf40:	b2d1      	uxtb	r1, r2
 800bf42:	183a      	adds	r2, r7, r0
 800bf44:	54d1      	strb	r1, [r2, r3]
 800bf46:	e017      	b.n	800bf78 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800bf48:	200c      	movs	r0, #12
 800bf4a:	183b      	adds	r3, r7, r0
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	1c59      	adds	r1, r3, #1
 800bf54:	6179      	str	r1, [r7, #20]
 800bf56:	2180      	movs	r1, #128	@ 0x80
 800bf58:	4249      	negs	r1, r1
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	b2d1      	uxtb	r1, r2
 800bf5e:	2410      	movs	r4, #16
 800bf60:	193a      	adds	r2, r7, r4
 800bf62:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800bf64:	183b      	adds	r3, r7, r0
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	09db      	lsrs	r3, r3, #7
 800bf6a:	b299      	uxth	r1, r3
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	617a      	str	r2, [r7, #20]
 800bf72:	b2c9      	uxtb	r1, r1
 800bf74:	193a      	adds	r2, r7, r4
 800bf76:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	b298      	uxth	r0, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	2110      	movs	r1, #16
 800bf82:	1879      	adds	r1, r7, r1
 800bf84:	f000 fbfa 	bl	800c77c <writetospi>
} // end dwt_writetodevice()
 800bf88:	46c0      	nop			@ (mov r8, r8)
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b007      	add	sp, #28
 800bf8e:	bd90      	pop	{r4, r7, pc}

0800bf90 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60ba      	str	r2, [r7, #8]
 800bf98:	607b      	str	r3, [r7, #4]
 800bf9a:	240e      	movs	r4, #14
 800bf9c:	193b      	adds	r3, r7, r4
 800bf9e:	1c02      	adds	r2, r0, #0
 800bfa0:	801a      	strh	r2, [r3, #0]
 800bfa2:	200c      	movs	r0, #12
 800bfa4:	183b      	adds	r3, r7, r0
 800bfa6:	1c0a      	adds	r2, r1, #0
 800bfa8:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800bfae:	183b      	adds	r3, r7, r0
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d109      	bne.n	800bfca <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	617a      	str	r2, [r7, #20]
 800bfbc:	193a      	adds	r2, r7, r4
 800bfbe:	8812      	ldrh	r2, [r2, #0]
 800bfc0:	b2d1      	uxtb	r1, r2
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	18ba      	adds	r2, r7, r2
 800bfc6:	54d1      	strb	r1, [r2, r3]
 800bfc8:	e032      	b.n	800c030 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800bfca:	230e      	movs	r3, #14
 800bfcc:	18fb      	adds	r3, r7, r3
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	1c59      	adds	r1, r3, #1
 800bfd6:	6179      	str	r1, [r7, #20]
 800bfd8:	2140      	movs	r1, #64	@ 0x40
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	b2d1      	uxtb	r1, r2
 800bfde:	2010      	movs	r0, #16
 800bfe0:	183a      	adds	r2, r7, r0
 800bfe2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800bfe4:	210c      	movs	r1, #12
 800bfe6:	187b      	adds	r3, r7, r1
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfec:	d808      	bhi.n	800c000 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	617a      	str	r2, [r7, #20]
 800bff4:	187a      	adds	r2, r7, r1
 800bff6:	8812      	ldrh	r2, [r2, #0]
 800bff8:	b2d1      	uxtb	r1, r2
 800bffa:	183a      	adds	r2, r7, r0
 800bffc:	54d1      	strb	r1, [r2, r3]
 800bffe:	e017      	b.n	800c030 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800c000:	200c      	movs	r0, #12
 800c002:	183b      	adds	r3, r7, r0
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	1c59      	adds	r1, r3, #1
 800c00c:	6179      	str	r1, [r7, #20]
 800c00e:	2180      	movs	r1, #128	@ 0x80
 800c010:	4249      	negs	r1, r1
 800c012:	430a      	orrs	r2, r1
 800c014:	b2d1      	uxtb	r1, r2
 800c016:	2410      	movs	r4, #16
 800c018:	193a      	adds	r2, r7, r4
 800c01a:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800c01c:	183b      	adds	r3, r7, r0
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	09db      	lsrs	r3, r3, #7
 800c022:	b299      	uxth	r1, r3
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	617a      	str	r2, [r7, #20]
 800c02a:	b2c9      	uxtb	r1, r1
 800c02c:	193a      	adds	r2, r7, r4
 800c02e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	b298      	uxth	r0, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	2110      	movs	r1, #16
 800c03a:	1879      	adds	r1, r7, r1
 800c03c:	f000 fbd6 	bl	800c7ec <readfromspi>
} // end dwt_readfromdevice()
 800c040:	46c0      	nop			@ (mov r8, r8)
 800c042:	46bd      	mov	sp, r7
 800c044:	b007      	add	sp, #28
 800c046:	bd90      	pop	{r4, r7, pc}

0800c048 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800c052:	2300      	movs	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	b298      	uxth	r0, r3
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	b299      	uxth	r1, r3
 800c05e:	230c      	movs	r3, #12
 800c060:	18fb      	adds	r3, r7, r3
 800c062:	2204      	movs	r2, #4
 800c064:	f7ff ff94 	bl	800bf90 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800c068:	2303      	movs	r3, #3
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	e00b      	b.n	800c086 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	021b      	lsls	r3, r3, #8
 800c072:	220c      	movs	r2, #12
 800c074:	18b9      	adds	r1, r7, r2
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	188a      	adds	r2, r1, r2
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	189b      	adds	r3, r3, r2
 800c07e:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	3b01      	subs	r3, #1
 800c084:	613b      	str	r3, [r7, #16]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	daf0      	bge.n	800c06e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800c08c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800c08e:	0018      	movs	r0, r3
 800c090:	46bd      	mov	sp, r7
 800c092:	b006      	add	sp, #24
 800c094:	bd80      	pop	{r7, pc}

0800c096 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800c096:	b5b0      	push	{r4, r5, r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800c0a0:	240e      	movs	r4, #14
 800c0a2:	193b      	adds	r3, r7, r4
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	b298      	uxth	r0, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	b299      	uxth	r1, r3
 800c0b0:	250c      	movs	r5, #12
 800c0b2:	197b      	adds	r3, r7, r5
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	f7ff ff6b 	bl	800bf90 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800c0ba:	0029      	movs	r1, r5
 800c0bc:	187b      	adds	r3, r7, r1
 800c0be:	785b      	ldrb	r3, [r3, #1]
 800c0c0:	021b      	lsls	r3, r3, #8
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	187b      	adds	r3, r7, r1
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	0019      	movs	r1, r3
 800c0ca:	193b      	adds	r3, r7, r4
 800c0cc:	1852      	adds	r2, r2, r1
 800c0ce:	801a      	strh	r2, [r3, #0]
    return regval ;
 800c0d0:	193b      	adds	r3, r7, r4
 800c0d2:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	b004      	add	sp, #16
 800c0da:	bdb0      	pop	{r4, r5, r7, pc}

0800c0dc <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	b298      	uxth	r0, r3
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	b299      	uxth	r1, r3
 800c0ee:	240f      	movs	r4, #15
 800c0f0:	193b      	adds	r3, r7, r4
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f7ff ff4c 	bl	800bf90 <dwt_readfromdevice>

    return regval ;
 800c0f8:	193b      	adds	r3, r7, r4
 800c0fa:	781b      	ldrb	r3, [r3, #0]
}
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	46bd      	mov	sp, r7
 800c100:	b005      	add	sp, #20
 800c102:	bd90      	pop	{r4, r7, pc}

0800c104 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	1dfb      	adds	r3, r7, #7
 800c110:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	b298      	uxth	r0, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	b299      	uxth	r1, r3
 800c11a:	1dfb      	adds	r3, r7, #7
 800c11c:	2201      	movs	r2, #1
 800c11e:	f7ff fed6 	bl	800bece <dwt_writetodevice>
}
 800c122:	46c0      	nop			@ (mov r8, r8)
 800c124:	46bd      	mov	sp, r7
 800c126:	b004      	add	sp, #16
 800c128:	bd80      	pop	{r7, pc}

0800c12a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800c12a:	b590      	push	{r4, r7, lr}
 800c12c:	b087      	sub	sp, #28
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	1dbb      	adds	r3, r7, #6
 800c136:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800c138:	1dbb      	adds	r3, r7, #6
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	2414      	movs	r4, #20
 800c140:	193b      	adds	r3, r7, r4
 800c142:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800c144:	1dbb      	adds	r3, r7, #6
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	0a1b      	lsrs	r3, r3, #8
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	193b      	adds	r3, r7, r4
 800c150:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	b298      	uxth	r0, r3
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	b299      	uxth	r1, r3
 800c15a:	193b      	adds	r3, r7, r4
 800c15c:	2202      	movs	r2, #2
 800c15e:	f7ff feb6 	bl	800bece <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800c162:	46c0      	nop			@ (mov r8, r8)
 800c164:	46bd      	mov	sp, r7
 800c166:	b007      	add	sp, #28
 800c168:	bd90      	pop	{r4, r7, pc}

0800c16a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af00      	add	r7, sp, #0
 800c170:	60f8      	str	r0, [r7, #12]
 800c172:	60b9      	str	r1, [r7, #8]
 800c174:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800c176:	2300      	movs	r3, #0
 800c178:	617b      	str	r3, [r7, #20]
 800c17a:	e00d      	b.n	800c198 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	b2d9      	uxtb	r1, r3
 800c180:	2310      	movs	r3, #16
 800c182:	18fa      	adds	r2, r7, r3
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	18d3      	adds	r3, r2, r3
 800c188:	1c0a      	adds	r2, r1, #0
 800c18a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	3301      	adds	r3, #1
 800c196:	617b      	str	r3, [r7, #20]
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	ddee      	ble.n	800c17c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	b298      	uxth	r0, r3
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	b299      	uxth	r1, r3
 800c1a6:	2310      	movs	r3, #16
 800c1a8:	18fb      	adds	r3, r7, r3
 800c1aa:	2204      	movs	r2, #4
 800c1ac:	f7ff fe8f 	bl	800bece <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800c1b0:	46c0      	nop			@ (mov r8, r8)
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b006      	add	sp, #24
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	0002      	movs	r2, r0
 800c1c0:	1dbb      	adds	r3, r7, #6
 800c1c2:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800c1c4:	1dbb      	adds	r3, r7, #6
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	001a      	movs	r2, r3
 800c1ca:	2104      	movs	r1, #4
 800c1cc:	202d      	movs	r0, #45	@ 0x2d
 800c1ce:	f7ff ffac 	bl	800c12a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800c1d2:	2203      	movs	r2, #3
 800c1d4:	2106      	movs	r1, #6
 800c1d6:	202d      	movs	r0, #45	@ 0x2d
 800c1d8:	f7ff ff94 	bl	800c104 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2106      	movs	r1, #6
 800c1e0:	202d      	movs	r0, #45	@ 0x2d
 800c1e2:	f7ff ff8f 	bl	800c104 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800c1e6:	210a      	movs	r1, #10
 800c1e8:	202d      	movs	r0, #45	@ 0x2d
 800c1ea:	f7ff ff2d 	bl	800c048 <dwt_read32bitoffsetreg>
 800c1ee:	0003      	movs	r3, r0
 800c1f0:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
}
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	b004      	add	sp, #16
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800c200:	2200      	movs	r2, #0
 800c202:	2102      	movs	r1, #2
 800c204:	202c      	movs	r0, #44	@ 0x2c
 800c206:	f7ff ff7d 	bl	800c104 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800c20a:	2202      	movs	r2, #2
 800c20c:	2102      	movs	r1, #2
 800c20e:	202c      	movs	r0, #44	@ 0x2c
 800c210:	f7ff ff78 	bl	800c104 <dwt_write8bitoffsetreg>
}
 800c214:	46c0      	nop			@ (mov r8, r8)
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800c224:	4b0c      	ldr	r3, [pc, #48]	@ (800c258 <_dwt_configlde+0x3c>)
 800c226:	226d      	movs	r2, #109	@ 0x6d
 800c228:	0019      	movs	r1, r3
 800c22a:	202e      	movs	r0, #46	@ 0x2e
 800c22c:	f7ff ff6a 	bl	800c104 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800c236:	4a09      	ldr	r2, [pc, #36]	@ (800c25c <_dwt_configlde+0x40>)
 800c238:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <_dwt_configlde+0x44>)
 800c23a:	0019      	movs	r1, r3
 800c23c:	202e      	movs	r0, #46	@ 0x2e
 800c23e:	f7ff ff74 	bl	800c12a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800c242:	e005      	b.n	800c250 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800c244:	4a07      	ldr	r2, [pc, #28]	@ (800c264 <_dwt_configlde+0x48>)
 800c246:	4b06      	ldr	r3, [pc, #24]	@ (800c260 <_dwt_configlde+0x44>)
 800c248:	0019      	movs	r1, r3
 800c24a:	202e      	movs	r0, #46	@ 0x2e
 800c24c:	f7ff ff6d 	bl	800c12a <dwt_write16bitoffsetreg>
}
 800c250:	46c0      	nop			@ (mov r8, r8)
 800c252:	46bd      	mov	sp, r7
 800c254:	b002      	add	sp, #8
 800c256:	bd80      	pop	{r7, pc}
 800c258:	00000806 	.word	0x00000806
 800c25c:	00000607 	.word	0x00000607
 800c260:	00001806 	.word	0x00001806
 800c264:	00001607 	.word	0x00001607

0800c268 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800c26c:	200e      	movs	r0, #14
 800c26e:	f000 f811 	bl	800c294 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800c272:	2380      	movs	r3, #128	@ 0x80
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	001a      	movs	r2, r3
 800c278:	2106      	movs	r1, #6
 800c27a:	202d      	movs	r0, #45	@ 0x2d
 800c27c:	f7ff ff55 	bl	800c12a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800c280:	2001      	movs	r0, #1
 800c282:	f000 fa6e 	bl	800c762 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800c286:	2001      	movs	r0, #1
 800c288:	f000 f804 	bl	800c294 <_dwt_enableclocks>
}
 800c28c:	46c0      	nop			@ (mov r8, r8)
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800c29c:	230c      	movs	r3, #12
 800c29e:	18fb      	adds	r3, r7, r3
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	2036      	movs	r0, #54	@ 0x36
 800c2a6:	f7ff fe73 	bl	800bf90 <dwt_readfromdevice>
    switch(clocks)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b0e      	cmp	r3, #14
 800c2ae:	d900      	bls.n	800c2b2 <_dwt_enableclocks+0x1e>
 800c2b0:	e07b      	b.n	800c3aa <_dwt_enableclocks+0x116>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	009a      	lsls	r2, r3, #2
 800c2b6:	4b46      	ldr	r3, [pc, #280]	@ (800c3d0 <_dwt_enableclocks+0x13c>)
 800c2b8:	18d3      	adds	r3, r2, r3
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800c2be:	210c      	movs	r1, #12
 800c2c0:	187b      	adds	r3, r7, r1
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800c2c6:	187b      	adds	r3, r7, r1
 800c2c8:	785b      	ldrb	r3, [r3, #1]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4393      	bics	r3, r2
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	187b      	adds	r3, r7, r1
 800c2d2:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c2d4:	e06a      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800c2d6:	210c      	movs	r1, #12
 800c2d8:	187b      	adds	r3, r7, r1
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	2203      	movs	r2, #3
 800c2e0:	4393      	bics	r3, r2
 800c2e2:	b25b      	sxtb	r3, r3
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	187b      	adds	r3, r7, r1
 800c2ee:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c2f0:	e05c      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800c2f2:	210c      	movs	r1, #12
 800c2f4:	187b      	adds	r3, r7, r1
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	2203      	movs	r2, #3
 800c2fc:	4393      	bics	r3, r2
 800c2fe:	b25b      	sxtb	r3, r3
 800c300:	2202      	movs	r2, #2
 800c302:	4313      	orrs	r3, r2
 800c304:	b25b      	sxtb	r3, r3
 800c306:	b2da      	uxtb	r2, r3
 800c308:	187b      	adds	r3, r7, r1
 800c30a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c30c:	e04e      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800c30e:	210c      	movs	r1, #12
 800c310:	187b      	adds	r3, r7, r1
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	b25b      	sxtb	r3, r3
 800c316:	224c      	movs	r2, #76	@ 0x4c
 800c318:	4393      	bics	r3, r2
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	2248      	movs	r2, #72	@ 0x48
 800c31e:	4313      	orrs	r3, r2
 800c320:	b25b      	sxtb	r3, r3
 800c322:	b2da      	uxtb	r2, r3
 800c324:	187b      	adds	r3, r7, r1
 800c326:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800c328:	187b      	adds	r3, r7, r1
 800c32a:	785b      	ldrb	r3, [r3, #1]
 800c32c:	2280      	movs	r2, #128	@ 0x80
 800c32e:	4252      	negs	r2, r2
 800c330:	4313      	orrs	r3, r2
 800c332:	b2da      	uxtb	r2, r3
 800c334:	187b      	adds	r3, r7, r1
 800c336:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c338:	e038      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800c33a:	210c      	movs	r1, #12
 800c33c:	187b      	adds	r3, r7, r1
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	224c      	movs	r2, #76	@ 0x4c
 800c342:	4393      	bics	r3, r2
 800c344:	b2da      	uxtb	r2, r3
 800c346:	187b      	adds	r3, r7, r1
 800c348:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800c34a:	187b      	adds	r3, r7, r1
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	227f      	movs	r2, #127	@ 0x7f
 800c350:	4013      	ands	r3, r2
 800c352:	b2da      	uxtb	r2, r3
 800c354:	187b      	adds	r3, r7, r1
 800c356:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c358:	e028      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800c35a:	210c      	movs	r1, #12
 800c35c:	187b      	adds	r3, r7, r1
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	2202      	movs	r2, #2
 800c362:	4313      	orrs	r3, r2
 800c364:	b2da      	uxtb	r2, r3
 800c366:	187b      	adds	r3, r7, r1
 800c368:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c36a:	e01f      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800c36c:	210c      	movs	r1, #12
 800c36e:	187b      	adds	r3, r7, r1
 800c370:	785b      	ldrb	r3, [r3, #1]
 800c372:	2202      	movs	r2, #2
 800c374:	4393      	bics	r3, r2
 800c376:	b2da      	uxtb	r2, r3
 800c378:	187b      	adds	r3, r7, r1
 800c37a:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c37c:	e016      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800c37e:	210c      	movs	r1, #12
 800c380:	187b      	adds	r3, r7, r1
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	b25b      	sxtb	r3, r3
 800c386:	2230      	movs	r2, #48	@ 0x30
 800c388:	4393      	bics	r3, r2
 800c38a:	b25b      	sxtb	r3, r3
 800c38c:	2220      	movs	r2, #32
 800c38e:	4313      	orrs	r3, r2
 800c390:	b25b      	sxtb	r3, r3
 800c392:	b2da      	uxtb	r2, r3
 800c394:	187b      	adds	r3, r7, r1
 800c396:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c398:	e008      	b.n	800c3ac <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800c39a:	210c      	movs	r1, #12
 800c39c:	187b      	adds	r3, r7, r1
 800c39e:	2201      	movs	r2, #1
 800c3a0:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800c3a2:	187b      	adds	r3, r7, r1
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c3a8:	e000      	b.n	800c3ac <_dwt_enableclocks+0x118>
        default:
        break;
 800c3aa:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800c3ac:	240c      	movs	r4, #12
 800c3ae:	193b      	adds	r3, r7, r4
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	2036      	movs	r0, #54	@ 0x36
 800c3b6:	f7ff fd8a 	bl	800bece <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800c3ba:	193b      	adds	r3, r7, r4
 800c3bc:	3301      	adds	r3, #1
 800c3be:	2201      	movs	r2, #1
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	2036      	movs	r0, #54	@ 0x36
 800c3c4:	f7ff fd83 	bl	800bece <dwt_writetodevice>

} // end _dwt_enableclocks()
 800c3c8:	46c0      	nop			@ (mov r8, r8)
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b005      	add	sp, #20
 800c3ce:	bd90      	pop	{r4, r7, pc}
 800c3d0:	0800cd80 	.word	0x0800cd80

0800c3d4 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f7ff ff5b 	bl	800c294 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2104      	movs	r1, #4
 800c3e2:	2036      	movs	r0, #54	@ 0x36
 800c3e4:	f7ff fea1 	bl	800c12a <dwt_write16bitoffsetreg>
}
 800c3e8:	46c0      	nop			@ (mov r8, r8)
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800c3f0:	b5b0      	push	{r4, r5, r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	0002      	movs	r2, r0
 800c3f8:	1dfb      	adds	r3, r7, #7
 800c3fa:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800c400:	210b      	movs	r1, #11
 800c402:	187b      	adds	r3, r7, r1
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800c408:	2308      	movs	r3, #8
 800c40a:	18fb      	adds	r3, r7, r3
 800c40c:	2200      	movs	r2, #0
 800c40e:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800c410:	1dfb      	adds	r3, r7, #7
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	2202      	movs	r2, #2
 800c416:	4013      	ands	r3, r2
 800c418:	d006      	beq.n	800c428 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800c41a:	187b      	adds	r3, r7, r1
 800c41c:	2280      	movs	r2, #128	@ 0x80
 800c41e:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800c420:	4b21      	ldr	r3, [pc, #132]	@ (800c4a8 <dwt_starttx+0xb8>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2201      	movs	r2, #1
 800c426:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800c428:	1dfb      	adds	r3, r7, #7
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2201      	movs	r2, #1
 800c42e:	4013      	ands	r3, r2
 800c430:	d027      	beq.n	800c482 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800c432:	200b      	movs	r0, #11
 800c434:	183b      	adds	r3, r7, r0
 800c436:	183a      	adds	r2, r7, r0
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	2106      	movs	r1, #6
 800c43c:	430a      	orrs	r2, r1
 800c43e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c440:	183b      	adds	r3, r7, r0
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	001a      	movs	r2, r3
 800c446:	2100      	movs	r1, #0
 800c448:	200d      	movs	r0, #13
 800c44a:	f7ff fe5b 	bl	800c104 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800c44e:	2508      	movs	r5, #8
 800c450:	197c      	adds	r4, r7, r5
 800c452:	2103      	movs	r1, #3
 800c454:	200f      	movs	r0, #15
 800c456:	f7ff fe1e 	bl	800c096 <dwt_read16bitoffsetreg>
 800c45a:	0003      	movs	r3, r0
 800c45c:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800c45e:	197b      	adds	r3, r7, r5
 800c460:	881a      	ldrh	r2, [r3, #0]
 800c462:	2381      	movs	r3, #129	@ 0x81
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	4013      	ands	r3, r2
 800c468:	d102      	bne.n	800c470 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800c46a:	2300      	movs	r3, #0
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e016      	b.n	800c49e <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800c470:	2240      	movs	r2, #64	@ 0x40
 800c472:	2100      	movs	r1, #0
 800c474:	200d      	movs	r0, #13
 800c476:	f7ff fe45 	bl	800c104 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800c47a:	2301      	movs	r3, #1
 800c47c:	425b      	negs	r3, r3
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	e00d      	b.n	800c49e <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800c482:	200b      	movs	r0, #11
 800c484:	183b      	adds	r3, r7, r0
 800c486:	183a      	adds	r2, r7, r0
 800c488:	7812      	ldrb	r2, [r2, #0]
 800c48a:	2102      	movs	r1, #2
 800c48c:	430a      	orrs	r2, r1
 800c48e:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c490:	183b      	adds	r3, r7, r0
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	001a      	movs	r2, r3
 800c496:	2100      	movs	r1, #0
 800c498:	200d      	movs	r0, #13
 800c49a:	f7ff fe33 	bl	800c104 <dwt_write8bitoffsetreg>
    }

    return retval;
 800c49e:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b004      	add	sp, #16
 800c4a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c4a8:	200001bc 	.word	0x200001bc

0800c4ac <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	200e      	movs	r0, #14
 800c4b6:	f7ff fdc7 	bl	800c048 <dwt_read32bitoffsetreg>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800c4be:	f000 f932 	bl	800c726 <decamutexon>
 800c4c2:	0003      	movs	r3, r0
 800c4c4:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	200e      	movs	r0, #14
 800c4cc:	f7ff fe4d 	bl	800c16a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800c4d0:	2240      	movs	r2, #64	@ 0x40
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	200d      	movs	r0, #13
 800c4d6:	f7ff fe15 	bl	800c104 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800c4da:	4b0d      	ldr	r3, [pc, #52]	@ (800c510 <dwt_forcetrxoff+0x64>)
 800c4dc:	001a      	movs	r2, r3
 800c4de:	2100      	movs	r1, #0
 800c4e0:	200f      	movs	r0, #15
 800c4e2:	f7ff fe42 	bl	800c16a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800c4e6:	f000 f817 	bl	800c518 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	001a      	movs	r2, r3
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	200e      	movs	r0, #14
 800c4f2:	f7ff fe3a 	bl	800c16a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	f000 f925 	bl	800c748 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800c4fe:	4b05      	ldr	r3, [pc, #20]	@ (800c514 <dwt_forcetrxoff+0x68>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2200      	movs	r2, #0
 800c504:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800c506:	46c0      	nop			@ (mov r8, r8)
 800c508:	46bd      	mov	sp, r7
 800c50a:	b002      	add	sp, #8
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	46c0      	nop			@ (mov r8, r8)
 800c510:	2427fff8 	.word	0x2427fff8
 800c514:	200001bc 	.word	0x200001bc

0800c518 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c51e:	1dfc      	adds	r4, r7, #7
 800c520:	2103      	movs	r1, #3
 800c522:	200f      	movs	r0, #15
 800c524:	f7ff fdda 	bl	800c0dc <dwt_read8bitoffsetreg>
 800c528:	0003      	movs	r3, r0
 800c52a:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c52c:	1dfb      	adds	r3, r7, #7
 800c52e:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800c530:	1dfb      	adds	r3, r7, #7
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c536:	4053      	eors	r3, r2
 800c538:	2280      	movs	r2, #128	@ 0x80
 800c53a:	4013      	ands	r3, r2
 800c53c:	d004      	beq.n	800c548 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800c53e:	2201      	movs	r2, #1
 800c540:	2103      	movs	r1, #3
 800c542:	200d      	movs	r0, #13
 800c544:	f7ff fdde 	bl	800c104 <dwt_write8bitoffsetreg>
    }
}
 800c548:	46c0      	nop			@ (mov r8, r8)
 800c54a:	46bd      	mov	sp, r7
 800c54c:	b003      	add	sp, #12
 800c54e:	bd90      	pop	{r4, r7, pc}

0800c550 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800c550:	b5b0      	push	{r4, r5, r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2204      	movs	r2, #4
 800c55c:	4013      	ands	r3, r2
 800c55e:	d101      	bne.n	800c564 <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800c560:	f7ff ffda 	bl	800c518 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800c564:	210e      	movs	r1, #14
 800c566:	187b      	adds	r3, r7, r1
 800c568:	2280      	movs	r2, #128	@ 0x80
 800c56a:	0052      	lsls	r2, r2, #1
 800c56c:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	4013      	ands	r3, r2
 800c574:	d006      	beq.n	800c584 <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800c576:	187b      	adds	r3, r7, r1
 800c578:	187a      	adds	r2, r7, r1
 800c57a:	8812      	ldrh	r2, [r2, #0]
 800c57c:	2180      	movs	r1, #128	@ 0x80
 800c57e:	0089      	lsls	r1, r1, #2
 800c580:	430a      	orrs	r2, r1
 800c582:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c584:	230e      	movs	r3, #14
 800c586:	18fb      	adds	r3, r7, r3
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	001a      	movs	r2, r3
 800c58c:	2100      	movs	r1, #0
 800c58e:	200d      	movs	r0, #13
 800c590:	f7ff fdcb 	bl	800c12a <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	4013      	ands	r3, r2
 800c59a:	d01c      	beq.n	800c5d6 <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c59c:	250d      	movs	r5, #13
 800c59e:	197c      	adds	r4, r7, r5
 800c5a0:	2103      	movs	r1, #3
 800c5a2:	200f      	movs	r0, #15
 800c5a4:	f7ff fd9a 	bl	800c0dc <dwt_read8bitoffsetreg>
 800c5a8:	0003      	movs	r3, r0
 800c5aa:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800c5ac:	197b      	adds	r3, r7, r5
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	d00f      	beq.n	800c5d6 <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800c5b6:	f7ff ff79 	bl	800c4ac <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	4013      	ands	r3, r2
 800c5c0:	d106      	bne.n	800c5d0 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800c5c2:	2380      	movs	r3, #128	@ 0x80
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	200d      	movs	r0, #13
 800c5cc:	f7ff fdad 	bl	800c12a <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	425b      	negs	r3, r3
 800c5d4:	e000      	b.n	800c5d8 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800c5d6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800c5d8:	0018      	movs	r0, r3
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	b004      	add	sp, #16
 800c5de:	bdb0      	pop	{r4, r5, r7, pc}

0800c5e0 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800c5e0:	b5b0      	push	{r4, r5, r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	0002      	movs	r2, r0
 800c5e8:	1dbb      	adds	r3, r7, #6
 800c5ea:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800c5ec:	250f      	movs	r5, #15
 800c5ee:	197c      	adds	r4, r7, r5
 800c5f0:	2103      	movs	r1, #3
 800c5f2:	2004      	movs	r0, #4
 800c5f4:	f7ff fd72 	bl	800c0dc <dwt_read8bitoffsetreg>
 800c5f8:	0003      	movs	r3, r0
 800c5fa:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800c5fc:	1dbb      	adds	r3, r7, #6
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d01e      	beq.n	800c642 <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800c604:	1dbb      	adds	r3, r7, #6
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	001a      	movs	r2, r3
 800c60a:	2100      	movs	r1, #0
 800c60c:	200c      	movs	r0, #12
 800c60e:	f7ff fd8c 	bl	800c12a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800c612:	0028      	movs	r0, r5
 800c614:	183b      	adds	r3, r7, r0
 800c616:	183a      	adds	r2, r7, r0
 800c618:	7812      	ldrb	r2, [r2, #0]
 800c61a:	2110      	movs	r1, #16
 800c61c:	430a      	orrs	r2, r1
 800c61e:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800c620:	4b15      	ldr	r3, [pc, #84]	@ (800c678 <dwt_setrxtimeout+0x98>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	691a      	ldr	r2, [r3, #16]
 800c626:	4b14      	ldr	r3, [pc, #80]	@ (800c678 <dwt_setrxtimeout+0x98>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2180      	movs	r1, #128	@ 0x80
 800c62c:	0549      	lsls	r1, r1, #21
 800c62e:	430a      	orrs	r2, r1
 800c630:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c632:	183b      	adds	r3, r7, r0
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	001a      	movs	r2, r3
 800c638:	2103      	movs	r1, #3
 800c63a:	2004      	movs	r0, #4
 800c63c:	f7ff fd62 	bl	800c104 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800c640:	e015      	b.n	800c66e <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800c642:	200f      	movs	r0, #15
 800c644:	183b      	adds	r3, r7, r0
 800c646:	183a      	adds	r2, r7, r0
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	2110      	movs	r1, #16
 800c64c:	438a      	bics	r2, r1
 800c64e:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800c650:	4b09      	ldr	r3, [pc, #36]	@ (800c678 <dwt_setrxtimeout+0x98>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	691a      	ldr	r2, [r3, #16]
 800c656:	4b08      	ldr	r3, [pc, #32]	@ (800c678 <dwt_setrxtimeout+0x98>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4908      	ldr	r1, [pc, #32]	@ (800c67c <dwt_setrxtimeout+0x9c>)
 800c65c:	400a      	ands	r2, r1
 800c65e:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c660:	183b      	adds	r3, r7, r0
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	001a      	movs	r2, r3
 800c666:	2103      	movs	r1, #3
 800c668:	2004      	movs	r0, #4
 800c66a:	f7ff fd4b 	bl	800c104 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800c66e:	46c0      	nop			@ (mov r8, r8)
 800c670:	46bd      	mov	sp, r7
 800c672:	b004      	add	sp, #16
 800c674:	bdb0      	pop	{r4, r5, r7, pc}
 800c676:	46c0      	nop			@ (mov r8, r8)
 800c678:	200001bc 	.word	0x200001bc
 800c67c:	efffffff 	.word	0xefffffff

0800c680 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800c684:	22e0      	movs	r2, #224	@ 0xe0
 800c686:	2103      	movs	r1, #3
 800c688:	2036      	movs	r0, #54	@ 0x36
 800c68a:	f7ff fd3b 	bl	800c104 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800c68e:	22f0      	movs	r2, #240	@ 0xf0
 800c690:	2103      	movs	r1, #3
 800c692:	2036      	movs	r0, #54	@ 0x36
 800c694:	f7ff fd36 	bl	800c104 <dwt_write8bitoffsetreg>
}
 800c698:	46c0      	nop			@ (mov r8, r8)
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800c6a4:	f7ff fe96 	bl	800c3d4 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	202c      	movs	r0, #44	@ 0x2c
 800c6ae:	f7ff fd3c 	bl	800c12a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2106      	movs	r1, #6
 800c6b6:	202c      	movs	r0, #44	@ 0x2c
 800c6b8:	f7ff fd24 	bl	800c104 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800c6bc:	f7ff fd9e 	bl	800c1fc <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2103      	movs	r1, #3
 800c6c4:	2036      	movs	r0, #54	@ 0x36
 800c6c6:	f7ff fd1d 	bl	800c104 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	f000 f849 	bl	800c762 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800c6d0:	22f0      	movs	r2, #240	@ 0xf0
 800c6d2:	2103      	movs	r1, #3
 800c6d4:	2036      	movs	r0, #54	@ 0x36
 800c6d6:	f7ff fd15 	bl	800c104 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800c6da:	4b03      	ldr	r3, [pc, #12]	@ (800c6e8 <dwt_softreset+0x48>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	755a      	strb	r2, [r3, #21]
}
 800c6e2:	46c0      	nop			@ (mov r8, r8)
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	200001bc 	.word	0x200001bc

0800c6ec <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	0002      	movs	r2, r0
 800c6f4:	1dfb      	adds	r3, r7, #7
 800c6f6:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800c6f8:	1dfb      	adds	r3, r7, #7
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	221f      	movs	r2, #31
 800c700:	4013      	ands	r3, r2
 800c702:	b25b      	sxtb	r3, r3
 800c704:	2260      	movs	r2, #96	@ 0x60
 800c706:	4313      	orrs	r3, r2
 800c708:	b25a      	sxtb	r2, r3
 800c70a:	210f      	movs	r1, #15
 800c70c:	187b      	adds	r3, r7, r1
 800c70e:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800c710:	187b      	adds	r3, r7, r1
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	001a      	movs	r2, r3
 800c716:	210e      	movs	r1, #14
 800c718:	202b      	movs	r0, #43	@ 0x2b
 800c71a:	f7ff fcf3 	bl	800c104 <dwt_write8bitoffsetreg>
}
 800c71e:	46c0      	nop			@ (mov r8, r8)
 800c720:	46bd      	mov	sp, r7
 800c722:	b004      	add	sp, #16
 800c724:	bd80      	pop	{r7, pc}

0800c726 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800c72c:	f000 f9f2 	bl	800cb14 <port_GetEXT_IRQStatus>
 800c730:	0003      	movs	r3, r0
 800c732:	607b      	str	r3, [r7, #4]

	if(s) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800c73a:	f000 f9db 	bl	800caf4 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800c73e:	687b      	ldr	r3, [r7, #4]
}
 800c740:	0018      	movs	r0, r3
 800c742:	46bd      	mov	sp, r7
 800c744:	b002      	add	sp, #8
 800c746:	bd80      	pop	{r7, pc}

0800c748 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800c756:	f000 f9d5 	bl	800cb04 <port_EnableEXT_IRQ>
	}
}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	46bd      	mov	sp, r7
 800c75e:	b002      	add	sp, #8
 800c760:	bd80      	pop	{r7, pc}

0800c762 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b082      	sub	sp, #8
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	0018      	movs	r0, r3
 800c76e:	f000 f8f2 	bl	800c956 <Sleep>
}
 800c772:	46c0      	nop			@ (mov r8, r8)
 800c774:	46bd      	mov	sp, r7
 800c776:	b002      	add	sp, #8
 800c778:	bd80      	pop	{r7, pc}
	...

0800c77c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77e:	46d6      	mov	lr, sl
 800c780:	4646      	mov	r6, r8
 800c782:	464f      	mov	r7, r9
 800c784:	b5c0      	push	{r6, r7, lr}
 800c786:	4682      	mov	sl, r0
 800c788:	4689      	mov	r9, r1
 800c78a:	0015      	movs	r5, r2
 800c78c:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800c78e:	f7ff ffca 	bl	800c726 <decamutexon>
 800c792:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800c794:	4c14      	ldr	r4, [pc, #80]	@ (800c7e8 <writetospi+0x6c>)
 800c796:	0020      	movs	r0, r4
 800c798:	f7f9 ff21 	bl	80065de <HAL_SPI_GetState>
 800c79c:	2801      	cmp	r0, #1
 800c79e:	d1fa      	bne.n	800c796 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800c7a0:	308f      	adds	r0, #143	@ 0x8f
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2110      	movs	r1, #16
 800c7a6:	05c0      	lsls	r0, r0, #23
 800c7a8:	f7f7 f897 	bl	80038da <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	0020      	movs	r0, r4
 800c7b4:	425b      	negs	r3, r3
 800c7b6:	f7f9 fdb3 	bl	8006320 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4641      	mov	r1, r8
 800c7be:	b2aa      	uxth	r2, r5
 800c7c0:	425b      	negs	r3, r3
 800c7c2:	0020      	movs	r0, r4
 800c7c4:	f7f9 fdac 	bl	8006320 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800c7c8:	2090      	movs	r0, #144	@ 0x90
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	2110      	movs	r1, #16
 800c7ce:	05c0      	lsls	r0, r0, #23
 800c7d0:	f7f7 f883 	bl	80038da <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800c7d4:	0030      	movs	r0, r6
 800c7d6:	f7ff ffb7 	bl	800c748 <decamutexoff>

    return 0;
} // end writetospi()
 800c7da:	2000      	movs	r0, #0
 800c7dc:	bce0      	pop	{r5, r6, r7}
 800c7de:	46ba      	mov	sl, r7
 800c7e0:	46b1      	mov	r9, r6
 800c7e2:	46a8      	mov	r8, r5
 800c7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e6:	46c0      	nop			@ (mov r8, r8)
 800c7e8:	20000268 	.word	0x20000268

0800c7ec <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	46de      	mov	lr, fp
 800c7f0:	464d      	mov	r5, r9
 800c7f2:	4644      	mov	r4, r8
 800c7f4:	4656      	mov	r6, sl
 800c7f6:	b570      	push	{r4, r5, r6, lr}
 800c7f8:	468b      	mov	fp, r1
 800c7fa:	0004      	movs	r4, r0
 800c7fc:	4692      	mov	sl, r2
 800c7fe:	4698      	mov	r8, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800c800:	f7ff ff91 	bl	800c726 <decamutexon>
 800c804:	4681      	mov	r9, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800c806:	4d20      	ldr	r5, [pc, #128]	@ (800c888 <readfromspi+0x9c>)
 800c808:	0028      	movs	r0, r5
 800c80a:	f7f9 fee8 	bl	80065de <HAL_SPI_GetState>
 800c80e:	2801      	cmp	r0, #1
 800c810:	d1fa      	bne.n	800c808 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800c812:	308f      	adds	r0, #143	@ 0x8f
 800c814:	2200      	movs	r2, #0
 800c816:	2110      	movs	r1, #16
 800c818:	05c0      	lsls	r0, r0, #23
 800c81a:	f7f7 f85e 	bl	80038da <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800c81e:	2c00      	cmp	r4, #0
 800c820:	d00b      	beq.n	800c83a <readfromspi+0x4e>
 800c822:	2600      	movs	r6, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800c824:	465a      	mov	r2, fp
 800c826:	2301      	movs	r3, #1
 800c828:	1991      	adds	r1, r2, r6
 800c82a:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 800c82c:	3601      	adds	r6, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800c82e:	2201      	movs	r2, #1
 800c830:	425b      	negs	r3, r3
 800c832:	f7f9 fd75 	bl	8006320 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800c836:	42a6      	cmp	r6, r4
 800c838:	dbf4      	blt.n	800c824 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800c83a:	4653      	mov	r3, sl
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <readfromspi+0x7c>
 800c840:	4640      	mov	r0, r8
 800c842:	18c6      	adds	r6, r0, r3
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800c844:	2300      	movs	r3, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800c846:	2202      	movs	r2, #2
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800c848:	469c      	mov	ip, r3
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800c84a:	2401      	movs	r4, #1
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800c84c:	6829      	ldr	r1, [r5, #0]
 800c84e:	688b      	ldr	r3, [r1, #8]
 800c850:	421a      	tst	r2, r3
 800c852:	d0fc      	beq.n	800c84e <readfromspi+0x62>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800c854:	4663      	mov	r3, ip
 800c856:	60cb      	str	r3, [r1, #12]
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800c858:	688b      	ldr	r3, [r1, #8]
 800c85a:	421c      	tst	r4, r3
 800c85c:	d0fc      	beq.n	800c858 <readfromspi+0x6c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800c85e:	68cb      	ldr	r3, [r1, #12]
 800c860:	7003      	strb	r3, [r0, #0]
    while(readlength-- > 0)
 800c862:	3001      	adds	r0, #1
 800c864:	4286      	cmp	r6, r0
 800c866:	d1f1      	bne.n	800c84c <readfromspi+0x60>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800c868:	2090      	movs	r0, #144	@ 0x90
 800c86a:	2201      	movs	r2, #1
 800c86c:	2110      	movs	r1, #16
 800c86e:	05c0      	lsls	r0, r0, #23
 800c870:	f7f7 f833 	bl	80038da <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800c874:	4648      	mov	r0, r9
 800c876:	f7ff ff67 	bl	800c748 <decamutexoff>

    return 0;
} // end readfromspi()
 800c87a:	2000      	movs	r0, #0
 800c87c:	bc78      	pop	{r3, r4, r5, r6}
 800c87e:	46b3      	mov	fp, r6
 800c880:	46aa      	mov	sl, r5
 800c882:	46a1      	mov	r9, r4
 800c884:	4698      	mov	r8, r3
 800c886:	bd70      	pop	{r4, r5, r6, pc}
 800c888:	20000268 	.word	0x20000268

0800c88c <__NVIC_EnableIRQ>:
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	0002      	movs	r2, r0
 800c894:	1dfb      	adds	r3, r7, #7
 800c896:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c898:	1dfb      	adds	r3, r7, #7
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c89e:	d809      	bhi.n	800c8b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c8a0:	1dfb      	adds	r3, r7, #7
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	001a      	movs	r2, r3
 800c8a6:	231f      	movs	r3, #31
 800c8a8:	401a      	ands	r2, r3
 800c8aa:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__NVIC_EnableIRQ+0x30>)
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	4091      	lsls	r1, r2
 800c8b0:	000a      	movs	r2, r1
 800c8b2:	601a      	str	r2, [r3, #0]
}
 800c8b4:	46c0      	nop			@ (mov r8, r8)
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	b002      	add	sp, #8
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	e000e100 	.word	0xe000e100

0800c8c0 <__NVIC_DisableIRQ>:
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	0002      	movs	r2, r0
 800c8c8:	1dfb      	adds	r3, r7, #7
 800c8ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c8cc:	1dfb      	adds	r3, r7, #7
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8d2:	d810      	bhi.n	800c8f6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c8d4:	1dfb      	adds	r3, r7, #7
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	001a      	movs	r2, r3
 800c8da:	231f      	movs	r3, #31
 800c8dc:	4013      	ands	r3, r2
 800c8de:	4908      	ldr	r1, [pc, #32]	@ (800c900 <__NVIC_DisableIRQ+0x40>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	409a      	lsls	r2, r3
 800c8e4:	0013      	movs	r3, r2
 800c8e6:	2280      	movs	r2, #128	@ 0x80
 800c8e8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c8ea:	f3bf 8f4f 	dsb	sy
}
 800c8ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c8f0:	f3bf 8f6f 	isb	sy
}
 800c8f4:	46c0      	nop			@ (mov r8, r8)
}
 800c8f6:	46c0      	nop			@ (mov r8, r8)
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	b002      	add	sp, #8
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	e000e100 	.word	0xe000e100

0800c904 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e014      	b.n	800c93c <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800c912:	2300      	movs	r3, #0
 800c914:	60bb      	str	r3, [r7, #8]
 800c916:	e004      	b.n	800c922 <usleep+0x1e>
        {
            __NOP();
 800c918:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800c91a:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	3301      	adds	r3, #1
 800c920:	60bb      	str	r3, [r7, #8]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2201      	movs	r2, #1
 800c926:	0fd8      	lsrs	r0, r3, #31
 800c928:	17d1      	asrs	r1, r2, #31
 800c92a:	429a      	cmp	r2, r3
 800c92c:	4148      	adcs	r0, r1
 800c92e:	0003      	movs	r3, r0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1f0      	bne.n	800c918 <usleep+0x14>
    for(i=0;i<usec;i++)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3301      	adds	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	429a      	cmp	r2, r3
 800c942:	419b      	sbcs	r3, r3
 800c944:	425b      	negs	r3, r3
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1e2      	bne.n	800c912 <usleep+0xe>
        }
    }
    return 0;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	0018      	movs	r0, r3
 800c950:	46bd      	mov	sp, r7
 800c952:	b004      	add	sp, #16
 800c954:	bd80      	pop	{r7, pc}

0800c956 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	0018      	movs	r0, r3
 800c962:	f7f6 faa3 	bl	8002eac <HAL_Delay>
}
 800c966:	46c0      	nop			@ (mov r8, r8)
 800c968:	46bd      	mov	sp, r7
 800c96a:	b002      	add	sp, #8
 800c96c:	bd80      	pop	{r7, pc}
	...

0800c970 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800c978:	4a09      	ldr	r2, [pc, #36]	@ (800c9a0 <EXTI_GetITEnStatus+0x30>)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	211f      	movs	r1, #31
 800c986:	400b      	ands	r3, r1
 800c988:	40da      	lsrs	r2, r3
 800c98a:	0013      	movs	r3, r2
 800c98c:	2201      	movs	r2, #1
 800c98e:	4013      	ands	r3, r2
 800c990:	1e5a      	subs	r2, r3, #1
 800c992:	4193      	sbcs	r3, r2
 800c994:	b2db      	uxtb	r3, r3
}
 800c996:	0018      	movs	r0, r3
 800c998:	46bd      	mov	sp, r7
 800c99a:	b002      	add	sp, #8
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	e000e100 	.word	0xe000e100

0800c9a4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800c9aa:	1d3b      	adds	r3, r7, #4
 800c9ac:	2204      	movs	r2, #4
 800c9ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800c9b0:	1d3b      	adds	r3, r7, #4
 800c9b2:	2211      	movs	r2, #17
 800c9b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9b6:	1d3b      	adds	r3, r7, #4
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800c9bc:	1d3a      	adds	r2, r7, #4
 800c9be:	2390      	movs	r3, #144	@ 0x90
 800c9c0:	05db      	lsls	r3, r3, #23
 800c9c2:	0011      	movs	r1, r2
 800c9c4:	0018      	movs	r0, r3
 800c9c6:	f7f6 fdf3 	bl	80035b0 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800c9ca:	2390      	movs	r3, #144	@ 0x90
 800c9cc:	05db      	lsls	r3, r3, #23
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2104      	movs	r1, #4
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f7f6 ff81 	bl	80038da <HAL_GPIO_WritePin>

    usleep(1);
 800c9d8:	2001      	movs	r0, #1
 800c9da:	f7ff ff93 	bl	800c904 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800c9de:	2000      	movs	r0, #0
 800c9e0:	f000 f807 	bl	800c9f2 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800c9e4:	2002      	movs	r0, #2
 800c9e6:	f7ff ffb6 	bl	800c956 <Sleep>
}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	b006      	add	sp, #24
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b088      	sub	sp, #32
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01a      	beq.n	800ca36 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800ca00:	210c      	movs	r1, #12
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2204      	movs	r2, #4
 800ca06:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ca08:	187b      	adds	r3, r7, r1
 800ca0a:	2288      	movs	r2, #136	@ 0x88
 800ca0c:	0352      	lsls	r2, r2, #13
 800ca0e:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	2200      	movs	r2, #0
 800ca14:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ca16:	187a      	adds	r2, r7, r1
 800ca18:	2390      	movs	r3, #144	@ 0x90
 800ca1a:	05db      	lsls	r3, r3, #23
 800ca1c:	0011      	movs	r1, r2
 800ca1e:	0018      	movs	r0, r3
 800ca20:	f7f6 fdc6 	bl	80035b0 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800ca24:	2006      	movs	r0, #6
 800ca26:	f7f6 fd96 	bl	8003556 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2105      	movs	r1, #5
 800ca2e:	2006      	movs	r0, #6
 800ca30:	f7f6 fd7c 	bl	800352c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800ca34:	e01d      	b.n	800ca72 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800ca36:	2006      	movs	r0, #6
 800ca38:	f7f6 fd9d 	bl	8003576 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800ca3c:	210c      	movs	r1, #12
 800ca3e:	187b      	adds	r3, r7, r1
 800ca40:	2204      	movs	r2, #4
 800ca42:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ca44:	187b      	adds	r3, r7, r1
 800ca46:	2211      	movs	r2, #17
 800ca48:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca4a:	187b      	adds	r3, r7, r1
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ca50:	187b      	adds	r3, r7, r1
 800ca52:	2203      	movs	r2, #3
 800ca54:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ca56:	187a      	adds	r2, r7, r1
 800ca58:	2390      	movs	r3, #144	@ 0x90
 800ca5a:	05db      	lsls	r3, r3, #23
 800ca5c:	0011      	movs	r1, r2
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f7f6 fda6 	bl	80035b0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800ca64:	2390      	movs	r3, #144	@ 0x90
 800ca66:	05db      	lsls	r3, r3, #23
 800ca68:	2201      	movs	r2, #1
 800ca6a:	2104      	movs	r1, #4
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f7f6 ff34 	bl	80038da <HAL_GPIO_WritePin>
}
 800ca72:	46c0      	nop			@ (mov r8, r8)
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b008      	add	sp, #32
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ca80:	4b04      	ldr	r3, [pc, #16]	@ (800ca94 <port_set_dw1000_slowrate+0x18>)
 800ca82:	2218      	movs	r2, #24
 800ca84:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800ca86:	4b03      	ldr	r3, [pc, #12]	@ (800ca94 <port_set_dw1000_slowrate+0x18>)
 800ca88:	0018      	movs	r0, r3
 800ca8a:	f7f9 fb91 	bl	80061b0 <HAL_SPI_Init>
}
 800ca8e:	46c0      	nop			@ (mov r8, r8)
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	20000268 	.word	0x20000268

0800ca98 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca9c:	4b04      	ldr	r3, [pc, #16]	@ (800cab0 <port_set_dw1000_fastrate+0x18>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800caa2:	4b03      	ldr	r3, [pc, #12]	@ (800cab0 <port_set_dw1000_fastrate+0x18>)
 800caa4:	0018      	movs	r0, r3
 800caa6:	f7f9 fb83 	bl	80061b0 <HAL_SPI_Init>
}
 800caaa:	46c0      	nop			@ (mov r8, r8)
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20000268 	.word	0x20000268

0800cab4 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	0002      	movs	r2, r0
 800cabc:	1dbb      	adds	r3, r7, #6
 800cabe:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800cac0:	1dbb      	adds	r3, r7, #6
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	2b20      	cmp	r3, #32
 800cac6:	d101      	bne.n	800cacc <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800cac8:	f000 f804 	bl	800cad4 <process_deca_irq>
    }
}
 800cacc:	46c0      	nop			@ (mov r8, r8)
 800cace:	46bd      	mov	sp, r7
 800cad0:	b002      	add	sp, #8
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800cad8:	e002      	b.n	800cae0 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800cada:	4b05      	ldr	r3, [pc, #20]	@ (800caf0 <process_deca_irq+0x1c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800cae0:	f000 f822 	bl	800cb28 <port_CheckEXT_IRQ>
 800cae4:	1e03      	subs	r3, r0, #0
 800cae6:	d1f8      	bne.n	800cada <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800cae8:	46c0      	nop			@ (mov r8, r8)
 800caea:	46c0      	nop			@ (mov r8, r8)
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	200015b8 	.word	0x200015b8

0800caf4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800caf8:	2007      	movs	r0, #7
 800cafa:	f7ff fee1 	bl	800c8c0 <__NVIC_DisableIRQ>
}
 800cafe:	46c0      	nop			@ (mov r8, r8)
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800cb08:	2007      	movs	r0, #7
 800cb0a:	f7ff febf 	bl	800c88c <__NVIC_EnableIRQ>
}
 800cb0e:	46c0      	nop			@ (mov r8, r8)
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800cb18:	2007      	movs	r0, #7
 800cb1a:	f7ff ff29 	bl	800c970 <EXTI_GetITEnStatus>
 800cb1e:	0003      	movs	r3, r0
}
 800cb20:	0018      	movs	r0, r3
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800cb2c:	4b04      	ldr	r3, [pc, #16]	@ (800cb40 <port_CheckEXT_IRQ+0x18>)
 800cb2e:	2120      	movs	r1, #32
 800cb30:	0018      	movs	r0, r3
 800cb32:	f7f6 feb5 	bl	80038a0 <HAL_GPIO_ReadPin>
 800cb36:	0003      	movs	r3, r0
}
 800cb38:	0018      	movs	r0, r3
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	46c0      	nop			@ (mov r8, r8)
 800cb40:	48000400 	.word	0x48000400

0800cb44 <memcmp>:
 800cb44:	b530      	push	{r4, r5, lr}
 800cb46:	2400      	movs	r4, #0
 800cb48:	3901      	subs	r1, #1
 800cb4a:	42a2      	cmp	r2, r4
 800cb4c:	d101      	bne.n	800cb52 <memcmp+0xe>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e005      	b.n	800cb5e <memcmp+0x1a>
 800cb52:	5d03      	ldrb	r3, [r0, r4]
 800cb54:	3401      	adds	r4, #1
 800cb56:	5d0d      	ldrb	r5, [r1, r4]
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	d0f6      	beq.n	800cb4a <memcmp+0x6>
 800cb5c:	1b58      	subs	r0, r3, r5
 800cb5e:	bd30      	pop	{r4, r5, pc}

0800cb60 <memset>:
 800cb60:	0003      	movs	r3, r0
 800cb62:	1882      	adds	r2, r0, r2
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d100      	bne.n	800cb6a <memset+0xa>
 800cb68:	4770      	bx	lr
 800cb6a:	7019      	strb	r1, [r3, #0]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	e7f9      	b.n	800cb64 <memset+0x4>

0800cb70 <__libc_init_array>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	2600      	movs	r6, #0
 800cb74:	4c0c      	ldr	r4, [pc, #48]	@ (800cba8 <__libc_init_array+0x38>)
 800cb76:	4d0d      	ldr	r5, [pc, #52]	@ (800cbac <__libc_init_array+0x3c>)
 800cb78:	1b64      	subs	r4, r4, r5
 800cb7a:	10a4      	asrs	r4, r4, #2
 800cb7c:	42a6      	cmp	r6, r4
 800cb7e:	d109      	bne.n	800cb94 <__libc_init_array+0x24>
 800cb80:	2600      	movs	r6, #0
 800cb82:	f000 f819 	bl	800cbb8 <_init>
 800cb86:	4c0a      	ldr	r4, [pc, #40]	@ (800cbb0 <__libc_init_array+0x40>)
 800cb88:	4d0a      	ldr	r5, [pc, #40]	@ (800cbb4 <__libc_init_array+0x44>)
 800cb8a:	1b64      	subs	r4, r4, r5
 800cb8c:	10a4      	asrs	r4, r4, #2
 800cb8e:	42a6      	cmp	r6, r4
 800cb90:	d105      	bne.n	800cb9e <__libc_init_array+0x2e>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	00b3      	lsls	r3, r6, #2
 800cb96:	58eb      	ldr	r3, [r5, r3]
 800cb98:	4798      	blx	r3
 800cb9a:	3601      	adds	r6, #1
 800cb9c:	e7ee      	b.n	800cb7c <__libc_init_array+0xc>
 800cb9e:	00b3      	lsls	r3, r6, #2
 800cba0:	58eb      	ldr	r3, [r5, r3]
 800cba2:	4798      	blx	r3
 800cba4:	3601      	adds	r6, #1
 800cba6:	e7f2      	b.n	800cb8e <__libc_init_array+0x1e>
 800cba8:	0800ce70 	.word	0x0800ce70
 800cbac:	0800ce70 	.word	0x0800ce70
 800cbb0:	0800ce74 	.word	0x0800ce74
 800cbb4:	0800ce70 	.word	0x0800ce70

0800cbb8 <_init>:
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbbe:	bc08      	pop	{r3}
 800cbc0:	469e      	mov	lr, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <_fini>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	46c0      	nop			@ (mov r8, r8)
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr
