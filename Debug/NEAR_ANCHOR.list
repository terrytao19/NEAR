
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011978  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08011a38  08011a38  00012a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012048  08012048  000143bc  2**0
                  CONTENTS
  4 .ARM          00000000  08012048  08012048  000143bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012048  08012048  000143bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012048  08012048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801204c  0801204c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003bc  20000000  08012050  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f8  200003c0  0801240c  000143c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  0801240c  00014db8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000143bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea79  00000000  00000000  000143e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6c  00000000  00000000  00032e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00037bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001558  00000000  00000000  000397a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ea6  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002473d  00000000  00000000  00042ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad153  00000000  00000000  000672e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007370  00000000  00000000  0011447c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000103  00000000  00000000  0011b83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c0 	.word	0x200003c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011a20 	.word	0x08011a20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003c4 	.word	0x200003c4
 8000104:	08011a20 	.word	0x08011a20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe5e 	bl	8002220 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fd24 	bl	8002220 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9ef 	bl	8002220 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f9ce 	bl	8002220 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	08011a80 	.word	0x08011a80
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f901 	bl	8002220 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8ef 	bl	8002220 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fe44 	bl	8002220 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fe20 	bl	8002220 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fca9 	bl	8002220 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc97 	bl	8002220 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fbdf 	bl	8002220 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa97 	bl	8002220 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f848 	bl	8002220 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f81f 	bl	8002220 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__clzsi2>:
 8002220:	211c      	movs	r1, #28
 8002222:	2301      	movs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	4298      	cmp	r0, r3
 8002228:	d301      	bcc.n	800222e <__clzsi2+0xe>
 800222a:	0c00      	lsrs	r0, r0, #16
 800222c:	3910      	subs	r1, #16
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4298      	cmp	r0, r3
 8002232:	d301      	bcc.n	8002238 <__clzsi2+0x18>
 8002234:	0a00      	lsrs	r0, r0, #8
 8002236:	3908      	subs	r1, #8
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0x22>
 800223e:	0900      	lsrs	r0, r0, #4
 8002240:	3904      	subs	r1, #4
 8002242:	a202      	add	r2, pc, #8	@ (adr r2, 800224c <__clzsi2+0x2c>)
 8002244:	5c10      	ldrb	r0, [r2, r0]
 8002246:	1840      	adds	r0, r0, r1
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	02020304 	.word	0x02020304
 8002250:	01010101 	.word	0x01010101
	...

0800225c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002260:	f001 f8a8 	bl	80033b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002264:	f000 f840 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002268:	f000 fa2e 	bl	80026c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800226c:	f000 fa0e 	bl	800268c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002270:	f000 f9d8 	bl	8002624 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002274:	f000 f904 	bl	8002480 <MX_SPI1_Init>
  MX_ADC_Init();
 8002278:	f000 f8a6 	bl	80023c8 <MX_ADC_Init>
  MX_SPI2_Init();
 800227c:	f000 f93e 	bl	80024fc <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002280:	f00a ff98 	bl	800d1b4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002284:	f000 f978 	bl	8002578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 8002288:	2390      	movs	r3, #144	@ 0x90
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	2201      	movs	r2, #1
 800228e:	2101      	movs	r1, #1
 8002290:	0018      	movs	r0, r3
 8002292:	f002 f820 	bl	80042d6 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8002296:	23fa      	movs	r3, #250	@ 0xfa
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	0018      	movs	r0, r3
 800229c:	f001 f8ee 	bl	800347c <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 80022a0:	2390      	movs	r3, #144	@ 0x90
 80022a2:	05db      	lsls	r3, r3, #23
 80022a4:	2200      	movs	r2, #0
 80022a6:	2101      	movs	r1, #1
 80022a8:	0018      	movs	r0, r3
 80022aa:	f002 f814 	bl	80042d6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80022ae:	2064      	movs	r0, #100	@ 0x64
 80022b0:	f001 f8e4 	bl	800347c <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 80022b4:	2390      	movs	r3, #144	@ 0x90
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	2201      	movs	r2, #1
 80022ba:	2101      	movs	r1, #1
 80022bc:	0018      	movs	r0, r3
 80022be:	f002 f80a 	bl	80042d6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80022c2:	2064      	movs	r0, #100	@ 0x64
 80022c4:	f001 f8da 	bl	800347c <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	4904      	ldr	r1, [pc, #16]	@ (80022e0 <main+0x84>)
 80022ce:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <main+0x88>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f007 f905 	bl	80094e0 <HAL_UARTEx_ReceiveToIdle_DMA>
//  }

//  CDC_Transmit_FS("JOIN SUCCESS\r\n", 14);

  #ifdef FLASH_TAG
    tag_main();
 80022d6:	f000 fe1f 	bl	8002f18 <tag_main>
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
//  HAL_Delay(100);
//  send_at_msg("AT+TEST=RXLRPKT\r\n");

  while (1)
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	e7fd      	b.n	80022da <main+0x7e>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000628 	.word	0x20000628
 80022e4:	2000052c 	.word	0x2000052c

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b099      	sub	sp, #100	@ 0x64
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	242c      	movs	r4, #44	@ 0x2c
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	2334      	movs	r3, #52	@ 0x34
 80022f6:	001a      	movs	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f00d fbc7 	bl	800fa8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fe:	231c      	movs	r3, #28
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	0018      	movs	r0, r3
 8002304:	2310      	movs	r3, #16
 8002306:	001a      	movs	r2, r3
 8002308:	2100      	movs	r1, #0
 800230a:	f00d fbbf 	bl	800fa8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800230e:	003b      	movs	r3, r7
 8002310:	0018      	movs	r0, r3
 8002312:	231c      	movs	r3, #28
 8002314:	001a      	movs	r2, r3
 8002316:	2100      	movs	r1, #0
 8002318:	f00d fbb8 	bl	800fa8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800231c:	0021      	movs	r1, r4
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2232      	movs	r2, #50	@ 0x32
 8002322:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2201      	movs	r2, #1
 8002328:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2201      	movs	r2, #1
 800232e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2210      	movs	r2, #16
 800233a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2210      	movs	r2, #16
 8002340:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002342:	187b      	adds	r3, r7, r1
 8002344:	2202      	movs	r2, #2
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002348:	187b      	adds	r3, r7, r1
 800234a:	2280      	movs	r2, #128	@ 0x80
 800234c:	0212      	lsls	r2, r2, #8
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002350:	187b      	adds	r3, r7, r1
 8002352:	22e0      	movs	r2, #224	@ 0xe0
 8002354:	0352      	lsls	r2, r2, #13
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2201      	movs	r2, #1
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235e:	187b      	adds	r3, r7, r1
 8002360:	0018      	movs	r0, r3
 8002362:	f003 fe33 	bl	8005fcc <HAL_RCC_OscConfig>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800236a:	f000 fae1 	bl	8002930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236e:	211c      	movs	r1, #28
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2207      	movs	r2, #7
 8002374:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2202      	movs	r2, #2
 800237a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2101      	movs	r1, #1
 800238c:	0018      	movs	r0, r3
 800238e:	f004 f9a3 	bl	80066d8 <HAL_RCC_ClockConfig>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d001      	beq.n	800239a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002396:	f000 facb 	bl	8002930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 800239a:	003b      	movs	r3, r7
 800239c:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <SystemClock_Config+0xdc>)
 800239e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80023a0:	003b      	movs	r3, r7
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80023a6:	003b      	movs	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	003b      	movs	r3, r7
 80023ae:	0018      	movs	r0, r3
 80023b0:	f004 fafe 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80023b8:	f000 faba 	bl	8002930 <Error_Handler>
  }
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b019      	add	sp, #100	@ 0x64
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	00020001 	.word	0x00020001

080023c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	0018      	movs	r0, r3
 80023d2:	230c      	movs	r3, #12
 80023d4:	001a      	movs	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f00d fb58 	bl	800fa8c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80023dc:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023de:	4a27      	ldr	r2, [pc, #156]	@ (800247c <MX_ADC_Init+0xb4>)
 80023e0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023e2:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ee:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <MX_ADC_Init+0xb0>)
 80023fc:	2204      	movs	r2, #4
 80023fe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002402:	2200      	movs	r2, #0
 8002404:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002408:	2200      	movs	r2, #0
 800240a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800240c:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <MX_ADC_Init+0xb0>)
 800240e:	2200      	movs	r2, #0
 8002410:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002412:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002414:	2200      	movs	r2, #0
 8002416:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <MX_ADC_Init+0xb0>)
 800241a:	22c2      	movs	r2, #194	@ 0xc2
 800241c:	32ff      	adds	r2, #255	@ 0xff
 800241e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002428:	2224      	movs	r2, #36	@ 0x24
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800242e:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002430:	2201      	movs	r2, #1
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_ADC_Init+0xb0>)
 8002436:	0018      	movs	r0, r3
 8002438:	f001 f844 	bl	80034c4 <HAL_ADC_Init>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d001      	beq.n	8002444 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002440:	f000 fa76 	bl	8002930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2208      	movs	r2, #8
 8002448:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	0152      	lsls	r2, r2, #5
 8002450:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	0552      	lsls	r2, r2, #21
 8002458:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800245a:	1d3a      	adds	r2, r7, #4
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_ADC_Init+0xb0>)
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f001 f96f 	bl	8003744 <HAL_ADC_ConfigChannel>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d001      	beq.n	800246e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800246a:	f000 fa61 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	200003dc 	.word	0x200003dc
 800247c:	40012400 	.word	0x40012400

08002480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <MX_SPI1_Init+0x74>)
 8002486:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <MX_SPI1_Init+0x78>)
 8002488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <MX_SPI1_Init+0x74>)
 800248c:	2282      	movs	r2, #130	@ 0x82
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002492:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002498:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <MX_SPI1_Init+0x74>)
 800249a:	22e0      	movs	r2, #224	@ 0xe0
 800249c:	00d2      	lsls	r2, r2, #3
 800249e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a6:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024ce:	2207      	movs	r2, #7
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024da:	2208      	movs	r2, #8
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <MX_SPI1_Init+0x74>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f004 fb63 	bl	8006bac <HAL_SPI_Init>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024ea:	f000 fa21 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000041c 	.word	0x2000041c
 80024f8:	40013000 	.word	0x40013000

080024fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002502:	4a1c      	ldr	r2, [pc, #112]	@ (8002574 <MX_SPI2_Init+0x78>)
 8002504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002508:	2282      	movs	r2, #130	@ 0x82
 800250a:	0052      	lsls	r2, r2, #1
 800250c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800250e:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002516:	22c0      	movs	r2, #192	@ 0xc0
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <MX_SPI2_Init+0x74>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002522:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <MX_SPI2_Init+0x74>)
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	02d2      	lsls	r2, r2, #11
 800252e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <MX_SPI2_Init+0x74>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <MX_SPI2_Init+0x74>)
 800254a:	2207      	movs	r2, #7
 800254c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <MX_SPI2_Init+0x74>)
 8002556:	2208      	movs	r2, #8
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <MX_SPI2_Init+0x74>)
 800255c:	0018      	movs	r0, r3
 800255e:	f004 fb25 	bl	8006bac <HAL_SPI_Init>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002566:	f000 f9e3 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000480 	.word	0x20000480
 8002574:	40003800 	.word	0x40003800

08002578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257e:	2308      	movs	r3, #8
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	0018      	movs	r0, r3
 8002584:	2310      	movs	r3, #16
 8002586:	001a      	movs	r2, r3
 8002588:	2100      	movs	r1, #0
 800258a:	f00d fa7f 	bl	800fa8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258e:	003b      	movs	r3, r7
 8002590:	0018      	movs	r0, r3
 8002592:	2308      	movs	r3, #8
 8002594:	001a      	movs	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	f00d fa78 	bl	800fa8c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800259c:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_TIM3_Init+0xa4>)
 800259e:	4a20      	ldr	r2, [pc, #128]	@ (8002620 <MX_TIM3_Init+0xa8>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025a4:	22f4      	movs	r2, #244	@ 0xf4
 80025a6:	32ff      	adds	r2, #255	@ 0xff
 80025a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025b2:	2268      	movs	r2, #104	@ 0x68
 80025b4:	32ff      	adds	r2, #255	@ 0xff
 80025b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b18      	ldr	r3, [pc, #96]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c4:	4b15      	ldr	r3, [pc, #84]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f005 fa1c 	bl	8007a04 <HAL_TIM_Base_Init>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80025d0:	f000 f9ae 	bl	8002930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d4:	2108      	movs	r1, #8
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	0152      	lsls	r2, r2, #5
 80025dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025de:	187a      	adds	r2, r7, r1
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_TIM3_Init+0xa4>)
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f005 fb4b 	bl	8007c80 <HAL_TIM_ConfigClockSource>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80025ee:	f000 f99f 	bl	8002930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	003b      	movs	r3, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f8:	003b      	movs	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fe:	003a      	movs	r2, r7
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_TIM3_Init+0xa4>)
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f005 fd5f 	bl	80080c8 <HAL_TIMEx_MasterConfigSynchronization>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800260e:	f000 f98f 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b006      	add	sp, #24
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	200004e4 	.word	0x200004e4
 8002620:	40000400 	.word	0x40000400

08002624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <MX_USART1_UART_Init+0x64>)
 800262c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002630:	2296      	movs	r2, #150	@ 0x96
 8002632:	0192      	lsls	r2, r2, #6
 8002634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002662:	2210      	movs	r2, #16
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002668:	2280      	movs	r2, #128	@ 0x80
 800266a:	0152      	lsls	r2, r2, #5
 800266c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <MX_USART1_UART_Init+0x60>)
 8002670:	0018      	movs	r0, r3
 8002672:	f005 fd97 	bl	80081a4 <HAL_UART_Init>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d001      	beq.n	800267e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800267a:	f000 f959 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000052c 	.word	0x2000052c
 8002688:	40013800 	.word	0x40013800

0800268c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002692:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <MX_DMA_Init+0x38>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <MX_DMA_Init+0x38>)
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	615a      	str	r2, [r3, #20]
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <MX_DMA_Init+0x38>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	200a      	movs	r0, #10
 80026b0:	f001 fa24 	bl	8003afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80026b4:	200a      	movs	r0, #10
 80026b6:	f001 fa36 	bl	8003b26 <HAL_NVIC_EnableIRQ>

}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	40021000 	.word	0x40021000

080026c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	240c      	movs	r4, #12
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	0018      	movs	r0, r3
 80026d4:	2314      	movs	r3, #20
 80026d6:	001a      	movs	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f00d f9d7 	bl	800fa8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	4b5b      	ldr	r3, [pc, #364]	@ (800284c <MX_GPIO_Init+0x184>)
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <MX_GPIO_Init+0x184>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	03c9      	lsls	r1, r1, #15
 80026e8:	430a      	orrs	r2, r1
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	4b57      	ldr	r3, [pc, #348]	@ (800284c <MX_GPIO_Init+0x184>)
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	03db      	lsls	r3, r3, #15
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <MX_GPIO_Init+0x184>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b53      	ldr	r3, [pc, #332]	@ (800284c <MX_GPIO_Init+0x184>)
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	0289      	lsls	r1, r1, #10
 8002704:	430a      	orrs	r2, r1
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	4b50      	ldr	r3, [pc, #320]	@ (800284c <MX_GPIO_Init+0x184>)
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	4013      	ands	r3, r2
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <MX_GPIO_Init+0x184>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	4b4c      	ldr	r3, [pc, #304]	@ (800284c <MX_GPIO_Init+0x184>)
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	02c9      	lsls	r1, r1, #11
 8002720:	430a      	orrs	r2, r1
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	4b49      	ldr	r3, [pc, #292]	@ (800284c <MX_GPIO_Init+0x184>)
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	02db      	lsls	r3, r3, #11
 800272c:	4013      	ands	r3, r2
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8002732:	2390      	movs	r3, #144	@ 0x90
 8002734:	05db      	lsls	r3, r3, #23
 8002736:	2200      	movs	r2, #0
 8002738:	2111      	movs	r1, #17
 800273a:	0018      	movs	r0, r3
 800273c:	f001 fdcb 	bl	80042d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002740:	4943      	ldr	r1, [pc, #268]	@ (8002850 <MX_GPIO_Init+0x188>)
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <MX_GPIO_Init+0x18c>)
 8002744:	2200      	movs	r2, #0
 8002746:	0018      	movs	r0, r3
 8002748:	f001 fdc5 	bl	80042d6 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 800274c:	193b      	adds	r3, r7, r4
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2201      	movs	r2, #1
 8002756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002764:	193a      	adds	r2, r7, r4
 8002766:	2390      	movs	r3, #144	@ 0x90
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f001 fc1d 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002772:	193b      	adds	r3, r7, r4
 8002774:	2204      	movs	r2, #4
 8002776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002778:	193b      	adds	r3, r7, r4
 800277a:	2288      	movs	r2, #136	@ 0x88
 800277c:	0352      	lsls	r2, r2, #13
 800277e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	193b      	adds	r3, r7, r4
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002786:	193a      	adds	r2, r7, r4
 8002788:	2390      	movs	r3, #144	@ 0x90
 800278a:	05db      	lsls	r3, r3, #23
 800278c:	0011      	movs	r1, r2
 800278e:	0018      	movs	r0, r3
 8002790:	f001 fc0c 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002794:	193b      	adds	r3, r7, r4
 8002796:	2210      	movs	r2, #16
 8002798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	193b      	adds	r3, r7, r4
 800279c:	2201      	movs	r2, #1
 800279e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	2203      	movs	r2, #3
 80027aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80027ac:	193a      	adds	r2, r7, r4
 80027ae:	2390      	movs	r3, #144	@ 0x90
 80027b0:	05db      	lsls	r3, r3, #23
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 fbf9 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	4a24      	ldr	r2, [pc, #144]	@ (8002850 <MX_GPIO_Init+0x188>)
 80027be:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	2201      	movs	r2, #1
 80027c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <MX_GPIO_Init+0x18c>)
 80027d6:	0019      	movs	r1, r3
 80027d8:	0010      	movs	r0, r2
 80027da:	f001 fbe7 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 80027de:	0021      	movs	r1, r4
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	0192      	lsls	r2, r2, #6
 80027e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	000c      	movs	r4, r1
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	4a16      	ldr	r2, [pc, #88]	@ (8002854 <MX_GPIO_Init+0x18c>)
 80027fa:	0019      	movs	r1, r3
 80027fc:	0010      	movs	r0, r2
 80027fe:	f001 fbd5 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002802:	0021      	movs	r1, r4
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2220      	movs	r2, #32
 8002808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2288      	movs	r2, #136	@ 0x88
 800280e:	0352      	lsls	r2, r2, #13
 8002810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2202      	movs	r2, #2
 8002816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002818:	187b      	adds	r3, r7, r1
 800281a:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <MX_GPIO_Init+0x18c>)
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f001 fbc4 	bl	8003fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	2006      	movs	r0, #6
 800282a:	f001 f967 	bl	8003afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800282e:	2006      	movs	r0, #6
 8002830:	f001 f979 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	2007      	movs	r0, #7
 800283a:	f001 f95f 	bl	8003afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800283e:	2007      	movs	r0, #7
 8002840:	f001 f971 	bl	8003b26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b009      	add	sp, #36	@ 0x24
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	00000b44 	.word	0x00000b44
 8002854:	48000400 	.word	0x48000400

08002858 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	000a      	movs	r2, r1
 8002862:	1cbb      	adds	r3, r7, #2
 8002864:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8002866:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	1cba      	adds	r2, r7, #2
 800286c:	8812      	ldrh	r2, [r2, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d050      	beq.n	8002914 <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	1cba      	adds	r2, r7, #2
 8002878:	8812      	ldrh	r2, [r2, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d202      	bcs.n	8002884 <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 800287e:	4b27      	ldr	r3, [pc, #156]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002880:	2200      	movs	r2, #0
 8002882:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <HAL_UARTEx_RxEventCallback+0xc8>)
 800288c:	18d0      	adds	r0, r2, r3
 800288e:	1cbb      	adds	r3, r7, #2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	f00a fd0f 	bl	800d2bc <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 800289e:	230e      	movs	r3, #14
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	e029      	b.n	80028fe <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 80028aa:	210e      	movs	r1, #14
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002920 <HAL_UARTEx_RxEventCallback+0xc8>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80028b6:	d11c      	bne.n	80028f2 <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_UARTEx_RxEventCallback+0xcc>)
 80028ba:	187a      	adds	r2, r7, r1
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 80028c0:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_UARTEx_RxEventCallback+0xcc>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	1cba      	adds	r2, r7, #2
 80028c6:	8812      	ldrh	r2, [r2, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d202      	bcs.n	80028d2 <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_UARTEx_RxEventCallback+0xcc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_UARTEx_RxEventCallback+0xcc>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	001a      	movs	r2, r3
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <HAL_UARTEx_RxEventCallback+0xc8>)
 80028da:	18d3      	adds	r3, r2, r3
 80028dc:	4912      	ldr	r1, [pc, #72]	@ (8002928 <HAL_UARTEx_RxEventCallback+0xd0>)
 80028de:	2215      	movs	r2, #21
 80028e0:	0018      	movs	r0, r3
 80028e2:	f00d f8c5 	bl	800fa70 <memcmp>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_UARTEx_RxEventCallback+0xd4>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
          break;
 80028f0:	e00c      	b.n	800290c <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 80028f2:	210e      	movs	r1, #14
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	3201      	adds	r2, #1
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	230e      	movs	r3, #14
 8002900:	18fa      	adds	r2, r7, r3
 8002902:	1cbb      	adds	r3, r7, #2
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d3ce      	bcc.n	80028aa <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <HAL_UARTEx_RxEventCallback+0xc4>)
 800290e:	1cba      	adds	r2, r7, #2
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	801a      	strh	r2, [r3, #0]


	}

}
 8002914:	46c0      	nop			@ (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000a2a 	.word	0x20000a2a
 8002920:	20000628 	.word	0x20000628
 8002924:	20000a2c 	.word	0x20000a2c
 8002928:	20000000 	.word	0x20000000
 800292c:	20000a28 	.word	0x20000a28

08002930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e7fd      	b.n	8002938 <Error_Handler+0x8>

0800293c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <HAL_MspInit+0x54>)
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_MspInit+0x54>)
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_MspInit+0x54>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_MspInit+0x54>)
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_MspInit+0x54>)
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	0549      	lsls	r1, r1, #21
 8002964:	430a      	orrs	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
 8002968:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_MspInit+0x54>)
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	055b      	lsls	r3, r3, #21
 8002970:	4013      	ands	r3, r2
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2004      	movs	r0, #4
 800297c:	f001 f8be 	bl	8003afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002980:	2004      	movs	r0, #4
 8002982:	f001 f8d0 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b08b      	sub	sp, #44	@ 0x2c
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	2414      	movs	r4, #20
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	0018      	movs	r0, r3
 80029a2:	2314      	movs	r3, #20
 80029a4:	001a      	movs	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f00d f870 	bl	800fa8c <memset>
  if(hadc->Instance==ADC1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12a      	bne.n	8002a0c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0089      	lsls	r1, r1, #2
 80029c0:	430a      	orrs	r2, r1
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	02c9      	lsls	r1, r1, #11
 80029dc:	430a      	orrs	r2, r1
 80029de:	615a      	str	r2, [r3, #20]
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	02db      	lsls	r3, r3, #11
 80029e8:	4013      	ands	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2203      	movs	r2, #3
 80029f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	4a06      	ldr	r2, [pc, #24]	@ (8002a1c <HAL_ADC_MspInit+0x88>)
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f001 fad0 	bl	8003fac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b00b      	add	sp, #44	@ 0x2c
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	40012400 	.word	0x40012400
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	48000400 	.word	0x48000400

08002a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b08d      	sub	sp, #52	@ 0x34
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	241c      	movs	r4, #28
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	2314      	movs	r3, #20
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f00d f82a 	bl	800fa8c <memset>
  if(hspi->Instance==SPI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a45      	ldr	r2, [pc, #276]	@ (8002b54 <HAL_SPI_MspInit+0x134>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d133      	bne.n	8002aaa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a42:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	0149      	lsls	r1, r1, #5
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	0289      	lsls	r1, r1, #10
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	4013      	ands	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002a7a:	0021      	movs	r1, r4
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	22e0      	movs	r2, #224	@ 0xe0
 8002a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2202      	movs	r2, #2
 8002a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2203      	movs	r2, #3
 8002a92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	187a      	adds	r2, r7, r1
 8002a9c:	2390      	movs	r3, #144	@ 0x90
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f001 fa82 	bl	8003fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aa8:	e04f      	b.n	8002b4a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d14a      	bne.n	8002b4a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ab4:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	01c9      	lsls	r1, r1, #7
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	01db      	lsls	r3, r3, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	02c9      	lsls	r1, r1, #11
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_SPI_MspInit+0x138>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	02db      	lsls	r3, r3, #11
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aec:	211c      	movs	r1, #28
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	000c      	movs	r4, r1
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	2202      	movs	r2, #2
 8002afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	2203      	movs	r2, #3
 8002b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <HAL_SPI_MspInit+0x140>)
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f001 fa48 	bl	8003fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002b1c:	0021      	movs	r1, r4
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	22d0      	movs	r2, #208	@ 0xd0
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2202      	movs	r2, #2
 8002b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2203      	movs	r2, #3
 8002b36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_SPI_MspInit+0x140>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f001 fa31 	bl	8003fac <HAL_GPIO_Init>
}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b00d      	add	sp, #52	@ 0x34
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	40013000 	.word	0x40013000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40003800 	.word	0x40003800
 8002b60:	48000400 	.word	0x48000400

08002b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x44>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2010      	movs	r0, #16
 8002b94:	f000 ffb2 	bl	8003afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b98:	2010      	movs	r0, #16
 8002b9a:	f000 ffc4 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08b      	sub	sp, #44	@ 0x2c
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	2414      	movs	r4, #20
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	2314      	movs	r3, #20
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f00c ff62 	bl	800fa8c <memset>
  if(huart->Instance==USART1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <HAL_UART_MspInit+0xf0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d161      	bne.n	8002c96 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	01c9      	lsls	r1, r1, #7
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
 8002be0:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	01db      	lsls	r3, r3, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0289      	lsls	r1, r1, #10
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_UART_MspInit+0xf4>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	22c0      	movs	r2, #192	@ 0xc0
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	0021      	movs	r1, r4
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2202      	movs	r2, #2
 8002c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2203      	movs	r2, #3
 8002c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2201      	movs	r2, #1
 8002c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	187a      	adds	r2, r7, r1
 8002c2e:	2390      	movs	r3, #144	@ 0x90
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	0011      	movs	r1, r2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f001 f9b9 	bl	8003fac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <HAL_UART_MspInit+0xfc>)
 8002c3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c60:	2220      	movs	r2, #32
 8002c62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 ff87 	bl	8003b80 <HAL_DMA_Init>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002c76:	f7ff fe5b 	bl	8002930 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c7e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_UART_MspInit+0xf8>)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	201b      	movs	r0, #27
 8002c8c:	f000 ff36 	bl	8003afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c90:	201b      	movs	r0, #27
 8002c92:	f000 ff48 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b00b      	add	sp, #44	@ 0x2c
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	200005e4 	.word	0x200005e4
 8002cac:	40020030 	.word	0x40020030

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	e7fd      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	e7fd      	b.n	8002cbc <HardFault_Handler+0x4>

08002cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd8:	f000 fbb4 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	f001 fb0d 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002d00:	2020      	movs	r0, #32
 8002d02:	f001 fb05 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 f85f 	bl	8003dd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	200005e4 	.word	0x200005e4

08002d24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <TIM3_IRQHandler+0x14>)
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f004 feba 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	200004e4 	.word	0x200004e4

08002d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <USART1_IRQHandler+0x14>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f005 fa94 	bl	8008270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	2000052c 	.word	0x2000052c

08002d54 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <USB_IRQHandler+0x14>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f001 fc0e 	bl	800457c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	20001734 	.word	0x20001734

08002d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  return 1;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_kill>:

int _kill(int pid, int sig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d82:	f00c fedd 	bl	800fb40 <__errno>
 8002d86:	0003      	movs	r3, r0
 8002d88:	2216      	movs	r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	425b      	negs	r3, r3
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_exit>:

void _exit (int status)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da0:	2301      	movs	r3, #1
 8002da2:	425a      	negs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ffe5 	bl	8002d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	e7fd      	b.n	8002dae <_exit+0x16>

08002db2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e00a      	b.n	8002dda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc4:	e000      	b.n	8002dc8 <_read+0x16>
 8002dc6:	bf00      	nop
 8002dc8:	0001      	movs	r1, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	60ba      	str	r2, [r7, #8]
 8002dd0:	b2ca      	uxtb	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dbf0      	blt.n	8002dc4 <_read+0x12>
  }

  return len;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e009      	b.n	8002e12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	60ba      	str	r2, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	0018      	movs	r0, r3
 8002e08:	e000      	b.n	8002e0c <_write+0x20>
 8002e0a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbf1      	blt.n	8002dfe <_write+0x12>
  }
  return len;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_close>:

int _close(int file)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	425b      	negs	r3, r3
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	0192      	lsls	r2, r2, #6
 8002e48:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_isatty>:

int _isatty(int file)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e5c:	2301      	movs	r3, #1
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e84:	4a14      	ldr	r2, [pc, #80]	@ (8002ed8 <_sbrk+0x5c>)
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <_sbrk+0x60>)
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <_sbrk+0x64>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <_sbrk+0x68>)
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <_sbrk+0x64>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	18d3      	adds	r3, r2, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d207      	bcs.n	8002ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eac:	f00c fe48 	bl	800fb40 <__errno>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	425b      	negs	r3, r3
 8002eba:	e009      	b.n	8002ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	18d2      	adds	r2, r2, r3
 8002eca:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <_sbrk+0x64>)
 8002ecc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b006      	add	sp, #24
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20004000 	.word	0x20004000
 8002edc:	00000400 	.word	0x00000400
 8002ee0:	20000a30 	.word	0x20000a30
 8002ee4:	20001db8 	.word	0x20001db8

08002ee8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <get_anchor_id>:

uint8_t total_anchors = sizeof(anchor_addresses) / 2; // How many anchors in environment
uint8_t total_tags = sizeof(tag_addresses) / 2;       // How many tags in environment

uint8_t * get_anchor_id(uint8_t idx)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	0002      	movs	r2, r0
 8002efc:	1dfb      	adds	r3, r7, #7
 8002efe:	701a      	strb	r2, [r3, #0]
    return anchor_addresses + (idx * 2);
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	001a      	movs	r2, r3
 8002f08:	4b02      	ldr	r3, [pc, #8]	@ (8002f14 <get_anchor_id+0x20>)
 8002f0a:	18d3      	adds	r3, r2, r3
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000001c 	.word	0x2000001c

08002f18 <tag_main>:
 * @return none
 */

int tag_main(void)

{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b08b      	sub	sp, #44	@ 0x2c
 8002f1c:	af00      	add	r7, sp, #0

    memcpy((tx_poll_msg) + TX_POLL_MSG_TAG_ID_IDX, tag_id, 2);
 8002f1e:	48a8      	ldr	r0, [pc, #672]	@ (80031c0 <tag_main+0x2a8>)
 8002f20:	4ba8      	ldr	r3, [pc, #672]	@ (80031c4 <tag_main+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	0019      	movs	r1, r3
 8002f28:	f00c fe42 	bl	800fbb0 <memcpy>
    memcpy((rx_resp_msg) + RX_RESP_MSG_TAG_ID_IDX, tag_id, 2);
 8002f2c:	48a6      	ldr	r0, [pc, #664]	@ (80031c8 <tag_main+0x2b0>)
 8002f2e:	4ba5      	ldr	r3, [pc, #660]	@ (80031c4 <tag_main+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2202      	movs	r2, #2
 8002f34:	0019      	movs	r1, r3
 8002f36:	f00c fe3b 	bl	800fbb0 <memcpy>
    memcpy((tx_final_msg) + TX_FINAL_MSG_TAG_ID_IDX, tag_id, 2);
 8002f3a:	48a4      	ldr	r0, [pc, #656]	@ (80031cc <tag_main+0x2b4>)
 8002f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80031c4 <tag_main+0x2ac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2202      	movs	r2, #2
 8002f42:	0019      	movs	r1, r3
 8002f44:	f00c fe34 	bl	800fbb0 <memcpy>
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002f48:	f00b ff50 	bl	800edec <reset_DW1000>
    port_set_dw1000_slowrate();
 8002f4c:	f00b ffba 	bl	800eec4 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002f50:	2001      	movs	r0, #1
 8002f52:	f00a fe6d 	bl	800dc30 <dwt_initialise>
 8002f56:	0003      	movs	r3, r0
 8002f58:	3301      	adds	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <tag_main+0x48>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	e7fd      	b.n	8002f5c <tag_main+0x44>
        {
        };
    }
    port_set_dw1000_fastrate();
 8002f60:	f00b ffbe 	bl	800eee0 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002f64:	4b9a      	ldr	r3, [pc, #616]	@ (80031d0 <tag_main+0x2b8>)
 8002f66:	0018      	movs	r0, r3
 8002f68:	f00a ffd6 	bl	800df18 <dwt_configure>

    /* Apply TX config */
    dwt_configuretxrf(&tx_config);
 8002f6c:	4b99      	ldr	r3, [pc, #612]	@ (80031d4 <tag_main+0x2bc>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f00a ffbc 	bl	800deec <dwt_configuretxrf>

    dwt_setdblrxbuffmode(0);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f00b fbfd 	bl	800e774 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002f7a:	4b97      	ldr	r3, [pc, #604]	@ (80031d8 <tag_main+0x2c0>)
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f00b f96f 	bl	800e260 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002f82:	4b95      	ldr	r3, [pc, #596]	@ (80031d8 <tag_main+0x2c0>)
 8002f84:	0018      	movs	r0, r3
 8002f86:	f00b f97f 	bl	800e288 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8002f8a:	2396      	movs	r3, #150	@ 0x96
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f00b fc22 	bl	800e7d8 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8002f94:	23af      	movs	r3, #175	@ 0xaf
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f00b fd55 	bl	800ea48 <dwt_setrxtimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8002f9e:	4e8f      	ldr	r6, [pc, #572]	@ (80031dc <tag_main+0x2c4>)
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80031e0 <tag_main+0x2c8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ffa5 	bl	8002ef4 <get_anchor_id>
 8002faa:	0003      	movs	r3, r0
 8002fac:	2202      	movs	r2, #2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	0030      	movs	r0, r6
 8002fb2:	f00c fdfd 	bl	800fbb0 <memcpy>
        memcpy(rx_resp_msg + RX_RESP_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8002fb6:	4e8b      	ldr	r6, [pc, #556]	@ (80031e4 <tag_main+0x2cc>)
 8002fb8:	4b89      	ldr	r3, [pc, #548]	@ (80031e0 <tag_main+0x2c8>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff99 	bl	8002ef4 <get_anchor_id>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0030      	movs	r0, r6
 8002fca:	f00c fdf1 	bl	800fbb0 <memcpy>
        memcpy(tx_final_msg + TX_FINAL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 8002fce:	4e86      	ldr	r6, [pc, #536]	@ (80031e8 <tag_main+0x2d0>)
 8002fd0:	4b83      	ldr	r3, [pc, #524]	@ (80031e0 <tag_main+0x2c8>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ff8d 	bl	8002ef4 <get_anchor_id>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	2202      	movs	r2, #2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0030      	movs	r0, r6
 8002fe2:	f00c fde5 	bl	800fbb0 <memcpy>

        current_anchor = (current_anchor + 1) % total_anchors;
 8002fe6:	4b7e      	ldr	r3, [pc, #504]	@ (80031e0 <tag_main+0x2c8>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	4b7f      	ldr	r3, [pc, #508]	@ (80031ec <tag_main+0x2d4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	0010      	movs	r0, r2
 8002ff4:	f7fd fa14 	bl	8000420 <__aeabi_idivmod>
 8002ff8:	000b      	movs	r3, r1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b78      	ldr	r3, [pc, #480]	@ (80031e0 <tag_main+0x2c8>)
 8002ffe:	701a      	strb	r2, [r3, #0]

        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003000:	4b7b      	ldr	r3, [pc, #492]	@ (80031f0 <tag_main+0x2d8>)
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	4b7b      	ldr	r3, [pc, #492]	@ (80031f4 <tag_main+0x2dc>)
 8003006:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8003008:	4b7a      	ldr	r3, [pc, #488]	@ (80031f4 <tag_main+0x2dc>)
 800300a:	2200      	movs	r2, #0
 800300c:	0019      	movs	r1, r3
 800300e:	200c      	movs	r0, #12
 8003010:	f00b f94b 	bl	800e2aa <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8003014:	2201      	movs	r2, #1
 8003016:	2100      	movs	r1, #0
 8003018:	200c      	movs	r0, #12
 800301a:	f00b f96f 	bl	800e2fc <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800301e:	2002      	movs	r0, #2
 8003020:	f00b fcb4 	bl	800e98c <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	2100      	movs	r1, #0
 8003028:	200f      	movs	r0, #15
 800302a:	f00b fa7d 	bl	800e528 <dwt_read32bitoffsetreg>
 800302e:	0002      	movs	r2, r0
 8003030:	4b71      	ldr	r3, [pc, #452]	@ (80031f8 <tag_main+0x2e0>)
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4b70      	ldr	r3, [pc, #448]	@ (80031f8 <tag_main+0x2e0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a70      	ldr	r2, [pc, #448]	@ (80031fc <tag_main+0x2e4>)
 800303a:	4013      	ands	r3, r2
 800303c:	d0f3      	beq.n	8003026 <tag_main+0x10e>

        // uint32_t status_reg_error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
        // CDC_Transmit_FS((uint8_t*) status_reg_error, sizeof(status_reg_error));

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 800303e:	4b6c      	ldr	r3, [pc, #432]	@ (80031f0 <tag_main+0x2d8>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <tag_main+0x2d8>)
 8003048:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 800304a:	4b6b      	ldr	r3, [pc, #428]	@ (80031f8 <tag_main+0x2e0>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	4013      	ands	r3, r2
 8003054:	d100      	bne.n	8003058 <tag_main+0x140>
 8003056:	e0a7      	b.n	80031a8 <tag_main+0x290>
        {
            uint32 frame_len;

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8003058:	2100      	movs	r1, #0
 800305a:	2010      	movs	r0, #16
 800305c:	f00b fa64 	bl	800e528 <dwt_read32bitoffsetreg>
 8003060:	0003      	movs	r3, r0
 8003062:	227f      	movs	r2, #127	@ 0x7f
 8003064:	4013      	ands	r3, r2
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
            if (frame_len <= RX_BUF_LEN)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	2b14      	cmp	r3, #20
 800306c:	d806      	bhi.n	800307c <tag_main+0x164>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	b299      	uxth	r1, r3
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <tag_main+0x2e8>)
 8003074:	2200      	movs	r2, #0
 8003076:	0018      	movs	r0, r3
 8003078:	f00b f964 	bl	800e344 <dwt_readrxdata>
            }

            CDC_Transmit_FS(rx_buffer, sizeof(rx_buffer));
 800307c:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <tag_main+0x2e8>)
 800307e:	2114      	movs	r1, #20
 8003080:	0018      	movs	r0, r3
 8003082:	f00a f91b 	bl	800d2bc <CDC_Transmit_FS>

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8003086:	2381      	movs	r3, #129	@ 0x81
 8003088:	01db      	lsls	r3, r3, #7
 800308a:	001a      	movs	r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	200f      	movs	r0, #15
 8003090:	f00b fadb 	bl	800e64a <dwt_write32bitoffsetreg>

            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003094:	4b5a      	ldr	r3, [pc, #360]	@ (8003200 <tag_main+0x2e8>)
 8003096:	2200      	movs	r2, #0
 8003098:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 800309a:	495a      	ldr	r1, [pc, #360]	@ (8003204 <tag_main+0x2ec>)
 800309c:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <tag_main+0x2e8>)
 800309e:	220a      	movs	r2, #10
 80030a0:	0018      	movs	r0, r3
 80030a2:	f00c fce5 	bl	800fa70 <memcmp>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d000      	beq.n	80030ac <tag_main+0x194>
 80030aa:	e085      	b.n	80031b8 <tag_main+0x2a0>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 80030ac:	f000 f8be 	bl	800322c <get_tx_timestamp_u64>
 80030b0:	0002      	movs	r2, r0
 80030b2:	000b      	movs	r3, r1
 80030b4:	4954      	ldr	r1, [pc, #336]	@ (8003208 <tag_main+0x2f0>)
 80030b6:	600a      	str	r2, [r1, #0]
 80030b8:	604b      	str	r3, [r1, #4]
                resp_rx_ts = get_rx_timestamp_u64();
 80030ba:	f000 f8f1 	bl	80032a0 <get_rx_timestamp_u64>
 80030be:	0002      	movs	r2, r0
 80030c0:	000b      	movs	r3, r1
 80030c2:	4952      	ldr	r1, [pc, #328]	@ (800320c <tag_main+0x2f4>)
 80030c4:	600a      	str	r2, [r1, #0]
 80030c6:	604b      	str	r3, [r1, #4]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80030c8:	4b50      	ldr	r3, [pc, #320]	@ (800320c <tag_main+0x2f4>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4850      	ldr	r0, [pc, #320]	@ (8003210 <tag_main+0x2f8>)
 80030d0:	2100      	movs	r1, #0
 80030d2:	1812      	adds	r2, r2, r0
 80030d4:	414b      	adcs	r3, r1
 80030d6:	0619      	lsls	r1, r3, #24
 80030d8:	0a14      	lsrs	r4, r2, #8
 80030da:	430c      	orrs	r4, r1
 80030dc:	0a1d      	lsrs	r5, r3, #8
 80030de:	0023      	movs	r3, r4
 80030e0:	623b      	str	r3, [r7, #32]
                dwt_setdelayedtrxtime(final_tx_time);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f00b fc42 	bl	800e96e <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	0011      	movs	r1, r2
 80030f8:	0e09      	lsrs	r1, r1, #24
 80030fa:	60f9      	str	r1, [r7, #12]
 80030fc:	0013      	movs	r3, r2
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	000b      	movs	r3, r1
 8003108:	0a5b      	lsrs	r3, r3, #9
 800310a:	025b      	lsls	r3, r3, #9
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	23ff      	movs	r3, #255	@ 0xff
 8003110:	401a      	ands	r2, r3
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <tag_main+0x2c0>)
 8003116:	2300      	movs	r3, #0
 8003118:	6838      	ldr	r0, [r7, #0]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	1812      	adds	r2, r2, r0
 800311e:	414b      	adcs	r3, r1
 8003120:	493c      	ldr	r1, [pc, #240]	@ (8003214 <tag_main+0x2fc>)
 8003122:	600a      	str	r2, [r1, #0]
 8003124:	604b      	str	r3, [r1, #4]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8003126:	4b38      	ldr	r3, [pc, #224]	@ (8003208 <tag_main+0x2f0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	493a      	ldr	r1, [pc, #232]	@ (8003218 <tag_main+0x300>)
 800312e:	0008      	movs	r0, r1
 8003130:	f000 f8f0 	bl	8003314 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8003134:	4b35      	ldr	r3, [pc, #212]	@ (800320c <tag_main+0x2f4>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4938      	ldr	r1, [pc, #224]	@ (800321c <tag_main+0x304>)
 800313c:	0008      	movs	r0, r1
 800313e:	f000 f8e9 	bl	8003314 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <tag_main+0x2fc>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4935      	ldr	r1, [pc, #212]	@ (8003220 <tag_main+0x308>)
 800314a:	0008      	movs	r0, r1
 800314c:	f000 f8e2 	bl	8003314 <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <tag_main+0x2d8>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <tag_main+0x30c>)
 8003156:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8003158:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <tag_main+0x30c>)
 800315a:	2200      	movs	r2, #0
 800315c:	0019      	movs	r1, r3
 800315e:	2018      	movs	r0, #24
 8003160:	f00b f8a3 	bl	800e2aa <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1);           /* Zero offset in TX buffer, ranging. */
 8003164:	2201      	movs	r2, #1
 8003166:	2100      	movs	r1, #0
 8003168:	2018      	movs	r0, #24
 800316a:	f00b f8c7 	bl	800e2fc <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 800316e:	2001      	movs	r0, #1
 8003170:	f00b fc0c 	bl	800e98c <dwt_starttx>
 8003174:	0003      	movs	r3, r0
 8003176:	61fb      	str	r3, [r7, #28]

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11c      	bne.n	80031b8 <tag_main+0x2a0>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	2100      	movs	r1, #0
 8003182:	200f      	movs	r0, #15
 8003184:	f00b f9d0 	bl	800e528 <dwt_read32bitoffsetreg>
 8003188:	0003      	movs	r3, r0
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	4013      	ands	r3, r2
 800318e:	d0f7      	beq.n	8003180 <tag_main+0x268>
                    {
                    };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	2100      	movs	r1, #0
 8003194:	200f      	movs	r0, #15
 8003196:	f00b fa58 	bl	800e64a <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <tag_main+0x2d8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <tag_main+0x2d8>)
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e007      	b.n	80031b8 <tag_main+0x2a0>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80031a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003228 <tag_main+0x310>)
 80031aa:	001a      	movs	r2, r3
 80031ac:	2100      	movs	r1, #0
 80031ae:	200f      	movs	r0, #15
 80031b0:	f00b fa4b 	bl	800e64a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80031b4:	f00b fc98 	bl	800eae8 <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f00b fdf0 	bl	800ed9e <Sleep>
        memcpy(tx_poll_msg + TX_POLL_MSG_ANCHOR_ID_IDX, get_anchor_id(current_anchor), 2);
 80031be:	e6ee      	b.n	8002f9e <tag_main+0x86>
 80031c0:	2000004b 	.word	0x2000004b
 80031c4:	20000040 	.word	0x20000040
 80031c8:	20000055 	.word	0x20000055
 80031cc:	20000067 	.word	0x20000067
 80031d0:	2000002c 	.word	0x2000002c
 80031d4:	20000038 	.word	0x20000038
 80031d8:	00004031 	.word	0x00004031
 80031dc:	20000049 	.word	0x20000049
 80031e0:	20000a34 	.word	0x20000a34
 80031e4:	20000057 	.word	0x20000057
 80031e8:	20000065 	.word	0x20000065
 80031ec:	20000028 	.word	0x20000028
 80031f0:	20000a35 	.word	0x20000a35
 80031f4:	20000044 	.word	0x20000044
 80031f8:	20000a4c 	.word	0x20000a4c
 80031fc:	2427d000 	.word	0x2427d000
 8003200:	20000a38 	.word	0x20000a38
 8003204:	20000050 	.word	0x20000050
 8003208:	20000a50 	.word	0x20000a50
 800320c:	20000a58 	.word	0x20000a58
 8003210:	09c40000 	.word	0x09c40000
 8003214:	20000a60 	.word	0x20000a60
 8003218:	2000006a 	.word	0x2000006a
 800321c:	2000006e 	.word	0x2000006e
 8003220:	20000072 	.word	0x20000072
 8003224:	20000060 	.word	0x20000060
 8003228:	24279000 	.word	0x24279000

0800322c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8003232:	2200      	movs	r2, #0
 8003234:	2300      	movs	r3, #0
 8003236:	623a      	str	r2, [r7, #32]
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 800323a:	2314      	movs	r3, #20
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	0018      	movs	r0, r3
 8003240:	f00b f899 	bl	800e376 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003244:	2304      	movs	r3, #4
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e020      	b.n	800328c <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	0e1b      	lsrs	r3, r3, #24
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	0215      	lsls	r5, r2, #8
 8003252:	431d      	orrs	r5, r3
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	021c      	lsls	r4, r3, #8
 8003258:	623c      	str	r4, [r7, #32]
 800325a:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 800325c:	2314      	movs	r3, #20
 800325e:	18fa      	adds	r2, r7, r3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	0008      	movs	r0, r1
 8003274:	4318      	orrs	r0, r3
 8003276:	6038      	str	r0, [r7, #0]
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	431a      	orrs	r2, r3
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	623a      	str	r2, [r7, #32]
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b01      	subs	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dadb      	bge.n	800324a <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003296:	0010      	movs	r0, r2
 8003298:	0019      	movs	r1, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b00a      	add	sp, #40	@ 0x28
 800329e:	bdb0      	pop	{r4, r5, r7, pc}

080032a0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80032a6:	2200      	movs	r2, #0
 80032a8:	2300      	movs	r3, #0
 80032aa:	623a      	str	r2, [r7, #32]
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 80032ae:	2314      	movs	r3, #20
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	0018      	movs	r0, r3
 80032b4:	f00b f86d 	bl	800e392 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80032b8:	2304      	movs	r3, #4
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e020      	b.n	8003300 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	0e1b      	lsrs	r3, r3, #24
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	0215      	lsls	r5, r2, #8
 80032c6:	431d      	orrs	r5, r3
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	021c      	lsls	r4, r3, #8
 80032cc:	623c      	str	r4, [r7, #32]
 80032ce:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80032d0:	2314      	movs	r3, #20
 80032d2:	18fa      	adds	r2, r7, r3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	0008      	movs	r0, r1
 80032e8:	4318      	orrs	r0, r3
 80032ea:	6038      	str	r0, [r7, #0]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	623a      	str	r2, [r7, #32]
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	dadb      	bge.n	80032be <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800330a:	0010      	movs	r0, r2
 800330c:	0019      	movs	r1, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b00a      	add	sp, #40	@ 0x28
 8003312:	bdb0      	pop	{r4, r5, r7, pc}

08003314 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	603a      	str	r2, [r7, #0]
 800331e:	607b      	str	r3, [r7, #4]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e013      	b.n	800334e <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8)ts;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	18d1      	adds	r1, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1c13      	adds	r3, r2, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	700b      	strb	r3, [r1, #0]
        ts >>= 8;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	0a14      	lsrs	r4, r2, #8
 800333e:	431c      	orrs	r4, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0a1d      	lsrs	r5, r3, #8
 8003344:	603c      	str	r4, [r7, #0]
 8003346:	607d      	str	r5, [r7, #4]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b03      	cmp	r3, #3
 8003352:	dde8      	ble.n	8003326 <final_msg_set_ts+0x12>
    }
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003360:	480d      	ldr	r0, [pc, #52]	@ (8003398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003362:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003364:	f7ff fdc0 	bl	8002ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003368:	480c      	ldr	r0, [pc, #48]	@ (800339c <LoopForever+0x6>)
  ldr r1, =_edata
 800336a:	490d      	ldr	r1, [pc, #52]	@ (80033a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800336c:	4a0d      	ldr	r2, [pc, #52]	@ (80033a4 <LoopForever+0xe>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003370:	e002      	b.n	8003378 <LoopCopyDataInit>

08003372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003376:	3304      	adds	r3, #4

08003378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800337a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800337c:	d3f9      	bcc.n	8003372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003380:	4c0a      	ldr	r4, [pc, #40]	@ (80033ac <LoopForever+0x16>)
  movs r3, #0
 8003382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003384:	e001      	b.n	800338a <LoopFillZerobss>

08003386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003388:	3204      	adds	r2, #4

0800338a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800338a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800338c:	d3fb      	bcc.n	8003386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800338e:	f00c fbdd 	bl	800fb4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003392:	f7fe ff63 	bl	800225c <main>

08003396 <LoopForever>:

LoopForever:
    b LoopForever
 8003396:	e7fe      	b.n	8003396 <LoopForever>
  ldr   r0, =_estack
 8003398:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800339c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a0:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 80033a4:	08012050 	.word	0x08012050
  ldr r2, =_sbss
 80033a8:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 80033ac:	20001db8 	.word	0x20001db8

080033b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033b0:	e7fe      	b.n	80033b0 <ADC1_COMP_IRQHandler>
	...

080033b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b8:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <HAL_Init+0x24>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_Init+0x24>)
 80033be:	2110      	movs	r1, #16
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033c4:	2003      	movs	r0, #3
 80033c6:	f000 f809 	bl	80033dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ca:	f7ff fab7 	bl	800293c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	40022000 	.word	0x40022000

080033dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <HAL_InitTick+0x5c>)
 80033e6:	681c      	ldr	r4, [r3, #0]
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <HAL_InitTick+0x60>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	0019      	movs	r1, r3
 80033ee:	23fa      	movs	r3, #250	@ 0xfa
 80033f0:	0098      	lsls	r0, r3, #2
 80033f2:	f7fc fea5 	bl	8000140 <__udivsi3>
 80033f6:	0003      	movs	r3, r0
 80033f8:	0019      	movs	r1, r3
 80033fa:	0020      	movs	r0, r4
 80033fc:	f7fc fea0 	bl	8000140 <__udivsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fbaf 	bl	8003b66 <HAL_SYSTICK_Config>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d001      	beq.n	8003410 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e00f      	b.n	8003430 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d80b      	bhi.n	800342e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	2301      	movs	r3, #1
 800341a:	425b      	negs	r3, r3
 800341c:	2200      	movs	r2, #0
 800341e:	0018      	movs	r0, r3
 8003420:	f000 fb6c 	bl	8003afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_InitTick+0x64>)
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b003      	add	sp, #12
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	20000018 	.word	0x20000018
 800343c:	2000007c 	.word	0x2000007c
 8003440:	20000078 	.word	0x20000078

08003444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_IncTick+0x1c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	001a      	movs	r2, r3
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_IncTick+0x20>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	18d2      	adds	r2, r2, r3
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_IncTick+0x20>)
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	2000007c 	.word	0x2000007c
 8003464:	20000a68 	.word	0x20000a68

08003468 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b02      	ldr	r3, [pc, #8]	@ (8003478 <HAL_GetTick+0x10>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20000a68 	.word	0x20000a68

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff fff0 	bl	8003468 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	001a      	movs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	f7ff ffe0 	bl	8003468 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	2000007c 	.word	0x2000007c

080034c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e125      	b.n	800372e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2234      	movs	r2, #52	@ 0x34
 80034f4:	2100      	movs	r1, #0
 80034f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fa4a 	bl	8002994 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	2210      	movs	r2, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d000      	beq.n	800350c <HAL_ADC_Init+0x48>
 800350a:	e103      	b.n	8003714 <HAL_ADC_Init+0x250>
 800350c:	230f      	movs	r3, #15
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d000      	beq.n	8003518 <HAL_ADC_Init+0x54>
 8003516:	e0fd      	b.n	8003714 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003522:	d000      	beq.n	8003526 <HAL_ADC_Init+0x62>
 8003524:	e0f6      	b.n	8003714 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	4a83      	ldr	r2, [pc, #524]	@ (8003738 <HAL_ADC_Init+0x274>)
 800352c:	4013      	ands	r3, r2
 800352e:	2202      	movs	r2, #2
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2203      	movs	r2, #3
 800353e:	4013      	ands	r3, r2
 8003540:	2b01      	cmp	r3, #1
 8003542:	d112      	bne.n	800356a <HAL_ADC_Init+0xa6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	2b01      	cmp	r3, #1
 8003550:	d009      	beq.n	8003566 <HAL_ADC_Init+0xa2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	401a      	ands	r2, r3
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	429a      	cmp	r2, r3
 8003564:	d101      	bne.n	800356a <HAL_ADC_Init+0xa6>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_ADC_Init+0xa8>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2218      	movs	r2, #24
 8003578:	4393      	bics	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	0899      	lsrs	r1, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4964      	ldr	r1, [pc, #400]	@ (800373c <HAL_ADC_Init+0x278>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7e1b      	ldrb	r3, [r3, #24]
 80035b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7e5b      	ldrb	r3, [r3, #25]
 80035b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7e9b      	ldrb	r3, [r3, #26]
 80035c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d002      	beq.n	80035d2 <HAL_ADC_Init+0x10e>
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	015b      	lsls	r3, r3, #5
 80035d0:	e000      	b.n	80035d4 <HAL_ADC_Init+0x110>
 80035d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035da:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_Init+0x124>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e000      	b.n	80035ea <HAL_ADC_Init+0x126>
 80035e8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80035ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2124      	movs	r1, #36	@ 0x24
 80035f0:	5c5b      	ldrb	r3, [r3, r1]
 80035f2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7edb      	ldrb	r3, [r3, #27]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7e9b      	ldrb	r3, [r3, #26]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2280      	movs	r2, #128	@ 0x80
 8003610:	0252      	lsls	r2, r2, #9
 8003612:	4313      	orrs	r3, r2
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	e00b      	b.n	8003630 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	2220      	movs	r2, #32
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2201      	movs	r2, #1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	23c2      	movs	r3, #194	@ 0xc2
 8003636:	33ff      	adds	r3, #255	@ 0xff
 8003638:	429a      	cmp	r2, r3
 800363a:	d007      	beq.n	800364c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003644:	4313      	orrs	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68d9      	ldr	r1, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	055b      	lsls	r3, r3, #21
 8003664:	429a      	cmp	r2, r3
 8003666:	d01b      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d017      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	2b02      	cmp	r3, #2
 8003676:	d013      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	2b03      	cmp	r3, #3
 800367e:	d00f      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00b      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	2b05      	cmp	r3, #5
 800368e:	d007      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	2b06      	cmp	r3, #6
 8003696:	d003      	beq.n	80036a0 <HAL_ADC_Init+0x1dc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	2b07      	cmp	r3, #7
 800369e:	d112      	bne.n	80036c6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2107      	movs	r1, #7
 80036ac:	438a      	bics	r2, r1
 80036ae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6959      	ldr	r1, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	2207      	movs	r2, #7
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_ADC_Init+0x27c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d10b      	bne.n	80036ee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	2203      	movs	r2, #3
 80036e2:	4393      	bics	r3, r2
 80036e4:	2201      	movs	r2, #1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036ec:	e01c      	b.n	8003728 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	2212      	movs	r2, #18
 80036f4:	4393      	bics	r3, r2
 80036f6:	2210      	movs	r2, #16
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	2201      	movs	r2, #1
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800370a:	230f      	movs	r3, #15
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003712:	e009      	b.n	8003728 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	2210      	movs	r2, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003720:	230f      	movs	r3, #15
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003728:	230f      	movs	r3, #15
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	781b      	ldrb	r3, [r3, #0]
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	fffffefd 	.word	0xfffffefd
 800373c:	fffe0219 	.word	0xfffe0219
 8003740:	833fffe7 	.word	0x833fffe7

08003744 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374e:	230f      	movs	r3, #15
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	055b      	lsls	r3, r3, #21
 8003762:	429a      	cmp	r2, r3
 8003764:	d011      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d00d      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	2b02      	cmp	r3, #2
 8003774:	d009      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	2b03      	cmp	r3, #3
 800377c:	d005      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	2b04      	cmp	r3, #4
 8003784:	d001      	beq.n	800378a <HAL_ADC_ConfigChannel+0x46>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2234      	movs	r2, #52	@ 0x34
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x54>
 8003794:	2302      	movs	r3, #2
 8003796:	e0d0      	b.n	800393a <HAL_ADC_ConfigChannel+0x1f6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2234      	movs	r2, #52	@ 0x34
 800379c:	2101      	movs	r1, #1
 800379e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2204      	movs	r2, #4
 80037a8:	4013      	ands	r3, r2
 80037aa:	d000      	beq.n	80037ae <HAL_ADC_ConfigChannel+0x6a>
 80037ac:	e0b4      	b.n	8003918 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a64      	ldr	r2, [pc, #400]	@ (8003944 <HAL_ADC_ConfigChannel+0x200>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x76>
 80037b8:	e082      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	429a      	cmp	r2, r3
 80037da:	d037      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d033      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d02f      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d02b      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d027      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	2b05      	cmp	r3, #5
 8003802:	d023      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	2b06      	cmp	r3, #6
 800380a:	d01f      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	2b07      	cmp	r3, #7
 8003812:	d01b      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2107      	movs	r1, #7
 8003820:	400b      	ands	r3, r1
 8003822:	429a      	cmp	r2, r3
 8003824:	d012      	beq.n	800384c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2107      	movs	r1, #7
 8003832:	438a      	bics	r2, r1
 8003834:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6959      	ldr	r1, [r3, #20]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2207      	movs	r2, #7
 8003842:	401a      	ands	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d007      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x120>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b11      	cmp	r3, #17
 800385a:	d003      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x120>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b12      	cmp	r3, #18
 8003862:	d163      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003864:	4b38      	ldr	r3, [pc, #224]	@ (8003948 <HAL_ADC_ConfigChannel+0x204>)
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b10      	cmp	r3, #16
 800386e:	d009      	beq.n	8003884 <HAL_ADC_ConfigChannel+0x140>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b11      	cmp	r3, #17
 8003876:	d102      	bne.n	800387e <HAL_ADC_ConfigChannel+0x13a>
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	03db      	lsls	r3, r3, #15
 800387c:	e004      	b.n	8003888 <HAL_ADC_ConfigChannel+0x144>
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	045b      	lsls	r3, r3, #17
 8003882:	e001      	b.n	8003888 <HAL_ADC_ConfigChannel+0x144>
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <HAL_ADC_ConfigChannel+0x204>)
 800388a:	430b      	orrs	r3, r1
 800388c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b10      	cmp	r3, #16
 8003894:	d14a      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_ADC_ConfigChannel+0x208>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	492d      	ldr	r1, [pc, #180]	@ (8003950 <HAL_ADC_ConfigChannel+0x20c>)
 800389c:	0018      	movs	r0, r3
 800389e:	f7fc fc4f 	bl	8000140 <__udivsi3>
 80038a2:	0003      	movs	r3, r0
 80038a4:	001a      	movs	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b0:	e002      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f9      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x16e>
 80038be:	e035      	b.n	800392c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	4099      	lsls	r1, r3
 80038ce:	000b      	movs	r3, r1
 80038d0:	43d9      	mvns	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d007      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x1ae>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b11      	cmp	r3, #17
 80038e8:	d003      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x1ae>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b12      	cmp	r3, #18
 80038f0:	d11c      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <HAL_ADC_ConfigChannel+0x204>)
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d007      	beq.n	800390e <HAL_ADC_ConfigChannel+0x1ca>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b11      	cmp	r3, #17
 8003904:	d101      	bne.n	800390a <HAL_ADC_ConfigChannel+0x1c6>
 8003906:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <HAL_ADC_ConfigChannel+0x210>)
 8003908:	e002      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1cc>
 800390a:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <HAL_ADC_ConfigChannel+0x214>)
 800390c:	e000      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1cc>
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_ADC_ConfigChannel+0x218>)
 8003910:	4a0d      	ldr	r2, [pc, #52]	@ (8003948 <HAL_ADC_ConfigChannel+0x204>)
 8003912:	400b      	ands	r3, r1
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e009      	b.n	800392c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	2220      	movs	r2, #32
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003924:	230f      	movs	r3, #15
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2234      	movs	r2, #52	@ 0x34
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003934:	230f      	movs	r3, #15
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	00001001 	.word	0x00001001
 8003948:	40012708 	.word	0x40012708
 800394c:	20000018 	.word	0x20000018
 8003950:	000f4240 	.word	0x000f4240
 8003954:	ffbfffff 	.word	0xffbfffff
 8003958:	feffffff 	.word	0xfeffffff
 800395c:	ff7fffff 	.word	0xff7fffff

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b7f      	cmp	r3, #127	@ 0x7f
 8003972:	d809      	bhi.n	8003988 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	001a      	movs	r2, r3
 800397a:	231f      	movs	r3, #31
 800397c:	401a      	ands	r2, r3
 800397e:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <__NVIC_EnableIRQ+0x30>)
 8003980:	2101      	movs	r1, #1
 8003982:	4091      	lsls	r1, r2
 8003984:	000a      	movs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]
  }
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	0002      	movs	r2, r0
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80039a6:	d810      	bhi.n	80039ca <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	001a      	movs	r2, r3
 80039ae:	231f      	movs	r3, #31
 80039b0:	4013      	ands	r3, r2
 80039b2:	4908      	ldr	r1, [pc, #32]	@ (80039d4 <__NVIC_DisableIRQ+0x40>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	0013      	movs	r3, r2
 80039ba:	2280      	movs	r2, #128	@ 0x80
 80039bc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039be:	f3bf 8f4f 	dsb	sy
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80039c4:	f3bf 8f6f 	isb	sy
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	0002      	movs	r2, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80039ec:	d828      	bhi.n	8003a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ee:	4a2f      	ldr	r2, [pc, #188]	@ (8003aac <__NVIC_SetPriority+0xd4>)
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	33c0      	adds	r3, #192	@ 0xc0
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	589b      	ldr	r3, [r3, r2]
 80039fe:	1dfa      	adds	r2, r7, #7
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	0011      	movs	r1, r2
 8003a04:	2203      	movs	r2, #3
 8003a06:	400a      	ands	r2, r1
 8003a08:	00d2      	lsls	r2, r2, #3
 8003a0a:	21ff      	movs	r1, #255	@ 0xff
 8003a0c:	4091      	lsls	r1, r2
 8003a0e:	000a      	movs	r2, r1
 8003a10:	43d2      	mvns	r2, r2
 8003a12:	401a      	ands	r2, r3
 8003a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	22ff      	movs	r2, #255	@ 0xff
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	2303      	movs	r3, #3
 8003a26:	4003      	ands	r3, r0
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a2c:	481f      	ldr	r0, [pc, #124]	@ (8003aac <__NVIC_SetPriority+0xd4>)
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	430a      	orrs	r2, r1
 8003a38:	33c0      	adds	r3, #192	@ 0xc0
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a3e:	e031      	b.n	8003aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a40:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab0 <__NVIC_SetPriority+0xd8>)
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	0019      	movs	r1, r3
 8003a48:	230f      	movs	r3, #15
 8003a4a:	400b      	ands	r3, r1
 8003a4c:	3b08      	subs	r3, #8
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3306      	adds	r3, #6
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	3304      	adds	r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1dfa      	adds	r2, r7, #7
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	0011      	movs	r1, r2
 8003a60:	2203      	movs	r2, #3
 8003a62:	400a      	ands	r2, r1
 8003a64:	00d2      	lsls	r2, r2, #3
 8003a66:	21ff      	movs	r1, #255	@ 0xff
 8003a68:	4091      	lsls	r1, r2
 8003a6a:	000a      	movs	r2, r1
 8003a6c:	43d2      	mvns	r2, r2
 8003a6e:	401a      	ands	r2, r3
 8003a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	22ff      	movs	r2, #255	@ 0xff
 8003a78:	401a      	ands	r2, r3
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	2303      	movs	r3, #3
 8003a82:	4003      	ands	r3, r0
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a88:	4809      	ldr	r0, [pc, #36]	@ (8003ab0 <__NVIC_SetPriority+0xd8>)
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	001c      	movs	r4, r3
 8003a90:	230f      	movs	r3, #15
 8003a92:	4023      	ands	r3, r4
 8003a94:	3b08      	subs	r3, #8
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	3306      	adds	r3, #6
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	18c3      	adds	r3, r0, r3
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b003      	add	sp, #12
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	e000e100 	.word	0xe000e100
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1e5a      	subs	r2, r3, #1
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	045b      	lsls	r3, r3, #17
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d301      	bcc.n	8003acc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e010      	b.n	8003aee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <SysTick_Config+0x44>)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	425b      	negs	r3, r3
 8003ad8:	2103      	movs	r1, #3
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7ff ff7c 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <SysTick_Config+0x44>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <SysTick_Config+0x44>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	210f      	movs	r1, #15
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	1c02      	adds	r2, r0, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff ff5d 	bl	80039d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b004      	add	sp, #16
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff ff11 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff ff1b 	bl	8003994 <__NVIC_DisableIRQ>
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff ff9f 	bl	8003ab4 <SysTick_Config>
 8003b76:	0003      	movs	r3, r0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e036      	b.n	8003c04 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2221      	movs	r2, #33	@ 0x21
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	@ (8003c0c <HAL_DMA_Init+0x8c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f9c4 	bl	8003f74 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2221      	movs	r2, #33	@ 0x21
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	ffffc00f 	.word	0xffffc00f

08003c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2317      	movs	r3, #23
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	5c9b      	ldrb	r3, [r3, r2]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Start_IT+0x24>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e04f      	b.n	8003cd4 <HAL_DMA_Start_IT+0xc4>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	2101      	movs	r1, #1
 8003c3a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2221      	movs	r2, #33	@ 0x21
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d13a      	bne.n	8003cbe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2221      	movs	r2, #33	@ 0x21
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	438a      	bics	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f954 	bl	8003f1a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	210e      	movs	r1, #14
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e00f      	b.n	8003cac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	210a      	movs	r1, #10
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cc6:	2317      	movs	r3, #23
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	2202      	movs	r2, #2
 8003ccc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003cce:	2317      	movs	r3, #23
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	781b      	ldrb	r3, [r3, #0]
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2221      	movs	r2, #33	@ 0x21
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d008      	beq.n	8003d02 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e020      	b.n	8003d44 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	210e      	movs	r1, #14
 8003d0e:	438a      	bics	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	438a      	bics	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4091      	lsls	r1, r2
 8003d2e:	000a      	movs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	210f      	movs	r1, #15
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2221      	movs	r2, #33	@ 0x21
 8003d60:	5c9b      	ldrb	r3, [r3, r2]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d006      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e028      	b.n	8003dc8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	210e      	movs	r1, #14
 8003d82:	438a      	bics	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	438a      	bics	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4091      	lsls	r1, r2
 8003da2:	000a      	movs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2221      	movs	r2, #33	@ 0x21
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	4798      	blx	r3
    }
  }
  return status;
 8003dc8:	230f      	movs	r3, #15
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	0013      	movs	r3, r2
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d024      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x72>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2204      	movs	r2, #4
 8003e02:	4013      	ands	r3, r2
 8003e04:	d020      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d107      	bne.n	8003e22 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	438a      	bics	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4091      	lsls	r1, r2
 8003e2e:	000a      	movs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d100      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x66>
 8003e3a:	e06a      	b.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	0010      	movs	r0, r2
 8003e44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e46:	e064      	b.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	d02b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xda>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d027      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2220      	movs	r2, #32
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d10b      	bne.n	8003e84 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	210a      	movs	r1, #10
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2221      	movs	r2, #33	@ 0x21
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4091      	lsls	r1, r2
 8003e90:	000a      	movs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d036      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	0010      	movs	r0, r2
 8003eac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003eae:	e030      	b.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	0013      	movs	r3, r2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d028      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d024      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	210e      	movs	r1, #14
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4091      	lsls	r1, r2
 8003ee4:	000a      	movs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2221      	movs	r2, #33	@ 0x21
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	4798      	blx	r3
    }
  }
}
 8003f10:	e7ff      	b.n	8003f12 <HAL_DMA_IRQHandler+0x13c>
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b004      	add	sp, #16
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	2101      	movs	r1, #1
 8003f32:	4091      	lsls	r1, r2
 8003f34:	000a      	movs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d108      	bne.n	8003f5a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f58:	e007      	b.n	8003f6a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <DMA_CalcBaseAndBitshift+0x30>)
 8003f82:	4694      	mov	ip, r2
 8003f84:	4463      	add	r3, ip
 8003f86:	2114      	movs	r1, #20
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc f8d9 	bl	8000140 <__udivsi3>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a03      	ldr	r2, [pc, #12]	@ (8003fa8 <DMA_CalcBaseAndBitshift+0x34>)
 8003f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	bffdfff8 	.word	0xbffdfff8
 8003fa8:	40020000 	.word	0x40020000

08003fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fba:	e155      	b.n	8004268 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4091      	lsls	r1, r2
 8003fc6:	000a      	movs	r2, r1
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d100      	bne.n	8003fd4 <HAL_GPIO_Init+0x28>
 8003fd2:	e146      	b.n	8004262 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d005      	beq.n	8003fec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d130      	bne.n	800404e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	0013      	movs	r3, r2
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004022:	2201      	movs	r2, #1
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
 8004028:	0013      	movs	r3, r2
 800402a:	43da      	mvns	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	2201      	movs	r2, #1
 800403a:	401a      	ands	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2203      	movs	r2, #3
 8004054:	4013      	ands	r3, r2
 8004056:	2b03      	cmp	r3, #3
 8004058:	d017      	beq.n	800408a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	409a      	lsls	r2, r3
 8004068:	0013      	movs	r3, r2
 800406a:	43da      	mvns	r2, r3
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	409a      	lsls	r2, r3
 800407c:	0013      	movs	r3, r2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2203      	movs	r2, #3
 8004090:	4013      	ands	r3, r2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d123      	bne.n	80040de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	58d3      	ldr	r3, [r2, r3]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2207      	movs	r2, #7
 80040a8:	4013      	ands	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	220f      	movs	r2, #15
 80040ae:	409a      	lsls	r2, r3
 80040b0:	0013      	movs	r3, r2
 80040b2:	43da      	mvns	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2107      	movs	r1, #7
 80040c2:	400b      	ands	r3, r1
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	409a      	lsls	r2, r3
 80040c8:	0013      	movs	r3, r2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	0092      	lsls	r2, r2, #2
 80040da:	6939      	ldr	r1, [r7, #16]
 80040dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	409a      	lsls	r2, r3
 80040ec:	0013      	movs	r3, r2
 80040ee:	43da      	mvns	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2203      	movs	r2, #3
 80040fc:	401a      	ands	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	409a      	lsls	r2, r3
 8004104:	0013      	movs	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	23c0      	movs	r3, #192	@ 0xc0
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	4013      	ands	r3, r2
 800411c:	d100      	bne.n	8004120 <HAL_GPIO_Init+0x174>
 800411e:	e0a0      	b.n	8004262 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004120:	4b57      	ldr	r3, [pc, #348]	@ (8004280 <HAL_GPIO_Init+0x2d4>)
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	4b56      	ldr	r3, [pc, #344]	@ (8004280 <HAL_GPIO_Init+0x2d4>)
 8004126:	2101      	movs	r1, #1
 8004128:	430a      	orrs	r2, r1
 800412a:	619a      	str	r2, [r3, #24]
 800412c:	4b54      	ldr	r3, [pc, #336]	@ (8004280 <HAL_GPIO_Init+0x2d4>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2201      	movs	r2, #1
 8004132:	4013      	ands	r3, r2
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004138:	4a52      	ldr	r2, [pc, #328]	@ (8004284 <HAL_GPIO_Init+0x2d8>)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	589b      	ldr	r3, [r3, r2]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2203      	movs	r2, #3
 800414a:	4013      	ands	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	409a      	lsls	r2, r3
 8004152:	0013      	movs	r3, r2
 8004154:	43da      	mvns	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	2390      	movs	r3, #144	@ 0x90
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	429a      	cmp	r2, r3
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x1ee>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a47      	ldr	r2, [pc, #284]	@ (8004288 <HAL_GPIO_Init+0x2dc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x1ea>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a46      	ldr	r2, [pc, #280]	@ (800428c <HAL_GPIO_Init+0x2e0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x1e6>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a45      	ldr	r2, [pc, #276]	@ (8004290 <HAL_GPIO_Init+0x2e4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x1e2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a44      	ldr	r2, [pc, #272]	@ (8004294 <HAL_GPIO_Init+0x2e8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x1de>
 8004186:	2304      	movs	r3, #4
 8004188:	e008      	b.n	800419c <HAL_GPIO_Init+0x1f0>
 800418a:	2305      	movs	r3, #5
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x1f0>
 800418e:	2303      	movs	r3, #3
 8004190:	e004      	b.n	800419c <HAL_GPIO_Init+0x1f0>
 8004192:	2302      	movs	r3, #2
 8004194:	e002      	b.n	800419c <HAL_GPIO_Init+0x1f0>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_GPIO_Init+0x1f0>
 800419a:	2300      	movs	r3, #0
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	2103      	movs	r1, #3
 80041a0:	400a      	ands	r2, r1
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4093      	lsls	r3, r2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041ac:	4935      	ldr	r1, [pc, #212]	@ (8004284 <HAL_GPIO_Init+0x2d8>)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	3302      	adds	r3, #2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ba:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43da      	mvns	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	035b      	lsls	r3, r3, #13
 80041d2:	4013      	ands	r3, r2
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80041de:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80041e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	039b      	lsls	r3, r3, #14
 80041fc:	4013      	ands	r3, r2
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004208:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800420e:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43da      	mvns	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	4013      	ands	r3, r2
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004232:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43da      	mvns	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	4013      	ands	r3, r2
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800425c:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_GPIO_Init+0x2ec>)
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3301      	adds	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	40da      	lsrs	r2, r3
 8004270:	1e13      	subs	r3, r2, #0
 8004272:	d000      	beq.n	8004276 <HAL_GPIO_Init+0x2ca>
 8004274:	e6a2      	b.n	8003fbc <HAL_GPIO_Init+0x10>
  } 
}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b006      	add	sp, #24
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	40010000 	.word	0x40010000
 8004288:	48000400 	.word	0x48000400
 800428c:	48000800 	.word	0x48000800
 8004290:	48000c00 	.word	0x48000c00
 8004294:	48001000 	.word	0x48001000
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	000a      	movs	r2, r1
 80042a6:	1cbb      	adds	r3, r7, #2
 80042a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	1cba      	adds	r2, r7, #2
 80042b0:	8812      	ldrh	r2, [r2, #0]
 80042b2:	4013      	ands	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80042b6:	230f      	movs	r3, #15
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e003      	b.n	80042c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042c8:	230f      	movs	r3, #15
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	781b      	ldrb	r3, [r3, #0]
  }
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	0008      	movs	r0, r1
 80042e0:	0011      	movs	r1, r2
 80042e2:	1cbb      	adds	r3, r7, #2
 80042e4:	1c02      	adds	r2, r0, #0
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	1c7b      	adds	r3, r7, #1
 80042ea:	1c0a      	adds	r2, r1, #0
 80042ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ee:	1c7b      	adds	r3, r7, #1
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042f6:	1cbb      	adds	r3, r7, #2
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042fe:	e003      	b.n	8004308 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004300:	1cbb      	adds	r3, r7, #2
 8004302:	881a      	ldrh	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004308:	46c0      	nop			@ (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	0002      	movs	r2, r0
 8004318:	1dbb      	adds	r3, r7, #6
 800431a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	1dba      	adds	r2, r7, #6
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	4013      	ands	r3, r2
 8004326:	d008      	beq.n	800433a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800432a:	1dba      	adds	r2, r7, #6
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f00a fde1 	bl	800eefc <HAL_GPIO_EXTI_Callback>
  }
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	40010400 	.word	0x40010400

08004348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0e4      	b.n	8004524 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a73      	ldr	r2, [pc, #460]	@ (800452c <HAL_PCD_Init+0x1e4>)
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	23a4      	movs	r3, #164	@ 0xa4
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	2100      	movs	r1, #0
 800436e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0018      	movs	r0, r3
 8004374:	f009 f900 	bl	800d578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a6c      	ldr	r2, [pc, #432]	@ (800452c <HAL_PCD_Init+0x1e4>)
 800437c:	2103      	movs	r1, #3
 800437e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f005 f929 	bl	80095dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438a:	230f      	movs	r3, #15
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e047      	b.n	8004424 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004394:	200f      	movs	r0, #15
 8004396:	183b      	adds	r3, r7, r0
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	0013      	movs	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	18cb      	adds	r3, r1, r3
 80043a6:	3311      	adds	r3, #17
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ac:	183b      	adds	r3, r7, r0
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	0013      	movs	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	18cb      	adds	r3, r1, r3
 80043bc:	3310      	adds	r3, #16
 80043be:	183a      	adds	r2, r7, r0
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043c4:	183b      	adds	r3, r7, r0
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	0013      	movs	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	18cb      	adds	r3, r1, r3
 80043d4:	3313      	adds	r3, #19
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043da:	183b      	adds	r3, r7, r0
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	0013      	movs	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	18cb      	adds	r3, r1, r3
 80043ea:	3320      	adds	r3, #32
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043f0:	183b      	adds	r3, r7, r0
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	0013      	movs	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	18cb      	adds	r3, r1, r3
 8004400:	3324      	adds	r3, #36	@ 0x24
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004406:	183b      	adds	r3, r7, r0
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	0013      	movs	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	189b      	adds	r3, r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	2200      	movs	r2, #0
 8004418:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441a:	183b      	adds	r3, r7, r0
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	183b      	adds	r3, r7, r0
 8004420:	3201      	adds	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	210f      	movs	r1, #15
 800442a:	187a      	adds	r2, r7, r1
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3b0      	bcc.n	8004394 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e056      	b.n	80044e8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800443a:	240f      	movs	r4, #15
 800443c:	193b      	adds	r3, r7, r4
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	2352      	movs	r3, #82	@ 0x52
 8004444:	33ff      	adds	r3, #255	@ 0xff
 8004446:	0019      	movs	r1, r3
 8004448:	0013      	movs	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	189b      	adds	r3, r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	18c3      	adds	r3, r0, r3
 8004452:	185b      	adds	r3, r3, r1
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004458:	193b      	adds	r3, r7, r4
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	23a8      	movs	r3, #168	@ 0xa8
 8004460:	0059      	lsls	r1, r3, #1
 8004462:	0013      	movs	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	189b      	adds	r3, r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	18c3      	adds	r3, r0, r3
 800446c:	185b      	adds	r3, r3, r1
 800446e:	193a      	adds	r2, r7, r4
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004474:	193b      	adds	r3, r7, r4
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	2354      	movs	r3, #84	@ 0x54
 800447c:	33ff      	adds	r3, #255	@ 0xff
 800447e:	0019      	movs	r1, r3
 8004480:	0013      	movs	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	189b      	adds	r3, r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	18c3      	adds	r3, r0, r3
 800448a:	185b      	adds	r3, r3, r1
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004490:	193b      	adds	r3, r7, r4
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	23b0      	movs	r3, #176	@ 0xb0
 8004498:	0059      	lsls	r1, r3, #1
 800449a:	0013      	movs	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	18c3      	adds	r3, r0, r3
 80044a4:	185b      	adds	r3, r3, r1
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	23b2      	movs	r3, #178	@ 0xb2
 80044b2:	0059      	lsls	r1, r3, #1
 80044b4:	0013      	movs	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	189b      	adds	r3, r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	18c3      	adds	r3, r0, r3
 80044be:	185b      	adds	r3, r3, r1
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	23b4      	movs	r3, #180	@ 0xb4
 80044cc:	0059      	lsls	r1, r3, #1
 80044ce:	0013      	movs	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	18c3      	adds	r3, r0, r3
 80044d8:	185b      	adds	r3, r3, r1
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	3201      	adds	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	791b      	ldrb	r3, [r3, #4]
 80044ec:	220f      	movs	r2, #15
 80044ee:	18ba      	adds	r2, r7, r2
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3a1      	bcc.n	800443a <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	f005 f886 	bl	8009610 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a07      	ldr	r2, [pc, #28]	@ (800452c <HAL_PCD_Init+0x1e4>)
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7a9b      	ldrb	r3, [r3, #10]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d103      	bne.n	8004522 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f001 fd1f 	bl	8005f60 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b005      	add	sp, #20
 800452a:	bd90      	pop	{r4, r7, pc}
 800452c:	00000291 	.word	0x00000291

08004530 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	23a4      	movs	r3, #164	@ 0xa4
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_PCD_Start+0x18>
 8004544:	2302      	movs	r3, #2
 8004546:	e014      	b.n	8004572 <HAL_PCD_Start+0x42>
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	23a4      	movs	r3, #164	@ 0xa4
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	2101      	movs	r1, #1
 8004550:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0018      	movs	r0, r3
 8004558:	f005 f82a 	bl	80095b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	f007 f81f 	bl	800b5a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	23a4      	movs	r3, #164	@ 0xa4
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	2100      	movs	r1, #0
 800456e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b002      	add	sp, #8
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0018      	movs	r0, r3
 800458a:	f007 f821 	bl	800b5d0 <USB_ReadInterrupts>
 800458e:	0003      	movs	r3, r0
 8004590:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	4013      	ands	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 fb60 	bl	8004c64 <PCD_EP_ISR_Handler>

    return;
 80045a4:	e11d      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4013      	ands	r3, r2
 80045ae:	d015      	beq.n	80045dc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2244      	movs	r2, #68	@ 0x44
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	498a      	ldr	r1, [pc, #552]	@ (80047e8 <HAL_PCD_IRQHandler+0x26c>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	b291      	uxth	r1, r2
 80045c4:	2244      	movs	r2, #68	@ 0x44
 80045c6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f009 f85f 	bl	800d68e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2100      	movs	r1, #0
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f915 	bl	8004804 <HAL_PCD_SetAddress>

    return;
 80045da:	e102      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	2380      	movs	r3, #128	@ 0x80
 80045e0:	01db      	lsls	r3, r3, #7
 80045e2:	4013      	ands	r3, r2
 80045e4:	d00c      	beq.n	8004600 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2244      	movs	r2, #68	@ 0x44
 80045ec:	5a9b      	ldrh	r3, [r3, r2]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	497d      	ldr	r1, [pc, #500]	@ (80047ec <HAL_PCD_IRQHandler+0x270>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	b291      	uxth	r1, r2
 80045fa:	2244      	movs	r2, #68	@ 0x44
 80045fc:	5299      	strh	r1, [r3, r2]

    return;
 80045fe:	e0f0      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	2380      	movs	r3, #128	@ 0x80
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	4013      	ands	r3, r2
 8004608:	d00c      	beq.n	8004624 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2244      	movs	r2, #68	@ 0x44
 8004610:	5a9b      	ldrh	r3, [r3, r2]
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4975      	ldr	r1, [pc, #468]	@ (80047f0 <HAL_PCD_IRQHandler+0x274>)
 800461a:	400a      	ands	r2, r1
 800461c:	b291      	uxth	r1, r2
 800461e:	2244      	movs	r2, #68	@ 0x44
 8004620:	5299      	strh	r1, [r3, r2]

    return;
 8004622:	e0de      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	015b      	lsls	r3, r3, #5
 800462a:	4013      	ands	r3, r2
 800462c:	d038      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2240      	movs	r2, #64	@ 0x40
 8004634:	5a9b      	ldrh	r3, [r3, r2]
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2104      	movs	r1, #4
 800463e:	438a      	bics	r2, r1
 8004640:	b291      	uxth	r1, r2
 8004642:	2240      	movs	r2, #64	@ 0x40
 8004644:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2240      	movs	r2, #64	@ 0x40
 800464c:	5a9b      	ldrh	r3, [r3, r2]
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2108      	movs	r1, #8
 8004656:	438a      	bics	r2, r1
 8004658:	b291      	uxth	r1, r2
 800465a:	2240      	movs	r2, #64	@ 0x40
 800465c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	23b2      	movs	r3, #178	@ 0xb2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d109      	bne.n	800467e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	23b2      	movs	r3, #178	@ 0xb2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	2100      	movs	r1, #0
 8004672:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2100      	movs	r1, #0
 8004678:	0018      	movs	r0, r3
 800467a:	f001 fc9b 	bl	8005fb4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f009 f845 	bl	800d710 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2244      	movs	r2, #68	@ 0x44
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4957      	ldr	r1, [pc, #348]	@ (80047f4 <HAL_PCD_IRQHandler+0x278>)
 8004696:	400a      	ands	r2, r1
 8004698:	b291      	uxth	r1, r2
 800469a:	2244      	movs	r2, #68	@ 0x44
 800469c:	5299      	strh	r1, [r3, r2]

    return;
 800469e:	e0a0      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	4013      	ands	r3, r2
 80046a8:	d028      	beq.n	80046fc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2240      	movs	r2, #64	@ 0x40
 80046b0:	5a9b      	ldrh	r3, [r3, r2]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2108      	movs	r1, #8
 80046ba:	430a      	orrs	r2, r1
 80046bc:	b291      	uxth	r1, r2
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2244      	movs	r2, #68	@ 0x44
 80046c8:	5a9b      	ldrh	r3, [r3, r2]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4949      	ldr	r1, [pc, #292]	@ (80047f8 <HAL_PCD_IRQHandler+0x27c>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	b291      	uxth	r1, r2
 80046d6:	2244      	movs	r2, #68	@ 0x44
 80046d8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	5a9b      	ldrh	r3, [r3, r2]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2104      	movs	r1, #4
 80046ea:	430a      	orrs	r2, r1
 80046ec:	b291      	uxth	r1, r2
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f008 ffef 	bl	800d6d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80046fa:	e072      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2280      	movs	r2, #128	@ 0x80
 8004700:	4013      	ands	r3, r2
 8004702:	d046      	beq.n	8004792 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2244      	movs	r2, #68	@ 0x44
 800470a:	5a9b      	ldrh	r3, [r3, r2]
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	438a      	bics	r2, r1
 8004716:	b291      	uxth	r1, r2
 8004718:	2244      	movs	r2, #68	@ 0x44
 800471a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	23b2      	movs	r3, #178	@ 0xb2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d12f      	bne.n	8004788 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2240      	movs	r2, #64	@ 0x40
 800472e:	5a9b      	ldrh	r3, [r3, r2]
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2104      	movs	r1, #4
 8004738:	430a      	orrs	r2, r1
 800473a:	b291      	uxth	r1, r2
 800473c:	2240      	movs	r2, #64	@ 0x40
 800473e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2240      	movs	r2, #64	@ 0x40
 8004746:	5a9b      	ldrh	r3, [r3, r2]
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2108      	movs	r1, #8
 8004750:	430a      	orrs	r2, r1
 8004752:	b291      	uxth	r1, r2
 8004754:	2240      	movs	r2, #64	@ 0x40
 8004756:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	23b2      	movs	r3, #178	@ 0xb2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	2101      	movs	r1, #1
 8004760:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2254      	movs	r2, #84	@ 0x54
 8004768:	5a9b      	ldrh	r3, [r3, r2]
 800476a:	b29b      	uxth	r3, r3
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	223c      	movs	r2, #60	@ 0x3c
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	23b3      	movs	r3, #179	@ 0xb3
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2101      	movs	r1, #1
 8004780:	0018      	movs	r0, r3
 8004782:	f001 fc17 	bl	8005fb4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004786:	e02c      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f008 ffa4 	bl	800d6d8 <HAL_PCD_SuspendCallback>
    return;
 8004790:	e027      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4013      	ands	r3, r2
 800479a:	d010      	beq.n	80047be <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2244      	movs	r2, #68	@ 0x44
 80047a2:	5a9b      	ldrh	r3, [r3, r2]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4914      	ldr	r1, [pc, #80]	@ (80047fc <HAL_PCD_IRQHandler+0x280>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	b291      	uxth	r1, r2
 80047b0:	2244      	movs	r2, #68	@ 0x44
 80047b2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f008 ff5a 	bl	800d670 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047bc:	e011      	b.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d00c      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2244      	movs	r2, #68	@ 0x44
 80047ce:	5a9b      	ldrh	r3, [r3, r2]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	490a      	ldr	r1, [pc, #40]	@ (8004800 <HAL_PCD_IRQHandler+0x284>)
 80047d8:	400a      	ands	r2, r1
 80047da:	b291      	uxth	r1, r2
 80047dc:	2244      	movs	r2, #68	@ 0x44
 80047de:	5299      	strh	r1, [r3, r2]

    return;
 80047e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	fffffbff 	.word	0xfffffbff
 80047ec:	ffffbfff 	.word	0xffffbfff
 80047f0:	ffffdfff 	.word	0xffffdfff
 80047f4:	ffffefff 	.word	0xffffefff
 80047f8:	fffff7ff 	.word	0xfffff7ff
 80047fc:	fffffdff 	.word	0xfffffdff
 8004800:	fffffeff 	.word	0xfffffeff

08004804 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	000a      	movs	r2, r1
 800480e:	1cfb      	adds	r3, r7, #3
 8004810:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	23a4      	movs	r3, #164	@ 0xa4
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	5cd3      	ldrb	r3, [r2, r3]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_PCD_SetAddress+0x1e>
 800481e:	2302      	movs	r3, #2
 8004820:	e016      	b.n	8004850 <HAL_PCD_SetAddress+0x4c>
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	23a4      	movs	r3, #164	@ 0xa4
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	2101      	movs	r1, #1
 800482a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1cfa      	adds	r2, r7, #3
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	1cfb      	adds	r3, r7, #3
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	0019      	movs	r1, r3
 800483e:	0010      	movs	r0, r2
 8004840:	f006 fe9c 	bl	800b57c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	23a4      	movs	r3, #164	@ 0xa4
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	2100      	movs	r1, #0
 800484c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	0018      	movs	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	000c      	movs	r4, r1
 8004862:	0010      	movs	r0, r2
 8004864:	0019      	movs	r1, r3
 8004866:	1cfb      	adds	r3, r7, #3
 8004868:	1c22      	adds	r2, r4, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	003b      	movs	r3, r7
 800486e:	1c02      	adds	r2, r0, #0
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	1cbb      	adds	r3, r7, #2
 8004874:	1c0a      	adds	r2, r1, #0
 8004876:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004878:	230b      	movs	r3, #11
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004880:	1cfb      	adds	r3, r7, #3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b25b      	sxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	da0f      	bge.n	80048aa <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488a:	1cfb      	adds	r3, r7, #3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2207      	movs	r2, #7
 8004890:	401a      	ands	r2, r3
 8004892:	0013      	movs	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	189b      	adds	r3, r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	3310      	adds	r3, #16
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	705a      	strb	r2, [r3, #1]
 80048a8:	e00f      	b.n	80048ca <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048aa:	1cfb      	adds	r3, r7, #3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	401a      	ands	r2, r3
 80048b2:	0013      	movs	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	3351      	adds	r3, #81	@ 0x51
 80048bc:	33ff      	adds	r3, #255	@ 0xff
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048ca:	1cfb      	adds	r3, r7, #3
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2207      	movs	r2, #7
 80048d0:	4013      	ands	r3, r2
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048d8:	003b      	movs	r3, r7
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1cba      	adds	r2, r7, #2
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048e8:	1cbb      	adds	r3, r7, #2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d102      	bne.n	80048f6 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	23a4      	movs	r3, #164	@ 0xa4
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	5cd3      	ldrb	r3, [r2, r3]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_PCD_EP_Open+0xae>
 8004902:	2302      	movs	r3, #2
 8004904:	e013      	b.n	800492e <HAL_PCD_EP_Open+0xd6>
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	23a4      	movs	r3, #164	@ 0xa4
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	2101      	movs	r1, #1
 800490e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	0011      	movs	r1, r2
 8004918:	0018      	movs	r0, r3
 800491a:	f004 fe95 	bl	8009648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	23a4      	movs	r3, #164	@ 0xa4
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	2100      	movs	r1, #0
 8004926:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004928:	230b      	movs	r3, #11
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	781b      	ldrb	r3, [r3, #0]
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b005      	add	sp, #20
 8004934:	bd90      	pop	{r4, r7, pc}

08004936 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	000a      	movs	r2, r1
 8004940:	1cfb      	adds	r3, r7, #3
 8004942:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004944:	1cfb      	adds	r3, r7, #3
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b25b      	sxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	da0f      	bge.n	800496e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494e:	1cfb      	adds	r3, r7, #3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2207      	movs	r2, #7
 8004954:	401a      	ands	r2, r3
 8004956:	0013      	movs	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	189b      	adds	r3, r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	3310      	adds	r3, #16
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	705a      	strb	r2, [r3, #1]
 800496c:	e00f      	b.n	800498e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496e:	1cfb      	adds	r3, r7, #3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2207      	movs	r2, #7
 8004974:	401a      	ands	r2, r3
 8004976:	0013      	movs	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	189b      	adds	r3, r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	3351      	adds	r3, #81	@ 0x51
 8004980:	33ff      	adds	r3, #255	@ 0xff
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800498e:	1cfb      	adds	r3, r7, #3
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2207      	movs	r2, #7
 8004994:	4013      	ands	r3, r2
 8004996:	b2da      	uxtb	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	23a4      	movs	r3, #164	@ 0xa4
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_PCD_EP_Close+0x76>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e011      	b.n	80049d0 <HAL_PCD_EP_Close+0x9a>
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	23a4      	movs	r3, #164	@ 0xa4
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	2101      	movs	r1, #1
 80049b4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f005 f9ea 	bl	8009d98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	23a4      	movs	r3, #164	@ 0xa4
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	2100      	movs	r1, #0
 80049cc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b004      	add	sp, #16
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	200b      	movs	r0, #11
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	1c0a      	adds	r2, r1, #0
 80049ea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ec:	0001      	movs	r1, r0
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2207      	movs	r2, #7
 80049f4:	401a      	ands	r2, r3
 80049f6:	0013      	movs	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	3351      	adds	r3, #81	@ 0x51
 8004a00:	33ff      	adds	r3, #255	@ 0xff
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	18d3      	adds	r3, r2, r3
 8004a06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2207      	movs	r2, #7
 8004a26:	4013      	ands	r3, r2
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	0011      	movs	r1, r2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f005 fb6e 	bl	800a118 <USB_EPStartXfer>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b006      	add	sp, #24
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	000a      	movs	r2, r1
 8004a50:	1cfb      	adds	r3, r7, #3
 8004a52:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a54:	1cfb      	adds	r3, r7, #3
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2207      	movs	r2, #7
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	23b6      	movs	r3, #182	@ 0xb6
 8004a60:	0059      	lsls	r1, r3, #1
 8004a62:	0013      	movs	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	18c3      	adds	r3, r0, r3
 8004a6c:	185b      	adds	r3, r3, r1
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b002      	add	sp, #8
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	200b      	movs	r0, #11
 8004a86:	183b      	adds	r3, r7, r0
 8004a88:	1c0a      	adds	r2, r1, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8c:	183b      	adds	r3, r7, r0
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2207      	movs	r2, #7
 8004a92:	401a      	ands	r2, r3
 8004a94:	0013      	movs	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	189b      	adds	r3, r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	3310      	adds	r3, #16
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	18d3      	adds	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aca:	183b      	adds	r3, r7, r0
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	0011      	movs	r1, r2
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f005 fb19 	bl	800a118 <USB_EPStartXfer>

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b006      	add	sp, #24
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	000a      	movs	r2, r1
 8004afa:	1cfb      	adds	r3, r7, #3
 8004afc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004afe:	1cfb      	adds	r3, r7, #3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2207      	movs	r2, #7
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	7912      	ldrb	r2, [r2, #4]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e046      	b.n	8004ba0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b12:	1cfb      	adds	r3, r7, #3
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da0f      	bge.n	8004b3c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1c:	1cfb      	adds	r3, r7, #3
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2207      	movs	r2, #7
 8004b22:	401a      	ands	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	189b      	adds	r3, r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	18d3      	adds	r3, r2, r3
 8004b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	705a      	strb	r2, [r3, #1]
 8004b3a:	e00d      	b.n	8004b58 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b3c:	1cfb      	adds	r3, r7, #3
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	0013      	movs	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	3351      	adds	r3, #81	@ 0x51
 8004b4a:	33ff      	adds	r3, #255	@ 0xff
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5e:	1cfb      	adds	r3, r7, #3
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2207      	movs	r2, #7
 8004b64:	4013      	ands	r3, r2
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	23a4      	movs	r3, #164	@ 0xa4
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_PCD_EP_SetStall+0x8c>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e011      	b.n	8004ba0 <HAL_PCD_EP_SetStall+0xb0>
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	23a4      	movs	r3, #164	@ 0xa4
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	2101      	movs	r1, #1
 8004b84:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	0011      	movs	r1, r2
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f006 fbf2 	bl	800b378 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	23a4      	movs	r3, #164	@ 0xa4
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	000a      	movs	r2, r1
 8004bb2:	1cfb      	adds	r3, r7, #3
 8004bb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bb6:	1cfb      	adds	r3, r7, #3
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	220f      	movs	r2, #15
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	7912      	ldrb	r2, [r2, #4]
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e048      	b.n	8004c5c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bca:	1cfb      	adds	r3, r7, #3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	da0f      	bge.n	8004bf4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd4:	1cfb      	adds	r3, r7, #3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2207      	movs	r2, #7
 8004bda:	401a      	ands	r2, r3
 8004bdc:	0013      	movs	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	3310      	adds	r3, #16
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	705a      	strb	r2, [r3, #1]
 8004bf2:	e00f      	b.n	8004c14 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf4:	1cfb      	adds	r3, r7, #3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	189b      	adds	r3, r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3351      	adds	r3, #81	@ 0x51
 8004c06:	33ff      	adds	r3, #255	@ 0xff
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1a:	1cfb      	adds	r3, r7, #3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2207      	movs	r2, #7
 8004c20:	4013      	ands	r3, r2
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	23a4      	movs	r3, #164	@ 0xa4
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_PCD_EP_ClrStall+0x90>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e011      	b.n	8004c5c <HAL_PCD_EP_ClrStall+0xb4>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	23a4      	movs	r3, #164	@ 0xa4
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	2101      	movs	r1, #1
 8004c40:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f006 fbe4 	bl	800b418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	23a4      	movs	r3, #164	@ 0xa4
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	2100      	movs	r1, #0
 8004c58:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b004      	add	sp, #16
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c64:	b5b0      	push	{r4, r5, r7, lr}
 8004c66:	b096      	sub	sp, #88	@ 0x58
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c6c:	f000 fbea 	bl	8005444 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2048      	movs	r0, #72	@ 0x48
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	2144      	movs	r1, #68	@ 0x44
 8004c7a:	5a52      	ldrh	r2, [r2, r1]
 8004c7c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c7e:	183b      	adds	r3, r7, r0
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	244f      	movs	r4, #79	@ 0x4f
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	210f      	movs	r1, #15
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004c8e:	193b      	adds	r3, r7, r4
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d000      	beq.n	8004c98 <PCD_EP_ISR_Handler+0x34>
 8004c96:	e18d      	b.n	8004fb4 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c98:	183b      	adds	r3, r7, r0
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d152      	bne.n	8004d48 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	200e      	movs	r0, #14
 8004cac:	183b      	adds	r3, r7, r0
 8004cae:	49ba      	ldr	r1, [pc, #744]	@ (8004f98 <PCD_EP_ISR_Handler+0x334>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	183a      	adds	r2, r7, r0
 8004cba:	8812      	ldrh	r2, [r2, #0]
 8004cbc:	49b7      	ldr	r1, [pc, #732]	@ (8004f9c <PCD_EP_ISR_Handler+0x338>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2250      	movs	r2, #80	@ 0x50
 8004cd0:	5a9b      	ldrh	r3, [r3, r2]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	18d2      	adds	r2, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	18d3      	adds	r3, r2, r3
 8004ce4:	4aae      	ldr	r2, [pc, #696]	@ (8004fa0 <PCD_EP_ISR_Handler+0x33c>)
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	4463      	add	r3, ip
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	059b      	lsls	r3, r3, #22
 8004cee:	0d9a      	lsrs	r2, r3, #22
 8004cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	18d2      	adds	r2, r2, r3
 8004cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d00:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2100      	movs	r1, #0
 8004d06:	0018      	movs	r0, r3
 8004d08:	f008 fc94 	bl	800d634 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7b1b      	ldrb	r3, [r3, #12]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <PCD_EP_ISR_Handler+0xb6>
 8004d16:	f000 fb95 	bl	8005444 <PCD_EP_ISR_Handler+0x7e0>
 8004d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <PCD_EP_ISR_Handler+0xc2>
 8004d22:	f000 fb8f 	bl	8005444 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7b1b      	ldrb	r3, [r3, #12]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2280      	movs	r2, #128	@ 0x80
 8004d2e:	4252      	negs	r2, r2
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0011      	movs	r1, r2
 8004d3a:	224c      	movs	r2, #76	@ 0x4c
 8004d3c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	731a      	strb	r2, [r3, #12]
 8004d44:	f000 fb7e 	bl	8005444 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3351      	adds	r3, #81	@ 0x51
 8004d4c:	33ff      	adds	r3, #255	@ 0xff
 8004d4e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	214c      	movs	r1, #76	@ 0x4c
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	8812      	ldrh	r2, [r2, #0]
 8004d5a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4013      	ands	r3, r2
 8004d66:	d037      	beq.n	8004dd8 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2250      	movs	r2, #80	@ 0x50
 8004d6e:	5a9b      	ldrh	r3, [r3, r2]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	001a      	movs	r2, r3
 8004d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	18d2      	adds	r2, r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	18d3      	adds	r3, r2, r3
 8004d82:	4a88      	ldr	r2, [pc, #544]	@ (8004fa4 <PCD_EP_ISR_Handler+0x340>)
 8004d84:	4694      	mov	ip, r2
 8004d86:	4463      	add	r3, ip
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	059b      	lsls	r3, r3, #22
 8004d8c:	0d9a      	lsrs	r2, r3, #22
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	22a6      	movs	r2, #166	@ 0xa6
 8004d9a:	0092      	lsls	r2, r2, #2
 8004d9c:	1899      	adds	r1, r3, r2
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f006 fc69 	bl	800b67e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	2010      	movs	r0, #16
 8004db6:	183b      	adds	r3, r7, r0
 8004db8:	497b      	ldr	r1, [pc, #492]	@ (8004fa8 <PCD_EP_ISR_Handler+0x344>)
 8004dba:	400a      	ands	r2, r1
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	183a      	adds	r2, r7, r0
 8004dc4:	8812      	ldrh	r2, [r2, #0]
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f008 fbf9 	bl	800d5c8 <HAL_PCD_SetupStageCallback>
 8004dd6:	e335      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004dd8:	234c      	movs	r3, #76	@ 0x4c
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2200      	movs	r2, #0
 8004dde:	5e9b      	ldrsh	r3, [r3, r2]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db00      	blt.n	8004de6 <PCD_EP_ISR_Handler+0x182>
 8004de4:	e32e      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	201e      	movs	r0, #30
 8004df0:	183b      	adds	r3, r7, r0
 8004df2:	496d      	ldr	r1, [pc, #436]	@ (8004fa8 <PCD_EP_ISR_Handler+0x344>)
 8004df4:	400a      	ands	r2, r1
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	183a      	adds	r2, r7, r0
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	2180      	movs	r1, #128	@ 0x80
 8004e02:	430a      	orrs	r2, r1
 8004e04:	b292      	uxth	r2, r2
 8004e06:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2250      	movs	r2, #80	@ 0x50
 8004e0e:	5a9b      	ldrh	r3, [r3, r2]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	001a      	movs	r2, r3
 8004e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	18d2      	adds	r2, r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	4a60      	ldr	r2, [pc, #384]	@ (8004fa4 <PCD_EP_ISR_Handler+0x340>)
 8004e24:	4694      	mov	ip, r2
 8004e26:	4463      	add	r3, ip
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	059b      	lsls	r3, r3, #22
 8004e2c:	0d9a      	lsrs	r2, r3, #22
 8004e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01a      	beq.n	8004e70 <PCD_EP_ISR_Handler+0x20c>
 8004e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e48:	6959      	ldr	r1, [r3, #20]
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f006 fc13 	bl	800b67e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	18d2      	adds	r2, r2, r3
 8004e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f008 fbc1 	bl	800d5f2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	214c      	movs	r1, #76	@ 0x4c
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	8812      	ldrh	r2, [r2, #0]
 8004e7a:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	4013      	ands	r3, r2
 8004e86:	d000      	beq.n	8004e8a <PCD_EP_ISR_Handler+0x226>
 8004e88:	e2dc      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	23c0      	movs	r3, #192	@ 0xc0
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	401a      	ands	r2, r3
 8004e94:	23c0      	movs	r3, #192	@ 0xc0
 8004e96:	019b      	lsls	r3, r3, #6
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d100      	bne.n	8004e9e <PCD_EP_ISR_Handler+0x23a>
 8004e9c:	e2d2      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2250      	movs	r2, #80	@ 0x50
 8004eaa:	5a9b      	ldrh	r3, [r3, r2]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	001a      	movs	r2, r3
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa4 <PCD_EP_ISR_Handler+0x340>)
 8004eba:	4694      	mov	ip, r2
 8004ebc:	4463      	add	r3, ip
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	059b      	lsls	r3, r3, #22
 8004ec8:	0d9b      	lsrs	r3, r3, #22
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <PCD_EP_ISR_Handler+0x286>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <PCD_EP_ISR_Handler+0x338>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e035      	b.n	8004f56 <PCD_EP_ISR_Handler+0x2f2>
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ef0:	d817      	bhi.n	8004f22 <PCD_EP_ISR_Handler+0x2be>
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2201      	movs	r2, #1
 8004f00:	4013      	ands	r3, r2
 8004f02:	d002      	beq.n	8004f0a <PCD_EP_ISR_Handler+0x2a6>
 8004f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f06:	3301      	adds	r3, #1
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	e019      	b.n	8004f56 <PCD_EP_ISR_Handler+0x2f2>
 8004f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	221f      	movs	r2, #31
 8004f30:	4013      	ands	r3, r2
 8004f32:	d102      	bne.n	8004f3a <PCD_EP_ISR_Handler+0x2d6>
 8004f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f36:	3b01      	subs	r3, #1
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <PCD_EP_ISR_Handler+0x338>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	2012      	movs	r0, #18
 8004f60:	183b      	adds	r3, r7, r0
 8004f62:	4912      	ldr	r1, [pc, #72]	@ (8004fac <PCD_EP_ISR_Handler+0x348>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	183b      	adds	r3, r7, r0
 8004f6a:	183a      	adds	r2, r7, r0
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	0149      	lsls	r1, r1, #5
 8004f72:	404a      	eors	r2, r1
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	183a      	adds	r2, r7, r0
 8004f7a:	8812      	ldrh	r2, [r2, #0]
 8004f7c:	2180      	movs	r1, #128	@ 0x80
 8004f7e:	0189      	lsls	r1, r1, #6
 8004f80:	404a      	eors	r2, r1
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	183a      	adds	r2, r7, r0
 8004f8a:	8812      	ldrh	r2, [r2, #0]
 8004f8c:	4908      	ldr	r1, [pc, #32]	@ (8004fb0 <PCD_EP_ISR_Handler+0x34c>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	b292      	uxth	r2, r2
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e256      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	ffff8f0f 	.word	0xffff8f0f
 8004f9c:	ffff8000 	.word	0xffff8000
 8004fa0:	00000402 	.word	0x00000402
 8004fa4:	00000406 	.word	0x00000406
 8004fa8:	00000f8f 	.word	0x00000f8f
 8004fac:	ffffbf8f 	.word	0xffffbf8f
 8004fb0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	204f      	movs	r0, #79	@ 0x4f
 8004fbc:	183b      	adds	r3, r7, r0
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	18d2      	adds	r2, r2, r3
 8004fc4:	214c      	movs	r1, #76	@ 0x4c
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2200      	movs	r2, #0
 8004fd0:	5e9b      	ldrsh	r3, [r3, r2]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db00      	blt.n	8004fd8 <PCD_EP_ISR_Handler+0x374>
 8004fd6:	e0fa      	b.n	80051ce <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	001a      	movs	r2, r3
 8004fde:	183b      	adds	r3, r7, r0
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	244a      	movs	r4, #74	@ 0x4a
 8004fec:	193b      	adds	r3, r7, r4
 8004fee:	49d1      	ldr	r1, [pc, #836]	@ (8005334 <PCD_EP_ISR_Handler+0x6d0>)
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	183b      	adds	r3, r7, r0
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	18d3      	adds	r3, r2, r3
 8005002:	193a      	adds	r2, r7, r4
 8005004:	8812      	ldrh	r2, [r2, #0]
 8005006:	2180      	movs	r1, #128	@ 0x80
 8005008:	430a      	orrs	r2, r1
 800500a:	b292      	uxth	r2, r2
 800500c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800500e:	183b      	adds	r3, r7, r0
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	0013      	movs	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	189b      	adds	r3, r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	3351      	adds	r3, #81	@ 0x51
 800501c:	33ff      	adds	r3, #255	@ 0xff
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	18d3      	adds	r3, r2, r3
 8005022:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005026:	7b1b      	ldrb	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d125      	bne.n	8005078 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2250      	movs	r2, #80	@ 0x50
 8005032:	5a9b      	ldrh	r3, [r3, r2]
 8005034:	b29b      	uxth	r3, r3
 8005036:	001a      	movs	r2, r3
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	18d2      	adds	r2, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	18d3      	adds	r3, r2, r3
 8005046:	4abc      	ldr	r2, [pc, #752]	@ (8005338 <PCD_EP_ISR_Handler+0x6d4>)
 8005048:	4694      	mov	ip, r2
 800504a:	4463      	add	r3, ip
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	2450      	movs	r4, #80	@ 0x50
 8005050:	193b      	adds	r3, r7, r4
 8005052:	0592      	lsls	r2, r2, #22
 8005054:	0d92      	lsrs	r2, r2, #22
 8005056:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005058:	193b      	adds	r3, r7, r4
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <PCD_EP_ISR_Handler+0x3fe>
 8005060:	e08d      	b.n	800517e <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005068:	6959      	ldr	r1, [r3, #20]
 800506a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506c:	88da      	ldrh	r2, [r3, #6]
 800506e:	193b      	adds	r3, r7, r4
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f006 fb04 	bl	800b67e <USB_ReadPMA>
 8005076:	e082      	b.n	800517e <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507a:	78db      	ldrb	r3, [r3, #3]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d10c      	bne.n	800509a <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005080:	2350      	movs	r3, #80	@ 0x50
 8005082:	18fc      	adds	r4, r7, r3
 8005084:	234c      	movs	r3, #76	@ 0x4c
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	881a      	ldrh	r2, [r3, #0]
 800508a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 f9ec 	bl	800546c <HAL_PCD_EP_DB_Receive>
 8005094:	0003      	movs	r3, r0
 8005096:	8023      	strh	r3, [r4, #0]
 8005098:	e071      	b.n	800517e <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	001a      	movs	r2, r3
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	18d3      	adds	r3, r2, r3
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	2052      	movs	r0, #82	@ 0x52
 80050ae:	183b      	adds	r3, r7, r0
 80050b0:	49a2      	ldr	r1, [pc, #648]	@ (800533c <PCD_EP_ISR_Handler+0x6d8>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	001a      	movs	r2, r3
 80050bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	183a      	adds	r2, r7, r0
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	499d      	ldr	r1, [pc, #628]	@ (8005340 <PCD_EP_ISR_Handler+0x6dc>)
 80050ca:	430a      	orrs	r2, r1
 80050cc:	b292      	uxth	r2, r2
 80050ce:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	001a      	movs	r2, r3
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	18d3      	adds	r3, r2, r3
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	001a      	movs	r2, r3
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	01db      	lsls	r3, r3, #7
 80050e8:	4013      	ands	r3, r2
 80050ea:	d024      	beq.n	8005136 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2250      	movs	r2, #80	@ 0x50
 80050f2:	5a9b      	ldrh	r3, [r3, r2]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	001a      	movs	r2, r3
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	18d2      	adds	r2, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	18d3      	adds	r3, r2, r3
 8005106:	4a8f      	ldr	r2, [pc, #572]	@ (8005344 <PCD_EP_ISR_Handler+0x6e0>)
 8005108:	4694      	mov	ip, r2
 800510a:	4463      	add	r3, ip
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	2450      	movs	r4, #80	@ 0x50
 8005110:	193b      	adds	r3, r7, r4
 8005112:	0592      	lsls	r2, r2, #22
 8005114:	0d92      	lsrs	r2, r2, #22
 8005116:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005118:	193b      	adds	r3, r7, r4
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02e      	beq.n	800517e <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005126:	6959      	ldr	r1, [r3, #20]
 8005128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512a:	891a      	ldrh	r2, [r3, #8]
 800512c:	193b      	adds	r3, r7, r4
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	f006 faa5 	bl	800b67e <USB_ReadPMA>
 8005134:	e023      	b.n	800517e <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2250      	movs	r2, #80	@ 0x50
 800513c:	5a9b      	ldrh	r3, [r3, r2]
 800513e:	b29b      	uxth	r3, r3
 8005140:	001a      	movs	r2, r3
 8005142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	18d3      	adds	r3, r2, r3
 8005150:	4a79      	ldr	r2, [pc, #484]	@ (8005338 <PCD_EP_ISR_Handler+0x6d4>)
 8005152:	4694      	mov	ip, r2
 8005154:	4463      	add	r3, ip
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	2450      	movs	r4, #80	@ 0x50
 800515a:	193b      	adds	r3, r7, r4
 800515c:	0592      	lsls	r2, r2, #22
 800515e:	0d92      	lsrs	r2, r2, #22
 8005160:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005162:	193b      	adds	r3, r7, r4
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005174:	895a      	ldrh	r2, [r3, #10]
 8005176:	193b      	adds	r3, r7, r4
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	f006 fa80 	bl	800b67e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	2150      	movs	r1, #80	@ 0x50
 8005184:	187b      	adds	r3, r7, r1
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	18d2      	adds	r2, r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800518e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	187b      	adds	r3, r7, r1
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	18d2      	adds	r2, r2, r3
 8005198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800519c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <PCD_EP_ISR_Handler+0x54c>
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d207      	bcs.n	80051c0 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0011      	movs	r1, r2
 80051b8:	0018      	movs	r0, r3
 80051ba:	f008 fa1a 	bl	800d5f2 <HAL_PCD_DataOutStageCallback>
 80051be:	e006      	b.n	80051ce <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051c6:	0011      	movs	r1, r2
 80051c8:	0018      	movs	r0, r3
 80051ca:	f004 ffa5 	bl	800a118 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051ce:	244c      	movs	r4, #76	@ 0x4c
 80051d0:	193b      	adds	r3, r7, r4
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	4013      	ands	r3, r2
 80051d8:	d100      	bne.n	80051dc <PCD_EP_ISR_Handler+0x578>
 80051da:	e133      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80051dc:	204f      	movs	r0, #79	@ 0x4f
 80051de:	183b      	adds	r3, r7, r0
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	0013      	movs	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	3310      	adds	r3, #16
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	18d3      	adds	r3, r2, r3
 80051f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	001a      	movs	r2, r3
 80051f8:	183b      	adds	r3, r7, r0
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29a      	uxth	r2, r3
 8005204:	2542      	movs	r5, #66	@ 0x42
 8005206:	197b      	adds	r3, r7, r5
 8005208:	494f      	ldr	r1, [pc, #316]	@ (8005348 <PCD_EP_ISR_Handler+0x6e4>)
 800520a:	400a      	ands	r2, r1
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	001a      	movs	r2, r3
 8005214:	183b      	adds	r3, r7, r0
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	197a      	adds	r2, r7, r5
 800521e:	8812      	ldrh	r2, [r2, #0]
 8005220:	494a      	ldr	r1, [pc, #296]	@ (800534c <PCD_EP_ISR_Handler+0x6e8>)
 8005222:	430a      	orrs	r2, r1
 8005224:	b292      	uxth	r2, r2
 8005226:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d000      	beq.n	8005232 <PCD_EP_ISR_Handler+0x5ce>
 8005230:	e0af      	b.n	8005392 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8005232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523a:	7b1b      	ldrb	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d100      	bne.n	8005242 <PCD_EP_ISR_Handler+0x5de>
 8005240:	e09f      	b.n	8005382 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005242:	193b      	adds	r3, r7, r4
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	2240      	movs	r2, #64	@ 0x40
 8005248:	4013      	ands	r3, r2
 800524a:	d046      	beq.n	80052da <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800524c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d125      	bne.n	80052a0 <PCD_EP_ISR_Handler+0x63c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2250      	movs	r2, #80	@ 0x50
 8005260:	5a9b      	ldrh	r3, [r3, r2]
 8005262:	b29b      	uxth	r3, r3
 8005264:	001a      	movs	r2, r3
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	189b      	adds	r3, r3, r2
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
 800526c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	00da      	lsls	r2, r3, #3
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	4a33      	ldr	r2, [pc, #204]	@ (8005344 <PCD_EP_ISR_Handler+0x6e0>)
 8005278:	4694      	mov	ip, r2
 800527a:	4463      	add	r3, ip
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	059b      	lsls	r3, r3, #22
 8005286:	0d9b      	lsrs	r3, r3, #22
 8005288:	b29a      	uxth	r2, r3
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	4a2d      	ldr	r2, [pc, #180]	@ (800534c <PCD_EP_ISR_Handler+0x6e8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e070      	b.n	8005382 <PCD_EP_ISR_Handler+0x71e>
 80052a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d16c      	bne.n	8005382 <PCD_EP_ISR_Handler+0x71e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2250      	movs	r2, #80	@ 0x50
 80052b4:	5a9b      	ldrh	r3, [r3, r2]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	001a      	movs	r2, r3
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	00da      	lsls	r2, r3, #3
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005344 <PCD_EP_ISR_Handler+0x6e0>)
 80052cc:	4694      	mov	ip, r2
 80052ce:	4463      	add	r3, ip
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	2200      	movs	r2, #0
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	e053      	b.n	8005382 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d133      	bne.n	8005350 <PCD_EP_ISR_Handler+0x6ec>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2250      	movs	r2, #80	@ 0x50
 80052f4:	5a9b      	ldrh	r3, [r3, r2]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	001a      	movs	r2, r3
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	00da      	lsls	r2, r3, #3
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	18d3      	adds	r3, r2, r3
 800530a:	4a0b      	ldr	r2, [pc, #44]	@ (8005338 <PCD_EP_ISR_Handler+0x6d4>)
 800530c:	4694      	mov	ip, r2
 800530e:	4463      	add	r3, ip
 8005310:	633b      	str	r3, [r7, #48]	@ 0x30
 8005312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	059b      	lsls	r3, r3, #22
 800531a:	0d9b      	lsrs	r3, r3, #22
 800531c:	b29a      	uxth	r2, r3
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	4a08      	ldr	r2, [pc, #32]	@ (800534c <PCD_EP_ISR_Handler+0x6e8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e026      	b.n	8005382 <PCD_EP_ISR_Handler+0x71e>
 8005334:	00000f8f 	.word	0x00000f8f
 8005338:	00000406 	.word	0x00000406
 800533c:	ffff8f8f 	.word	0xffff8f8f
 8005340:	ffff80c0 	.word	0xffff80c0
 8005344:	00000402 	.word	0x00000402
 8005348:	ffff8f0f 	.word	0xffff8f0f
 800534c:	ffff8000 	.word	0xffff8000
 8005350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d114      	bne.n	8005382 <PCD_EP_ISR_Handler+0x71e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2250      	movs	r2, #80	@ 0x50
 800535e:	5a9b      	ldrh	r3, [r3, r2]
 8005360:	b29b      	uxth	r3, r3
 8005362:	001a      	movs	r2, r3
 8005364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005366:	189b      	adds	r3, r3, r2
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	00da      	lsls	r2, r3, #3
 8005370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005372:	18d3      	adds	r3, r2, r3
 8005374:	4a3b      	ldr	r2, [pc, #236]	@ (8005464 <PCD_EP_ISR_Handler+0x800>)
 8005376:	4694      	mov	ip, r2
 8005378:	4463      	add	r3, ip
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2200      	movs	r2, #0
 8005380:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	0011      	movs	r1, r2
 800538a:	0018      	movs	r0, r3
 800538c:	f008 f952 	bl	800d634 <HAL_PCD_DataInStageCallback>
 8005390:	e058      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005392:	234c      	movs	r3, #76	@ 0x4c
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d149      	bne.n	8005434 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2250      	movs	r2, #80	@ 0x50
 80053a6:	5a9b      	ldrh	r3, [r3, r2]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	001a      	movs	r2, r3
 80053ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	18d2      	adds	r2, r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005468 <PCD_EP_ISR_Handler+0x804>)
 80053bc:	4694      	mov	ip, r2
 80053be:	4463      	add	r3, ip
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	2140      	movs	r1, #64	@ 0x40
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	0592      	lsls	r2, r2, #22
 80053c8:	0d92      	lsrs	r2, r2, #22
 80053ca:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80053cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d907      	bls.n	80053e8 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80053d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e4:	619a      	str	r2, [r3, #24]
 80053e6:	e002      	b.n	80053ee <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80053e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0011      	movs	r1, r2
 80053fe:	0018      	movs	r0, r3
 8005400:	f008 f918 	bl	800d634 <HAL_PCD_DataInStageCallback>
 8005404:	e01e      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	2140      	movs	r1, #64	@ 0x40
 800540c:	187b      	adds	r3, r7, r1
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	18d2      	adds	r2, r2, r3
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	187b      	adds	r3, r7, r1
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	18d2      	adds	r2, r2, r3
 8005420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005422:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800542a:	0011      	movs	r1, r2
 800542c:	0018      	movs	r0, r3
 800542e:	f004 fe73 	bl	800a118 <USB_EPStartXfer>
 8005432:	e007      	b.n	8005444 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005434:	234c      	movs	r3, #76	@ 0x4c
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 f930 	bl	80056a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2244      	movs	r2, #68	@ 0x44
 800544a:	5a9b      	ldrh	r3, [r3, r2]
 800544c:	b29b      	uxth	r3, r3
 800544e:	b21b      	sxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	da01      	bge.n	8005458 <PCD_EP_ISR_Handler+0x7f4>
 8005454:	f7ff fc0c 	bl	8004c70 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b016      	add	sp, #88	@ 0x58
 8005460:	bdb0      	pop	{r4, r5, r7, pc}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	00000406 	.word	0x00000406
 8005468:	00000402 	.word	0x00000402

0800546c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b089      	sub	sp, #36	@ 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	1dbb      	adds	r3, r7, #6
 8005478:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800547a:	1dbb      	adds	r3, r7, #6
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	@ 0x80
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4013      	ands	r3, r2
 8005484:	d100      	bne.n	8005488 <HAL_PCD_EP_DB_Receive+0x1c>
 8005486:	e07d      	b.n	8005584 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2250      	movs	r2, #80	@ 0x50
 800548e:	5a9b      	ldrh	r3, [r3, r2]
 8005490:	b29b      	uxth	r3, r3
 8005492:	001a      	movs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	18d2      	adds	r2, r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	4a7a      	ldr	r2, [pc, #488]	@ (800568c <HAL_PCD_EP_DB_Receive+0x220>)
 80054a4:	4694      	mov	ip, r2
 80054a6:	4463      	add	r3, ip
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	211a      	movs	r1, #26
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	0592      	lsls	r2, r2, #22
 80054b0:	0d92      	lsrs	r2, r2, #22
 80054b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d307      	bcc.n	80054d0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	619a      	str	r2, [r3, #24]
 80054ce:	e002      	b.n	80054d6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d121      	bne.n	8005522 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	001a      	movs	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	2018      	movs	r0, #24
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	4966      	ldr	r1, [pc, #408]	@ (8005690 <HAL_PCD_EP_DB_Receive+0x224>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	183a      	adds	r2, r7, r0
 80054fe:	8812      	ldrh	r2, [r2, #0]
 8005500:	2180      	movs	r1, #128	@ 0x80
 8005502:	0189      	lsls	r1, r1, #6
 8005504:	404a      	eors	r2, r1
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	001a      	movs	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	183a      	adds	r2, r7, r0
 8005518:	8812      	ldrh	r2, [r2, #0]
 800551a:	495e      	ldr	r1, [pc, #376]	@ (8005694 <HAL_PCD_EP_DB_Receive+0x228>)
 800551c:	430a      	orrs	r2, r1
 800551e:	b292      	uxth	r2, r2
 8005520:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005522:	1dbb      	adds	r3, r7, #6
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	d01a      	beq.n	8005562 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	001a      	movs	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29a      	uxth	r2, r3
 800553e:	2016      	movs	r0, #22
 8005540:	183b      	adds	r3, r7, r0
 8005542:	4955      	ldr	r1, [pc, #340]	@ (8005698 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005544:	400a      	ands	r2, r1
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	001a      	movs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	183a      	adds	r2, r7, r0
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	4950      	ldr	r1, [pc, #320]	@ (800569c <HAL_PCD_EP_DB_Receive+0x230>)
 800555c:	430a      	orrs	r2, r1
 800555e:	b292      	uxth	r2, r2
 8005560:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005562:	241a      	movs	r4, #26
 8005564:	193b      	adds	r3, r7, r4
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d100      	bne.n	800556e <HAL_PCD_EP_DB_Receive+0x102>
 800556c:	e086      	b.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6959      	ldr	r1, [r3, #20]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	891a      	ldrh	r2, [r3, #8]
 800557a:	193b      	adds	r3, r7, r4
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f006 f87e 	bl	800b67e <USB_ReadPMA>
 8005582:	e07b      	b.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2250      	movs	r2, #80	@ 0x50
 800558a:	5a9b      	ldrh	r3, [r3, r2]
 800558c:	b29b      	uxth	r3, r3
 800558e:	001a      	movs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	18d2      	adds	r2, r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	4a40      	ldr	r2, [pc, #256]	@ (80056a0 <HAL_PCD_EP_DB_Receive+0x234>)
 80055a0:	4694      	mov	ip, r2
 80055a2:	4463      	add	r3, ip
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	211a      	movs	r1, #26
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	0592      	lsls	r2, r2, #22
 80055ac:	0d92      	lsrs	r2, r2, #22
 80055ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d307      	bcc.n	80055cc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	619a      	str	r2, [r3, #24]
 80055ca:	e002      	b.n	80055d2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d121      	bne.n	800561e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	001a      	movs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	201e      	movs	r0, #30
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	4927      	ldr	r1, [pc, #156]	@ (8005690 <HAL_PCD_EP_DB_Receive+0x224>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	183b      	adds	r3, r7, r0
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	2180      	movs	r1, #128	@ 0x80
 80055fe:	0189      	lsls	r1, r1, #6
 8005600:	404a      	eors	r2, r1
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	001a      	movs	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	18d3      	adds	r3, r2, r3
 8005612:	183a      	adds	r2, r7, r0
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	491f      	ldr	r1, [pc, #124]	@ (8005694 <HAL_PCD_EP_DB_Receive+0x228>)
 8005618:	430a      	orrs	r2, r1
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800561e:	1dbb      	adds	r3, r7, #6
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	2240      	movs	r2, #64	@ 0x40
 8005624:	4013      	ands	r3, r2
 8005626:	d11a      	bne.n	800565e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	001a      	movs	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	18d3      	adds	r3, r2, r3
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29a      	uxth	r2, r3
 800563a:	201c      	movs	r0, #28
 800563c:	183b      	adds	r3, r7, r0
 800563e:	4916      	ldr	r1, [pc, #88]	@ (8005698 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005640:	400a      	ands	r2, r1
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	001a      	movs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	18d3      	adds	r3, r2, r3
 8005652:	183a      	adds	r2, r7, r0
 8005654:	8812      	ldrh	r2, [r2, #0]
 8005656:	4911      	ldr	r1, [pc, #68]	@ (800569c <HAL_PCD_EP_DB_Receive+0x230>)
 8005658:	430a      	orrs	r2, r1
 800565a:	b292      	uxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800565e:	241a      	movs	r4, #26
 8005660:	193b      	adds	r3, r7, r4
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	895a      	ldrh	r2, [r3, #10]
 8005674:	193b      	adds	r3, r7, r4
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	f006 f801 	bl	800b67e <USB_ReadPMA>
    }
  }

  return count;
 800567c:	231a      	movs	r3, #26
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	881b      	ldrh	r3, [r3, #0]
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b009      	add	sp, #36	@ 0x24
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	00000402 	.word	0x00000402
 8005690:	ffffbf8f 	.word	0xffffbf8f
 8005694:	ffff8080 	.word	0xffff8080
 8005698:	ffff8f8f 	.word	0xffff8f8f
 800569c:	ffff80c0 	.word	0xffff80c0
 80056a0:	00000406 	.word	0x00000406

080056a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b0a4      	sub	sp, #144	@ 0x90
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	1dbb      	adds	r3, r7, #6
 80056b0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056b2:	1dbb      	adds	r3, r7, #6
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2240      	movs	r2, #64	@ 0x40
 80056b8:	4013      	ands	r3, r2
 80056ba:	d100      	bne.n	80056be <HAL_PCD_EP_DB_Transmit+0x1a>
 80056bc:	e1e4      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2250      	movs	r2, #80	@ 0x50
 80056c4:	5a9b      	ldrh	r3, [r3, r2]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	001a      	movs	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	18d2      	adds	r2, r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	18d3      	adds	r3, r2, r3
 80056d8:	4ad0      	ldr	r2, [pc, #832]	@ (8005a1c <HAL_PCD_EP_DB_Transmit+0x378>)
 80056da:	4694      	mov	ip, r2
 80056dc:	4463      	add	r3, ip
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	2188      	movs	r1, #136	@ 0x88
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	0592      	lsls	r2, r2, #22
 80056e6:	0d92      	lsrs	r2, r2, #22
 80056e8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d907      	bls.n	8005706 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	187b      	adds	r3, r7, r1
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	619a      	str	r2, [r3, #24]
 8005704:	e002      	b.n	800570c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d000      	beq.n	8005716 <HAL_PCD_EP_DB_Transmit+0x72>
 8005714:	e0b5      	b.n	8005882 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d125      	bne.n	800576a <HAL_PCD_EP_DB_Transmit+0xc6>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2250      	movs	r2, #80	@ 0x50
 800572a:	5a9b      	ldrh	r3, [r3, r2]
 800572c:	b29b      	uxth	r3, r3
 800572e:	001a      	movs	r2, r3
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	189b      	adds	r3, r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	00da      	lsls	r2, r3, #3
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	4ab6      	ldr	r2, [pc, #728]	@ (8005a1c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005742:	4694      	mov	ip, r2
 8005744:	4463      	add	r3, ip
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	059b      	lsls	r3, r3, #22
 8005750:	0d9b      	lsrs	r3, r3, #22
 8005752:	b29a      	uxth	r2, r3
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	4ab0      	ldr	r2, [pc, #704]	@ (8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	b29a      	uxth	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e01b      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d117      	bne.n	80057a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2250      	movs	r2, #80	@ 0x50
 800577e:	5a9b      	ldrh	r3, [r3, r2]
 8005780:	b29b      	uxth	r3, r3
 8005782:	001a      	movs	r2, r3
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	189b      	adds	r3, r3, r2
 8005788:	637b      	str	r3, [r7, #52]	@ 0x34
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	00da      	lsls	r2, r3, #3
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	18d3      	adds	r3, r2, r3
 8005794:	4aa1      	ldr	r2, [pc, #644]	@ (8005a1c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005796:	4694      	mov	ip, r2
 8005798:	4463      	add	r3, ip
 800579a:	633b      	str	r3, [r7, #48]	@ 0x30
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d125      	bne.n	80057fc <HAL_PCD_EP_DB_Transmit+0x158>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2250      	movs	r2, #80	@ 0x50
 80057bc:	5a9b      	ldrh	r3, [r3, r2]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	001a      	movs	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00da      	lsls	r2, r3, #3
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	18d3      	adds	r3, r2, r3
 80057d2:	4a94      	ldr	r2, [pc, #592]	@ (8005a24 <HAL_PCD_EP_DB_Transmit+0x380>)
 80057d4:	4694      	mov	ip, r2
 80057d6:	4463      	add	r3, ip
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	059b      	lsls	r3, r3, #22
 80057e2:	0d9b      	lsrs	r3, r3, #22
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4a8b      	ldr	r2, [pc, #556]	@ (8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e018      	b.n	800582e <HAL_PCD_EP_DB_Transmit+0x18a>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d114      	bne.n	800582e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2250      	movs	r2, #80	@ 0x50
 800580a:	5a9b      	ldrh	r3, [r3, r2]
 800580c:	b29b      	uxth	r3, r3
 800580e:	001a      	movs	r2, r3
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	189b      	adds	r3, r3, r2
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00da      	lsls	r2, r3, #3
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	18d3      	adds	r3, r2, r3
 8005820:	4a80      	ldr	r2, [pc, #512]	@ (8005a24 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005822:	4694      	mov	ip, r2
 8005824:	4463      	add	r3, ip
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2200      	movs	r2, #0
 800582c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f007 fefc 	bl	800d634 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800583c:	1dbb      	adds	r3, r7, #6
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	01db      	lsls	r3, r3, #7
 8005844:	4013      	ands	r3, r2
 8005846:	d100      	bne.n	800584a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005848:	e308      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	001a      	movs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	18d3      	adds	r3, r2, r3
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29a      	uxth	r2, r3
 800585c:	2016      	movs	r0, #22
 800585e:	183b      	adds	r3, r7, r0
 8005860:	4971      	ldr	r1, [pc, #452]	@ (8005a28 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005862:	400a      	ands	r2, r1
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	001a      	movs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	18d3      	adds	r3, r2, r3
 8005874:	183a      	adds	r2, r7, r0
 8005876:	8812      	ldrh	r2, [r2, #0]
 8005878:	496c      	ldr	r1, [pc, #432]	@ (8005a2c <HAL_PCD_EP_DB_Transmit+0x388>)
 800587a:	430a      	orrs	r2, r1
 800587c:	b292      	uxth	r2, r2
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e2ec      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005882:	1dbb      	adds	r3, r7, #6
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	2380      	movs	r3, #128	@ 0x80
 8005888:	01db      	lsls	r3, r3, #7
 800588a:	4013      	ands	r3, r2
 800588c:	d01a      	beq.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	001a      	movs	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	208a      	movs	r0, #138	@ 0x8a
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	4960      	ldr	r1, [pc, #384]	@ (8005a28 <HAL_PCD_EP_DB_Transmit+0x384>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	001a      	movs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18d3      	adds	r3, r2, r3
 80058b8:	183a      	adds	r2, r7, r0
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	495b      	ldr	r1, [pc, #364]	@ (8005a2c <HAL_PCD_EP_DB_Transmit+0x388>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	b292      	uxth	r2, r2
 80058c2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2224      	movs	r2, #36	@ 0x24
 80058c8:	5c9b      	ldrb	r3, [r3, r2]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d000      	beq.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80058ce:	e2c5      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	2188      	movs	r1, #136	@ 0x88
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	18d2      	adds	r2, r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	18d2      	adds	r2, r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d30c      	bcc.n	8005914 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	218c      	movs	r1, #140	@ 0x8c
 8005900:	187a      	adds	r2, r7, r1
 8005902:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	187b      	adds	r3, r7, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	1ad2      	subs	r2, r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	621a      	str	r2, [r3, #32]
 8005912:	e01a      	b.n	800594a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800591c:	2388      	movs	r3, #136	@ 0x88
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	228c      	movs	r2, #140	@ 0x8c
 8005924:	18ba      	adds	r2, r7, r2
 8005926:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2224      	movs	r2, #36	@ 0x24
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]
 8005930:	e00b      	b.n	800594a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2224      	movs	r2, #36	@ 0x24
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	228c      	movs	r2, #140	@ 0x8c
 8005940:	18ba      	adds	r2, r7, r2
 8005942:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d000      	beq.n	8005954 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005952:	e06d      	b.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2250      	movs	r2, #80	@ 0x50
 8005960:	5a9b      	ldrh	r3, [r3, r2]
 8005962:	b29b      	uxth	r3, r3
 8005964:	001a      	movs	r2, r3
 8005966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005968:	189b      	adds	r3, r3, r2
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	18d3      	adds	r3, r2, r3
 8005976:	4a29      	ldr	r2, [pc, #164]	@ (8005a1c <HAL_PCD_EP_DB_Transmit+0x378>)
 8005978:	4694      	mov	ip, r2
 800597a:	4463      	add	r3, ip
 800597c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	0d9b      	lsrs	r3, r3, #22
 8005988:	b29a      	uxth	r2, r3
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	238c      	movs	r3, #140	@ 0x8c
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <HAL_PCD_EP_DB_Transmit+0x306>
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	4a20      	ldr	r2, [pc, #128]	@ (8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e061      	b.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80059aa:	228c      	movs	r2, #140	@ 0x8c
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80059b2:	d817      	bhi.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x340>
 80059b4:	18bb      	adds	r3, r7, r2
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059bc:	18bb      	adds	r3, r7, r2
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	d002      	beq.n	80059cc <HAL_PCD_EP_DB_Transmit+0x328>
 80059c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c8:	3301      	adds	r3, #1
 80059ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4313      	orrs	r3, r2
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e044      	b.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80059e4:	228c      	movs	r2, #140	@ 0x8c
 80059e6:	18bb      	adds	r3, r7, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ee:	18bb      	adds	r3, r7, r2
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	221f      	movs	r2, #31
 80059f4:	4013      	ands	r3, r2
 80059f6:	d102      	bne.n	80059fe <HAL_PCD_EP_DB_Transmit+0x35a>
 80059f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059fa:	3b01      	subs	r3, #1
 80059fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	4a03      	ldr	r2, [pc, #12]	@ (8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e028      	b.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005a1c:	00000402 	.word	0x00000402
 8005a20:	ffff8000 	.word	0xffff8000
 8005a24:	00000406 	.word	0x00000406
 8005a28:	ffff8f8f 	.word	0xffff8f8f
 8005a2c:	ffffc080 	.word	0xffffc080
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d11a      	bne.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2250      	movs	r2, #80	@ 0x50
 8005a44:	5a9b      	ldrh	r3, [r3, r2]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	001a      	movs	r2, r3
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a58:	18d3      	adds	r3, r2, r3
 8005a5a:	4ad9      	ldr	r2, [pc, #868]	@ (8005dc0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005a5c:	4694      	mov	ip, r2
 8005a5e:	4463      	add	r3, ip
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	238c      	movs	r3, #140	@ 0x8c
 8005a64:	18fb      	adds	r3, r7, r3
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	891a      	ldrh	r2, [r3, #8]
 8005a7a:	238c      	movs	r3, #140	@ 0x8c
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f005 fdb3 	bl	800b5ec <USB_WritePMA>
 8005a86:	e1e9      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2250      	movs	r2, #80	@ 0x50
 8005a8e:	5a9b      	ldrh	r3, [r3, r2]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	001a      	movs	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	18d2      	adds	r2, r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	4ac8      	ldr	r2, [pc, #800]	@ (8005dc4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005aa4:	4694      	mov	ip, r2
 8005aa6:	4463      	add	r3, ip
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	2188      	movs	r1, #136	@ 0x88
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	0592      	lsls	r2, r2, #22
 8005ab0:	0d92      	lsrs	r2, r2, #22
 8005ab2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	187b      	adds	r3, r7, r1
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d307      	bcc.n	8005ad0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	1ad2      	subs	r2, r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	619a      	str	r2, [r3, #24]
 8005ace:	e002      	b.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005ade:	e0bb      	b.n	8005c58 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d125      	bne.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x490>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2250      	movs	r2, #80	@ 0x50
 8005af4:	5a9b      	ldrh	r3, [r3, r2]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	001a      	movs	r2, r3
 8005afa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00da      	lsls	r2, r3, #3
 8005b06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b08:	18d3      	adds	r3, r2, r3
 8005b0a:	4aad      	ldr	r2, [pc, #692]	@ (8005dc0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005b0c:	4694      	mov	ip, r2
 8005b0e:	4463      	add	r3, ip
 8005b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	0d9b      	lsrs	r3, r3, #22
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	4aa7      	ldr	r2, [pc, #668]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e01b      	b.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d117      	bne.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2250      	movs	r2, #80	@ 0x50
 8005b48:	5a9b      	ldrh	r3, [r3, r2]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b50:	189b      	adds	r3, r3, r2
 8005b52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	4a98      	ldr	r2, [pc, #608]	@ (8005dc0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005b60:	4694      	mov	ip, r2
 8005b62:	4463      	add	r3, ip
 8005b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b68:	2200      	movs	r2, #0
 8005b6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d12b      	bne.n	8005bd2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2250      	movs	r2, #80	@ 0x50
 8005b86:	5a9b      	ldrh	r3, [r3, r2]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	00da      	lsls	r2, r3, #3
 8005b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9a:	18d3      	adds	r3, r2, r3
 8005b9c:	4a89      	ldr	r2, [pc, #548]	@ (8005dc4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005b9e:	4694      	mov	ip, r2
 8005ba0:	4463      	add	r3, ip
 8005ba2:	2184      	movs	r1, #132	@ 0x84
 8005ba4:	187a      	adds	r2, r7, r1
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	187b      	adds	r3, r7, r1
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	0d9b      	lsrs	r3, r3, #22
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	187b      	adds	r3, r7, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	187b      	adds	r3, r7, r1
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4a80      	ldr	r2, [pc, #512]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e018      	b.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x560>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d114      	bne.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x560>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2250      	movs	r2, #80	@ 0x50
 8005be0:	5a9b      	ldrh	r3, [r3, r2]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	001a      	movs	r2, r3
 8005be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	00da      	lsls	r2, r3, #3
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	4a73      	ldr	r2, [pc, #460]	@ (8005dc4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005bf8:	4694      	mov	ip, r2
 8005bfa:	4463      	add	r3, ip
 8005bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c00:	2200      	movs	r2, #0
 8005c02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	0011      	movs	r1, r2
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f007 fd11 	bl	800d634 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c12:	1dbb      	adds	r3, r7, #6
 8005c14:	881a      	ldrh	r2, [r3, #0]
 8005c16:	2380      	movs	r3, #128	@ 0x80
 8005c18:	01db      	lsls	r3, r3, #7
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d000      	beq.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005c1e:	e11d      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	001a      	movs	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	2082      	movs	r0, #130	@ 0x82
 8005c34:	183b      	adds	r3, r7, r0
 8005c36:	4965      	ldr	r1, [pc, #404]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x728>)
 8005c38:	400a      	ands	r2, r1
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	001a      	movs	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	18d3      	adds	r3, r2, r3
 8005c4a:	183a      	adds	r2, r7, r0
 8005c4c:	8812      	ldrh	r2, [r2, #0]
 8005c4e:	4960      	ldr	r1, [pc, #384]	@ (8005dd0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005c50:	430a      	orrs	r2, r1
 8005c52:	b292      	uxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e101      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c58:	1dbb      	adds	r3, r7, #6
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	01db      	lsls	r3, r3, #7
 8005c60:	4013      	ands	r3, r2
 8005c62:	d11a      	bne.n	8005c9a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	001a      	movs	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	18d3      	adds	r3, r2, r3
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	204e      	movs	r0, #78	@ 0x4e
 8005c78:	183b      	adds	r3, r7, r0
 8005c7a:	4954      	ldr	r1, [pc, #336]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x728>)
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	001a      	movs	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	183a      	adds	r2, r7, r0
 8005c90:	8812      	ldrh	r2, [r2, #0]
 8005c92:	494f      	ldr	r1, [pc, #316]	@ (8005dd0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005c94:	430a      	orrs	r2, r1
 8005c96:	b292      	uxth	r2, r2
 8005c98:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2224      	movs	r2, #36	@ 0x24
 8005c9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d000      	beq.n	8005ca6 <HAL_PCD_EP_DB_Transmit+0x602>
 8005ca4:	e0da      	b.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	2188      	movs	r1, #136	@ 0x88
 8005cac:	187b      	adds	r3, r7, r1
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	18d2      	adds	r2, r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	18d2      	adds	r2, r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d30c      	bcc.n	8005cea <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	218c      	movs	r1, #140	@ 0x8c
 8005cd6:	187a      	adds	r2, r7, r1
 8005cd8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6a1a      	ldr	r2, [r3, #32]
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	621a      	str	r2, [r3, #32]
 8005ce8:	e01a      	b.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005cf2:	2388      	movs	r3, #136	@ 0x88
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	228c      	movs	r2, #140	@ 0x8c
 8005cfa:	18ba      	adds	r2, r7, r2
 8005cfc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2224      	movs	r2, #36	@ 0x24
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]
 8005d06:	e00b      	b.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	228c      	movs	r2, #140	@ 0x8c
 8005d0e:	18ba      	adds	r2, r7, r2
 8005d10:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2224      	movs	r2, #36	@ 0x24
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d000      	beq.n	8005d30 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005d2e:	e06d      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x768>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2250      	movs	r2, #80	@ 0x50
 8005d3c:	5a9b      	ldrh	r3, [r3, r2]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	001a      	movs	r2, r3
 8005d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d44:	189b      	adds	r3, r3, r2
 8005d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00da      	lsls	r2, r3, #3
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d50:	18d3      	adds	r3, r2, r3
 8005d52:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005d54:	4694      	mov	ip, r2
 8005d56:	4463      	add	r3, ip
 8005d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	0d9b      	lsrs	r3, r3, #22
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	238c      	movs	r3, #140	@ 0x8c
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d108      	bne.n	8005d86 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4a13      	ldr	r2, [pc, #76]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e05e      	b.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005d86:	228c      	movs	r2, #140	@ 0x8c
 8005d88:	18bb      	adds	r3, r7, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d8e:	d821      	bhi.n	8005dd4 <HAL_PCD_EP_DB_Transmit+0x730>
 8005d90:	18bb      	adds	r3, r7, r2
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d98:	18bb      	adds	r3, r7, r2
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d002      	beq.n	8005da8 <HAL_PCD_EP_DB_Transmit+0x704>
 8005da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005da4:	3301      	adds	r3, #1
 8005da6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e041      	b.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005dc0:	00000402 	.word	0x00000402
 8005dc4:	00000406 	.word	0x00000406
 8005dc8:	ffff8000 	.word	0xffff8000
 8005dcc:	ffff8f8f 	.word	0xffff8f8f
 8005dd0:	ffffc080 	.word	0xffffc080
 8005dd4:	228c      	movs	r2, #140	@ 0x8c
 8005dd6:	18bb      	adds	r3, r7, r2
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dde:	18bb      	adds	r3, r7, r2
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	221f      	movs	r2, #31
 8005de4:	4013      	ands	r3, r2
 8005de6:	d102      	bne.n	8005dee <HAL_PCD_EP_DB_Transmit+0x74a>
 8005de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dea:	3b01      	subs	r3, #1
 8005dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	029b      	lsls	r3, r3, #10
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <HAL_PCD_EP_DB_Transmit+0x810>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e01b      	b.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d117      	bne.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2250      	movs	r2, #80	@ 0x50
 8005e1a:	5a9b      	ldrh	r3, [r3, r2]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	001a      	movs	r2, r3
 8005e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	00da      	lsls	r2, r3, #3
 8005e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	4a21      	ldr	r2, [pc, #132]	@ (8005eb8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8005e32:	4694      	mov	ip, r2
 8005e34:	4463      	add	r3, ip
 8005e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e38:	238c      	movs	r3, #140	@ 0x8c
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6959      	ldr	r1, [r3, #20]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	895a      	ldrh	r2, [r3, #10]
 8005e50:	238c      	movs	r3, #140	@ 0x8c
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f005 fbc8 	bl	800b5ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	001a      	movs	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	18d3      	adds	r3, r2, r3
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	2014      	movs	r0, #20
 8005e70:	183b      	adds	r3, r7, r0
 8005e72:	4912      	ldr	r1, [pc, #72]	@ (8005ebc <HAL_PCD_EP_DB_Transmit+0x818>)
 8005e74:	400a      	ands	r2, r1
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	183b      	adds	r3, r7, r0
 8005e7a:	183a      	adds	r2, r7, r0
 8005e7c:	8812      	ldrh	r2, [r2, #0]
 8005e7e:	2110      	movs	r1, #16
 8005e80:	404a      	eors	r2, r1
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	183b      	adds	r3, r7, r0
 8005e86:	183a      	adds	r2, r7, r0
 8005e88:	8812      	ldrh	r2, [r2, #0]
 8005e8a:	2120      	movs	r1, #32
 8005e8c:	404a      	eors	r2, r1
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	001a      	movs	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	18d3      	adds	r3, r2, r3
 8005e9e:	183a      	adds	r2, r7, r0
 8005ea0:	8812      	ldrh	r2, [r2, #0]
 8005ea2:	4907      	ldr	r1, [pc, #28]	@ (8005ec0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b024      	add	sp, #144	@ 0x90
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	ffff8000 	.word	0xffff8000
 8005eb8:	00000406 	.word	0x00000406
 8005ebc:	ffff8fbf 	.word	0xffff8fbf
 8005ec0:	ffff8080 	.word	0xffff8080

08005ec4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	0008      	movs	r0, r1
 8005ece:	0011      	movs	r1, r2
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	240a      	movs	r4, #10
 8005ed4:	193b      	adds	r3, r7, r4
 8005ed6:	1c02      	adds	r2, r0, #0
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	2308      	movs	r3, #8
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	1c0a      	adds	r2, r1, #0
 8005ee0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	187b      	adds	r3, r7, r1
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	2280      	movs	r2, #128	@ 0x80
 8005eea:	4013      	ands	r3, r2
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00c      	beq.n	8005f0c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ef2:	187b      	adds	r3, r7, r1
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	2207      	movs	r2, #7
 8005ef8:	401a      	ands	r2, r3
 8005efa:	0013      	movs	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	3310      	adds	r3, #16
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	18d3      	adds	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e00b      	b.n	8005f24 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f0c:	230a      	movs	r3, #10
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	0013      	movs	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	3351      	adds	r3, #81	@ 0x51
 8005f1c:	33ff      	adds	r3, #255	@ 0xff
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	18d3      	adds	r3, r2, r3
 8005f22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f24:	2308      	movs	r3, #8
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	80da      	strh	r2, [r3, #6]
 8005f3c:	e00b      	b.n	8005f56 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2201      	movs	r2, #1
 8005f42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b007      	add	sp, #28
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	23b4      	movs	r3, #180	@ 0xb4
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	2101      	movs	r1, #1
 8005f76:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	23b2      	movs	r3, #178	@ 0xb2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	2100      	movs	r1, #0
 8005f80:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2254      	movs	r2, #84	@ 0x54
 8005f86:	5a9b      	ldrh	r3, [r3, r2]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b299      	uxth	r1, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2254      	movs	r2, #84	@ 0x54
 8005f94:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2254      	movs	r2, #84	@ 0x54
 8005f9a:	5a9b      	ldrh	r3, [r3, r2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	b299      	uxth	r1, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2254      	movs	r2, #84	@ 0x54
 8005fa8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	0018      	movs	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b004      	add	sp, #16
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	000a      	movs	r2, r1
 8005fbe:	1cfb      	adds	r3, r7, #3
 8005fc0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f000 fb76 	bl	80066cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d100      	bne.n	8005fec <HAL_RCC_OscConfig+0x20>
 8005fea:	e08e      	b.n	800610a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005fec:	4bc5      	ldr	r3, [pc, #788]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	220c      	movs	r2, #12
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d00e      	beq.n	8006016 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ff8:	4bc2      	ldr	r3, [pc, #776]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	220c      	movs	r2, #12
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b08      	cmp	r3, #8
 8006002:	d117      	bne.n	8006034 <HAL_RCC_OscConfig+0x68>
 8006004:	4bbf      	ldr	r3, [pc, #764]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	23c0      	movs	r3, #192	@ 0xc0
 800600a:	025b      	lsls	r3, r3, #9
 800600c:	401a      	ands	r2, r3
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	025b      	lsls	r3, r3, #9
 8006012:	429a      	cmp	r2, r3
 8006014:	d10e      	bne.n	8006034 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006016:	4bbb      	ldr	r3, [pc, #748]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	2380      	movs	r3, #128	@ 0x80
 800601c:	029b      	lsls	r3, r3, #10
 800601e:	4013      	ands	r3, r2
 8006020:	d100      	bne.n	8006024 <HAL_RCC_OscConfig+0x58>
 8006022:	e071      	b.n	8006108 <HAL_RCC_OscConfig+0x13c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d000      	beq.n	800602e <HAL_RCC_OscConfig+0x62>
 800602c:	e06c      	b.n	8006108 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f000 fb4c 	bl	80066cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <HAL_RCC_OscConfig+0x80>
 800603c:	4bb1      	ldr	r3, [pc, #708]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4bb0      	ldr	r3, [pc, #704]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006042:	2180      	movs	r1, #128	@ 0x80
 8006044:	0249      	lsls	r1, r1, #9
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e02f      	b.n	80060ac <HAL_RCC_OscConfig+0xe0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10c      	bne.n	800606e <HAL_RCC_OscConfig+0xa2>
 8006054:	4bab      	ldr	r3, [pc, #684]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4baa      	ldr	r3, [pc, #680]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800605a:	49ab      	ldr	r1, [pc, #684]	@ (8006308 <HAL_RCC_OscConfig+0x33c>)
 800605c:	400a      	ands	r2, r1
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	4ba8      	ldr	r3, [pc, #672]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4ba7      	ldr	r3, [pc, #668]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006066:	49a9      	ldr	r1, [pc, #676]	@ (800630c <HAL_RCC_OscConfig+0x340>)
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e01e      	b.n	80060ac <HAL_RCC_OscConfig+0xe0>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b05      	cmp	r3, #5
 8006074:	d10e      	bne.n	8006094 <HAL_RCC_OscConfig+0xc8>
 8006076:	4ba3      	ldr	r3, [pc, #652]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4ba2      	ldr	r3, [pc, #648]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800607c:	2180      	movs	r1, #128	@ 0x80
 800607e:	02c9      	lsls	r1, r1, #11
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	4b9f      	ldr	r3, [pc, #636]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b9e      	ldr	r3, [pc, #632]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800608a:	2180      	movs	r1, #128	@ 0x80
 800608c:	0249      	lsls	r1, r1, #9
 800608e:	430a      	orrs	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e00b      	b.n	80060ac <HAL_RCC_OscConfig+0xe0>
 8006094:	4b9b      	ldr	r3, [pc, #620]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b9a      	ldr	r3, [pc, #616]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800609a:	499b      	ldr	r1, [pc, #620]	@ (8006308 <HAL_RCC_OscConfig+0x33c>)
 800609c:	400a      	ands	r2, r1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	4b98      	ldr	r3, [pc, #608]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b97      	ldr	r3, [pc, #604]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80060a6:	4999      	ldr	r1, [pc, #612]	@ (800630c <HAL_RCC_OscConfig+0x340>)
 80060a8:	400a      	ands	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d014      	beq.n	80060de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fd f9d8 	bl	8003468 <HAL_GetTick>
 80060b8:	0003      	movs	r3, r0
 80060ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060be:	f7fd f9d3 	bl	8003468 <HAL_GetTick>
 80060c2:	0002      	movs	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	@ 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e2fd      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	2380      	movs	r3, #128	@ 0x80
 80060d6:	029b      	lsls	r3, r3, #10
 80060d8:	4013      	ands	r3, r2
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0xf2>
 80060dc:	e015      	b.n	800610a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060de:	f7fd f9c3 	bl	8003468 <HAL_GetTick>
 80060e2:	0003      	movs	r3, r0
 80060e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e8:	f7fd f9be 	bl	8003468 <HAL_GetTick>
 80060ec:	0002      	movs	r2, r0
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b64      	cmp	r3, #100	@ 0x64
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e2e8      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fa:	4b82      	ldr	r3, [pc, #520]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	2380      	movs	r3, #128	@ 0x80
 8006100:	029b      	lsls	r3, r3, #10
 8006102:	4013      	ands	r3, r2
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x11c>
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2202      	movs	r2, #2
 8006110:	4013      	ands	r3, r2
 8006112:	d100      	bne.n	8006116 <HAL_RCC_OscConfig+0x14a>
 8006114:	e06c      	b.n	80061f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006116:	4b7b      	ldr	r3, [pc, #492]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	220c      	movs	r2, #12
 800611c:	4013      	ands	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006120:	4b78      	ldr	r3, [pc, #480]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	220c      	movs	r2, #12
 8006126:	4013      	ands	r3, r2
 8006128:	2b08      	cmp	r3, #8
 800612a:	d11f      	bne.n	800616c <HAL_RCC_OscConfig+0x1a0>
 800612c:	4b75      	ldr	r3, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	23c0      	movs	r3, #192	@ 0xc0
 8006132:	025b      	lsls	r3, r3, #9
 8006134:	401a      	ands	r2, r3
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	429a      	cmp	r2, r3
 800613c:	d116      	bne.n	800616c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613e:	4b71      	ldr	r3, [pc, #452]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2202      	movs	r2, #2
 8006144:	4013      	ands	r3, r2
 8006146:	d005      	beq.n	8006154 <HAL_RCC_OscConfig+0x188>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e2bb      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006154:	4b6b      	ldr	r3, [pc, #428]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22f8      	movs	r2, #248	@ 0xf8
 800615a:	4393      	bics	r3, r2
 800615c:	0019      	movs	r1, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	00da      	lsls	r2, r3, #3
 8006164:	4b67      	ldr	r3, [pc, #412]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616a:	e041      	b.n	80061f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d024      	beq.n	80061be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006174:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4b62      	ldr	r3, [pc, #392]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800617a:	2101      	movs	r1, #1
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006180:	f7fd f972 	bl	8003468 <HAL_GetTick>
 8006184:	0003      	movs	r3, r0
 8006186:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800618a:	f7fd f96d 	bl	8003468 <HAL_GetTick>
 800618e:	0002      	movs	r2, r0
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e297      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619c:	4b59      	ldr	r3, [pc, #356]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2202      	movs	r2, #2
 80061a2:	4013      	ands	r3, r2
 80061a4:	d0f1      	beq.n	800618a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	4b57      	ldr	r3, [pc, #348]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	22f8      	movs	r2, #248	@ 0xf8
 80061ac:	4393      	bics	r3, r2
 80061ae:	0019      	movs	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	00da      	lsls	r2, r3, #3
 80061b6:	4b53      	ldr	r3, [pc, #332]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80061b8:	430a      	orrs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e018      	b.n	80061f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061be:	4b51      	ldr	r3, [pc, #324]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b50      	ldr	r3, [pc, #320]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80061c4:	2101      	movs	r1, #1
 80061c6:	438a      	bics	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ca:	f7fd f94d 	bl	8003468 <HAL_GetTick>
 80061ce:	0003      	movs	r3, r0
 80061d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fd f948 	bl	8003468 <HAL_GetTick>
 80061d8:	0002      	movs	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e272      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	4b47      	ldr	r3, [pc, #284]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2202      	movs	r2, #2
 80061ec:	4013      	ands	r3, r2
 80061ee:	d1f1      	bne.n	80061d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2208      	movs	r2, #8
 80061f6:	4013      	ands	r3, r2
 80061f8:	d036      	beq.n	8006268 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d019      	beq.n	8006236 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006202:	4b40      	ldr	r3, [pc, #256]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006206:	4b3f      	ldr	r3, [pc, #252]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006208:	2101      	movs	r1, #1
 800620a:	430a      	orrs	r2, r1
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800620e:	f7fd f92b 	bl	8003468 <HAL_GetTick>
 8006212:	0003      	movs	r3, r0
 8006214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006218:	f7fd f926 	bl	8003468 <HAL_GetTick>
 800621c:	0002      	movs	r2, r0
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e250      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622a:	4b36      	ldr	r3, [pc, #216]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	2202      	movs	r2, #2
 8006230:	4013      	ands	r3, r2
 8006232:	d0f1      	beq.n	8006218 <HAL_RCC_OscConfig+0x24c>
 8006234:	e018      	b.n	8006268 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006236:	4b33      	ldr	r3, [pc, #204]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623a:	4b32      	ldr	r3, [pc, #200]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800623c:	2101      	movs	r1, #1
 800623e:	438a      	bics	r2, r1
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006242:	f7fd f911 	bl	8003468 <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624c:	f7fd f90c 	bl	8003468 <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e236      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625e:	4b29      	ldr	r3, [pc, #164]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	d1f1      	bne.n	800624c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2204      	movs	r2, #4
 800626e:	4013      	ands	r3, r2
 8006270:	d100      	bne.n	8006274 <HAL_RCC_OscConfig+0x2a8>
 8006272:	e0b5      	b.n	80063e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006274:	201f      	movs	r0, #31
 8006276:	183b      	adds	r3, r7, r0
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627c:	4b21      	ldr	r3, [pc, #132]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	055b      	lsls	r3, r3, #21
 8006284:	4013      	ands	r3, r2
 8006286:	d110      	bne.n	80062aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006288:	4b1e      	ldr	r3, [pc, #120]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 800628e:	2180      	movs	r1, #128	@ 0x80
 8006290:	0549      	lsls	r1, r1, #21
 8006292:	430a      	orrs	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
 8006296:	4b1b      	ldr	r3, [pc, #108]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	2380      	movs	r3, #128	@ 0x80
 800629c:	055b      	lsls	r3, r3, #21
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062a4:	183b      	adds	r3, r7, r0
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062aa:	4b19      	ldr	r3, [pc, #100]	@ (8006310 <HAL_RCC_OscConfig+0x344>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4013      	ands	r3, r2
 80062b4:	d11a      	bne.n	80062ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b6:	4b16      	ldr	r3, [pc, #88]	@ (8006310 <HAL_RCC_OscConfig+0x344>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <HAL_RCC_OscConfig+0x344>)
 80062bc:	2180      	movs	r1, #128	@ 0x80
 80062be:	0049      	lsls	r1, r1, #1
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c4:	f7fd f8d0 	bl	8003468 <HAL_GetTick>
 80062c8:	0003      	movs	r3, r0
 80062ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ce:	f7fd f8cb 	bl	8003468 <HAL_GetTick>
 80062d2:	0002      	movs	r2, r0
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b64      	cmp	r3, #100	@ 0x64
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e1f5      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <HAL_RCC_OscConfig+0x344>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2380      	movs	r3, #128	@ 0x80
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4013      	ands	r3, r2
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d10f      	bne.n	8006314 <HAL_RCC_OscConfig+0x348>
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <HAL_RCC_OscConfig+0x338>)
 80062fa:	2101      	movs	r1, #1
 80062fc:	430a      	orrs	r2, r1
 80062fe:	621a      	str	r2, [r3, #32]
 8006300:	e036      	b.n	8006370 <HAL_RCC_OscConfig+0x3a4>
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	40021000 	.word	0x40021000
 8006308:	fffeffff 	.word	0xfffeffff
 800630c:	fffbffff 	.word	0xfffbffff
 8006310:	40007000 	.word	0x40007000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10c      	bne.n	8006336 <HAL_RCC_OscConfig+0x36a>
 800631c:	4bca      	ldr	r3, [pc, #808]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800631e:	6a1a      	ldr	r2, [r3, #32]
 8006320:	4bc9      	ldr	r3, [pc, #804]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006322:	2101      	movs	r1, #1
 8006324:	438a      	bics	r2, r1
 8006326:	621a      	str	r2, [r3, #32]
 8006328:	4bc7      	ldr	r3, [pc, #796]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	4bc6      	ldr	r3, [pc, #792]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800632e:	2104      	movs	r1, #4
 8006330:	438a      	bics	r2, r1
 8006332:	621a      	str	r2, [r3, #32]
 8006334:	e01c      	b.n	8006370 <HAL_RCC_OscConfig+0x3a4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x38c>
 800633e:	4bc2      	ldr	r3, [pc, #776]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	4bc1      	ldr	r3, [pc, #772]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006344:	2104      	movs	r1, #4
 8006346:	430a      	orrs	r2, r1
 8006348:	621a      	str	r2, [r3, #32]
 800634a:	4bbf      	ldr	r3, [pc, #764]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	4bbe      	ldr	r3, [pc, #760]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006350:	2101      	movs	r1, #1
 8006352:	430a      	orrs	r2, r1
 8006354:	621a      	str	r2, [r3, #32]
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0x3a4>
 8006358:	4bbb      	ldr	r3, [pc, #748]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	4bba      	ldr	r3, [pc, #744]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800635e:	2101      	movs	r1, #1
 8006360:	438a      	bics	r2, r1
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	4bb8      	ldr	r3, [pc, #736]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	4bb7      	ldr	r3, [pc, #732]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800636a:	2104      	movs	r1, #4
 800636c:	438a      	bics	r2, r1
 800636e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d014      	beq.n	80063a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006378:	f7fd f876 	bl	8003468 <HAL_GetTick>
 800637c:	0003      	movs	r3, r0
 800637e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006380:	e009      	b.n	8006396 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fd f871 	bl	8003468 <HAL_GetTick>
 8006386:	0002      	movs	r2, r0
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	4aaf      	ldr	r2, [pc, #700]	@ (800664c <HAL_RCC_OscConfig+0x680>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e19a      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	4bac      	ldr	r3, [pc, #688]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	2202      	movs	r2, #2
 800639c:	4013      	ands	r3, r2
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x3b6>
 80063a0:	e013      	b.n	80063ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a2:	f7fd f861 	bl	8003468 <HAL_GetTick>
 80063a6:	0003      	movs	r3, r0
 80063a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063aa:	e009      	b.n	80063c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fd f85c 	bl	8003468 <HAL_GetTick>
 80063b0:	0002      	movs	r2, r0
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	4aa5      	ldr	r2, [pc, #660]	@ (800664c <HAL_RCC_OscConfig+0x680>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e185      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c0:	4ba1      	ldr	r3, [pc, #644]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	2202      	movs	r2, #2
 80063c6:	4013      	ands	r3, r2
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063ca:	231f      	movs	r3, #31
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d105      	bne.n	80063e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	4b9b      	ldr	r3, [pc, #620]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80063da:	499d      	ldr	r1, [pc, #628]	@ (8006650 <HAL_RCC_OscConfig+0x684>)
 80063dc:	400a      	ands	r2, r1
 80063de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2210      	movs	r2, #16
 80063e6:	4013      	ands	r3, r2
 80063e8:	d063      	beq.n	80064b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d12a      	bne.n	8006448 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063f2:	4b95      	ldr	r3, [pc, #596]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80063f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f6:	4b94      	ldr	r3, [pc, #592]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80063f8:	2104      	movs	r1, #4
 80063fa:	430a      	orrs	r2, r1
 80063fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80063fe:	4b92      	ldr	r3, [pc, #584]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006402:	4b91      	ldr	r3, [pc, #580]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006404:	2101      	movs	r1, #1
 8006406:	430a      	orrs	r2, r1
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800640a:	f7fd f82d 	bl	8003468 <HAL_GetTick>
 800640e:	0003      	movs	r3, r0
 8006410:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006414:	f7fd f828 	bl	8003468 <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e152      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006426:	4b88      	ldr	r3, [pc, #544]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642a:	2202      	movs	r2, #2
 800642c:	4013      	ands	r3, r2
 800642e:	d0f1      	beq.n	8006414 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006430:	4b85      	ldr	r3, [pc, #532]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006434:	22f8      	movs	r2, #248	@ 0xf8
 8006436:	4393      	bics	r3, r2
 8006438:	0019      	movs	r1, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	4b81      	ldr	r3, [pc, #516]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006442:	430a      	orrs	r2, r1
 8006444:	635a      	str	r2, [r3, #52]	@ 0x34
 8006446:	e034      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	3305      	adds	r3, #5
 800644e:	d111      	bne.n	8006474 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006450:	4b7d      	ldr	r3, [pc, #500]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006454:	4b7c      	ldr	r3, [pc, #496]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006456:	2104      	movs	r1, #4
 8006458:	438a      	bics	r2, r1
 800645a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800645c:	4b7a      	ldr	r3, [pc, #488]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800645e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006460:	22f8      	movs	r2, #248	@ 0xf8
 8006462:	4393      	bics	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	00da      	lsls	r2, r3, #3
 800646c:	4b76      	ldr	r3, [pc, #472]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800646e:	430a      	orrs	r2, r1
 8006470:	635a      	str	r2, [r3, #52]	@ 0x34
 8006472:	e01e      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006474:	4b74      	ldr	r3, [pc, #464]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006478:	4b73      	ldr	r3, [pc, #460]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800647a:	2104      	movs	r1, #4
 800647c:	430a      	orrs	r2, r1
 800647e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006480:	4b71      	ldr	r3, [pc, #452]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006484:	4b70      	ldr	r3, [pc, #448]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006486:	2101      	movs	r1, #1
 8006488:	438a      	bics	r2, r1
 800648a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648c:	f7fc ffec 	bl	8003468 <HAL_GetTick>
 8006490:	0003      	movs	r3, r0
 8006492:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006496:	f7fc ffe7 	bl	8003468 <HAL_GetTick>
 800649a:	0002      	movs	r2, r0
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e111      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80064a8:	4b67      	ldr	r3, [pc, #412]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80064aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ac:	2202      	movs	r2, #2
 80064ae:	4013      	ands	r3, r2
 80064b0:	d1f1      	bne.n	8006496 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	4013      	ands	r3, r2
 80064ba:	d05c      	beq.n	8006576 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80064bc:	4b62      	ldr	r3, [pc, #392]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	220c      	movs	r2, #12
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d00e      	beq.n	80064e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80064c8:	4b5f      	ldr	r3, [pc, #380]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	220c      	movs	r2, #12
 80064ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d114      	bne.n	80064fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80064d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	23c0      	movs	r3, #192	@ 0xc0
 80064da:	025b      	lsls	r3, r3, #9
 80064dc:	401a      	ands	r2, r3
 80064de:	23c0      	movs	r3, #192	@ 0xc0
 80064e0:	025b      	lsls	r3, r3, #9
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d10b      	bne.n	80064fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80064e6:	4b58      	ldr	r3, [pc, #352]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80064e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	4013      	ands	r3, r2
 80064f0:	d040      	beq.n	8006574 <HAL_RCC_OscConfig+0x5a8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d03c      	beq.n	8006574 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e0e6      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006506:	4b50      	ldr	r3, [pc, #320]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650a:	4b4f      	ldr	r3, [pc, #316]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800650c:	2180      	movs	r1, #128	@ 0x80
 800650e:	0249      	lsls	r1, r1, #9
 8006510:	430a      	orrs	r2, r1
 8006512:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc ffa8 	bl	8003468 <HAL_GetTick>
 8006518:	0003      	movs	r3, r0
 800651a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800651e:	f7fc ffa3 	bl	8003468 <HAL_GetTick>
 8006522:	0002      	movs	r2, r0
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0cd      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006530:	4b45      	ldr	r3, [pc, #276]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006534:	2380      	movs	r3, #128	@ 0x80
 8006536:	029b      	lsls	r3, r3, #10
 8006538:	4013      	ands	r3, r2
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x552>
 800653c:	e01b      	b.n	8006576 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800653e:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006542:	4b41      	ldr	r3, [pc, #260]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006544:	4943      	ldr	r1, [pc, #268]	@ (8006654 <HAL_RCC_OscConfig+0x688>)
 8006546:	400a      	ands	r2, r1
 8006548:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654a:	f7fc ff8d 	bl	8003468 <HAL_GetTick>
 800654e:	0003      	movs	r3, r0
 8006550:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006554:	f7fc ff88 	bl	8003468 <HAL_GetTick>
 8006558:	0002      	movs	r2, r0
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0b2      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006566:	4b38      	ldr	r3, [pc, #224]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800656a:	2380      	movs	r3, #128	@ 0x80
 800656c:	029b      	lsls	r3, r3, #10
 800656e:	4013      	ands	r3, r2
 8006570:	d1f0      	bne.n	8006554 <HAL_RCC_OscConfig+0x588>
 8006572:	e000      	b.n	8006576 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006574:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d100      	bne.n	8006580 <HAL_RCC_OscConfig+0x5b4>
 800657e:	e0a4      	b.n	80066ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006580:	4b31      	ldr	r3, [pc, #196]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	220c      	movs	r2, #12
 8006586:	4013      	ands	r3, r2
 8006588:	2b08      	cmp	r3, #8
 800658a:	d100      	bne.n	800658e <HAL_RCC_OscConfig+0x5c2>
 800658c:	e078      	b.n	8006680 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	2b02      	cmp	r3, #2
 8006594:	d14c      	bne.n	8006630 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b2b      	ldr	r3, [pc, #172]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 800659c:	492e      	ldr	r1, [pc, #184]	@ (8006658 <HAL_RCC_OscConfig+0x68c>)
 800659e:	400a      	ands	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a2:	f7fc ff61 	bl	8003468 <HAL_GetTick>
 80065a6:	0003      	movs	r3, r0
 80065a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fc ff5c 	bl	8003468 <HAL_GetTick>
 80065b0:	0002      	movs	r2, r0
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e086      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065be:	4b22      	ldr	r3, [pc, #136]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	2380      	movs	r3, #128	@ 0x80
 80065c4:	049b      	lsls	r3, r3, #18
 80065c6:	4013      	ands	r3, r2
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	220f      	movs	r2, #15
 80065d0:	4393      	bics	r3, r2
 80065d2:	0019      	movs	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065da:	430a      	orrs	r2, r1
 80065dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4a1e      	ldr	r2, [pc, #120]	@ (800665c <HAL_RCC_OscConfig+0x690>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	0019      	movs	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	431a      	orrs	r2, r3
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b12      	ldr	r3, [pc, #72]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 80065fe:	2180      	movs	r1, #128	@ 0x80
 8006600:	0449      	lsls	r1, r1, #17
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006606:	f7fc ff2f 	bl	8003468 <HAL_GetTick>
 800660a:	0003      	movs	r3, r0
 800660c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006610:	f7fc ff2a 	bl	8003468 <HAL_GetTick>
 8006614:	0002      	movs	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e054      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006622:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	@ 0x80
 8006628:	049b      	lsls	r3, r3, #18
 800662a:	4013      	ands	r3, r2
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0x644>
 800662e:	e04c      	b.n	80066ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <HAL_RCC_OscConfig+0x67c>)
 8006636:	4908      	ldr	r1, [pc, #32]	@ (8006658 <HAL_RCC_OscConfig+0x68c>)
 8006638:	400a      	ands	r2, r1
 800663a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fc ff14 	bl	8003468 <HAL_GetTick>
 8006640:	0003      	movs	r3, r0
 8006642:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006644:	e015      	b.n	8006672 <HAL_RCC_OscConfig+0x6a6>
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	40021000 	.word	0x40021000
 800664c:	00001388 	.word	0x00001388
 8006650:	efffffff 	.word	0xefffffff
 8006654:	fffeffff 	.word	0xfffeffff
 8006658:	feffffff 	.word	0xfeffffff
 800665c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006660:	f7fc ff02 	bl	8003468 <HAL_GetTick>
 8006664:	0002      	movs	r2, r0
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e02c      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006672:	4b18      	ldr	r3, [pc, #96]	@ (80066d4 <HAL_RCC_OscConfig+0x708>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	049b      	lsls	r3, r3, #18
 800667a:	4013      	ands	r3, r2
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x694>
 800667e:	e024      	b.n	80066ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e01f      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800668c:	4b11      	ldr	r3, [pc, #68]	@ (80066d4 <HAL_RCC_OscConfig+0x708>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_RCC_OscConfig+0x708>)
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	23c0      	movs	r3, #192	@ 0xc0
 800669c:	025b      	lsls	r3, r3, #9
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10e      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	220f      	movs	r2, #15
 80066ac:	401a      	ands	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d107      	bne.n	80066c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	23f0      	movs	r3, #240	@ 0xf0
 80066ba:	039b      	lsls	r3, r3, #14
 80066bc:	401a      	ands	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	0018      	movs	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b008      	add	sp, #32
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000

080066d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0bf      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b61      	ldr	r3, [pc, #388]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2201      	movs	r2, #1
 80066f2:	4013      	ands	r3, r2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d911      	bls.n	800671e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	4393      	bics	r3, r2
 8006702:	0019      	movs	r1, r3
 8006704:	4b5b      	ldr	r3, [pc, #364]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670c:	4b59      	ldr	r3, [pc, #356]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	4013      	ands	r3, r2
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d001      	beq.n	800671e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e0a6      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2202      	movs	r2, #2
 8006724:	4013      	ands	r3, r2
 8006726:	d015      	beq.n	8006754 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2204      	movs	r2, #4
 800672e:	4013      	ands	r3, r2
 8006730:	d006      	beq.n	8006740 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006732:	4b51      	ldr	r3, [pc, #324]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	4b50      	ldr	r3, [pc, #320]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006738:	21e0      	movs	r1, #224	@ 0xe0
 800673a:	00c9      	lsls	r1, r1, #3
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006740:	4b4d      	ldr	r3, [pc, #308]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	22f0      	movs	r2, #240	@ 0xf0
 8006746:	4393      	bics	r3, r2
 8006748:	0019      	movs	r1, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4b4a      	ldr	r3, [pc, #296]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	4013      	ands	r3, r2
 800675c:	d04c      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b44      	ldr	r3, [pc, #272]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	2380      	movs	r3, #128	@ 0x80
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	4013      	ands	r3, r2
 8006770:	d120      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e07a      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	4b3e      	ldr	r3, [pc, #248]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	049b      	lsls	r3, r3, #18
 8006786:	4013      	ands	r3, r2
 8006788:	d114      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e06e      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006796:	4b38      	ldr	r3, [pc, #224]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800679a:	2380      	movs	r3, #128	@ 0x80
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	4013      	ands	r3, r2
 80067a0:	d108      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e062      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a6:	4b34      	ldr	r3, [pc, #208]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2202      	movs	r2, #2
 80067ac:	4013      	ands	r3, r2
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e05b      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b4:	4b30      	ldr	r3, [pc, #192]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2203      	movs	r2, #3
 80067ba:	4393      	bics	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c8:	f7fc fe4e 	bl	8003468 <HAL_GetTick>
 80067cc:	0003      	movs	r3, r0
 80067ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d0:	e009      	b.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d2:	f7fc fe49 	bl	8003468 <HAL_GetTick>
 80067d6:	0002      	movs	r2, r0
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	4a27      	ldr	r2, [pc, #156]	@ (800687c <HAL_RCC_ClockConfig+0x1a4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e042      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	4b24      	ldr	r3, [pc, #144]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	220c      	movs	r2, #12
 80067ec:	401a      	ands	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1ec      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2201      	movs	r2, #1
 80067fe:	4013      	ands	r3, r2
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d211      	bcs.n	800682a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b1b      	ldr	r3, [pc, #108]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	4393      	bics	r3, r2
 800680e:	0019      	movs	r1, r3
 8006810:	4b18      	ldr	r3, [pc, #96]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006818:	4b16      	ldr	r3, [pc, #88]	@ (8006874 <HAL_RCC_ClockConfig+0x19c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	4013      	ands	r3, r2
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d001      	beq.n	800682a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e020      	b.n	800686c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2204      	movs	r2, #4
 8006830:	4013      	ands	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006834:	4b10      	ldr	r3, [pc, #64]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4a11      	ldr	r2, [pc, #68]	@ (8006880 <HAL_RCC_ClockConfig+0x1a8>)
 800683a:	4013      	ands	r3, r2
 800683c:	0019      	movs	r1, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006848:	f000 f820 	bl	800688c <HAL_RCC_GetSysClockFreq>
 800684c:	0001      	movs	r1, r0
 800684e:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <HAL_RCC_ClockConfig+0x1a0>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	220f      	movs	r2, #15
 8006856:	4013      	ands	r3, r2
 8006858:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <HAL_RCC_ClockConfig+0x1ac>)
 800685a:	5cd3      	ldrb	r3, [r2, r3]
 800685c:	000a      	movs	r2, r1
 800685e:	40da      	lsrs	r2, r3
 8006860:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <HAL_RCC_ClockConfig+0x1b0>)
 8006862:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006864:	2003      	movs	r0, #3
 8006866:	f7fc fdb9 	bl	80033dc <HAL_InitTick>
  
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	0018      	movs	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	b004      	add	sp, #16
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40022000 	.word	0x40022000
 8006878:	40021000 	.word	0x40021000
 800687c:	00001388 	.word	0x00001388
 8006880:	fffff8ff 	.word	0xfffff8ff
 8006884:	08011ac0 	.word	0x08011ac0
 8006888:	20000018 	.word	0x20000018

0800688c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80068a6:	4b2d      	ldr	r3, [pc, #180]	@ (800695c <HAL_RCC_GetSysClockFreq+0xd0>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	220c      	movs	r2, #12
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d046      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0xb8>
 80068b6:	d848      	bhi.n	800694a <HAL_RCC_GetSysClockFreq+0xbe>
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d002      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x36>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d003      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x3c>
 80068c0:	e043      	b.n	800694a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068c2:	4b27      	ldr	r3, [pc, #156]	@ (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068c4:	613b      	str	r3, [r7, #16]
      break;
 80068c6:	e043      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	0c9b      	lsrs	r3, r3, #18
 80068cc:	220f      	movs	r2, #15
 80068ce:	4013      	ands	r3, r2
 80068d0:	4a24      	ldr	r2, [pc, #144]	@ (8006964 <HAL_RCC_GetSysClockFreq+0xd8>)
 80068d2:	5cd3      	ldrb	r3, [r2, r3]
 80068d4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80068d6:	4b21      	ldr	r3, [pc, #132]	@ (800695c <HAL_RCC_GetSysClockFreq+0xd0>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	220f      	movs	r2, #15
 80068dc:	4013      	ands	r3, r2
 80068de:	4a22      	ldr	r2, [pc, #136]	@ (8006968 <HAL_RCC_GetSysClockFreq+0xdc>)
 80068e0:	5cd3      	ldrb	r3, [r2, r3]
 80068e2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	23c0      	movs	r3, #192	@ 0xc0
 80068e8:	025b      	lsls	r3, r3, #9
 80068ea:	401a      	ands	r2, r3
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	025b      	lsls	r3, r3, #9
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d109      	bne.n	8006908 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	481a      	ldr	r0, [pc, #104]	@ (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068f8:	f7f9 fc22 	bl	8000140 <__udivsi3>
 80068fc:	0003      	movs	r3, r0
 80068fe:	001a      	movs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4353      	muls	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e01a      	b.n	800693e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	23c0      	movs	r3, #192	@ 0xc0
 800690c:	025b      	lsls	r3, r3, #9
 800690e:	401a      	ands	r2, r3
 8006910:	23c0      	movs	r3, #192	@ 0xc0
 8006912:	025b      	lsls	r3, r3, #9
 8006914:	429a      	cmp	r2, r3
 8006916:	d109      	bne.n	800692c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	4814      	ldr	r0, [pc, #80]	@ (800696c <HAL_RCC_GetSysClockFreq+0xe0>)
 800691c:	f7f9 fc10 	bl	8000140 <__udivsi3>
 8006920:	0003      	movs	r3, r0
 8006922:	001a      	movs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4353      	muls	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e008      	b.n	800693e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	480c      	ldr	r0, [pc, #48]	@ (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006930:	f7f9 fc06 	bl	8000140 <__udivsi3>
 8006934:	0003      	movs	r3, r0
 8006936:	001a      	movs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4353      	muls	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	613b      	str	r3, [r7, #16]
      break;
 8006942:	e005      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006944:	4b09      	ldr	r3, [pc, #36]	@ (800696c <HAL_RCC_GetSysClockFreq+0xe0>)
 8006946:	613b      	str	r3, [r7, #16]
      break;
 8006948:	e002      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800694a:	4b05      	ldr	r3, [pc, #20]	@ (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 800694c:	613b      	str	r3, [r7, #16]
      break;
 800694e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006950:	693b      	ldr	r3, [r7, #16]
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b006      	add	sp, #24
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	40021000 	.word	0x40021000
 8006960:	007a1200 	.word	0x007a1200
 8006964:	08011ad8 	.word	0x08011ad8
 8006968:	08011ae8 	.word	0x08011ae8
 800696c:	02dc6c00 	.word	0x02dc6c00

08006970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006974:	4b02      	ldr	r3, [pc, #8]	@ (8006980 <HAL_RCC_GetHCLKFreq+0x10>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	20000018 	.word	0x20000018

08006984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006988:	f7ff fff2 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 800698c:	0001      	movs	r1, r0
 800698e:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	2207      	movs	r2, #7
 8006996:	4013      	ands	r3, r2
 8006998:	4a04      	ldr	r2, [pc, #16]	@ (80069ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800699a:	5cd3      	ldrb	r3, [r2, r3]
 800699c:	40d9      	lsrs	r1, r3
 800699e:	000b      	movs	r3, r1
}    
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	40021000 	.word	0x40021000
 80069ac:	08011ad0 	.word	0x08011ad0

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	2380      	movs	r3, #128	@ 0x80
 80069c6:	025b      	lsls	r3, r3, #9
 80069c8:	4013      	ands	r3, r2
 80069ca:	d100      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80069cc:	e08e      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80069ce:	2017      	movs	r0, #23
 80069d0:	183b      	adds	r3, r7, r0
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d6:	4b6e      	ldr	r3, [pc, #440]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069d8:	69da      	ldr	r2, [r3, #28]
 80069da:	2380      	movs	r3, #128	@ 0x80
 80069dc:	055b      	lsls	r3, r3, #21
 80069de:	4013      	ands	r3, r2
 80069e0:	d110      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069e2:	4b6b      	ldr	r3, [pc, #428]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069e4:	69da      	ldr	r2, [r3, #28]
 80069e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069e8:	2180      	movs	r1, #128	@ 0x80
 80069ea:	0549      	lsls	r1, r1, #21
 80069ec:	430a      	orrs	r2, r1
 80069ee:	61da      	str	r2, [r3, #28]
 80069f0:	4b67      	ldr	r3, [pc, #412]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	055b      	lsls	r3, r3, #21
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	183b      	adds	r3, r7, r0
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a04:	4b63      	ldr	r3, [pc, #396]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2380      	movs	r3, #128	@ 0x80
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d11a      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a10:	4b60      	ldr	r3, [pc, #384]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4b5f      	ldr	r3, [pc, #380]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006a16:	2180      	movs	r1, #128	@ 0x80
 8006a18:	0049      	lsls	r1, r1, #1
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1e:	f7fc fd23 	bl	8003468 <HAL_GetTick>
 8006a22:	0003      	movs	r3, r0
 8006a24:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a26:	e008      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a28:	f7fc fd1e 	bl	8003468 <HAL_GetTick>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	@ 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e0a6      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	4b56      	ldr	r3, [pc, #344]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a46:	4b52      	ldr	r3, [pc, #328]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	23c0      	movs	r3, #192	@ 0xc0
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d034      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	23c0      	movs	r3, #192	@ 0xc0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4013      	ands	r3, r2
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d02c      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a68:	4b49      	ldr	r3, [pc, #292]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a72:	4b47      	ldr	r3, [pc, #284]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	4b46      	ldr	r3, [pc, #280]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a78:	2180      	movs	r1, #128	@ 0x80
 8006a7a:	0249      	lsls	r1, r1, #9
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a80:	4b43      	ldr	r3, [pc, #268]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a86:	4945      	ldr	r1, [pc, #276]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006a88:	400a      	ands	r2, r1
 8006a8a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a8c:	4b40      	ldr	r3, [pc, #256]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	4013      	ands	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fc fce5 	bl	8003468 <HAL_GetTick>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa2:	e009      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa4:	f7fc fce0 	bl	8003468 <HAL_GetTick>
 8006aa8:	0002      	movs	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e067      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	4b35      	ldr	r3, [pc, #212]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ac2:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a34      	ldr	r2, [pc, #208]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ad6:	2317      	movs	r3, #23
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d105      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ae6:	492f      	ldr	r1, [pc, #188]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006ae8:	400a      	ands	r2, r1
 8006aea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2201      	movs	r2, #1
 8006af2:	4013      	ands	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006af6:	4b26      	ldr	r3, [pc, #152]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	2203      	movs	r2, #3
 8006afc:	4393      	bics	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	4b22      	ldr	r3, [pc, #136]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b06:	430a      	orrs	r2, r1
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	4013      	ands	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b14:	4b1e      	ldr	r3, [pc, #120]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b18:	4a23      	ldr	r2, [pc, #140]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	4b1b      	ldr	r3, [pc, #108]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b24:	430a      	orrs	r2, r1
 8006b26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b32:	4b17      	ldr	r3, [pc, #92]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	2210      	movs	r2, #16
 8006b38:	4393      	bics	r3, r2
 8006b3a:	0019      	movs	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b42:	430a      	orrs	r2, r1
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	2380      	movs	r3, #128	@ 0x80
 8006b4c:	029b      	lsls	r3, r3, #10
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d009      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	2280      	movs	r2, #128	@ 0x80
 8006b58:	4393      	bics	r3, r2
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b62:	430a      	orrs	r2, r1
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	2380      	movs	r3, #128	@ 0x80
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b72:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b76:	2240      	movs	r2, #64	@ 0x40
 8006b78:	4393      	bics	r3, r2
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695a      	ldr	r2, [r3, #20]
 8006b80:	4b03      	ldr	r3, [pc, #12]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b82:	430a      	orrs	r2, r1
 8006b84:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b006      	add	sp, #24
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40007000 	.word	0x40007000
 8006b98:	fffffcff 	.word	0xfffffcff
 8006b9c:	fffeffff 	.word	0xfffeffff
 8006ba0:	00001388 	.word	0x00001388
 8006ba4:	efffffff 	.word	0xefffffff
 8006ba8:	fffcffff 	.word	0xfffcffff

08006bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0a8      	b.n	8006d10 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	2382      	movs	r3, #130	@ 0x82
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d009      	beq.n	8006be6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	61da      	str	r2, [r3, #28]
 8006bd8:	e005      	b.n	8006be6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	225d      	movs	r2, #93	@ 0x5d
 8006bf0:	5c9b      	ldrb	r3, [r3, r2]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	225c      	movs	r2, #92	@ 0x5c
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fb ff0c 	bl	8002a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	225d      	movs	r2, #93	@ 0x5d
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2140      	movs	r1, #64	@ 0x40
 8006c1c:	438a      	bics	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	23e0      	movs	r3, #224	@ 0xe0
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d902      	bls.n	8006c32 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	e002      	b.n	8006c38 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c32:	2380      	movs	r3, #128	@ 0x80
 8006c34:	015b      	lsls	r3, r3, #5
 8006c36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	23f0      	movs	r3, #240	@ 0xf0
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d008      	beq.n	8006c56 <HAL_SPI_Init+0xaa>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	23e0      	movs	r3, #224	@ 0xe0
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	2382      	movs	r3, #130	@ 0x82
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	401a      	ands	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6899      	ldr	r1, [r3, #8]
 8006c64:	2384      	movs	r3, #132	@ 0x84
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	400b      	ands	r3, r1
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2102      	movs	r1, #2
 8006c72:	400b      	ands	r3, r1
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6999      	ldr	r1, [r3, #24]
 8006c84:	2380      	movs	r3, #128	@ 0x80
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	400b      	ands	r3, r1
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2138      	movs	r1, #56	@ 0x38
 8006c92:	400b      	ands	r3, r1
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	2180      	movs	r1, #128	@ 0x80
 8006c9c:	400b      	ands	r3, r1
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	0011      	movs	r1, r2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ca6:	2380      	movs	r3, #128	@ 0x80
 8006ca8:	019b      	lsls	r3, r3, #6
 8006caa:	401a      	ands	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	2204      	movs	r2, #4
 8006cbc:	401a      	ands	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	2110      	movs	r1, #16
 8006cc4:	400b      	ands	r3, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ccc:	2108      	movs	r1, #8
 8006cce:	400b      	ands	r3, r1
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68d9      	ldr	r1, [r3, #12]
 8006cd6:	23f0      	movs	r3, #240	@ 0xf0
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	400b      	ands	r3, r1
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	0011      	movs	r1, r2
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	015b      	lsls	r3, r3, #5
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4907      	ldr	r1, [pc, #28]	@ (8006d18 <HAL_SPI_Init+0x16c>)
 8006cfc:	400a      	ands	r2, r1
 8006cfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	225d      	movs	r2, #93	@ 0x5d
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b004      	add	sp, #16
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	fffff7ff 	.word	0xfffff7ff

08006d1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	1dbb      	adds	r3, r7, #6
 8006d2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d2c:	231f      	movs	r3, #31
 8006d2e:	18fb      	adds	r3, r7, r3
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	225c      	movs	r2, #92	@ 0x5c
 8006d38:	5c9b      	ldrb	r3, [r3, r2]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_SPI_Transmit+0x26>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e147      	b.n	8006fd2 <HAL_SPI_Transmit+0x2b6>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	225c      	movs	r2, #92	@ 0x5c
 8006d46:	2101      	movs	r1, #1
 8006d48:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d4a:	f7fc fb8d 	bl	8003468 <HAL_GetTick>
 8006d4e:	0003      	movs	r3, r0
 8006d50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d52:	2316      	movs	r3, #22
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	1dba      	adds	r2, r7, #6
 8006d58:	8812      	ldrh	r2, [r2, #0]
 8006d5a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	225d      	movs	r2, #93	@ 0x5d
 8006d60:	5c9b      	ldrb	r3, [r3, r2]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d004      	beq.n	8006d72 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d68:	231f      	movs	r3, #31
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d70:	e128      	b.n	8006fc4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_SPI_Transmit+0x64>
 8006d78:	1dbb      	adds	r3, r7, #6
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006d80:	231f      	movs	r3, #31
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	2201      	movs	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d88:	e11c      	b.n	8006fc4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	225d      	movs	r2, #93	@ 0x5d
 8006d8e:	2103      	movs	r1, #3
 8006d90:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1dba      	adds	r2, r7, #6
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1dba      	adds	r2, r7, #6
 8006daa:	8812      	ldrh	r2, [r2, #0]
 8006dac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2244      	movs	r2, #68	@ 0x44
 8006db8:	2100      	movs	r1, #0
 8006dba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2246      	movs	r2, #70	@ 0x46
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d110      	bne.n	8006dfe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2140      	movs	r1, #64	@ 0x40
 8006de8:	438a      	bics	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2180      	movs	r1, #128	@ 0x80
 8006df8:	01c9      	lsls	r1, r1, #7
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2240      	movs	r2, #64	@ 0x40
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b40      	cmp	r3, #64	@ 0x40
 8006e0a:	d007      	beq.n	8006e1c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2140      	movs	r1, #64	@ 0x40
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	23e0      	movs	r3, #224	@ 0xe0
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d952      	bls.n	8006ece <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_SPI_Transmit+0x11e>
 8006e30:	2316      	movs	r3, #22
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d143      	bne.n	8006ec2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	1c9a      	adds	r2, r3, #2
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e5e:	e030      	b.n	8006ec2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2202      	movs	r2, #2
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d112      	bne.n	8006e94 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e92:	e016      	b.n	8006ec2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e94:	f7fc fae8 	bl	8003468 <HAL_GetTick>
 8006e98:	0002      	movs	r2, r0
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d802      	bhi.n	8006eaa <HAL_SPI_Transmit+0x18e>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	d102      	bne.n	8006eb0 <HAL_SPI_Transmit+0x194>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d108      	bne.n	8006ec2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006eb0:	231f      	movs	r3, #31
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	225d      	movs	r2, #93	@ 0x5d
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	5499      	strb	r1, [r3, r2]
          goto error;
 8006ec0:	e080      	b.n	8006fc4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1c9      	bne.n	8006e60 <HAL_SPI_Transmit+0x144>
 8006ecc:	e053      	b.n	8006f76 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <HAL_SPI_Transmit+0x1c4>
 8006ed6:	2316      	movs	r3, #22
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d145      	bne.n	8006f6c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006f06:	e031      	b.n	8006f6c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d113      	bne.n	8006f3e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	330c      	adds	r3, #12
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f3c:	e016      	b.n	8006f6c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3e:	f7fc fa93 	bl	8003468 <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d802      	bhi.n	8006f54 <HAL_SPI_Transmit+0x238>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	d102      	bne.n	8006f5a <HAL_SPI_Transmit+0x23e>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d108      	bne.n	8006f6c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006f5a:	231f      	movs	r3, #31
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	2203      	movs	r2, #3
 8006f60:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	225d      	movs	r2, #93	@ 0x5d
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]
          goto error;
 8006f6a:	e02b      	b.n	8006fc4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1c8      	bne.n	8006f08 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 fcfb 	bl	8007978 <SPI_EndRxTxTransaction>
 8006f82:	1e03      	subs	r3, r0, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006fb2:	231f      	movs	r3, #31
 8006fb4:	18fb      	adds	r3, r7, r3
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e003      	b.n	8006fc4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	225d      	movs	r2, #93	@ 0x5d
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	225c      	movs	r2, #92	@ 0x5c
 8006fc8:	2100      	movs	r1, #0
 8006fca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006fcc:	231f      	movs	r3, #31
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b008      	add	sp, #32
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b089      	sub	sp, #36	@ 0x24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	1dbb      	adds	r3, r7, #6
 8006fea:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fec:	2117      	movs	r1, #23
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	225d      	movs	r2, #93	@ 0x5d
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d003      	beq.n	8007008 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007000:	187b      	adds	r3, r7, r1
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
    goto error;
 8007006:	e12b      	b.n	8007260 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	2382      	movs	r3, #130	@ 0x82
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	429a      	cmp	r2, r3
 8007012:	d113      	bne.n	800703c <HAL_SPI_Receive+0x60>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10f      	bne.n	800703c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	225d      	movs	r2, #93	@ 0x5d
 8007020:	2104      	movs	r1, #4
 8007022:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007024:	1dbb      	adds	r3, r7, #6
 8007026:	881c      	ldrh	r4, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	0023      	movs	r3, r4
 8007034:	f000 f924 	bl	8007280 <HAL_SPI_TransmitReceive>
 8007038:	0003      	movs	r3, r0
 800703a:	e118      	b.n	800726e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	225c      	movs	r2, #92	@ 0x5c
 8007040:	5c9b      	ldrb	r3, [r3, r2]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_SPI_Receive+0x6e>
 8007046:	2302      	movs	r3, #2
 8007048:	e111      	b.n	800726e <HAL_SPI_Receive+0x292>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	225c      	movs	r2, #92	@ 0x5c
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007052:	f7fc fa09 	bl	8003468 <HAL_GetTick>
 8007056:	0003      	movs	r3, r0
 8007058:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_SPI_Receive+0x8c>
 8007060:	1dbb      	adds	r3, r7, #6
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007068:	2317      	movs	r3, #23
 800706a:	18fb      	adds	r3, r7, r3
 800706c:	2201      	movs	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007070:	e0f6      	b.n	8007260 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	225d      	movs	r2, #93	@ 0x5d
 8007076:	2104      	movs	r1, #4
 8007078:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	1dba      	adds	r2, r7, #6
 800708a:	2144      	movs	r1, #68	@ 0x44
 800708c:	8812      	ldrh	r2, [r2, #0]
 800708e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1dba      	adds	r2, r7, #6
 8007094:	2146      	movs	r1, #70	@ 0x46
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	23e0      	movs	r3, #224	@ 0xe0
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d908      	bls.n	80070d6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	496a      	ldr	r1, [pc, #424]	@ (8007278 <HAL_SPI_Receive+0x29c>)
 80070d0:	400a      	ands	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
 80070d4:	e008      	b.n	80070e8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2180      	movs	r1, #128	@ 0x80
 80070e2:	0149      	lsls	r1, r1, #5
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	2380      	movs	r3, #128	@ 0x80
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d10f      	bne.n	8007114 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2140      	movs	r1, #64	@ 0x40
 8007100:	438a      	bics	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	495b      	ldr	r1, [pc, #364]	@ (800727c <HAL_SPI_Receive+0x2a0>)
 8007110:	400a      	ands	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2240      	movs	r2, #64	@ 0x40
 800711c:	4013      	ands	r3, r2
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d007      	beq.n	8007132 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2140      	movs	r1, #64	@ 0x40
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	23e0      	movs	r3, #224	@ 0xe0
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	429a      	cmp	r2, r3
 800713c:	d900      	bls.n	8007140 <HAL_SPI_Receive+0x164>
 800713e:	e071      	b.n	8007224 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007140:	e035      	b.n	80071ae <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2201      	movs	r2, #1
 800714a:	4013      	ands	r3, r2
 800714c:	2b01      	cmp	r3, #1
 800714e:	d117      	bne.n	8007180 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	001a      	movs	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2246      	movs	r2, #70	@ 0x46
 8007170:	5a9b      	ldrh	r3, [r3, r2]
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b299      	uxth	r1, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2246      	movs	r2, #70	@ 0x46
 800717c:	5299      	strh	r1, [r3, r2]
 800717e:	e016      	b.n	80071ae <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007180:	f7fc f972 	bl	8003468 <HAL_GetTick>
 8007184:	0002      	movs	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d802      	bhi.n	8007196 <HAL_SPI_Receive+0x1ba>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	d102      	bne.n	800719c <HAL_SPI_Receive+0x1c0>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d108      	bne.n	80071ae <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800719c:	2317      	movs	r3, #23
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	2203      	movs	r2, #3
 80071a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	225d      	movs	r2, #93	@ 0x5d
 80071a8:	2101      	movs	r1, #1
 80071aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80071ac:	e058      	b.n	8007260 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2246      	movs	r2, #70	@ 0x46
 80071b2:	5a9b      	ldrh	r3, [r3, r2]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1c3      	bne.n	8007142 <HAL_SPI_Receive+0x166>
 80071ba:	e039      	b.n	8007230 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2201      	movs	r2, #1
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d115      	bne.n	80071f6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d4:	b292      	uxth	r2, r2
 80071d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2246      	movs	r2, #70	@ 0x46
 80071e6:	5a9b      	ldrh	r3, [r3, r2]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b299      	uxth	r1, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2246      	movs	r2, #70	@ 0x46
 80071f2:	5299      	strh	r1, [r3, r2]
 80071f4:	e016      	b.n	8007224 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f6:	f7fc f937 	bl	8003468 <HAL_GetTick>
 80071fa:	0002      	movs	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d802      	bhi.n	800720c <HAL_SPI_Receive+0x230>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	d102      	bne.n	8007212 <HAL_SPI_Receive+0x236>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d108      	bne.n	8007224 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007212:	2317      	movs	r3, #23
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	2203      	movs	r2, #3
 8007218:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	225d      	movs	r2, #93	@ 0x5d
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]
          goto error;
 8007222:	e01d      	b.n	8007260 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2246      	movs	r2, #70	@ 0x46
 8007228:	5a9b      	ldrh	r3, [r3, r2]
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1c5      	bne.n	80071bc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	0018      	movs	r0, r3
 8007238:	f000 fb40 	bl	80078bc <SPI_EndRxTransaction>
 800723c:	1e03      	subs	r3, r0, #0
 800723e:	d002      	beq.n	8007246 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724a:	2b00      	cmp	r3, #0
 800724c:	d004      	beq.n	8007258 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800724e:	2317      	movs	r3, #23
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e003      	b.n	8007260 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	225d      	movs	r2, #93	@ 0x5d
 800725c:	2101      	movs	r1, #1
 800725e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	225c      	movs	r2, #92	@ 0x5c
 8007264:	2100      	movs	r1, #0
 8007266:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007268:	2317      	movs	r3, #23
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	781b      	ldrb	r3, [r3, #0]
}
 800726e:	0018      	movs	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	b007      	add	sp, #28
 8007274:	bd90      	pop	{r4, r7, pc}
 8007276:	46c0      	nop			@ (mov r8, r8)
 8007278:	ffffefff 	.word	0xffffefff
 800727c:	ffffbfff 	.word	0xffffbfff

08007280 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	001a      	movs	r2, r3
 800728e:	1cbb      	adds	r3, r7, #2
 8007290:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007292:	2301      	movs	r3, #1
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007296:	2323      	movs	r3, #35	@ 0x23
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	225c      	movs	r2, #92	@ 0x5c
 80072a2:	5c9b      	ldrb	r3, [r3, r2]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x2c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e1c4      	b.n	8007636 <HAL_SPI_TransmitReceive+0x3b6>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	225c      	movs	r2, #92	@ 0x5c
 80072b0:	2101      	movs	r1, #1
 80072b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072b4:	f7fc f8d8 	bl	8003468 <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072bc:	201b      	movs	r0, #27
 80072be:	183b      	adds	r3, r7, r0
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	215d      	movs	r1, #93	@ 0x5d
 80072c4:	5c52      	ldrb	r2, [r2, r1]
 80072c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072ce:	2312      	movs	r3, #18
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	1cba      	adds	r2, r7, #2
 80072d4:	8812      	ldrh	r2, [r2, #0]
 80072d6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072d8:	183b      	adds	r3, r7, r0
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d011      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x84>
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	2382      	movs	r3, #130	@ 0x82
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d107      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x7a>
 80072f2:	183b      	adds	r3, r7, r0
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d004      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80072fa:	2323      	movs	r3, #35	@ 0x23
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	2202      	movs	r2, #2
 8007300:	701a      	strb	r2, [r3, #0]
    goto error;
 8007302:	e191      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d006      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x98>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x98>
 8007310:	1cbb      	adds	r3, r7, #2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007318:	2323      	movs	r3, #35	@ 0x23
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007320:	e182      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	225d      	movs	r2, #93	@ 0x5d
 8007326:	5c9b      	ldrb	r3, [r3, r2]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b04      	cmp	r3, #4
 800732c:	d003      	beq.n	8007336 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	225d      	movs	r2, #93	@ 0x5d
 8007332:	2105      	movs	r1, #5
 8007334:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1cba      	adds	r2, r7, #2
 8007346:	2146      	movs	r1, #70	@ 0x46
 8007348:	8812      	ldrh	r2, [r2, #0]
 800734a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1cba      	adds	r2, r7, #2
 8007350:	2144      	movs	r1, #68	@ 0x44
 8007352:	8812      	ldrh	r2, [r2, #0]
 8007354:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1cba      	adds	r2, r7, #2
 8007360:	8812      	ldrh	r2, [r2, #0]
 8007362:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1cba      	adds	r2, r7, #2
 8007368:	8812      	ldrh	r2, [r2, #0]
 800736a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	23e0      	movs	r3, #224	@ 0xe0
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	429a      	cmp	r2, r3
 8007382:	d908      	bls.n	8007396 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	49ac      	ldr	r1, [pc, #688]	@ (8007640 <HAL_SPI_TransmitReceive+0x3c0>)
 8007390:	400a      	ands	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	e008      	b.n	80073a8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	0149      	lsls	r1, r1, #5
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2240      	movs	r2, #64	@ 0x40
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d007      	beq.n	80073c6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2140      	movs	r1, #64	@ 0x40
 80073c2:	430a      	orrs	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	23e0      	movs	r3, #224	@ 0xe0
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d800      	bhi.n	80073d4 <HAL_SPI_TransmitReceive+0x154>
 80073d2:	e083      	b.n	80074dc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x168>
 80073dc:	2312      	movs	r3, #18
 80073de:	18fb      	adds	r3, r7, r3
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d000      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x168>
 80073e6:	e06d      	b.n	80074c4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	881a      	ldrh	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	1c9a      	adds	r2, r3, #2
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740c:	e05a      	b.n	80074c4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2202      	movs	r2, #2
 8007416:	4013      	ands	r3, r2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d11b      	bne.n	8007454 <HAL_SPI_TransmitReceive+0x1d4>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x1d4>
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	2b01      	cmp	r3, #1
 800742a:	d113      	bne.n	8007454 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	1c9a      	adds	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2201      	movs	r2, #1
 800745c:	4013      	ands	r3, r2
 800745e:	2b01      	cmp	r3, #1
 8007460:	d11c      	bne.n	800749c <HAL_SPI_TransmitReceive+0x21c>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2246      	movs	r2, #70	@ 0x46
 8007466:	5a9b      	ldrh	r3, [r3, r2]
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d016      	beq.n	800749c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007478:	b292      	uxth	r2, r2
 800747a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2246      	movs	r2, #70	@ 0x46
 800748a:	5a9b      	ldrh	r3, [r3, r2]
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b299      	uxth	r1, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2246      	movs	r2, #70	@ 0x46
 8007496:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007498:	2301      	movs	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800749c:	f7fb ffe4 	bl	8003468 <HAL_GetTick>
 80074a0:	0002      	movs	r2, r0
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d80b      	bhi.n	80074c4 <HAL_SPI_TransmitReceive+0x244>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	3301      	adds	r3, #1
 80074b0:	d008      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80074b2:	2323      	movs	r3, #35	@ 0x23
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	2203      	movs	r2, #3
 80074b8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	225d      	movs	r2, #93	@ 0x5d
 80074be:	2101      	movs	r1, #1
 80074c0:	5499      	strb	r1, [r3, r2]
        goto error;
 80074c2:	e0b1      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d19f      	bne.n	800740e <HAL_SPI_TransmitReceive+0x18e>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2246      	movs	r2, #70	@ 0x46
 80074d2:	5a9b      	ldrh	r3, [r3, r2]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d199      	bne.n	800740e <HAL_SPI_TransmitReceive+0x18e>
 80074da:	e089      	b.n	80075f0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x270>
 80074e4:	2312      	movs	r3, #18
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d000      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x270>
 80074ee:	e074      	b.n	80075da <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007516:	e060      	b.n	80075da <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2202      	movs	r2, #2
 8007520:	4013      	ands	r3, r2
 8007522:	2b02      	cmp	r3, #2
 8007524:	d11c      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x2e0>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d017      	beq.n	8007560 <HAL_SPI_TransmitReceive+0x2e0>
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	2b01      	cmp	r3, #1
 8007534:	d114      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2201      	movs	r2, #1
 8007568:	4013      	ands	r3, r2
 800756a:	2b01      	cmp	r3, #1
 800756c:	d11e      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x32c>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2246      	movs	r2, #70	@ 0x46
 8007572:	5a9b      	ldrh	r3, [r3, r2]
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	001a      	movs	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2246      	movs	r2, #70	@ 0x46
 800759a:	5a9b      	ldrh	r3, [r3, r2]
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b299      	uxth	r1, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2246      	movs	r2, #70	@ 0x46
 80075a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075a8:	2301      	movs	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075ac:	f7fb ff5c 	bl	8003468 <HAL_GetTick>
 80075b0:	0002      	movs	r2, r0
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d802      	bhi.n	80075c2 <HAL_SPI_TransmitReceive+0x342>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	3301      	adds	r3, #1
 80075c0:	d102      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x348>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d108      	bne.n	80075da <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80075c8:	2323      	movs	r3, #35	@ 0x23
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	2203      	movs	r2, #3
 80075ce:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	225d      	movs	r2, #93	@ 0x5d
 80075d4:	2101      	movs	r1, #1
 80075d6:	5499      	strb	r1, [r3, r2]
        goto error;
 80075d8:	e026      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d199      	bne.n	8007518 <HAL_SPI_TransmitReceive+0x298>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2246      	movs	r2, #70	@ 0x46
 80075e8:	5a9b      	ldrh	r3, [r3, r2]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d193      	bne.n	8007518 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f000 f9be 	bl	8007978 <SPI_EndRxTxTransaction>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d006      	beq.n	800760e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007600:	2323      	movs	r3, #35	@ 0x23
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007616:	2323      	movs	r3, #35	@ 0x23
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e003      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	225d      	movs	r2, #93	@ 0x5d
 8007624:	2101      	movs	r1, #1
 8007626:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	225c      	movs	r2, #92	@ 0x5c
 800762c:	2100      	movs	r1, #0
 800762e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007630:	2323      	movs	r3, #35	@ 0x23
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	781b      	ldrb	r3, [r3, #0]
}
 8007636:	0018      	movs	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	b00a      	add	sp, #40	@ 0x28
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	ffffefff 	.word	0xffffefff

08007644 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	225d      	movs	r2, #93	@ 0x5d
 8007650:	5c9b      	ldrb	r3, [r3, r2]
 8007652:	b2db      	uxtb	r3, r3
}
 8007654:	0018      	movs	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	b002      	add	sp, #8
 800765a:	bd80      	pop	{r7, pc}

0800765c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	1dfb      	adds	r3, r7, #7
 800766a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800766c:	f7fb fefc 	bl	8003468 <HAL_GetTick>
 8007670:	0002      	movs	r2, r0
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	18d3      	adds	r3, r2, r3
 800767a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800767c:	f7fb fef4 	bl	8003468 <HAL_GetTick>
 8007680:	0003      	movs	r3, r0
 8007682:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007684:	4b3a      	ldr	r3, [pc, #232]	@ (8007770 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	015b      	lsls	r3, r3, #5
 800768a:	0d1b      	lsrs	r3, r3, #20
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	4353      	muls	r3, r2
 8007690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007692:	e058      	b.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	d055      	beq.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800769a:	f7fb fee5 	bl	8003468 <HAL_GetTick>
 800769e:	0002      	movs	r2, r0
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d902      	bls.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d142      	bne.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	21e0      	movs	r1, #224	@ 0xe0
 80076bc:	438a      	bics	r2, r1
 80076be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	2382      	movs	r3, #130	@ 0x82
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d113      	bne.n	80076f4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	2380      	movs	r3, #128	@ 0x80
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d005      	beq.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d107      	bne.n	80076f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2140      	movs	r1, #64	@ 0x40
 80076f0:	438a      	bics	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	019b      	lsls	r3, r3, #6
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d110      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	491a      	ldr	r1, [pc, #104]	@ (8007774 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800770c:	400a      	ands	r2, r1
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2180      	movs	r1, #128	@ 0x80
 800771c:	0189      	lsls	r1, r1, #6
 800771e:	430a      	orrs	r2, r1
 8007720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	225d      	movs	r2, #93	@ 0x5d
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	225c      	movs	r2, #92	@ 0x5c
 800772e:	2100      	movs	r1, #0
 8007730:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e017      	b.n	8007766 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	3b01      	subs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	425a      	negs	r2, r3
 8007756:	4153      	adcs	r3, r2
 8007758:	b2db      	uxtb	r3, r3
 800775a:	001a      	movs	r2, r3
 800775c:	1dfb      	adds	r3, r7, #7
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d197      	bne.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b008      	add	sp, #32
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			@ (mov r8, r8)
 8007770:	20000018 	.word	0x20000018
 8007774:	ffffdfff 	.word	0xffffdfff

08007778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007786:	2317      	movs	r3, #23
 8007788:	18fb      	adds	r3, r7, r3
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800778e:	f7fb fe6b 	bl	8003468 <HAL_GetTick>
 8007792:	0002      	movs	r2, r0
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	18d3      	adds	r3, r2, r3
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800779e:	f7fb fe63 	bl	8003468 <HAL_GetTick>
 80077a2:	0003      	movs	r3, r0
 80077a4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077ae:	4b41      	ldr	r3, [pc, #260]	@ (80078b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	0013      	movs	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	00da      	lsls	r2, r3, #3
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	0d1b      	lsrs	r3, r3, #20
 80077be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c0:	4353      	muls	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077c4:	e068      	b.n	8007898 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	23c0      	movs	r3, #192	@ 0xc0
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d10a      	bne.n	80077e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d107      	bne.n	80077e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	2117      	movs	r1, #23
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077e2:	187b      	adds	r3, r7, r1
 80077e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	d055      	beq.n	8007898 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077ec:	f7fb fe3c 	bl	8003468 <HAL_GetTick>
 80077f0:	0002      	movs	r2, r0
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d902      	bls.n	8007802 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d142      	bne.n	8007888 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	21e0      	movs	r1, #224	@ 0xe0
 800780e:	438a      	bics	r2, r1
 8007810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	2382      	movs	r3, #130	@ 0x82
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	429a      	cmp	r2, r3
 800781c:	d113      	bne.n	8007846 <SPI_WaitFifoStateUntilTimeout+0xce>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	2380      	movs	r3, #128	@ 0x80
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	429a      	cmp	r2, r3
 8007828:	d005      	beq.n	8007836 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	2380      	movs	r3, #128	@ 0x80
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	429a      	cmp	r2, r3
 8007834:	d107      	bne.n	8007846 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2140      	movs	r1, #64	@ 0x40
 8007842:	438a      	bics	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800784a:	2380      	movs	r3, #128	@ 0x80
 800784c:	019b      	lsls	r3, r3, #6
 800784e:	429a      	cmp	r2, r3
 8007850:	d110      	bne.n	8007874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4916      	ldr	r1, [pc, #88]	@ (80078b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800785e:	400a      	ands	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2180      	movs	r1, #128	@ 0x80
 800786e:	0189      	lsls	r1, r1, #6
 8007870:	430a      	orrs	r2, r1
 8007872:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	225d      	movs	r2, #93	@ 0x5d
 8007878:	2101      	movs	r1, #1
 800787a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	225c      	movs	r2, #92	@ 0x5c
 8007880:	2100      	movs	r1, #0
 8007882:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e010      	b.n	80078aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	3b01      	subs	r3, #1
 8007896:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d18e      	bne.n	80077c6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	0018      	movs	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	b00a      	add	sp, #40	@ 0x28
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	46c0      	nop			@ (mov r8, r8)
 80078b4:	20000018 	.word	0x20000018
 80078b8:	ffffdfff 	.word	0xffffdfff

080078bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	2382      	movs	r3, #130	@ 0x82
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d113      	bne.n	80078fc <SPI_EndRxTransaction+0x40>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	2380      	movs	r3, #128	@ 0x80
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	429a      	cmp	r2, r3
 80078de:	d005      	beq.n	80078ec <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	2380      	movs	r3, #128	@ 0x80
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d107      	bne.n	80078fc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2140      	movs	r1, #64	@ 0x40
 80078f8:	438a      	bics	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	0013      	movs	r3, r2
 8007906:	2200      	movs	r2, #0
 8007908:	2180      	movs	r1, #128	@ 0x80
 800790a:	f7ff fea7 	bl	800765c <SPI_WaitFlagStateUntilTimeout>
 800790e:	1e03      	subs	r3, r0, #0
 8007910:	d007      	beq.n	8007922 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007916:	2220      	movs	r2, #32
 8007918:	431a      	orrs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e026      	b.n	8007970 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	2382      	movs	r3, #130	@ 0x82
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	429a      	cmp	r2, r3
 800792c:	d11f      	bne.n	800796e <SPI_EndRxTransaction+0xb2>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	2380      	movs	r3, #128	@ 0x80
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	429a      	cmp	r2, r3
 8007938:	d005      	beq.n	8007946 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	2380      	movs	r3, #128	@ 0x80
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	429a      	cmp	r2, r3
 8007944:	d113      	bne.n	800796e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	23c0      	movs	r3, #192	@ 0xc0
 800794a:	00d9      	lsls	r1, r3, #3
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	0013      	movs	r3, r2
 8007954:	2200      	movs	r2, #0
 8007956:	f7ff ff0f 	bl	8007778 <SPI_WaitFifoStateUntilTimeout>
 800795a:	1e03      	subs	r3, r0, #0
 800795c:	d007      	beq.n	800796e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007962:	2220      	movs	r2, #32
 8007964:	431a      	orrs	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e000      	b.n	8007970 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	0018      	movs	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	b004      	add	sp, #16
 8007976:	bd80      	pop	{r7, pc}

08007978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af02      	add	r7, sp, #8
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	23c0      	movs	r3, #192	@ 0xc0
 8007988:	0159      	lsls	r1, r3, #5
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	0013      	movs	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	f7ff fef0 	bl	8007778 <SPI_WaitFifoStateUntilTimeout>
 8007998:	1e03      	subs	r3, r0, #0
 800799a:	d007      	beq.n	80079ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079a0:	2220      	movs	r2, #32
 80079a2:	431a      	orrs	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e027      	b.n	80079fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	0013      	movs	r3, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	@ 0x80
 80079ba:	f7ff fe4f 	bl	800765c <SPI_WaitFlagStateUntilTimeout>
 80079be:	1e03      	subs	r3, r0, #0
 80079c0:	d007      	beq.n	80079d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c6:	2220      	movs	r2, #32
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e014      	b.n	80079fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	23c0      	movs	r3, #192	@ 0xc0
 80079d6:	00d9      	lsls	r1, r3, #3
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	0013      	movs	r3, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7ff fec9 	bl	8007778 <SPI_WaitFifoStateUntilTimeout>
 80079e6:	1e03      	subs	r3, r0, #0
 80079e8:	d007      	beq.n	80079fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ee:	2220      	movs	r2, #32
 80079f0:	431a      	orrs	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e000      	b.n	80079fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b004      	add	sp, #16
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e042      	b.n	8007a9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	223d      	movs	r2, #61	@ 0x3d
 8007a1a:	5c9b      	ldrb	r3, [r3, r2]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d107      	bne.n	8007a32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	223c      	movs	r2, #60	@ 0x3c
 8007a26:	2100      	movs	r1, #0
 8007a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f7fb f899 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	223d      	movs	r2, #61	@ 0x3d
 8007a36:	2102      	movs	r1, #2
 8007a38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3304      	adds	r3, #4
 8007a42:	0019      	movs	r1, r3
 8007a44:	0010      	movs	r0, r2
 8007a46:	f000 fa17 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2246      	movs	r2, #70	@ 0x46
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	223e      	movs	r2, #62	@ 0x3e
 8007a56:	2101      	movs	r1, #1
 8007a58:	5499      	strb	r1, [r3, r2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	223f      	movs	r2, #63	@ 0x3f
 8007a5e:	2101      	movs	r1, #1
 8007a60:	5499      	strb	r1, [r3, r2]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2240      	movs	r2, #64	@ 0x40
 8007a66:	2101      	movs	r1, #1
 8007a68:	5499      	strb	r1, [r3, r2]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2241      	movs	r2, #65	@ 0x41
 8007a6e:	2101      	movs	r1, #1
 8007a70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2242      	movs	r2, #66	@ 0x42
 8007a76:	2101      	movs	r1, #1
 8007a78:	5499      	strb	r1, [r3, r2]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2243      	movs	r2, #67	@ 0x43
 8007a7e:	2101      	movs	r1, #1
 8007a80:	5499      	strb	r1, [r3, r2]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2244      	movs	r2, #68	@ 0x44
 8007a86:	2101      	movs	r1, #1
 8007a88:	5499      	strb	r1, [r3, r2]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2245      	movs	r2, #69	@ 0x45
 8007a8e:	2101      	movs	r1, #1
 8007a90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	223d      	movs	r2, #61	@ 0x3d
 8007a96:	2101      	movs	r1, #1
 8007a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b002      	add	sp, #8
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	d021      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	4013      	ands	r3, r2
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	4252      	negs	r2, r2
 8007ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f9ac 	bl	8007e48 <HAL_TIM_IC_CaptureCallback>
 8007af0:	e007      	b.n	8007b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 f99f 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	0018      	movs	r0, r3
 8007afe:	f000 f9ab 	bl	8007e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d022      	beq.n	8007b56 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2204      	movs	r2, #4
 8007b14:	4013      	ands	r3, r2
 8007b16:	d01e      	beq.n	8007b56 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	4252      	negs	r2, r2
 8007b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	23c0      	movs	r3, #192	@ 0xc0
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4013      	ands	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 f985 	bl	8007e48 <HAL_TIM_IC_CaptureCallback>
 8007b3e:	e007      	b.n	8007b50 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f000 f978 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f000 f984 	bl	8007e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	d021      	beq.n	8007ba2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2208      	movs	r2, #8
 8007b62:	4013      	ands	r3, r2
 8007b64:	d01d      	beq.n	8007ba2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2209      	movs	r2, #9
 8007b6c:	4252      	negs	r2, r2
 8007b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f000 f95f 	bl	8007e48 <HAL_TIM_IC_CaptureCallback>
 8007b8a:	e007      	b.n	8007b9c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f000 f952 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 f95e 	bl	8007e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2210      	movs	r2, #16
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2210      	movs	r2, #16
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d01e      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2211      	movs	r2, #17
 8007bb8:	4252      	negs	r2, r2
 8007bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	23c0      	movs	r3, #192	@ 0xc0
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f000 f938 	bl	8007e48 <HAL_TIM_IC_CaptureCallback>
 8007bd8:	e007      	b.n	8007bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 f92b 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 f937 	bl	8007e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d00c      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d008      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2202      	movs	r2, #2
 8007c06:	4252      	negs	r2, r2
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f000 f90b 	bl	8007e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2280      	movs	r2, #128	@ 0x80
 8007c16:	4013      	ands	r3, r2
 8007c18:	d00c      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2280      	movs	r2, #128	@ 0x80
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d008      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2281      	movs	r2, #129	@ 0x81
 8007c28:	4252      	negs	r2, r2
 8007c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 fab0 	bl	8008194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2240      	movs	r2, #64	@ 0x40
 8007c38:	4013      	ands	r3, r2
 8007c3a:	d00c      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2240      	movs	r2, #64	@ 0x40
 8007c40:	4013      	ands	r3, r2
 8007c42:	d008      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2241      	movs	r2, #65	@ 0x41
 8007c4a:	4252      	negs	r2, r2
 8007c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 f909 	bl	8007e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d00c      	beq.n	8007c78 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	4013      	ands	r3, r2
 8007c64:	d008      	beq.n	8007c78 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2221      	movs	r2, #33	@ 0x21
 8007c6c:	4252      	negs	r2, r2
 8007c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 fa86 	bl	8008184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	230f      	movs	r3, #15
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	223c      	movs	r2, #60	@ 0x3c
 8007c96:	5c9b      	ldrb	r3, [r3, r2]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_TIM_ConfigClockSource+0x20>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0bc      	b.n	8007e1a <HAL_TIM_ConfigClockSource+0x19a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	223c      	movs	r2, #60	@ 0x3c
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	223d      	movs	r2, #61	@ 0x3d
 8007cac:	2102      	movs	r1, #2
 8007cae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2277      	movs	r2, #119	@ 0x77
 8007cbc:	4393      	bics	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a58      	ldr	r2, [pc, #352]	@ (8007e24 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2280      	movs	r2, #128	@ 0x80
 8007cd6:	0192      	lsls	r2, r2, #6
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d040      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0xde>
 8007cdc:	2280      	movs	r2, #128	@ 0x80
 8007cde:	0192      	lsls	r2, r2, #6
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d900      	bls.n	8007ce6 <HAL_TIM_ConfigClockSource+0x66>
 8007ce4:	e088      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007ce6:	2280      	movs	r2, #128	@ 0x80
 8007ce8:	0152      	lsls	r2, r2, #5
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d100      	bne.n	8007cf0 <HAL_TIM_ConfigClockSource+0x70>
 8007cee:	e088      	b.n	8007e02 <HAL_TIM_ConfigClockSource+0x182>
 8007cf0:	2280      	movs	r2, #128	@ 0x80
 8007cf2:	0152      	lsls	r2, r2, #5
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d900      	bls.n	8007cfa <HAL_TIM_ConfigClockSource+0x7a>
 8007cf8:	e07e      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007cfa:	2b70      	cmp	r3, #112	@ 0x70
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_ConfigClockSource+0xb0>
 8007cfe:	d900      	bls.n	8007d02 <HAL_TIM_ConfigClockSource+0x82>
 8007d00:	e07a      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d02:	2b60      	cmp	r3, #96	@ 0x60
 8007d04:	d04f      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0x126>
 8007d06:	d900      	bls.n	8007d0a <HAL_TIM_ConfigClockSource+0x8a>
 8007d08:	e076      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d0a:	2b50      	cmp	r3, #80	@ 0x50
 8007d0c:	d03b      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x106>
 8007d0e:	d900      	bls.n	8007d12 <HAL_TIM_ConfigClockSource+0x92>
 8007d10:	e072      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d12:	2b40      	cmp	r3, #64	@ 0x40
 8007d14:	d057      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0x146>
 8007d16:	d900      	bls.n	8007d1a <HAL_TIM_ConfigClockSource+0x9a>
 8007d18:	e06e      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d1a:	2b30      	cmp	r3, #48	@ 0x30
 8007d1c:	d063      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x166>
 8007d1e:	d86b      	bhi.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d060      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x166>
 8007d24:	d868      	bhi.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05d      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x166>
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d05b      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x166>
 8007d2e:	e063      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d40:	f000 f9a2 	bl	8008088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2277      	movs	r2, #119	@ 0x77
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]
      break;
 8007d5c:	e052      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d6e:	f000 f98b 	bl	8008088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2180      	movs	r1, #128	@ 0x80
 8007d7e:	01c9      	lsls	r1, r1, #7
 8007d80:	430a      	orrs	r2, r1
 8007d82:	609a      	str	r2, [r3, #8]
      break;
 8007d84:	e03e      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d92:	001a      	movs	r2, r3
 8007d94:	f000 f8fe 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2150      	movs	r1, #80	@ 0x50
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 f958 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007da4:	e02e      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007db2:	001a      	movs	r2, r3
 8007db4:	f000 f91c 	bl	8007ff0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2160      	movs	r1, #96	@ 0x60
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f000 f948 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007dc4:	e01e      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd2:	001a      	movs	r2, r3
 8007dd4:	f000 f8de 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2140      	movs	r1, #64	@ 0x40
 8007dde:	0018      	movs	r0, r3
 8007de0:	f000 f938 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007de4:	e00e      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	0019      	movs	r1, r3
 8007df0:	0010      	movs	r0, r2
 8007df2:	f000 f92f 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007df6:	e005      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007df8:	230f      	movs	r3, #15
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
      break;
 8007e00:	e000      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007e02:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	223d      	movs	r2, #61	@ 0x3d
 8007e08:	2101      	movs	r1, #1
 8007e0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	223c      	movs	r2, #60	@ 0x3c
 8007e10:	2100      	movs	r1, #0
 8007e12:	5499      	strb	r1, [r3, r2]

  return status;
 8007e14:	230f      	movs	r3, #15
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	781b      	ldrb	r3, [r3, #0]
}
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	b004      	add	sp, #16
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	46c0      	nop			@ (mov r8, r8)
 8007e24:	ffff00ff 	.word	0xffff00ff

08007e28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e30:	46c0      	nop			@ (mov r8, r8)
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e40:	46c0      	nop			@ (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e50:	46c0      	nop			@ (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e60:	46c0      	nop			@ (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b002      	add	sp, #8
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e70:	46c0      	nop			@ (mov r8, r8)
 8007e72:	46bd      	mov	sp, r7
 8007e74:	b002      	add	sp, #8
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8007f78 <TIM_Base_SetConfig+0x100>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d008      	beq.n	8007ea2 <TIM_Base_SetConfig+0x2a>
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	2380      	movs	r3, #128	@ 0x80
 8007e94:	05db      	lsls	r3, r3, #23
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d003      	beq.n	8007ea2 <TIM_Base_SetConfig+0x2a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a37      	ldr	r2, [pc, #220]	@ (8007f7c <TIM_Base_SetConfig+0x104>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d108      	bne.n	8007eb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2270      	movs	r2, #112	@ 0x70
 8007ea6:	4393      	bics	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a30      	ldr	r2, [pc, #192]	@ (8007f78 <TIM_Base_SetConfig+0x100>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d018      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	2380      	movs	r3, #128	@ 0x80
 8007ec0:	05db      	lsls	r3, r3, #23
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d013      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f7c <TIM_Base_SetConfig+0x104>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00f      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8007f80 <TIM_Base_SetConfig+0x108>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00b      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8007f84 <TIM_Base_SetConfig+0x10c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d007      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a29      	ldr	r2, [pc, #164]	@ (8007f88 <TIM_Base_SetConfig+0x110>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_Base_SetConfig+0x76>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	@ (8007f8c <TIM_Base_SetConfig+0x114>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d108      	bne.n	8007f00 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a27      	ldr	r2, [pc, #156]	@ (8007f90 <TIM_Base_SetConfig+0x118>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2280      	movs	r2, #128	@ 0x80
 8007f04:	4393      	bics	r3, r2
 8007f06:	001a      	movs	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a13      	ldr	r2, [pc, #76]	@ (8007f78 <TIM_Base_SetConfig+0x100>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_Base_SetConfig+0xce>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a14      	ldr	r2, [pc, #80]	@ (8007f84 <TIM_Base_SetConfig+0x10c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_Base_SetConfig+0xce>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a13      	ldr	r2, [pc, #76]	@ (8007f88 <TIM_Base_SetConfig+0x110>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_Base_SetConfig+0xce>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a12      	ldr	r2, [pc, #72]	@ (8007f8c <TIM_Base_SetConfig+0x114>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d103      	bne.n	8007f4e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2201      	movs	r2, #1
 8007f66:	4393      	bics	r3, r2
 8007f68:	001a      	movs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]
  }
}
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b004      	add	sp, #16
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40002000 	.word	0x40002000
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800
 8007f90:	fffffcff 	.word	0xfffffcff

08007f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4393      	bics	r3, r2
 8007fae:	001a      	movs	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	22f0      	movs	r2, #240	@ 0xf0
 8007fbe:	4393      	bics	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4393      	bics	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	621a      	str	r2, [r3, #32]
}
 8007fe8:	46c0      	nop			@ (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b006      	add	sp, #24
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	2210      	movs	r2, #16
 8008008:	4393      	bics	r3, r2
 800800a:	001a      	movs	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4a0d      	ldr	r2, [pc, #52]	@ (8008050 <TIM_TI2_ConfigInputStage+0x60>)
 800801a:	4013      	ands	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	22a0      	movs	r2, #160	@ 0xa0
 800802c:	4393      	bics	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b006      	add	sp, #24
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	ffff0fff 	.word	0xffff0fff

08008054 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2270      	movs	r2, #112	@ 0x70
 8008068:	4393      	bics	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	2207      	movs	r2, #7
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	609a      	str	r2, [r3, #8]
}
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	46bd      	mov	sp, r7
 8008082:	b004      	add	sp, #16
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4a09      	ldr	r2, [pc, #36]	@ (80080c4 <TIM_ETR_SetConfig+0x3c>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	021a      	lsls	r2, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	609a      	str	r2, [r3, #8]
}
 80080bc:	46c0      	nop			@ (mov r8, r8)
 80080be:	46bd      	mov	sp, r7
 80080c0:	b006      	add	sp, #24
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	ffff00ff 	.word	0xffff00ff

080080c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	223c      	movs	r2, #60	@ 0x3c
 80080d6:	5c9b      	ldrb	r3, [r3, r2]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080dc:	2302      	movs	r3, #2
 80080de:	e047      	b.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	223c      	movs	r2, #60	@ 0x3c
 80080e4:	2101      	movs	r1, #1
 80080e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	223d      	movs	r2, #61	@ 0x3d
 80080ec:	2102      	movs	r1, #2
 80080ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2270      	movs	r2, #112	@ 0x70
 8008104:	4393      	bics	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00f      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	2380      	movs	r3, #128	@ 0x80
 800812a:	05db      	lsls	r3, r3, #23
 800812c:	429a      	cmp	r2, r3
 800812e:	d009      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a11      	ldr	r2, [pc, #68]	@ (800817c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a10      	ldr	r2, [pc, #64]	@ (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10c      	bne.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2280      	movs	r2, #128	@ 0x80
 8008148:	4393      	bics	r3, r2
 800814a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	223d      	movs	r2, #61	@ 0x3d
 8008162:	2101      	movs	r1, #1
 8008164:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	223c      	movs	r2, #60	@ 0x3c
 800816a:	2100      	movs	r1, #0
 800816c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	b004      	add	sp, #16
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40000400 	.word	0x40000400
 8008180:	40014000 	.word	0x40014000

08008184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800818c:	46c0      	nop			@ (mov r8, r8)
 800818e:	46bd      	mov	sp, r7
 8008190:	b002      	add	sp, #8
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800819c:	46c0      	nop			@ (mov r8, r8)
 800819e:	46bd      	mov	sp, r7
 80081a0:	b002      	add	sp, #8
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e053      	b.n	800825e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d116      	bne.n	80081ec <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2278      	movs	r2, #120	@ 0x78
 80081c2:	2100      	movs	r1, #0
 80081c4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f000 fb7b 	bl	80088c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	22b0      	movs	r2, #176	@ 0xb0
 80081d2:	589b      	ldr	r3, [r3, r2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d103      	bne.n	80081e0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	21b0      	movs	r1, #176	@ 0xb0
 80081dc:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <HAL_UART_Init+0xc4>)
 80081de:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	22b0      	movs	r2, #176	@ 0xb0
 80081e4:	589b      	ldr	r3, [r3, r2]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	0010      	movs	r0, r2
 80081ea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2224      	movs	r2, #36	@ 0x24
 80081f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2101      	movs	r1, #1
 80081fe:	438a      	bics	r2, r1
 8008200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 fd25 	bl	8008c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	0018      	movs	r0, r3
 8008216:	f000 fb99 	bl	800894c <UART_SetConfig>
 800821a:	0003      	movs	r3, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e01c      	b.n	800825e <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	490f      	ldr	r1, [pc, #60]	@ (800826c <HAL_UART_Init+0xc8>)
 8008230:	400a      	ands	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	212a      	movs	r1, #42	@ 0x2a
 8008240:	438a      	bics	r2, r1
 8008242:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2101      	movs	r1, #1
 8008250:	430a      	orrs	r2, r1
 8008252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	0018      	movs	r0, r3
 8008258:	f000 fdb4 	bl	8008dc4 <UART_CheckIdleState>
 800825c:	0003      	movs	r3, r0
}
 800825e:	0018      	movs	r0, r3
 8008260:	46bd      	mov	sp, r7
 8008262:	b002      	add	sp, #8
 8008264:	bd80      	pop	{r7, pc}
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	08002bb1 	.word	0x08002bb1
 800826c:	ffffb7ff 	.word	0xffffb7ff

08008270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b0ab      	sub	sp, #172	@ 0xac
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	22a4      	movs	r2, #164	@ 0xa4
 8008280:	18b9      	adds	r1, r7, r2
 8008282:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	20a0      	movs	r0, #160	@ 0xa0
 800828c:	1839      	adds	r1, r7, r0
 800828e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	219c      	movs	r1, #156	@ 0x9c
 8008298:	1879      	adds	r1, r7, r1
 800829a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800829c:	0011      	movs	r1, r2
 800829e:	18bb      	adds	r3, r7, r2
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a9c      	ldr	r2, [pc, #624]	@ (8008514 <HAL_UART_IRQHandler+0x2a4>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	2298      	movs	r2, #152	@ 0x98
 80082a8:	18bc      	adds	r4, r7, r2
 80082aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80082ac:	18bb      	adds	r3, r7, r2
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d114      	bne.n	80082de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80082b4:	187b      	adds	r3, r7, r1
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2220      	movs	r2, #32
 80082ba:	4013      	ands	r3, r2
 80082bc:	d00f      	beq.n	80082de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082be:	183b      	adds	r3, r7, r0
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2220      	movs	r2, #32
 80082c4:	4013      	ands	r3, r2
 80082c6:	d00a      	beq.n	80082de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d100      	bne.n	80082d2 <HAL_UART_IRQHandler+0x62>
 80082d0:	e2a8      	b.n	8008824 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	0010      	movs	r0, r2
 80082da:	4798      	blx	r3
      }
      return;
 80082dc:	e2a2      	b.n	8008824 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082de:	2398      	movs	r3, #152	@ 0x98
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d100      	bne.n	80082ea <HAL_UART_IRQHandler+0x7a>
 80082e8:	e11a      	b.n	8008520 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80082ea:	239c      	movs	r3, #156	@ 0x9c
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2201      	movs	r2, #1
 80082f2:	4013      	ands	r3, r2
 80082f4:	d106      	bne.n	8008304 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80082f6:	23a0      	movs	r3, #160	@ 0xa0
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a86      	ldr	r2, [pc, #536]	@ (8008518 <HAL_UART_IRQHandler+0x2a8>)
 80082fe:	4013      	ands	r3, r2
 8008300:	d100      	bne.n	8008304 <HAL_UART_IRQHandler+0x94>
 8008302:	e10d      	b.n	8008520 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008304:	23a4      	movs	r3, #164	@ 0xa4
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2201      	movs	r2, #1
 800830c:	4013      	ands	r3, r2
 800830e:	d012      	beq.n	8008336 <HAL_UART_IRQHandler+0xc6>
 8008310:	23a0      	movs	r3, #160	@ 0xa0
 8008312:	18fb      	adds	r3, r7, r3
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	2380      	movs	r3, #128	@ 0x80
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4013      	ands	r3, r2
 800831c:	d00b      	beq.n	8008336 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2201      	movs	r2, #1
 8008324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2284      	movs	r2, #132	@ 0x84
 800832a:	589b      	ldr	r3, [r3, r2]
 800832c:	2201      	movs	r2, #1
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2184      	movs	r1, #132	@ 0x84
 8008334:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008336:	23a4      	movs	r3, #164	@ 0xa4
 8008338:	18fb      	adds	r3, r7, r3
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2202      	movs	r2, #2
 800833e:	4013      	ands	r3, r2
 8008340:	d011      	beq.n	8008366 <HAL_UART_IRQHandler+0xf6>
 8008342:	239c      	movs	r3, #156	@ 0x9c
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2201      	movs	r2, #1
 800834a:	4013      	ands	r3, r2
 800834c:	d00b      	beq.n	8008366 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2202      	movs	r2, #2
 8008354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2284      	movs	r2, #132	@ 0x84
 800835a:	589b      	ldr	r3, [r3, r2]
 800835c:	2204      	movs	r2, #4
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2184      	movs	r1, #132	@ 0x84
 8008364:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008366:	23a4      	movs	r3, #164	@ 0xa4
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2204      	movs	r2, #4
 800836e:	4013      	ands	r3, r2
 8008370:	d011      	beq.n	8008396 <HAL_UART_IRQHandler+0x126>
 8008372:	239c      	movs	r3, #156	@ 0x9c
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2201      	movs	r2, #1
 800837a:	4013      	ands	r3, r2
 800837c:	d00b      	beq.n	8008396 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2204      	movs	r2, #4
 8008384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2284      	movs	r2, #132	@ 0x84
 800838a:	589b      	ldr	r3, [r3, r2]
 800838c:	2202      	movs	r2, #2
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2184      	movs	r1, #132	@ 0x84
 8008394:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008396:	23a4      	movs	r3, #164	@ 0xa4
 8008398:	18fb      	adds	r3, r7, r3
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2208      	movs	r2, #8
 800839e:	4013      	ands	r3, r2
 80083a0:	d017      	beq.n	80083d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083a2:	23a0      	movs	r3, #160	@ 0xa0
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2220      	movs	r2, #32
 80083aa:	4013      	ands	r3, r2
 80083ac:	d105      	bne.n	80083ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083ae:	239c      	movs	r3, #156	@ 0x9c
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083b8:	d00b      	beq.n	80083d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2208      	movs	r2, #8
 80083c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2284      	movs	r2, #132	@ 0x84
 80083c6:	589b      	ldr	r3, [r3, r2]
 80083c8:	2208      	movs	r2, #8
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2184      	movs	r1, #132	@ 0x84
 80083d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083d2:	23a4      	movs	r3, #164	@ 0xa4
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	2380      	movs	r3, #128	@ 0x80
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	4013      	ands	r3, r2
 80083de:	d013      	beq.n	8008408 <HAL_UART_IRQHandler+0x198>
 80083e0:	23a0      	movs	r3, #160	@ 0xa0
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	2380      	movs	r3, #128	@ 0x80
 80083e8:	04db      	lsls	r3, r3, #19
 80083ea:	4013      	ands	r3, r2
 80083ec:	d00c      	beq.n	8008408 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2280      	movs	r2, #128	@ 0x80
 80083f4:	0112      	lsls	r2, r2, #4
 80083f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2284      	movs	r2, #132	@ 0x84
 80083fc:	589b      	ldr	r3, [r3, r2]
 80083fe:	2220      	movs	r2, #32
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2184      	movs	r1, #132	@ 0x84
 8008406:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2284      	movs	r2, #132	@ 0x84
 800840c:	589b      	ldr	r3, [r3, r2]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d100      	bne.n	8008414 <HAL_UART_IRQHandler+0x1a4>
 8008412:	e209      	b.n	8008828 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008414:	23a4      	movs	r3, #164	@ 0xa4
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2220      	movs	r2, #32
 800841c:	4013      	ands	r3, r2
 800841e:	d00e      	beq.n	800843e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008420:	23a0      	movs	r3, #160	@ 0xa0
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2220      	movs	r2, #32
 8008428:	4013      	ands	r3, r2
 800842a:	d008      	beq.n	800843e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	0010      	movs	r0, r2
 800843c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2284      	movs	r2, #132	@ 0x84
 8008442:	589b      	ldr	r3, [r3, r2]
 8008444:	2194      	movs	r1, #148	@ 0x94
 8008446:	187a      	adds	r2, r7, r1
 8008448:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2240      	movs	r2, #64	@ 0x40
 8008452:	4013      	ands	r3, r2
 8008454:	2b40      	cmp	r3, #64	@ 0x40
 8008456:	d004      	beq.n	8008462 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008458:	187b      	adds	r3, r7, r1
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2228      	movs	r2, #40	@ 0x28
 800845e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008460:	d04b      	beq.n	80084fa <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	0018      	movs	r0, r3
 8008466:	f000 fe89 	bl	800917c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2240      	movs	r2, #64	@ 0x40
 8008472:	4013      	ands	r3, r2
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d139      	bne.n	80084ec <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008478:	f3ef 8310 	mrs	r3, PRIMASK
 800847c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800847e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008480:	2090      	movs	r0, #144	@ 0x90
 8008482:	183a      	adds	r2, r7, r0
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	2301      	movs	r3, #1
 8008488:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800848c:	f383 8810 	msr	PRIMASK, r3
}
 8008490:	46c0      	nop			@ (mov r8, r8)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2140      	movs	r1, #64	@ 0x40
 800849e:	438a      	bics	r2, r1
 80084a0:	609a      	str	r2, [r3, #8]
 80084a2:	183b      	adds	r3, r7, r0
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084aa:	f383 8810 	msr	PRIMASK, r3
}
 80084ae:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d012      	beq.n	80084de <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084bc:	4a17      	ldr	r2, [pc, #92]	@ (800851c <HAL_UART_IRQHandler+0x2ac>)
 80084be:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fb fc41 	bl	8003d4c <HAL_DMA_Abort_IT>
 80084ca:	1e03      	subs	r3, r0, #0
 80084cc:	d020      	beq.n	8008510 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d8:	0018      	movs	r0, r3
 80084da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e018      	b.n	8008510 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2298      	movs	r2, #152	@ 0x98
 80084e2:	589b      	ldr	r3, [r3, r2]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	0010      	movs	r0, r2
 80084e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ea:	e011      	b.n	8008510 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2298      	movs	r2, #152	@ 0x98
 80084f0:	589b      	ldr	r3, [r3, r2]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	0010      	movs	r0, r2
 80084f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f8:	e00a      	b.n	8008510 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2298      	movs	r2, #152	@ 0x98
 80084fe:	589b      	ldr	r3, [r3, r2]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	0010      	movs	r0, r2
 8008504:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2284      	movs	r2, #132	@ 0x84
 800850a:	2100      	movs	r1, #0
 800850c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800850e:	e18b      	b.n	8008828 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008510:	46c0      	nop			@ (mov r8, r8)
    return;
 8008512:	e189      	b.n	8008828 <HAL_UART_IRQHandler+0x5b8>
 8008514:	0000080f 	.word	0x0000080f
 8008518:	04000120 	.word	0x04000120
 800851c:	08009445 	.word	0x08009445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008524:	2b01      	cmp	r3, #1
 8008526:	d000      	beq.n	800852a <HAL_UART_IRQHandler+0x2ba>
 8008528:	e13b      	b.n	80087a2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800852a:	23a4      	movs	r3, #164	@ 0xa4
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2210      	movs	r2, #16
 8008532:	4013      	ands	r3, r2
 8008534:	d100      	bne.n	8008538 <HAL_UART_IRQHandler+0x2c8>
 8008536:	e134      	b.n	80087a2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008538:	23a0      	movs	r3, #160	@ 0xa0
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2210      	movs	r2, #16
 8008540:	4013      	ands	r3, r2
 8008542:	d100      	bne.n	8008546 <HAL_UART_IRQHandler+0x2d6>
 8008544:	e12d      	b.n	80087a2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2210      	movs	r2, #16
 800854c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2240      	movs	r2, #64	@ 0x40
 8008556:	4013      	ands	r3, r2
 8008558:	2b40      	cmp	r3, #64	@ 0x40
 800855a:	d000      	beq.n	800855e <HAL_UART_IRQHandler+0x2ee>
 800855c:	e0a0      	b.n	80086a0 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	217e      	movs	r1, #126	@ 0x7e
 8008568:	187b      	adds	r3, r7, r1
 800856a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800856c:	187b      	adds	r3, r7, r1
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d100      	bne.n	8008576 <HAL_UART_IRQHandler+0x306>
 8008574:	e15a      	b.n	800882c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2258      	movs	r2, #88	@ 0x58
 800857a:	5a9b      	ldrh	r3, [r3, r2]
 800857c:	187a      	adds	r2, r7, r1
 800857e:	8812      	ldrh	r2, [r2, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d300      	bcc.n	8008586 <HAL_UART_IRQHandler+0x316>
 8008584:	e152      	b.n	800882c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	187a      	adds	r2, r7, r1
 800858a:	215a      	movs	r1, #90	@ 0x5a
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b20      	cmp	r3, #32
 8008598:	d06f      	beq.n	800867a <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859a:	f3ef 8310 	mrs	r3, PRIMASK
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085a4:	2301      	movs	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	49a0      	ldr	r1, [pc, #640]	@ (800883c <HAL_UART_IRQHandler+0x5cc>)
 80085bc:	400a      	ands	r2, r1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	f383 8810 	msr	PRIMASK, r3
}
 80085ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085cc:	f3ef 8310 	mrs	r3, PRIMASK
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80085d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80085d6:	2301      	movs	r3, #1
 80085d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085dc:	f383 8810 	msr	PRIMASK, r3
}
 80085e0:	46c0      	nop			@ (mov r8, r8)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2101      	movs	r1, #1
 80085ee:	438a      	bics	r2, r1
 80085f0:	609a      	str	r2, [r3, #8]
 80085f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f8:	f383 8810 	msr	PRIMASK, r3
}
 80085fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008602:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008606:	673b      	str	r3, [r7, #112]	@ 0x70
 8008608:	2301      	movs	r3, #1
 800860a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2140      	movs	r1, #64	@ 0x40
 8008620:	438a      	bics	r2, r1
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008626:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800862a:	f383 8810 	msr	PRIMASK, r3
}
 800862e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2280      	movs	r2, #128	@ 0x80
 8008634:	2120      	movs	r1, #32
 8008636:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863e:	f3ef 8310 	mrs	r3, PRIMASK
 8008642:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008646:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008648:	2301      	movs	r3, #1
 800864a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800864e:	f383 8810 	msr	PRIMASK, r3
}
 8008652:	46c0      	nop			@ (mov r8, r8)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2110      	movs	r1, #16
 8008660:	438a      	bics	r2, r1
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008666:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800866a:	f383 8810 	msr	PRIMASK, r3
}
 800866e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008674:	0018      	movs	r0, r3
 8008676:	f7fb fb31 	bl	8003cdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	22ac      	movs	r2, #172	@ 0xac
 8008684:	589b      	ldr	r3, [r3, r2]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	2158      	movs	r1, #88	@ 0x58
 800868a:	5a51      	ldrh	r1, [r2, r1]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	205a      	movs	r0, #90	@ 0x5a
 8008690:	5a12      	ldrh	r2, [r2, r0]
 8008692:	b292      	uxth	r2, r2
 8008694:	1a8a      	subs	r2, r1, r2
 8008696:	b291      	uxth	r1, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	0010      	movs	r0, r2
 800869c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800869e:	e0c5      	b.n	800882c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2258      	movs	r2, #88	@ 0x58
 80086a4:	5a99      	ldrh	r1, [r3, r2]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	225a      	movs	r2, #90	@ 0x5a
 80086aa:	5a9b      	ldrh	r3, [r3, r2]
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	208e      	movs	r0, #142	@ 0x8e
 80086b0:	183b      	adds	r3, r7, r0
 80086b2:	1a8a      	subs	r2, r1, r2
 80086b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	225a      	movs	r2, #90	@ 0x5a
 80086ba:	5a9b      	ldrh	r3, [r3, r2]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d100      	bne.n	80086c4 <HAL_UART_IRQHandler+0x454>
 80086c2:	e0b5      	b.n	8008830 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80086c4:	183b      	adds	r3, r7, r0
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d100      	bne.n	80086ce <HAL_UART_IRQHandler+0x45e>
 80086cc:	e0b0      	b.n	8008830 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ce:	f3ef 8310 	mrs	r3, PRIMASK
 80086d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d6:	2488      	movs	r4, #136	@ 0x88
 80086d8:	193a      	adds	r2, r7, r4
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	2301      	movs	r3, #1
 80086de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f383 8810 	msr	PRIMASK, r3
}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4953      	ldr	r1, [pc, #332]	@ (8008840 <HAL_UART_IRQHandler+0x5d0>)
 80086f4:	400a      	ands	r2, r1
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	193b      	adds	r3, r7, r4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f383 8810 	msr	PRIMASK, r3
}
 8008704:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008706:	f3ef 8310 	mrs	r3, PRIMASK
 800870a:	61bb      	str	r3, [r7, #24]
  return(result);
 800870c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870e:	2484      	movs	r4, #132	@ 0x84
 8008710:	193a      	adds	r2, r7, r4
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	2301      	movs	r3, #1
 8008716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2101      	movs	r1, #1
 800872c:	438a      	bics	r2, r1
 800872e:	609a      	str	r2, [r3, #8]
 8008730:	193b      	adds	r3, r7, r4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2280      	movs	r2, #128	@ 0x80
 8008742:	2120      	movs	r1, #32
 8008744:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008752:	f3ef 8310 	mrs	r3, PRIMASK
 8008756:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875a:	2480      	movs	r4, #128	@ 0x80
 800875c:	193a      	adds	r2, r7, r4
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	2301      	movs	r3, #1
 8008762:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	f383 8810 	msr	PRIMASK, r3
}
 800876a:	46c0      	nop			@ (mov r8, r8)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2110      	movs	r1, #16
 8008778:	438a      	bics	r2, r1
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	193b      	adds	r3, r7, r4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008784:	f383 8810 	msr	PRIMASK, r3
}
 8008788:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	22ac      	movs	r2, #172	@ 0xac
 8008794:	589b      	ldr	r3, [r3, r2]
 8008796:	183a      	adds	r2, r7, r0
 8008798:	8811      	ldrh	r1, [r2, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	0010      	movs	r0, r2
 800879e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a0:	e046      	b.n	8008830 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087a2:	23a4      	movs	r3, #164	@ 0xa4
 80087a4:	18fb      	adds	r3, r7, r3
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	2380      	movs	r3, #128	@ 0x80
 80087aa:	035b      	lsls	r3, r3, #13
 80087ac:	4013      	ands	r3, r2
 80087ae:	d012      	beq.n	80087d6 <HAL_UART_IRQHandler+0x566>
 80087b0:	239c      	movs	r3, #156	@ 0x9c
 80087b2:	18fb      	adds	r3, r7, r3
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	2380      	movs	r3, #128	@ 0x80
 80087b8:	03db      	lsls	r3, r3, #15
 80087ba:	4013      	ands	r3, r2
 80087bc:	d00b      	beq.n	80087d6 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2280      	movs	r2, #128	@ 0x80
 80087c4:	0352      	lsls	r2, r2, #13
 80087c6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	22a8      	movs	r2, #168	@ 0xa8
 80087cc:	589b      	ldr	r3, [r3, r2]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	0010      	movs	r0, r2
 80087d2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d4:	e02f      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087d6:	23a4      	movs	r3, #164	@ 0xa4
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2280      	movs	r2, #128	@ 0x80
 80087de:	4013      	ands	r3, r2
 80087e0:	d00f      	beq.n	8008802 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087e2:	23a0      	movs	r3, #160	@ 0xa0
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2280      	movs	r2, #128	@ 0x80
 80087ea:	4013      	ands	r3, r2
 80087ec:	d009      	beq.n	8008802 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01e      	beq.n	8008834 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	0010      	movs	r0, r2
 80087fe:	4798      	blx	r3
    }
    return;
 8008800:	e018      	b.n	8008834 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008802:	23a4      	movs	r3, #164	@ 0xa4
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2240      	movs	r2, #64	@ 0x40
 800880a:	4013      	ands	r3, r2
 800880c:	d013      	beq.n	8008836 <HAL_UART_IRQHandler+0x5c6>
 800880e:	23a0      	movs	r3, #160	@ 0xa0
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2240      	movs	r2, #64	@ 0x40
 8008816:	4013      	ands	r3, r2
 8008818:	d00d      	beq.n	8008836 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	0018      	movs	r0, r3
 800881e:	f000 fe2a 	bl	8009476 <UART_EndTransmit_IT>
    return;
 8008822:	e008      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008824:	46c0      	nop			@ (mov r8, r8)
 8008826:	e006      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008828:	46c0      	nop			@ (mov r8, r8)
 800882a:	e004      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
      return;
 800882c:	46c0      	nop			@ (mov r8, r8)
 800882e:	e002      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008830:	46c0      	nop			@ (mov r8, r8)
 8008832:	e000      	b.n	8008836 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008834:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008836:	46bd      	mov	sp, r7
 8008838:	b02b      	add	sp, #172	@ 0xac
 800883a:	bd90      	pop	{r4, r7, pc}
 800883c:	fffffeff 	.word	0xfffffeff
 8008840:	fffffedf 	.word	0xfffffedf

08008844 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800884c:	46c0      	nop			@ (mov r8, r8)
 800884e:	46bd      	mov	sp, r7
 8008850:	b002      	add	sp, #8
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800885c:	46c0      	nop			@ (mov r8, r8)
 800885e:	46bd      	mov	sp, r7
 8008860:	b002      	add	sp, #8
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800886c:	46c0      	nop			@ (mov r8, r8)
 800886e:	46bd      	mov	sp, r7
 8008870:	b002      	add	sp, #8
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800887c:	46c0      	nop			@ (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b002      	add	sp, #8
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800888c:	46c0      	nop			@ (mov r8, r8)
 800888e:	46bd      	mov	sp, r7
 8008890:	b002      	add	sp, #8
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800889c:	46c0      	nop			@ (mov r8, r8)
 800889e:	46bd      	mov	sp, r7
 80088a0:	b002      	add	sp, #8
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80088ac:	46c0      	nop			@ (mov r8, r8)
 80088ae:	46bd      	mov	sp, r7
 80088b0:	b002      	add	sp, #8
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80088bc:	46c0      	nop			@ (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	b002      	add	sp, #8
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2188      	movs	r1, #136	@ 0x88
 80088d0:	4a14      	ldr	r2, [pc, #80]	@ (8008924 <UART_InitCallbacksToDefault+0x60>)
 80088d2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	218c      	movs	r1, #140	@ 0x8c
 80088d8:	4a13      	ldr	r2, [pc, #76]	@ (8008928 <UART_InitCallbacksToDefault+0x64>)
 80088da:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2190      	movs	r1, #144	@ 0x90
 80088e0:	4a12      	ldr	r2, [pc, #72]	@ (800892c <UART_InitCallbacksToDefault+0x68>)
 80088e2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2194      	movs	r1, #148	@ 0x94
 80088e8:	4a11      	ldr	r2, [pc, #68]	@ (8008930 <UART_InitCallbacksToDefault+0x6c>)
 80088ea:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2198      	movs	r1, #152	@ 0x98
 80088f0:	4a10      	ldr	r2, [pc, #64]	@ (8008934 <UART_InitCallbacksToDefault+0x70>)
 80088f2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	219c      	movs	r1, #156	@ 0x9c
 80088f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008938 <UART_InitCallbacksToDefault+0x74>)
 80088fa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	21a0      	movs	r1, #160	@ 0xa0
 8008900:	4a0e      	ldr	r2, [pc, #56]	@ (800893c <UART_InitCallbacksToDefault+0x78>)
 8008902:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	21a4      	movs	r1, #164	@ 0xa4
 8008908:	4a0d      	ldr	r2, [pc, #52]	@ (8008940 <UART_InitCallbacksToDefault+0x7c>)
 800890a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	21a8      	movs	r1, #168	@ 0xa8
 8008910:	4a0c      	ldr	r2, [pc, #48]	@ (8008944 <UART_InitCallbacksToDefault+0x80>)
 8008912:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	21ac      	movs	r1, #172	@ 0xac
 8008918:	4a0b      	ldr	r2, [pc, #44]	@ (8008948 <UART_InitCallbacksToDefault+0x84>)
 800891a:	505a      	str	r2, [r3, r1]

}
 800891c:	46c0      	nop			@ (mov r8, r8)
 800891e:	46bd      	mov	sp, r7
 8008920:	b002      	add	sp, #8
 8008922:	bd80      	pop	{r7, pc}
 8008924:	08008855 	.word	0x08008855
 8008928:	08008845 	.word	0x08008845
 800892c:	08008875 	.word	0x08008875
 8008930:	08008865 	.word	0x08008865
 8008934:	08008885 	.word	0x08008885
 8008938:	08008895 	.word	0x08008895
 800893c:	080088a5 	.word	0x080088a5
 8008940:	080088b5 	.word	0x080088b5
 8008944:	080094d1 	.word	0x080094d1
 8008948:	08002859 	.word	0x08002859

0800894c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008954:	231e      	movs	r3, #30
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4aaf      	ldr	r2, [pc, #700]	@ (8008c38 <UART_SetConfig+0x2ec>)
 800897c:	4013      	ands	r3, r2
 800897e:	0019      	movs	r1, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	430a      	orrs	r2, r1
 8008988:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	4aaa      	ldr	r2, [pc, #680]	@ (8008c3c <UART_SetConfig+0x2f0>)
 8008992:	4013      	ands	r3, r2
 8008994:	0019      	movs	r1, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4aa1      	ldr	r2, [pc, #644]	@ (8008c40 <UART_SetConfig+0x2f4>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	0019      	movs	r1, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a9d      	ldr	r2, [pc, #628]	@ (8008c44 <UART_SetConfig+0x2f8>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d127      	bne.n	8008a22 <UART_SetConfig+0xd6>
 80089d2:	4b9d      	ldr	r3, [pc, #628]	@ (8008c48 <UART_SetConfig+0x2fc>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d6:	2203      	movs	r2, #3
 80089d8:	4013      	ands	r3, r2
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d00d      	beq.n	80089fa <UART_SetConfig+0xae>
 80089de:	d81b      	bhi.n	8008a18 <UART_SetConfig+0xcc>
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d014      	beq.n	8008a0e <UART_SetConfig+0xc2>
 80089e4:	d818      	bhi.n	8008a18 <UART_SetConfig+0xcc>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <UART_SetConfig+0xa4>
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d00a      	beq.n	8008a04 <UART_SetConfig+0xb8>
 80089ee:	e013      	b.n	8008a18 <UART_SetConfig+0xcc>
 80089f0:	231f      	movs	r3, #31
 80089f2:	18fb      	adds	r3, r7, r3
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e065      	b.n	8008ac6 <UART_SetConfig+0x17a>
 80089fa:	231f      	movs	r3, #31
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e060      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a04:	231f      	movs	r3, #31
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2204      	movs	r2, #4
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e05b      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a0e:	231f      	movs	r3, #31
 8008a10:	18fb      	adds	r3, r7, r3
 8008a12:	2208      	movs	r2, #8
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e056      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a18:	231f      	movs	r3, #31
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	2210      	movs	r2, #16
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e051      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a89      	ldr	r2, [pc, #548]	@ (8008c4c <UART_SetConfig+0x300>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d134      	bne.n	8008a96 <UART_SetConfig+0x14a>
 8008a2c:	4b86      	ldr	r3, [pc, #536]	@ (8008c48 <UART_SetConfig+0x2fc>)
 8008a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a30:	23c0      	movs	r3, #192	@ 0xc0
 8008a32:	029b      	lsls	r3, r3, #10
 8008a34:	4013      	ands	r3, r2
 8008a36:	22c0      	movs	r2, #192	@ 0xc0
 8008a38:	0292      	lsls	r2, r2, #10
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d017      	beq.n	8008a6e <UART_SetConfig+0x122>
 8008a3e:	22c0      	movs	r2, #192	@ 0xc0
 8008a40:	0292      	lsls	r2, r2, #10
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d822      	bhi.n	8008a8c <UART_SetConfig+0x140>
 8008a46:	2280      	movs	r2, #128	@ 0x80
 8008a48:	0292      	lsls	r2, r2, #10
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d019      	beq.n	8008a82 <UART_SetConfig+0x136>
 8008a4e:	2280      	movs	r2, #128	@ 0x80
 8008a50:	0292      	lsls	r2, r2, #10
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d81a      	bhi.n	8008a8c <UART_SetConfig+0x140>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <UART_SetConfig+0x118>
 8008a5a:	2280      	movs	r2, #128	@ 0x80
 8008a5c:	0252      	lsls	r2, r2, #9
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00a      	beq.n	8008a78 <UART_SetConfig+0x12c>
 8008a62:	e013      	b.n	8008a8c <UART_SetConfig+0x140>
 8008a64:	231f      	movs	r3, #31
 8008a66:	18fb      	adds	r3, r7, r3
 8008a68:	2200      	movs	r2, #0
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	e02b      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a6e:	231f      	movs	r3, #31
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	2202      	movs	r2, #2
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e026      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a78:	231f      	movs	r3, #31
 8008a7a:	18fb      	adds	r3, r7, r3
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e021      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a82:	231f      	movs	r3, #31
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	2208      	movs	r2, #8
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e01c      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a8c:	231f      	movs	r3, #31
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	2210      	movs	r2, #16
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e017      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8008c50 <UART_SetConfig+0x304>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d104      	bne.n	8008aaa <UART_SetConfig+0x15e>
 8008aa0:	231f      	movs	r3, #31
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e00d      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a69      	ldr	r2, [pc, #420]	@ (8008c54 <UART_SetConfig+0x308>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d104      	bne.n	8008abe <UART_SetConfig+0x172>
 8008ab4:	231f      	movs	r3, #31
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e003      	b.n	8008ac6 <UART_SetConfig+0x17a>
 8008abe:	231f      	movs	r3, #31
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	2210      	movs	r2, #16
 8008ac4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	2380      	movs	r3, #128	@ 0x80
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d15c      	bne.n	8008b8c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8008ad2:	231f      	movs	r3, #31
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d015      	beq.n	8008b08 <UART_SetConfig+0x1bc>
 8008adc:	dc18      	bgt.n	8008b10 <UART_SetConfig+0x1c4>
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d00d      	beq.n	8008afe <UART_SetConfig+0x1b2>
 8008ae2:	dc15      	bgt.n	8008b10 <UART_SetConfig+0x1c4>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <UART_SetConfig+0x1a2>
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d005      	beq.n	8008af8 <UART_SetConfig+0x1ac>
 8008aec:	e010      	b.n	8008b10 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aee:	f7fd ff49 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 8008af2:	0003      	movs	r3, r0
 8008af4:	61bb      	str	r3, [r7, #24]
        break;
 8008af6:	e012      	b.n	8008b1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af8:	4b57      	ldr	r3, [pc, #348]	@ (8008c58 <UART_SetConfig+0x30c>)
 8008afa:	61bb      	str	r3, [r7, #24]
        break;
 8008afc:	e00f      	b.n	8008b1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afe:	f7fd fec5 	bl	800688c <HAL_RCC_GetSysClockFreq>
 8008b02:	0003      	movs	r3, r0
 8008b04:	61bb      	str	r3, [r7, #24]
        break;
 8008b06:	e00a      	b.n	8008b1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b08:	2380      	movs	r3, #128	@ 0x80
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	61bb      	str	r3, [r7, #24]
        break;
 8008b0e:	e006      	b.n	8008b1e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b14:	231e      	movs	r3, #30
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	2201      	movs	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]
        break;
 8008b1c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d100      	bne.n	8008b26 <UART_SetConfig+0x1da>
 8008b24:	e07a      	b.n	8008c1c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	005a      	lsls	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	085b      	lsrs	r3, r3, #1
 8008b30:	18d2      	adds	r2, r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	0019      	movs	r1, r3
 8008b38:	0010      	movs	r0, r2
 8008b3a:	f7f7 fb01 	bl	8000140 <__udivsi3>
 8008b3e:	0003      	movs	r3, r0
 8008b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d91c      	bls.n	8008b82 <UART_SetConfig+0x236>
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	2380      	movs	r3, #128	@ 0x80
 8008b4c:	025b      	lsls	r3, r3, #9
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d217      	bcs.n	8008b82 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	200e      	movs	r0, #14
 8008b58:	183b      	adds	r3, r7, r0
 8008b5a:	210f      	movs	r1, #15
 8008b5c:	438a      	bics	r2, r1
 8008b5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2207      	movs	r2, #7
 8008b68:	4013      	ands	r3, r2
 8008b6a:	b299      	uxth	r1, r3
 8008b6c:	183b      	adds	r3, r7, r0
 8008b6e:	183a      	adds	r2, r7, r0
 8008b70:	8812      	ldrh	r2, [r2, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	183a      	adds	r2, r7, r0
 8008b7c:	8812      	ldrh	r2, [r2, #0]
 8008b7e:	60da      	str	r2, [r3, #12]
 8008b80:	e04c      	b.n	8008c1c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008b82:	231e      	movs	r3, #30
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	2201      	movs	r2, #1
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e047      	b.n	8008c1c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b8c:	231f      	movs	r3, #31
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d015      	beq.n	8008bc2 <UART_SetConfig+0x276>
 8008b96:	dc18      	bgt.n	8008bca <UART_SetConfig+0x27e>
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d00d      	beq.n	8008bb8 <UART_SetConfig+0x26c>
 8008b9c:	dc15      	bgt.n	8008bca <UART_SetConfig+0x27e>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <UART_SetConfig+0x25c>
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d005      	beq.n	8008bb2 <UART_SetConfig+0x266>
 8008ba6:	e010      	b.n	8008bca <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba8:	f7fd feec 	bl	8006984 <HAL_RCC_GetPCLK1Freq>
 8008bac:	0003      	movs	r3, r0
 8008bae:	61bb      	str	r3, [r7, #24]
        break;
 8008bb0:	e012      	b.n	8008bd8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <UART_SetConfig+0x30c>)
 8008bb4:	61bb      	str	r3, [r7, #24]
        break;
 8008bb6:	e00f      	b.n	8008bd8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb8:	f7fd fe68 	bl	800688c <HAL_RCC_GetSysClockFreq>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	61bb      	str	r3, [r7, #24]
        break;
 8008bc0:	e00a      	b.n	8008bd8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc2:	2380      	movs	r3, #128	@ 0x80
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	61bb      	str	r3, [r7, #24]
        break;
 8008bc8:	e006      	b.n	8008bd8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bce:	231e      	movs	r3, #30
 8008bd0:	18fb      	adds	r3, r7, r3
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
        break;
 8008bd6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01e      	beq.n	8008c1c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	085a      	lsrs	r2, r3, #1
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	18d2      	adds	r2, r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	0019      	movs	r1, r3
 8008bee:	0010      	movs	r0, r2
 8008bf0:	f7f7 faa6 	bl	8000140 <__udivsi3>
 8008bf4:	0003      	movs	r3, r0
 8008bf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d90a      	bls.n	8008c14 <UART_SetConfig+0x2c8>
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	2380      	movs	r3, #128	@ 0x80
 8008c02:	025b      	lsls	r3, r3, #9
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d205      	bcs.n	8008c14 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e003      	b.n	8008c1c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008c14:	231e      	movs	r3, #30
 8008c16:	18fb      	adds	r3, r7, r3
 8008c18:	2201      	movs	r2, #1
 8008c1a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c28:	231e      	movs	r3, #30
 8008c2a:	18fb      	adds	r3, r7, r3
 8008c2c:	781b      	ldrb	r3, [r3, #0]
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b008      	add	sp, #32
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	efff69f3 	.word	0xefff69f3
 8008c3c:	ffffcfff 	.word	0xffffcfff
 8008c40:	fffff4ff 	.word	0xfffff4ff
 8008c44:	40013800 	.word	0x40013800
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	40004400 	.word	0x40004400
 8008c50:	40004800 	.word	0x40004800
 8008c54:	40004c00 	.word	0x40004c00
 8008c58:	007a1200 	.word	0x007a1200

08008c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c68:	2208      	movs	r2, #8
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	4a4a      	ldr	r2, [pc, #296]	@ (8008da0 <UART_AdvFeatureConfig+0x144>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	0019      	movs	r1, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	d00b      	beq.n	8008ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	4a43      	ldr	r2, [pc, #268]	@ (8008da4 <UART_AdvFeatureConfig+0x148>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	2202      	movs	r2, #2
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d00b      	beq.n	8008cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8008da8 <UART_AdvFeatureConfig+0x14c>)
 8008cba:	4013      	ands	r3, r2
 8008cbc:	0019      	movs	r1, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cce:	2204      	movs	r2, #4
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	d00b      	beq.n	8008cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	4a34      	ldr	r2, [pc, #208]	@ (8008dac <UART_AdvFeatureConfig+0x150>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	0019      	movs	r1, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8008db0 <UART_AdvFeatureConfig+0x154>)
 8008cfe:	4013      	ands	r3, r2
 8008d00:	0019      	movs	r1, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d12:	2220      	movs	r2, #32
 8008d14:	4013      	ands	r3, r2
 8008d16:	d00b      	beq.n	8008d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	4a25      	ldr	r2, [pc, #148]	@ (8008db4 <UART_AdvFeatureConfig+0x158>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	0019      	movs	r1, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	2240      	movs	r2, #64	@ 0x40
 8008d36:	4013      	ands	r3, r2
 8008d38:	d01d      	beq.n	8008d76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <UART_AdvFeatureConfig+0x15c>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	0019      	movs	r1, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d56:	2380      	movs	r3, #128	@ 0x80
 8008d58:	035b      	lsls	r3, r3, #13
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d10b      	bne.n	8008d76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	@ (8008dbc <UART_AdvFeatureConfig+0x160>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	0019      	movs	r1, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	2280      	movs	r2, #128	@ 0x80
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4a0e      	ldr	r2, [pc, #56]	@ (8008dc0 <UART_AdvFeatureConfig+0x164>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	0019      	movs	r1, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }
}
 8008d98:	46c0      	nop			@ (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	ffff7fff 	.word	0xffff7fff
 8008da4:	fffdffff 	.word	0xfffdffff
 8008da8:	fffeffff 	.word	0xfffeffff
 8008dac:	fffbffff 	.word	0xfffbffff
 8008db0:	ffffefff 	.word	0xffffefff
 8008db4:	ffffdfff 	.word	0xffffdfff
 8008db8:	ffefffff 	.word	0xffefffff
 8008dbc:	ff9fffff 	.word	0xff9fffff
 8008dc0:	fff7ffff 	.word	0xfff7ffff

08008dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b092      	sub	sp, #72	@ 0x48
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2284      	movs	r2, #132	@ 0x84
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd4:	f7fa fb48 	bl	8003468 <HAL_GetTick>
 8008dd8:	0003      	movs	r3, r0
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2208      	movs	r2, #8
 8008de4:	4013      	ands	r3, r2
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	d12c      	bne.n	8008e44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dec:	2280      	movs	r2, #128	@ 0x80
 8008dee:	0391      	lsls	r1, r2, #14
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4a46      	ldr	r2, [pc, #280]	@ (8008f0c <UART_CheckIdleState+0x148>)
 8008df4:	9200      	str	r2, [sp, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f000 f88c 	bl	8008f14 <UART_WaitOnFlagUntilTimeout>
 8008dfc:	1e03      	subs	r3, r0, #0
 8008dfe:	d021      	beq.n	8008e44 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e00:	f3ef 8310 	mrs	r3, PRIMASK
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	f383 8810 	msr	PRIMASK, r3
}
 8008e14:	46c0      	nop			@ (mov r8, r8)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2180      	movs	r1, #128	@ 0x80
 8008e22:	438a      	bics	r2, r1
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	f383 8810 	msr	PRIMASK, r3
}
 8008e30:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2278      	movs	r2, #120	@ 0x78
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e05f      	b.n	8008f04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d146      	bne.n	8008ee0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e54:	2280      	movs	r2, #128	@ 0x80
 8008e56:	03d1      	lsls	r1, r2, #15
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f0c <UART_CheckIdleState+0x148>)
 8008e5c:	9200      	str	r2, [sp, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f000 f858 	bl	8008f14 <UART_WaitOnFlagUntilTimeout>
 8008e64:	1e03      	subs	r3, r0, #0
 8008e66:	d03b      	beq.n	8008ee0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e68:	f3ef 8310 	mrs	r3, PRIMASK
 8008e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e72:	2301      	movs	r3, #1
 8008e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f383 8810 	msr	PRIMASK, r3
}
 8008e7c:	46c0      	nop			@ (mov r8, r8)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4921      	ldr	r1, [pc, #132]	@ (8008f10 <UART_CheckIdleState+0x14c>)
 8008e8a:	400a      	ands	r2, r1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f383 8810 	msr	PRIMASK, r3
}
 8008eae:	46c0      	nop			@ (mov r8, r8)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2101      	movs	r1, #1
 8008ebc:	438a      	bics	r2, r1
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	f383 8810 	msr	PRIMASK, r3
}
 8008eca:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2280      	movs	r2, #128	@ 0x80
 8008ed0:	2120      	movs	r1, #32
 8008ed2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2278      	movs	r2, #120	@ 0x78
 8008ed8:	2100      	movs	r1, #0
 8008eda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e011      	b.n	8008f04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2280      	movs	r2, #128	@ 0x80
 8008eea:	2120      	movs	r1, #32
 8008eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2278      	movs	r2, #120	@ 0x78
 8008efe:	2100      	movs	r1, #0
 8008f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	0018      	movs	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b010      	add	sp, #64	@ 0x40
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	01ffffff 	.word	0x01ffffff
 8008f10:	fffffedf 	.word	0xfffffedf

08008f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	1dfb      	adds	r3, r7, #7
 8008f22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f24:	e051      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	d04e      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2c:	f7fa fa9c 	bl	8003468 <HAL_GetTick>
 8008f30:	0002      	movs	r2, r0
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e051      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d03b      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b80      	cmp	r3, #128	@ 0x80
 8008f56:	d038      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b40      	cmp	r3, #64	@ 0x40
 8008f5c:	d035      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	2208      	movs	r2, #8
 8008f66:	4013      	ands	r3, r2
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d111      	bne.n	8008f90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2208      	movs	r2, #8
 8008f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	0018      	movs	r0, r3
 8008f78:	f000 f900 	bl	800917c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2284      	movs	r2, #132	@ 0x84
 8008f80:	2108      	movs	r1, #8
 8008f82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2278      	movs	r2, #120	@ 0x78
 8008f88:	2100      	movs	r1, #0
 8008f8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e02c      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	2380      	movs	r3, #128	@ 0x80
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	401a      	ands	r2, r3
 8008f9c:	2380      	movs	r3, #128	@ 0x80
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d112      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2280      	movs	r2, #128	@ 0x80
 8008faa:	0112      	lsls	r2, r2, #4
 8008fac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f000 f8e3 	bl	800917c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2284      	movs	r2, #132	@ 0x84
 8008fba:	2120      	movs	r1, #32
 8008fbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2278      	movs	r2, #120	@ 0x78
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00f      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	425a      	negs	r2, r3
 8008fda:	4153      	adcs	r3, r2
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	001a      	movs	r2, r3
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d09e      	beq.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b004      	add	sp, #16
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b090      	sub	sp, #64	@ 0x40
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	1dbb      	adds	r3, r7, #6
 8009000:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	1dba      	adds	r2, r7, #6
 800900c:	2158      	movs	r1, #88	@ 0x58
 800900e:	8812      	ldrh	r2, [r2, #0]
 8009010:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2284      	movs	r2, #132	@ 0x84
 8009016:	2100      	movs	r1, #0
 8009018:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2280      	movs	r2, #128	@ 0x80
 800901e:	2122      	movs	r1, #34	@ 0x22
 8009020:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009026:	2b00      	cmp	r3, #0
 8009028:	d028      	beq.n	800907c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800902e:	4a3e      	ldr	r2, [pc, #248]	@ (8009128 <UART_Start_Receive_DMA+0x134>)
 8009030:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009036:	4a3d      	ldr	r2, [pc, #244]	@ (800912c <UART_Start_Receive_DMA+0x138>)
 8009038:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903e:	4a3c      	ldr	r2, [pc, #240]	@ (8009130 <UART_Start_Receive_DMA+0x13c>)
 8009040:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009046:	2200      	movs	r2, #0
 8009048:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3324      	adds	r3, #36	@ 0x24
 8009054:	0019      	movs	r1, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	001a      	movs	r2, r3
 800905c:	1dbb      	adds	r3, r7, #6
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	f7fa fdd6 	bl	8003c10 <HAL_DMA_Start_IT>
 8009064:	1e03      	subs	r3, r0, #0
 8009066:	d009      	beq.n	800907c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2284      	movs	r2, #132	@ 0x84
 800906c:	2110      	movs	r1, #16
 800906e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2280      	movs	r2, #128	@ 0x80
 8009074:	2120      	movs	r1, #32
 8009076:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e050      	b.n	800911e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d019      	beq.n	80090b8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009084:	f3ef 8310 	mrs	r3, PRIMASK
 8009088:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908e:	2301      	movs	r3, #1
 8009090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009094:	f383 8810 	msr	PRIMASK, r3
}
 8009098:	46c0      	nop			@ (mov r8, r8)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2180      	movs	r1, #128	@ 0x80
 80090a6:	0049      	lsls	r1, r1, #1
 80090a8:	430a      	orrs	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b8:	f3ef 8310 	mrs	r3, PRIMASK
 80090bc:	613b      	str	r3, [r7, #16]
  return(result);
 80090be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090c2:	2301      	movs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f383 8810 	msr	PRIMASK, r3
}
 80090cc:	46c0      	nop			@ (mov r8, r8)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2101      	movs	r1, #1
 80090da:	430a      	orrs	r2, r1
 80090dc:	609a      	str	r2, [r3, #8]
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	f383 8810 	msr	PRIMASK, r3
}
 80090e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ea:	f3ef 8310 	mrs	r3, PRIMASK
 80090ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80090f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f4:	2301      	movs	r3, #1
 80090f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	f383 8810 	msr	PRIMASK, r3
}
 80090fe:	46c0      	nop			@ (mov r8, r8)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2140      	movs	r1, #64	@ 0x40
 800910c:	430a      	orrs	r2, r1
 800910e:	609a      	str	r2, [r3, #8]
 8009110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	f383 8810 	msr	PRIMASK, r3
}
 800911a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	0018      	movs	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	b010      	add	sp, #64	@ 0x40
 8009124:	bd80      	pop	{r7, pc}
 8009126:	46c0      	nop			@ (mov r8, r8)
 8009128:	08009245 	.word	0x08009245
 800912c:	08009375 	.word	0x08009375
 8009130:	080093bd 	.word	0x080093bd

08009134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800913c:	f3ef 8310 	mrs	r3, PRIMASK
 8009140:	60bb      	str	r3, [r7, #8]
  return(result);
 8009142:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	2301      	movs	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f383 8810 	msr	PRIMASK, r3
}
 8009150:	46c0      	nop			@ (mov r8, r8)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	21c0      	movs	r1, #192	@ 0xc0
 800915e:	438a      	bics	r2, r1
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f383 8810 	msr	PRIMASK, r3
}
 800916c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009174:	46c0      	nop			@ (mov r8, r8)
 8009176:	46bd      	mov	sp, r7
 8009178:	b006      	add	sp, #24
 800917a:	bd80      	pop	{r7, pc}

0800917c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08e      	sub	sp, #56	@ 0x38
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	617b      	str	r3, [r7, #20]
  return(result);
 800918a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800918c:	637b      	str	r3, [r7, #52]	@ 0x34
 800918e:	2301      	movs	r3, #1
 8009190:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f383 8810 	msr	PRIMASK, r3
}
 8009198:	46c0      	nop			@ (mov r8, r8)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4926      	ldr	r1, [pc, #152]	@ (8009240 <UART_EndRxTransfer+0xc4>)
 80091a6:	400a      	ands	r2, r1
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	f383 8810 	msr	PRIMASK, r3
}
 80091b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ba:	623b      	str	r3, [r7, #32]
  return(result);
 80091bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	633b      	str	r3, [r7, #48]	@ 0x30
 80091c0:	2301      	movs	r3, #1
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c6:	f383 8810 	msr	PRIMASK, r3
}
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2101      	movs	r1, #1
 80091d8:	438a      	bics	r2, r1
 80091da:	609a      	str	r2, [r3, #8]
 80091dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d118      	bne.n	8009222 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f0:	f3ef 8310 	mrs	r3, PRIMASK
 80091f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80091f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091fa:	2301      	movs	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f383 8810 	msr	PRIMASK, r3
}
 8009204:	46c0      	nop			@ (mov r8, r8)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2110      	movs	r1, #16
 8009212:	438a      	bics	r2, r1
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f383 8810 	msr	PRIMASK, r3
}
 8009220:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2280      	movs	r2, #128	@ 0x80
 8009226:	2120      	movs	r1, #32
 8009228:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	46bd      	mov	sp, r7
 800923a:	b00e      	add	sp, #56	@ 0x38
 800923c:	bd80      	pop	{r7, pc}
 800923e:	46c0      	nop			@ (mov r8, r8)
 8009240:	fffffedf 	.word	0xfffffedf

08009244 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b094      	sub	sp, #80	@ 0x50
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009250:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b20      	cmp	r3, #32
 8009258:	d06f      	beq.n	800933a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800925a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800925c:	225a      	movs	r2, #90	@ 0x5a
 800925e:	2100      	movs	r1, #0
 8009260:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009262:	f3ef 8310 	mrs	r3, PRIMASK
 8009266:	61bb      	str	r3, [r7, #24]
  return(result);
 8009268:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800926c:	2301      	movs	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	46c0      	nop			@ (mov r8, r8)
 8009278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	493b      	ldr	r1, [pc, #236]	@ (8009370 <UART_DMAReceiveCplt+0x12c>)
 8009284:	400a      	ands	r2, r1
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800928a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009294:	f3ef 8310 	mrs	r3, PRIMASK
 8009298:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929c:	647b      	str	r3, [r7, #68]	@ 0x44
 800929e:	2301      	movs	r3, #1
 80092a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	f383 8810 	msr	PRIMASK, r3
}
 80092a8:	46c0      	nop			@ (mov r8, r8)
 80092aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2101      	movs	r1, #1
 80092b6:	438a      	bics	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c0:	f383 8810 	msr	PRIMASK, r3
}
 80092c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c6:	f3ef 8310 	mrs	r3, PRIMASK
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80092d0:	2301      	movs	r3, #1
 80092d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d6:	f383 8810 	msr	PRIMASK, r3
}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2140      	movs	r1, #64	@ 0x40
 80092e8:	438a      	bics	r2, r1
 80092ea:	609a      	str	r2, [r3, #8]
 80092ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f2:	f383 8810 	msr	PRIMASK, r3
}
 80092f6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fa:	2280      	movs	r2, #128	@ 0x80
 80092fc:	2120      	movs	r1, #32
 80092fe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009304:	2b01      	cmp	r3, #1
 8009306:	d118      	bne.n	800933a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009308:	f3ef 8310 	mrs	r3, PRIMASK
 800930c:	60fb      	str	r3, [r7, #12]
  return(result);
 800930e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009312:	2301      	movs	r3, #1
 8009314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f383 8810 	msr	PRIMASK, r3
}
 800931c:	46c0      	nop			@ (mov r8, r8)
 800931e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2110      	movs	r1, #16
 800932a:	438a      	bics	r2, r1
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f383 8810 	msr	PRIMASK, r3
}
 8009338:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800933a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933c:	2200      	movs	r2, #0
 800933e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009344:	2b01      	cmp	r3, #1
 8009346:	d109      	bne.n	800935c <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	22ac      	movs	r2, #172	@ 0xac
 800934c:	589b      	ldr	r3, [r3, r2]
 800934e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009350:	2158      	movs	r1, #88	@ 0x58
 8009352:	5a51      	ldrh	r1, [r2, r1]
 8009354:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009356:	0010      	movs	r0, r2
 8009358:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935a:	e005      	b.n	8009368 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 800935c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800935e:	2294      	movs	r2, #148	@ 0x94
 8009360:	589b      	ldr	r3, [r3, r2]
 8009362:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009364:	0010      	movs	r0, r2
 8009366:	4798      	blx	r3
}
 8009368:	46c0      	nop			@ (mov r8, r8)
 800936a:	46bd      	mov	sp, r7
 800936c:	b014      	add	sp, #80	@ 0x50
 800936e:	bd80      	pop	{r7, pc}
 8009370:	fffffeff 	.word	0xfffffeff

08009374 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009380:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800938c:	2b01      	cmp	r3, #1
 800938e:	d10b      	bne.n	80093a8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	22ac      	movs	r2, #172	@ 0xac
 8009394:	589b      	ldr	r3, [r3, r2]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	2158      	movs	r1, #88	@ 0x58
 800939a:	5a52      	ldrh	r2, [r2, r1]
 800939c:	0852      	lsrs	r2, r2, #1
 800939e:	b291      	uxth	r1, r2
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	0010      	movs	r0, r2
 80093a4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093a6:	e005      	b.n	80093b4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2290      	movs	r2, #144	@ 0x90
 80093ac:	589b      	ldr	r3, [r3, r2]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	0010      	movs	r0, r2
 80093b2:	4798      	blx	r3
}
 80093b4:	46c0      	nop			@ (mov r8, r8)
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b004      	add	sp, #16
 80093ba:	bd80      	pop	{r7, pc}

080093bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2280      	movs	r2, #128	@ 0x80
 80093d4:	589b      	ldr	r3, [r3, r2]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2280      	movs	r2, #128	@ 0x80
 80093e0:	4013      	ands	r3, r2
 80093e2:	2b80      	cmp	r3, #128	@ 0x80
 80093e4:	d10a      	bne.n	80093fc <UART_DMAError+0x40>
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b21      	cmp	r3, #33	@ 0x21
 80093ea:	d107      	bne.n	80093fc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2252      	movs	r2, #82	@ 0x52
 80093f0:	2100      	movs	r1, #0
 80093f2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7ff fe9c 	bl	8009134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2240      	movs	r2, #64	@ 0x40
 8009404:	4013      	ands	r3, r2
 8009406:	2b40      	cmp	r3, #64	@ 0x40
 8009408:	d10a      	bne.n	8009420 <UART_DMAError+0x64>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b22      	cmp	r3, #34	@ 0x22
 800940e:	d107      	bne.n	8009420 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	225a      	movs	r2, #90	@ 0x5a
 8009414:	2100      	movs	r1, #0
 8009416:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	0018      	movs	r0, r3
 800941c:	f7ff feae 	bl	800917c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2284      	movs	r2, #132	@ 0x84
 8009424:	589b      	ldr	r3, [r3, r2]
 8009426:	2210      	movs	r2, #16
 8009428:	431a      	orrs	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2184      	movs	r1, #132	@ 0x84
 800942e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2298      	movs	r2, #152	@ 0x98
 8009434:	589b      	ldr	r3, [r3, r2]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	0010      	movs	r0, r2
 800943a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943c:	46c0      	nop			@ (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b006      	add	sp, #24
 8009442:	bd80      	pop	{r7, pc}

08009444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	225a      	movs	r2, #90	@ 0x5a
 8009456:	2100      	movs	r1, #0
 8009458:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2252      	movs	r2, #82	@ 0x52
 800945e:	2100      	movs	r1, #0
 8009460:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2298      	movs	r2, #152	@ 0x98
 8009466:	589b      	ldr	r3, [r3, r2]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	0010      	movs	r0, r2
 800946c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800946e:	46c0      	nop			@ (mov r8, r8)
 8009470:	46bd      	mov	sp, r7
 8009472:	b004      	add	sp, #16
 8009474:	bd80      	pop	{r7, pc}

08009476 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b086      	sub	sp, #24
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800947e:	f3ef 8310 	mrs	r3, PRIMASK
 8009482:	60bb      	str	r3, [r7, #8]
  return(result);
 8009484:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	2301      	movs	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f383 8810 	msr	PRIMASK, r3
}
 8009492:	46c0      	nop			@ (mov r8, r8)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2140      	movs	r1, #64	@ 0x40
 80094a0:	438a      	bics	r2, r1
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f383 8810 	msr	PRIMASK, r3
}
 80094ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	228c      	movs	r2, #140	@ 0x8c
 80094c0:	589b      	ldr	r3, [r3, r2]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	0010      	movs	r0, r2
 80094c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c8:	46c0      	nop			@ (mov r8, r8)
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b006      	add	sp, #24
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094d8:	46c0      	nop			@ (mov r8, r8)
 80094da:	46bd      	mov	sp, r7
 80094dc:	b002      	add	sp, #8
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b08a      	sub	sp, #40	@ 0x28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	1dbb      	adds	r3, r7, #6
 80094ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2280      	movs	r2, #128	@ 0x80
 80094f2:	589b      	ldr	r3, [r3, r2]
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d156      	bne.n	80095a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80094fe:	1dbb      	adds	r3, r7, #6
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e04e      	b.n	80095a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	2380      	movs	r3, #128	@ 0x80
 8009510:	015b      	lsls	r3, r3, #5
 8009512:	429a      	cmp	r2, r3
 8009514:	d109      	bne.n	800952a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2201      	movs	r2, #1
 8009522:	4013      	ands	r3, r2
 8009524:	d001      	beq.n	800952a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e03e      	b.n	80095a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009536:	2527      	movs	r5, #39	@ 0x27
 8009538:	197c      	adds	r4, r7, r5
 800953a:	1dbb      	adds	r3, r7, #6
 800953c:	881a      	ldrh	r2, [r3, #0]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0018      	movs	r0, r3
 8009544:	f7ff fd56 	bl	8008ff4 <UART_Start_Receive_DMA>
 8009548:	0003      	movs	r3, r0
 800954a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800954c:	197b      	adds	r3, r7, r5
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d124      	bne.n	800959e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009558:	2b01      	cmp	r3, #1
 800955a:	d11c      	bne.n	8009596 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2210      	movs	r2, #16
 8009562:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009564:	f3ef 8310 	mrs	r3, PRIMASK
 8009568:	617b      	str	r3, [r7, #20]
  return(result);
 800956a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956c:	623b      	str	r3, [r7, #32]
 800956e:	2301      	movs	r3, #1
 8009570:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	f383 8810 	msr	PRIMASK, r3
}
 8009578:	46c0      	nop			@ (mov r8, r8)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2110      	movs	r1, #16
 8009586:	430a      	orrs	r2, r1
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f383 8810 	msr	PRIMASK, r3
}
 8009594:	e003      	b.n	800959e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009596:	2327      	movs	r3, #39	@ 0x27
 8009598:	18fb      	adds	r3, r7, r3
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800959e:	2327      	movs	r3, #39	@ 0x27
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	e000      	b.n	80095a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b00a      	add	sp, #40	@ 0x28
 80095ae:	bdb0      	pop	{r4, r5, r7, pc}

080095b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2244      	movs	r2, #68	@ 0x44
 80095bc:	2100      	movs	r1, #0
 80095be:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095c0:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <USB_EnableGlobalInt+0x28>)
 80095c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	b299      	uxth	r1, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2240      	movs	r2, #64	@ 0x40
 80095cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b004      	add	sp, #16
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	0000bf80 	.word	0x0000bf80

080095dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095e4:	4b09      	ldr	r3, [pc, #36]	@ (800960c <USB_DisableGlobalInt+0x30>)
 80095e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2240      	movs	r2, #64	@ 0x40
 80095ec:	5a9b      	ldrh	r3, [r3, r2]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	b292      	uxth	r2, r2
 80095f4:	43d2      	mvns	r2, r2
 80095f6:	b292      	uxth	r2, r2
 80095f8:	4013      	ands	r3, r2
 80095fa:	b299      	uxth	r1, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2240      	movs	r2, #64	@ 0x40
 8009600:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	0018      	movs	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	b004      	add	sp, #16
 800960a:	bd80      	pop	{r7, pc}
 800960c:	0000bf80 	.word	0x0000bf80

08009610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	1d3b      	adds	r3, r7, #4
 800961a:	6019      	str	r1, [r3, #0]
 800961c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2240      	movs	r2, #64	@ 0x40
 8009622:	2101      	movs	r1, #1
 8009624:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2240      	movs	r2, #64	@ 0x40
 800962a:	2100      	movs	r1, #0
 800962c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2244      	movs	r2, #68	@ 0x44
 8009632:	2100      	movs	r1, #0
 8009634:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2250      	movs	r2, #80	@ 0x50
 800963a:	2100      	movs	r1, #0
 800963c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	0018      	movs	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	b004      	add	sp, #16
 8009646:	bd80      	pop	{r7, pc}

08009648 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b09c      	sub	sp, #112	@ 0x70
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009652:	236f      	movs	r3, #111	@ 0x6f
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	18d3      	adds	r3, r2, r3
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	b29a      	uxth	r2, r3
 8009668:	236c      	movs	r3, #108	@ 0x6c
 800966a:	18fb      	adds	r3, r7, r3
 800966c:	49a1      	ldr	r1, [pc, #644]	@ (80098f4 <USB_ActivateEndpoint+0x2ac>)
 800966e:	400a      	ands	r2, r1
 8009670:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	78db      	ldrb	r3, [r3, #3]
 8009676:	2b03      	cmp	r3, #3
 8009678:	d017      	beq.n	80096aa <USB_ActivateEndpoint+0x62>
 800967a:	dc28      	bgt.n	80096ce <USB_ActivateEndpoint+0x86>
 800967c:	2b02      	cmp	r3, #2
 800967e:	d00e      	beq.n	800969e <USB_ActivateEndpoint+0x56>
 8009680:	dc25      	bgt.n	80096ce <USB_ActivateEndpoint+0x86>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <USB_ActivateEndpoint+0x44>
 8009686:	2b01      	cmp	r3, #1
 8009688:	d018      	beq.n	80096bc <USB_ActivateEndpoint+0x74>
 800968a:	e020      	b.n	80096ce <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800968c:	226c      	movs	r2, #108	@ 0x6c
 800968e:	18bb      	adds	r3, r7, r2
 8009690:	18ba      	adds	r2, r7, r2
 8009692:	8812      	ldrh	r2, [r2, #0]
 8009694:	2180      	movs	r1, #128	@ 0x80
 8009696:	0089      	lsls	r1, r1, #2
 8009698:	430a      	orrs	r2, r1
 800969a:	801a      	strh	r2, [r3, #0]
      break;
 800969c:	e01c      	b.n	80096d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800969e:	226c      	movs	r2, #108	@ 0x6c
 80096a0:	18bb      	adds	r3, r7, r2
 80096a2:	18ba      	adds	r2, r7, r2
 80096a4:	8812      	ldrh	r2, [r2, #0]
 80096a6:	801a      	strh	r2, [r3, #0]
      break;
 80096a8:	e016      	b.n	80096d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096aa:	226c      	movs	r2, #108	@ 0x6c
 80096ac:	18bb      	adds	r3, r7, r2
 80096ae:	18ba      	adds	r2, r7, r2
 80096b0:	8812      	ldrh	r2, [r2, #0]
 80096b2:	21c0      	movs	r1, #192	@ 0xc0
 80096b4:	00c9      	lsls	r1, r1, #3
 80096b6:	430a      	orrs	r2, r1
 80096b8:	801a      	strh	r2, [r3, #0]
      break;
 80096ba:	e00d      	b.n	80096d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096bc:	226c      	movs	r2, #108	@ 0x6c
 80096be:	18bb      	adds	r3, r7, r2
 80096c0:	18ba      	adds	r2, r7, r2
 80096c2:	8812      	ldrh	r2, [r2, #0]
 80096c4:	2180      	movs	r1, #128	@ 0x80
 80096c6:	00c9      	lsls	r1, r1, #3
 80096c8:	430a      	orrs	r2, r1
 80096ca:	801a      	strh	r2, [r3, #0]
      break;
 80096cc:	e004      	b.n	80096d8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80096ce:	236f      	movs	r3, #111	@ 0x6f
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	2201      	movs	r2, #1
 80096d4:	701a      	strb	r2, [r3, #0]
      break;
 80096d6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	18d3      	adds	r3, r2, r3
 80096e2:	226c      	movs	r2, #108	@ 0x6c
 80096e4:	18ba      	adds	r2, r7, r2
 80096e6:	8812      	ldrh	r2, [r2, #0]
 80096e8:	4983      	ldr	r1, [pc, #524]	@ (80098f8 <USB_ActivateEndpoint+0x2b0>)
 80096ea:	430a      	orrs	r2, r1
 80096ec:	b292      	uxth	r2, r2
 80096ee:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	18d3      	adds	r3, r2, r3
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	b21b      	sxth	r3, r3
 8009700:	4a7e      	ldr	r2, [pc, #504]	@ (80098fc <USB_ActivateEndpoint+0x2b4>)
 8009702:	4013      	ands	r3, r2
 8009704:	b21a      	sxth	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b21b      	sxth	r3, r3
 800970c:	4313      	orrs	r3, r2
 800970e:	b21a      	sxth	r2, r3
 8009710:	2166      	movs	r1, #102	@ 0x66
 8009712:	187b      	adds	r3, r7, r1
 8009714:	801a      	strh	r2, [r3, #0]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	18d3      	adds	r3, r2, r3
 8009720:	187a      	adds	r2, r7, r1
 8009722:	8812      	ldrh	r2, [r2, #0]
 8009724:	4974      	ldr	r1, [pc, #464]	@ (80098f8 <USB_ActivateEndpoint+0x2b0>)
 8009726:	430a      	orrs	r2, r1
 8009728:	b292      	uxth	r2, r2
 800972a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	7b1b      	ldrb	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d000      	beq.n	8009736 <USB_ActivateEndpoint+0xee>
 8009734:	e177      	b.n	8009a26 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d100      	bne.n	8009740 <USB_ActivateEndpoint+0xf8>
 800973e:	e07a      	b.n	8009836 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2250      	movs	r2, #80	@ 0x50
 8009748:	5a9b      	ldrh	r3, [r3, r2]
 800974a:	b29b      	uxth	r3, r3
 800974c:	001a      	movs	r2, r3
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	189b      	adds	r3, r3, r2
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	00da      	lsls	r2, r3, #3
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	18d3      	adds	r3, r2, r3
 800975e:	2280      	movs	r2, #128	@ 0x80
 8009760:	00d2      	lsls	r2, r2, #3
 8009762:	4694      	mov	ip, r2
 8009764:	4463      	add	r3, ip
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	88db      	ldrh	r3, [r3, #6]
 800976c:	085b      	lsrs	r3, r3, #1
 800976e:	b29b      	uxth	r3, r3
 8009770:	18db      	adds	r3, r3, r3
 8009772:	b29a      	uxth	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	18d2      	adds	r2, r2, r3
 8009782:	2112      	movs	r1, #18
 8009784:	187b      	adds	r3, r7, r1
 8009786:	8812      	ldrh	r2, [r2, #0]
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	187b      	adds	r3, r7, r1
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	2240      	movs	r2, #64	@ 0x40
 8009790:	4013      	ands	r3, r2
 8009792:	d016      	beq.n	80097c2 <USB_ActivateEndpoint+0x17a>
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	18d3      	adds	r3, r2, r3
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	2010      	movs	r0, #16
 80097a4:	183b      	adds	r3, r7, r0
 80097a6:	4955      	ldr	r1, [pc, #340]	@ (80098fc <USB_ActivateEndpoint+0x2b4>)
 80097a8:	400a      	ands	r2, r1
 80097aa:	801a      	strh	r2, [r3, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	183a      	adds	r2, r7, r0
 80097b8:	8812      	ldrh	r2, [r2, #0]
 80097ba:	4951      	ldr	r1, [pc, #324]	@ (8009900 <USB_ActivateEndpoint+0x2b8>)
 80097bc:	430a      	orrs	r2, r1
 80097be:	b292      	uxth	r2, r2
 80097c0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	78db      	ldrb	r3, [r3, #3]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d01d      	beq.n	8009806 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	18d3      	adds	r3, r2, r3
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	200c      	movs	r0, #12
 80097da:	183b      	adds	r3, r7, r0
 80097dc:	4949      	ldr	r1, [pc, #292]	@ (8009904 <USB_ActivateEndpoint+0x2bc>)
 80097de:	400a      	ands	r2, r1
 80097e0:	801a      	strh	r2, [r3, #0]
 80097e2:	183b      	adds	r3, r7, r0
 80097e4:	183a      	adds	r2, r7, r0
 80097e6:	8812      	ldrh	r2, [r2, #0]
 80097e8:	2120      	movs	r1, #32
 80097ea:	404a      	eors	r2, r1
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	18d3      	adds	r3, r2, r3
 80097f8:	183a      	adds	r2, r7, r0
 80097fa:	8812      	ldrh	r2, [r2, #0]
 80097fc:	493e      	ldr	r1, [pc, #248]	@ (80098f8 <USB_ActivateEndpoint+0x2b0>)
 80097fe:	430a      	orrs	r2, r1
 8009800:	b292      	uxth	r2, r2
 8009802:	801a      	strh	r2, [r3, #0]
 8009804:	e2b5      	b.n	8009d72 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	18d3      	adds	r3, r2, r3
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29a      	uxth	r2, r3
 8009814:	200e      	movs	r0, #14
 8009816:	183b      	adds	r3, r7, r0
 8009818:	493a      	ldr	r1, [pc, #232]	@ (8009904 <USB_ActivateEndpoint+0x2bc>)
 800981a:	400a      	ands	r2, r1
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	18d3      	adds	r3, r2, r3
 8009828:	183a      	adds	r2, r7, r0
 800982a:	8812      	ldrh	r2, [r2, #0]
 800982c:	4932      	ldr	r1, [pc, #200]	@ (80098f8 <USB_ActivateEndpoint+0x2b0>)
 800982e:	430a      	orrs	r2, r1
 8009830:	b292      	uxth	r2, r2
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	e29d      	b.n	8009d72 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	633b      	str	r3, [r7, #48]	@ 0x30
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2250      	movs	r2, #80	@ 0x50
 800983e:	5a9b      	ldrh	r3, [r3, r2]
 8009840:	b29b      	uxth	r3, r3
 8009842:	001a      	movs	r2, r3
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	189b      	adds	r3, r3, r2
 8009848:	633b      	str	r3, [r7, #48]	@ 0x30
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	00da      	lsls	r2, r3, #3
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	18d3      	adds	r3, r2, r3
 8009854:	4a2c      	ldr	r2, [pc, #176]	@ (8009908 <USB_ActivateEndpoint+0x2c0>)
 8009856:	4694      	mov	ip, r2
 8009858:	4463      	add	r3, ip
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	88db      	ldrh	r3, [r3, #6]
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	18db      	adds	r3, r3, r3
 8009866:	b29a      	uxth	r2, r3
 8009868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2250      	movs	r2, #80	@ 0x50
 8009874:	5a9b      	ldrh	r3, [r3, r2]
 8009876:	b29b      	uxth	r3, r3
 8009878:	001a      	movs	r2, r3
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	189b      	adds	r3, r3, r2
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	00da      	lsls	r2, r3, #3
 8009886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009888:	18d3      	adds	r3, r2, r3
 800988a:	4a20      	ldr	r2, [pc, #128]	@ (800990c <USB_ActivateEndpoint+0x2c4>)
 800988c:	4694      	mov	ip, r2
 800988e:	4463      	add	r3, ip
 8009890:	627b      	str	r3, [r7, #36]	@ 0x24
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	059b      	lsls	r3, r3, #22
 800989a:	0d9b      	lsrs	r3, r3, #22
 800989c:	b29a      	uxth	r2, r3
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	801a      	strh	r2, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <USB_ActivateEndpoint+0x274>
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4a17      	ldr	r2, [pc, #92]	@ (8009910 <USB_ActivateEndpoint+0x2c8>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b8:	801a      	strh	r2, [r3, #0]
 80098ba:	e045      	b.n	8009948 <USB_ActivateEndpoint+0x300>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80098c2:	d827      	bhi.n	8009914 <USB_ActivateEndpoint+0x2cc>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2201      	movs	r2, #1
 80098d2:	4013      	ands	r3, r2
 80098d4:	d002      	beq.n	80098dc <USB_ActivateEndpoint+0x294>
 80098d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098d8:	3301      	adds	r3, #1
 80098da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	029b      	lsls	r3, r3, #10
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	4313      	orrs	r3, r2
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	801a      	strh	r2, [r3, #0]
 80098f2:	e029      	b.n	8009948 <USB_ActivateEndpoint+0x300>
 80098f4:	ffff898f 	.word	0xffff898f
 80098f8:	ffff8080 	.word	0xffff8080
 80098fc:	ffff8f8f 	.word	0xffff8f8f
 8009900:	ffff80c0 	.word	0xffff80c0
 8009904:	ffff8fbf 	.word	0xffff8fbf
 8009908:	00000404 	.word	0x00000404
 800990c:	00000406 	.word	0x00000406
 8009910:	ffff8000 	.word	0xffff8000
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	221f      	movs	r2, #31
 8009922:	4013      	ands	r3, r2
 8009924:	d102      	bne.n	800992c <USB_ActivateEndpoint+0x2e4>
 8009926:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009928:	3b01      	subs	r3, #1
 800992a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29a      	uxth	r2, r3
 8009932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009934:	b29b      	uxth	r3, r3
 8009936:	029b      	lsls	r3, r3, #10
 8009938:	b29b      	uxth	r3, r3
 800993a:	4313      	orrs	r3, r2
 800993c:	b29b      	uxth	r3, r3
 800993e:	4ab5      	ldr	r2, [pc, #724]	@ (8009c14 <USB_ActivateEndpoint+0x5cc>)
 8009940:	4313      	orrs	r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009946:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	18d2      	adds	r2, r2, r3
 8009952:	2122      	movs	r1, #34	@ 0x22
 8009954:	187b      	adds	r3, r7, r1
 8009956:	8812      	ldrh	r2, [r2, #0]
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	187b      	adds	r3, r7, r1
 800995c:	881a      	ldrh	r2, [r3, #0]
 800995e:	2380      	movs	r3, #128	@ 0x80
 8009960:	01db      	lsls	r3, r3, #7
 8009962:	4013      	ands	r3, r2
 8009964:	d016      	beq.n	8009994 <USB_ActivateEndpoint+0x34c>
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	18d3      	adds	r3, r2, r3
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29a      	uxth	r2, r3
 8009974:	2020      	movs	r0, #32
 8009976:	183b      	adds	r3, r7, r0
 8009978:	49a7      	ldr	r1, [pc, #668]	@ (8009c18 <USB_ActivateEndpoint+0x5d0>)
 800997a:	400a      	ands	r2, r1
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	18d3      	adds	r3, r2, r3
 8009988:	183a      	adds	r2, r7, r0
 800998a:	8812      	ldrh	r2, [r2, #0]
 800998c:	49a3      	ldr	r1, [pc, #652]	@ (8009c1c <USB_ActivateEndpoint+0x5d4>)
 800998e:	430a      	orrs	r2, r1
 8009990:	b292      	uxth	r2, r2
 8009992:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d125      	bne.n	80099e8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	18d3      	adds	r3, r2, r3
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	201c      	movs	r0, #28
 80099ac:	183b      	adds	r3, r7, r0
 80099ae:	499c      	ldr	r1, [pc, #624]	@ (8009c20 <USB_ActivateEndpoint+0x5d8>)
 80099b0:	400a      	ands	r2, r1
 80099b2:	801a      	strh	r2, [r3, #0]
 80099b4:	183b      	adds	r3, r7, r0
 80099b6:	183a      	adds	r2, r7, r0
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	2180      	movs	r1, #128	@ 0x80
 80099bc:	0149      	lsls	r1, r1, #5
 80099be:	404a      	eors	r2, r1
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	183b      	adds	r3, r7, r0
 80099c4:	183a      	adds	r2, r7, r0
 80099c6:	8812      	ldrh	r2, [r2, #0]
 80099c8:	2180      	movs	r1, #128	@ 0x80
 80099ca:	0189      	lsls	r1, r1, #6
 80099cc:	404a      	eors	r2, r1
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	18d3      	adds	r3, r2, r3
 80099da:	183a      	adds	r2, r7, r0
 80099dc:	8812      	ldrh	r2, [r2, #0]
 80099de:	4991      	ldr	r1, [pc, #580]	@ (8009c24 <USB_ActivateEndpoint+0x5dc>)
 80099e0:	430a      	orrs	r2, r1
 80099e2:	b292      	uxth	r2, r2
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	e1c4      	b.n	8009d72 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	18d3      	adds	r3, r2, r3
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	201e      	movs	r0, #30
 80099f8:	183b      	adds	r3, r7, r0
 80099fa:	4989      	ldr	r1, [pc, #548]	@ (8009c20 <USB_ActivateEndpoint+0x5d8>)
 80099fc:	400a      	ands	r2, r1
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	183b      	adds	r3, r7, r0
 8009a02:	183a      	adds	r2, r7, r0
 8009a04:	8812      	ldrh	r2, [r2, #0]
 8009a06:	2180      	movs	r1, #128	@ 0x80
 8009a08:	0189      	lsls	r1, r1, #6
 8009a0a:	404a      	eors	r2, r1
 8009a0c:	801a      	strh	r2, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	18d3      	adds	r3, r2, r3
 8009a18:	183a      	adds	r2, r7, r0
 8009a1a:	8812      	ldrh	r2, [r2, #0]
 8009a1c:	4981      	ldr	r1, [pc, #516]	@ (8009c24 <USB_ActivateEndpoint+0x5dc>)
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	b292      	uxth	r2, r2
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	e1a5      	b.n	8009d72 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	78db      	ldrb	r3, [r3, #3]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d117      	bne.n	8009a5e <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	18d3      	adds	r3, r2, r3
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	2062      	movs	r0, #98	@ 0x62
 8009a3e:	183b      	adds	r3, r7, r0
 8009a40:	4975      	ldr	r1, [pc, #468]	@ (8009c18 <USB_ActivateEndpoint+0x5d0>)
 8009a42:	400a      	ands	r2, r1
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	18d3      	adds	r3, r2, r3
 8009a50:	183a      	adds	r2, r7, r0
 8009a52:	8812      	ldrh	r2, [r2, #0]
 8009a54:	4974      	ldr	r1, [pc, #464]	@ (8009c28 <USB_ActivateEndpoint+0x5e0>)
 8009a56:	430a      	orrs	r2, r1
 8009a58:	b292      	uxth	r2, r2
 8009a5a:	801a      	strh	r2, [r3, #0]
 8009a5c:	e016      	b.n	8009a8c <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	18d3      	adds	r3, r2, r3
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	2064      	movs	r0, #100	@ 0x64
 8009a6e:	183b      	adds	r3, r7, r0
 8009a70:	496e      	ldr	r1, [pc, #440]	@ (8009c2c <USB_ActivateEndpoint+0x5e4>)
 8009a72:	400a      	ands	r2, r1
 8009a74:	801a      	strh	r2, [r3, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	18d3      	adds	r3, r2, r3
 8009a80:	183a      	adds	r2, r7, r0
 8009a82:	8812      	ldrh	r2, [r2, #0]
 8009a84:	4967      	ldr	r1, [pc, #412]	@ (8009c24 <USB_ActivateEndpoint+0x5dc>)
 8009a86:	430a      	orrs	r2, r1
 8009a88:	b292      	uxth	r2, r2
 8009a8a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2250      	movs	r2, #80	@ 0x50
 8009a94:	5a9b      	ldrh	r3, [r3, r2]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	001a      	movs	r2, r3
 8009a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a9c:	189b      	adds	r3, r3, r2
 8009a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	00da      	lsls	r2, r3, #3
 8009aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aa8:	18d3      	adds	r3, r2, r3
 8009aaa:	2280      	movs	r2, #128	@ 0x80
 8009aac:	00d2      	lsls	r2, r2, #3
 8009aae:	4694      	mov	ip, r2
 8009ab0:	4463      	add	r3, ip
 8009ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	891b      	ldrh	r3, [r3, #8]
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	18db      	adds	r3, r3, r3
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2250      	movs	r2, #80	@ 0x50
 8009acc:	5a9b      	ldrh	r3, [r3, r2]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	00da      	lsls	r2, r3, #3
 8009ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ae0:	18d3      	adds	r3, r2, r3
 8009ae2:	4a53      	ldr	r2, [pc, #332]	@ (8009c30 <USB_ActivateEndpoint+0x5e8>)
 8009ae4:	4694      	mov	ip, r2
 8009ae6:	4463      	add	r3, ip
 8009ae8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	895b      	ldrh	r3, [r3, #10]
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	18db      	adds	r3, r3, r3
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d000      	beq.n	8009b04 <USB_ActivateEndpoint+0x4bc>
 8009b02:	e09b      	b.n	8009c3c <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	18d2      	adds	r2, r2, r3
 8009b0e:	2140      	movs	r1, #64	@ 0x40
 8009b10:	187b      	adds	r3, r7, r1
 8009b12:	8812      	ldrh	r2, [r2, #0]
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	881a      	ldrh	r2, [r3, #0]
 8009b1a:	2380      	movs	r3, #128	@ 0x80
 8009b1c:	01db      	lsls	r3, r3, #7
 8009b1e:	4013      	ands	r3, r2
 8009b20:	d016      	beq.n	8009b50 <USB_ActivateEndpoint+0x508>
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	18d3      	adds	r3, r2, r3
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	203e      	movs	r0, #62	@ 0x3e
 8009b32:	183b      	adds	r3, r7, r0
 8009b34:	4938      	ldr	r1, [pc, #224]	@ (8009c18 <USB_ActivateEndpoint+0x5d0>)
 8009b36:	400a      	ands	r2, r1
 8009b38:	801a      	strh	r2, [r3, #0]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	18d3      	adds	r3, r2, r3
 8009b44:	183a      	adds	r2, r7, r0
 8009b46:	8812      	ldrh	r2, [r2, #0]
 8009b48:	4934      	ldr	r1, [pc, #208]	@ (8009c1c <USB_ActivateEndpoint+0x5d4>)
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	b292      	uxth	r2, r2
 8009b4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	18d2      	adds	r2, r2, r3
 8009b5a:	213c      	movs	r1, #60	@ 0x3c
 8009b5c:	187b      	adds	r3, r7, r1
 8009b5e:	8812      	ldrh	r2, [r2, #0]
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	187b      	adds	r3, r7, r1
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	2240      	movs	r2, #64	@ 0x40
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d016      	beq.n	8009b9a <USB_ActivateEndpoint+0x552>
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	18d3      	adds	r3, r2, r3
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	203a      	movs	r0, #58	@ 0x3a
 8009b7c:	183b      	adds	r3, r7, r0
 8009b7e:	4926      	ldr	r1, [pc, #152]	@ (8009c18 <USB_ActivateEndpoint+0x5d0>)
 8009b80:	400a      	ands	r2, r1
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	18d3      	adds	r3, r2, r3
 8009b8e:	183a      	adds	r2, r7, r0
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	4928      	ldr	r1, [pc, #160]	@ (8009c34 <USB_ActivateEndpoint+0x5ec>)
 8009b94:	430a      	orrs	r2, r1
 8009b96:	b292      	uxth	r2, r2
 8009b98:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	2038      	movs	r0, #56	@ 0x38
 8009baa:	183b      	adds	r3, r7, r0
 8009bac:	491c      	ldr	r1, [pc, #112]	@ (8009c20 <USB_ActivateEndpoint+0x5d8>)
 8009bae:	400a      	ands	r2, r1
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	183b      	adds	r3, r7, r0
 8009bb4:	183a      	adds	r2, r7, r0
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	0149      	lsls	r1, r1, #5
 8009bbc:	404a      	eors	r2, r1
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	183b      	adds	r3, r7, r0
 8009bc2:	183a      	adds	r2, r7, r0
 8009bc4:	8812      	ldrh	r2, [r2, #0]
 8009bc6:	2180      	movs	r1, #128	@ 0x80
 8009bc8:	0189      	lsls	r1, r1, #6
 8009bca:	404a      	eors	r2, r1
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	18d3      	adds	r3, r2, r3
 8009bd8:	183a      	adds	r2, r7, r0
 8009bda:	8812      	ldrh	r2, [r2, #0]
 8009bdc:	4911      	ldr	r1, [pc, #68]	@ (8009c24 <USB_ActivateEndpoint+0x5dc>)
 8009bde:	430a      	orrs	r2, r1
 8009be0:	b292      	uxth	r2, r2
 8009be2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	18d3      	adds	r3, r2, r3
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	2036      	movs	r0, #54	@ 0x36
 8009bf4:	183b      	adds	r3, r7, r0
 8009bf6:	4910      	ldr	r1, [pc, #64]	@ (8009c38 <USB_ActivateEndpoint+0x5f0>)
 8009bf8:	400a      	ands	r2, r1
 8009bfa:	801a      	strh	r2, [r3, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	18d3      	adds	r3, r2, r3
 8009c06:	183a      	adds	r2, r7, r0
 8009c08:	8812      	ldrh	r2, [r2, #0]
 8009c0a:	4906      	ldr	r1, [pc, #24]	@ (8009c24 <USB_ActivateEndpoint+0x5dc>)
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	801a      	strh	r2, [r3, #0]
 8009c12:	e0ae      	b.n	8009d72 <USB_ActivateEndpoint+0x72a>
 8009c14:	ffff8000 	.word	0xffff8000
 8009c18:	ffff8f8f 	.word	0xffff8f8f
 8009c1c:	ffffc080 	.word	0xffffc080
 8009c20:	ffffbf8f 	.word	0xffffbf8f
 8009c24:	ffff8080 	.word	0xffff8080
 8009c28:	ffff8180 	.word	0xffff8180
 8009c2c:	ffff8e8f 	.word	0xffff8e8f
 8009c30:	00000404 	.word	0x00000404
 8009c34:	ffff80c0 	.word	0xffff80c0
 8009c38:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	18d2      	adds	r2, r2, r3
 8009c46:	214e      	movs	r1, #78	@ 0x4e
 8009c48:	187b      	adds	r3, r7, r1
 8009c4a:	8812      	ldrh	r2, [r2, #0]
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	187b      	adds	r3, r7, r1
 8009c50:	881a      	ldrh	r2, [r3, #0]
 8009c52:	2380      	movs	r3, #128	@ 0x80
 8009c54:	01db      	lsls	r3, r3, #7
 8009c56:	4013      	ands	r3, r2
 8009c58:	d016      	beq.n	8009c88 <USB_ActivateEndpoint+0x640>
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	18d3      	adds	r3, r2, r3
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	204c      	movs	r0, #76	@ 0x4c
 8009c6a:	183b      	adds	r3, r7, r0
 8009c6c:	4944      	ldr	r1, [pc, #272]	@ (8009d80 <USB_ActivateEndpoint+0x738>)
 8009c6e:	400a      	ands	r2, r1
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	18d3      	adds	r3, r2, r3
 8009c7c:	183a      	adds	r2, r7, r0
 8009c7e:	8812      	ldrh	r2, [r2, #0]
 8009c80:	4940      	ldr	r1, [pc, #256]	@ (8009d84 <USB_ActivateEndpoint+0x73c>)
 8009c82:	430a      	orrs	r2, r1
 8009c84:	b292      	uxth	r2, r2
 8009c86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	18d2      	adds	r2, r2, r3
 8009c92:	214a      	movs	r1, #74	@ 0x4a
 8009c94:	187b      	adds	r3, r7, r1
 8009c96:	8812      	ldrh	r2, [r2, #0]
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	187b      	adds	r3, r7, r1
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	2240      	movs	r2, #64	@ 0x40
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d016      	beq.n	8009cd2 <USB_ActivateEndpoint+0x68a>
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	18d3      	adds	r3, r2, r3
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	2048      	movs	r0, #72	@ 0x48
 8009cb4:	183b      	adds	r3, r7, r0
 8009cb6:	4932      	ldr	r1, [pc, #200]	@ (8009d80 <USB_ActivateEndpoint+0x738>)
 8009cb8:	400a      	ands	r2, r1
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	18d3      	adds	r3, r2, r3
 8009cc6:	183a      	adds	r2, r7, r0
 8009cc8:	8812      	ldrh	r2, [r2, #0]
 8009cca:	492f      	ldr	r1, [pc, #188]	@ (8009d88 <USB_ActivateEndpoint+0x740>)
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	78db      	ldrb	r3, [r3, #3]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d01d      	beq.n	8009d16 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	18d3      	adds	r3, r2, r3
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	2044      	movs	r0, #68	@ 0x44
 8009cea:	183b      	adds	r3, r7, r0
 8009cec:	4927      	ldr	r1, [pc, #156]	@ (8009d8c <USB_ActivateEndpoint+0x744>)
 8009cee:	400a      	ands	r2, r1
 8009cf0:	801a      	strh	r2, [r3, #0]
 8009cf2:	183b      	adds	r3, r7, r0
 8009cf4:	183a      	adds	r2, r7, r0
 8009cf6:	8812      	ldrh	r2, [r2, #0]
 8009cf8:	2120      	movs	r1, #32
 8009cfa:	404a      	eors	r2, r1
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	18d3      	adds	r3, r2, r3
 8009d08:	183a      	adds	r2, r7, r0
 8009d0a:	8812      	ldrh	r2, [r2, #0]
 8009d0c:	4920      	ldr	r1, [pc, #128]	@ (8009d90 <USB_ActivateEndpoint+0x748>)
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	b292      	uxth	r2, r2
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	e016      	b.n	8009d44 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	18d3      	adds	r3, r2, r3
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	2046      	movs	r0, #70	@ 0x46
 8009d26:	183b      	adds	r3, r7, r0
 8009d28:	4918      	ldr	r1, [pc, #96]	@ (8009d8c <USB_ActivateEndpoint+0x744>)
 8009d2a:	400a      	ands	r2, r1
 8009d2c:	801a      	strh	r2, [r3, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	18d3      	adds	r3, r2, r3
 8009d38:	183a      	adds	r2, r7, r0
 8009d3a:	8812      	ldrh	r2, [r2, #0]
 8009d3c:	4914      	ldr	r1, [pc, #80]	@ (8009d90 <USB_ActivateEndpoint+0x748>)
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	b292      	uxth	r2, r2
 8009d42:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	18d3      	adds	r3, r2, r3
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	2042      	movs	r0, #66	@ 0x42
 8009d54:	183b      	adds	r3, r7, r0
 8009d56:	490f      	ldr	r1, [pc, #60]	@ (8009d94 <USB_ActivateEndpoint+0x74c>)
 8009d58:	400a      	ands	r2, r1
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	18d3      	adds	r3, r2, r3
 8009d66:	183a      	adds	r2, r7, r0
 8009d68:	8812      	ldrh	r2, [r2, #0]
 8009d6a:	4909      	ldr	r1, [pc, #36]	@ (8009d90 <USB_ActivateEndpoint+0x748>)
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d72:	236f      	movs	r3, #111	@ 0x6f
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	781b      	ldrb	r3, [r3, #0]
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b01c      	add	sp, #112	@ 0x70
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	ffff8f8f 	.word	0xffff8f8f
 8009d84:	ffffc080 	.word	0xffffc080
 8009d88:	ffff80c0 	.word	0xffff80c0
 8009d8c:	ffff8fbf 	.word	0xffff8fbf
 8009d90:	ffff8080 	.word	0xffff8080
 8009d94:	ffffbf8f 	.word	0xffffbf8f

08009d98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08c      	sub	sp, #48	@ 0x30
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	7b1b      	ldrb	r3, [r3, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d000      	beq.n	8009dac <USB_DeactivateEndpoint+0x14>
 8009daa:	e07e      	b.n	8009eaa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d03c      	beq.n	8009e2e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	18d2      	adds	r2, r2, r3
 8009dbe:	210c      	movs	r1, #12
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	2240      	movs	r2, #64	@ 0x40
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d016      	beq.n	8009dfe <USB_DeactivateEndpoint+0x66>
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	18d3      	adds	r3, r2, r3
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	200a      	movs	r0, #10
 8009de0:	183b      	adds	r3, r7, r0
 8009de2:	49c7      	ldr	r1, [pc, #796]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 8009de4:	400a      	ands	r2, r1
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	18d3      	adds	r3, r2, r3
 8009df2:	183a      	adds	r2, r7, r0
 8009df4:	8812      	ldrh	r2, [r2, #0]
 8009df6:	49c3      	ldr	r1, [pc, #780]	@ (800a104 <USB_DeactivateEndpoint+0x36c>)
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	18d3      	adds	r3, r2, r3
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	2008      	movs	r0, #8
 8009e0e:	183b      	adds	r3, r7, r0
 8009e10:	49bd      	ldr	r1, [pc, #756]	@ (800a108 <USB_DeactivateEndpoint+0x370>)
 8009e12:	400a      	ands	r2, r1
 8009e14:	801a      	strh	r2, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	18d3      	adds	r3, r2, r3
 8009e20:	183a      	adds	r2, r7, r0
 8009e22:	8812      	ldrh	r2, [r2, #0]
 8009e24:	49b9      	ldr	r1, [pc, #740]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 8009e26:	430a      	orrs	r2, r1
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	e163      	b.n	800a0f6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	18d2      	adds	r2, r2, r3
 8009e38:	2112      	movs	r1, #18
 8009e3a:	187b      	adds	r3, r7, r1
 8009e3c:	8812      	ldrh	r2, [r2, #0]
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	187b      	adds	r3, r7, r1
 8009e42:	881a      	ldrh	r2, [r3, #0]
 8009e44:	2380      	movs	r3, #128	@ 0x80
 8009e46:	01db      	lsls	r3, r3, #7
 8009e48:	4013      	ands	r3, r2
 8009e4a:	d016      	beq.n	8009e7a <USB_DeactivateEndpoint+0xe2>
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	18d3      	adds	r3, r2, r3
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	2010      	movs	r0, #16
 8009e5c:	183b      	adds	r3, r7, r0
 8009e5e:	49a8      	ldr	r1, [pc, #672]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 8009e60:	400a      	ands	r2, r1
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	18d3      	adds	r3, r2, r3
 8009e6e:	183a      	adds	r2, r7, r0
 8009e70:	8812      	ldrh	r2, [r2, #0]
 8009e72:	49a7      	ldr	r1, [pc, #668]	@ (800a110 <USB_DeactivateEndpoint+0x378>)
 8009e74:	430a      	orrs	r2, r1
 8009e76:	b292      	uxth	r2, r2
 8009e78:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	18d3      	adds	r3, r2, r3
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	200e      	movs	r0, #14
 8009e8a:	183b      	adds	r3, r7, r0
 8009e8c:	49a1      	ldr	r1, [pc, #644]	@ (800a114 <USB_DeactivateEndpoint+0x37c>)
 8009e8e:	400a      	ands	r2, r1
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	18d3      	adds	r3, r2, r3
 8009e9c:	183a      	adds	r2, r7, r0
 8009e9e:	8812      	ldrh	r2, [r2, #0]
 8009ea0:	499a      	ldr	r1, [pc, #616]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	b292      	uxth	r2, r2
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e125      	b.n	800a0f6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d000      	beq.n	8009eb4 <USB_DeactivateEndpoint+0x11c>
 8009eb2:	e090      	b.n	8009fd6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	18d2      	adds	r2, r2, r3
 8009ebe:	2120      	movs	r1, #32
 8009ec0:	187b      	adds	r3, r7, r1
 8009ec2:	8812      	ldrh	r2, [r2, #0]
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	187b      	adds	r3, r7, r1
 8009ec8:	881a      	ldrh	r2, [r3, #0]
 8009eca:	2380      	movs	r3, #128	@ 0x80
 8009ecc:	01db      	lsls	r3, r3, #7
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d016      	beq.n	8009f00 <USB_DeactivateEndpoint+0x168>
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	18d3      	adds	r3, r2, r3
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	201e      	movs	r0, #30
 8009ee2:	183b      	adds	r3, r7, r0
 8009ee4:	4986      	ldr	r1, [pc, #536]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 8009ee6:	400a      	ands	r2, r1
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	18d3      	adds	r3, r2, r3
 8009ef4:	183a      	adds	r2, r7, r0
 8009ef6:	8812      	ldrh	r2, [r2, #0]
 8009ef8:	4985      	ldr	r1, [pc, #532]	@ (800a110 <USB_DeactivateEndpoint+0x378>)
 8009efa:	430a      	orrs	r2, r1
 8009efc:	b292      	uxth	r2, r2
 8009efe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	18d2      	adds	r2, r2, r3
 8009f0a:	211c      	movs	r1, #28
 8009f0c:	187b      	adds	r3, r7, r1
 8009f0e:	8812      	ldrh	r2, [r2, #0]
 8009f10:	801a      	strh	r2, [r3, #0]
 8009f12:	187b      	adds	r3, r7, r1
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	2240      	movs	r2, #64	@ 0x40
 8009f18:	4013      	ands	r3, r2
 8009f1a:	d016      	beq.n	8009f4a <USB_DeactivateEndpoint+0x1b2>
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	18d3      	adds	r3, r2, r3
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	201a      	movs	r0, #26
 8009f2c:	183b      	adds	r3, r7, r0
 8009f2e:	4974      	ldr	r1, [pc, #464]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 8009f30:	400a      	ands	r2, r1
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	18d3      	adds	r3, r2, r3
 8009f3e:	183a      	adds	r2, r7, r0
 8009f40:	8812      	ldrh	r2, [r2, #0]
 8009f42:	4970      	ldr	r1, [pc, #448]	@ (800a104 <USB_DeactivateEndpoint+0x36c>)
 8009f44:	430a      	orrs	r2, r1
 8009f46:	b292      	uxth	r2, r2
 8009f48:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	18d3      	adds	r3, r2, r3
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	2018      	movs	r0, #24
 8009f5a:	183b      	adds	r3, r7, r0
 8009f5c:	4968      	ldr	r1, [pc, #416]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 8009f5e:	400a      	ands	r2, r1
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	18d3      	adds	r3, r2, r3
 8009f6c:	183a      	adds	r2, r7, r0
 8009f6e:	8812      	ldrh	r2, [r2, #0]
 8009f70:	4964      	ldr	r1, [pc, #400]	@ (800a104 <USB_DeactivateEndpoint+0x36c>)
 8009f72:	430a      	orrs	r2, r1
 8009f74:	b292      	uxth	r2, r2
 8009f76:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	18d3      	adds	r3, r2, r3
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	2016      	movs	r0, #22
 8009f88:	183b      	adds	r3, r7, r0
 8009f8a:	4962      	ldr	r1, [pc, #392]	@ (800a114 <USB_DeactivateEndpoint+0x37c>)
 8009f8c:	400a      	ands	r2, r1
 8009f8e:	801a      	strh	r2, [r3, #0]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	18d3      	adds	r3, r2, r3
 8009f9a:	183a      	adds	r2, r7, r0
 8009f9c:	8812      	ldrh	r2, [r2, #0]
 8009f9e:	495b      	ldr	r1, [pc, #364]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	b292      	uxth	r2, r2
 8009fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	18d3      	adds	r3, r2, r3
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	2014      	movs	r0, #20
 8009fb6:	183b      	adds	r3, r7, r0
 8009fb8:	4953      	ldr	r1, [pc, #332]	@ (800a108 <USB_DeactivateEndpoint+0x370>)
 8009fba:	400a      	ands	r2, r1
 8009fbc:	801a      	strh	r2, [r3, #0]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	18d3      	adds	r3, r2, r3
 8009fc8:	183a      	adds	r2, r7, r0
 8009fca:	8812      	ldrh	r2, [r2, #0]
 8009fcc:	494f      	ldr	r1, [pc, #316]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	b292      	uxth	r2, r2
 8009fd2:	801a      	strh	r2, [r3, #0]
 8009fd4:	e08f      	b.n	800a0f6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	18d2      	adds	r2, r2, r3
 8009fe0:	212e      	movs	r1, #46	@ 0x2e
 8009fe2:	187b      	adds	r3, r7, r1
 8009fe4:	8812      	ldrh	r2, [r2, #0]
 8009fe6:	801a      	strh	r2, [r3, #0]
 8009fe8:	187b      	adds	r3, r7, r1
 8009fea:	881a      	ldrh	r2, [r3, #0]
 8009fec:	2380      	movs	r3, #128	@ 0x80
 8009fee:	01db      	lsls	r3, r3, #7
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d016      	beq.n	800a022 <USB_DeactivateEndpoint+0x28a>
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	18d3      	adds	r3, r2, r3
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	b29a      	uxth	r2, r3
 800a002:	202c      	movs	r0, #44	@ 0x2c
 800a004:	183b      	adds	r3, r7, r0
 800a006:	493e      	ldr	r1, [pc, #248]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 800a008:	400a      	ands	r2, r1
 800a00a:	801a      	strh	r2, [r3, #0]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	18d3      	adds	r3, r2, r3
 800a016:	183a      	adds	r2, r7, r0
 800a018:	8812      	ldrh	r2, [r2, #0]
 800a01a:	493d      	ldr	r1, [pc, #244]	@ (800a110 <USB_DeactivateEndpoint+0x378>)
 800a01c:	430a      	orrs	r2, r1
 800a01e:	b292      	uxth	r2, r2
 800a020:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	18d2      	adds	r2, r2, r3
 800a02c:	212a      	movs	r1, #42	@ 0x2a
 800a02e:	187b      	adds	r3, r7, r1
 800a030:	8812      	ldrh	r2, [r2, #0]
 800a032:	801a      	strh	r2, [r3, #0]
 800a034:	187b      	adds	r3, r7, r1
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	2240      	movs	r2, #64	@ 0x40
 800a03a:	4013      	ands	r3, r2
 800a03c:	d016      	beq.n	800a06c <USB_DeactivateEndpoint+0x2d4>
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	18d3      	adds	r3, r2, r3
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	2028      	movs	r0, #40	@ 0x28
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	492b      	ldr	r1, [pc, #172]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 800a052:	400a      	ands	r2, r1
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	18d3      	adds	r3, r2, r3
 800a060:	183a      	adds	r2, r7, r0
 800a062:	8812      	ldrh	r2, [r2, #0]
 800a064:	4927      	ldr	r1, [pc, #156]	@ (800a104 <USB_DeactivateEndpoint+0x36c>)
 800a066:	430a      	orrs	r2, r1
 800a068:	b292      	uxth	r2, r2
 800a06a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29a      	uxth	r2, r3
 800a07a:	2026      	movs	r0, #38	@ 0x26
 800a07c:	183b      	adds	r3, r7, r0
 800a07e:	4920      	ldr	r1, [pc, #128]	@ (800a100 <USB_DeactivateEndpoint+0x368>)
 800a080:	400a      	ands	r2, r1
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	18d3      	adds	r3, r2, r3
 800a08e:	183a      	adds	r2, r7, r0
 800a090:	8812      	ldrh	r2, [r2, #0]
 800a092:	491f      	ldr	r1, [pc, #124]	@ (800a110 <USB_DeactivateEndpoint+0x378>)
 800a094:	430a      	orrs	r2, r1
 800a096:	b292      	uxth	r2, r2
 800a098:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	18d3      	adds	r3, r2, r3
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	2024      	movs	r0, #36	@ 0x24
 800a0aa:	183b      	adds	r3, r7, r0
 800a0ac:	4916      	ldr	r1, [pc, #88]	@ (800a108 <USB_DeactivateEndpoint+0x370>)
 800a0ae:	400a      	ands	r2, r1
 800a0b0:	801a      	strh	r2, [r3, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	18d3      	adds	r3, r2, r3
 800a0bc:	183a      	adds	r2, r7, r0
 800a0be:	8812      	ldrh	r2, [r2, #0]
 800a0c0:	4912      	ldr	r1, [pc, #72]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	18d3      	adds	r3, r2, r3
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	2022      	movs	r0, #34	@ 0x22
 800a0d8:	183b      	adds	r3, r7, r0
 800a0da:	490e      	ldr	r1, [pc, #56]	@ (800a114 <USB_DeactivateEndpoint+0x37c>)
 800a0dc:	400a      	ands	r2, r1
 800a0de:	801a      	strh	r2, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	18d3      	adds	r3, r2, r3
 800a0ea:	183a      	adds	r2, r7, r0
 800a0ec:	8812      	ldrh	r2, [r2, #0]
 800a0ee:	4907      	ldr	r1, [pc, #28]	@ (800a10c <USB_DeactivateEndpoint+0x374>)
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b00c      	add	sp, #48	@ 0x30
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	ffff8f8f 	.word	0xffff8f8f
 800a104:	ffff80c0 	.word	0xffff80c0
 800a108:	ffff8fbf 	.word	0xffff8fbf
 800a10c:	ffff8080 	.word	0xffff8080
 800a110:	ffffc080 	.word	0xffffc080
 800a114:	ffffbf8f 	.word	0xffffbf8f

0800a118 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b0c3      	sub	sp, #268	@ 0x10c
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d001      	beq.n	800a12e <USB_EPStartXfer+0x16>
 800a12a:	f000 fd2d 	bl	800ab88 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	429a      	cmp	r2, r3
 800a138:	d905      	bls.n	800a146 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	1d7a      	adds	r2, r7, #5
 800a140:	32ff      	adds	r2, #255	@ 0xff
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	e004      	b.n	800a150 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	1d7a      	adds	r2, r7, #5
 800a14c:	32ff      	adds	r2, #255	@ 0xff
 800a14e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	7b1b      	ldrb	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d125      	bne.n	800a1a4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	6959      	ldr	r1, [r3, #20]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	88da      	ldrh	r2, [r3, #6]
 800a160:	1d7b      	adds	r3, r7, #5
 800a162:	33ff      	adds	r3, #255	@ 0xff
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fa3f 	bl	800b5ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2250      	movs	r2, #80	@ 0x50
 800a176:	5a9b      	ldrh	r3, [r3, r2]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	001a      	movs	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	00da      	lsls	r2, r3, #3
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	4ad7      	ldr	r2, [pc, #860]	@ (800a4ec <USB_EPStartXfer+0x3d4>)
 800a18e:	4694      	mov	ip, r2
 800a190:	4463      	add	r3, ip
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	1d7b      	adds	r3, r7, #5
 800a196:	33ff      	adds	r3, #255	@ 0xff
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	f000 fccd 	bl	800ab3e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	78db      	ldrb	r3, [r3, #3]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d000      	beq.n	800a1ae <USB_EPStartXfer+0x96>
 800a1ac:	e362      	b.n	800a874 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6a1a      	ldr	r2, [r3, #32]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d800      	bhi.n	800a1bc <USB_EPStartXfer+0xa4>
 800a1ba:	e309      	b.n	800a7d0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	18d3      	adds	r3, r2, r3
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	2056      	movs	r0, #86	@ 0x56
 800a1cc:	183b      	adds	r3, r7, r0
 800a1ce:	49c8      	ldr	r1, [pc, #800]	@ (800a4f0 <USB_EPStartXfer+0x3d8>)
 800a1d0:	400a      	ands	r2, r1
 800a1d2:	801a      	strh	r2, [r3, #0]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	18d3      	adds	r3, r2, r3
 800a1de:	183a      	adds	r2, r7, r0
 800a1e0:	8812      	ldrh	r2, [r2, #0]
 800a1e2:	49c4      	ldr	r1, [pc, #784]	@ (800a4f4 <USB_EPStartXfer+0x3dc>)
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	b292      	uxth	r2, r2
 800a1e8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6a1a      	ldr	r2, [r3, #32]
 800a1ee:	1d7b      	adds	r3, r7, #5
 800a1f0:	33ff      	adds	r3, #255	@ 0xff
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	18d3      	adds	r3, r2, r3
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	001a      	movs	r2, r3
 800a20a:	2340      	movs	r3, #64	@ 0x40
 800a20c:	4013      	ands	r3, r2
 800a20e:	d100      	bne.n	800a212 <USB_EPStartXfer+0xfa>
 800a210:	e176      	b.n	800a500 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	633b      	str	r3, [r7, #48]	@ 0x30
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d000      	beq.n	800a220 <USB_EPStartXfer+0x108>
 800a21e:	e074      	b.n	800a30a <USB_EPStartXfer+0x1f2>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2250      	movs	r2, #80	@ 0x50
 800a228:	5a9b      	ldrh	r3, [r3, r2]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	001a      	movs	r2, r3
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	189b      	adds	r3, r3, r2
 800a232:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	00da      	lsls	r2, r3, #3
 800a23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	4aae      	ldr	r2, [pc, #696]	@ (800a4f8 <USB_EPStartXfer+0x3e0>)
 800a240:	4694      	mov	ip, r2
 800a242:	4463      	add	r3, ip
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	059b      	lsls	r3, r3, #22
 800a24e:	0d9b      	lsrs	r3, r3, #22
 800a250:	b29a      	uxth	r2, r3
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	1d7b      	adds	r3, r7, #5
 800a258:	33ff      	adds	r3, #255	@ 0xff
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d108      	bne.n	800a272 <USB_EPStartXfer+0x15a>
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	b29b      	uxth	r3, r3
 800a266:	4aa5      	ldr	r2, [pc, #660]	@ (800a4fc <USB_EPStartXfer+0x3e4>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	801a      	strh	r2, [r3, #0]
 800a270:	e066      	b.n	800a340 <USB_EPStartXfer+0x228>
 800a272:	1d7b      	adds	r3, r7, #5
 800a274:	33ff      	adds	r3, #255	@ 0xff
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b3e      	cmp	r3, #62	@ 0x3e
 800a27a:	d821      	bhi.n	800a2c0 <USB_EPStartXfer+0x1a8>
 800a27c:	1d7b      	adds	r3, r7, #5
 800a27e:	33ff      	adds	r3, #255	@ 0xff
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	1c7a      	adds	r2, r7, #1
 800a286:	32ff      	adds	r2, #255	@ 0xff
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	1d7b      	adds	r3, r7, #5
 800a28c:	33ff      	adds	r3, #255	@ 0xff
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2201      	movs	r2, #1
 800a292:	4013      	ands	r3, r2
 800a294:	d006      	beq.n	800a2a4 <USB_EPStartXfer+0x18c>
 800a296:	1c7b      	adds	r3, r7, #1
 800a298:	33ff      	adds	r3, #255	@ 0xff
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3301      	adds	r3, #1
 800a29e:	1c7a      	adds	r2, r7, #1
 800a2a0:	32ff      	adds	r2, #255	@ 0xff
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	1c7b      	adds	r3, r7, #1
 800a2ac:	33ff      	adds	r3, #255	@ 0xff
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	029b      	lsls	r3, r3, #10
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	e03f      	b.n	800a340 <USB_EPStartXfer+0x228>
 800a2c0:	1d7b      	adds	r3, r7, #5
 800a2c2:	33ff      	adds	r3, #255	@ 0xff
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	1c7a      	adds	r2, r7, #1
 800a2ca:	32ff      	adds	r2, #255	@ 0xff
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	1d7b      	adds	r3, r7, #5
 800a2d0:	33ff      	adds	r3, #255	@ 0xff
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	221f      	movs	r2, #31
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d106      	bne.n	800a2e8 <USB_EPStartXfer+0x1d0>
 800a2da:	1c7b      	adds	r3, r7, #1
 800a2dc:	33ff      	adds	r3, #255	@ 0xff
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	1c7a      	adds	r2, r7, #1
 800a2e4:	32ff      	adds	r2, #255	@ 0xff
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	1c7b      	adds	r3, r7, #1
 800a2f0:	33ff      	adds	r3, #255	@ 0xff
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	029b      	lsls	r3, r3, #10
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	4a7f      	ldr	r2, [pc, #508]	@ (800a4fc <USB_EPStartXfer+0x3e4>)
 800a300:	4313      	orrs	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	801a      	strh	r2, [r3, #0]
 800a308:	e01a      	b.n	800a340 <USB_EPStartXfer+0x228>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d116      	bne.n	800a340 <USB_EPStartXfer+0x228>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2250      	movs	r2, #80	@ 0x50
 800a316:	5a9b      	ldrh	r3, [r3, r2]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	001a      	movs	r2, r3
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	633b      	str	r3, [r7, #48]	@ 0x30
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	00da      	lsls	r2, r3, #3
 800a328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32a:	18d3      	adds	r3, r2, r3
 800a32c:	4a72      	ldr	r2, [pc, #456]	@ (800a4f8 <USB_EPStartXfer+0x3e0>)
 800a32e:	4694      	mov	ip, r2
 800a330:	4463      	add	r3, ip
 800a332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a334:	1d7b      	adds	r3, r7, #5
 800a336:	33ff      	adds	r3, #255	@ 0xff
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a340:	2076      	movs	r0, #118	@ 0x76
 800a342:	183b      	adds	r3, r7, r0
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	8952      	ldrh	r2, [r2, #10]
 800a348:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6959      	ldr	r1, [r3, #20]
 800a34e:	1d7b      	adds	r3, r7, #5
 800a350:	33ff      	adds	r3, #255	@ 0xff
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	b29c      	uxth	r4, r3
 800a356:	183b      	adds	r3, r7, r0
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	0023      	movs	r3, r4
 800a35e:	f001 f945 	bl	800b5ec <USB_WritePMA>
            ep->xfer_buff += len;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695a      	ldr	r2, [r3, #20]
 800a366:	1d7b      	adds	r3, r7, #5
 800a368:	33ff      	adds	r3, #255	@ 0xff
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	18d2      	adds	r2, r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6a1a      	ldr	r2, [r3, #32]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d908      	bls.n	800a390 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6a1a      	ldr	r2, [r3, #32]
 800a382:	1d7b      	adds	r3, r7, #5
 800a384:	33ff      	adds	r3, #255	@ 0xff
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	1ad2      	subs	r2, r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	621a      	str	r2, [r3, #32]
 800a38e:	e007      	b.n	800a3a0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	1d7a      	adds	r2, r7, #5
 800a396:	32ff      	adds	r2, #255	@ 0xff
 800a398:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d000      	beq.n	800a3aa <USB_EPStartXfer+0x292>
 800a3a8:	e070      	b.n	800a48c <USB_EPStartXfer+0x374>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2250      	movs	r2, #80	@ 0x50
 800a3b2:	5a9b      	ldrh	r3, [r3, r2]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	001a      	movs	r2, r3
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	189b      	adds	r3, r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	00da      	lsls	r2, r3, #3
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	18d3      	adds	r3, r2, r3
 800a3c8:	4a48      	ldr	r2, [pc, #288]	@ (800a4ec <USB_EPStartXfer+0x3d4>)
 800a3ca:	4694      	mov	ip, r2
 800a3cc:	4463      	add	r3, ip
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	059b      	lsls	r3, r3, #22
 800a3d8:	0d9b      	lsrs	r3, r3, #22
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	1d7b      	adds	r3, r7, #5
 800a3e2:	33ff      	adds	r3, #255	@ 0xff
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d108      	bne.n	800a3fc <USB_EPStartXfer+0x2e4>
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4a42      	ldr	r2, [pc, #264]	@ (800a4fc <USB_EPStartXfer+0x3e4>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	801a      	strh	r2, [r3, #0]
 800a3fa:	e064      	b.n	800a4c6 <USB_EPStartXfer+0x3ae>
 800a3fc:	1d7b      	adds	r3, r7, #5
 800a3fe:	33ff      	adds	r3, #255	@ 0xff
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b3e      	cmp	r3, #62	@ 0x3e
 800a404:	d81f      	bhi.n	800a446 <USB_EPStartXfer+0x32e>
 800a406:	1d7b      	adds	r3, r7, #5
 800a408:	33ff      	adds	r3, #255	@ 0xff
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	21fc      	movs	r1, #252	@ 0xfc
 800a410:	187a      	adds	r2, r7, r1
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	1d7b      	adds	r3, r7, #5
 800a416:	33ff      	adds	r3, #255	@ 0xff
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2201      	movs	r2, #1
 800a41c:	4013      	ands	r3, r2
 800a41e:	d004      	beq.n	800a42a <USB_EPStartXfer+0x312>
 800a420:	187b      	adds	r3, r7, r1
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3301      	adds	r3, #1
 800a426:	187a      	adds	r2, r7, r1
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	23fc      	movs	r3, #252	@ 0xfc
 800a432:	18fb      	adds	r3, r7, r3
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	029b      	lsls	r3, r3, #10
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4313      	orrs	r3, r2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	801a      	strh	r2, [r3, #0]
 800a444:	e03f      	b.n	800a4c6 <USB_EPStartXfer+0x3ae>
 800a446:	1d7b      	adds	r3, r7, #5
 800a448:	33ff      	adds	r3, #255	@ 0xff
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	095b      	lsrs	r3, r3, #5
 800a44e:	21fc      	movs	r1, #252	@ 0xfc
 800a450:	187a      	adds	r2, r7, r1
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	1d7b      	adds	r3, r7, #5
 800a456:	33ff      	adds	r3, #255	@ 0xff
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	221f      	movs	r2, #31
 800a45c:	4013      	ands	r3, r2
 800a45e:	d104      	bne.n	800a46a <USB_EPStartXfer+0x352>
 800a460:	187b      	adds	r3, r7, r1
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3b01      	subs	r3, #1
 800a466:	187a      	adds	r2, r7, r1
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29a      	uxth	r2, r3
 800a470:	23fc      	movs	r3, #252	@ 0xfc
 800a472:	18fb      	adds	r3, r7, r3
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	b29b      	uxth	r3, r3
 800a478:	029b      	lsls	r3, r3, #10
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	4313      	orrs	r3, r2
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4a1e      	ldr	r2, [pc, #120]	@ (800a4fc <USB_EPStartXfer+0x3e4>)
 800a482:	4313      	orrs	r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e01c      	b.n	800a4c6 <USB_EPStartXfer+0x3ae>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d118      	bne.n	800a4c6 <USB_EPStartXfer+0x3ae>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	623b      	str	r3, [r7, #32]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2250      	movs	r2, #80	@ 0x50
 800a49c:	5a9b      	ldrh	r3, [r3, r2]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	001a      	movs	r2, r3
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	189b      	adds	r3, r3, r2
 800a4a6:	623b      	str	r3, [r7, #32]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	00da      	lsls	r2, r3, #3
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a4ec <USB_EPStartXfer+0x3d4>)
 800a4b4:	4694      	mov	ip, r2
 800a4b6:	4463      	add	r3, ip
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	1d7b      	adds	r3, r7, #5
 800a4bc:	33ff      	adds	r3, #255	@ 0xff
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a4c6:	2076      	movs	r0, #118	@ 0x76
 800a4c8:	183b      	adds	r3, r7, r0
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	8912      	ldrh	r2, [r2, #8]
 800a4ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	6959      	ldr	r1, [r3, #20]
 800a4d4:	1d7b      	adds	r3, r7, #5
 800a4d6:	33ff      	adds	r3, #255	@ 0xff
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	b29c      	uxth	r4, r3
 800a4dc:	183b      	adds	r3, r7, r0
 800a4de:	881a      	ldrh	r2, [r3, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	0023      	movs	r3, r4
 800a4e4:	f001 f882 	bl	800b5ec <USB_WritePMA>
 800a4e8:	e329      	b.n	800ab3e <USB_EPStartXfer+0xa26>
 800a4ea:	46c0      	nop			@ (mov r8, r8)
 800a4ec:	00000402 	.word	0x00000402
 800a4f0:	ffff8f8f 	.word	0xffff8f8f
 800a4f4:	ffff8180 	.word	0xffff8180
 800a4f8:	00000406 	.word	0x00000406
 800a4fc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d000      	beq.n	800a50a <USB_EPStartXfer+0x3f2>
 800a508:	e070      	b.n	800a5ec <USB_EPStartXfer+0x4d4>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2250      	movs	r2, #80	@ 0x50
 800a512:	5a9b      	ldrh	r3, [r3, r2]
 800a514:	b29b      	uxth	r3, r3
 800a516:	001a      	movs	r2, r3
 800a518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a51a:	189b      	adds	r3, r3, r2
 800a51c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	00da      	lsls	r2, r3, #3
 800a524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a526:	18d3      	adds	r3, r2, r3
 800a528:	4acd      	ldr	r2, [pc, #820]	@ (800a860 <USB_EPStartXfer+0x748>)
 800a52a:	4694      	mov	ip, r2
 800a52c:	4463      	add	r3, ip
 800a52e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	059b      	lsls	r3, r3, #22
 800a538:	0d9b      	lsrs	r3, r3, #22
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a53e:	801a      	strh	r2, [r3, #0]
 800a540:	1d7b      	adds	r3, r7, #5
 800a542:	33ff      	adds	r3, #255	@ 0xff
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d108      	bne.n	800a55c <USB_EPStartXfer+0x444>
 800a54a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	4ac4      	ldr	r2, [pc, #784]	@ (800a864 <USB_EPStartXfer+0x74c>)
 800a552:	4313      	orrs	r3, r2
 800a554:	b29a      	uxth	r2, r3
 800a556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a558:	801a      	strh	r2, [r3, #0]
 800a55a:	e064      	b.n	800a626 <USB_EPStartXfer+0x50e>
 800a55c:	1d7b      	adds	r3, r7, #5
 800a55e:	33ff      	adds	r3, #255	@ 0xff
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b3e      	cmp	r3, #62	@ 0x3e
 800a564:	d81f      	bhi.n	800a5a6 <USB_EPStartXfer+0x48e>
 800a566:	1d7b      	adds	r3, r7, #5
 800a568:	33ff      	adds	r3, #255	@ 0xff
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	21f8      	movs	r1, #248	@ 0xf8
 800a570:	187a      	adds	r2, r7, r1
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	1d7b      	adds	r3, r7, #5
 800a576:	33ff      	adds	r3, #255	@ 0xff
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2201      	movs	r2, #1
 800a57c:	4013      	ands	r3, r2
 800a57e:	d004      	beq.n	800a58a <USB_EPStartXfer+0x472>
 800a580:	187b      	adds	r3, r7, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3301      	adds	r3, #1
 800a586:	187a      	adds	r2, r7, r1
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	23f8      	movs	r3, #248	@ 0xf8
 800a592:	18fb      	adds	r3, r7, r3
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	029b      	lsls	r3, r3, #10
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e03f      	b.n	800a626 <USB_EPStartXfer+0x50e>
 800a5a6:	1d7b      	adds	r3, r7, #5
 800a5a8:	33ff      	adds	r3, #255	@ 0xff
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	095b      	lsrs	r3, r3, #5
 800a5ae:	21f8      	movs	r1, #248	@ 0xf8
 800a5b0:	187a      	adds	r2, r7, r1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	1d7b      	adds	r3, r7, #5
 800a5b6:	33ff      	adds	r3, #255	@ 0xff
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	221f      	movs	r2, #31
 800a5bc:	4013      	ands	r3, r2
 800a5be:	d104      	bne.n	800a5ca <USB_EPStartXfer+0x4b2>
 800a5c0:	187b      	adds	r3, r7, r1
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	187a      	adds	r2, r7, r1
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	23f8      	movs	r3, #248	@ 0xf8
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	4aa0      	ldr	r2, [pc, #640]	@ (800a864 <USB_EPStartXfer+0x74c>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	e01c      	b.n	800a626 <USB_EPStartXfer+0x50e>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d118      	bne.n	800a626 <USB_EPStartXfer+0x50e>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2250      	movs	r2, #80	@ 0x50
 800a5fc:	5a9b      	ldrh	r3, [r3, r2]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	001a      	movs	r2, r3
 800a602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a604:	189b      	adds	r3, r3, r2
 800a606:	653b      	str	r3, [r7, #80]	@ 0x50
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	00da      	lsls	r2, r3, #3
 800a60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a610:	18d3      	adds	r3, r2, r3
 800a612:	4a93      	ldr	r2, [pc, #588]	@ (800a860 <USB_EPStartXfer+0x748>)
 800a614:	4694      	mov	ip, r2
 800a616:	4463      	add	r3, ip
 800a618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a61a:	1d7b      	adds	r3, r7, #5
 800a61c:	33ff      	adds	r3, #255	@ 0xff
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	b29a      	uxth	r2, r3
 800a622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a626:	2076      	movs	r0, #118	@ 0x76
 800a628:	183b      	adds	r3, r7, r0
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	8912      	ldrh	r2, [r2, #8]
 800a62e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6959      	ldr	r1, [r3, #20]
 800a634:	1d7b      	adds	r3, r7, #5
 800a636:	33ff      	adds	r3, #255	@ 0xff
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	b29c      	uxth	r4, r3
 800a63c:	183b      	adds	r3, r7, r0
 800a63e:	881a      	ldrh	r2, [r3, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	0023      	movs	r3, r4
 800a644:	f000 ffd2 	bl	800b5ec <USB_WritePMA>
            ep->xfer_buff += len;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	695a      	ldr	r2, [r3, #20]
 800a64c:	1d7b      	adds	r3, r7, #5
 800a64e:	33ff      	adds	r3, #255	@ 0xff
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	18d2      	adds	r2, r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6a1a      	ldr	r2, [r3, #32]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	429a      	cmp	r2, r3
 800a662:	d908      	bls.n	800a676 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	6a1a      	ldr	r2, [r3, #32]
 800a668:	1d7b      	adds	r3, r7, #5
 800a66a:	33ff      	adds	r3, #255	@ 0xff
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	621a      	str	r2, [r3, #32]
 800a674:	e007      	b.n	800a686 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	1d7a      	adds	r2, r7, #5
 800a67c:	32ff      	adds	r2, #255	@ 0xff
 800a67e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2200      	movs	r2, #0
 800a684:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	643b      	str	r3, [r7, #64]	@ 0x40
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d000      	beq.n	800a694 <USB_EPStartXfer+0x57c>
 800a692:	e070      	b.n	800a776 <USB_EPStartXfer+0x65e>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2250      	movs	r2, #80	@ 0x50
 800a69c:	5a9b      	ldrh	r3, [r3, r2]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	001a      	movs	r2, r3
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	189b      	adds	r3, r3, r2
 800a6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	00da      	lsls	r2, r3, #3
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	4a6d      	ldr	r2, [pc, #436]	@ (800a868 <USB_EPStartXfer+0x750>)
 800a6b4:	4694      	mov	ip, r2
 800a6b6:	4463      	add	r3, ip
 800a6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	059b      	lsls	r3, r3, #22
 800a6c2:	0d9b      	lsrs	r3, r3, #22
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	1d7b      	adds	r3, r7, #5
 800a6cc:	33ff      	adds	r3, #255	@ 0xff
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d108      	bne.n	800a6e6 <USB_EPStartXfer+0x5ce>
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4a62      	ldr	r2, [pc, #392]	@ (800a864 <USB_EPStartXfer+0x74c>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e2:	801a      	strh	r2, [r3, #0]
 800a6e4:	e062      	b.n	800a7ac <USB_EPStartXfer+0x694>
 800a6e6:	1d7b      	adds	r3, r7, #5
 800a6e8:	33ff      	adds	r3, #255	@ 0xff
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6ee:	d81f      	bhi.n	800a730 <USB_EPStartXfer+0x618>
 800a6f0:	1d7b      	adds	r3, r7, #5
 800a6f2:	33ff      	adds	r3, #255	@ 0xff
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	085b      	lsrs	r3, r3, #1
 800a6f8:	21f4      	movs	r1, #244	@ 0xf4
 800a6fa:	187a      	adds	r2, r7, r1
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	1d7b      	adds	r3, r7, #5
 800a700:	33ff      	adds	r3, #255	@ 0xff
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2201      	movs	r2, #1
 800a706:	4013      	ands	r3, r2
 800a708:	d004      	beq.n	800a714 <USB_EPStartXfer+0x5fc>
 800a70a:	187b      	adds	r3, r7, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	187a      	adds	r2, r7, r1
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29a      	uxth	r2, r3
 800a71a:	23f4      	movs	r3, #244	@ 0xf4
 800a71c:	18fb      	adds	r3, r7, r3
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	029b      	lsls	r3, r3, #10
 800a724:	b29b      	uxth	r3, r3
 800a726:	4313      	orrs	r3, r2
 800a728:	b29a      	uxth	r2, r3
 800a72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72c:	801a      	strh	r2, [r3, #0]
 800a72e:	e03d      	b.n	800a7ac <USB_EPStartXfer+0x694>
 800a730:	1d7b      	adds	r3, r7, #5
 800a732:	33ff      	adds	r3, #255	@ 0xff
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	095b      	lsrs	r3, r3, #5
 800a738:	21f4      	movs	r1, #244	@ 0xf4
 800a73a:	187a      	adds	r2, r7, r1
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	1d7b      	adds	r3, r7, #5
 800a740:	33ff      	adds	r3, #255	@ 0xff
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	221f      	movs	r2, #31
 800a746:	4013      	ands	r3, r2
 800a748:	d104      	bne.n	800a754 <USB_EPStartXfer+0x63c>
 800a74a:	187b      	adds	r3, r7, r1
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3b01      	subs	r3, #1
 800a750:	187a      	adds	r2, r7, r1
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	23f4      	movs	r3, #244	@ 0xf4
 800a75c:	18fb      	adds	r3, r7, r3
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	b29b      	uxth	r3, r3
 800a766:	4313      	orrs	r3, r2
 800a768:	b29b      	uxth	r3, r3
 800a76a:	4a3e      	ldr	r2, [pc, #248]	@ (800a864 <USB_EPStartXfer+0x74c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	b29a      	uxth	r2, r3
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	e01a      	b.n	800a7ac <USB_EPStartXfer+0x694>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d116      	bne.n	800a7ac <USB_EPStartXfer+0x694>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2250      	movs	r2, #80	@ 0x50
 800a782:	5a9b      	ldrh	r3, [r3, r2]
 800a784:	b29b      	uxth	r3, r3
 800a786:	001a      	movs	r2, r3
 800a788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a78a:	189b      	adds	r3, r3, r2
 800a78c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	00da      	lsls	r2, r3, #3
 800a794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a796:	18d3      	adds	r3, r2, r3
 800a798:	4a33      	ldr	r2, [pc, #204]	@ (800a868 <USB_EPStartXfer+0x750>)
 800a79a:	4694      	mov	ip, r2
 800a79c:	4463      	add	r3, ip
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a0:	1d7b      	adds	r3, r7, #5
 800a7a2:	33ff      	adds	r3, #255	@ 0xff
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7ac:	2076      	movs	r0, #118	@ 0x76
 800a7ae:	183b      	adds	r3, r7, r0
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	8952      	ldrh	r2, [r2, #10]
 800a7b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6959      	ldr	r1, [r3, #20]
 800a7ba:	1d7b      	adds	r3, r7, #5
 800a7bc:	33ff      	adds	r3, #255	@ 0xff
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	b29c      	uxth	r4, r3
 800a7c2:	183b      	adds	r3, r7, r0
 800a7c4:	881a      	ldrh	r2, [r3, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	0023      	movs	r3, r4
 800a7ca:	f000 ff0f 	bl	800b5ec <USB_WritePMA>
 800a7ce:	e1b6      	b.n	800ab3e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	1d7a      	adds	r2, r7, #5
 800a7d6:	32ff      	adds	r2, #255	@ 0xff
 800a7d8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	18d3      	adds	r3, r2, r3
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	2062      	movs	r0, #98	@ 0x62
 800a7ea:	183b      	adds	r3, r7, r0
 800a7ec:	491f      	ldr	r1, [pc, #124]	@ (800a86c <USB_EPStartXfer+0x754>)
 800a7ee:	400a      	ands	r2, r1
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	18d3      	adds	r3, r2, r3
 800a7fc:	183a      	adds	r2, r7, r0
 800a7fe:	8812      	ldrh	r2, [r2, #0]
 800a800:	491b      	ldr	r1, [pc, #108]	@ (800a870 <USB_EPStartXfer+0x758>)
 800a802:	430a      	orrs	r2, r1
 800a804:	b292      	uxth	r2, r2
 800a806:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2250      	movs	r2, #80	@ 0x50
 800a810:	5a9b      	ldrh	r3, [r3, r2]
 800a812:	b29b      	uxth	r3, r3
 800a814:	001a      	movs	r2, r3
 800a816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a818:	189b      	adds	r3, r3, r2
 800a81a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	00da      	lsls	r2, r3, #3
 800a822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a824:	18d3      	adds	r3, r2, r3
 800a826:	4a0e      	ldr	r2, [pc, #56]	@ (800a860 <USB_EPStartXfer+0x748>)
 800a828:	4694      	mov	ip, r2
 800a82a:	4463      	add	r3, ip
 800a82c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a82e:	1d7b      	adds	r3, r7, #5
 800a830:	33ff      	adds	r3, #255	@ 0xff
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b29a      	uxth	r2, r3
 800a836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a838:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a83a:	2076      	movs	r0, #118	@ 0x76
 800a83c:	183b      	adds	r3, r7, r0
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	8912      	ldrh	r2, [r2, #8]
 800a842:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	6959      	ldr	r1, [r3, #20]
 800a848:	1d7b      	adds	r3, r7, #5
 800a84a:	33ff      	adds	r3, #255	@ 0xff
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	b29c      	uxth	r4, r3
 800a850:	183b      	adds	r3, r7, r0
 800a852:	881a      	ldrh	r2, [r3, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	0023      	movs	r3, r4
 800a858:	f000 fec8 	bl	800b5ec <USB_WritePMA>
 800a85c:	e16f      	b.n	800ab3e <USB_EPStartXfer+0xa26>
 800a85e:	46c0      	nop			@ (mov r8, r8)
 800a860:	00000402 	.word	0x00000402
 800a864:	ffff8000 	.word	0xffff8000
 800a868:	00000406 	.word	0x00000406
 800a86c:	ffff8e8f 	.word	0xffff8e8f
 800a870:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	1d7b      	adds	r3, r7, #5
 800a87a:	33ff      	adds	r3, #255	@ 0xff
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	18d3      	adds	r3, r2, r3
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	001a      	movs	r2, r3
 800a894:	2340      	movs	r3, #64	@ 0x40
 800a896:	4013      	ands	r3, r2
 800a898:	d100      	bne.n	800a89c <USB_EPStartXfer+0x784>
 800a89a:	e0a4      	b.n	800a9e6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d000      	beq.n	800a8aa <USB_EPStartXfer+0x792>
 800a8a8:	e070      	b.n	800a98c <USB_EPStartXfer+0x874>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2250      	movs	r2, #80	@ 0x50
 800a8b2:	5a9b      	ldrh	r3, [r3, r2]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	001a      	movs	r2, r3
 800a8b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	00da      	lsls	r2, r3, #3
 800a8c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8c6:	18d3      	adds	r3, r2, r3
 800a8c8:	4ada      	ldr	r2, [pc, #872]	@ (800ac34 <USB_EPStartXfer+0xb1c>)
 800a8ca:	4694      	mov	ip, r2
 800a8cc:	4463      	add	r3, ip
 800a8ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	059b      	lsls	r3, r3, #22
 800a8d8:	0d9b      	lsrs	r3, r3, #22
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8de:	801a      	strh	r2, [r3, #0]
 800a8e0:	1d7b      	adds	r3, r7, #5
 800a8e2:	33ff      	adds	r3, #255	@ 0xff
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d108      	bne.n	800a8fc <USB_EPStartXfer+0x7e4>
 800a8ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	4ad1      	ldr	r2, [pc, #836]	@ (800ac38 <USB_EPStartXfer+0xb20>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8f8:	801a      	strh	r2, [r3, #0]
 800a8fa:	e062      	b.n	800a9c2 <USB_EPStartXfer+0x8aa>
 800a8fc:	1d7b      	adds	r3, r7, #5
 800a8fe:	33ff      	adds	r3, #255	@ 0xff
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b3e      	cmp	r3, #62	@ 0x3e
 800a904:	d81f      	bhi.n	800a946 <USB_EPStartXfer+0x82e>
 800a906:	1d7b      	adds	r3, r7, #5
 800a908:	33ff      	adds	r3, #255	@ 0xff
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	21f0      	movs	r1, #240	@ 0xf0
 800a910:	187a      	adds	r2, r7, r1
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	1d7b      	adds	r3, r7, #5
 800a916:	33ff      	adds	r3, #255	@ 0xff
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2201      	movs	r2, #1
 800a91c:	4013      	ands	r3, r2
 800a91e:	d004      	beq.n	800a92a <USB_EPStartXfer+0x812>
 800a920:	187b      	adds	r3, r7, r1
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	187a      	adds	r2, r7, r1
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	23f0      	movs	r3, #240	@ 0xf0
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	029b      	lsls	r3, r3, #10
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	b29a      	uxth	r2, r3
 800a940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	e03d      	b.n	800a9c2 <USB_EPStartXfer+0x8aa>
 800a946:	1d7b      	adds	r3, r7, #5
 800a948:	33ff      	adds	r3, #255	@ 0xff
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	095b      	lsrs	r3, r3, #5
 800a94e:	21f0      	movs	r1, #240	@ 0xf0
 800a950:	187a      	adds	r2, r7, r1
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	1d7b      	adds	r3, r7, #5
 800a956:	33ff      	adds	r3, #255	@ 0xff
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	221f      	movs	r2, #31
 800a95c:	4013      	ands	r3, r2
 800a95e:	d104      	bne.n	800a96a <USB_EPStartXfer+0x852>
 800a960:	187b      	adds	r3, r7, r1
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3b01      	subs	r3, #1
 800a966:	187a      	adds	r2, r7, r1
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	23f0      	movs	r3, #240	@ 0xf0
 800a972:	18fb      	adds	r3, r7, r3
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	b29b      	uxth	r3, r3
 800a978:	029b      	lsls	r3, r3, #10
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b29b      	uxth	r3, r3
 800a980:	4aad      	ldr	r2, [pc, #692]	@ (800ac38 <USB_EPStartXfer+0xb20>)
 800a982:	4313      	orrs	r3, r2
 800a984:	b29a      	uxth	r2, r3
 800a986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	e01a      	b.n	800a9c2 <USB_EPStartXfer+0x8aa>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d116      	bne.n	800a9c2 <USB_EPStartXfer+0x8aa>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2250      	movs	r2, #80	@ 0x50
 800a998:	5a9b      	ldrh	r3, [r3, r2]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	001a      	movs	r2, r3
 800a99e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9a0:	189b      	adds	r3, r3, r2
 800a9a2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	00da      	lsls	r2, r3, #3
 800a9aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9ac:	18d3      	adds	r3, r2, r3
 800a9ae:	4aa1      	ldr	r2, [pc, #644]	@ (800ac34 <USB_EPStartXfer+0xb1c>)
 800a9b0:	4694      	mov	ip, r2
 800a9b2:	4463      	add	r3, ip
 800a9b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a9b6:	1d7b      	adds	r3, r7, #5
 800a9b8:	33ff      	adds	r3, #255	@ 0xff
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a9c2:	2076      	movs	r0, #118	@ 0x76
 800a9c4:	183b      	adds	r3, r7, r0
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	8952      	ldrh	r2, [r2, #10]
 800a9ca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	6959      	ldr	r1, [r3, #20]
 800a9d0:	1d7b      	adds	r3, r7, #5
 800a9d2:	33ff      	adds	r3, #255	@ 0xff
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	b29c      	uxth	r4, r3
 800a9d8:	183b      	adds	r3, r7, r0
 800a9da:	881a      	ldrh	r2, [r3, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	0023      	movs	r3, r4
 800a9e0:	f000 fe04 	bl	800b5ec <USB_WritePMA>
 800a9e4:	e0ab      	b.n	800ab3e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d000      	beq.n	800a9f0 <USB_EPStartXfer+0x8d8>
 800a9ee:	e070      	b.n	800aad2 <USB_EPStartXfer+0x9ba>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2250      	movs	r2, #80	@ 0x50
 800a9f8:	5a9b      	ldrh	r3, [r3, r2]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	001a      	movs	r2, r3
 800a9fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa00:	189b      	adds	r3, r3, r2
 800aa02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	00da      	lsls	r2, r3, #3
 800aa0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa0c:	18d3      	adds	r3, r2, r3
 800aa0e:	4a8b      	ldr	r2, [pc, #556]	@ (800ac3c <USB_EPStartXfer+0xb24>)
 800aa10:	4694      	mov	ip, r2
 800aa12:	4463      	add	r3, ip
 800aa14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	059b      	lsls	r3, r3, #22
 800aa1e:	0d9b      	lsrs	r3, r3, #22
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	1d7b      	adds	r3, r7, #5
 800aa28:	33ff      	adds	r3, #255	@ 0xff
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d108      	bne.n	800aa42 <USB_EPStartXfer+0x92a>
 800aa30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	4a80      	ldr	r2, [pc, #512]	@ (800ac38 <USB_EPStartXfer+0xb20>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	e06c      	b.n	800ab1c <USB_EPStartXfer+0xa04>
 800aa42:	1d7b      	adds	r3, r7, #5
 800aa44:	33ff      	adds	r3, #255	@ 0xff
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa4a:	d81f      	bhi.n	800aa8c <USB_EPStartXfer+0x974>
 800aa4c:	1d7b      	adds	r3, r7, #5
 800aa4e:	33ff      	adds	r3, #255	@ 0xff
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	085b      	lsrs	r3, r3, #1
 800aa54:	21ec      	movs	r1, #236	@ 0xec
 800aa56:	187a      	adds	r2, r7, r1
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	1d7b      	adds	r3, r7, #5
 800aa5c:	33ff      	adds	r3, #255	@ 0xff
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2201      	movs	r2, #1
 800aa62:	4013      	ands	r3, r2
 800aa64:	d004      	beq.n	800aa70 <USB_EPStartXfer+0x958>
 800aa66:	187b      	adds	r3, r7, r1
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	187a      	adds	r2, r7, r1
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	23ec      	movs	r3, #236	@ 0xec
 800aa78:	18fb      	adds	r3, r7, r3
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	029b      	lsls	r3, r3, #10
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4313      	orrs	r3, r2
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa88:	801a      	strh	r2, [r3, #0]
 800aa8a:	e047      	b.n	800ab1c <USB_EPStartXfer+0xa04>
 800aa8c:	1d7b      	adds	r3, r7, #5
 800aa8e:	33ff      	adds	r3, #255	@ 0xff
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	095b      	lsrs	r3, r3, #5
 800aa94:	21ec      	movs	r1, #236	@ 0xec
 800aa96:	187a      	adds	r2, r7, r1
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	1d7b      	adds	r3, r7, #5
 800aa9c:	33ff      	adds	r3, #255	@ 0xff
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	221f      	movs	r2, #31
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	d104      	bne.n	800aab0 <USB_EPStartXfer+0x998>
 800aaa6:	187b      	adds	r3, r7, r1
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	187a      	adds	r2, r7, r1
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	23ec      	movs	r3, #236	@ 0xec
 800aab8:	18fb      	adds	r3, r7, r3
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	029b      	lsls	r3, r3, #10
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	4313      	orrs	r3, r2
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	4a5c      	ldr	r2, [pc, #368]	@ (800ac38 <USB_EPStartXfer+0xb20>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aace:	801a      	strh	r2, [r3, #0]
 800aad0:	e024      	b.n	800ab1c <USB_EPStartXfer+0xa04>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d120      	bne.n	800ab1c <USB_EPStartXfer+0xa04>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2184      	movs	r1, #132	@ 0x84
 800aade:	187a      	adds	r2, r7, r1
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2250      	movs	r2, #80	@ 0x50
 800aae6:	5a9b      	ldrh	r3, [r3, r2]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	001a      	movs	r2, r3
 800aaec:	187b      	adds	r3, r7, r1
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	189b      	adds	r3, r3, r2
 800aaf2:	187a      	adds	r2, r7, r1
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	00da      	lsls	r2, r3, #3
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	18d3      	adds	r3, r2, r3
 800ab02:	4a4e      	ldr	r2, [pc, #312]	@ (800ac3c <USB_EPStartXfer+0xb24>)
 800ab04:	4694      	mov	ip, r2
 800ab06:	4463      	add	r3, ip
 800ab08:	2180      	movs	r1, #128	@ 0x80
 800ab0a:	187a      	adds	r2, r7, r1
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	1d7b      	adds	r3, r7, #5
 800ab10:	33ff      	adds	r3, #255	@ 0xff
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	187b      	adds	r3, r7, r1
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab1c:	2076      	movs	r0, #118	@ 0x76
 800ab1e:	183b      	adds	r3, r7, r0
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	8912      	ldrh	r2, [r2, #8]
 800ab24:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6959      	ldr	r1, [r3, #20]
 800ab2a:	1d7b      	adds	r3, r7, #5
 800ab2c:	33ff      	adds	r3, #255	@ 0xff
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	b29c      	uxth	r4, r3
 800ab32:	183b      	adds	r3, r7, r0
 800ab34:	881a      	ldrh	r2, [r3, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	0023      	movs	r3, r4
 800ab3a:	f000 fd57 	bl	800b5ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	18d3      	adds	r3, r2, r3
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	200a      	movs	r0, #10
 800ab4e:	183b      	adds	r3, r7, r0
 800ab50:	493b      	ldr	r1, [pc, #236]	@ (800ac40 <USB_EPStartXfer+0xb28>)
 800ab52:	400a      	ands	r2, r1
 800ab54:	801a      	strh	r2, [r3, #0]
 800ab56:	183b      	adds	r3, r7, r0
 800ab58:	183a      	adds	r2, r7, r0
 800ab5a:	8812      	ldrh	r2, [r2, #0]
 800ab5c:	2110      	movs	r1, #16
 800ab5e:	404a      	eors	r2, r1
 800ab60:	801a      	strh	r2, [r3, #0]
 800ab62:	183b      	adds	r3, r7, r0
 800ab64:	183a      	adds	r2, r7, r0
 800ab66:	8812      	ldrh	r2, [r2, #0]
 800ab68:	2120      	movs	r1, #32
 800ab6a:	404a      	eors	r2, r1
 800ab6c:	801a      	strh	r2, [r3, #0]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	18d3      	adds	r3, r2, r3
 800ab78:	183a      	adds	r2, r7, r0
 800ab7a:	8812      	ldrh	r2, [r2, #0]
 800ab7c:	4931      	ldr	r1, [pc, #196]	@ (800ac44 <USB_EPStartXfer+0xb2c>)
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	b292      	uxth	r2, r2
 800ab82:	801a      	strh	r2, [r3, #0]
 800ab84:	f000 fbe9 	bl	800b35a <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	7b1b      	ldrb	r3, [r3, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d000      	beq.n	800ab92 <USB_EPStartXfer+0xa7a>
 800ab90:	e0a8      	b.n	800ace4 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	699a      	ldr	r2, [r3, #24]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d90d      	bls.n	800abba <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	1d7a      	adds	r2, r7, #5
 800aba4:	32ff      	adds	r2, #255	@ 0xff
 800aba6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	1d7b      	adds	r3, r7, #5
 800abae:	33ff      	adds	r3, #255	@ 0xff
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	619a      	str	r2, [r3, #24]
 800abb8:	e007      	b.n	800abca <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	1d7a      	adds	r2, r7, #5
 800abc0:	32ff      	adds	r2, #255	@ 0xff
 800abc2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2190      	movs	r1, #144	@ 0x90
 800abce:	187a      	adds	r2, r7, r1
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2250      	movs	r2, #80	@ 0x50
 800abd6:	5a9b      	ldrh	r3, [r3, r2]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	001a      	movs	r2, r3
 800abdc:	187b      	adds	r3, r7, r1
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	189b      	adds	r3, r3, r2
 800abe2:	187a      	adds	r2, r7, r1
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	00da      	lsls	r2, r3, #3
 800abec:	187b      	adds	r3, r7, r1
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	18d3      	adds	r3, r2, r3
 800abf2:	4a10      	ldr	r2, [pc, #64]	@ (800ac34 <USB_EPStartXfer+0xb1c>)
 800abf4:	4694      	mov	ip, r2
 800abf6:	4463      	add	r3, ip
 800abf8:	218c      	movs	r1, #140	@ 0x8c
 800abfa:	187a      	adds	r2, r7, r1
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	187b      	adds	r3, r7, r1
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	059b      	lsls	r3, r3, #22
 800ac08:	0d9b      	lsrs	r3, r3, #22
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	187b      	adds	r3, r7, r1
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	801a      	strh	r2, [r3, #0]
 800ac12:	1d7b      	adds	r3, r7, #5
 800ac14:	33ff      	adds	r3, #255	@ 0xff
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d115      	bne.n	800ac48 <USB_EPStartXfer+0xb30>
 800ac1c:	187b      	adds	r3, r7, r1
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	4a04      	ldr	r2, [pc, #16]	@ (800ac38 <USB_EPStartXfer+0xb20>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	187b      	adds	r3, r7, r1
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e36e      	b.n	800b310 <USB_EPStartXfer+0x11f8>
 800ac32:	46c0      	nop			@ (mov r8, r8)
 800ac34:	00000406 	.word	0x00000406
 800ac38:	ffff8000 	.word	0xffff8000
 800ac3c:	00000402 	.word	0x00000402
 800ac40:	ffff8fbf 	.word	0xffff8fbf
 800ac44:	ffff8080 	.word	0xffff8080
 800ac48:	1d7b      	adds	r3, r7, #5
 800ac4a:	33ff      	adds	r3, #255	@ 0xff
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac50:	d822      	bhi.n	800ac98 <USB_EPStartXfer+0xb80>
 800ac52:	1d7b      	adds	r3, r7, #5
 800ac54:	33ff      	adds	r3, #255	@ 0xff
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	085b      	lsrs	r3, r3, #1
 800ac5a:	21e8      	movs	r1, #232	@ 0xe8
 800ac5c:	187a      	adds	r2, r7, r1
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	1d7b      	adds	r3, r7, #5
 800ac62:	33ff      	adds	r3, #255	@ 0xff
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2201      	movs	r2, #1
 800ac68:	4013      	ands	r3, r2
 800ac6a:	d004      	beq.n	800ac76 <USB_EPStartXfer+0xb5e>
 800ac6c:	187b      	adds	r3, r7, r1
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3301      	adds	r3, #1
 800ac72:	187a      	adds	r2, r7, r1
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	218c      	movs	r1, #140	@ 0x8c
 800ac78:	187b      	adds	r3, r7, r1
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	23e8      	movs	r3, #232	@ 0xe8
 800ac82:	18fb      	adds	r3, r7, r3
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	029b      	lsls	r3, r3, #10
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	187b      	adds	r3, r7, r1
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	801a      	strh	r2, [r3, #0]
 800ac96:	e33b      	b.n	800b310 <USB_EPStartXfer+0x11f8>
 800ac98:	1d7b      	adds	r3, r7, #5
 800ac9a:	33ff      	adds	r3, #255	@ 0xff
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	095b      	lsrs	r3, r3, #5
 800aca0:	21e8      	movs	r1, #232	@ 0xe8
 800aca2:	187a      	adds	r2, r7, r1
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	1d7b      	adds	r3, r7, #5
 800aca8:	33ff      	adds	r3, #255	@ 0xff
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	221f      	movs	r2, #31
 800acae:	4013      	ands	r3, r2
 800acb0:	d104      	bne.n	800acbc <USB_EPStartXfer+0xba4>
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	187a      	adds	r2, r7, r1
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	218c      	movs	r1, #140	@ 0x8c
 800acbe:	187b      	adds	r3, r7, r1
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	23e8      	movs	r3, #232	@ 0xe8
 800acc8:	18fb      	adds	r3, r7, r3
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	b29b      	uxth	r3, r3
 800acce:	029b      	lsls	r3, r3, #10
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	4313      	orrs	r3, r2
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4ad7      	ldr	r2, [pc, #860]	@ (800b034 <USB_EPStartXfer+0xf1c>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	b29a      	uxth	r2, r3
 800acdc:	187b      	adds	r3, r7, r1
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	e315      	b.n	800b310 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	78db      	ldrb	r3, [r3, #3]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d000      	beq.n	800acee <USB_EPStartXfer+0xbd6>
 800acec:	e189      	b.n	800b002 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	785b      	ldrb	r3, [r3, #1]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d000      	beq.n	800acf8 <USB_EPStartXfer+0xbe0>
 800acf6:	e07b      	b.n	800adf0 <USB_EPStartXfer+0xcd8>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	21ac      	movs	r1, #172	@ 0xac
 800acfc:	187a      	adds	r2, r7, r1
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2250      	movs	r2, #80	@ 0x50
 800ad04:	5a9b      	ldrh	r3, [r3, r2]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	001a      	movs	r2, r3
 800ad0a:	187b      	adds	r3, r7, r1
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	189b      	adds	r3, r3, r2
 800ad10:	187a      	adds	r2, r7, r1
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	00da      	lsls	r2, r3, #3
 800ad1a:	187b      	adds	r3, r7, r1
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	18d3      	adds	r3, r2, r3
 800ad20:	4ac5      	ldr	r2, [pc, #788]	@ (800b038 <USB_EPStartXfer+0xf20>)
 800ad22:	4694      	mov	ip, r2
 800ad24:	4463      	add	r3, ip
 800ad26:	21a8      	movs	r1, #168	@ 0xa8
 800ad28:	187a      	adds	r2, r7, r1
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	187b      	adds	r3, r7, r1
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	059b      	lsls	r3, r3, #22
 800ad36:	0d9b      	lsrs	r3, r3, #22
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	187b      	adds	r3, r7, r1
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <USB_EPStartXfer+0xc46>
 800ad48:	187b      	adds	r3, r7, r1
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	4ab8      	ldr	r2, [pc, #736]	@ (800b034 <USB_EPStartXfer+0xf1c>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	187b      	adds	r3, r7, r1
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	801a      	strh	r2, [r3, #0]
 800ad5c:	e06c      	b.n	800ae38 <USB_EPStartXfer+0xd20>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad64:	d820      	bhi.n	800ada8 <USB_EPStartXfer+0xc90>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	21e4      	movs	r1, #228	@ 0xe4
 800ad6e:	187a      	adds	r2, r7, r1
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2201      	movs	r2, #1
 800ad78:	4013      	ands	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <USB_EPStartXfer+0xc6e>
 800ad7c:	187b      	adds	r3, r7, r1
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	187a      	adds	r2, r7, r1
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	21a8      	movs	r1, #168	@ 0xa8
 800ad88:	187b      	adds	r3, r7, r1
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	23e4      	movs	r3, #228	@ 0xe4
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	029b      	lsls	r3, r3, #10
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	187b      	adds	r3, r7, r1
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	801a      	strh	r2, [r3, #0]
 800ada6:	e047      	b.n	800ae38 <USB_EPStartXfer+0xd20>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	095b      	lsrs	r3, r3, #5
 800adae:	21e4      	movs	r1, #228	@ 0xe4
 800adb0:	187a      	adds	r2, r7, r1
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	221f      	movs	r2, #31
 800adba:	4013      	ands	r3, r2
 800adbc:	d104      	bne.n	800adc8 <USB_EPStartXfer+0xcb0>
 800adbe:	187b      	adds	r3, r7, r1
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	187a      	adds	r2, r7, r1
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	21a8      	movs	r1, #168	@ 0xa8
 800adca:	187b      	adds	r3, r7, r1
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b29a      	uxth	r2, r3
 800add2:	23e4      	movs	r3, #228	@ 0xe4
 800add4:	18fb      	adds	r3, r7, r3
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	b29b      	uxth	r3, r3
 800adda:	029b      	lsls	r3, r3, #10
 800addc:	b29b      	uxth	r3, r3
 800adde:	4313      	orrs	r3, r2
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	4a94      	ldr	r2, [pc, #592]	@ (800b034 <USB_EPStartXfer+0xf1c>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	187b      	adds	r3, r7, r1
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	801a      	strh	r2, [r3, #0]
 800adee:	e023      	b.n	800ae38 <USB_EPStartXfer+0xd20>
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d11f      	bne.n	800ae38 <USB_EPStartXfer+0xd20>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	21b4      	movs	r1, #180	@ 0xb4
 800adfc:	187a      	adds	r2, r7, r1
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2250      	movs	r2, #80	@ 0x50
 800ae04:	5a9b      	ldrh	r3, [r3, r2]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	001a      	movs	r2, r3
 800ae0a:	187b      	adds	r3, r7, r1
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	187a      	adds	r2, r7, r1
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	00da      	lsls	r2, r3, #3
 800ae1a:	187b      	adds	r3, r7, r1
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	18d3      	adds	r3, r2, r3
 800ae20:	4a85      	ldr	r2, [pc, #532]	@ (800b038 <USB_EPStartXfer+0xf20>)
 800ae22:	4694      	mov	ip, r2
 800ae24:	4463      	add	r3, ip
 800ae26:	21b0      	movs	r1, #176	@ 0xb0
 800ae28:	187a      	adds	r2, r7, r1
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	187b      	adds	r3, r7, r1
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	22a4      	movs	r2, #164	@ 0xa4
 800ae3c:	18ba      	adds	r2, r7, r2
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d000      	beq.n	800ae4a <USB_EPStartXfer+0xd32>
 800ae48:	e07b      	b.n	800af42 <USB_EPStartXfer+0xe2a>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	219c      	movs	r1, #156	@ 0x9c
 800ae4e:	187a      	adds	r2, r7, r1
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2250      	movs	r2, #80	@ 0x50
 800ae56:	5a9b      	ldrh	r3, [r3, r2]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	001a      	movs	r2, r3
 800ae5c:	187b      	adds	r3, r7, r1
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	189b      	adds	r3, r3, r2
 800ae62:	187a      	adds	r2, r7, r1
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	00da      	lsls	r2, r3, #3
 800ae6c:	187b      	adds	r3, r7, r1
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	18d3      	adds	r3, r2, r3
 800ae72:	4a72      	ldr	r2, [pc, #456]	@ (800b03c <USB_EPStartXfer+0xf24>)
 800ae74:	4694      	mov	ip, r2
 800ae76:	4463      	add	r3, ip
 800ae78:	2198      	movs	r1, #152	@ 0x98
 800ae7a:	187a      	adds	r2, r7, r1
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	187b      	adds	r3, r7, r1
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	059b      	lsls	r3, r3, #22
 800ae88:	0d9b      	lsrs	r3, r3, #22
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	187b      	adds	r3, r7, r1
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <USB_EPStartXfer+0xd98>
 800ae9a:	187b      	adds	r3, r7, r1
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4a64      	ldr	r2, [pc, #400]	@ (800b034 <USB_EPStartXfer+0xf1c>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	187b      	adds	r3, r7, r1
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	801a      	strh	r2, [r3, #0]
 800aeae:	e069      	b.n	800af84 <USB_EPStartXfer+0xe6c>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	2b3e      	cmp	r3, #62	@ 0x3e
 800aeb6:	d820      	bhi.n	800aefa <USB_EPStartXfer+0xde2>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	21e0      	movs	r1, #224	@ 0xe0
 800aec0:	187a      	adds	r2, r7, r1
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2201      	movs	r2, #1
 800aeca:	4013      	ands	r3, r2
 800aecc:	d004      	beq.n	800aed8 <USB_EPStartXfer+0xdc0>
 800aece:	187b      	adds	r3, r7, r1
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	187a      	adds	r2, r7, r1
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	2198      	movs	r1, #152	@ 0x98
 800aeda:	187b      	adds	r3, r7, r1
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	23e0      	movs	r3, #224	@ 0xe0
 800aee4:	18fb      	adds	r3, r7, r3
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	029b      	lsls	r3, r3, #10
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	187b      	adds	r3, r7, r1
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	801a      	strh	r2, [r3, #0]
 800aef8:	e044      	b.n	800af84 <USB_EPStartXfer+0xe6c>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	21e0      	movs	r1, #224	@ 0xe0
 800af02:	187a      	adds	r2, r7, r1
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	221f      	movs	r2, #31
 800af0c:	4013      	ands	r3, r2
 800af0e:	d104      	bne.n	800af1a <USB_EPStartXfer+0xe02>
 800af10:	187b      	adds	r3, r7, r1
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3b01      	subs	r3, #1
 800af16:	187a      	adds	r2, r7, r1
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	2198      	movs	r1, #152	@ 0x98
 800af1c:	187b      	adds	r3, r7, r1
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	b29a      	uxth	r2, r3
 800af24:	23e0      	movs	r3, #224	@ 0xe0
 800af26:	18fb      	adds	r3, r7, r3
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	029b      	lsls	r3, r3, #10
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4313      	orrs	r3, r2
 800af32:	b29b      	uxth	r3, r3
 800af34:	4a3f      	ldr	r2, [pc, #252]	@ (800b034 <USB_EPStartXfer+0xf1c>)
 800af36:	4313      	orrs	r3, r2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	187b      	adds	r3, r7, r1
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	e020      	b.n	800af84 <USB_EPStartXfer+0xe6c>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d11c      	bne.n	800af84 <USB_EPStartXfer+0xe6c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2250      	movs	r2, #80	@ 0x50
 800af4e:	5a9b      	ldrh	r3, [r3, r2]
 800af50:	b29b      	uxth	r3, r3
 800af52:	001a      	movs	r2, r3
 800af54:	21a4      	movs	r1, #164	@ 0xa4
 800af56:	187b      	adds	r3, r7, r1
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	189b      	adds	r3, r3, r2
 800af5c:	187a      	adds	r2, r7, r1
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	00da      	lsls	r2, r3, #3
 800af66:	187b      	adds	r3, r7, r1
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	18d3      	adds	r3, r2, r3
 800af6c:	4a33      	ldr	r2, [pc, #204]	@ (800b03c <USB_EPStartXfer+0xf24>)
 800af6e:	4694      	mov	ip, r2
 800af70:	4463      	add	r3, ip
 800af72:	21a0      	movs	r1, #160	@ 0xa0
 800af74:	187a      	adds	r2, r7, r1
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	187b      	adds	r3, r7, r1
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d100      	bne.n	800af8e <USB_EPStartXfer+0xe76>
 800af8c:	e1c0      	b.n	800b310 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	18d2      	adds	r2, r2, r3
 800af98:	2196      	movs	r1, #150	@ 0x96
 800af9a:	187b      	adds	r3, r7, r1
 800af9c:	8812      	ldrh	r2, [r2, #0]
 800af9e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	881a      	ldrh	r2, [r3, #0]
 800afa4:	2380      	movs	r3, #128	@ 0x80
 800afa6:	01db      	lsls	r3, r3, #7
 800afa8:	4013      	ands	r3, r2
 800afaa:	d004      	beq.n	800afb6 <USB_EPStartXfer+0xe9e>
 800afac:	187b      	adds	r3, r7, r1
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	2240      	movs	r2, #64	@ 0x40
 800afb2:	4013      	ands	r3, r2
 800afb4:	d10d      	bne.n	800afd2 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afb6:	2196      	movs	r1, #150	@ 0x96
 800afb8:	187b      	adds	r3, r7, r1
 800afba:	881a      	ldrh	r2, [r3, #0]
 800afbc:	2380      	movs	r3, #128	@ 0x80
 800afbe:	01db      	lsls	r3, r3, #7
 800afc0:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afc2:	d000      	beq.n	800afc6 <USB_EPStartXfer+0xeae>
 800afc4:	e1a4      	b.n	800b310 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afc6:	187b      	adds	r3, r7, r1
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	2240      	movs	r2, #64	@ 0x40
 800afcc:	4013      	ands	r3, r2
 800afce:	d000      	beq.n	800afd2 <USB_EPStartXfer+0xeba>
 800afd0:	e19e      	b.n	800b310 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	18d3      	adds	r3, r2, r3
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29a      	uxth	r2, r3
 800afe0:	2094      	movs	r0, #148	@ 0x94
 800afe2:	183b      	adds	r3, r7, r0
 800afe4:	4916      	ldr	r1, [pc, #88]	@ (800b040 <USB_EPStartXfer+0xf28>)
 800afe6:	400a      	ands	r2, r1
 800afe8:	801a      	strh	r2, [r3, #0]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	18d3      	adds	r3, r2, r3
 800aff4:	183a      	adds	r2, r7, r0
 800aff6:	8812      	ldrh	r2, [r2, #0]
 800aff8:	4912      	ldr	r1, [pc, #72]	@ (800b044 <USB_EPStartXfer+0xf2c>)
 800affa:	430a      	orrs	r2, r1
 800affc:	b292      	uxth	r2, r2
 800affe:	801a      	strh	r2, [r3, #0]
 800b000:	e186      	b.n	800b310 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	78db      	ldrb	r3, [r3, #3]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d000      	beq.n	800b00c <USB_EPStartXfer+0xef4>
 800b00a:	e17f      	b.n	800b30c <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	429a      	cmp	r2, r3
 800b016:	d917      	bls.n	800b048 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	1d7a      	adds	r2, r7, #5
 800b01e:	32ff      	adds	r2, #255	@ 0xff
 800b020:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	699a      	ldr	r2, [r3, #24]
 800b026:	1d7b      	adds	r3, r7, #5
 800b028:	33ff      	adds	r3, #255	@ 0xff
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	1ad2      	subs	r2, r2, r3
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	619a      	str	r2, [r3, #24]
 800b032:	e011      	b.n	800b058 <USB_EPStartXfer+0xf40>
 800b034:	ffff8000 	.word	0xffff8000
 800b038:	00000402 	.word	0x00000402
 800b03c:	00000406 	.word	0x00000406
 800b040:	ffff8f8f 	.word	0xffff8f8f
 800b044:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	1d7a      	adds	r2, r7, #5
 800b04e:	32ff      	adds	r2, #255	@ 0xff
 800b050:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2200      	movs	r2, #0
 800b056:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d000      	beq.n	800b062 <USB_EPStartXfer+0xf4a>
 800b060:	e081      	b.n	800b166 <USB_EPStartXfer+0x104e>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	21cc      	movs	r1, #204	@ 0xcc
 800b066:	187a      	adds	r2, r7, r1
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2250      	movs	r2, #80	@ 0x50
 800b06e:	5a9b      	ldrh	r3, [r3, r2]
 800b070:	b29b      	uxth	r3, r3
 800b072:	001a      	movs	r2, r3
 800b074:	187b      	adds	r3, r7, r1
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	189b      	adds	r3, r3, r2
 800b07a:	187a      	adds	r2, r7, r1
 800b07c:	6013      	str	r3, [r2, #0]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	00da      	lsls	r2, r3, #3
 800b084:	187b      	adds	r3, r7, r1
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	18d3      	adds	r3, r2, r3
 800b08a:	4ab6      	ldr	r2, [pc, #728]	@ (800b364 <USB_EPStartXfer+0x124c>)
 800b08c:	4694      	mov	ip, r2
 800b08e:	4463      	add	r3, ip
 800b090:	21c8      	movs	r1, #200	@ 0xc8
 800b092:	187a      	adds	r2, r7, r1
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	187b      	adds	r3, r7, r1
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	059b      	lsls	r3, r3, #22
 800b0a0:	0d9b      	lsrs	r3, r3, #22
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	187b      	adds	r3, r7, r1
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	801a      	strh	r2, [r3, #0]
 800b0aa:	1d7b      	adds	r3, r7, #5
 800b0ac:	33ff      	adds	r3, #255	@ 0xff
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <USB_EPStartXfer+0xfb2>
 800b0b4:	187b      	adds	r3, r7, r1
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	4aaa      	ldr	r2, [pc, #680]	@ (800b368 <USB_EPStartXfer+0x1250>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	187b      	adds	r3, r7, r1
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	801a      	strh	r2, [r3, #0]
 800b0c8:	e072      	b.n	800b1b0 <USB_EPStartXfer+0x1098>
 800b0ca:	1d7b      	adds	r3, r7, #5
 800b0cc:	33ff      	adds	r3, #255	@ 0xff
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0d2:	d822      	bhi.n	800b11a <USB_EPStartXfer+0x1002>
 800b0d4:	1d7b      	adds	r3, r7, #5
 800b0d6:	33ff      	adds	r3, #255	@ 0xff
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	21dc      	movs	r1, #220	@ 0xdc
 800b0de:	187a      	adds	r2, r7, r1
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	1d7b      	adds	r3, r7, #5
 800b0e4:	33ff      	adds	r3, #255	@ 0xff
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <USB_EPStartXfer+0xfe0>
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	187a      	adds	r2, r7, r1
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	21c8      	movs	r1, #200	@ 0xc8
 800b0fa:	187b      	adds	r3, r7, r1
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b29a      	uxth	r2, r3
 800b102:	23dc      	movs	r3, #220	@ 0xdc
 800b104:	18fb      	adds	r3, r7, r3
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	029b      	lsls	r3, r3, #10
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	4313      	orrs	r3, r2
 800b110:	b29a      	uxth	r2, r3
 800b112:	187b      	adds	r3, r7, r1
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	801a      	strh	r2, [r3, #0]
 800b118:	e04a      	b.n	800b1b0 <USB_EPStartXfer+0x1098>
 800b11a:	1d7b      	adds	r3, r7, #5
 800b11c:	33ff      	adds	r3, #255	@ 0xff
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	095b      	lsrs	r3, r3, #5
 800b122:	21dc      	movs	r1, #220	@ 0xdc
 800b124:	187a      	adds	r2, r7, r1
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	1d7b      	adds	r3, r7, #5
 800b12a:	33ff      	adds	r3, #255	@ 0xff
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	221f      	movs	r2, #31
 800b130:	4013      	ands	r3, r2
 800b132:	d104      	bne.n	800b13e <USB_EPStartXfer+0x1026>
 800b134:	187b      	adds	r3, r7, r1
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3b01      	subs	r3, #1
 800b13a:	187a      	adds	r2, r7, r1
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	21c8      	movs	r1, #200	@ 0xc8
 800b140:	187b      	adds	r3, r7, r1
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	b29a      	uxth	r2, r3
 800b148:	23dc      	movs	r3, #220	@ 0xdc
 800b14a:	18fb      	adds	r3, r7, r3
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	029b      	lsls	r3, r3, #10
 800b152:	b29b      	uxth	r3, r3
 800b154:	4313      	orrs	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	4a83      	ldr	r2, [pc, #524]	@ (800b368 <USB_EPStartXfer+0x1250>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	187b      	adds	r3, r7, r1
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	801a      	strh	r2, [r3, #0]
 800b164:	e024      	b.n	800b1b0 <USB_EPStartXfer+0x1098>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	785b      	ldrb	r3, [r3, #1]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d120      	bne.n	800b1b0 <USB_EPStartXfer+0x1098>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	21d4      	movs	r1, #212	@ 0xd4
 800b172:	187a      	adds	r2, r7, r1
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2250      	movs	r2, #80	@ 0x50
 800b17a:	5a9b      	ldrh	r3, [r3, r2]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	001a      	movs	r2, r3
 800b180:	187b      	adds	r3, r7, r1
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	189b      	adds	r3, r3, r2
 800b186:	187a      	adds	r2, r7, r1
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	00da      	lsls	r2, r3, #3
 800b190:	187b      	adds	r3, r7, r1
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	18d3      	adds	r3, r2, r3
 800b196:	4a73      	ldr	r2, [pc, #460]	@ (800b364 <USB_EPStartXfer+0x124c>)
 800b198:	4694      	mov	ip, r2
 800b19a:	4463      	add	r3, ip
 800b19c:	21d0      	movs	r1, #208	@ 0xd0
 800b19e:	187a      	adds	r2, r7, r1
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	1d7b      	adds	r3, r7, #5
 800b1a4:	33ff      	adds	r3, #255	@ 0xff
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	187b      	adds	r3, r7, r1
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	801a      	strh	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	22c4      	movs	r2, #196	@ 0xc4
 800b1b4:	18ba      	adds	r2, r7, r2
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d000      	beq.n	800b1c2 <USB_EPStartXfer+0x10aa>
 800b1c0:	e081      	b.n	800b2c6 <USB_EPStartXfer+0x11ae>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	21bc      	movs	r1, #188	@ 0xbc
 800b1c6:	187a      	adds	r2, r7, r1
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2250      	movs	r2, #80	@ 0x50
 800b1ce:	5a9b      	ldrh	r3, [r3, r2]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	001a      	movs	r2, r3
 800b1d4:	187b      	adds	r3, r7, r1
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	189b      	adds	r3, r3, r2
 800b1da:	187a      	adds	r2, r7, r1
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	00da      	lsls	r2, r3, #3
 800b1e4:	187b      	adds	r3, r7, r1
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	18d3      	adds	r3, r2, r3
 800b1ea:	4a60      	ldr	r2, [pc, #384]	@ (800b36c <USB_EPStartXfer+0x1254>)
 800b1ec:	4694      	mov	ip, r2
 800b1ee:	4463      	add	r3, ip
 800b1f0:	21b8      	movs	r1, #184	@ 0xb8
 800b1f2:	187a      	adds	r2, r7, r1
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	187b      	adds	r3, r7, r1
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	881b      	ldrh	r3, [r3, #0]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	059b      	lsls	r3, r3, #22
 800b200:	0d9b      	lsrs	r3, r3, #22
 800b202:	b29a      	uxth	r2, r3
 800b204:	187b      	adds	r3, r7, r1
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	1d7b      	adds	r3, r7, #5
 800b20c:	33ff      	adds	r3, #255	@ 0xff
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <USB_EPStartXfer+0x1112>
 800b214:	187b      	adds	r3, r7, r1
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	4a52      	ldr	r2, [pc, #328]	@ (800b368 <USB_EPStartXfer+0x1250>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	b29a      	uxth	r2, r3
 800b222:	187b      	adds	r3, r7, r1
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	e072      	b.n	800b310 <USB_EPStartXfer+0x11f8>
 800b22a:	1d7b      	adds	r3, r7, #5
 800b22c:	33ff      	adds	r3, #255	@ 0xff
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b3e      	cmp	r3, #62	@ 0x3e
 800b232:	d822      	bhi.n	800b27a <USB_EPStartXfer+0x1162>
 800b234:	1d7b      	adds	r3, r7, #5
 800b236:	33ff      	adds	r3, #255	@ 0xff
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	085b      	lsrs	r3, r3, #1
 800b23c:	21d8      	movs	r1, #216	@ 0xd8
 800b23e:	187a      	adds	r2, r7, r1
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	1d7b      	adds	r3, r7, #5
 800b244:	33ff      	adds	r3, #255	@ 0xff
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2201      	movs	r2, #1
 800b24a:	4013      	ands	r3, r2
 800b24c:	d004      	beq.n	800b258 <USB_EPStartXfer+0x1140>
 800b24e:	187b      	adds	r3, r7, r1
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	187a      	adds	r2, r7, r1
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	21b8      	movs	r1, #184	@ 0xb8
 800b25a:	187b      	adds	r3, r7, r1
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	b29a      	uxth	r2, r3
 800b262:	23d8      	movs	r3, #216	@ 0xd8
 800b264:	18fb      	adds	r3, r7, r3
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	029b      	lsls	r3, r3, #10
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4313      	orrs	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	187b      	adds	r3, r7, r1
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	801a      	strh	r2, [r3, #0]
 800b278:	e04a      	b.n	800b310 <USB_EPStartXfer+0x11f8>
 800b27a:	1d7b      	adds	r3, r7, #5
 800b27c:	33ff      	adds	r3, #255	@ 0xff
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	095b      	lsrs	r3, r3, #5
 800b282:	21d8      	movs	r1, #216	@ 0xd8
 800b284:	187a      	adds	r2, r7, r1
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	1d7b      	adds	r3, r7, #5
 800b28a:	33ff      	adds	r3, #255	@ 0xff
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	221f      	movs	r2, #31
 800b290:	4013      	ands	r3, r2
 800b292:	d104      	bne.n	800b29e <USB_EPStartXfer+0x1186>
 800b294:	187b      	adds	r3, r7, r1
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3b01      	subs	r3, #1
 800b29a:	187a      	adds	r2, r7, r1
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	21b8      	movs	r1, #184	@ 0xb8
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	23d8      	movs	r3, #216	@ 0xd8
 800b2aa:	18fb      	adds	r3, r7, r3
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	029b      	lsls	r3, r3, #10
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	4a2b      	ldr	r2, [pc, #172]	@ (800b368 <USB_EPStartXfer+0x1250>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	187b      	adds	r3, r7, r1
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	801a      	strh	r2, [r3, #0]
 800b2c4:	e024      	b.n	800b310 <USB_EPStartXfer+0x11f8>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d120      	bne.n	800b310 <USB_EPStartXfer+0x11f8>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2250      	movs	r2, #80	@ 0x50
 800b2d2:	5a9b      	ldrh	r3, [r3, r2]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	001a      	movs	r2, r3
 800b2d8:	21c4      	movs	r1, #196	@ 0xc4
 800b2da:	187b      	adds	r3, r7, r1
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	187a      	adds	r2, r7, r1
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	00da      	lsls	r2, r3, #3
 800b2ea:	187b      	adds	r3, r7, r1
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	18d3      	adds	r3, r2, r3
 800b2f0:	4a1e      	ldr	r2, [pc, #120]	@ (800b36c <USB_EPStartXfer+0x1254>)
 800b2f2:	4694      	mov	ip, r2
 800b2f4:	4463      	add	r3, ip
 800b2f6:	21c0      	movs	r1, #192	@ 0xc0
 800b2f8:	187a      	adds	r2, r7, r1
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	1d7b      	adds	r3, r7, #5
 800b2fe:	33ff      	adds	r3, #255	@ 0xff
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	b29a      	uxth	r2, r3
 800b304:	187b      	adds	r3, r7, r1
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	801a      	strh	r2, [r3, #0]
 800b30a:	e001      	b.n	800b310 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e025      	b.n	800b35c <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	18d3      	adds	r3, r2, r3
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	208a      	movs	r0, #138	@ 0x8a
 800b320:	183b      	adds	r3, r7, r0
 800b322:	4913      	ldr	r1, [pc, #76]	@ (800b370 <USB_EPStartXfer+0x1258>)
 800b324:	400a      	ands	r2, r1
 800b326:	801a      	strh	r2, [r3, #0]
 800b328:	183b      	adds	r3, r7, r0
 800b32a:	183a      	adds	r2, r7, r0
 800b32c:	8812      	ldrh	r2, [r2, #0]
 800b32e:	2180      	movs	r1, #128	@ 0x80
 800b330:	0149      	lsls	r1, r1, #5
 800b332:	404a      	eors	r2, r1
 800b334:	801a      	strh	r2, [r3, #0]
 800b336:	183b      	adds	r3, r7, r0
 800b338:	183a      	adds	r2, r7, r0
 800b33a:	8812      	ldrh	r2, [r2, #0]
 800b33c:	2180      	movs	r1, #128	@ 0x80
 800b33e:	0189      	lsls	r1, r1, #6
 800b340:	404a      	eors	r2, r1
 800b342:	801a      	strh	r2, [r3, #0]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	18d3      	adds	r3, r2, r3
 800b34e:	183a      	adds	r2, r7, r0
 800b350:	8812      	ldrh	r2, [r2, #0]
 800b352:	4908      	ldr	r1, [pc, #32]	@ (800b374 <USB_EPStartXfer+0x125c>)
 800b354:	430a      	orrs	r2, r1
 800b356:	b292      	uxth	r2, r2
 800b358:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	0018      	movs	r0, r3
 800b35e:	46bd      	mov	sp, r7
 800b360:	b043      	add	sp, #268	@ 0x10c
 800b362:	bd90      	pop	{r4, r7, pc}
 800b364:	00000402 	.word	0x00000402
 800b368:	ffff8000 	.word	0xffff8000
 800b36c:	00000406 	.word	0x00000406
 800b370:	ffffbf8f 	.word	0xffffbf8f
 800b374:	ffff8080 	.word	0xffff8080

0800b378 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	785b      	ldrb	r3, [r3, #1]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d01d      	beq.n	800b3c6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	18d3      	adds	r3, r2, r3
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	b29a      	uxth	r2, r3
 800b398:	200c      	movs	r0, #12
 800b39a:	183b      	adds	r3, r7, r0
 800b39c:	491b      	ldr	r1, [pc, #108]	@ (800b40c <USB_EPSetStall+0x94>)
 800b39e:	400a      	ands	r2, r1
 800b3a0:	801a      	strh	r2, [r3, #0]
 800b3a2:	183b      	adds	r3, r7, r0
 800b3a4:	183a      	adds	r2, r7, r0
 800b3a6:	8812      	ldrh	r2, [r2, #0]
 800b3a8:	2110      	movs	r1, #16
 800b3aa:	404a      	eors	r2, r1
 800b3ac:	801a      	strh	r2, [r3, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	18d3      	adds	r3, r2, r3
 800b3b8:	183a      	adds	r2, r7, r0
 800b3ba:	8812      	ldrh	r2, [r2, #0]
 800b3bc:	4914      	ldr	r1, [pc, #80]	@ (800b410 <USB_EPSetStall+0x98>)
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	801a      	strh	r2, [r3, #0]
 800b3c4:	e01d      	b.n	800b402 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	18d3      	adds	r3, r2, r3
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	200e      	movs	r0, #14
 800b3d6:	183b      	adds	r3, r7, r0
 800b3d8:	490e      	ldr	r1, [pc, #56]	@ (800b414 <USB_EPSetStall+0x9c>)
 800b3da:	400a      	ands	r2, r1
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	183b      	adds	r3, r7, r0
 800b3e0:	183a      	adds	r2, r7, r0
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	2180      	movs	r1, #128	@ 0x80
 800b3e6:	0149      	lsls	r1, r1, #5
 800b3e8:	404a      	eors	r2, r1
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	18d3      	adds	r3, r2, r3
 800b3f6:	183a      	adds	r2, r7, r0
 800b3f8:	8812      	ldrh	r2, [r2, #0]
 800b3fa:	4905      	ldr	r1, [pc, #20]	@ (800b410 <USB_EPSetStall+0x98>)
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	b292      	uxth	r2, r2
 800b400:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	0018      	movs	r0, r3
 800b406:	46bd      	mov	sp, r7
 800b408:	b004      	add	sp, #16
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	ffff8fbf 	.word	0xffff8fbf
 800b410:	ffff8080 	.word	0xffff8080
 800b414:	ffffbf8f 	.word	0xffffbf8f

0800b418 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	7b1b      	ldrb	r3, [r3, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d000      	beq.n	800b42c <USB_EPClearStall+0x14>
 800b42a:	e095      	b.n	800b558 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	785b      	ldrb	r3, [r3, #1]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d046      	beq.n	800b4c2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	18d2      	adds	r2, r2, r3
 800b43e:	2110      	movs	r1, #16
 800b440:	187b      	adds	r3, r7, r1
 800b442:	8812      	ldrh	r2, [r2, #0]
 800b444:	801a      	strh	r2, [r3, #0]
 800b446:	187b      	adds	r3, r7, r1
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	2240      	movs	r2, #64	@ 0x40
 800b44c:	4013      	ands	r3, r2
 800b44e:	d016      	beq.n	800b47e <USB_EPClearStall+0x66>
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	18d3      	adds	r3, r2, r3
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	200e      	movs	r0, #14
 800b460:	183b      	adds	r3, r7, r0
 800b462:	4940      	ldr	r1, [pc, #256]	@ (800b564 <USB_EPClearStall+0x14c>)
 800b464:	400a      	ands	r2, r1
 800b466:	801a      	strh	r2, [r3, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	18d3      	adds	r3, r2, r3
 800b472:	183a      	adds	r2, r7, r0
 800b474:	8812      	ldrh	r2, [r2, #0]
 800b476:	493c      	ldr	r1, [pc, #240]	@ (800b568 <USB_EPClearStall+0x150>)
 800b478:	430a      	orrs	r2, r1
 800b47a:	b292      	uxth	r2, r2
 800b47c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	78db      	ldrb	r3, [r3, #3]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d068      	beq.n	800b558 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	18d3      	adds	r3, r2, r3
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	b29a      	uxth	r2, r3
 800b494:	200c      	movs	r0, #12
 800b496:	183b      	adds	r3, r7, r0
 800b498:	4934      	ldr	r1, [pc, #208]	@ (800b56c <USB_EPClearStall+0x154>)
 800b49a:	400a      	ands	r2, r1
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	183b      	adds	r3, r7, r0
 800b4a0:	183a      	adds	r2, r7, r0
 800b4a2:	8812      	ldrh	r2, [r2, #0]
 800b4a4:	2120      	movs	r1, #32
 800b4a6:	404a      	eors	r2, r1
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	18d3      	adds	r3, r2, r3
 800b4b4:	183a      	adds	r2, r7, r0
 800b4b6:	8812      	ldrh	r2, [r2, #0]
 800b4b8:	492d      	ldr	r1, [pc, #180]	@ (800b570 <USB_EPClearStall+0x158>)
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	b292      	uxth	r2, r2
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	e04a      	b.n	800b558 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	18d2      	adds	r2, r2, r3
 800b4cc:	2116      	movs	r1, #22
 800b4ce:	187b      	adds	r3, r7, r1
 800b4d0:	8812      	ldrh	r2, [r2, #0]
 800b4d2:	801a      	strh	r2, [r3, #0]
 800b4d4:	187b      	adds	r3, r7, r1
 800b4d6:	881a      	ldrh	r2, [r3, #0]
 800b4d8:	2380      	movs	r3, #128	@ 0x80
 800b4da:	01db      	lsls	r3, r3, #7
 800b4dc:	4013      	ands	r3, r2
 800b4de:	d016      	beq.n	800b50e <USB_EPClearStall+0xf6>
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	18d3      	adds	r3, r2, r3
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	2014      	movs	r0, #20
 800b4f0:	183b      	adds	r3, r7, r0
 800b4f2:	491c      	ldr	r1, [pc, #112]	@ (800b564 <USB_EPClearStall+0x14c>)
 800b4f4:	400a      	ands	r2, r1
 800b4f6:	801a      	strh	r2, [r3, #0]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	18d3      	adds	r3, r2, r3
 800b502:	183a      	adds	r2, r7, r0
 800b504:	8812      	ldrh	r2, [r2, #0]
 800b506:	491b      	ldr	r1, [pc, #108]	@ (800b574 <USB_EPClearStall+0x15c>)
 800b508:	430a      	orrs	r2, r1
 800b50a:	b292      	uxth	r2, r2
 800b50c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	18d3      	adds	r3, r2, r3
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	2012      	movs	r0, #18
 800b51e:	183b      	adds	r3, r7, r0
 800b520:	4915      	ldr	r1, [pc, #84]	@ (800b578 <USB_EPClearStall+0x160>)
 800b522:	400a      	ands	r2, r1
 800b524:	801a      	strh	r2, [r3, #0]
 800b526:	183b      	adds	r3, r7, r0
 800b528:	183a      	adds	r2, r7, r0
 800b52a:	8812      	ldrh	r2, [r2, #0]
 800b52c:	2180      	movs	r1, #128	@ 0x80
 800b52e:	0149      	lsls	r1, r1, #5
 800b530:	404a      	eors	r2, r1
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	183b      	adds	r3, r7, r0
 800b536:	183a      	adds	r2, r7, r0
 800b538:	8812      	ldrh	r2, [r2, #0]
 800b53a:	2180      	movs	r1, #128	@ 0x80
 800b53c:	0189      	lsls	r1, r1, #6
 800b53e:	404a      	eors	r2, r1
 800b540:	801a      	strh	r2, [r3, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	18d3      	adds	r3, r2, r3
 800b54c:	183a      	adds	r2, r7, r0
 800b54e:	8812      	ldrh	r2, [r2, #0]
 800b550:	4907      	ldr	r1, [pc, #28]	@ (800b570 <USB_EPClearStall+0x158>)
 800b552:	430a      	orrs	r2, r1
 800b554:	b292      	uxth	r2, r2
 800b556:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	0018      	movs	r0, r3
 800b55c:	46bd      	mov	sp, r7
 800b55e:	b006      	add	sp, #24
 800b560:	bd80      	pop	{r7, pc}
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	ffff8f8f 	.word	0xffff8f8f
 800b568:	ffff80c0 	.word	0xffff80c0
 800b56c:	ffff8fbf 	.word	0xffff8fbf
 800b570:	ffff8080 	.word	0xffff8080
 800b574:	ffffc080 	.word	0xffffc080
 800b578:	ffffbf8f 	.word	0xffffbf8f

0800b57c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	000a      	movs	r2, r1
 800b586:	1cfb      	adds	r3, r7, #3
 800b588:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b58a:	1cfb      	adds	r3, r7, #3
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d103      	bne.n	800b59a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	224c      	movs	r2, #76	@ 0x4c
 800b596:	2180      	movs	r1, #128	@ 0x80
 800b598:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	0018      	movs	r0, r3
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	b002      	add	sp, #8
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2258      	movs	r2, #88	@ 0x58
 800b5b0:	5a9b      	ldrh	r3, [r3, r2]
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	4a05      	ldr	r2, [pc, #20]	@ (800b5cc <USB_DevConnect+0x28>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b299      	uxth	r1, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2258      	movs	r2, #88	@ 0x58
 800b5be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	b002      	add	sp, #8
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	46c0      	nop			@ (mov r8, r8)
 800b5cc:	ffff8000 	.word	0xffff8000

0800b5d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2244      	movs	r2, #68	@ 0x44
 800b5dc:	5a9b      	ldrh	r3, [r3, r2]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	b004      	add	sp, #16
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	@ 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	0019      	movs	r1, r3
 800b5f8:	1dbb      	adds	r3, r7, #6
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	1d3b      	adds	r3, r7, #4
 800b5fe:	1c0a      	adds	r2, r1, #0
 800b600:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b602:	1d3b      	adds	r3, r7, #4
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	085b      	lsrs	r3, r3, #1
 800b60a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b614:	1dbb      	adds	r3, r7, #6
 800b616:	881a      	ldrh	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	18d3      	adds	r3, r2, r3
 800b61c:	2280      	movs	r2, #128	@ 0x80
 800b61e:	00d2      	lsls	r2, r2, #3
 800b620:	4694      	mov	ip, r2
 800b622:	4463      	add	r3, ip
 800b624:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	627b      	str	r3, [r7, #36]	@ 0x24
 800b62a:	e020      	b.n	800b66e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	781a      	ldrb	r2, [r3, #0]
 800b630:	2112      	movs	r1, #18
 800b632:	187b      	adds	r3, r7, r1
 800b634:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	3301      	adds	r3, #1
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	b21a      	sxth	r2, r3
 800b640:	187b      	adds	r3, r7, r1
 800b642:	2000      	movs	r0, #0
 800b644:	5e1b      	ldrsh	r3, [r3, r0]
 800b646:	4313      	orrs	r3, r2
 800b648:	b21a      	sxth	r2, r3
 800b64a:	187b      	adds	r3, r7, r1
 800b64c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	187a      	adds	r2, r7, r1
 800b652:	8812      	ldrh	r2, [r2, #0]
 800b654:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	3302      	adds	r3, #2
 800b65a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	3301      	adds	r3, #1
 800b660:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	3301      	adds	r3, #1
 800b666:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	3b01      	subs	r3, #1
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1db      	bne.n	800b62c <USB_WritePMA+0x40>
  }
}
 800b674:	46c0      	nop			@ (mov r8, r8)
 800b676:	46c0      	nop			@ (mov r8, r8)
 800b678:	46bd      	mov	sp, r7
 800b67a:	b00a      	add	sp, #40	@ 0x28
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b08a      	sub	sp, #40	@ 0x28
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	0019      	movs	r1, r3
 800b68a:	1dbb      	adds	r3, r7, #6
 800b68c:	801a      	strh	r2, [r3, #0]
 800b68e:	1d3b      	adds	r3, r7, #4
 800b690:	1c0a      	adds	r2, r1, #0
 800b692:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b694:	1d3b      	adds	r3, r7, #4
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	085b      	lsrs	r3, r3, #1
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b6a6:	1dbb      	adds	r3, r7, #6
 800b6a8:	881a      	ldrh	r2, [r3, #0]
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	18d3      	adds	r3, r2, r3
 800b6ae:	2280      	movs	r2, #128	@ 0x80
 800b6b0:	00d2      	lsls	r2, r2, #3
 800b6b2:	4694      	mov	ip, r2
 800b6b4:	4463      	add	r3, ip
 800b6b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6bc:	e018      	b.n	800b6f0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	3302      	adds	r3, #2
 800b6ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	0a1b      	lsrs	r3, r3, #8
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e3      	bne.n	800b6be <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b6f6:	1d3b      	adds	r3, r7, #4
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d007      	beq.n	800b714 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	881b      	ldrh	r3, [r3, #0]
 800b708:	b29b      	uxth	r3, r3
 800b70a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	701a      	strb	r2, [r3, #0]
  }
}
 800b714:	46c0      	nop			@ (mov r8, r8)
 800b716:	46bd      	mov	sp, r7
 800b718:	b00a      	add	sp, #40	@ 0x28
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	000a      	movs	r2, r1
 800b726:	1cfb      	adds	r3, r7, #3
 800b728:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b72a:	230f      	movs	r3, #15
 800b72c:	18fb      	adds	r3, r7, r3
 800b72e:	2200      	movs	r2, #0
 800b730:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	7c1b      	ldrb	r3, [r3, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d116      	bne.n	800b768 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b73a:	2380      	movs	r3, #128	@ 0x80
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	2202      	movs	r2, #2
 800b742:	2181      	movs	r1, #129	@ 0x81
 800b744:	f002 f88b 	bl	800d85e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b74e:	2380      	movs	r3, #128	@ 0x80
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	2202      	movs	r2, #2
 800b756:	2101      	movs	r1, #1
 800b758:	f002 f881 	bl	800d85e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	23b6      	movs	r3, #182	@ 0xb6
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	2101      	movs	r1, #1
 800b764:	50d1      	str	r1, [r2, r3]
 800b766:	e013      	b.n	800b790 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	2340      	movs	r3, #64	@ 0x40
 800b76c:	2202      	movs	r2, #2
 800b76e:	2181      	movs	r1, #129	@ 0x81
 800b770:	f002 f875 	bl	800d85e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	2340      	movs	r3, #64	@ 0x40
 800b77e:	2202      	movs	r2, #2
 800b780:	2101      	movs	r1, #1
 800b782:	f002 f86c 	bl	800d85e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	23b6      	movs	r3, #182	@ 0xb6
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	2101      	movs	r1, #1
 800b78e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	2308      	movs	r3, #8
 800b794:	2203      	movs	r2, #3
 800b796:	2182      	movs	r1, #130	@ 0x82
 800b798:	f002 f861 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7a2:	2387      	movs	r3, #135	@ 0x87
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f002 f9f0 	bl	800db8c <USBD_static_malloc>
 800b7ac:	0001      	movs	r1, r0
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	23ae      	movs	r3, #174	@ 0xae
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	23ae      	movs	r3, #174	@ 0xae
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	58d3      	ldr	r3, [r2, r3]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d104      	bne.n	800b7cc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b7c2:	230f      	movs	r3, #15
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	701a      	strb	r2, [r3, #0]
 800b7ca:	e02c      	b.n	800b826 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	23ae      	movs	r3, #174	@ 0xae
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	58d3      	ldr	r3, [r2, r3]
 800b7d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	23af      	movs	r3, #175	@ 0xaf
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	58d3      	ldr	r3, [r2, r3]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	2385      	movs	r3, #133	@ 0x85
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	2386      	movs	r3, #134	@ 0x86
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	7c1b      	ldrb	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	2381      	movs	r3, #129	@ 0x81
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	58d2      	ldr	r2, [r2, r3]
 800b806:	2380      	movs	r3, #128	@ 0x80
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	2101      	movs	r1, #1
 800b80e:	f002 f970 	bl	800daf2 <USBD_LL_PrepareReceive>
 800b812:	e008      	b.n	800b826 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	2381      	movs	r3, #129	@ 0x81
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	58d2      	ldr	r2, [r2, r3]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	2340      	movs	r3, #64	@ 0x40
 800b820:	2101      	movs	r1, #1
 800b822:	f002 f966 	bl	800daf2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b826:	230f      	movs	r3, #15
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	781b      	ldrb	r3, [r3, #0]
}
 800b82c:	0018      	movs	r0, r3
 800b82e:	46bd      	mov	sp, r7
 800b830:	b004      	add	sp, #16
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	000a      	movs	r2, r1
 800b83e:	1cfb      	adds	r3, r7, #3
 800b840:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b842:	230f      	movs	r3, #15
 800b844:	18fb      	adds	r3, r7, r3
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2181      	movs	r1, #129	@ 0x81
 800b84e:	0018      	movs	r0, r3
 800b850:	f002 f83c 	bl	800d8cc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2101      	movs	r1, #1
 800b85e:	0018      	movs	r0, r3
 800b860:	f002 f834 	bl	800d8cc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	23b6      	movs	r3, #182	@ 0xb6
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	2100      	movs	r1, #0
 800b86c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2182      	movs	r1, #130	@ 0x82
 800b872:	0018      	movs	r0, r3
 800b874:	f002 f82a 	bl	800d8cc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	23ae      	movs	r3, #174	@ 0xae
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	58d3      	ldr	r3, [r2, r3]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d011      	beq.n	800b8ae <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	23af      	movs	r3, #175	@ 0xaf
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	58d3      	ldr	r3, [r2, r3]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	23ae      	movs	r3, #174	@ 0xae
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	58d3      	ldr	r3, [r2, r3]
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f002 f980 	bl	800dba4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	23ae      	movs	r3, #174	@ 0xae
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b8ae:	230f      	movs	r3, #15
 800b8b0:	18fb      	adds	r3, r7, r3
 800b8b2:	781b      	ldrb	r3, [r3, #0]
}
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b004      	add	sp, #16
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	23ae      	movs	r3, #174	@ 0xae
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	58d3      	ldr	r3, [r2, r3]
 800b8ce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b8d0:	230f      	movs	r3, #15
 800b8d2:	18fb      	adds	r3, r7, r3
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b8d8:	230c      	movs	r3, #12
 800b8da:	18fb      	adds	r3, r7, r3
 800b8dc:	2200      	movs	r2, #0
 800b8de:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b8e0:	2317      	movs	r3, #23
 800b8e2:	18fb      	adds	r3, r7, r3
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	2360      	movs	r3, #96	@ 0x60
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	d03d      	beq.n	800b970 <USBD_CDC_Setup+0xb4>
 800b8f4:	2b20      	cmp	r3, #32
 800b8f6:	d000      	beq.n	800b8fa <USBD_CDC_Setup+0x3e>
 800b8f8:	e094      	b.n	800ba24 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	88db      	ldrh	r3, [r3, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d02b      	beq.n	800b95a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	b25b      	sxtb	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	da12      	bge.n	800b932 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	23af      	movs	r3, #175	@ 0xaf
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	58d3      	ldr	r3, [r2, r3]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b91a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	88d2      	ldrh	r2, [r2, #6]
 800b920:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	88da      	ldrh	r2, [r3, #6]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	0018      	movs	r0, r3
 800b92c:	f001 fbaf 	bl	800d08e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b930:	e083      	b.n	800ba3a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	7859      	ldrb	r1, [r3, #1]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	2380      	movs	r3, #128	@ 0x80
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	88db      	ldrh	r3, [r3, #6]
 800b942:	b2d9      	uxtb	r1, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	4a40      	ldr	r2, [pc, #256]	@ (800ba48 <USBD_CDC_Setup+0x18c>)
 800b948:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b94a:	6939      	ldr	r1, [r7, #16]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	88da      	ldrh	r2, [r3, #6]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	0018      	movs	r0, r3
 800b954:	f001 fbce 	bl	800d0f4 <USBD_CtlPrepareRx>
      break;
 800b958:	e06f      	b.n	800ba3a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	23af      	movs	r3, #175	@ 0xaf
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	58d3      	ldr	r3, [r2, r3]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	7850      	ldrb	r0, [r2, #1]
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	2200      	movs	r2, #0
 800b96c:	4798      	blx	r3
      break;
 800b96e:	e064      	b.n	800ba3a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b0b      	cmp	r3, #11
 800b976:	d037      	beq.n	800b9e8 <USBD_CDC_Setup+0x12c>
 800b978:	dc47      	bgt.n	800ba0a <USBD_CDC_Setup+0x14e>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <USBD_CDC_Setup+0xc8>
 800b97e:	2b0a      	cmp	r3, #10
 800b980:	d019      	beq.n	800b9b6 <USBD_CDC_Setup+0xfa>
 800b982:	e042      	b.n	800ba0a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	23a7      	movs	r3, #167	@ 0xa7
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	5cd3      	ldrb	r3, [r2, r3]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d107      	bne.n	800b9a0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b990:	230c      	movs	r3, #12
 800b992:	18f9      	adds	r1, r7, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	0018      	movs	r0, r3
 800b99a:	f001 fb78 	bl	800d08e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b99e:	e040      	b.n	800ba22 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	0011      	movs	r1, r2
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f001 faf3 	bl	800cf92 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9ac:	2317      	movs	r3, #23
 800b9ae:	18fb      	adds	r3, r7, r3
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	701a      	strb	r2, [r3, #0]
          break;
 800b9b4:	e035      	b.n	800ba22 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	23a7      	movs	r3, #167	@ 0xa7
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	5cd3      	ldrb	r3, [r2, r3]
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d107      	bne.n	800b9d2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9c2:	230f      	movs	r3, #15
 800b9c4:	18f9      	adds	r1, r7, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	f001 fb5f 	bl	800d08e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9d0:	e027      	b.n	800ba22 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	0011      	movs	r1, r2
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f001 fada 	bl	800cf92 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9de:	2317      	movs	r3, #23
 800b9e0:	18fb      	adds	r3, r7, r3
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	701a      	strb	r2, [r3, #0]
          break;
 800b9e6:	e01c      	b.n	800ba22 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	23a7      	movs	r3, #167	@ 0xa7
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	5cd3      	ldrb	r3, [r2, r3]
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d015      	beq.n	800ba20 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	0011      	movs	r1, r2
 800b9fa:	0018      	movs	r0, r3
 800b9fc:	f001 fac9 	bl	800cf92 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba00:	2317      	movs	r3, #23
 800ba02:	18fb      	adds	r3, r7, r3
 800ba04:	2202      	movs	r2, #2
 800ba06:	701a      	strb	r2, [r3, #0]
          }
          break;
 800ba08:	e00a      	b.n	800ba20 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	0011      	movs	r1, r2
 800ba10:	0018      	movs	r0, r3
 800ba12:	f001 fabe 	bl	800cf92 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba16:	2317      	movs	r3, #23
 800ba18:	18fb      	adds	r3, r7, r3
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	701a      	strb	r2, [r3, #0]
          break;
 800ba1e:	e000      	b.n	800ba22 <USBD_CDC_Setup+0x166>
          break;
 800ba20:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ba22:	e00a      	b.n	800ba3a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0011      	movs	r1, r2
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f001 fab1 	bl	800cf92 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba30:	2317      	movs	r3, #23
 800ba32:	18fb      	adds	r3, r7, r3
 800ba34:	2202      	movs	r2, #2
 800ba36:	701a      	strb	r2, [r3, #0]
      break;
 800ba38:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800ba3a:	2317      	movs	r3, #23
 800ba3c:	18fb      	adds	r3, r7, r3
 800ba3e:	781b      	ldrb	r3, [r3, #0]
}
 800ba40:	0018      	movs	r0, r3
 800ba42:	46bd      	mov	sp, r7
 800ba44:	b006      	add	sp, #24
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	00000201 	.word	0x00000201

0800ba4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	000a      	movs	r2, r1
 800ba56:	1cfb      	adds	r3, r7, #3
 800ba58:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	23ae      	movs	r3, #174	@ 0xae
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	58d3      	ldr	r3, [r2, r3]
 800ba62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	23b0      	movs	r3, #176	@ 0xb0
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	58d3      	ldr	r3, [r2, r3]
 800ba6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	23ae      	movs	r3, #174	@ 0xae
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	58d3      	ldr	r3, [r2, r3]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d03e      	beq.n	800baf8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba7a:	1cfb      	adds	r3, r7, #3
 800ba7c:	781a      	ldrb	r2, [r3, #0]
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	0013      	movs	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	189b      	adds	r3, r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	18cb      	adds	r3, r1, r3
 800ba8a:	331c      	adds	r3, #28
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d02b      	beq.n	800baea <USBD_CDC_DataIn+0x9e>
 800ba92:	1cfb      	adds	r3, r7, #3
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	0013      	movs	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	189b      	adds	r3, r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	18cb      	adds	r3, r1, r3
 800baa2:	331c      	adds	r3, #28
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	1cfb      	adds	r3, r7, #3
 800baa8:	781a      	ldrb	r2, [r3, #0]
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	0013      	movs	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	18cb      	adds	r3, r1, r3
 800bab6:	3320      	adds	r3, #32
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	0019      	movs	r1, r3
 800babc:	f7f4 fbc6 	bl	800024c <__aeabi_uidivmod>
 800bac0:	1e0b      	subs	r3, r1, #0
 800bac2:	d112      	bne.n	800baea <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bac4:	1cfb      	adds	r3, r7, #3
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	6879      	ldr	r1, [r7, #4]
 800baca:	0013      	movs	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	189b      	adds	r3, r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	18cb      	adds	r3, r1, r3
 800bad4:	331c      	adds	r3, #28
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bada:	1cfb      	adds	r3, r7, #3
 800badc:	7819      	ldrb	r1, [r3, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	2300      	movs	r3, #0
 800bae2:	2200      	movs	r2, #0
 800bae4:	f001 ffce 	bl	800da84 <USBD_LL_Transmit>
 800bae8:	e004      	b.n	800baf4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	2385      	movs	r3, #133	@ 0x85
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	2100      	movs	r1, #0
 800baf2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	e000      	b.n	800bafa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800baf8:	2302      	movs	r3, #2
  }
}
 800bafa:	0018      	movs	r0, r3
 800bafc:	46bd      	mov	sp, r7
 800bafe:	b004      	add	sp, #16
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	000a      	movs	r2, r1
 800bb0c:	1cfb      	adds	r3, r7, #3
 800bb0e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	23ae      	movs	r3, #174	@ 0xae
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	58d3      	ldr	r3, [r2, r3]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb1a:	1cfb      	adds	r3, r7, #3
 800bb1c:	781a      	ldrb	r2, [r3, #0]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	0011      	movs	r1, r2
 800bb22:	0018      	movs	r0, r3
 800bb24:	f002 f81c 	bl	800db60 <USBD_LL_GetRxDataSize>
 800bb28:	0001      	movs	r1, r0
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	2383      	movs	r3, #131	@ 0x83
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	23ae      	movs	r3, #174	@ 0xae
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	58d3      	ldr	r3, [r2, r3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d011      	beq.n	800bb62 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	23af      	movs	r3, #175	@ 0xaf
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	58d3      	ldr	r3, [r2, r3]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	68f9      	ldr	r1, [r7, #12]
 800bb4a:	2381      	movs	r3, #129	@ 0x81
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	58c8      	ldr	r0, [r1, r3]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2183      	movs	r1, #131	@ 0x83
 800bb54:	0089      	lsls	r1, r1, #2
 800bb56:	468c      	mov	ip, r1
 800bb58:	4463      	add	r3, ip
 800bb5a:	0019      	movs	r1, r3
 800bb5c:	4790      	blx	r2

    return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e000      	b.n	800bb64 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800bb62:	2302      	movs	r3, #2
  }
}
 800bb64:	0018      	movs	r0, r3
 800bb66:	46bd      	mov	sp, r7
 800bb68:	b004      	add	sp, #16
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b590      	push	{r4, r7, lr}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	23ae      	movs	r3, #174	@ 0xae
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	58d3      	ldr	r3, [r2, r3]
 800bb7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	23af      	movs	r3, #175	@ 0xaf
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	58d3      	ldr	r3, [r2, r3]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d018      	beq.n	800bbbc <USBD_CDC_EP0_RxReady+0x50>
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	2380      	movs	r3, #128	@ 0x80
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	5cd3      	ldrb	r3, [r2, r3]
 800bb92:	2bff      	cmp	r3, #255	@ 0xff
 800bb94:	d012      	beq.n	800bbbc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	23af      	movs	r3, #175	@ 0xaf
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	58d3      	ldr	r3, [r2, r3]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	68f9      	ldr	r1, [r7, #12]
 800bba2:	2280      	movs	r2, #128	@ 0x80
 800bba4:	0092      	lsls	r2, r2, #2
 800bba6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800bba8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4c06      	ldr	r4, [pc, #24]	@ (800bbc8 <USBD_CDC_EP0_RxReady+0x5c>)
 800bbae:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bbb0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	2380      	movs	r3, #128	@ 0x80
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	21ff      	movs	r1, #255	@ 0xff
 800bbba:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	b005      	add	sp, #20
 800bbc4:	bd90      	pop	{r4, r7, pc}
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	00000201 	.word	0x00000201

0800bbcc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2243      	movs	r2, #67	@ 0x43
 800bbd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bbda:	4b02      	ldr	r3, [pc, #8]	@ (800bbe4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800bbdc:	0018      	movs	r0, r3
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	b002      	add	sp, #8
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20000108 	.word	0x20000108

0800bbe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2243      	movs	r2, #67	@ 0x43
 800bbf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bbf6:	4b02      	ldr	r3, [pc, #8]	@ (800bc00 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	b002      	add	sp, #8
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200000c4 	.word	0x200000c4

0800bc04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2243      	movs	r2, #67	@ 0x43
 800bc10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bc12:	4b02      	ldr	r3, [pc, #8]	@ (800bc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800bc14:	0018      	movs	r0, r3
 800bc16:	46bd      	mov	sp, r7
 800bc18:	b002      	add	sp, #8
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	2000014c 	.word	0x2000014c

0800bc20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	220a      	movs	r2, #10
 800bc2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bc2e:	4b02      	ldr	r3, [pc, #8]	@ (800bc38 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800bc30:	0018      	movs	r0, r3
 800bc32:	46bd      	mov	sp, r7
 800bc34:	b002      	add	sp, #8
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20000080 	.word	0x20000080

0800bc3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bc46:	200f      	movs	r0, #15
 800bc48:	183b      	adds	r3, r7, r0
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	23af      	movs	r3, #175	@ 0xaf
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800bc5e:	183b      	adds	r3, r7, r0
 800bc60:	2200      	movs	r2, #0
 800bc62:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800bc64:	230f      	movs	r3, #15
 800bc66:	18fb      	adds	r3, r7, r3
 800bc68:	781b      	ldrb	r3, [r3, #0]
}
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	b004      	add	sp, #16
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b086      	sub	sp, #24
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	1dbb      	adds	r3, r7, #6
 800bc7e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	23ae      	movs	r3, #174	@ 0xae
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	58d3      	ldr	r3, [r2, r3]
 800bc88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	2382      	movs	r3, #130	@ 0x82
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800bc94:	1dbb      	adds	r3, r7, #6
 800bc96:	8819      	ldrh	r1, [r3, #0]
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	2384      	movs	r3, #132	@ 0x84
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	0018      	movs	r0, r3
 800bca4:	46bd      	mov	sp, r7
 800bca6:	b006      	add	sp, #24
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	23ae      	movs	r3, #174	@ 0xae
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	58d3      	ldr	r3, [r2, r3]
 800bcbc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	2381      	movs	r3, #129	@ 0x81
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	0018      	movs	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b004      	add	sp, #16
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	23ae      	movs	r3, #174	@ 0xae
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	58d3      	ldr	r3, [r2, r3]
 800bce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	23ae      	movs	r3, #174	@ 0xae
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	58d3      	ldr	r3, [r2, r3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d022      	beq.n	800bd36 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	2385      	movs	r3, #133	@ 0x85
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	58d3      	ldr	r3, [r2, r3]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d11a      	bne.n	800bd32 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	2385      	movs	r3, #133	@ 0x85
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	2101      	movs	r1, #1
 800bd04:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	2384      	movs	r3, #132	@ 0x84
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	58d2      	ldr	r2, [r2, r3]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	2382      	movs	r3, #130	@ 0x82
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	2384      	movs	r3, #132	@ 0x84
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	000a      	movs	r2, r1
 800bd28:	2181      	movs	r1, #129	@ 0x81
 800bd2a:	f001 feab 	bl	800da84 <USBD_LL_Transmit>

      return USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e002      	b.n	800bd38 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800bd36:	2302      	movs	r3, #2
  }
}
 800bd38:	0018      	movs	r0, r3
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	b004      	add	sp, #16
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	23ae      	movs	r3, #174	@ 0xae
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	58d3      	ldr	r3, [r2, r3]
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	23ae      	movs	r3, #174	@ 0xae
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	58d3      	ldr	r3, [r2, r3]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d019      	beq.n	800bd92 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7c1b      	ldrb	r3, [r3, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	2381      	movs	r3, #129	@ 0x81
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	58d2      	ldr	r2, [r2, r3]
 800bd6e:	2380      	movs	r3, #128	@ 0x80
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	2101      	movs	r1, #1
 800bd76:	f001 febc 	bl	800daf2 <USBD_LL_PrepareReceive>
 800bd7a:	e008      	b.n	800bd8e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	2381      	movs	r3, #129	@ 0x81
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	58d2      	ldr	r2, [r2, r3]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	2340      	movs	r3, #64	@ 0x40
 800bd88:	2101      	movs	r1, #1
 800bd8a:	f001 feb2 	bl	800daf2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e000      	b.n	800bd94 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800bd92:	2302      	movs	r3, #2
  }
}
 800bd94:	0018      	movs	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	b004      	add	sp, #16
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	1dfb      	adds	r3, r7, #7
 800bda8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	e020      	b.n	800bdf6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	23ad      	movs	r3, #173	@ 0xad
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	58d3      	ldr	r3, [r2, r3]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d004      	beq.n	800bdca <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	23ad      	movs	r3, #173	@ 0xad
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d004      	beq.n	800bdda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	23ac      	movs	r3, #172	@ 0xac
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	68b9      	ldr	r1, [r7, #8]
 800bdd8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	23a7      	movs	r3, #167	@ 0xa7
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	2101      	movs	r1, #1
 800bde2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	1dfa      	adds	r2, r7, #7
 800bde8:	7812      	ldrb	r2, [r2, #0]
 800bdea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	0018      	movs	r0, r3
 800bdf0:	f001 fcac 	bl	800d74c <USBD_LL_Init>

  return USBD_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	b004      	add	sp, #16
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800be08:	200f      	movs	r0, #15
 800be0a:	183b      	adds	r3, r7, r0
 800be0c:	2200      	movs	r2, #0
 800be0e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d008      	beq.n	800be28 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	23ad      	movs	r3, #173	@ 0xad
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800be20:	183b      	adds	r3, r7, r0
 800be22:	2200      	movs	r2, #0
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e003      	b.n	800be30 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800be28:	230f      	movs	r3, #15
 800be2a:	18fb      	adds	r3, r7, r3
 800be2c:	2202      	movs	r2, #2
 800be2e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800be30:	230f      	movs	r3, #15
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	781b      	ldrb	r3, [r3, #0]
}
 800be36:	0018      	movs	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	b004      	add	sp, #16
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	0018      	movs	r0, r3
 800be4a:	f001 fce3 	bl	800d814 <USBD_LL_Start>

  return USBD_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	0018      	movs	r0, r3
 800be52:	46bd      	mov	sp, r7
 800be54:	b002      	add	sp, #8
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	0018      	movs	r0, r3
 800be64:	46bd      	mov	sp, r7
 800be66:	b002      	add	sp, #8
 800be68:	bd80      	pop	{r7, pc}

0800be6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be6a:	b590      	push	{r4, r7, lr}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	000a      	movs	r2, r1
 800be74:	1cfb      	adds	r3, r7, #3
 800be76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be78:	240f      	movs	r4, #15
 800be7a:	193b      	adds	r3, r7, r4
 800be7c:	2202      	movs	r2, #2
 800be7e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	23ad      	movs	r3, #173	@ 0xad
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	58d3      	ldr	r3, [r2, r3]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00e      	beq.n	800beaa <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	23ad      	movs	r3, #173	@ 0xad
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	58d3      	ldr	r3, [r2, r3]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	1cfa      	adds	r2, r7, #3
 800be98:	7811      	ldrb	r1, [r2, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	0010      	movs	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	1e03      	subs	r3, r0, #0
 800bea2:	d102      	bne.n	800beaa <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800bea4:	193b      	adds	r3, r7, r4
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800beaa:	230f      	movs	r3, #15
 800beac:	18fb      	adds	r3, r7, r3
 800beae:	781b      	ldrb	r3, [r3, #0]
}
 800beb0:	0018      	movs	r0, r3
 800beb2:	46bd      	mov	sp, r7
 800beb4:	b005      	add	sp, #20
 800beb6:	bd90      	pop	{r4, r7, pc}

0800beb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	000a      	movs	r2, r1
 800bec2:	1cfb      	adds	r3, r7, #3
 800bec4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	23ad      	movs	r3, #173	@ 0xad
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	58d3      	ldr	r3, [r2, r3]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	1cfa      	adds	r2, r7, #3
 800bed2:	7811      	ldrb	r1, [r2, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	0010      	movs	r0, r2
 800bed8:	4798      	blx	r3

  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	0018      	movs	r0, r3
 800bede:	46bd      	mov	sp, r7
 800bee0:	b002      	add	sp, #8
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	22aa      	movs	r2, #170	@ 0xaa
 800bef2:	0092      	lsls	r2, r2, #2
 800bef4:	4694      	mov	ip, r2
 800bef6:	4463      	add	r3, ip
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	0011      	movs	r1, r2
 800befc:	0018      	movs	r0, r3
 800befe:	f001 f810 	bl	800cf22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	23a5      	movs	r3, #165	@ 0xa5
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	2101      	movs	r1, #1
 800bf0a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a23      	ldr	r2, [pc, #140]	@ (800bf9c <USBD_LL_SetupStage+0xb8>)
 800bf10:	5a9b      	ldrh	r3, [r3, r2]
 800bf12:	0019      	movs	r1, r3
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	23a6      	movs	r3, #166	@ 0xa6
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	23aa      	movs	r3, #170	@ 0xaa
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	5cd3      	ldrb	r3, [r2, r3]
 800bf24:	001a      	movs	r2, r3
 800bf26:	231f      	movs	r3, #31
 800bf28:	4013      	ands	r3, r2
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d019      	beq.n	800bf62 <USBD_LL_SetupStage+0x7e>
 800bf2e:	d822      	bhi.n	800bf76 <USBD_LL_SetupStage+0x92>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <USBD_LL_SetupStage+0x56>
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d00a      	beq.n	800bf4e <USBD_LL_SetupStage+0x6a>
 800bf38:	e01d      	b.n	800bf76 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	22aa      	movs	r2, #170	@ 0xaa
 800bf3e:	0092      	lsls	r2, r2, #2
 800bf40:	189a      	adds	r2, r3, r2
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	0011      	movs	r1, r2
 800bf46:	0018      	movs	r0, r3
 800bf48:	f000 fa10 	bl	800c36c <USBD_StdDevReq>
      break;
 800bf4c:	e020      	b.n	800bf90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	22aa      	movs	r2, #170	@ 0xaa
 800bf52:	0092      	lsls	r2, r2, #2
 800bf54:	189a      	adds	r2, r3, r2
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	0011      	movs	r1, r2
 800bf5a:	0018      	movs	r0, r3
 800bf5c:	f000 fa78 	bl	800c450 <USBD_StdItfReq>
      break;
 800bf60:	e016      	b.n	800bf90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	22aa      	movs	r2, #170	@ 0xaa
 800bf66:	0092      	lsls	r2, r2, #2
 800bf68:	189a      	adds	r2, r3, r2
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	0011      	movs	r1, r2
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f000 fac5 	bl	800c4fe <USBD_StdEPReq>
      break;
 800bf74:	e00c      	b.n	800bf90 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	23aa      	movs	r3, #170	@ 0xaa
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	5cd3      	ldrb	r3, [r2, r3]
 800bf7e:	227f      	movs	r2, #127	@ 0x7f
 800bf80:	4393      	bics	r3, r2
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	0011      	movs	r1, r2
 800bf88:	0018      	movs	r0, r3
 800bf8a:	f001 fcca 	bl	800d922 <USBD_LL_StallEP>
      break;
 800bf8e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	0018      	movs	r0, r3
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b002      	add	sp, #8
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	000002ae 	.word	0x000002ae

0800bfa0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	607a      	str	r2, [r7, #4]
 800bfaa:	200b      	movs	r0, #11
 800bfac:	183b      	adds	r3, r7, r0
 800bfae:	1c0a      	adds	r2, r1, #0
 800bfb0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bfb2:	183b      	adds	r3, r7, r0
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d154      	bne.n	800c064 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3355      	adds	r3, #85	@ 0x55
 800bfbe:	33ff      	adds	r3, #255	@ 0xff
 800bfc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	23a5      	movs	r3, #165	@ 0xa5
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	58d3      	ldr	r3, [r2, r3]
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d139      	bne.n	800c042 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d919      	bls.n	800c00e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	1ad2      	subs	r2, r2, r3
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	68da      	ldr	r2, [r3, #12]
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d203      	bcs.n	800bffc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	e002      	b.n	800c002 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c000:	b29b      	uxth	r3, r3
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	001a      	movs	r2, r3
 800c008:	f001 f898 	bl	800d13c <USBD_CtlContinueRx>
 800c00c:	e045      	b.n	800c09a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	23ad      	movs	r3, #173	@ 0xad
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	58d3      	ldr	r3, [r2, r3]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00d      	beq.n	800c038 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	23a7      	movs	r3, #167	@ 0xa7
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c024:	2b03      	cmp	r3, #3
 800c026:	d107      	bne.n	800c038 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	23ad      	movs	r3, #173	@ 0xad
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	58d3      	ldr	r3, [r2, r3]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	0010      	movs	r0, r2
 800c036:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0018      	movs	r0, r3
 800c03c:	f001 f891 	bl	800d162 <USBD_CtlSendStatus>
 800c040:	e02b      	b.n	800c09a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	23a5      	movs	r3, #165	@ 0xa5
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	58d3      	ldr	r3, [r2, r3]
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d125      	bne.n	800c09a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	23a5      	movs	r3, #165	@ 0xa5
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	2100      	movs	r1, #0
 800c056:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2100      	movs	r1, #0
 800c05c:	0018      	movs	r0, r3
 800c05e:	f001 fc60 	bl	800d922 <USBD_LL_StallEP>
 800c062:	e01a      	b.n	800c09a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	23ad      	movs	r3, #173	@ 0xad
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	58d3      	ldr	r3, [r2, r3]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d011      	beq.n	800c096 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	23a7      	movs	r3, #167	@ 0xa7
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d10b      	bne.n	800c096 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	23ad      	movs	r3, #173	@ 0xad
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	58d3      	ldr	r3, [r2, r3]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	220b      	movs	r2, #11
 800c08a:	18ba      	adds	r2, r7, r2
 800c08c:	7811      	ldrb	r1, [r2, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	0010      	movs	r0, r2
 800c092:	4798      	blx	r3
 800c094:	e001      	b.n	800c09a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c096:	2302      	movs	r3, #2
 800c098:	e000      	b.n	800c09c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	0018      	movs	r0, r3
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	b006      	add	sp, #24
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	200b      	movs	r0, #11
 800c0b0:	183b      	adds	r3, r7, r0
 800c0b2:	1c0a      	adds	r2, r1, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c0b6:	183b      	adds	r3, r7, r0
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d000      	beq.n	800c0c0 <USBD_LL_DataInStage+0x1c>
 800c0be:	e08e      	b.n	800c1de <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3314      	adds	r3, #20
 800c0c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	23a5      	movs	r3, #165	@ 0xa5
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	58d3      	ldr	r3, [r2, r3]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d164      	bne.n	800c19c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	68da      	ldr	r2, [r3, #12]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d915      	bls.n	800c10a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	1ad2      	subs	r2, r2, r3
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	0018      	movs	r0, r3
 800c0f8:	f000 ffe9 	bl	800d0ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	2300      	movs	r3, #0
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	f001 fcf5 	bl	800daf2 <USBD_LL_PrepareReceive>
 800c108:	e059      	b.n	800c1be <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	0019      	movs	r1, r3
 800c114:	0010      	movs	r0, r2
 800c116:	f7f4 f899 	bl	800024c <__aeabi_uidivmod>
 800c11a:	1e0b      	subs	r3, r1, #0
 800c11c:	d11f      	bne.n	800c15e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	689a      	ldr	r2, [r3, #8]
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c126:	429a      	cmp	r2, r3
 800c128:	d319      	bcc.n	800c15e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	68f9      	ldr	r1, [r7, #12]
 800c130:	23a6      	movs	r3, #166	@ 0xa6
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c136:	429a      	cmp	r2, r3
 800c138:	d211      	bcs.n	800c15e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	2100      	movs	r1, #0
 800c140:	0018      	movs	r0, r3
 800c142:	f000 ffc4 	bl	800d0ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	23a6      	movs	r3, #166	@ 0xa6
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	2100      	movs	r1, #0
 800c14e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	f001 fccb 	bl	800daf2 <USBD_LL_PrepareReceive>
 800c15c:	e02f      	b.n	800c1be <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	23ad      	movs	r3, #173	@ 0xad
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	58d3      	ldr	r3, [r2, r3]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00d      	beq.n	800c188 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	23a7      	movs	r3, #167	@ 0xa7
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c174:	2b03      	cmp	r3, #3
 800c176:	d107      	bne.n	800c188 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	23ad      	movs	r3, #173	@ 0xad
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	58d3      	ldr	r3, [r2, r3]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	0010      	movs	r0, r2
 800c186:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2180      	movs	r1, #128	@ 0x80
 800c18c:	0018      	movs	r0, r3
 800c18e:	f001 fbc8 	bl	800d922 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	0018      	movs	r0, r3
 800c196:	f000 fff8 	bl	800d18a <USBD_CtlReceiveStatus>
 800c19a:	e010      	b.n	800c1be <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	23a5      	movs	r3, #165	@ 0xa5
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	58d3      	ldr	r3, [r2, r3]
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d005      	beq.n	800c1b4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	23a5      	movs	r3, #165	@ 0xa5
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2180      	movs	r1, #128	@ 0x80
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f001 fbb2 	bl	800d922 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	23a8      	movs	r3, #168	@ 0xa8
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	5cd3      	ldrb	r3, [r2, r3]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d124      	bne.n	800c214 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f7ff fe43 	bl	800be58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	23a8      	movs	r3, #168	@ 0xa8
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	2100      	movs	r1, #0
 800c1da:	54d1      	strb	r1, [r2, r3]
 800c1dc:	e01a      	b.n	800c214 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	23ad      	movs	r3, #173	@ 0xad
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	58d3      	ldr	r3, [r2, r3]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d011      	beq.n	800c210 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	23a7      	movs	r3, #167	@ 0xa7
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d10b      	bne.n	800c210 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	23ad      	movs	r3, #173	@ 0xad
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	58d3      	ldr	r3, [r2, r3]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	220b      	movs	r2, #11
 800c204:	18ba      	adds	r2, r7, r2
 800c206:	7811      	ldrb	r1, [r2, #0]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	0010      	movs	r0, r2
 800c20c:	4798      	blx	r3
 800c20e:	e001      	b.n	800c214 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c210:	2302      	movs	r3, #2
 800c212:	e000      	b.n	800c216 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	0018      	movs	r0, r3
 800c218:	46bd      	mov	sp, r7
 800c21a:	b006      	add	sp, #24
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	2340      	movs	r3, #64	@ 0x40
 800c22a:	2200      	movs	r2, #0
 800c22c:	2100      	movs	r1, #0
 800c22e:	f001 fb16 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	23ac      	movs	r3, #172	@ 0xac
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	2101      	movs	r1, #1
 800c23a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	23b2      	movs	r3, #178	@ 0xb2
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	2140      	movs	r1, #64	@ 0x40
 800c244:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	2340      	movs	r3, #64	@ 0x40
 800c24a:	2200      	movs	r2, #0
 800c24c:	2180      	movs	r1, #128	@ 0x80
 800c24e:	f001 fb06 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2240      	movs	r2, #64	@ 0x40
 800c25c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	23a7      	movs	r3, #167	@ 0xa7
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	2101      	movs	r1, #1
 800c266:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	23a5      	movs	r3, #165	@ 0xa5
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	2100      	movs	r1, #0
 800c270:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	23a9      	movs	r3, #169	@ 0xa9
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	2100      	movs	r1, #0
 800c280:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	23ae      	movs	r3, #174	@ 0xae
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	58d3      	ldr	r3, [r2, r3]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	23ad      	movs	r3, #173	@ 0xad
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	58d3      	ldr	r3, [r2, r3]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	b2d9      	uxtb	r1, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	4790      	blx	r2
  }

  return USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	000a      	movs	r2, r1
 800c2b8:	1cfb      	adds	r3, r7, #3
 800c2ba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1cfa      	adds	r2, r7, #3
 800c2c0:	7812      	ldrb	r2, [r2, #0]
 800c2c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	b002      	add	sp, #8
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	23a7      	movs	r3, #167	@ 0xa7
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	5cd1      	ldrb	r1, [r2, r3]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a06      	ldr	r2, [pc, #24]	@ (800c2fc <USBD_LL_Suspend+0x2c>)
 800c2e4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	23a7      	movs	r3, #167	@ 0xa7
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	2104      	movs	r1, #4
 800c2ee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b002      	add	sp, #8
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	46c0      	nop			@ (mov r8, r8)
 800c2fc:	0000029d 	.word	0x0000029d

0800c300 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	23a7      	movs	r3, #167	@ 0xa7
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	5cd3      	ldrb	r3, [r2, r3]
 800c310:	2b04      	cmp	r3, #4
 800c312:	d106      	bne.n	800c322 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a05      	ldr	r2, [pc, #20]	@ (800c32c <USBD_LL_Resume+0x2c>)
 800c318:	5c99      	ldrb	r1, [r3, r2]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	23a7      	movs	r3, #167	@ 0xa7
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	0018      	movs	r0, r3
 800c326:	46bd      	mov	sp, r7
 800c328:	b002      	add	sp, #8
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	0000029d 	.word	0x0000029d

0800c330 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	23a7      	movs	r3, #167	@ 0xa7
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	5cd3      	ldrb	r3, [r2, r3]
 800c340:	2b03      	cmp	r3, #3
 800c342:	d10e      	bne.n	800c362 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	23ad      	movs	r3, #173	@ 0xad
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	58d3      	ldr	r3, [r2, r3]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d007      	beq.n	800c362 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	23ad      	movs	r3, #173	@ 0xad
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	58d3      	ldr	r3, [r2, r3]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	0010      	movs	r0, r2
 800c360:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	0018      	movs	r0, r3
 800c366:	46bd      	mov	sp, r7
 800c368:	b002      	add	sp, #8
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c376:	230f      	movs	r3, #15
 800c378:	18fb      	adds	r3, r7, r3
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	001a      	movs	r2, r3
 800c384:	2360      	movs	r3, #96	@ 0x60
 800c386:	4013      	ands	r3, r2
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	d004      	beq.n	800c396 <USBD_StdDevReq+0x2a>
 800c38c:	d84f      	bhi.n	800c42e <USBD_StdDevReq+0xc2>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <USBD_StdDevReq+0x3e>
 800c392:	2b20      	cmp	r3, #32
 800c394:	d14b      	bne.n	800c42e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	23ad      	movs	r3, #173	@ 0xad
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	58d3      	ldr	r3, [r2, r3]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	0010      	movs	r0, r2
 800c3a6:	4798      	blx	r3
      break;
 800c3a8:	e048      	b.n	800c43c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	2b09      	cmp	r3, #9
 800c3b0:	d835      	bhi.n	800c41e <USBD_StdDevReq+0xb2>
 800c3b2:	009a      	lsls	r2, r3, #2
 800c3b4:	4b25      	ldr	r3, [pc, #148]	@ (800c44c <USBD_StdDevReq+0xe0>)
 800c3b6:	18d3      	adds	r3, r2, r3
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	0011      	movs	r1, r2
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f000 fa52 	bl	800c86c <USBD_GetDescriptor>
          break;
 800c3c8:	e030      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	0011      	movs	r1, r2
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f000 fbfd 	bl	800cbd0 <USBD_SetAddress>
          break;
 800c3d6:	e029      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	0011      	movs	r1, r2
 800c3de:	0018      	movs	r0, r3
 800c3e0:	f000 fc4a 	bl	800cc78 <USBD_SetConfig>
          break;
 800c3e4:	e022      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	0011      	movs	r1, r2
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f000 fce7 	bl	800cdc0 <USBD_GetConfig>
          break;
 800c3f2:	e01b      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	0011      	movs	r1, r2
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	f000 fd1b 	bl	800ce36 <USBD_GetStatus>
          break;
 800c400:	e014      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	0011      	movs	r1, r2
 800c408:	0018      	movs	r0, r3
 800c40a:	f000 fd4e 	bl	800ceaa <USBD_SetFeature>
          break;
 800c40e:	e00d      	b.n	800c42c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	0011      	movs	r1, r2
 800c416:	0018      	movs	r0, r3
 800c418:	f000 fd5d 	bl	800ced6 <USBD_ClrFeature>
          break;
 800c41c:	e006      	b.n	800c42c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	0011      	movs	r1, r2
 800c424:	0018      	movs	r0, r3
 800c426:	f000 fdb4 	bl	800cf92 <USBD_CtlError>
          break;
 800c42a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c42c:	e006      	b.n	800c43c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c42e:	683a      	ldr	r2, [r7, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	0011      	movs	r1, r2
 800c434:	0018      	movs	r0, r3
 800c436:	f000 fdac 	bl	800cf92 <USBD_CtlError>
      break;
 800c43a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c43c:	230f      	movs	r3, #15
 800c43e:	18fb      	adds	r3, r7, r3
 800c440:	781b      	ldrb	r3, [r3, #0]
}
 800c442:	0018      	movs	r0, r3
 800c444:	46bd      	mov	sp, r7
 800c446:	b004      	add	sp, #16
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	46c0      	nop			@ (mov r8, r8)
 800c44c:	08011af8 	.word	0x08011af8

0800c450 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c450:	b5b0      	push	{r4, r5, r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c45a:	230f      	movs	r3, #15
 800c45c:	18fb      	adds	r3, r7, r3
 800c45e:	2200      	movs	r2, #0
 800c460:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	001a      	movs	r2, r3
 800c468:	2360      	movs	r3, #96	@ 0x60
 800c46a:	4013      	ands	r3, r2
 800c46c:	2b40      	cmp	r3, #64	@ 0x40
 800c46e:	d004      	beq.n	800c47a <USBD_StdItfReq+0x2a>
 800c470:	d839      	bhi.n	800c4e6 <USBD_StdItfReq+0x96>
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <USBD_StdItfReq+0x2a>
 800c476:	2b20      	cmp	r3, #32
 800c478:	d135      	bne.n	800c4e6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	23a7      	movs	r3, #167	@ 0xa7
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	5cd3      	ldrb	r3, [r2, r3]
 800c482:	3b01      	subs	r3, #1
 800c484:	2b02      	cmp	r3, #2
 800c486:	d825      	bhi.n	800c4d4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	889b      	ldrh	r3, [r3, #4]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d819      	bhi.n	800c4c6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	23ad      	movs	r3, #173	@ 0xad
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	58d3      	ldr	r3, [r2, r3]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	250f      	movs	r5, #15
 800c49e:	197c      	adds	r4, r7, r5
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	0010      	movs	r0, r2
 800c4a6:	4798      	blx	r3
 800c4a8:	0003      	movs	r3, r0
 800c4aa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	88db      	ldrh	r3, [r3, #6]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d116      	bne.n	800c4e2 <USBD_StdItfReq+0x92>
 800c4b4:	197b      	adds	r3, r7, r5
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d112      	bne.n	800c4e2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f000 fe4f 	bl	800d162 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c4c4:	e00d      	b.n	800c4e2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	0011      	movs	r1, r2
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	f000 fd60 	bl	800cf92 <USBD_CtlError>
          break;
 800c4d2:	e006      	b.n	800c4e2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	0011      	movs	r1, r2
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f000 fd59 	bl	800cf92 <USBD_CtlError>
          break;
 800c4e0:	e000      	b.n	800c4e4 <USBD_StdItfReq+0x94>
          break;
 800c4e2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c4e4:	e006      	b.n	800c4f4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	0011      	movs	r1, r2
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f000 fd50 	bl	800cf92 <USBD_CtlError>
      break;
 800c4f2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	b004      	add	sp, #16
 800c4fc:	bdb0      	pop	{r4, r5, r7, pc}

0800c4fe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c4fe:	b5b0      	push	{r4, r5, r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c508:	230f      	movs	r3, #15
 800c50a:	18fb      	adds	r3, r7, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	889a      	ldrh	r2, [r3, #4]
 800c514:	230e      	movs	r3, #14
 800c516:	18fb      	adds	r3, r7, r3
 800c518:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	001a      	movs	r2, r3
 800c520:	2360      	movs	r3, #96	@ 0x60
 800c522:	4013      	ands	r3, r2
 800c524:	2b40      	cmp	r3, #64	@ 0x40
 800c526:	d006      	beq.n	800c536 <USBD_StdEPReq+0x38>
 800c528:	d900      	bls.n	800c52c <USBD_StdEPReq+0x2e>
 800c52a:	e190      	b.n	800c84e <USBD_StdEPReq+0x350>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00c      	beq.n	800c54a <USBD_StdEPReq+0x4c>
 800c530:	2b20      	cmp	r3, #32
 800c532:	d000      	beq.n	800c536 <USBD_StdEPReq+0x38>
 800c534:	e18b      	b.n	800c84e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	23ad      	movs	r3, #173	@ 0xad
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	58d3      	ldr	r3, [r2, r3]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	0010      	movs	r0, r2
 800c546:	4798      	blx	r3
      break;
 800c548:	e188      	b.n	800c85c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	001a      	movs	r2, r3
 800c550:	2360      	movs	r3, #96	@ 0x60
 800c552:	4013      	ands	r3, r2
 800c554:	2b20      	cmp	r3, #32
 800c556:	d10f      	bne.n	800c578 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	23ad      	movs	r3, #173	@ 0xad
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	58d3      	ldr	r3, [r2, r3]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	250f      	movs	r5, #15
 800c564:	197c      	adds	r4, r7, r5
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	0010      	movs	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	0003      	movs	r3, r0
 800c570:	7023      	strb	r3, [r4, #0]

        return ret;
 800c572:	197b      	adds	r3, r7, r5
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	e174      	b.n	800c862 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	785b      	ldrb	r3, [r3, #1]
 800c57c:	2b03      	cmp	r3, #3
 800c57e:	d007      	beq.n	800c590 <USBD_StdEPReq+0x92>
 800c580:	dd00      	ble.n	800c584 <USBD_StdEPReq+0x86>
 800c582:	e15c      	b.n	800c83e <USBD_StdEPReq+0x340>
 800c584:	2b00      	cmp	r3, #0
 800c586:	d100      	bne.n	800c58a <USBD_StdEPReq+0x8c>
 800c588:	e092      	b.n	800c6b0 <USBD_StdEPReq+0x1b2>
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d04b      	beq.n	800c626 <USBD_StdEPReq+0x128>
 800c58e:	e156      	b.n	800c83e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	23a7      	movs	r3, #167	@ 0xa7
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	5cd3      	ldrb	r3, [r2, r3]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d002      	beq.n	800c5a2 <USBD_StdEPReq+0xa4>
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d01d      	beq.n	800c5dc <USBD_StdEPReq+0xde>
 800c5a0:	e039      	b.n	800c616 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5a2:	220e      	movs	r2, #14
 800c5a4:	18bb      	adds	r3, r7, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d010      	beq.n	800c5ce <USBD_StdEPReq+0xd0>
 800c5ac:	18bb      	adds	r3, r7, r2
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b80      	cmp	r3, #128	@ 0x80
 800c5b2:	d00c      	beq.n	800c5ce <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c5b4:	18bb      	adds	r3, r7, r2
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	0011      	movs	r1, r2
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f001 f9b0 	bl	800d922 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2180      	movs	r1, #128	@ 0x80
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	f001 f9ab 	bl	800d922 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5cc:	e02a      	b.n	800c624 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	0011      	movs	r1, r2
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	f000 fcdc 	bl	800cf92 <USBD_CtlError>
              break;
 800c5da:	e023      	b.n	800c624 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	885b      	ldrh	r3, [r3, #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d113      	bne.n	800c60c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c5e4:	220e      	movs	r2, #14
 800c5e6:	18bb      	adds	r3, r7, r2
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00e      	beq.n	800c60c <USBD_StdEPReq+0x10e>
 800c5ee:	18bb      	adds	r3, r7, r2
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b80      	cmp	r3, #128	@ 0x80
 800c5f4:	d00a      	beq.n	800c60c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	88db      	ldrh	r3, [r3, #6]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c5fe:	18bb      	adds	r3, r7, r2
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	0011      	movs	r1, r2
 800c606:	0018      	movs	r0, r3
 800c608:	f001 f98b 	bl	800d922 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	0018      	movs	r0, r3
 800c610:	f000 fda7 	bl	800d162 <USBD_CtlSendStatus>

              break;
 800c614:	e006      	b.n	800c624 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	0011      	movs	r1, r2
 800c61c:	0018      	movs	r0, r3
 800c61e:	f000 fcb8 	bl	800cf92 <USBD_CtlError>
              break;
 800c622:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c624:	e112      	b.n	800c84c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	23a7      	movs	r3, #167	@ 0xa7
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	5cd3      	ldrb	r3, [r2, r3]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d002      	beq.n	800c638 <USBD_StdEPReq+0x13a>
 800c632:	2b03      	cmp	r3, #3
 800c634:	d01d      	beq.n	800c672 <USBD_StdEPReq+0x174>
 800c636:	e032      	b.n	800c69e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c638:	220e      	movs	r2, #14
 800c63a:	18bb      	adds	r3, r7, r2
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d010      	beq.n	800c664 <USBD_StdEPReq+0x166>
 800c642:	18bb      	adds	r3, r7, r2
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b80      	cmp	r3, #128	@ 0x80
 800c648:	d00c      	beq.n	800c664 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c64a:	18bb      	adds	r3, r7, r2
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	0011      	movs	r1, r2
 800c652:	0018      	movs	r0, r3
 800c654:	f001 f965 	bl	800d922 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2180      	movs	r1, #128	@ 0x80
 800c65c:	0018      	movs	r0, r3
 800c65e:	f001 f960 	bl	800d922 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c662:	e024      	b.n	800c6ae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	0011      	movs	r1, r2
 800c66a:	0018      	movs	r0, r3
 800c66c:	f000 fc91 	bl	800cf92 <USBD_CtlError>
              break;
 800c670:	e01d      	b.n	800c6ae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	885b      	ldrh	r3, [r3, #2]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d118      	bne.n	800c6ac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c67a:	210e      	movs	r1, #14
 800c67c:	187b      	adds	r3, r7, r1
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	227f      	movs	r2, #127	@ 0x7f
 800c682:	4013      	ands	r3, r2
 800c684:	d006      	beq.n	800c694 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c686:	187b      	adds	r3, r7, r1
 800c688:	781a      	ldrb	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	0011      	movs	r1, r2
 800c68e:	0018      	movs	r0, r3
 800c690:	f001 f972 	bl	800d978 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	0018      	movs	r0, r3
 800c698:	f000 fd63 	bl	800d162 <USBD_CtlSendStatus>
              }
              break;
 800c69c:	e006      	b.n	800c6ac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	0011      	movs	r1, r2
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	f000 fc74 	bl	800cf92 <USBD_CtlError>
              break;
 800c6aa:	e000      	b.n	800c6ae <USBD_StdEPReq+0x1b0>
              break;
 800c6ac:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c6ae:	e0cd      	b.n	800c84c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	23a7      	movs	r3, #167	@ 0xa7
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	5cd3      	ldrb	r3, [r2, r3]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d002      	beq.n	800c6c2 <USBD_StdEPReq+0x1c4>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d03c      	beq.n	800c73a <USBD_StdEPReq+0x23c>
 800c6c0:	e0b5      	b.n	800c82e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6c2:	220e      	movs	r2, #14
 800c6c4:	18bb      	adds	r3, r7, r2
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00a      	beq.n	800c6e2 <USBD_StdEPReq+0x1e4>
 800c6cc:	18bb      	adds	r3, r7, r2
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b80      	cmp	r3, #128	@ 0x80
 800c6d2:	d006      	beq.n	800c6e2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	0011      	movs	r1, r2
 800c6da:	0018      	movs	r0, r3
 800c6dc:	f000 fc59 	bl	800cf92 <USBD_CtlError>
                break;
 800c6e0:	e0ac      	b.n	800c83c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6e2:	220e      	movs	r2, #14
 800c6e4:	18bb      	adds	r3, r7, r2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b25b      	sxtb	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da0c      	bge.n	800c708 <USBD_StdEPReq+0x20a>
 800c6ee:	18bb      	adds	r3, r7, r2
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	227f      	movs	r2, #127	@ 0x7f
 800c6f4:	401a      	ands	r2, r3
 800c6f6:	0013      	movs	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	189b      	adds	r3, r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	3310      	adds	r3, #16
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	18d3      	adds	r3, r2, r3
 800c704:	3304      	adds	r3, #4
 800c706:	e00d      	b.n	800c724 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c708:	230e      	movs	r3, #14
 800c70a:	18fb      	adds	r3, r7, r3
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	227f      	movs	r2, #127	@ 0x7f
 800c710:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c712:	0013      	movs	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	189b      	adds	r3, r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	3351      	adds	r3, #81	@ 0x51
 800c71c:	33ff      	adds	r3, #255	@ 0xff
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	18d3      	adds	r3, r2, r3
 800c722:	3304      	adds	r3, #4
 800c724:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2202      	movs	r2, #2
 800c732:	0018      	movs	r0, r3
 800c734:	f000 fcab 	bl	800d08e <USBD_CtlSendData>
              break;
 800c738:	e080      	b.n	800c83c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c73a:	220e      	movs	r2, #14
 800c73c:	18bb      	adds	r3, r7, r2
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	b25b      	sxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	da14      	bge.n	800c770 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c746:	18bb      	adds	r3, r7, r2
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	220f      	movs	r2, #15
 800c74c:	401a      	ands	r2, r3
 800c74e:	6879      	ldr	r1, [r7, #4]
 800c750:	0013      	movs	r3, r2
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	189b      	adds	r3, r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	18cb      	adds	r3, r1, r3
 800c75a:	3318      	adds	r3, #24
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d11e      	bne.n	800c7a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	0011      	movs	r1, r2
 800c768:	0018      	movs	r0, r3
 800c76a:	f000 fc12 	bl	800cf92 <USBD_CtlError>
                  break;
 800c76e:	e065      	b.n	800c83c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c770:	230e      	movs	r3, #14
 800c772:	18fb      	adds	r3, r7, r3
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	220f      	movs	r2, #15
 800c778:	401a      	ands	r2, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	23ac      	movs	r3, #172	@ 0xac
 800c77e:	0059      	lsls	r1, r3, #1
 800c780:	0013      	movs	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	189b      	adds	r3, r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	18c3      	adds	r3, r0, r3
 800c78a:	185b      	adds	r3, r3, r1
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	0011      	movs	r1, r2
 800c798:	0018      	movs	r0, r3
 800c79a:	f000 fbfa 	bl	800cf92 <USBD_CtlError>
                  break;
 800c79e:	e04d      	b.n	800c83c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7a0:	220e      	movs	r2, #14
 800c7a2:	18bb      	adds	r3, r7, r2
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	b25b      	sxtb	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da0c      	bge.n	800c7c6 <USBD_StdEPReq+0x2c8>
 800c7ac:	18bb      	adds	r3, r7, r2
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	227f      	movs	r2, #127	@ 0x7f
 800c7b2:	401a      	ands	r2, r3
 800c7b4:	0013      	movs	r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	189b      	adds	r3, r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	3310      	adds	r3, #16
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	18d3      	adds	r3, r2, r3
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	e00d      	b.n	800c7e2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7c6:	230e      	movs	r3, #14
 800c7c8:	18fb      	adds	r3, r7, r3
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	227f      	movs	r2, #127	@ 0x7f
 800c7ce:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7d0:	0013      	movs	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	189b      	adds	r3, r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	3351      	adds	r3, #81	@ 0x51
 800c7da:	33ff      	adds	r3, #255	@ 0xff
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	18d3      	adds	r3, r2, r3
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7e4:	220e      	movs	r2, #14
 800c7e6:	18bb      	adds	r3, r7, r2
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <USBD_StdEPReq+0x2f8>
 800c7ee:	18bb      	adds	r3, r7, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b80      	cmp	r3, #128	@ 0x80
 800c7f4:	d103      	bne.n	800c7fe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	e010      	b.n	800c820 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c7fe:	230e      	movs	r3, #14
 800c800:	18fb      	adds	r3, r7, r3
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	0011      	movs	r1, r2
 800c808:	0018      	movs	r0, r3
 800c80a:	f001 f8e0 	bl	800d9ce <USBD_LL_IsStallEP>
 800c80e:	1e03      	subs	r3, r0, #0
 800c810:	d003      	beq.n	800c81a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2201      	movs	r2, #1
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e002      	b.n	800c820 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2200      	movs	r2, #0
 800c81e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2202      	movs	r2, #2
 800c826:	0018      	movs	r0, r3
 800c828:	f000 fc31 	bl	800d08e <USBD_CtlSendData>
              break;
 800c82c:	e006      	b.n	800c83c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	0011      	movs	r1, r2
 800c834:	0018      	movs	r0, r3
 800c836:	f000 fbac 	bl	800cf92 <USBD_CtlError>
              break;
 800c83a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c83c:	e006      	b.n	800c84c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	0011      	movs	r1, r2
 800c844:	0018      	movs	r0, r3
 800c846:	f000 fba4 	bl	800cf92 <USBD_CtlError>
          break;
 800c84a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c84c:	e006      	b.n	800c85c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	0011      	movs	r1, r2
 800c854:	0018      	movs	r0, r3
 800c856:	f000 fb9c 	bl	800cf92 <USBD_CtlError>
      break;
 800c85a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c85c:	230f      	movs	r3, #15
 800c85e:	18fb      	adds	r3, r7, r3
 800c860:	781b      	ldrb	r3, [r3, #0]
}
 800c862:	0018      	movs	r0, r3
 800c864:	46bd      	mov	sp, r7
 800c866:	b004      	add	sp, #16
 800c868:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c86c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c876:	2308      	movs	r3, #8
 800c878:	18fb      	adds	r3, r7, r3
 800c87a:	2200      	movs	r2, #0
 800c87c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c882:	230b      	movs	r3, #11
 800c884:	18fb      	adds	r3, r7, r3
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	885b      	ldrh	r3, [r3, #2]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	b29b      	uxth	r3, r3
 800c892:	2b07      	cmp	r3, #7
 800c894:	d900      	bls.n	800c898 <USBD_GetDescriptor+0x2c>
 800c896:	e159      	b.n	800cb4c <USBD_GetDescriptor+0x2e0>
 800c898:	009a      	lsls	r2, r3, #2
 800c89a:	4bcb      	ldr	r3, [pc, #812]	@ (800cbc8 <USBD_GetDescriptor+0x35c>)
 800c89c:	18d3      	adds	r3, r2, r3
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	23ac      	movs	r3, #172	@ 0xac
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	58d3      	ldr	r3, [r2, r3]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	7c12      	ldrb	r2, [r2, #16]
 800c8b0:	2108      	movs	r1, #8
 800c8b2:	1879      	adds	r1, r7, r1
 800c8b4:	0010      	movs	r0, r2
 800c8b6:	4798      	blx	r3
 800c8b8:	0003      	movs	r3, r0
 800c8ba:	60fb      	str	r3, [r7, #12]
      break;
 800c8bc:	e153      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7c1b      	ldrb	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10f      	bne.n	800c8e6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	23ad      	movs	r3, #173	@ 0xad
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	58d3      	ldr	r3, [r2, r3]
 800c8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8d0:	2208      	movs	r2, #8
 800c8d2:	18ba      	adds	r2, r7, r2
 800c8d4:	0010      	movs	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	0003      	movs	r3, r0
 800c8da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8e4:	e13f      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	23ad      	movs	r3, #173	@ 0xad
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	58d3      	ldr	r3, [r2, r3]
 800c8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	18ba      	adds	r2, r7, r2
 800c8f4:	0010      	movs	r0, r2
 800c8f6:	4798      	blx	r3
 800c8f8:	0003      	movs	r3, r0
 800c8fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3301      	adds	r3, #1
 800c900:	2202      	movs	r2, #2
 800c902:	701a      	strb	r2, [r3, #0]
      break;
 800c904:	e12f      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	885b      	ldrh	r3, [r3, #2]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	2b05      	cmp	r3, #5
 800c90e:	d900      	bls.n	800c912 <USBD_GetDescriptor+0xa6>
 800c910:	e0d0      	b.n	800cab4 <USBD_GetDescriptor+0x248>
 800c912:	009a      	lsls	r2, r3, #2
 800c914:	4bad      	ldr	r3, [pc, #692]	@ (800cbcc <USBD_GetDescriptor+0x360>)
 800c916:	18d3      	adds	r3, r2, r3
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	23ac      	movs	r3, #172	@ 0xac
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	58d3      	ldr	r3, [r2, r3]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00d      	beq.n	800c946 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	23ac      	movs	r3, #172	@ 0xac
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	58d3      	ldr	r3, [r2, r3]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	7c12      	ldrb	r2, [r2, #16]
 800c938:	2108      	movs	r1, #8
 800c93a:	1879      	adds	r1, r7, r1
 800c93c:	0010      	movs	r0, r2
 800c93e:	4798      	blx	r3
 800c940:	0003      	movs	r3, r0
 800c942:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c944:	e0c3      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	0011      	movs	r1, r2
 800c94c:	0018      	movs	r0, r3
 800c94e:	f000 fb20 	bl	800cf92 <USBD_CtlError>
            err++;
 800c952:	210b      	movs	r1, #11
 800c954:	187b      	adds	r3, r7, r1
 800c956:	781a      	ldrb	r2, [r3, #0]
 800c958:	187b      	adds	r3, r7, r1
 800c95a:	3201      	adds	r2, #1
 800c95c:	701a      	strb	r2, [r3, #0]
          break;
 800c95e:	e0b6      	b.n	800cace <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	23ac      	movs	r3, #172	@ 0xac
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	58d3      	ldr	r3, [r2, r3]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00d      	beq.n	800c98a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	23ac      	movs	r3, #172	@ 0xac
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	58d3      	ldr	r3, [r2, r3]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7c12      	ldrb	r2, [r2, #16]
 800c97c:	2108      	movs	r1, #8
 800c97e:	1879      	adds	r1, r7, r1
 800c980:	0010      	movs	r0, r2
 800c982:	4798      	blx	r3
 800c984:	0003      	movs	r3, r0
 800c986:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c988:	e0a1      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	0011      	movs	r1, r2
 800c990:	0018      	movs	r0, r3
 800c992:	f000 fafe 	bl	800cf92 <USBD_CtlError>
            err++;
 800c996:	210b      	movs	r1, #11
 800c998:	187b      	adds	r3, r7, r1
 800c99a:	781a      	ldrb	r2, [r3, #0]
 800c99c:	187b      	adds	r3, r7, r1
 800c99e:	3201      	adds	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]
          break;
 800c9a2:	e094      	b.n	800cace <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	23ac      	movs	r3, #172	@ 0xac
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	58d3      	ldr	r3, [r2, r3]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00d      	beq.n	800c9ce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	23ac      	movs	r3, #172	@ 0xac
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	58d3      	ldr	r3, [r2, r3]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	7c12      	ldrb	r2, [r2, #16]
 800c9c0:	2108      	movs	r1, #8
 800c9c2:	1879      	adds	r1, r7, r1
 800c9c4:	0010      	movs	r0, r2
 800c9c6:	4798      	blx	r3
 800c9c8:	0003      	movs	r3, r0
 800c9ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9cc:	e07f      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0011      	movs	r1, r2
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	f000 fadc 	bl	800cf92 <USBD_CtlError>
            err++;
 800c9da:	210b      	movs	r1, #11
 800c9dc:	187b      	adds	r3, r7, r1
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	187b      	adds	r3, r7, r1
 800c9e2:	3201      	adds	r2, #1
 800c9e4:	701a      	strb	r2, [r3, #0]
          break;
 800c9e6:	e072      	b.n	800cace <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	23ac      	movs	r3, #172	@ 0xac
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	58d3      	ldr	r3, [r2, r3]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00d      	beq.n	800ca12 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	23ac      	movs	r3, #172	@ 0xac
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	58d3      	ldr	r3, [r2, r3]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7c12      	ldrb	r2, [r2, #16]
 800ca04:	2108      	movs	r1, #8
 800ca06:	1879      	adds	r1, r7, r1
 800ca08:	0010      	movs	r0, r2
 800ca0a:	4798      	blx	r3
 800ca0c:	0003      	movs	r3, r0
 800ca0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca10:	e05d      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	0011      	movs	r1, r2
 800ca18:	0018      	movs	r0, r3
 800ca1a:	f000 faba 	bl	800cf92 <USBD_CtlError>
            err++;
 800ca1e:	210b      	movs	r1, #11
 800ca20:	187b      	adds	r3, r7, r1
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	187b      	adds	r3, r7, r1
 800ca26:	3201      	adds	r2, #1
 800ca28:	701a      	strb	r2, [r3, #0]
          break;
 800ca2a:	e050      	b.n	800cace <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	23ac      	movs	r3, #172	@ 0xac
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	58d3      	ldr	r3, [r2, r3]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00d      	beq.n	800ca56 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	23ac      	movs	r3, #172	@ 0xac
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	58d3      	ldr	r3, [r2, r3]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	7c12      	ldrb	r2, [r2, #16]
 800ca48:	2108      	movs	r1, #8
 800ca4a:	1879      	adds	r1, r7, r1
 800ca4c:	0010      	movs	r0, r2
 800ca4e:	4798      	blx	r3
 800ca50:	0003      	movs	r3, r0
 800ca52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca54:	e03b      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	0011      	movs	r1, r2
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f000 fa98 	bl	800cf92 <USBD_CtlError>
            err++;
 800ca62:	210b      	movs	r1, #11
 800ca64:	187b      	adds	r3, r7, r1
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	187b      	adds	r3, r7, r1
 800ca6a:	3201      	adds	r2, #1
 800ca6c:	701a      	strb	r2, [r3, #0]
          break;
 800ca6e:	e02e      	b.n	800cace <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	23ac      	movs	r3, #172	@ 0xac
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	58d3      	ldr	r3, [r2, r3]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00d      	beq.n	800ca9a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	23ac      	movs	r3, #172	@ 0xac
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	58d3      	ldr	r3, [r2, r3]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	7c12      	ldrb	r2, [r2, #16]
 800ca8c:	2108      	movs	r1, #8
 800ca8e:	1879      	adds	r1, r7, r1
 800ca90:	0010      	movs	r0, r2
 800ca92:	4798      	blx	r3
 800ca94:	0003      	movs	r3, r0
 800ca96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca98:	e019      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	0011      	movs	r1, r2
 800caa0:	0018      	movs	r0, r3
 800caa2:	f000 fa76 	bl	800cf92 <USBD_CtlError>
            err++;
 800caa6:	210b      	movs	r1, #11
 800caa8:	187b      	adds	r3, r7, r1
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	187b      	adds	r3, r7, r1
 800caae:	3201      	adds	r2, #1
 800cab0:	701a      	strb	r2, [r3, #0]
          break;
 800cab2:	e00c      	b.n	800cace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	0011      	movs	r1, r2
 800caba:	0018      	movs	r0, r3
 800cabc:	f000 fa69 	bl	800cf92 <USBD_CtlError>
          err++;
 800cac0:	210b      	movs	r1, #11
 800cac2:	187b      	adds	r3, r7, r1
 800cac4:	781a      	ldrb	r2, [r3, #0]
 800cac6:	187b      	adds	r3, r7, r1
 800cac8:	3201      	adds	r2, #1
 800caca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800cacc:	e04b      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>
 800cace:	e04a      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7c1b      	ldrb	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10b      	bne.n	800caf0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	23ad      	movs	r3, #173	@ 0xad
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	58d3      	ldr	r3, [r2, r3]
 800cae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae2:	2208      	movs	r2, #8
 800cae4:	18ba      	adds	r2, r7, r2
 800cae6:	0010      	movs	r0, r2
 800cae8:	4798      	blx	r3
 800caea:	0003      	movs	r3, r0
 800caec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caee:	e03a      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	0011      	movs	r1, r2
 800caf6:	0018      	movs	r0, r3
 800caf8:	f000 fa4b 	bl	800cf92 <USBD_CtlError>
        err++;
 800cafc:	210b      	movs	r1, #11
 800cafe:	187b      	adds	r3, r7, r1
 800cb00:	781a      	ldrb	r2, [r3, #0]
 800cb02:	187b      	adds	r3, r7, r1
 800cb04:	3201      	adds	r2, #1
 800cb06:	701a      	strb	r2, [r3, #0]
      break;
 800cb08:	e02d      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7c1b      	ldrb	r3, [r3, #16]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10f      	bne.n	800cb32 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	23ad      	movs	r3, #173	@ 0xad
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	58d3      	ldr	r3, [r2, r3]
 800cb1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb1c:	2208      	movs	r2, #8
 800cb1e:	18ba      	adds	r2, r7, r2
 800cb20:	0010      	movs	r0, r2
 800cb22:	4798      	blx	r3
 800cb24:	0003      	movs	r3, r0
 800cb26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	2207      	movs	r2, #7
 800cb2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb30:	e019      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	0011      	movs	r1, r2
 800cb38:	0018      	movs	r0, r3
 800cb3a:	f000 fa2a 	bl	800cf92 <USBD_CtlError>
        err++;
 800cb3e:	210b      	movs	r1, #11
 800cb40:	187b      	adds	r3, r7, r1
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	187b      	adds	r3, r7, r1
 800cb46:	3201      	adds	r2, #1
 800cb48:	701a      	strb	r2, [r3, #0]
      break;
 800cb4a:	e00c      	b.n	800cb66 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	0011      	movs	r1, r2
 800cb52:	0018      	movs	r0, r3
 800cb54:	f000 fa1d 	bl	800cf92 <USBD_CtlError>
      err++;
 800cb58:	210b      	movs	r1, #11
 800cb5a:	187b      	adds	r3, r7, r1
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	187b      	adds	r3, r7, r1
 800cb60:	3201      	adds	r2, #1
 800cb62:	701a      	strb	r2, [r3, #0]
      break;
 800cb64:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800cb66:	230b      	movs	r3, #11
 800cb68:	18fb      	adds	r3, r7, r3
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d127      	bne.n	800cbc0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cb70:	2108      	movs	r1, #8
 800cb72:	187b      	adds	r3, r7, r1
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d019      	beq.n	800cbae <USBD_GetDescriptor+0x342>
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	88db      	ldrh	r3, [r3, #6]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d015      	beq.n	800cbae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	88da      	ldrh	r2, [r3, #6]
 800cb86:	187b      	adds	r3, r7, r1
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	1c18      	adds	r0, r3, #0
 800cb8c:	1c11      	adds	r1, r2, #0
 800cb8e:	b28a      	uxth	r2, r1
 800cb90:	b283      	uxth	r3, r0
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d900      	bls.n	800cb98 <USBD_GetDescriptor+0x32c>
 800cb96:	1c01      	adds	r1, r0, #0
 800cb98:	b28a      	uxth	r2, r1
 800cb9a:	2108      	movs	r1, #8
 800cb9c:	187b      	adds	r3, r7, r1
 800cb9e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cba0:	187b      	adds	r3, r7, r1
 800cba2:	881a      	ldrh	r2, [r3, #0]
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f000 fa70 	bl	800d08e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	88db      	ldrh	r3, [r3, #6]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	0018      	movs	r0, r3
 800cbba:	f000 fad2 	bl	800d162 <USBD_CtlSendStatus>
 800cbbe:	e000      	b.n	800cbc2 <USBD_GetDescriptor+0x356>
    return;
 800cbc0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	b004      	add	sp, #16
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08011b20 	.word	0x08011b20
 800cbcc:	08011b40 	.word	0x08011b40

0800cbd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbd0:	b590      	push	{r4, r7, lr}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	889b      	ldrh	r3, [r3, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d13d      	bne.n	800cc5e <USBD_SetAddress+0x8e>
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	88db      	ldrh	r3, [r3, #6]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d139      	bne.n	800cc5e <USBD_SetAddress+0x8e>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	885b      	ldrh	r3, [r3, #2]
 800cbee:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbf0:	d835      	bhi.n	800cc5e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	885b      	ldrh	r3, [r3, #2]
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	230f      	movs	r3, #15
 800cbfa:	18fb      	adds	r3, r7, r3
 800cbfc:	217f      	movs	r1, #127	@ 0x7f
 800cbfe:	400a      	ands	r2, r1
 800cc00:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	23a7      	movs	r3, #167	@ 0xa7
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	5cd3      	ldrb	r3, [r2, r3]
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d106      	bne.n	800cc1c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	0011      	movs	r1, r2
 800cc14:	0018      	movs	r0, r3
 800cc16:	f000 f9bc 	bl	800cf92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1a:	e027      	b.n	800cc6c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	240f      	movs	r4, #15
 800cc20:	193a      	adds	r2, r7, r4
 800cc22:	4914      	ldr	r1, [pc, #80]	@ (800cc74 <USBD_SetAddress+0xa4>)
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc28:	193b      	adds	r3, r7, r4
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	0011      	movs	r1, r2
 800cc30:	0018      	movs	r0, r3
 800cc32:	f000 fefc 	bl	800da2e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f000 fa92 	bl	800d162 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc3e:	193b      	adds	r3, r7, r4
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d005      	beq.n	800cc52 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	23a7      	movs	r3, #167	@ 0xa7
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	2102      	movs	r1, #2
 800cc4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc50:	e00c      	b.n	800cc6c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	23a7      	movs	r3, #167	@ 0xa7
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	2101      	movs	r1, #1
 800cc5a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5c:	e006      	b.n	800cc6c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc5e:	683a      	ldr	r2, [r7, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	0011      	movs	r1, r2
 800cc64:	0018      	movs	r0, r3
 800cc66:	f000 f994 	bl	800cf92 <USBD_CtlError>
  }
}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	46c0      	nop			@ (mov r8, r8)
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	b005      	add	sp, #20
 800cc72:	bd90      	pop	{r4, r7, pc}
 800cc74:	0000029e 	.word	0x0000029e

0800cc78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	885b      	ldrh	r3, [r3, #2]
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	4b4c      	ldr	r3, [pc, #304]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cc8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc8c:	4b4b      	ldr	r3, [pc, #300]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d906      	bls.n	800cca2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	0011      	movs	r1, r2
 800cc9a:	0018      	movs	r0, r3
 800cc9c:	f000 f979 	bl	800cf92 <USBD_CtlError>
 800cca0:	e088      	b.n	800cdb4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	23a7      	movs	r3, #167	@ 0xa7
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	5cd3      	ldrb	r3, [r2, r3]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d002      	beq.n	800ccb4 <USBD_SetConfig+0x3c>
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d029      	beq.n	800cd06 <USBD_SetConfig+0x8e>
 800ccb2:	e071      	b.n	800cd98 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ccb4:	4b41      	ldr	r3, [pc, #260]	@ (800cdbc <USBD_SetConfig+0x144>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01f      	beq.n	800ccfc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800ccbc:	4b3f      	ldr	r3, [pc, #252]	@ (800cdbc <USBD_SetConfig+0x144>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	001a      	movs	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	23a7      	movs	r3, #167	@ 0xa7
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	2103      	movs	r1, #3
 800ccce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ccd0:	4b3a      	ldr	r3, [pc, #232]	@ (800cdbc <USBD_SetConfig+0x144>)
 800ccd2:	781a      	ldrb	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	0011      	movs	r1, r2
 800ccd8:	0018      	movs	r0, r3
 800ccda:	f7ff f8c6 	bl	800be6a <USBD_SetClassConfig>
 800ccde:	0003      	movs	r3, r0
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d106      	bne.n	800ccf2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	0011      	movs	r1, r2
 800ccea:	0018      	movs	r0, r3
 800ccec:	f000 f951 	bl	800cf92 <USBD_CtlError>
            return;
 800ccf0:	e060      	b.n	800cdb4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f000 fa34 	bl	800d162 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ccfa:	e05b      	b.n	800cdb4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	0018      	movs	r0, r3
 800cd00:	f000 fa2f 	bl	800d162 <USBD_CtlSendStatus>
        break;
 800cd04:	e056      	b.n	800cdb4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800cd06:	4b2d      	ldr	r3, [pc, #180]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d115      	bne.n	800cd3a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	23a7      	movs	r3, #167	@ 0xa7
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	2102      	movs	r1, #2
 800cd16:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800cd18:	4b28      	ldr	r3, [pc, #160]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	001a      	movs	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cd22:	4b26      	ldr	r3, [pc, #152]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	0011      	movs	r1, r2
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f7ff f8c4 	bl	800beb8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	0018      	movs	r0, r3
 800cd34:	f000 fa15 	bl	800d162 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cd38:	e03c      	b.n	800cdb4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800cd3a:	4b20      	ldr	r3, [pc, #128]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	001a      	movs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d022      	beq.n	800cd8e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	0011      	movs	r1, r2
 800cd52:	0018      	movs	r0, r3
 800cd54:	f7ff f8b0 	bl	800beb8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cd58:	4b18      	ldr	r3, [pc, #96]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	001a      	movs	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cd62:	4b16      	ldr	r3, [pc, #88]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cd64:	781a      	ldrb	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	0011      	movs	r1, r2
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	f7ff f87d 	bl	800be6a <USBD_SetClassConfig>
 800cd70:	0003      	movs	r3, r0
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d106      	bne.n	800cd84 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	0011      	movs	r1, r2
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f000 f908 	bl	800cf92 <USBD_CtlError>
            return;
 800cd82:	e017      	b.n	800cdb4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	0018      	movs	r0, r3
 800cd88:	f000 f9eb 	bl	800d162 <USBD_CtlSendStatus>
        break;
 800cd8c:	e012      	b.n	800cdb4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	0018      	movs	r0, r3
 800cd92:	f000 f9e6 	bl	800d162 <USBD_CtlSendStatus>
        break;
 800cd96:	e00d      	b.n	800cdb4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	0011      	movs	r1, r2
 800cd9e:	0018      	movs	r0, r3
 800cda0:	f000 f8f7 	bl	800cf92 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cda4:	4b05      	ldr	r3, [pc, #20]	@ (800cdbc <USBD_SetConfig+0x144>)
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	0011      	movs	r1, r2
 800cdac:	0018      	movs	r0, r3
 800cdae:	f7ff f883 	bl	800beb8 <USBD_ClrClassConfig>
        break;
 800cdb2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	b002      	add	sp, #8
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	46c0      	nop			@ (mov r8, r8)
 800cdbc:	20000a6c 	.word	0x20000a6c

0800cdc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	88db      	ldrh	r3, [r3, #6]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d006      	beq.n	800cde0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	0011      	movs	r1, r2
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f000 f8da 	bl	800cf92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cdde:	e026      	b.n	800ce2e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	23a7      	movs	r3, #167	@ 0xa7
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	5cd3      	ldrb	r3, [r2, r3]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	dc02      	bgt.n	800cdf2 <USBD_GetConfig+0x32>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dc03      	bgt.n	800cdf8 <USBD_GetConfig+0x38>
 800cdf0:	e016      	b.n	800ce20 <USBD_GetConfig+0x60>
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d00c      	beq.n	800ce10 <USBD_GetConfig+0x50>
 800cdf6:	e013      	b.n	800ce20 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3308      	adds	r3, #8
 800ce02:	0019      	movs	r1, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	0018      	movs	r0, r3
 800ce0a:	f000 f940 	bl	800d08e <USBD_CtlSendData>
        break;
 800ce0e:	e00e      	b.n	800ce2e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	1d19      	adds	r1, r3, #4
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	0018      	movs	r0, r3
 800ce1a:	f000 f938 	bl	800d08e <USBD_CtlSendData>
        break;
 800ce1e:	e006      	b.n	800ce2e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	0011      	movs	r1, r2
 800ce26:	0018      	movs	r0, r3
 800ce28:	f000 f8b3 	bl	800cf92 <USBD_CtlError>
        break;
 800ce2c:	46c0      	nop			@ (mov r8, r8)
}
 800ce2e:	46c0      	nop			@ (mov r8, r8)
 800ce30:	46bd      	mov	sp, r7
 800ce32:	b002      	add	sp, #8
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	23a7      	movs	r3, #167	@ 0xa7
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	5cd3      	ldrb	r3, [r2, r3]
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d822      	bhi.n	800ce94 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	88db      	ldrh	r3, [r3, #6]
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d006      	beq.n	800ce64 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	0011      	movs	r1, r2
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	f000 f898 	bl	800cf92 <USBD_CtlError>
        break;
 800ce62:	e01e      	b.n	800cea2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	23a9      	movs	r3, #169	@ 0xa9
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	58d3      	ldr	r3, [r2, r3]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	330c      	adds	r3, #12
 800ce86:	0019      	movs	r1, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f000 f8fe 	bl	800d08e <USBD_CtlSendData>
      break;
 800ce92:	e006      	b.n	800cea2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	0011      	movs	r1, r2
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f000 f879 	bl	800cf92 <USBD_CtlError>
      break;
 800cea0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b002      	add	sp, #8
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	885b      	ldrh	r3, [r3, #2]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d108      	bne.n	800cece <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	23a9      	movs	r3, #169	@ 0xa9
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	2101      	movs	r1, #1
 800cec4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	0018      	movs	r0, r3
 800ceca:	f000 f94a 	bl	800d162 <USBD_CtlSendStatus>
  }
}
 800cece:	46c0      	nop			@ (mov r8, r8)
 800ced0:	46bd      	mov	sp, r7
 800ced2:	b002      	add	sp, #8
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b082      	sub	sp, #8
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	23a7      	movs	r3, #167	@ 0xa7
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	5cd3      	ldrb	r3, [r2, r3]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d80d      	bhi.n	800cf0a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	885b      	ldrh	r3, [r3, #2]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d110      	bne.n	800cf18 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	23a9      	movs	r3, #169	@ 0xa9
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	2100      	movs	r1, #0
 800cefe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	0018      	movs	r0, r3
 800cf04:	f000 f92d 	bl	800d162 <USBD_CtlSendStatus>
      }
      break;
 800cf08:	e006      	b.n	800cf18 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	0011      	movs	r1, r2
 800cf10:	0018      	movs	r0, r3
 800cf12:	f000 f83e 	bl	800cf92 <USBD_CtlError>
      break;
 800cf16:	e000      	b.n	800cf1a <USBD_ClrFeature+0x44>
      break;
 800cf18:	46c0      	nop			@ (mov r8, r8)
  }
}
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b002      	add	sp, #8
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781a      	ldrb	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	785a      	ldrb	r2, [r3, #1]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	3302      	adds	r3, #2
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	001a      	movs	r2, r3
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	3303      	adds	r3, #3
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	021b      	lsls	r3, r3, #8
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	18d3      	adds	r3, r2, r3
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	001a      	movs	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	3305      	adds	r3, #5
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	021b      	lsls	r3, r3, #8
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	18d3      	adds	r3, r2, r3
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	3306      	adds	r3, #6
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	001a      	movs	r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	3307      	adds	r3, #7
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	18d3      	adds	r3, r2, r3
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	80da      	strh	r2, [r3, #6]

}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	b002      	add	sp, #8
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2180      	movs	r1, #128	@ 0x80
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f000 fcbe 	bl	800d922 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	0018      	movs	r0, r3
 800cfac:	f000 fcb9 	bl	800d922 <USBD_LL_StallEP>
}
 800cfb0:	46c0      	nop			@ (mov r8, r8)
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	b002      	add	sp, #8
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cfb8:	b590      	push	{r4, r7, lr}
 800cfba:	b087      	sub	sp, #28
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cfc4:	2417      	movs	r4, #23
 800cfc6:	193b      	adds	r3, r7, r4
 800cfc8:	2200      	movs	r2, #0
 800cfca:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d03c      	beq.n	800d04c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	f000 f83d 	bl	800d054 <USBD_GetLen>
 800cfda:	0003      	movs	r3, r0
 800cfdc:	3301      	adds	r3, #1
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	18db      	adds	r3, r3, r3
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cfe8:	193b      	adds	r3, r7, r4
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	193a      	adds	r2, r7, r4
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	7011      	strb	r1, [r2, #0]
 800cff2:	001a      	movs	r2, r3
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	189b      	adds	r3, r3, r2
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	7812      	ldrb	r2, [r2, #0]
 800cffc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cffe:	193b      	adds	r3, r7, r4
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	193a      	adds	r2, r7, r4
 800d004:	1c59      	adds	r1, r3, #1
 800d006:	7011      	strb	r1, [r2, #0]
 800d008:	001a      	movs	r2, r3
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	189b      	adds	r3, r3, r2
 800d00e:	2203      	movs	r2, #3
 800d010:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d012:	e017      	b.n	800d044 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	60fa      	str	r2, [r7, #12]
 800d01a:	2417      	movs	r4, #23
 800d01c:	193a      	adds	r2, r7, r4
 800d01e:	7812      	ldrb	r2, [r2, #0]
 800d020:	1939      	adds	r1, r7, r4
 800d022:	1c50      	adds	r0, r2, #1
 800d024:	7008      	strb	r0, [r1, #0]
 800d026:	0011      	movs	r1, r2
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	1852      	adds	r2, r2, r1
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d030:	193b      	adds	r3, r7, r4
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	193a      	adds	r2, r7, r4
 800d036:	1c59      	adds	r1, r3, #1
 800d038:	7011      	strb	r1, [r2, #0]
 800d03a:	001a      	movs	r2, r3
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	189b      	adds	r3, r3, r2
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e3      	bne.n	800d014 <USBD_GetString+0x5c>
    }
  }
}
 800d04c:	46c0      	nop			@ (mov r8, r8)
 800d04e:	46bd      	mov	sp, r7
 800d050:	b007      	add	sp, #28
 800d052:	bd90      	pop	{r4, r7, pc}

0800d054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d05c:	230f      	movs	r3, #15
 800d05e:	18fb      	adds	r3, r7, r3
 800d060:	2200      	movs	r2, #0
 800d062:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d064:	e008      	b.n	800d078 <USBD_GetLen+0x24>
  {
    len++;
 800d066:	210f      	movs	r1, #15
 800d068:	187b      	adds	r3, r7, r1
 800d06a:	781a      	ldrb	r2, [r3, #0]
 800d06c:	187b      	adds	r3, r7, r1
 800d06e:	3201      	adds	r2, #1
 800d070:	701a      	strb	r2, [r3, #0]
    buf++;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3301      	adds	r3, #1
 800d076:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1f2      	bne.n	800d066 <USBD_GetLen+0x12>
  }

  return len;
 800d080:	230f      	movs	r3, #15
 800d082:	18fb      	adds	r3, r7, r3
 800d084:	781b      	ldrb	r3, [r3, #0]
}
 800d086:	0018      	movs	r0, r3
 800d088:	46bd      	mov	sp, r7
 800d08a:	b004      	add	sp, #16
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	1dbb      	adds	r3, r7, #6
 800d09a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	23a5      	movs	r3, #165	@ 0xa5
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	2102      	movs	r1, #2
 800d0a4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800d0a6:	1dbb      	adds	r3, r7, #6
 800d0a8:	881a      	ldrh	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d0ae:	1dbb      	adds	r3, r7, #6
 800d0b0:	881a      	ldrh	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0b6:	1dbb      	adds	r3, r7, #6
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	2100      	movs	r1, #0
 800d0c0:	f000 fce0 	bl	800da84 <USBD_LL_Transmit>

  return USBD_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	0018      	movs	r0, r3
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	b004      	add	sp, #16
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	1dbb      	adds	r3, r7, #6
 800d0da:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0dc:	1dbb      	adds	r3, r7, #6
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	f000 fccd 	bl	800da84 <USBD_LL_Transmit>

  return USBD_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b004      	add	sp, #16
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	1dbb      	adds	r3, r7, #6
 800d100:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	23a5      	movs	r3, #165	@ 0xa5
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	2103      	movs	r1, #3
 800d10a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800d10c:	1dbb      	adds	r3, r7, #6
 800d10e:	8819      	ldrh	r1, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	23ae      	movs	r3, #174	@ 0xae
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800d118:	1dbb      	adds	r3, r7, #6
 800d11a:	8819      	ldrh	r1, [r3, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	23b0      	movs	r3, #176	@ 0xb0
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d124:	1dbb      	adds	r3, r7, #6
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	2100      	movs	r1, #0
 800d12e:	f000 fce0 	bl	800daf2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	0018      	movs	r0, r3
 800d136:	46bd      	mov	sp, r7
 800d138:	b004      	add	sp, #16
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	1dbb      	adds	r3, r7, #6
 800d148:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d14a:	1dbb      	adds	r3, r7, #6
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	2100      	movs	r1, #0
 800d154:	f000 fccd 	bl	800daf2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	0018      	movs	r0, r3
 800d15c:	46bd      	mov	sp, r7
 800d15e:	b004      	add	sp, #16
 800d160:	bd80      	pop	{r7, pc}

0800d162 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	23a5      	movs	r3, #165	@ 0xa5
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	2104      	movs	r1, #4
 800d172:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	2300      	movs	r3, #0
 800d178:	2200      	movs	r2, #0
 800d17a:	2100      	movs	r1, #0
 800d17c:	f000 fc82 	bl	800da84 <USBD_LL_Transmit>

  return USBD_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	0018      	movs	r0, r3
 800d184:	46bd      	mov	sp, r7
 800d186:	b002      	add	sp, #8
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	23a5      	movs	r3, #165	@ 0xa5
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	2105      	movs	r1, #5
 800d19a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	f000 fca5 	bl	800daf2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	b002      	add	sp, #8
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1b8:	4914      	ldr	r1, [pc, #80]	@ (800d20c <MX_USB_DEVICE_Init+0x58>)
 800d1ba:	4b15      	ldr	r3, [pc, #84]	@ (800d210 <MX_USB_DEVICE_Init+0x5c>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f7fe fdec 	bl	800bd9c <USBD_Init>
 800d1c4:	1e03      	subs	r3, r0, #0
 800d1c6:	d001      	beq.n	800d1cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1c8:	f7f5 fbb2 	bl	8002930 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1cc:	4a11      	ldr	r2, [pc, #68]	@ (800d214 <MX_USB_DEVICE_Init+0x60>)
 800d1ce:	4b10      	ldr	r3, [pc, #64]	@ (800d210 <MX_USB_DEVICE_Init+0x5c>)
 800d1d0:	0011      	movs	r1, r2
 800d1d2:	0018      	movs	r0, r3
 800d1d4:	f7fe fe13 	bl	800bdfe <USBD_RegisterClass>
 800d1d8:	1e03      	subs	r3, r0, #0
 800d1da:	d001      	beq.n	800d1e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800d1dc:	f7f5 fba8 	bl	8002930 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800d218 <MX_USB_DEVICE_Init+0x64>)
 800d1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <MX_USB_DEVICE_Init+0x5c>)
 800d1e4:	0011      	movs	r1, r2
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	f7fe fd28 	bl	800bc3c <USBD_CDC_RegisterInterface>
 800d1ec:	1e03      	subs	r3, r0, #0
 800d1ee:	d001      	beq.n	800d1f4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800d1f0:	f7f5 fb9e 	bl	8002930 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1f4:	4b06      	ldr	r3, [pc, #24]	@ (800d210 <MX_USB_DEVICE_Init+0x5c>)
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f7fe fe21 	bl	800be3e <USBD_Start>
 800d1fc:	1e03      	subs	r3, r0, #0
 800d1fe:	d001      	beq.n	800d204 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800d200:	f7f5 fb96 	bl	8002930 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d204:	46c0      	nop			@ (mov r8, r8)
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	46c0      	nop			@ (mov r8, r8)
 800d20c:	200001a0 	.word	0x200001a0
 800d210:	20000a70 	.word	0x20000a70
 800d214:	2000008c 	.word	0x2000008c
 800d218:	20000190 	.word	0x20000190

0800d21c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d220:	4907      	ldr	r1, [pc, #28]	@ (800d240 <CDC_Init_FS+0x24>)
 800d222:	4b08      	ldr	r3, [pc, #32]	@ (800d244 <CDC_Init_FS+0x28>)
 800d224:	2200      	movs	r2, #0
 800d226:	0018      	movs	r0, r3
 800d228:	f7fe fd23 	bl	800bc72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d22c:	4a06      	ldr	r2, [pc, #24]	@ (800d248 <CDC_Init_FS+0x2c>)
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <CDC_Init_FS+0x28>)
 800d230:	0011      	movs	r1, r2
 800d232:	0018      	movs	r0, r3
 800d234:	f7fe fd39 	bl	800bcaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d238:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d23a:	0018      	movs	r0, r3
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20001134 	.word	0x20001134
 800d244:	20000a70 	.word	0x20000a70
 800d248:	20000d34 	.word	0x20000d34

0800d24c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d250:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d252:	0018      	movs	r0, r3
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6039      	str	r1, [r7, #0]
 800d260:	0011      	movs	r1, r2
 800d262:	1dfb      	adds	r3, r7, #7
 800d264:	1c02      	adds	r2, r0, #0
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	1d3b      	adds	r3, r7, #4
 800d26a:	1c0a      	adds	r2, r1, #0
 800d26c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	2b23      	cmp	r3, #35	@ 0x23
 800d274:	d804      	bhi.n	800d280 <CDC_Control_FS+0x28>
 800d276:	009a      	lsls	r2, r3, #2
 800d278:	4b04      	ldr	r3, [pc, #16]	@ (800d28c <CDC_Control_FS+0x34>)
 800d27a:	18d3      	adds	r3, r2, r3
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d280:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800d282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d284:	0018      	movs	r0, r3
 800d286:	46bd      	mov	sp, r7
 800d288:	b002      	add	sp, #8
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08011b58 	.word	0x08011b58

0800d290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	4b06      	ldr	r3, [pc, #24]	@ (800d2b8 <CDC_Receive_FS+0x28>)
 800d29e:	0011      	movs	r1, r2
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	f7fe fd02 	bl	800bcaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d2a6:	4b04      	ldr	r3, [pc, #16]	@ (800d2b8 <CDC_Receive_FS+0x28>)
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f7fe fd49 	bl	800bd40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d2ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	b002      	add	sp, #8
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20000a70 	.word	0x20000a70

0800d2bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d2bc:	b5b0      	push	{r4, r5, r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	000a      	movs	r2, r1
 800d2c6:	1cbb      	adds	r3, r7, #2
 800d2c8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800d2ca:	230f      	movs	r3, #15
 800d2cc:	18fb      	adds	r3, r7, r3
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d2d2:	4a11      	ldr	r2, [pc, #68]	@ (800d318 <CDC_Transmit_FS+0x5c>)
 800d2d4:	23ae      	movs	r3, #174	@ 0xae
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	58d3      	ldr	r3, [r2, r3]
 800d2da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	2385      	movs	r3, #133	@ 0x85
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	58d3      	ldr	r3, [r2, r3]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e010      	b.n	800d30e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d2ec:	1cbb      	adds	r3, r7, #2
 800d2ee:	881a      	ldrh	r2, [r3, #0]
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	4b09      	ldr	r3, [pc, #36]	@ (800d318 <CDC_Transmit_FS+0x5c>)
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f7fe fcbc 	bl	800bc72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d2fa:	250f      	movs	r5, #15
 800d2fc:	197c      	adds	r4, r7, r5
 800d2fe:	4b06      	ldr	r3, [pc, #24]	@ (800d318 <CDC_Transmit_FS+0x5c>)
 800d300:	0018      	movs	r0, r3
 800d302:	f7fe fce6 	bl	800bcd2 <USBD_CDC_TransmitPacket>
 800d306:	0003      	movs	r3, r0
 800d308:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800d30a:	197b      	adds	r3, r7, r5
 800d30c:	781b      	ldrb	r3, [r3, #0]
}
 800d30e:	0018      	movs	r0, r3
 800d310:	46bd      	mov	sp, r7
 800d312:	b004      	add	sp, #16
 800d314:	bdb0      	pop	{r4, r5, r7, pc}
 800d316:	46c0      	nop			@ (mov r8, r8)
 800d318:	20000a70 	.word	0x20000a70

0800d31c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	0002      	movs	r2, r0
 800d324:	6039      	str	r1, [r7, #0]
 800d326:	1dfb      	adds	r3, r7, #7
 800d328:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2212      	movs	r2, #18
 800d32e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d330:	4b02      	ldr	r3, [pc, #8]	@ (800d33c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d332:	0018      	movs	r0, r3
 800d334:	46bd      	mov	sp, r7
 800d336:	b002      	add	sp, #8
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	46c0      	nop			@ (mov r8, r8)
 800d33c:	200001bc 	.word	0x200001bc

0800d340 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	0002      	movs	r2, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	1dfb      	adds	r3, r7, #7
 800d34c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2204      	movs	r2, #4
 800d352:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d354:	4b02      	ldr	r3, [pc, #8]	@ (800d360 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d356:	0018      	movs	r0, r3
 800d358:	46bd      	mov	sp, r7
 800d35a:	b002      	add	sp, #8
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	46c0      	nop			@ (mov r8, r8)
 800d360:	200001d0 	.word	0x200001d0

0800d364 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	0002      	movs	r2, r0
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	1dfb      	adds	r3, r7, #7
 800d370:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d372:	1dfb      	adds	r3, r7, #7
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d106      	bne.n	800d388 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	4908      	ldr	r1, [pc, #32]	@ (800d3a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d37e:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d380:	0018      	movs	r0, r3
 800d382:	f7ff fe19 	bl	800cfb8 <USBD_GetString>
 800d386:	e005      	b.n	800d394 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	4905      	ldr	r1, [pc, #20]	@ (800d3a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d38c:	4b05      	ldr	r3, [pc, #20]	@ (800d3a4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d38e:	0018      	movs	r0, r3
 800d390:	f7ff fe12 	bl	800cfb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d394:	4b02      	ldr	r3, [pc, #8]	@ (800d3a0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d396:	0018      	movs	r0, r3
 800d398:	46bd      	mov	sp, r7
 800d39a:	b002      	add	sp, #8
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	46c0      	nop			@ (mov r8, r8)
 800d3a0:	20001534 	.word	0x20001534
 800d3a4:	08011a38 	.word	0x08011a38

0800d3a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	0002      	movs	r2, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	1dfb      	adds	r3, r7, #7
 800d3b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d3b6:	683a      	ldr	r2, [r7, #0]
 800d3b8:	4904      	ldr	r1, [pc, #16]	@ (800d3cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d3ba:	4b05      	ldr	r3, [pc, #20]	@ (800d3d0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f7ff fdfb 	bl	800cfb8 <USBD_GetString>
  return USBD_StrDesc;
 800d3c2:	4b02      	ldr	r3, [pc, #8]	@ (800d3cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20001534 	.word	0x20001534
 800d3d0:	08011a50 	.word	0x08011a50

0800d3d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	0002      	movs	r2, r0
 800d3dc:	6039      	str	r1, [r7, #0]
 800d3de:	1dfb      	adds	r3, r7, #7
 800d3e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	221a      	movs	r2, #26
 800d3e6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3e8:	f000 f84c 	bl	800d484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	@ (800d3f8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d3ee:	0018      	movs	r0, r3
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	b002      	add	sp, #8
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	46c0      	nop			@ (mov r8, r8)
 800d3f8:	200001d4 	.word	0x200001d4

0800d3fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	0002      	movs	r2, r0
 800d404:	6039      	str	r1, [r7, #0]
 800d406:	1dfb      	adds	r3, r7, #7
 800d408:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d40a:	1dfb      	adds	r3, r7, #7
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d106      	bne.n	800d420 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	4908      	ldr	r1, [pc, #32]	@ (800d438 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d416:	4b09      	ldr	r3, [pc, #36]	@ (800d43c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d418:	0018      	movs	r0, r3
 800d41a:	f7ff fdcd 	bl	800cfb8 <USBD_GetString>
 800d41e:	e005      	b.n	800d42c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	4905      	ldr	r1, [pc, #20]	@ (800d438 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d424:	4b05      	ldr	r3, [pc, #20]	@ (800d43c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d426:	0018      	movs	r0, r3
 800d428:	f7ff fdc6 	bl	800cfb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d42c:	4b02      	ldr	r3, [pc, #8]	@ (800d438 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d42e:	0018      	movs	r0, r3
 800d430:	46bd      	mov	sp, r7
 800d432:	b002      	add	sp, #8
 800d434:	bd80      	pop	{r7, pc}
 800d436:	46c0      	nop			@ (mov r8, r8)
 800d438:	20001534 	.word	0x20001534
 800d43c:	08011a64 	.word	0x08011a64

0800d440 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	0002      	movs	r2, r0
 800d448:	6039      	str	r1, [r7, #0]
 800d44a:	1dfb      	adds	r3, r7, #7
 800d44c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d44e:	1dfb      	adds	r3, r7, #7
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	4908      	ldr	r1, [pc, #32]	@ (800d47c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d45a:	4b09      	ldr	r3, [pc, #36]	@ (800d480 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d45c:	0018      	movs	r0, r3
 800d45e:	f7ff fdab 	bl	800cfb8 <USBD_GetString>
 800d462:	e005      	b.n	800d470 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	4905      	ldr	r1, [pc, #20]	@ (800d47c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d468:	4b05      	ldr	r3, [pc, #20]	@ (800d480 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d46a:	0018      	movs	r0, r3
 800d46c:	f7ff fda4 	bl	800cfb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d470:	4b02      	ldr	r3, [pc, #8]	@ (800d47c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d472:	0018      	movs	r0, r3
 800d474:	46bd      	mov	sp, r7
 800d476:	b002      	add	sp, #8
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	46c0      	nop			@ (mov r8, r8)
 800d47c:	20001534 	.word	0x20001534
 800d480:	08011a70 	.word	0x08011a70

0800d484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d48a:	4b10      	ldr	r3, [pc, #64]	@ (800d4cc <Get_SerialNum+0x48>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d490:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <Get_SerialNum+0x4c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d496:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d4 <Get_SerialNum+0x50>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	18d3      	adds	r3, r2, r3
 800d4a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00b      	beq.n	800d4c2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d4aa:	490b      	ldr	r1, [pc, #44]	@ (800d4d8 <Get_SerialNum+0x54>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2208      	movs	r2, #8
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f000 f815 	bl	800d4e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d4b6:	4909      	ldr	r1, [pc, #36]	@ (800d4dc <Get_SerialNum+0x58>)
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2204      	movs	r2, #4
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f000 f80f 	bl	800d4e0 <IntToUnicode>
  }
}
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	b004      	add	sp, #16
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	46c0      	nop			@ (mov r8, r8)
 800d4cc:	1ffff7ac 	.word	0x1ffff7ac
 800d4d0:	1ffff7b0 	.word	0x1ffff7b0
 800d4d4:	1ffff7b4 	.word	0x1ffff7b4
 800d4d8:	200001d6 	.word	0x200001d6
 800d4dc:	200001e6 	.word	0x200001e6

0800d4e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	1dfb      	adds	r3, r7, #7
 800d4ec:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d4ee:	2117      	movs	r1, #23
 800d4f0:	187b      	adds	r3, r7, r1
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d4f6:	187b      	adds	r3, r7, r1
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
 800d4fc:	e02f      	b.n	800d55e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	0f1b      	lsrs	r3, r3, #28
 800d502:	2b09      	cmp	r3, #9
 800d504:	d80d      	bhi.n	800d522 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	0f1b      	lsrs	r3, r3, #28
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	2317      	movs	r3, #23
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	0019      	movs	r1, r3
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	185b      	adds	r3, r3, r1
 800d51a:	3230      	adds	r2, #48	@ 0x30
 800d51c:	b2d2      	uxtb	r2, r2
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	e00c      	b.n	800d53c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	0f1b      	lsrs	r3, r3, #28
 800d526:	b2da      	uxtb	r2, r3
 800d528:	2317      	movs	r3, #23
 800d52a:	18fb      	adds	r3, r7, r3
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	0019      	movs	r1, r3
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	185b      	adds	r3, r3, r1
 800d536:	3237      	adds	r2, #55	@ 0x37
 800d538:	b2d2      	uxtb	r2, r2
 800d53a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	011b      	lsls	r3, r3, #4
 800d540:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d542:	2117      	movs	r1, #23
 800d544:	187b      	adds	r3, r7, r1
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	3301      	adds	r3, #1
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	18d3      	adds	r3, r2, r3
 800d550:	2200      	movs	r2, #0
 800d552:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d554:	187b      	adds	r3, r7, r1
 800d556:	781a      	ldrb	r2, [r3, #0]
 800d558:	187b      	adds	r3, r7, r1
 800d55a:	3201      	adds	r2, #1
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	2317      	movs	r3, #23
 800d560:	18fa      	adds	r2, r7, r3
 800d562:	1dfb      	adds	r3, r7, #7
 800d564:	7812      	ldrb	r2, [r2, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d3c8      	bcc.n	800d4fe <IntToUnicode+0x1e>
  }
}
 800d56c:	46c0      	nop			@ (mov r8, r8)
 800d56e:	46c0      	nop			@ (mov r8, r8)
 800d570:	46bd      	mov	sp, r7
 800d572:	b006      	add	sp, #24
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a0e      	ldr	r2, [pc, #56]	@ (800d5c0 <HAL_PCD_MspInit+0x48>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d115      	bne.n	800d5b6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d58a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c4 <HAL_PCD_MspInit+0x4c>)
 800d58c:	69da      	ldr	r2, [r3, #28]
 800d58e:	4b0d      	ldr	r3, [pc, #52]	@ (800d5c4 <HAL_PCD_MspInit+0x4c>)
 800d590:	2180      	movs	r1, #128	@ 0x80
 800d592:	0409      	lsls	r1, r1, #16
 800d594:	430a      	orrs	r2, r1
 800d596:	61da      	str	r2, [r3, #28]
 800d598:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c4 <HAL_PCD_MspInit+0x4c>)
 800d59a:	69da      	ldr	r2, [r3, #28]
 800d59c:	2380      	movs	r3, #128	@ 0x80
 800d59e:	041b      	lsls	r3, r3, #16
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	201f      	movs	r0, #31
 800d5ac:	f7f6 faa6 	bl	8003afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d5b0:	201f      	movs	r0, #31
 800d5b2:	f7f6 fab8 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d5b6:	46c0      	nop			@ (mov r8, r8)
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	b004      	add	sp, #16
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	46c0      	nop			@ (mov r8, r8)
 800d5c0:	40005c00 	.word	0x40005c00
 800d5c4:	40021000 	.word	0x40021000

0800d5c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	23b6      	movs	r3, #182	@ 0xb6
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	58d2      	ldr	r2, [r2, r3]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	21a6      	movs	r1, #166	@ 0xa6
 800d5dc:	0089      	lsls	r1, r1, #2
 800d5de:	468c      	mov	ip, r1
 800d5e0:	4463      	add	r3, ip
 800d5e2:	0019      	movs	r1, r3
 800d5e4:	0010      	movs	r0, r2
 800d5e6:	f7fe fc7d 	bl	800bee4 <USBD_LL_SetupStage>
}
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	b002      	add	sp, #8
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f2:	b590      	push	{r4, r7, lr}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	000a      	movs	r2, r1
 800d5fc:	1cfb      	adds	r3, r7, #3
 800d5fe:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	23b6      	movs	r3, #182	@ 0xb6
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	58d4      	ldr	r4, [r2, r3]
 800d608:	1cfb      	adds	r3, r7, #3
 800d60a:	781a      	ldrb	r2, [r3, #0]
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	23b2      	movs	r3, #178	@ 0xb2
 800d610:	0059      	lsls	r1, r3, #1
 800d612:	0013      	movs	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	189b      	adds	r3, r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	18c3      	adds	r3, r0, r3
 800d61c:	185b      	adds	r3, r3, r1
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	1cfb      	adds	r3, r7, #3
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	0019      	movs	r1, r3
 800d626:	0020      	movs	r0, r4
 800d628:	f7fe fcba 	bl	800bfa0 <USBD_LL_DataOutStage>
}
 800d62c:	46c0      	nop			@ (mov r8, r8)
 800d62e:	46bd      	mov	sp, r7
 800d630:	b003      	add	sp, #12
 800d632:	bd90      	pop	{r4, r7, pc}

0800d634 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	000a      	movs	r2, r1
 800d63e:	1cfb      	adds	r3, r7, #3
 800d640:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	23b6      	movs	r3, #182	@ 0xb6
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	58d0      	ldr	r0, [r2, r3]
 800d64a:	1cfb      	adds	r3, r7, #3
 800d64c:	781a      	ldrb	r2, [r3, #0]
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	0013      	movs	r3, r2
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	189b      	adds	r3, r3, r2
 800d656:	00db      	lsls	r3, r3, #3
 800d658:	18cb      	adds	r3, r1, r3
 800d65a:	3324      	adds	r3, #36	@ 0x24
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	1cfb      	adds	r3, r7, #3
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	0019      	movs	r1, r3
 800d664:	f7fe fd1e 	bl	800c0a4 <USBD_LL_DataInStage>
}
 800d668:	46c0      	nop			@ (mov r8, r8)
 800d66a:	46bd      	mov	sp, r7
 800d66c:	b002      	add	sp, #8
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	23b6      	movs	r3, #182	@ 0xb6
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	58d3      	ldr	r3, [r2, r3]
 800d680:	0018      	movs	r0, r3
 800d682:	f7fe fe55 	bl	800c330 <USBD_LL_SOF>
}
 800d686:	46c0      	nop			@ (mov r8, r8)
 800d688:	46bd      	mov	sp, r7
 800d68a:	b002      	add	sp, #8
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d696:	230f      	movs	r3, #15
 800d698:	18fb      	adds	r3, r7, r3
 800d69a:	2201      	movs	r2, #1
 800d69c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	795b      	ldrb	r3, [r3, #5]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d001      	beq.n	800d6aa <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d6a6:	f7f5 f943 	bl	8002930 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	23b6      	movs	r3, #182	@ 0xb6
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	58d2      	ldr	r2, [r2, r3]
 800d6b2:	230f      	movs	r3, #15
 800d6b4:	18fb      	adds	r3, r7, r3
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	0019      	movs	r1, r3
 800d6ba:	0010      	movs	r0, r2
 800d6bc:	f7fe fdf7 	bl	800c2ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	23b6      	movs	r3, #182	@ 0xb6
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	58d3      	ldr	r3, [r2, r3]
 800d6c8:	0018      	movs	r0, r3
 800d6ca:	f7fe fda8 	bl	800c21e <USBD_LL_Reset>
}
 800d6ce:	46c0      	nop			@ (mov r8, r8)
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	b004      	add	sp, #16
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	23b6      	movs	r3, #182	@ 0xb6
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	58d3      	ldr	r3, [r2, r3]
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f7fe fdf1 	bl	800c2d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7a5b      	ldrb	r3, [r3, #9]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d005      	beq.n	800d702 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6f6:	4b05      	ldr	r3, [pc, #20]	@ (800d70c <HAL_PCD_SuspendCallback+0x34>)
 800d6f8:	691a      	ldr	r2, [r3, #16]
 800d6fa:	4b04      	ldr	r3, [pc, #16]	@ (800d70c <HAL_PCD_SuspendCallback+0x34>)
 800d6fc:	2106      	movs	r1, #6
 800d6fe:	430a      	orrs	r2, r1
 800d700:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d702:	46c0      	nop			@ (mov r8, r8)
 800d704:	46bd      	mov	sp, r7
 800d706:	b002      	add	sp, #8
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	46c0      	nop			@ (mov r8, r8)
 800d70c:	e000ed00 	.word	0xe000ed00

0800d710 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	7a5b      	ldrb	r3, [r3, #9]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d007      	beq.n	800d730 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d720:	4b09      	ldr	r3, [pc, #36]	@ (800d748 <HAL_PCD_ResumeCallback+0x38>)
 800d722:	691a      	ldr	r2, [r3, #16]
 800d724:	4b08      	ldr	r3, [pc, #32]	@ (800d748 <HAL_PCD_ResumeCallback+0x38>)
 800d726:	2106      	movs	r1, #6
 800d728:	438a      	bics	r2, r1
 800d72a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d72c:	f000 fa42 	bl	800dbb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	23b6      	movs	r3, #182	@ 0xb6
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	58d3      	ldr	r3, [r2, r3]
 800d738:	0018      	movs	r0, r3
 800d73a:	f7fe fde1 	bl	800c300 <USBD_LL_Resume>
}
 800d73e:	46c0      	nop			@ (mov r8, r8)
 800d740:	46bd      	mov	sp, r7
 800d742:	b002      	add	sp, #8
 800d744:	bd80      	pop	{r7, pc}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	e000ed00 	.word	0xe000ed00

0800d74c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d754:	4a2d      	ldr	r2, [pc, #180]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d756:	23b6      	movs	r3, #182	@ 0xb6
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	23b0      	movs	r3, #176	@ 0xb0
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4929      	ldr	r1, [pc, #164]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d766:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d768:	4b28      	ldr	r3, [pc, #160]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d76a:	4a29      	ldr	r2, [pc, #164]	@ (800d810 <USBD_LL_Init+0xc4>)
 800d76c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d76e:	4b27      	ldr	r3, [pc, #156]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d770:	2208      	movs	r2, #8
 800d772:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d774:	4b25      	ldr	r3, [pc, #148]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d776:	2202      	movs	r2, #2
 800d778:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d77a:	4b24      	ldr	r3, [pc, #144]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d77c:	2202      	movs	r2, #2
 800d77e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d780:	4b22      	ldr	r3, [pc, #136]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d782:	2200      	movs	r2, #0
 800d784:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d786:	4b21      	ldr	r3, [pc, #132]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d788:	2200      	movs	r2, #0
 800d78a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d78c:	4b1f      	ldr	r3, [pc, #124]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d78e:	2200      	movs	r2, #0
 800d790:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d792:	4b1e      	ldr	r3, [pc, #120]	@ (800d80c <USBD_LL_Init+0xc0>)
 800d794:	0018      	movs	r0, r3
 800d796:	f7f6 fdd7 	bl	8004348 <HAL_PCD_Init>
 800d79a:	1e03      	subs	r3, r0, #0
 800d79c:	d001      	beq.n	800d7a2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d79e:	f7f5 f8c7 	bl	8002930 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	23b0      	movs	r3, #176	@ 0xb0
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	58d0      	ldr	r0, [r2, r3]
 800d7aa:	2318      	movs	r3, #24
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	f7f8 fb88 	bl	8005ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	23b0      	movs	r3, #176	@ 0xb0
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	58d0      	ldr	r0, [r2, r3]
 800d7bc:	2358      	movs	r3, #88	@ 0x58
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2180      	movs	r1, #128	@ 0x80
 800d7c2:	f7f8 fb7f 	bl	8005ec4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	23b0      	movs	r3, #176	@ 0xb0
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	58d0      	ldr	r0, [r2, r3]
 800d7ce:	23c0      	movs	r3, #192	@ 0xc0
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2181      	movs	r1, #129	@ 0x81
 800d7d4:	f7f8 fb76 	bl	8005ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	23b0      	movs	r3, #176	@ 0xb0
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	58d0      	ldr	r0, [r2, r3]
 800d7e0:	2388      	movs	r3, #136	@ 0x88
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	f7f8 fb6c 	bl	8005ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	23b0      	movs	r3, #176	@ 0xb0
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	58d0      	ldr	r0, [r2, r3]
 800d7f4:	2380      	movs	r3, #128	@ 0x80
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2182      	movs	r1, #130	@ 0x82
 800d7fc:	f7f8 fb62 	bl	8005ec4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	0018      	movs	r0, r3
 800d804:	46bd      	mov	sp, r7
 800d806:	b002      	add	sp, #8
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	46c0      	nop			@ (mov r8, r8)
 800d80c:	20001734 	.word	0x20001734
 800d810:	40005c00 	.word	0x40005c00

0800d814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d81c:	210f      	movs	r1, #15
 800d81e:	187b      	adds	r3, r7, r1
 800d820:	2200      	movs	r2, #0
 800d822:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d824:	260e      	movs	r6, #14
 800d826:	19bb      	adds	r3, r7, r6
 800d828:	2200      	movs	r2, #0
 800d82a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	23b0      	movs	r3, #176	@ 0xb0
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	58d3      	ldr	r3, [r2, r3]
 800d834:	000d      	movs	r5, r1
 800d836:	187c      	adds	r4, r7, r1
 800d838:	0018      	movs	r0, r3
 800d83a:	f7f6 fe79 	bl	8004530 <HAL_PCD_Start>
 800d83e:	0003      	movs	r3, r0
 800d840:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d842:	19bc      	adds	r4, r7, r6
 800d844:	197b      	adds	r3, r7, r5
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	0018      	movs	r0, r3
 800d84a:	f000 f9ba 	bl	800dbc2 <USBD_Get_USB_Status>
 800d84e:	0003      	movs	r3, r0
 800d850:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d852:	19bb      	adds	r3, r7, r6
 800d854:	781b      	ldrb	r3, [r3, #0]
}
 800d856:	0018      	movs	r0, r3
 800d858:	46bd      	mov	sp, r7
 800d85a:	b005      	add	sp, #20
 800d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d85e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d85e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d860:	b085      	sub	sp, #20
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	000c      	movs	r4, r1
 800d868:	0010      	movs	r0, r2
 800d86a:	0019      	movs	r1, r3
 800d86c:	1cfb      	adds	r3, r7, #3
 800d86e:	1c22      	adds	r2, r4, #0
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	1cbb      	adds	r3, r7, #2
 800d874:	1c02      	adds	r2, r0, #0
 800d876:	701a      	strb	r2, [r3, #0]
 800d878:	003b      	movs	r3, r7
 800d87a:	1c0a      	adds	r2, r1, #0
 800d87c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87e:	260f      	movs	r6, #15
 800d880:	19bb      	adds	r3, r7, r6
 800d882:	2200      	movs	r2, #0
 800d884:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d886:	250e      	movs	r5, #14
 800d888:	197b      	adds	r3, r7, r5
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	23b0      	movs	r3, #176	@ 0xb0
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	58d0      	ldr	r0, [r2, r3]
 800d896:	19bc      	adds	r4, r7, r6
 800d898:	1cbb      	adds	r3, r7, #2
 800d89a:	781d      	ldrb	r5, [r3, #0]
 800d89c:	003b      	movs	r3, r7
 800d89e:	881a      	ldrh	r2, [r3, #0]
 800d8a0:	1cfb      	adds	r3, r7, #3
 800d8a2:	7819      	ldrb	r1, [r3, #0]
 800d8a4:	002b      	movs	r3, r5
 800d8a6:	f7f6 ffd7 	bl	8004858 <HAL_PCD_EP_Open>
 800d8aa:	0003      	movs	r3, r0
 800d8ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ae:	250e      	movs	r5, #14
 800d8b0:	197c      	adds	r4, r7, r5
 800d8b2:	19bb      	adds	r3, r7, r6
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	0018      	movs	r0, r3
 800d8b8:	f000 f983 	bl	800dbc2 <USBD_Get_USB_Status>
 800d8bc:	0003      	movs	r3, r0
 800d8be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d8c0:	197b      	adds	r3, r7, r5
 800d8c2:	781b      	ldrb	r3, [r3, #0]
}
 800d8c4:	0018      	movs	r0, r3
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	b005      	add	sp, #20
 800d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	000a      	movs	r2, r1
 800d8d6:	1cfb      	adds	r3, r7, #3
 800d8d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8da:	210f      	movs	r1, #15
 800d8dc:	187b      	adds	r3, r7, r1
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e2:	260e      	movs	r6, #14
 800d8e4:	19bb      	adds	r3, r7, r6
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	23b0      	movs	r3, #176	@ 0xb0
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	58d2      	ldr	r2, [r2, r3]
 800d8f2:	000d      	movs	r5, r1
 800d8f4:	187c      	adds	r4, r7, r1
 800d8f6:	1cfb      	adds	r3, r7, #3
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	0010      	movs	r0, r2
 800d8fe:	f7f7 f81a 	bl	8004936 <HAL_PCD_EP_Close>
 800d902:	0003      	movs	r3, r0
 800d904:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d906:	19bc      	adds	r4, r7, r6
 800d908:	197b      	adds	r3, r7, r5
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	0018      	movs	r0, r3
 800d90e:	f000 f958 	bl	800dbc2 <USBD_Get_USB_Status>
 800d912:	0003      	movs	r3, r0
 800d914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d916:	19bb      	adds	r3, r7, r6
 800d918:	781b      	ldrb	r3, [r3, #0]
}
 800d91a:	0018      	movs	r0, r3
 800d91c:	46bd      	mov	sp, r7
 800d91e:	b005      	add	sp, #20
 800d920:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d922 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d922:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d924:	b085      	sub	sp, #20
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	000a      	movs	r2, r1
 800d92c:	1cfb      	adds	r3, r7, #3
 800d92e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d930:	210f      	movs	r1, #15
 800d932:	187b      	adds	r3, r7, r1
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d938:	260e      	movs	r6, #14
 800d93a:	19bb      	adds	r3, r7, r6
 800d93c:	2200      	movs	r2, #0
 800d93e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	23b0      	movs	r3, #176	@ 0xb0
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	58d2      	ldr	r2, [r2, r3]
 800d948:	000d      	movs	r5, r1
 800d94a:	187c      	adds	r4, r7, r1
 800d94c:	1cfb      	adds	r3, r7, #3
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	0019      	movs	r1, r3
 800d952:	0010      	movs	r0, r2
 800d954:	f7f7 f8cc 	bl	8004af0 <HAL_PCD_EP_SetStall>
 800d958:	0003      	movs	r3, r0
 800d95a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d95c:	19bc      	adds	r4, r7, r6
 800d95e:	197b      	adds	r3, r7, r5
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	0018      	movs	r0, r3
 800d964:	f000 f92d 	bl	800dbc2 <USBD_Get_USB_Status>
 800d968:	0003      	movs	r3, r0
 800d96a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d96c:	19bb      	adds	r3, r7, r6
 800d96e:	781b      	ldrb	r3, [r3, #0]
}
 800d970:	0018      	movs	r0, r3
 800d972:	46bd      	mov	sp, r7
 800d974:	b005      	add	sp, #20
 800d976:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d978 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	000a      	movs	r2, r1
 800d982:	1cfb      	adds	r3, r7, #3
 800d984:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d986:	210f      	movs	r1, #15
 800d988:	187b      	adds	r3, r7, r1
 800d98a:	2200      	movs	r2, #0
 800d98c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d98e:	260e      	movs	r6, #14
 800d990:	19bb      	adds	r3, r7, r6
 800d992:	2200      	movs	r2, #0
 800d994:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	23b0      	movs	r3, #176	@ 0xb0
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	58d2      	ldr	r2, [r2, r3]
 800d99e:	000d      	movs	r5, r1
 800d9a0:	187c      	adds	r4, r7, r1
 800d9a2:	1cfb      	adds	r3, r7, #3
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	0019      	movs	r1, r3
 800d9a8:	0010      	movs	r0, r2
 800d9aa:	f7f7 f8fd 	bl	8004ba8 <HAL_PCD_EP_ClrStall>
 800d9ae:	0003      	movs	r3, r0
 800d9b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9b2:	19bc      	adds	r4, r7, r6
 800d9b4:	197b      	adds	r3, r7, r5
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	f000 f902 	bl	800dbc2 <USBD_Get_USB_Status>
 800d9be:	0003      	movs	r3, r0
 800d9c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d9c2:	19bb      	adds	r3, r7, r6
 800d9c4:	781b      	ldrb	r3, [r3, #0]
}
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	b005      	add	sp, #20
 800d9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9ce <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	000a      	movs	r2, r1
 800d9d8:	1cfb      	adds	r3, r7, #3
 800d9da:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	23b0      	movs	r3, #176	@ 0xb0
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	58d3      	ldr	r3, [r2, r3]
 800d9e4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9e6:	1cfb      	adds	r3, r7, #3
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	b25b      	sxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da0c      	bge.n	800da0a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9f0:	1cfb      	adds	r3, r7, #3
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	227f      	movs	r2, #127	@ 0x7f
 800d9f6:	401a      	ands	r2, r3
 800d9f8:	68f9      	ldr	r1, [r7, #12]
 800d9fa:	0013      	movs	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	189b      	adds	r3, r3, r2
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	18cb      	adds	r3, r1, r3
 800da04:	3312      	adds	r3, #18
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	e00d      	b.n	800da26 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da0a:	1cfb      	adds	r3, r7, #3
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	227f      	movs	r2, #127	@ 0x7f
 800da10:	401a      	ands	r2, r3
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	23a9      	movs	r3, #169	@ 0xa9
 800da16:	0059      	lsls	r1, r3, #1
 800da18:	0013      	movs	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	189b      	adds	r3, r3, r2
 800da1e:	00db      	lsls	r3, r3, #3
 800da20:	18c3      	adds	r3, r0, r3
 800da22:	185b      	adds	r3, r3, r1
 800da24:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da26:	0018      	movs	r0, r3
 800da28:	46bd      	mov	sp, r7
 800da2a:	b004      	add	sp, #16
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da30:	b085      	sub	sp, #20
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	000a      	movs	r2, r1
 800da38:	1cfb      	adds	r3, r7, #3
 800da3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3c:	210f      	movs	r1, #15
 800da3e:	187b      	adds	r3, r7, r1
 800da40:	2200      	movs	r2, #0
 800da42:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da44:	260e      	movs	r6, #14
 800da46:	19bb      	adds	r3, r7, r6
 800da48:	2200      	movs	r2, #0
 800da4a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	23b0      	movs	r3, #176	@ 0xb0
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	58d2      	ldr	r2, [r2, r3]
 800da54:	000d      	movs	r5, r1
 800da56:	187c      	adds	r4, r7, r1
 800da58:	1cfb      	adds	r3, r7, #3
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	0019      	movs	r1, r3
 800da5e:	0010      	movs	r0, r2
 800da60:	f7f6 fed0 	bl	8004804 <HAL_PCD_SetAddress>
 800da64:	0003      	movs	r3, r0
 800da66:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da68:	19bc      	adds	r4, r7, r6
 800da6a:	197b      	adds	r3, r7, r5
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	0018      	movs	r0, r3
 800da70:	f000 f8a7 	bl	800dbc2 <USBD_Get_USB_Status>
 800da74:	0003      	movs	r3, r0
 800da76:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800da78:	19bb      	adds	r3, r7, r6
 800da7a:	781b      	ldrb	r3, [r3, #0]
}
 800da7c:	0018      	movs	r0, r3
 800da7e:	46bd      	mov	sp, r7
 800da80:	b005      	add	sp, #20
 800da82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	0008      	movs	r0, r1
 800da8e:	607a      	str	r2, [r7, #4]
 800da90:	0019      	movs	r1, r3
 800da92:	230b      	movs	r3, #11
 800da94:	18fb      	adds	r3, r7, r3
 800da96:	1c02      	adds	r2, r0, #0
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	2408      	movs	r4, #8
 800da9c:	193b      	adds	r3, r7, r4
 800da9e:	1c0a      	adds	r2, r1, #0
 800daa0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa2:	2117      	movs	r1, #23
 800daa4:	187b      	adds	r3, r7, r1
 800daa6:	2200      	movs	r2, #0
 800daa8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daaa:	2516      	movs	r5, #22
 800daac:	197b      	adds	r3, r7, r5
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	23b0      	movs	r3, #176	@ 0xb0
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	58d0      	ldr	r0, [r2, r3]
 800daba:	193b      	adds	r3, r7, r4
 800dabc:	881d      	ldrh	r5, [r3, #0]
 800dabe:	000e      	movs	r6, r1
 800dac0:	187c      	adds	r4, r7, r1
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	230b      	movs	r3, #11
 800dac6:	18fb      	adds	r3, r7, r3
 800dac8:	7819      	ldrb	r1, [r3, #0]
 800daca:	002b      	movs	r3, r5
 800dacc:	f7f6 ffd4 	bl	8004a78 <HAL_PCD_EP_Transmit>
 800dad0:	0003      	movs	r3, r0
 800dad2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad4:	2516      	movs	r5, #22
 800dad6:	197c      	adds	r4, r7, r5
 800dad8:	19bb      	adds	r3, r7, r6
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	0018      	movs	r0, r3
 800dade:	f000 f870 	bl	800dbc2 <USBD_Get_USB_Status>
 800dae2:	0003      	movs	r3, r0
 800dae4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800dae6:	197b      	adds	r3, r7, r5
 800dae8:	781b      	ldrb	r3, [r3, #0]
}
 800daea:	0018      	movs	r0, r3
 800daec:	46bd      	mov	sp, r7
 800daee:	b007      	add	sp, #28
 800daf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800daf2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800daf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf4:	b087      	sub	sp, #28
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	0008      	movs	r0, r1
 800dafc:	607a      	str	r2, [r7, #4]
 800dafe:	0019      	movs	r1, r3
 800db00:	230b      	movs	r3, #11
 800db02:	18fb      	adds	r3, r7, r3
 800db04:	1c02      	adds	r2, r0, #0
 800db06:	701a      	strb	r2, [r3, #0]
 800db08:	2408      	movs	r4, #8
 800db0a:	193b      	adds	r3, r7, r4
 800db0c:	1c0a      	adds	r2, r1, #0
 800db0e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db10:	2117      	movs	r1, #23
 800db12:	187b      	adds	r3, r7, r1
 800db14:	2200      	movs	r2, #0
 800db16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db18:	2516      	movs	r5, #22
 800db1a:	197b      	adds	r3, r7, r5
 800db1c:	2200      	movs	r2, #0
 800db1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	23b0      	movs	r3, #176	@ 0xb0
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	58d0      	ldr	r0, [r2, r3]
 800db28:	193b      	adds	r3, r7, r4
 800db2a:	881d      	ldrh	r5, [r3, #0]
 800db2c:	000e      	movs	r6, r1
 800db2e:	187c      	adds	r4, r7, r1
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	230b      	movs	r3, #11
 800db34:	18fb      	adds	r3, r7, r3
 800db36:	7819      	ldrb	r1, [r3, #0]
 800db38:	002b      	movs	r3, r5
 800db3a:	f7f6 ff4d 	bl	80049d8 <HAL_PCD_EP_Receive>
 800db3e:	0003      	movs	r3, r0
 800db40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db42:	2516      	movs	r5, #22
 800db44:	197c      	adds	r4, r7, r5
 800db46:	19bb      	adds	r3, r7, r6
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	0018      	movs	r0, r3
 800db4c:	f000 f839 	bl	800dbc2 <USBD_Get_USB_Status>
 800db50:	0003      	movs	r3, r0
 800db52:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800db54:	197b      	adds	r3, r7, r5
 800db56:	781b      	ldrb	r3, [r3, #0]
}
 800db58:	0018      	movs	r0, r3
 800db5a:	46bd      	mov	sp, r7
 800db5c:	b007      	add	sp, #28
 800db5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	000a      	movs	r2, r1
 800db6a:	1cfb      	adds	r3, r7, #3
 800db6c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	23b0      	movs	r3, #176	@ 0xb0
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	58d2      	ldr	r2, [r2, r3]
 800db76:	1cfb      	adds	r3, r7, #3
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	0019      	movs	r1, r3
 800db7c:	0010      	movs	r0, r2
 800db7e:	f7f6 ff62 	bl	8004a46 <HAL_PCD_EP_GetRxCount>
 800db82:	0003      	movs	r3, r0
}
 800db84:	0018      	movs	r0, r3
 800db86:	46bd      	mov	sp, r7
 800db88:	b002      	add	sp, #8
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db94:	4b02      	ldr	r3, [pc, #8]	@ (800dba0 <USBD_static_malloc+0x14>)
}
 800db96:	0018      	movs	r0, r3
 800db98:	46bd      	mov	sp, r7
 800db9a:	b002      	add	sp, #8
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	46c0      	nop			@ (mov r8, r8)
 800dba0:	20001a10 	.word	0x20001a10

0800dba4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]

}
 800dbac:	46c0      	nop			@ (mov r8, r8)
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	b002      	add	sp, #8
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dbb8:	f7f4 fb96 	bl	80022e8 <SystemClock_Config>
}
 800dbbc:	46c0      	nop			@ (mov r8, r8)
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b084      	sub	sp, #16
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	0002      	movs	r2, r0
 800dbca:	1dfb      	adds	r3, r7, #7
 800dbcc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbce:	230f      	movs	r3, #15
 800dbd0:	18fb      	adds	r3, r7, r3
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800dbd6:	1dfb      	adds	r3, r7, #7
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b03      	cmp	r3, #3
 800dbdc:	d017      	beq.n	800dc0e <USBD_Get_USB_Status+0x4c>
 800dbde:	dc1b      	bgt.n	800dc18 <USBD_Get_USB_Status+0x56>
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d00f      	beq.n	800dc04 <USBD_Get_USB_Status+0x42>
 800dbe4:	dc18      	bgt.n	800dc18 <USBD_Get_USB_Status+0x56>
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <USBD_Get_USB_Status+0x2e>
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d005      	beq.n	800dbfa <USBD_Get_USB_Status+0x38>
 800dbee:	e013      	b.n	800dc18 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbf0:	230f      	movs	r3, #15
 800dbf2:	18fb      	adds	r3, r7, r3
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
    break;
 800dbf8:	e013      	b.n	800dc22 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbfa:	230f      	movs	r3, #15
 800dbfc:	18fb      	adds	r3, r7, r3
 800dbfe:	2202      	movs	r2, #2
 800dc00:	701a      	strb	r2, [r3, #0]
    break;
 800dc02:	e00e      	b.n	800dc22 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc04:	230f      	movs	r3, #15
 800dc06:	18fb      	adds	r3, r7, r3
 800dc08:	2201      	movs	r2, #1
 800dc0a:	701a      	strb	r2, [r3, #0]
    break;
 800dc0c:	e009      	b.n	800dc22 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc0e:	230f      	movs	r3, #15
 800dc10:	18fb      	adds	r3, r7, r3
 800dc12:	2202      	movs	r2, #2
 800dc14:	701a      	strb	r2, [r3, #0]
    break;
 800dc16:	e004      	b.n	800dc22 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800dc18:	230f      	movs	r3, #15
 800dc1a:	18fb      	adds	r3, r7, r3
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	701a      	strb	r2, [r3, #0]
    break;
 800dc20:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800dc22:	230f      	movs	r3, #15
 800dc24:	18fb      	adds	r3, r7, r3
 800dc26:	781b      	ldrb	r3, [r3, #0]
}
 800dc28:	0018      	movs	r0, r3
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	b004      	add	sp, #16
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800dc30:	b5b0      	push	{r4, r5, r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800dc38:	2316      	movs	r3, #22
 800dc3a:	18fb      	adds	r3, r7, r3
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800dc44:	4ba0      	ldr	r3, [pc, #640]	@ (800dec8 <dwt_initialise+0x298>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800dc4c:	4b9e      	ldr	r3, [pc, #632]	@ (800dec8 <dwt_initialise+0x298>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2200      	movs	r2, #0
 800dc52:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800dc54:	4b9c      	ldr	r3, [pc, #624]	@ (800dec8 <dwt_initialise+0x298>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800dc5c:	4b9a      	ldr	r3, [pc, #616]	@ (800dec8 <dwt_initialise+0x298>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2200      	movs	r2, #0
 800dc62:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800dc64:	4b98      	ldr	r3, [pc, #608]	@ (800dec8 <dwt_initialise+0x298>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800dc6c:	4b96      	ldr	r3, [pc, #600]	@ (800dec8 <dwt_initialise+0x298>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2200      	movs	r2, #0
 800dc72:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800dc74:	4b94      	ldr	r3, [pc, #592]	@ (800dec8 <dwt_initialise+0x298>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800dc7c:	f000 f92c 	bl	800ded8 <dwt_readdevid>
 800dc80:	0003      	movs	r3, r0
 800dc82:	4a92      	ldr	r2, [pc, #584]	@ (800decc <dwt_initialise+0x29c>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d002      	beq.n	800dc8e <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	425b      	negs	r3, r3
 800dc8c:	e118      	b.n	800dec0 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2202      	movs	r2, #2
 800dc92:	4013      	ands	r3, r2
 800dc94:	d101      	bne.n	800dc9a <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800dc96:	f000 ff37 	bl	800eb08 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	4013      	ands	r3, r2
 800dca0:	d003      	beq.n	800dcaa <dwt_initialise+0x7a>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	22f8      	movs	r2, #248	@ 0xf8
 800dca6:	4013      	ands	r3, r2
 800dca8:	d102      	bne.n	800dcb0 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f000 fdb2 	bl	800e814 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800dcb0:	2204      	movs	r2, #4
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	2024      	movs	r0, #36	@ 0x24
 800dcb6:	f000 fc95 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	d118      	bne.n	800dcf4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800dcc2:	2004      	movs	r0, #4
 800dcc4:	f000 fce8 	bl	800e698 <_dwt_otpread>
 800dcc8:	0003      	movs	r3, r0
 800dcca:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	22ff      	movs	r2, #255	@ 0xff
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	d021      	beq.n	800dd18 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800dcd4:	2202      	movs	r2, #2
 800dcd6:	2112      	movs	r1, #18
 800dcd8:	202d      	movs	r0, #45	@ 0x2d
 800dcda:	f000 fc83 	bl	800e5e4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800dcde:	4b7a      	ldr	r3, [pc, #488]	@ (800dec8 <dwt_initialise+0x298>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	8ada      	ldrh	r2, [r3, #22]
 800dce4:	4b78      	ldr	r3, [pc, #480]	@ (800dec8 <dwt_initialise+0x298>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2180      	movs	r1, #128	@ 0x80
 800dcea:	0149      	lsls	r1, r1, #5
 800dcec:	430a      	orrs	r2, r1
 800dcee:	b292      	uxth	r2, r2
 800dcf0:	82da      	strh	r2, [r3, #22]
 800dcf2:	e011      	b.n	800dd18 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800dcf4:	2130      	movs	r1, #48	@ 0x30
 800dcf6:	2028      	movs	r0, #40	@ 0x28
 800dcf8:	f000 fc16 	bl	800e528 <dwt_read32bitoffsetreg>
 800dcfc:	0003      	movs	r3, r0
 800dcfe:	4a74      	ldr	r2, [pc, #464]	@ (800ded0 <dwt_initialise+0x2a0>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d009      	beq.n	800dd18 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800dd04:	4b70      	ldr	r3, [pc, #448]	@ (800dec8 <dwt_initialise+0x298>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	8ada      	ldrh	r2, [r3, #22]
 800dd0a:	4b6f      	ldr	r3, [pc, #444]	@ (800dec8 <dwt_initialise+0x298>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2180      	movs	r1, #128	@ 0x80
 800dd10:	0149      	lsls	r1, r1, #5
 800dd12:	430a      	orrs	r2, r1
 800dd14:	b292      	uxth	r2, r2
 800dd16:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	d007      	beq.n	800dd30 <dwt_initialise+0x100>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2202      	movs	r2, #2
 800dd24:	4013      	ands	r3, r2
 800dd26:	d013      	beq.n	800dd50 <dwt_initialise+0x120>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2208      	movs	r2, #8
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	d00f      	beq.n	800dd50 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800dd30:	201e      	movs	r0, #30
 800dd32:	f000 fcb1 	bl	800e698 <_dwt_otpread>
 800dd36:	0002      	movs	r2, r0
 800dd38:	2116      	movs	r1, #22
 800dd3a:	187b      	adds	r3, r7, r1
 800dd3c:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800dd3e:	187b      	adds	r3, r7, r1
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	0a1b      	lsrs	r3, r3, #8
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	4b60      	ldr	r3, [pc, #384]	@ (800dec8 <dwt_initialise+0x298>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	72da      	strb	r2, [r3, #11]
 800dd4e:	e003      	b.n	800dd58 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800dd50:	4b5d      	ldr	r3, [pc, #372]	@ (800dec8 <dwt_initialise+0x298>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2200      	movs	r2, #0
 800dd56:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	d10f      	bne.n	800dd80 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800dd60:	2116      	movs	r1, #22
 800dd62:	187b      	adds	r3, r7, r1
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	221f      	movs	r2, #31
 800dd68:	4013      	ands	r3, r2
 800dd6a:	d102      	bne.n	800dd72 <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800dd6c:	187b      	adds	r3, r7, r1
 800dd6e:	2210      	movs	r2, #16
 800dd70:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800dd72:	2316      	movs	r3, #22
 800dd74:	18fb      	adds	r3, r7, r3
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f000 feea 	bl	800eb54 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2210      	movs	r2, #16
 800dd84:	4013      	ands	r3, r2
 800dd86:	d007      	beq.n	800dd98 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800dd88:	4b4f      	ldr	r3, [pc, #316]	@ (800dec8 <dwt_initialise+0x298>)
 800dd8a:	681c      	ldr	r4, [r3, #0]
 800dd8c:	2006      	movs	r0, #6
 800dd8e:	f000 fc83 	bl	800e698 <_dwt_otpread>
 800dd92:	0003      	movs	r3, r0
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	e003      	b.n	800dda0 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800dd98:	4b4b      	ldr	r3, [pc, #300]	@ (800dec8 <dwt_initialise+0x298>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	4013      	ands	r3, r2
 800dda6:	d007      	beq.n	800ddb8 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800dda8:	4b47      	ldr	r3, [pc, #284]	@ (800dec8 <dwt_initialise+0x298>)
 800ddaa:	681c      	ldr	r4, [r3, #0]
 800ddac:	2007      	movs	r0, #7
 800ddae:	f000 fc73 	bl	800e698 <_dwt_otpread>
 800ddb2:	0003      	movs	r3, r0
 800ddb4:	6063      	str	r3, [r4, #4]
 800ddb6:	e003      	b.n	800ddc0 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800ddb8:	4b43      	ldr	r3, [pc, #268]	@ (800dec8 <dwt_initialise+0x298>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2240      	movs	r2, #64	@ 0x40
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	d008      	beq.n	800ddda <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800ddc8:	2008      	movs	r0, #8
 800ddca:	f000 fc65 	bl	800e698 <_dwt_otpread>
 800ddce:	0002      	movs	r2, r0
 800ddd0:	4b3d      	ldr	r3, [pc, #244]	@ (800dec8 <dwt_initialise+0x298>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	b2d2      	uxtb	r2, r2
 800ddd6:	721a      	strb	r2, [r3, #8]
 800ddd8:	e003      	b.n	800dde2 <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800ddda:	4b3b      	ldr	r3, [pc, #236]	@ (800dec8 <dwt_initialise+0x298>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2200      	movs	r2, #0
 800dde0:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2280      	movs	r2, #128	@ 0x80
 800dde6:	4013      	ands	r3, r2
 800dde8:	d008      	beq.n	800ddfc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800ddea:	2009      	movs	r0, #9
 800ddec:	f000 fc54 	bl	800e698 <_dwt_otpread>
 800ddf0:	0002      	movs	r2, r0
 800ddf2:	4b35      	ldr	r3, [pc, #212]	@ (800dec8 <dwt_initialise+0x298>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	b2d2      	uxtb	r2, r2
 800ddf8:	725a      	strb	r2, [r3, #9]
 800ddfa:	e003      	b.n	800de04 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800ddfc:	4b32      	ldr	r3, [pc, #200]	@ (800dec8 <dwt_initialise+0x298>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2200      	movs	r2, #0
 800de02:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	4013      	ands	r3, r2
 800de0a:	d127      	bne.n	800de5c <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	4013      	ands	r3, r2
 800de12:	d00c      	beq.n	800de2e <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800de14:	f000 fc98 	bl	800e748 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800de18:	4b2b      	ldr	r3, [pc, #172]	@ (800dec8 <dwt_initialise+0x298>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	8ada      	ldrh	r2, [r3, #22]
 800de1e:	4b2a      	ldr	r3, [pc, #168]	@ (800dec8 <dwt_initialise+0x298>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2180      	movs	r1, #128	@ 0x80
 800de24:	0109      	lsls	r1, r1, #4
 800de26:	430a      	orrs	r2, r1
 800de28:	b292      	uxth	r2, r2
 800de2a:	82da      	strh	r2, [r3, #22]
 800de2c:	e024      	b.n	800de78 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800de2e:	250e      	movs	r5, #14
 800de30:	197c      	adds	r4, r7, r5
 800de32:	2105      	movs	r1, #5
 800de34:	2036      	movs	r0, #54	@ 0x36
 800de36:	f000 fb9e 	bl	800e576 <dwt_read16bitoffsetreg>
 800de3a:	0003      	movs	r3, r0
 800de3c:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800de3e:	0028      	movs	r0, r5
 800de40:	183b      	adds	r3, r7, r0
 800de42:	183a      	adds	r2, r7, r0
 800de44:	8812      	ldrh	r2, [r2, #0]
 800de46:	4923      	ldr	r1, [pc, #140]	@ (800ded4 <dwt_initialise+0x2a4>)
 800de48:	400a      	ands	r2, r1
 800de4a:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800de4c:	183b      	adds	r3, r7, r0
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	001a      	movs	r2, r3
 800de52:	2105      	movs	r1, #5
 800de54:	2036      	movs	r0, #54	@ 0x36
 800de56:	f000 fbd8 	bl	800e60a <dwt_write16bitoffsetreg>
 800de5a:	e00d      	b.n	800de78 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2204      	movs	r2, #4
 800de60:	4013      	ands	r3, r2
 800de62:	d109      	bne.n	800de78 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800de64:	4b18      	ldr	r3, [pc, #96]	@ (800dec8 <dwt_initialise+0x298>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	8ada      	ldrh	r2, [r3, #22]
 800de6a:	4b17      	ldr	r3, [pc, #92]	@ (800dec8 <dwt_initialise+0x298>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2180      	movs	r1, #128	@ 0x80
 800de70:	0109      	lsls	r1, r1, #4
 800de72:	430a      	orrs	r2, r1
 800de74:	b292      	uxth	r2, r2
 800de76:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800de78:	2001      	movs	r0, #1
 800de7a:	f000 fccb 	bl	800e814 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800de7e:	2200      	movs	r2, #0
 800de80:	210a      	movs	r1, #10
 800de82:	202c      	movs	r0, #44	@ 0x2c
 800de84:	f000 fbae 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800de88:	4b0f      	ldr	r3, [pc, #60]	@ (800dec8 <dwt_initialise+0x298>)
 800de8a:	681c      	ldr	r4, [r3, #0]
 800de8c:	2100      	movs	r1, #0
 800de8e:	2004      	movs	r0, #4
 800de90:	f000 fb4a 	bl	800e528 <dwt_read32bitoffsetreg>
 800de94:	0003      	movs	r3, r0
 800de96:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800de98:	4b0b      	ldr	r3, [pc, #44]	@ (800dec8 <dwt_initialise+0x298>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	0c1b      	lsrs	r3, r3, #16
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	4b09      	ldr	r3, [pc, #36]	@ (800dec8 <dwt_initialise+0x298>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2103      	movs	r1, #3
 800dea8:	400a      	ands	r2, r1
 800deaa:	b2d2      	uxtb	r2, r2
 800deac:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800deae:	4b06      	ldr	r3, [pc, #24]	@ (800dec8 <dwt_initialise+0x298>)
 800deb0:	681c      	ldr	r4, [r3, #0]
 800deb2:	2100      	movs	r1, #0
 800deb4:	2008      	movs	r0, #8
 800deb6:	f000 fb37 	bl	800e528 <dwt_read32bitoffsetreg>
 800deba:	0003      	movs	r3, r0
 800debc:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800debe:	2300      	movs	r3, #0

} // end dwt_initialise()
 800dec0:	0018      	movs	r0, r3
 800dec2:	46bd      	mov	sp, r7
 800dec4:	b006      	add	sp, #24
 800dec6:	bdb0      	pop	{r4, r5, r7, pc}
 800dec8:	200001f0 	.word	0x200001f0
 800decc:	deca0130 	.word	0xdeca0130
 800ded0:	88888888 	.word	0x88888888
 800ded4:	fffffdff 	.word	0xfffffdff

0800ded8 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800dedc:	2100      	movs	r1, #0
 800dede:	2000      	movs	r0, #0
 800dee0:	f000 fb22 	bl	800e528 <dwt_read32bitoffsetreg>
 800dee4:	0003      	movs	r3, r0
}
 800dee6:	0018      	movs	r0, r3
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	001a      	movs	r2, r3
 800defa:	210b      	movs	r1, #11
 800defc:	202a      	movs	r0, #42	@ 0x2a
 800defe:	f000 fb71 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	001a      	movs	r2, r3
 800df08:	2100      	movs	r1, #0
 800df0a:	201e      	movs	r0, #30
 800df0c:	f000 fb9d 	bl	800e64a <dwt_write32bitoffsetreg>

}
 800df10:	46c0      	nop			@ (mov r8, r8)
 800df12:	46bd      	mov	sp, r7
 800df14:	b002      	add	sp, #8
 800df16:	bd80      	pop	{r7, pc}

0800df18 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800df18:	b5b0      	push	{r4, r5, r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800df20:	2317      	movs	r3, #23
 800df22:	18fb      	adds	r3, r7, r3
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800df28:	2316      	movs	r3, #22
 800df2a:	18fb      	adds	r3, r7, r3
 800df2c:	2200      	movs	r2, #0
 800df2e:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800df30:	2013      	movs	r0, #19
 800df32:	183b      	adds	r3, r7, r0
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	7812      	ldrb	r2, [r2, #0]
 800df38:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	795b      	ldrb	r3, [r3, #5]
 800df3e:	0019      	movs	r1, r3
 800df40:	2314      	movs	r3, #20
 800df42:	18fb      	adds	r3, r7, r3
 800df44:	4ab6      	ldr	r2, [pc, #728]	@ (800e220 <dwt_configure+0x308>)
 800df46:	0049      	lsls	r1, r1, #1
 800df48:	5a8a      	ldrh	r2, [r1, r2]
 800df4a:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	785a      	ldrb	r2, [r3, #1]
 800df50:	2312      	movs	r3, #18
 800df52:	18fb      	adds	r3, r7, r3
 800df54:	3a01      	subs	r2, #1
 800df56:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800df58:	183b      	adds	r3, r7, r0
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d003      	beq.n	800df68 <dwt_configure+0x50>
 800df60:	183b      	adds	r3, r7, r0
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b07      	cmp	r3, #7
 800df66:	d101      	bne.n	800df6c <dwt_configure+0x54>
 800df68:	2201      	movs	r2, #1
 800df6a:	e000      	b.n	800df6e <dwt_configure+0x56>
 800df6c:	2200      	movs	r2, #0
 800df6e:	2311      	movs	r3, #17
 800df70:	18fb      	adds	r3, r7, r3
 800df72:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	79db      	ldrb	r3, [r3, #7]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10f      	bne.n	800df9c <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800df7c:	4ba9      	ldr	r3, [pc, #676]	@ (800e224 <dwt_configure+0x30c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	691a      	ldr	r2, [r3, #16]
 800df82:	4ba8      	ldr	r3, [pc, #672]	@ (800e224 <dwt_configure+0x30c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2180      	movs	r1, #128	@ 0x80
 800df88:	03c9      	lsls	r1, r1, #15
 800df8a:	430a      	orrs	r2, r1
 800df8c:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800df8e:	2214      	movs	r2, #20
 800df90:	18bb      	adds	r3, r7, r2
 800df92:	18ba      	adds	r2, r7, r2
 800df94:	8812      	ldrh	r2, [r2, #0]
 800df96:	08d2      	lsrs	r2, r2, #3
 800df98:	801a      	strh	r2, [r3, #0]
 800df9a:	e007      	b.n	800dfac <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800df9c:	4ba1      	ldr	r3, [pc, #644]	@ (800e224 <dwt_configure+0x30c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	691a      	ldr	r2, [r3, #16]
 800dfa2:	4ba0      	ldr	r3, [pc, #640]	@ (800e224 <dwt_configure+0x30c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	49a0      	ldr	r1, [pc, #640]	@ (800e228 <dwt_configure+0x310>)
 800dfa8:	400a      	ands	r2, r1
 800dfaa:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800dfac:	4b9d      	ldr	r3, [pc, #628]	@ (800e224 <dwt_configure+0x30c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	7a12      	ldrb	r2, [r2, #8]
 800dfb4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800dfb6:	4b9b      	ldr	r3, [pc, #620]	@ (800e224 <dwt_configure+0x30c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	691a      	ldr	r2, [r3, #16]
 800dfbc:	4b99      	ldr	r3, [pc, #612]	@ (800e224 <dwt_configure+0x30c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	499a      	ldr	r1, [pc, #616]	@ (800e22c <dwt_configure+0x314>)
 800dfc2:	400a      	ands	r2, r1
 800dfc4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800dfc6:	4b97      	ldr	r3, [pc, #604]	@ (800e224 <dwt_configure+0x30c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6919      	ldr	r1, [r3, #16]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7a1b      	ldrb	r3, [r3, #8]
 800dfd0:	041a      	lsls	r2, r3, #16
 800dfd2:	23c0      	movs	r3, #192	@ 0xc0
 800dfd4:	029b      	lsls	r3, r3, #10
 800dfd6:	401a      	ands	r2, r3
 800dfd8:	4b92      	ldr	r3, [pc, #584]	@ (800e224 <dwt_configure+0x30c>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800dfe0:	4b90      	ldr	r3, [pc, #576]	@ (800e224 <dwt_configure+0x30c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	001a      	movs	r2, r3
 800dfe8:	2100      	movs	r1, #0
 800dfea:	2004      	movs	r0, #4
 800dfec:	f000 fb2d 	bl	800e64a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800dff0:	2314      	movs	r3, #20
 800dff2:	18fb      	adds	r3, r7, r3
 800dff4:	881b      	ldrh	r3, [r3, #0]
 800dff6:	498e      	ldr	r1, [pc, #568]	@ (800e230 <dwt_configure+0x318>)
 800dff8:	001a      	movs	r2, r3
 800dffa:	202e      	movs	r0, #46	@ 0x2e
 800dffc:	f000 fb05 	bl	800e60a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800e000:	2512      	movs	r5, #18
 800e002:	197b      	adds	r3, r7, r5
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	0018      	movs	r0, r3
 800e008:	f000 fb78 	bl	800e6fc <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800e00c:	2413      	movs	r4, #19
 800e00e:	193b      	adds	r3, r7, r4
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	4a88      	ldr	r2, [pc, #544]	@ (800e234 <dwt_configure+0x31c>)
 800e014:	5cd3      	ldrb	r3, [r2, r3]
 800e016:	001a      	movs	r2, r3
 800e018:	4b87      	ldr	r3, [pc, #540]	@ (800e238 <dwt_configure+0x320>)
 800e01a:	0092      	lsls	r2, r2, #2
 800e01c:	58d3      	ldr	r3, [r2, r3]
 800e01e:	001a      	movs	r2, r3
 800e020:	2107      	movs	r1, #7
 800e022:	202b      	movs	r0, #43	@ 0x2b
 800e024:	f000 fb11 	bl	800e64a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800e028:	193b      	adds	r3, r7, r4
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	4a81      	ldr	r2, [pc, #516]	@ (800e234 <dwt_configure+0x31c>)
 800e02e:	5cd3      	ldrb	r3, [r2, r3]
 800e030:	001a      	movs	r2, r3
 800e032:	4b82      	ldr	r3, [pc, #520]	@ (800e23c <dwt_configure+0x324>)
 800e034:	5c9b      	ldrb	r3, [r3, r2]
 800e036:	001a      	movs	r2, r3
 800e038:	210b      	movs	r1, #11
 800e03a:	202b      	movs	r0, #43	@ 0x2b
 800e03c:	f000 fad2 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800e040:	2311      	movs	r3, #17
 800e042:	18fb      	adds	r3, r7, r3
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	4a7e      	ldr	r2, [pc, #504]	@ (800e240 <dwt_configure+0x328>)
 800e048:	5cd3      	ldrb	r3, [r2, r3]
 800e04a:	001a      	movs	r2, r3
 800e04c:	210b      	movs	r1, #11
 800e04e:	2028      	movs	r0, #40	@ 0x28
 800e050:	f000 fac8 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800e054:	193b      	adds	r3, r7, r4
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	4a76      	ldr	r2, [pc, #472]	@ (800e234 <dwt_configure+0x31c>)
 800e05a:	5cd3      	ldrb	r3, [r2, r3]
 800e05c:	001a      	movs	r2, r3
 800e05e:	4b79      	ldr	r3, [pc, #484]	@ (800e244 <dwt_configure+0x32c>)
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	58d3      	ldr	r3, [r2, r3]
 800e064:	001a      	movs	r2, r3
 800e066:	210c      	movs	r1, #12
 800e068:	2028      	movs	r0, #40	@ 0x28
 800e06a:	f000 faee 	bl	800e64a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	79db      	ldrb	r3, [r3, #7]
 800e072:	001a      	movs	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	799b      	ldrb	r3, [r3, #6]
 800e078:	0019      	movs	r1, r3
 800e07a:	4b73      	ldr	r3, [pc, #460]	@ (800e248 <dwt_configure+0x330>)
 800e07c:	0052      	lsls	r2, r2, #1
 800e07e:	1852      	adds	r2, r2, r1
 800e080:	0052      	lsls	r2, r2, #1
 800e082:	5ad3      	ldrh	r3, [r2, r3]
 800e084:	001a      	movs	r2, r3
 800e086:	2102      	movs	r1, #2
 800e088:	2027      	movs	r0, #39	@ 0x27
 800e08a:	f000 fabe 	bl	800e60a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800e08e:	197b      	adds	r3, r7, r5
 800e090:	781a      	ldrb	r2, [r3, #0]
 800e092:	4b6e      	ldr	r3, [pc, #440]	@ (800e24c <dwt_configure+0x334>)
 800e094:	0052      	lsls	r2, r2, #1
 800e096:	5ad3      	ldrh	r3, [r2, r3]
 800e098:	001a      	movs	r2, r3
 800e09a:	2104      	movs	r1, #4
 800e09c:	2027      	movs	r0, #39	@ 0x27
 800e09e:	f000 fab4 	bl	800e60a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	79db      	ldrb	r3, [r3, #7]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d105      	bne.n	800e0b6 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800e0aa:	2264      	movs	r2, #100	@ 0x64
 800e0ac:	2106      	movs	r1, #6
 800e0ae:	2027      	movs	r0, #39	@ 0x27
 800e0b0:	f000 faab 	bl	800e60a <dwt_write16bitoffsetreg>
 800e0b4:	e018      	b.n	800e0e8 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	789b      	ldrb	r3, [r3, #2]
 800e0ba:	2b04      	cmp	r3, #4
 800e0bc:	d10a      	bne.n	800e0d4 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800e0be:	2210      	movs	r2, #16
 800e0c0:	2106      	movs	r1, #6
 800e0c2:	2027      	movs	r0, #39	@ 0x27
 800e0c4:	f000 faa1 	bl	800e60a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800e0c8:	2210      	movs	r2, #16
 800e0ca:	2126      	movs	r1, #38	@ 0x26
 800e0cc:	2027      	movs	r0, #39	@ 0x27
 800e0ce:	f000 fa89 	bl	800e5e4 <dwt_write8bitoffsetreg>
 800e0d2:	e009      	b.n	800e0e8 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800e0d4:	2220      	movs	r2, #32
 800e0d6:	2106      	movs	r1, #6
 800e0d8:	2027      	movs	r0, #39	@ 0x27
 800e0da:	f000 fa96 	bl	800e60a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800e0de:	2228      	movs	r2, #40	@ 0x28
 800e0e0:	2126      	movs	r1, #38	@ 0x26
 800e0e2:	2027      	movs	r0, #39	@ 0x27
 800e0e4:	f000 fa7e 	bl	800e5e4 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800e0e8:	2312      	movs	r3, #18
 800e0ea:	18fb      	adds	r3, r7, r3
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	78db      	ldrb	r3, [r3, #3]
 800e0f2:	0019      	movs	r1, r3
 800e0f4:	4b56      	ldr	r3, [pc, #344]	@ (800e250 <dwt_configure+0x338>)
 800e0f6:	0092      	lsls	r2, r2, #2
 800e0f8:	1852      	adds	r2, r2, r1
 800e0fa:	0092      	lsls	r2, r2, #2
 800e0fc:	58d3      	ldr	r3, [r2, r3]
 800e0fe:	001a      	movs	r2, r3
 800e100:	2108      	movs	r1, #8
 800e102:	2027      	movs	r0, #39	@ 0x27
 800e104:	f000 faa1 	bl	800e64a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	895b      	ldrh	r3, [r3, #10]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a50      	ldr	r2, [pc, #320]	@ (800e254 <dwt_configure+0x33c>)
 800e114:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	895b      	ldrh	r3, [r3, #10]
 800e11a:	001a      	movs	r2, r3
 800e11c:	2120      	movs	r1, #32
 800e11e:	2027      	movs	r0, #39	@ 0x27
 800e120:	f000 fa73 	bl	800e60a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800e124:	4b4c      	ldr	r3, [pc, #304]	@ (800e258 <dwt_configure+0x340>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	001a      	movs	r2, r3
 800e12a:	210c      	movs	r1, #12
 800e12c:	2023      	movs	r0, #35	@ 0x23
 800e12e:	f000 fa8c 	bl	800e64a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800e132:	2312      	movs	r3, #18
 800e134:	18fb      	adds	r3, r7, r3
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	4a47      	ldr	r2, [pc, #284]	@ (800e258 <dwt_configure+0x340>)
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	18d3      	adds	r3, r2, r3
 800e13e:	3304      	adds	r3, #4
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	001a      	movs	r2, r3
 800e144:	2104      	movs	r1, #4
 800e146:	2023      	movs	r0, #35	@ 0x23
 800e148:	f000 fa5f 	bl	800e60a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	799b      	ldrb	r3, [r3, #6]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d011      	beq.n	800e178 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	79db      	ldrb	r3, [r3, #7]
 800e158:	001a      	movs	r2, r3
 800e15a:	4b40      	ldr	r3, [pc, #256]	@ (800e25c <dwt_configure+0x344>)
 800e15c:	5c9b      	ldrb	r3, [r3, r2]
 800e15e:	001a      	movs	r2, r3
 800e160:	2100      	movs	r1, #0
 800e162:	2021      	movs	r0, #33	@ 0x21
 800e164:	f000 fa3e 	bl	800e5e4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800e168:	2317      	movs	r3, #23
 800e16a:	18fb      	adds	r3, r7, r3
 800e16c:	2203      	movs	r2, #3
 800e16e:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800e170:	2316      	movs	r3, #22
 800e172:	18fb      	adds	r3, r7, r3
 800e174:	2201      	movs	r2, #1
 800e176:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e178:	2113      	movs	r1, #19
 800e17a:	187b      	adds	r3, r7, r1
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	220f      	movs	r2, #15
 800e180:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e182:	187b      	adds	r3, r7, r1
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	21ff      	movs	r1, #255	@ 0xff
 800e18a:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e18c:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	785b      	ldrb	r3, [r3, #1]
 800e192:	0499      	lsls	r1, r3, #18
 800e194:	23c0      	movs	r3, #192	@ 0xc0
 800e196:	031b      	lsls	r3, r3, #12
 800e198:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800e19a:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e19c:	2317      	movs	r3, #23
 800e19e:	18fb      	adds	r3, r7, r3
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	0519      	lsls	r1, r3, #20
 800e1a4:	23c0      	movs	r3, #192	@ 0xc0
 800e1a6:	039b      	lsls	r3, r3, #14
 800e1a8:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800e1aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e1ac:	2316      	movs	r3, #22
 800e1ae:	18fb      	adds	r3, r7, r3
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	0459      	lsls	r1, r3, #17
 800e1b4:	2380      	movs	r3, #128	@ 0x80
 800e1b6:	029b      	lsls	r3, r3, #10
 800e1b8:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800e1ba:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	791b      	ldrb	r3, [r3, #4]
 800e1c0:	0599      	lsls	r1, r3, #22
 800e1c2:	23f8      	movs	r3, #248	@ 0xf8
 800e1c4:	04db      	lsls	r3, r3, #19
 800e1c6:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800e1c8:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	795b      	ldrb	r3, [r3, #5]
 800e1ce:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	001a      	movs	r2, r3
 800e1d8:	2100      	movs	r1, #0
 800e1da:	201f      	movs	r0, #31
 800e1dc:	f000 fa35 	bl	800e64a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	789a      	ldrb	r2, [r3, #2]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	785b      	ldrb	r3, [r3, #1]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	0419      	lsls	r1, r3, #16
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	79db      	ldrb	r3, [r3, #7]
 800e1f2:	035a      	lsls	r2, r3, #13
 800e1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e224 <dwt_configure+0x30c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <dwt_configure+0x30c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	001a      	movs	r2, r3
 800e204:	2100      	movs	r1, #0
 800e206:	2008      	movs	r0, #8
 800e208:	f000 fa1f 	bl	800e64a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800e20c:	2242      	movs	r2, #66	@ 0x42
 800e20e:	2100      	movs	r1, #0
 800e210:	200d      	movs	r0, #13
 800e212:	f000 f9e7 	bl	800e5e4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800e216:	46c0      	nop			@ (mov r8, r8)
 800e218:	46bd      	mov	sp, r7
 800e21a:	b006      	add	sp, #24
 800e21c:	bdb0      	pop	{r4, r5, r7, pc}
 800e21e:	46c0      	nop			@ (mov r8, r8)
 800e220:	08011ca4 	.word	0x08011ca4
 800e224:	200001f0 	.word	0x200001f0
 800e228:	ffbfffff 	.word	0xffbfffff
 800e22c:	fffcffff 	.word	0xfffcffff
 800e230:	00002804 	.word	0x00002804
 800e234:	08011c24 	.word	0x08011c24
 800e238:	08011c44 	.word	0x08011c44
 800e23c:	08011c5c 	.word	0x08011c5c
 800e240:	08011c64 	.word	0x08011c64
 800e244:	08011c2c 	.word	0x08011c2c
 800e248:	08011c74 	.word	0x08011c74
 800e24c:	08011c80 	.word	0x08011c80
 800e250:	08011c84 	.word	0x08011c84
 800e254:	00001041 	.word	0x00001041
 800e258:	08011c68 	.word	0x08011c68
 800e25c:	08011c70 	.word	0x08011c70

0800e260 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	0002      	movs	r2, r0
 800e268:	1dbb      	adds	r3, r7, #6
 800e26a:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800e26c:	1dbb      	adds	r3, r7, #6
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4904      	ldr	r1, [pc, #16]	@ (800e284 <dwt_setrxantennadelay+0x24>)
 800e272:	001a      	movs	r2, r3
 800e274:	202e      	movs	r0, #46	@ 0x2e
 800e276:	f000 f9c8 	bl	800e60a <dwt_write16bitoffsetreg>
}
 800e27a:	46c0      	nop			@ (mov r8, r8)
 800e27c:	46bd      	mov	sp, r7
 800e27e:	b002      	add	sp, #8
 800e280:	bd80      	pop	{r7, pc}
 800e282:	46c0      	nop			@ (mov r8, r8)
 800e284:	00001804 	.word	0x00001804

0800e288 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	0002      	movs	r2, r0
 800e290:	1dbb      	adds	r3, r7, #6
 800e292:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800e294:	1dbb      	adds	r3, r7, #6
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	001a      	movs	r2, r3
 800e29a:	2100      	movs	r1, #0
 800e29c:	2018      	movs	r0, #24
 800e29e:	f000 f9b4 	bl	800e60a <dwt_write16bitoffsetreg>
}
 800e2a2:	46c0      	nop			@ (mov r8, r8)
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	b002      	add	sp, #8
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6039      	str	r1, [r7, #0]
 800e2b2:	0011      	movs	r1, r2
 800e2b4:	1dbb      	adds	r3, r7, #6
 800e2b6:	1c02      	adds	r2, r0, #0
 800e2b8:	801a      	strh	r2, [r3, #0]
 800e2ba:	1d3b      	adds	r3, r7, #4
 800e2bc:	1c0a      	adds	r2, r1, #0
 800e2be:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800e2c0:	1d3b      	adds	r3, r7, #4
 800e2c2:	881a      	ldrh	r2, [r3, #0]
 800e2c4:	1dbb      	adds	r3, r7, #6
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	18d2      	adds	r2, r2, r3
 800e2ca:	2380      	movs	r3, #128	@ 0x80
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	dc0d      	bgt.n	800e2ee <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800e2d2:	1dbb      	adds	r3, r7, #6
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	3b02      	subs	r3, #2
 800e2d8:	0018      	movs	r0, r3
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	1d3b      	adds	r3, r7, #4
 800e2de:	8819      	ldrh	r1, [r3, #0]
 800e2e0:	0013      	movs	r3, r2
 800e2e2:	0002      	movs	r2, r0
 800e2e4:	2009      	movs	r0, #9
 800e2e6:	f000 f862 	bl	800e3ae <dwt_writetodevice>
        return DWT_SUCCESS;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e001      	b.n	800e2f2 <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800e2f2:	0018      	movs	r0, r3
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	b002      	add	sp, #8
 800e2f8:	bd80      	pop	{r7, pc}
	...

0800e2fc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	603a      	str	r2, [r7, #0]
 800e304:	1dbb      	adds	r3, r7, #6
 800e306:	1c02      	adds	r2, r0, #0
 800e308:	801a      	strh	r2, [r3, #0]
 800e30a:	1d3b      	adds	r3, r7, #4
 800e30c:	1c0a      	adds	r2, r1, #0
 800e30e:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800e310:	4b0b      	ldr	r3, [pc, #44]	@ (800e340 <dwt_writetxfctrl+0x44>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68da      	ldr	r2, [r3, #12]
 800e316:	1dbb      	adds	r3, r7, #6
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	431a      	orrs	r2, r3
 800e31c:	1d3b      	adds	r3, r7, #4
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	059b      	lsls	r3, r3, #22
 800e322:	431a      	orrs	r2, r3
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	03db      	lsls	r3, r3, #15
 800e328:	4313      	orrs	r3, r2
 800e32a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	001a      	movs	r2, r3
 800e330:	2100      	movs	r1, #0
 800e332:	2008      	movs	r0, #8
 800e334:	f000 f989 	bl	800e64a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800e338:	46c0      	nop			@ (mov r8, r8)
 800e33a:	46bd      	mov	sp, r7
 800e33c:	b004      	add	sp, #16
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200001f0 	.word	0x200001f0

0800e344 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	0008      	movs	r0, r1
 800e34e:	0011      	movs	r1, r2
 800e350:	1cbb      	adds	r3, r7, #2
 800e352:	1c02      	adds	r2, r0, #0
 800e354:	801a      	strh	r2, [r3, #0]
 800e356:	003b      	movs	r3, r7
 800e358:	1c0a      	adds	r2, r1, #0
 800e35a:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800e35c:	1cbb      	adds	r3, r7, #2
 800e35e:	881a      	ldrh	r2, [r3, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	003b      	movs	r3, r7
 800e364:	8819      	ldrh	r1, [r3, #0]
 800e366:	0003      	movs	r3, r0
 800e368:	2011      	movs	r0, #17
 800e36a:	f000 f881 	bl	800e470 <dwt_readfromdevice>
}
 800e36e:	46c0      	nop			@ (mov r8, r8)
 800e370:	46bd      	mov	sp, r7
 800e372:	b002      	add	sp, #8
 800e374:	bd80      	pop	{r7, pc}

0800e376 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b082      	sub	sp, #8
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2205      	movs	r2, #5
 800e382:	2100      	movs	r1, #0
 800e384:	2017      	movs	r0, #23
 800e386:	f000 f873 	bl	800e470 <dwt_readfromdevice>
}
 800e38a:	46c0      	nop			@ (mov r8, r8)
 800e38c:	46bd      	mov	sp, r7
 800e38e:	b002      	add	sp, #8
 800e390:	bd80      	pop	{r7, pc}

0800e392 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2205      	movs	r2, #5
 800e39e:	2100      	movs	r1, #0
 800e3a0:	2015      	movs	r0, #21
 800e3a2:	f000 f865 	bl	800e470 <dwt_readfromdevice>
}
 800e3a6:	46c0      	nop			@ (mov r8, r8)
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	b002      	add	sp, #8
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800e3ae:	b590      	push	{r4, r7, lr}
 800e3b0:	b087      	sub	sp, #28
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	60ba      	str	r2, [r7, #8]
 800e3b6:	607b      	str	r3, [r7, #4]
 800e3b8:	240e      	movs	r4, #14
 800e3ba:	193b      	adds	r3, r7, r4
 800e3bc:	1c02      	adds	r2, r0, #0
 800e3be:	801a      	strh	r2, [r3, #0]
 800e3c0:	200c      	movs	r0, #12
 800e3c2:	183b      	adds	r3, r7, r0
 800e3c4:	1c0a      	adds	r2, r1, #0
 800e3c6:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e3cc:	183b      	adds	r3, r7, r0
 800e3ce:	881b      	ldrh	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10d      	bne.n	800e3f0 <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e3d4:	193b      	adds	r3, r7, r4
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	1c59      	adds	r1, r3, #1
 800e3de:	6179      	str	r1, [r7, #20]
 800e3e0:	2180      	movs	r1, #128	@ 0x80
 800e3e2:	4249      	negs	r1, r1
 800e3e4:	430a      	orrs	r2, r1
 800e3e6:	b2d1      	uxtb	r1, r2
 800e3e8:	2210      	movs	r2, #16
 800e3ea:	18ba      	adds	r2, r7, r2
 800e3ec:	54d1      	strb	r1, [r2, r3]
 800e3ee:	e033      	b.n	800e458 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e3f0:	230e      	movs	r3, #14
 800e3f2:	18fb      	adds	r3, r7, r3
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	1c59      	adds	r1, r3, #1
 800e3fc:	6179      	str	r1, [r7, #20]
 800e3fe:	2140      	movs	r1, #64	@ 0x40
 800e400:	4249      	negs	r1, r1
 800e402:	430a      	orrs	r2, r1
 800e404:	b2d1      	uxtb	r1, r2
 800e406:	2010      	movs	r0, #16
 800e408:	183a      	adds	r2, r7, r0
 800e40a:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e40c:	210c      	movs	r1, #12
 800e40e:	187b      	adds	r3, r7, r1
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	2b7f      	cmp	r3, #127	@ 0x7f
 800e414:	d808      	bhi.n	800e428 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	617a      	str	r2, [r7, #20]
 800e41c:	187a      	adds	r2, r7, r1
 800e41e:	8812      	ldrh	r2, [r2, #0]
 800e420:	b2d1      	uxtb	r1, r2
 800e422:	183a      	adds	r2, r7, r0
 800e424:	54d1      	strb	r1, [r2, r3]
 800e426:	e017      	b.n	800e458 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e428:	200c      	movs	r0, #12
 800e42a:	183b      	adds	r3, r7, r0
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	1c59      	adds	r1, r3, #1
 800e434:	6179      	str	r1, [r7, #20]
 800e436:	2180      	movs	r1, #128	@ 0x80
 800e438:	4249      	negs	r1, r1
 800e43a:	430a      	orrs	r2, r1
 800e43c:	b2d1      	uxtb	r1, r2
 800e43e:	2410      	movs	r4, #16
 800e440:	193a      	adds	r2, r7, r4
 800e442:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e444:	183b      	adds	r3, r7, r0
 800e446:	881b      	ldrh	r3, [r3, #0]
 800e448:	09db      	lsrs	r3, r3, #7
 800e44a:	b299      	uxth	r1, r3
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	1c5a      	adds	r2, r3, #1
 800e450:	617a      	str	r2, [r7, #20]
 800e452:	b2c9      	uxtb	r1, r1
 800e454:	193a      	adds	r2, r7, r4
 800e456:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	b298      	uxth	r0, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	2110      	movs	r1, #16
 800e462:	1879      	adds	r1, r7, r1
 800e464:	f000 fbbe 	bl	800ebe4 <writetospi>
} // end dwt_writetodevice()
 800e468:	46c0      	nop			@ (mov r8, r8)
 800e46a:	46bd      	mov	sp, r7
 800e46c:	b007      	add	sp, #28
 800e46e:	bd90      	pop	{r4, r7, pc}

0800e470 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60ba      	str	r2, [r7, #8]
 800e478:	607b      	str	r3, [r7, #4]
 800e47a:	240e      	movs	r4, #14
 800e47c:	193b      	adds	r3, r7, r4
 800e47e:	1c02      	adds	r2, r0, #0
 800e480:	801a      	strh	r2, [r3, #0]
 800e482:	200c      	movs	r0, #12
 800e484:	183b      	adds	r3, r7, r0
 800e486:	1c0a      	adds	r2, r1, #0
 800e488:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800e48a:	2300      	movs	r3, #0
 800e48c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800e48e:	183b      	adds	r3, r7, r0
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d109      	bne.n	800e4aa <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	617a      	str	r2, [r7, #20]
 800e49c:	193a      	adds	r2, r7, r4
 800e49e:	8812      	ldrh	r2, [r2, #0]
 800e4a0:	b2d1      	uxtb	r1, r2
 800e4a2:	2210      	movs	r2, #16
 800e4a4:	18ba      	adds	r2, r7, r2
 800e4a6:	54d1      	strb	r1, [r2, r3]
 800e4a8:	e032      	b.n	800e510 <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800e4aa:	230e      	movs	r3, #14
 800e4ac:	18fb      	adds	r3, r7, r3
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	1c59      	adds	r1, r3, #1
 800e4b6:	6179      	str	r1, [r7, #20]
 800e4b8:	2140      	movs	r1, #64	@ 0x40
 800e4ba:	430a      	orrs	r2, r1
 800e4bc:	b2d1      	uxtb	r1, r2
 800e4be:	2010      	movs	r0, #16
 800e4c0:	183a      	adds	r2, r7, r0
 800e4c2:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800e4c4:	210c      	movs	r1, #12
 800e4c6:	187b      	adds	r3, r7, r1
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4cc:	d808      	bhi.n	800e4e0 <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	617a      	str	r2, [r7, #20]
 800e4d4:	187a      	adds	r2, r7, r1
 800e4d6:	8812      	ldrh	r2, [r2, #0]
 800e4d8:	b2d1      	uxtb	r1, r2
 800e4da:	183a      	adds	r2, r7, r0
 800e4dc:	54d1      	strb	r1, [r2, r3]
 800e4de:	e017      	b.n	800e510 <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800e4e0:	200c      	movs	r0, #12
 800e4e2:	183b      	adds	r3, r7, r0
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	1c59      	adds	r1, r3, #1
 800e4ec:	6179      	str	r1, [r7, #20]
 800e4ee:	2180      	movs	r1, #128	@ 0x80
 800e4f0:	4249      	negs	r1, r1
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	b2d1      	uxtb	r1, r2
 800e4f6:	2410      	movs	r4, #16
 800e4f8:	193a      	adds	r2, r7, r4
 800e4fa:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800e4fc:	183b      	adds	r3, r7, r0
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	09db      	lsrs	r3, r3, #7
 800e502:	b299      	uxth	r1, r3
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	1c5a      	adds	r2, r3, #1
 800e508:	617a      	str	r2, [r7, #20]
 800e50a:	b2c9      	uxtb	r1, r1
 800e50c:	193a      	adds	r2, r7, r4
 800e50e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	b298      	uxth	r0, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	2110      	movs	r1, #16
 800e51a:	1879      	adds	r1, r7, r1
 800e51c:	f000 fb9a 	bl	800ec54 <readfromspi>
} // end dwt_readfromdevice()
 800e520:	46c0      	nop			@ (mov r8, r8)
 800e522:	46bd      	mov	sp, r7
 800e524:	b007      	add	sp, #28
 800e526:	bd90      	pop	{r4, r7, pc}

0800e528 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800e532:	2300      	movs	r3, #0
 800e534:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	b298      	uxth	r0, r3
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	b299      	uxth	r1, r3
 800e53e:	230c      	movs	r3, #12
 800e540:	18fb      	adds	r3, r7, r3
 800e542:	2204      	movs	r2, #4
 800e544:	f7ff ff94 	bl	800e470 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800e548:	2303      	movs	r3, #3
 800e54a:	613b      	str	r3, [r7, #16]
 800e54c:	e00b      	b.n	800e566 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	220c      	movs	r2, #12
 800e554:	18b9      	adds	r1, r7, r2
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	188a      	adds	r2, r1, r2
 800e55a:	7812      	ldrb	r2, [r2, #0]
 800e55c:	189b      	adds	r3, r3, r2
 800e55e:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	3b01      	subs	r3, #1
 800e564:	613b      	str	r3, [r7, #16]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	daf0      	bge.n	800e54e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800e56c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800e56e:	0018      	movs	r0, r3
 800e570:	46bd      	mov	sp, r7
 800e572:	b006      	add	sp, #24
 800e574:	bd80      	pop	{r7, pc}

0800e576 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800e576:	b5b0      	push	{r4, r5, r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800e580:	240e      	movs	r4, #14
 800e582:	193b      	adds	r3, r7, r4
 800e584:	2200      	movs	r2, #0
 800e586:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	b298      	uxth	r0, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	b299      	uxth	r1, r3
 800e590:	250c      	movs	r5, #12
 800e592:	197b      	adds	r3, r7, r5
 800e594:	2202      	movs	r2, #2
 800e596:	f7ff ff6b 	bl	800e470 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800e59a:	0029      	movs	r1, r5
 800e59c:	187b      	adds	r3, r7, r1
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	021b      	lsls	r3, r3, #8
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	187b      	adds	r3, r7, r1
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	0019      	movs	r1, r3
 800e5aa:	193b      	adds	r3, r7, r4
 800e5ac:	1852      	adds	r2, r2, r1
 800e5ae:	801a      	strh	r2, [r3, #0]
    return regval ;
 800e5b0:	193b      	adds	r3, r7, r4
 800e5b2:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	b004      	add	sp, #16
 800e5ba:	bdb0      	pop	{r4, r5, r7, pc}

0800e5bc <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800e5bc:	b590      	push	{r4, r7, lr}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	b298      	uxth	r0, r3
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	b299      	uxth	r1, r3
 800e5ce:	240f      	movs	r4, #15
 800e5d0:	193b      	adds	r3, r7, r4
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f7ff ff4c 	bl	800e470 <dwt_readfromdevice>

    return regval ;
 800e5d8:	193b      	adds	r3, r7, r4
 800e5da:	781b      	ldrb	r3, [r3, #0]
}
 800e5dc:	0018      	movs	r0, r3
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	b005      	add	sp, #20
 800e5e2:	bd90      	pop	{r4, r7, pc}

0800e5e4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	1dfb      	adds	r3, r7, #7
 800e5f0:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	b298      	uxth	r0, r3
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	b299      	uxth	r1, r3
 800e5fa:	1dfb      	adds	r3, r7, #7
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f7ff fed6 	bl	800e3ae <dwt_writetodevice>
}
 800e602:	46c0      	nop			@ (mov r8, r8)
 800e604:	46bd      	mov	sp, r7
 800e606:	b004      	add	sp, #16
 800e608:	bd80      	pop	{r7, pc}

0800e60a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800e60a:	b590      	push	{r4, r7, lr}
 800e60c:	b087      	sub	sp, #28
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	1dbb      	adds	r3, r7, #6
 800e616:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800e618:	1dbb      	adds	r3, r7, #6
 800e61a:	881b      	ldrh	r3, [r3, #0]
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	2414      	movs	r4, #20
 800e620:	193b      	adds	r3, r7, r4
 800e622:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800e624:	1dbb      	adds	r3, r7, #6
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	0a1b      	lsrs	r3, r3, #8
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	193b      	adds	r3, r7, r4
 800e630:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	b298      	uxth	r0, r3
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	b299      	uxth	r1, r3
 800e63a:	193b      	adds	r3, r7, r4
 800e63c:	2202      	movs	r2, #2
 800e63e:	f7ff feb6 	bl	800e3ae <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800e642:	46c0      	nop			@ (mov r8, r8)
 800e644:	46bd      	mov	sp, r7
 800e646:	b007      	add	sp, #28
 800e648:	bd90      	pop	{r4, r7, pc}

0800e64a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b086      	sub	sp, #24
 800e64e:	af00      	add	r7, sp, #0
 800e650:	60f8      	str	r0, [r7, #12]
 800e652:	60b9      	str	r1, [r7, #8]
 800e654:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800e656:	2300      	movs	r3, #0
 800e658:	617b      	str	r3, [r7, #20]
 800e65a:	e00d      	b.n	800e678 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	b2d9      	uxtb	r1, r3
 800e660:	2310      	movs	r3, #16
 800e662:	18fa      	adds	r2, r7, r3
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	18d3      	adds	r3, r2, r3
 800e668:	1c0a      	adds	r2, r1, #0
 800e66a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	0a1b      	lsrs	r3, r3, #8
 800e670:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	3301      	adds	r3, #1
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2b03      	cmp	r3, #3
 800e67c:	ddee      	ble.n	800e65c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	b298      	uxth	r0, r3
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	b299      	uxth	r1, r3
 800e686:	2310      	movs	r3, #16
 800e688:	18fb      	adds	r3, r7, r3
 800e68a:	2204      	movs	r2, #4
 800e68c:	f7ff fe8f 	bl	800e3ae <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800e690:	46c0      	nop			@ (mov r8, r8)
 800e692:	46bd      	mov	sp, r7
 800e694:	b006      	add	sp, #24
 800e696:	bd80      	pop	{r7, pc}

0800e698 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	0002      	movs	r2, r0
 800e6a0:	1dbb      	adds	r3, r7, #6
 800e6a2:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800e6a4:	1dbb      	adds	r3, r7, #6
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	001a      	movs	r2, r3
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	202d      	movs	r0, #45	@ 0x2d
 800e6ae:	f7ff ffac 	bl	800e60a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	2106      	movs	r1, #6
 800e6b6:	202d      	movs	r0, #45	@ 0x2d
 800e6b8:	f7ff ff94 	bl	800e5e4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800e6bc:	2200      	movs	r2, #0
 800e6be:	2106      	movs	r1, #6
 800e6c0:	202d      	movs	r0, #45	@ 0x2d
 800e6c2:	f7ff ff8f 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800e6c6:	210a      	movs	r1, #10
 800e6c8:	202d      	movs	r0, #45	@ 0x2d
 800e6ca:	f7ff ff2d 	bl	800e528 <dwt_read32bitoffsetreg>
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
}
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	b004      	add	sp, #16
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2102      	movs	r1, #2
 800e6e4:	202c      	movs	r0, #44	@ 0x2c
 800e6e6:	f7ff ff7d 	bl	800e5e4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	2102      	movs	r1, #2
 800e6ee:	202c      	movs	r0, #44	@ 0x2c
 800e6f0:	f7ff ff78 	bl	800e5e4 <dwt_write8bitoffsetreg>
}
 800e6f4:	46c0      	nop			@ (mov r8, r8)
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800e704:	4b0c      	ldr	r3, [pc, #48]	@ (800e738 <_dwt_configlde+0x3c>)
 800e706:	226d      	movs	r2, #109	@ 0x6d
 800e708:	0019      	movs	r1, r3
 800e70a:	202e      	movs	r0, #46	@ 0x2e
 800e70c:	f7ff ff6a 	bl	800e5e4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d006      	beq.n	800e724 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800e716:	4a09      	ldr	r2, [pc, #36]	@ (800e73c <_dwt_configlde+0x40>)
 800e718:	4b09      	ldr	r3, [pc, #36]	@ (800e740 <_dwt_configlde+0x44>)
 800e71a:	0019      	movs	r1, r3
 800e71c:	202e      	movs	r0, #46	@ 0x2e
 800e71e:	f7ff ff74 	bl	800e60a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800e722:	e005      	b.n	800e730 <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800e724:	4a07      	ldr	r2, [pc, #28]	@ (800e744 <_dwt_configlde+0x48>)
 800e726:	4b06      	ldr	r3, [pc, #24]	@ (800e740 <_dwt_configlde+0x44>)
 800e728:	0019      	movs	r1, r3
 800e72a:	202e      	movs	r0, #46	@ 0x2e
 800e72c:	f7ff ff6d 	bl	800e60a <dwt_write16bitoffsetreg>
}
 800e730:	46c0      	nop			@ (mov r8, r8)
 800e732:	46bd      	mov	sp, r7
 800e734:	b002      	add	sp, #8
 800e736:	bd80      	pop	{r7, pc}
 800e738:	00000806 	.word	0x00000806
 800e73c:	00000607 	.word	0x00000607
 800e740:	00001806 	.word	0x00001806
 800e744:	00001607 	.word	0x00001607

0800e748 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800e74c:	200e      	movs	r0, #14
 800e74e:	f000 f861 	bl	800e814 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800e752:	2380      	movs	r3, #128	@ 0x80
 800e754:	021b      	lsls	r3, r3, #8
 800e756:	001a      	movs	r2, r3
 800e758:	2106      	movs	r1, #6
 800e75a:	202d      	movs	r0, #45	@ 0x2d
 800e75c:	f7ff ff55 	bl	800e60a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800e760:	2001      	movs	r0, #1
 800e762:	f000 fa32 	bl	800ebca <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800e766:	2001      	movs	r0, #1
 800e768:	f000 f854 	bl	800e814 <_dwt_enableclocks>
}
 800e76c:	46c0      	nop			@ (mov r8, r8)
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
    if(enable)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00c      	beq.n	800e79c <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800e782:	4b13      	ldr	r3, [pc, #76]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	691a      	ldr	r2, [r3, #16]
 800e788:	4b11      	ldr	r3, [pc, #68]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4911      	ldr	r1, [pc, #68]	@ (800e7d4 <dwt_setdblrxbuffmode+0x60>)
 800e78e:	400a      	ands	r2, r1
 800e790:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800e792:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2201      	movs	r2, #1
 800e798:	751a      	strb	r2, [r3, #20]
 800e79a:	e00c      	b.n	800e7b6 <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800e79c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	691a      	ldr	r2, [r3, #16]
 800e7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2180      	movs	r1, #128	@ 0x80
 800e7a8:	0149      	lsls	r1, r1, #5
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800e7ae:	4b08      	ldr	r3, [pc, #32]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800e7b6:	4b06      	ldr	r3, [pc, #24]	@ (800e7d0 <dwt_setdblrxbuffmode+0x5c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	001a      	movs	r2, r3
 800e7be:	2100      	movs	r1, #0
 800e7c0:	2004      	movs	r0, #4
 800e7c2:	f7ff ff42 	bl	800e64a <dwt_write32bitoffsetreg>
}
 800e7c6:	46c0      	nop			@ (mov r8, r8)
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	b002      	add	sp, #8
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	46c0      	nop			@ (mov r8, r8)
 800e7d0:	200001f0 	.word	0x200001f0
 800e7d4:	ffffefff 	.word	0xffffefff

0800e7d8 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	201a      	movs	r0, #26
 800e7e4:	f7ff fea0 	bl	800e528 <dwt_read32bitoffsetreg>
 800e7e8:	0003      	movs	r3, r0
 800e7ea:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	0d1b      	lsrs	r3, r3, #20
 800e7f0:	051b      	lsls	r3, r3, #20
 800e7f2:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	031b      	lsls	r3, r3, #12
 800e7f8:	0b1b      	lsrs	r3, r3, #12
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	001a      	movs	r2, r3
 800e804:	2100      	movs	r1, #0
 800e806:	201a      	movs	r0, #26
 800e808:	f7ff ff1f 	bl	800e64a <dwt_write32bitoffsetreg>
}
 800e80c:	46c0      	nop			@ (mov r8, r8)
 800e80e:	46bd      	mov	sp, r7
 800e810:	b004      	add	sp, #16
 800e812:	bd80      	pop	{r7, pc}

0800e814 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800e814:	b590      	push	{r4, r7, lr}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800e81c:	230c      	movs	r3, #12
 800e81e:	18fb      	adds	r3, r7, r3
 800e820:	2202      	movs	r2, #2
 800e822:	2100      	movs	r1, #0
 800e824:	2036      	movs	r0, #54	@ 0x36
 800e826:	f7ff fe23 	bl	800e470 <dwt_readfromdevice>
    switch(clocks)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b0e      	cmp	r3, #14
 800e82e:	d900      	bls.n	800e832 <_dwt_enableclocks+0x1e>
 800e830:	e07b      	b.n	800e92a <_dwt_enableclocks+0x116>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	009a      	lsls	r2, r3, #2
 800e836:	4b46      	ldr	r3, [pc, #280]	@ (800e950 <_dwt_enableclocks+0x13c>)
 800e838:	18d3      	adds	r3, r2, r3
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800e83e:	210c      	movs	r1, #12
 800e840:	187b      	adds	r3, r7, r1
 800e842:	2200      	movs	r2, #0
 800e844:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800e846:	187b      	adds	r3, r7, r1
 800e848:	785b      	ldrb	r3, [r3, #1]
 800e84a:	2201      	movs	r2, #1
 800e84c:	4393      	bics	r3, r2
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	187b      	adds	r3, r7, r1
 800e852:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e854:	e06a      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800e856:	210c      	movs	r1, #12
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	b25b      	sxtb	r3, r3
 800e85e:	2203      	movs	r2, #3
 800e860:	4393      	bics	r3, r2
 800e862:	b25b      	sxtb	r3, r3
 800e864:	2201      	movs	r2, #1
 800e866:	4313      	orrs	r3, r2
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	187b      	adds	r3, r7, r1
 800e86e:	701a      	strb	r2, [r3, #0]
        }
        break;
 800e870:	e05c      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800e872:	210c      	movs	r1, #12
 800e874:	187b      	adds	r3, r7, r1
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	b25b      	sxtb	r3, r3
 800e87a:	2203      	movs	r2, #3
 800e87c:	4393      	bics	r3, r2
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	2202      	movs	r2, #2
 800e882:	4313      	orrs	r3, r2
 800e884:	b25b      	sxtb	r3, r3
 800e886:	b2da      	uxtb	r2, r3
 800e888:	187b      	adds	r3, r7, r1
 800e88a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800e88c:	e04e      	b.n	800e92c <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800e88e:	210c      	movs	r1, #12
 800e890:	187b      	adds	r3, r7, r1
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	b25b      	sxtb	r3, r3
 800e896:	224c      	movs	r2, #76	@ 0x4c
 800e898:	4393      	bics	r3, r2
 800e89a:	b25b      	sxtb	r3, r3
 800e89c:	2248      	movs	r2, #72	@ 0x48
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	b25b      	sxtb	r3, r3
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	187b      	adds	r3, r7, r1
 800e8a6:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800e8a8:	187b      	adds	r3, r7, r1
 800e8aa:	785b      	ldrb	r3, [r3, #1]
 800e8ac:	2280      	movs	r2, #128	@ 0x80
 800e8ae:	4252      	negs	r2, r2
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	187b      	adds	r3, r7, r1
 800e8b6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e8b8:	e038      	b.n	800e92c <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800e8ba:	210c      	movs	r1, #12
 800e8bc:	187b      	adds	r3, r7, r1
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	224c      	movs	r2, #76	@ 0x4c
 800e8c2:	4393      	bics	r3, r2
 800e8c4:	b2da      	uxtb	r2, r3
 800e8c6:	187b      	adds	r3, r7, r1
 800e8c8:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800e8ca:	187b      	adds	r3, r7, r1
 800e8cc:	785b      	ldrb	r3, [r3, #1]
 800e8ce:	227f      	movs	r2, #127	@ 0x7f
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	187b      	adds	r3, r7, r1
 800e8d6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e8d8:	e028      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800e8da:	210c      	movs	r1, #12
 800e8dc:	187b      	adds	r3, r7, r1
 800e8de:	785b      	ldrb	r3, [r3, #1]
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	187b      	adds	r3, r7, r1
 800e8e8:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e8ea:	e01f      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800e8ec:	210c      	movs	r1, #12
 800e8ee:	187b      	adds	r3, r7, r1
 800e8f0:	785b      	ldrb	r3, [r3, #1]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	4393      	bics	r3, r2
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	187b      	adds	r3, r7, r1
 800e8fa:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e8fc:	e016      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800e8fe:	210c      	movs	r1, #12
 800e900:	187b      	adds	r3, r7, r1
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	b25b      	sxtb	r3, r3
 800e906:	2230      	movs	r2, #48	@ 0x30
 800e908:	4393      	bics	r3, r2
 800e90a:	b25b      	sxtb	r3, r3
 800e90c:	2220      	movs	r2, #32
 800e90e:	4313      	orrs	r3, r2
 800e910:	b25b      	sxtb	r3, r3
 800e912:	b2da      	uxtb	r2, r3
 800e914:	187b      	adds	r3, r7, r1
 800e916:	701a      	strb	r2, [r3, #0]
        }
        break;
 800e918:	e008      	b.n	800e92c <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800e91a:	210c      	movs	r1, #12
 800e91c:	187b      	adds	r3, r7, r1
 800e91e:	2201      	movs	r2, #1
 800e920:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800e922:	187b      	adds	r3, r7, r1
 800e924:	2203      	movs	r2, #3
 800e926:	705a      	strb	r2, [r3, #1]
        }
        break;
 800e928:	e000      	b.n	800e92c <_dwt_enableclocks+0x118>
        default:
        break;
 800e92a:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800e92c:	240c      	movs	r4, #12
 800e92e:	193b      	adds	r3, r7, r4
 800e930:	2201      	movs	r2, #1
 800e932:	2100      	movs	r1, #0
 800e934:	2036      	movs	r0, #54	@ 0x36
 800e936:	f7ff fd3a 	bl	800e3ae <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800e93a:	193b      	adds	r3, r7, r4
 800e93c:	3301      	adds	r3, #1
 800e93e:	2201      	movs	r2, #1
 800e940:	2101      	movs	r1, #1
 800e942:	2036      	movs	r0, #54	@ 0x36
 800e944:	f7ff fd33 	bl	800e3ae <dwt_writetodevice>

} // end _dwt_enableclocks()
 800e948:	46c0      	nop			@ (mov r8, r8)
 800e94a:	46bd      	mov	sp, r7
 800e94c:	b005      	add	sp, #20
 800e94e:	bd90      	pop	{r4, r7, pc}
 800e950:	08011be8 	.word	0x08011be8

0800e954 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800e954:	b580      	push	{r7, lr}
 800e956:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800e958:	2000      	movs	r0, #0
 800e95a:	f7ff ff5b 	bl	800e814 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800e95e:	2200      	movs	r2, #0
 800e960:	2104      	movs	r1, #4
 800e962:	2036      	movs	r0, #54	@ 0x36
 800e964:	f7ff fe51 	bl	800e60a <dwt_write16bitoffsetreg>
}
 800e968:	46c0      	nop			@ (mov r8, r8)
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b082      	sub	sp, #8
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	001a      	movs	r2, r3
 800e97a:	2101      	movs	r1, #1
 800e97c:	200a      	movs	r0, #10
 800e97e:	f7ff fe64 	bl	800e64a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800e982:	46c0      	nop			@ (mov r8, r8)
 800e984:	46bd      	mov	sp, r7
 800e986:	b002      	add	sp, #8
 800e988:	bd80      	pop	{r7, pc}
	...

0800e98c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800e98c:	b5b0      	push	{r4, r5, r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	0002      	movs	r2, r0
 800e994:	1dfb      	adds	r3, r7, #7
 800e996:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800e99c:	210b      	movs	r1, #11
 800e99e:	187b      	adds	r3, r7, r1
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800e9a4:	2308      	movs	r3, #8
 800e9a6:	18fb      	adds	r3, r7, r3
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800e9ac:	1dfb      	adds	r3, r7, #7
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2202      	movs	r2, #2
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	d006      	beq.n	800e9c4 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800e9b6:	187b      	adds	r3, r7, r1
 800e9b8:	2280      	movs	r2, #128	@ 0x80
 800e9ba:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800e9bc:	4b21      	ldr	r3, [pc, #132]	@ (800ea44 <dwt_starttx+0xb8>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800e9c4:	1dfb      	adds	r3, r7, #7
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	d027      	beq.n	800ea1e <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800e9ce:	200b      	movs	r0, #11
 800e9d0:	183b      	adds	r3, r7, r0
 800e9d2:	183a      	adds	r2, r7, r0
 800e9d4:	7812      	ldrb	r2, [r2, #0]
 800e9d6:	2106      	movs	r1, #6
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800e9dc:	183b      	adds	r3, r7, r0
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	001a      	movs	r2, r3
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	200d      	movs	r0, #13
 800e9e6:	f7ff fdfd 	bl	800e5e4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800e9ea:	2508      	movs	r5, #8
 800e9ec:	197c      	adds	r4, r7, r5
 800e9ee:	2103      	movs	r1, #3
 800e9f0:	200f      	movs	r0, #15
 800e9f2:	f7ff fdc0 	bl	800e576 <dwt_read16bitoffsetreg>
 800e9f6:	0003      	movs	r3, r0
 800e9f8:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800e9fa:	197b      	adds	r3, r7, r5
 800e9fc:	881a      	ldrh	r2, [r3, #0]
 800e9fe:	2381      	movs	r3, #129	@ 0x81
 800ea00:	00db      	lsls	r3, r3, #3
 800ea02:	4013      	ands	r3, r2
 800ea04:	d102      	bne.n	800ea0c <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800ea06:	2300      	movs	r3, #0
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e016      	b.n	800ea3a <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800ea0c:	2240      	movs	r2, #64	@ 0x40
 800ea0e:	2100      	movs	r1, #0
 800ea10:	200d      	movs	r0, #13
 800ea12:	f7ff fde7 	bl	800e5e4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800ea16:	2301      	movs	r3, #1
 800ea18:	425b      	negs	r3, r3
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	e00d      	b.n	800ea3a <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800ea1e:	200b      	movs	r0, #11
 800ea20:	183b      	adds	r3, r7, r0
 800ea22:	183a      	adds	r2, r7, r0
 800ea24:	7812      	ldrb	r2, [r2, #0]
 800ea26:	2102      	movs	r1, #2
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800ea2c:	183b      	adds	r3, r7, r0
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	001a      	movs	r2, r3
 800ea32:	2100      	movs	r1, #0
 800ea34:	200d      	movs	r0, #13
 800ea36:	f7ff fdd5 	bl	800e5e4 <dwt_write8bitoffsetreg>
    }

    return retval;
 800ea3a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	b004      	add	sp, #16
 800ea42:	bdb0      	pop	{r4, r5, r7, pc}
 800ea44:	200001f0 	.word	0x200001f0

0800ea48 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800ea48:	b5b0      	push	{r4, r5, r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	0002      	movs	r2, r0
 800ea50:	1dbb      	adds	r3, r7, #6
 800ea52:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800ea54:	250f      	movs	r5, #15
 800ea56:	197c      	adds	r4, r7, r5
 800ea58:	2103      	movs	r1, #3
 800ea5a:	2004      	movs	r0, #4
 800ea5c:	f7ff fdae 	bl	800e5bc <dwt_read8bitoffsetreg>
 800ea60:	0003      	movs	r3, r0
 800ea62:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800ea64:	1dbb      	adds	r3, r7, #6
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d01e      	beq.n	800eaaa <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800ea6c:	1dbb      	adds	r3, r7, #6
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	001a      	movs	r2, r3
 800ea72:	2100      	movs	r1, #0
 800ea74:	200c      	movs	r0, #12
 800ea76:	f7ff fdc8 	bl	800e60a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800ea7a:	0028      	movs	r0, r5
 800ea7c:	183b      	adds	r3, r7, r0
 800ea7e:	183a      	adds	r2, r7, r0
 800ea80:	7812      	ldrb	r2, [r2, #0]
 800ea82:	2110      	movs	r1, #16
 800ea84:	430a      	orrs	r2, r1
 800ea86:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800ea88:	4b15      	ldr	r3, [pc, #84]	@ (800eae0 <dwt_setrxtimeout+0x98>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	691a      	ldr	r2, [r3, #16]
 800ea8e:	4b14      	ldr	r3, [pc, #80]	@ (800eae0 <dwt_setrxtimeout+0x98>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2180      	movs	r1, #128	@ 0x80
 800ea94:	0549      	lsls	r1, r1, #21
 800ea96:	430a      	orrs	r2, r1
 800ea98:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800ea9a:	183b      	adds	r3, r7, r0
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	001a      	movs	r2, r3
 800eaa0:	2103      	movs	r1, #3
 800eaa2:	2004      	movs	r0, #4
 800eaa4:	f7ff fd9e 	bl	800e5e4 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800eaa8:	e015      	b.n	800ead6 <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800eaaa:	200f      	movs	r0, #15
 800eaac:	183b      	adds	r3, r7, r0
 800eaae:	183a      	adds	r2, r7, r0
 800eab0:	7812      	ldrb	r2, [r2, #0]
 800eab2:	2110      	movs	r1, #16
 800eab4:	438a      	bics	r2, r1
 800eab6:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800eab8:	4b09      	ldr	r3, [pc, #36]	@ (800eae0 <dwt_setrxtimeout+0x98>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	691a      	ldr	r2, [r3, #16]
 800eabe:	4b08      	ldr	r3, [pc, #32]	@ (800eae0 <dwt_setrxtimeout+0x98>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4908      	ldr	r1, [pc, #32]	@ (800eae4 <dwt_setrxtimeout+0x9c>)
 800eac4:	400a      	ands	r2, r1
 800eac6:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800eac8:	183b      	adds	r3, r7, r0
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	001a      	movs	r2, r3
 800eace:	2103      	movs	r1, #3
 800ead0:	2004      	movs	r0, #4
 800ead2:	f7ff fd87 	bl	800e5e4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800ead6:	46c0      	nop			@ (mov r8, r8)
 800ead8:	46bd      	mov	sp, r7
 800eada:	b004      	add	sp, #16
 800eadc:	bdb0      	pop	{r4, r5, r7, pc}
 800eade:	46c0      	nop			@ (mov r8, r8)
 800eae0:	200001f0 	.word	0x200001f0
 800eae4:	efffffff 	.word	0xefffffff

0800eae8 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800eaec:	22e0      	movs	r2, #224	@ 0xe0
 800eaee:	2103      	movs	r1, #3
 800eaf0:	2036      	movs	r0, #54	@ 0x36
 800eaf2:	f7ff fd77 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800eaf6:	22f0      	movs	r2, #240	@ 0xf0
 800eaf8:	2103      	movs	r1, #3
 800eafa:	2036      	movs	r0, #54	@ 0x36
 800eafc:	f7ff fd72 	bl	800e5e4 <dwt_write8bitoffsetreg>
}
 800eb00:	46c0      	nop			@ (mov r8, r8)
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
	...

0800eb08 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800eb0c:	f7ff ff22 	bl	800e954 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800eb10:	2200      	movs	r2, #0
 800eb12:	2100      	movs	r1, #0
 800eb14:	202c      	movs	r0, #44	@ 0x2c
 800eb16:	f7ff fd78 	bl	800e60a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2106      	movs	r1, #6
 800eb1e:	202c      	movs	r0, #44	@ 0x2c
 800eb20:	f7ff fd60 	bl	800e5e4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800eb24:	f7ff fdda 	bl	800e6dc <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2103      	movs	r1, #3
 800eb2c:	2036      	movs	r0, #54	@ 0x36
 800eb2e:	f7ff fd59 	bl	800e5e4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800eb32:	2001      	movs	r0, #1
 800eb34:	f000 f849 	bl	800ebca <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800eb38:	22f0      	movs	r2, #240	@ 0xf0
 800eb3a:	2103      	movs	r1, #3
 800eb3c:	2036      	movs	r0, #54	@ 0x36
 800eb3e:	f7ff fd51 	bl	800e5e4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800eb42:	4b03      	ldr	r3, [pc, #12]	@ (800eb50 <dwt_softreset+0x48>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2200      	movs	r2, #0
 800eb48:	755a      	strb	r2, [r3, #21]
}
 800eb4a:	46c0      	nop			@ (mov r8, r8)
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	200001f0 	.word	0x200001f0

0800eb54 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	0002      	movs	r2, r0
 800eb5c:	1dfb      	adds	r3, r7, #7
 800eb5e:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800eb60:	1dfb      	adds	r3, r7, #7
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	b25b      	sxtb	r3, r3
 800eb66:	221f      	movs	r2, #31
 800eb68:	4013      	ands	r3, r2
 800eb6a:	b25b      	sxtb	r3, r3
 800eb6c:	2260      	movs	r2, #96	@ 0x60
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	b25a      	sxtb	r2, r3
 800eb72:	210f      	movs	r1, #15
 800eb74:	187b      	adds	r3, r7, r1
 800eb76:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800eb78:	187b      	adds	r3, r7, r1
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	001a      	movs	r2, r3
 800eb7e:	210e      	movs	r1, #14
 800eb80:	202b      	movs	r0, #43	@ 0x2b
 800eb82:	f7ff fd2f 	bl	800e5e4 <dwt_write8bitoffsetreg>
}
 800eb86:	46c0      	nop			@ (mov r8, r8)
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	b004      	add	sp, #16
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800eb94:	f000 f9e2 	bl	800ef5c <port_GetEXT_IRQStatus>
 800eb98:	0003      	movs	r3, r0
 800eb9a:	607b      	str	r3, [r7, #4]

	if(s) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800eba2:	f000 f9cb 	bl	800ef3c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800eba6:	687b      	ldr	r3, [r7, #4]
}
 800eba8:	0018      	movs	r0, r3
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	b002      	add	sp, #8
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800ebbe:	f000 f9c5 	bl	800ef4c <port_EnableEXT_IRQ>
	}
}
 800ebc2:	46c0      	nop			@ (mov r8, r8)
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	b002      	add	sp, #8
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b082      	sub	sp, #8
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f000 f8e2 	bl	800ed9e <Sleep>
}
 800ebda:	46c0      	nop			@ (mov r8, r8)
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	b002      	add	sp, #8
 800ebe0:	bd80      	pop	{r7, pc}
	...

0800ebe4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800ebe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe6:	46d6      	mov	lr, sl
 800ebe8:	4646      	mov	r6, r8
 800ebea:	464f      	mov	r7, r9
 800ebec:	b5c0      	push	{r6, r7, lr}
 800ebee:	4682      	mov	sl, r0
 800ebf0:	4689      	mov	r9, r1
 800ebf2:	0015      	movs	r5, r2
 800ebf4:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800ebf6:	f7ff ffca 	bl	800eb8e <decamutexon>
 800ebfa:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800ebfc:	4c14      	ldr	r4, [pc, #80]	@ (800ec50 <writetospi+0x6c>)
 800ebfe:	0020      	movs	r0, r4
 800ec00:	f7f8 fd20 	bl	8007644 <HAL_SPI_GetState>
 800ec04:	2801      	cmp	r0, #1
 800ec06:	d1fa      	bne.n	800ebfe <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800ec08:	308f      	adds	r0, #143	@ 0x8f
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	2110      	movs	r1, #16
 800ec0e:	05c0      	lsls	r0, r0, #23
 800ec10:	f7f5 fb61 	bl	80042d6 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800ec14:	2301      	movs	r3, #1
 800ec16:	4652      	mov	r2, sl
 800ec18:	4649      	mov	r1, r9
 800ec1a:	0020      	movs	r0, r4
 800ec1c:	425b      	negs	r3, r3
 800ec1e:	f7f8 f87d 	bl	8006d1c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800ec22:	2301      	movs	r3, #1
 800ec24:	4641      	mov	r1, r8
 800ec26:	b2aa      	uxth	r2, r5
 800ec28:	425b      	negs	r3, r3
 800ec2a:	0020      	movs	r0, r4
 800ec2c:	f7f8 f876 	bl	8006d1c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800ec30:	2090      	movs	r0, #144	@ 0x90
 800ec32:	2201      	movs	r2, #1
 800ec34:	2110      	movs	r1, #16
 800ec36:	05c0      	lsls	r0, r0, #23
 800ec38:	f7f5 fb4d 	bl	80042d6 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800ec3c:	0030      	movs	r0, r6
 800ec3e:	f7ff ffb7 	bl	800ebb0 <decamutexoff>

    return 0;
} // end writetospi()
 800ec42:	2000      	movs	r0, #0
 800ec44:	bce0      	pop	{r5, r6, r7}
 800ec46:	46ba      	mov	sl, r7
 800ec48:	46b1      	mov	r9, r6
 800ec4a:	46a8      	mov	r8, r5
 800ec4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4e:	46c0      	nop			@ (mov r8, r8)
 800ec50:	2000041c 	.word	0x2000041c

0800ec54 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	46de      	mov	lr, fp
 800ec58:	4656      	mov	r6, sl
 800ec5a:	464d      	mov	r5, r9
 800ec5c:	4644      	mov	r4, r8
 800ec5e:	b570      	push	{r4, r5, r6, lr}
 800ec60:	4688      	mov	r8, r1
 800ec62:	0006      	movs	r6, r0
 800ec64:	4691      	mov	r9, r2
 800ec66:	469b      	mov	fp, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800ec68:	f7ff ff91 	bl	800eb8e <decamutexon>
 800ec6c:	4682      	mov	sl, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800ec6e:	4d18      	ldr	r5, [pc, #96]	@ (800ecd0 <readfromspi+0x7c>)
 800ec70:	0028      	movs	r0, r5
 800ec72:	f7f8 fce7 	bl	8007644 <HAL_SPI_GetState>
 800ec76:	2801      	cmp	r0, #1
 800ec78:	d1fa      	bne.n	800ec70 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800ec7a:	308f      	adds	r0, #143	@ 0x8f
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	2110      	movs	r1, #16
 800ec80:	05c0      	lsls	r0, r0, #23
 800ec82:	f7f5 fb28 	bl	80042d6 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800ec86:	2e00      	cmp	r6, #0
 800ec88:	d00b      	beq.n	800eca2 <readfromspi+0x4e>
 800ec8a:	2400      	movs	r4, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800ec8c:	4642      	mov	r2, r8
 800ec8e:	2301      	movs	r3, #1
 800ec90:	1911      	adds	r1, r2, r4
 800ec92:	0028      	movs	r0, r5
    for(i=0; i<headerLength; i++)
 800ec94:	3401      	adds	r4, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800ec96:	2201      	movs	r2, #1
 800ec98:	425b      	negs	r3, r3
 800ec9a:	f7f8 f83f 	bl	8006d1c <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800ec9e:	42b4      	cmp	r4, r6
 800eca0:	dbf4      	blt.n	800ec8c <readfromspi+0x38>
    //     }

    //     (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
    // }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 800eca2:	464b      	mov	r3, r9
 800eca4:	4659      	mov	r1, fp
 800eca6:	0028      	movs	r0, r5
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	2364      	movs	r3, #100	@ 0x64
 800ecac:	f7f8 f996 	bl	8006fdc <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800ecb0:	2090      	movs	r0, #144	@ 0x90
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	2110      	movs	r1, #16
 800ecb6:	05c0      	lsls	r0, r0, #23
 800ecb8:	f7f5 fb0d 	bl	80042d6 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800ecbc:	4650      	mov	r0, sl
 800ecbe:	f7ff ff77 	bl	800ebb0 <decamutexoff>

    return 0;
} // end readfromspi()
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	bc78      	pop	{r3, r4, r5, r6}
 800ecc6:	46b3      	mov	fp, r6
 800ecc8:	46aa      	mov	sl, r5
 800ecca:	46a1      	mov	r9, r4
 800eccc:	4698      	mov	r8, r3
 800ecce:	bd70      	pop	{r4, r5, r6, pc}
 800ecd0:	2000041c 	.word	0x2000041c

0800ecd4 <__NVIC_EnableIRQ>:
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	0002      	movs	r2, r0
 800ecdc:	1dfb      	adds	r3, r7, #7
 800ecde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ece0:	1dfb      	adds	r3, r7, #7
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	2b7f      	cmp	r3, #127	@ 0x7f
 800ece6:	d809      	bhi.n	800ecfc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ece8:	1dfb      	adds	r3, r7, #7
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	001a      	movs	r2, r3
 800ecee:	231f      	movs	r3, #31
 800ecf0:	401a      	ands	r2, r3
 800ecf2:	4b04      	ldr	r3, [pc, #16]	@ (800ed04 <__NVIC_EnableIRQ+0x30>)
 800ecf4:	2101      	movs	r1, #1
 800ecf6:	4091      	lsls	r1, r2
 800ecf8:	000a      	movs	r2, r1
 800ecfa:	601a      	str	r2, [r3, #0]
}
 800ecfc:	46c0      	nop			@ (mov r8, r8)
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	b002      	add	sp, #8
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	e000e100 	.word	0xe000e100

0800ed08 <__NVIC_DisableIRQ>:
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	0002      	movs	r2, r0
 800ed10:	1dfb      	adds	r3, r7, #7
 800ed12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ed14:	1dfb      	adds	r3, r7, #7
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed1a:	d810      	bhi.n	800ed3e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ed1c:	1dfb      	adds	r3, r7, #7
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	001a      	movs	r2, r3
 800ed22:	231f      	movs	r3, #31
 800ed24:	4013      	ands	r3, r2
 800ed26:	4908      	ldr	r1, [pc, #32]	@ (800ed48 <__NVIC_DisableIRQ+0x40>)
 800ed28:	2201      	movs	r2, #1
 800ed2a:	409a      	lsls	r2, r3
 800ed2c:	0013      	movs	r3, r2
 800ed2e:	2280      	movs	r2, #128	@ 0x80
 800ed30:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ed32:	f3bf 8f4f 	dsb	sy
}
 800ed36:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800ed38:	f3bf 8f6f 	isb	sy
}
 800ed3c:	46c0      	nop			@ (mov r8, r8)
}
 800ed3e:	46c0      	nop			@ (mov r8, r8)
 800ed40:	46bd      	mov	sp, r7
 800ed42:	b002      	add	sp, #8
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	46c0      	nop			@ (mov r8, r8)
 800ed48:	e000e100 	.word	0xe000e100

0800ed4c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800ed54:	2300      	movs	r3, #0
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	e014      	b.n	800ed84 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60bb      	str	r3, [r7, #8]
 800ed5e:	e004      	b.n	800ed6a <usleep+0x1e>
        {
            __NOP();
 800ed60:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800ed62:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	3301      	adds	r3, #1
 800ed68:	60bb      	str	r3, [r7, #8]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	0fd8      	lsrs	r0, r3, #31
 800ed70:	17d1      	asrs	r1, r2, #31
 800ed72:	429a      	cmp	r2, r3
 800ed74:	4148      	adcs	r0, r1
 800ed76:	0003      	movs	r3, r0
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1f0      	bne.n	800ed60 <usleep+0x14>
    for(i=0;i<usec;i++)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3301      	adds	r3, #1
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	419b      	sbcs	r3, r3
 800ed8c:	425b      	negs	r3, r3
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1e2      	bne.n	800ed5a <usleep+0xe>
        }
    }
    return 0;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	0018      	movs	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	b004      	add	sp, #16
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	0018      	movs	r0, r3
 800edaa:	f7f4 fb67 	bl	800347c <HAL_Delay>
}
 800edae:	46c0      	nop			@ (mov r8, r8)
 800edb0:	46bd      	mov	sp, r7
 800edb2:	b002      	add	sp, #8
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800edc0:	4a09      	ldr	r2, [pc, #36]	@ (800ede8 <EXTI_GetITEnStatus+0x30>)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	095b      	lsrs	r3, r3, #5
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	211f      	movs	r1, #31
 800edce:	400b      	ands	r3, r1
 800edd0:	40da      	lsrs	r2, r3
 800edd2:	0013      	movs	r3, r2
 800edd4:	2201      	movs	r2, #1
 800edd6:	4013      	ands	r3, r2
 800edd8:	1e5a      	subs	r2, r3, #1
 800edda:	4193      	sbcs	r3, r2
 800eddc:	b2db      	uxtb	r3, r3
}
 800edde:	0018      	movs	r0, r3
 800ede0:	46bd      	mov	sp, r7
 800ede2:	b002      	add	sp, #8
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	e000e100 	.word	0xe000e100

0800edec <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800edf2:	1d3b      	adds	r3, r7, #4
 800edf4:	2204      	movs	r2, #4
 800edf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800edf8:	1d3b      	adds	r3, r7, #4
 800edfa:	2211      	movs	r2, #17
 800edfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edfe:	1d3b      	adds	r3, r7, #4
 800ee00:	2200      	movs	r2, #0
 800ee02:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ee04:	1d3a      	adds	r2, r7, #4
 800ee06:	2390      	movs	r3, #144	@ 0x90
 800ee08:	05db      	lsls	r3, r3, #23
 800ee0a:	0011      	movs	r1, r2
 800ee0c:	0018      	movs	r0, r3
 800ee0e:	f7f5 f8cd 	bl	8003fac <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800ee12:	2390      	movs	r3, #144	@ 0x90
 800ee14:	05db      	lsls	r3, r3, #23
 800ee16:	2200      	movs	r2, #0
 800ee18:	2104      	movs	r1, #4
 800ee1a:	0018      	movs	r0, r3
 800ee1c:	f7f5 fa5b 	bl	80042d6 <HAL_GPIO_WritePin>

    usleep(1);
 800ee20:	2001      	movs	r0, #1
 800ee22:	f7ff ff93 	bl	800ed4c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800ee26:	2000      	movs	r0, #0
 800ee28:	f000 f807 	bl	800ee3a <setup_DW1000RSTnIRQ>



    Sleep(2);
 800ee2c:	2002      	movs	r0, #2
 800ee2e:	f7ff ffb6 	bl	800ed9e <Sleep>
}
 800ee32:	46c0      	nop			@ (mov r8, r8)
 800ee34:	46bd      	mov	sp, r7
 800ee36:	b006      	add	sp, #24
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b088      	sub	sp, #32
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01a      	beq.n	800ee7e <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800ee48:	210c      	movs	r1, #12
 800ee4a:	187b      	adds	r3, r7, r1
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ee50:	187b      	adds	r3, r7, r1
 800ee52:	2288      	movs	r2, #136	@ 0x88
 800ee54:	0352      	lsls	r2, r2, #13
 800ee56:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee58:	187b      	adds	r3, r7, r1
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ee5e:	187a      	adds	r2, r7, r1
 800ee60:	2390      	movs	r3, #144	@ 0x90
 800ee62:	05db      	lsls	r3, r3, #23
 800ee64:	0011      	movs	r1, r2
 800ee66:	0018      	movs	r0, r3
 800ee68:	f7f5 f8a0 	bl	8003fac <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800ee6c:	2006      	movs	r0, #6
 800ee6e:	f7f4 fe5a 	bl	8003b26 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800ee72:	2200      	movs	r2, #0
 800ee74:	2105      	movs	r1, #5
 800ee76:	2006      	movs	r0, #6
 800ee78:	f7f4 fe40 	bl	8003afc <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800ee7c:	e01d      	b.n	800eeba <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800ee7e:	2006      	movs	r0, #6
 800ee80:	f7f4 fe61 	bl	8003b46 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800ee84:	210c      	movs	r1, #12
 800ee86:	187b      	adds	r3, r7, r1
 800ee88:	2204      	movs	r2, #4
 800ee8a:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ee8c:	187b      	adds	r3, r7, r1
 800ee8e:	2211      	movs	r2, #17
 800ee90:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee92:	187b      	adds	r3, r7, r1
 800ee94:	2200      	movs	r2, #0
 800ee96:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ee98:	187b      	adds	r3, r7, r1
 800ee9a:	2203      	movs	r2, #3
 800ee9c:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800ee9e:	187a      	adds	r2, r7, r1
 800eea0:	2390      	movs	r3, #144	@ 0x90
 800eea2:	05db      	lsls	r3, r3, #23
 800eea4:	0011      	movs	r1, r2
 800eea6:	0018      	movs	r0, r3
 800eea8:	f7f5 f880 	bl	8003fac <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800eeac:	2390      	movs	r3, #144	@ 0x90
 800eeae:	05db      	lsls	r3, r3, #23
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	2104      	movs	r1, #4
 800eeb4:	0018      	movs	r0, r3
 800eeb6:	f7f5 fa0e 	bl	80042d6 <HAL_GPIO_WritePin>
}
 800eeba:	46c0      	nop			@ (mov r8, r8)
 800eebc:	46bd      	mov	sp, r7
 800eebe:	b008      	add	sp, #32
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800eec8:	4b04      	ldr	r3, [pc, #16]	@ (800eedc <port_set_dw1000_slowrate+0x18>)
 800eeca:	2218      	movs	r2, #24
 800eecc:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800eece:	4b03      	ldr	r3, [pc, #12]	@ (800eedc <port_set_dw1000_slowrate+0x18>)
 800eed0:	0018      	movs	r0, r3
 800eed2:	f7f7 fe6b 	bl	8006bac <HAL_SPI_Init>
}
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	2000041c 	.word	0x2000041c

0800eee0 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eee4:	4b04      	ldr	r3, [pc, #16]	@ (800eef8 <port_set_dw1000_fastrate+0x18>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800eeea:	4b03      	ldr	r3, [pc, #12]	@ (800eef8 <port_set_dw1000_fastrate+0x18>)
 800eeec:	0018      	movs	r0, r3
 800eeee:	f7f7 fe5d 	bl	8006bac <HAL_SPI_Init>
}
 800eef2:	46c0      	nop			@ (mov r8, r8)
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	2000041c 	.word	0x2000041c

0800eefc <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	0002      	movs	r2, r0
 800ef04:	1dbb      	adds	r3, r7, #6
 800ef06:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800ef08:	1dbb      	adds	r3, r7, #6
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	2b20      	cmp	r3, #32
 800ef0e:	d101      	bne.n	800ef14 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800ef10:	f000 f804 	bl	800ef1c <process_deca_irq>
    }
}
 800ef14:	46c0      	nop			@ (mov r8, r8)
 800ef16:	46bd      	mov	sp, r7
 800ef18:	b002      	add	sp, #8
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800ef20:	e002      	b.n	800ef28 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800ef22:	4b05      	ldr	r3, [pc, #20]	@ (800ef38 <process_deca_irq+0x1c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800ef28:	f000 f822 	bl	800ef70 <port_CheckEXT_IRQ>
 800ef2c:	1e03      	subs	r3, r0, #0
 800ef2e:	d1f8      	bne.n	800ef22 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800ef30:	46c0      	nop			@ (mov r8, r8)
 800ef32:	46c0      	nop			@ (mov r8, r8)
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	20001c68 	.word	0x20001c68

0800ef3c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800ef40:	2007      	movs	r0, #7
 800ef42:	f7ff fee1 	bl	800ed08 <__NVIC_DisableIRQ>
}
 800ef46:	46c0      	nop			@ (mov r8, r8)
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800ef50:	2007      	movs	r0, #7
 800ef52:	f7ff febf 	bl	800ecd4 <__NVIC_EnableIRQ>
}
 800ef56:	46c0      	nop			@ (mov r8, r8)
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800ef60:	2007      	movs	r0, #7
 800ef62:	f7ff ff29 	bl	800edb8 <EXTI_GetITEnStatus>
 800ef66:	0003      	movs	r3, r0
}
 800ef68:	0018      	movs	r0, r3
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
	...

0800ef70 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800ef74:	4b04      	ldr	r3, [pc, #16]	@ (800ef88 <port_CheckEXT_IRQ+0x18>)
 800ef76:	2120      	movs	r1, #32
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f7f5 f98f 	bl	800429c <HAL_GPIO_ReadPin>
 800ef7e:	0003      	movs	r3, r0
}
 800ef80:	0018      	movs	r0, r3
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	48000400 	.word	0x48000400

0800ef8c <__cvt>:
 800ef8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8e:	001f      	movs	r7, r3
 800ef90:	2300      	movs	r3, #0
 800ef92:	0016      	movs	r6, r2
 800ef94:	b08b      	sub	sp, #44	@ 0x2c
 800ef96:	429f      	cmp	r7, r3
 800ef98:	da04      	bge.n	800efa4 <__cvt+0x18>
 800ef9a:	2180      	movs	r1, #128	@ 0x80
 800ef9c:	0609      	lsls	r1, r1, #24
 800ef9e:	187b      	adds	r3, r7, r1
 800efa0:	001f      	movs	r7, r3
 800efa2:	232d      	movs	r3, #45	@ 0x2d
 800efa4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800efa6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800efa8:	7013      	strb	r3, [r2, #0]
 800efaa:	2320      	movs	r3, #32
 800efac:	2203      	movs	r2, #3
 800efae:	439d      	bics	r5, r3
 800efb0:	2d46      	cmp	r5, #70	@ 0x46
 800efb2:	d007      	beq.n	800efc4 <__cvt+0x38>
 800efb4:	002b      	movs	r3, r5
 800efb6:	3b45      	subs	r3, #69	@ 0x45
 800efb8:	4259      	negs	r1, r3
 800efba:	414b      	adcs	r3, r1
 800efbc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800efbe:	3a01      	subs	r2, #1
 800efc0:	18cb      	adds	r3, r1, r3
 800efc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800efc4:	ab09      	add	r3, sp, #36	@ 0x24
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	ab08      	add	r3, sp, #32
 800efca:	9303      	str	r3, [sp, #12]
 800efcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efce:	9200      	str	r2, [sp, #0]
 800efd0:	9302      	str	r3, [sp, #8]
 800efd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efd4:	0032      	movs	r2, r6
 800efd6:	9301      	str	r3, [sp, #4]
 800efd8:	003b      	movs	r3, r7
 800efda:	f000 fe81 	bl	800fce0 <_dtoa_r>
 800efde:	0004      	movs	r4, r0
 800efe0:	2d47      	cmp	r5, #71	@ 0x47
 800efe2:	d11b      	bne.n	800f01c <__cvt+0x90>
 800efe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800efe6:	07db      	lsls	r3, r3, #31
 800efe8:	d511      	bpl.n	800f00e <__cvt+0x82>
 800efea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efec:	18c3      	adds	r3, r0, r3
 800efee:	9307      	str	r3, [sp, #28]
 800eff0:	2200      	movs	r2, #0
 800eff2:	2300      	movs	r3, #0
 800eff4:	0030      	movs	r0, r6
 800eff6:	0039      	movs	r1, r7
 800eff8:	f7f1 fa28 	bl	800044c <__aeabi_dcmpeq>
 800effc:	2800      	cmp	r0, #0
 800effe:	d001      	beq.n	800f004 <__cvt+0x78>
 800f000:	9b07      	ldr	r3, [sp, #28]
 800f002:	9309      	str	r3, [sp, #36]	@ 0x24
 800f004:	2230      	movs	r2, #48	@ 0x30
 800f006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f008:	9907      	ldr	r1, [sp, #28]
 800f00a:	428b      	cmp	r3, r1
 800f00c:	d320      	bcc.n	800f050 <__cvt+0xc4>
 800f00e:	0020      	movs	r0, r4
 800f010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f012:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f014:	1b1b      	subs	r3, r3, r4
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	b00b      	add	sp, #44	@ 0x2c
 800f01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f01c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f01e:	18c3      	adds	r3, r0, r3
 800f020:	9307      	str	r3, [sp, #28]
 800f022:	2d46      	cmp	r5, #70	@ 0x46
 800f024:	d1e4      	bne.n	800eff0 <__cvt+0x64>
 800f026:	7803      	ldrb	r3, [r0, #0]
 800f028:	2b30      	cmp	r3, #48	@ 0x30
 800f02a:	d10c      	bne.n	800f046 <__cvt+0xba>
 800f02c:	2200      	movs	r2, #0
 800f02e:	2300      	movs	r3, #0
 800f030:	0030      	movs	r0, r6
 800f032:	0039      	movs	r1, r7
 800f034:	f7f1 fa0a 	bl	800044c <__aeabi_dcmpeq>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d104      	bne.n	800f046 <__cvt+0xba>
 800f03c:	2301      	movs	r3, #1
 800f03e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f040:	1a9b      	subs	r3, r3, r2
 800f042:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f044:	6013      	str	r3, [r2, #0]
 800f046:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f048:	9a07      	ldr	r2, [sp, #28]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	18d3      	adds	r3, r2, r3
 800f04e:	e7ce      	b.n	800efee <__cvt+0x62>
 800f050:	1c59      	adds	r1, r3, #1
 800f052:	9109      	str	r1, [sp, #36]	@ 0x24
 800f054:	701a      	strb	r2, [r3, #0]
 800f056:	e7d6      	b.n	800f006 <__cvt+0x7a>

0800f058 <__exponent>:
 800f058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f05a:	232b      	movs	r3, #43	@ 0x2b
 800f05c:	0005      	movs	r5, r0
 800f05e:	000c      	movs	r4, r1
 800f060:	b085      	sub	sp, #20
 800f062:	7002      	strb	r2, [r0, #0]
 800f064:	2900      	cmp	r1, #0
 800f066:	da01      	bge.n	800f06c <__exponent+0x14>
 800f068:	424c      	negs	r4, r1
 800f06a:	3302      	adds	r3, #2
 800f06c:	706b      	strb	r3, [r5, #1]
 800f06e:	2c09      	cmp	r4, #9
 800f070:	dd2c      	ble.n	800f0cc <__exponent+0x74>
 800f072:	ab02      	add	r3, sp, #8
 800f074:	1dde      	adds	r6, r3, #7
 800f076:	0020      	movs	r0, r4
 800f078:	210a      	movs	r1, #10
 800f07a:	f7f1 f9d1 	bl	8000420 <__aeabi_idivmod>
 800f07e:	0037      	movs	r7, r6
 800f080:	3130      	adds	r1, #48	@ 0x30
 800f082:	3e01      	subs	r6, #1
 800f084:	0020      	movs	r0, r4
 800f086:	7031      	strb	r1, [r6, #0]
 800f088:	210a      	movs	r1, #10
 800f08a:	9401      	str	r4, [sp, #4]
 800f08c:	f7f1 f8e2 	bl	8000254 <__divsi3>
 800f090:	9b01      	ldr	r3, [sp, #4]
 800f092:	0004      	movs	r4, r0
 800f094:	2b63      	cmp	r3, #99	@ 0x63
 800f096:	dcee      	bgt.n	800f076 <__exponent+0x1e>
 800f098:	1eba      	subs	r2, r7, #2
 800f09a:	1ca8      	adds	r0, r5, #2
 800f09c:	0001      	movs	r1, r0
 800f09e:	0013      	movs	r3, r2
 800f0a0:	3430      	adds	r4, #48	@ 0x30
 800f0a2:	7014      	strb	r4, [r2, #0]
 800f0a4:	ac02      	add	r4, sp, #8
 800f0a6:	3407      	adds	r4, #7
 800f0a8:	429c      	cmp	r4, r3
 800f0aa:	d80a      	bhi.n	800f0c2 <__exponent+0x6a>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	42a2      	cmp	r2, r4
 800f0b0:	d803      	bhi.n	800f0ba <__exponent+0x62>
 800f0b2:	3309      	adds	r3, #9
 800f0b4:	aa02      	add	r2, sp, #8
 800f0b6:	189b      	adds	r3, r3, r2
 800f0b8:	1bdb      	subs	r3, r3, r7
 800f0ba:	18c0      	adds	r0, r0, r3
 800f0bc:	1b40      	subs	r0, r0, r5
 800f0be:	b005      	add	sp, #20
 800f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c2:	781c      	ldrb	r4, [r3, #0]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	700c      	strb	r4, [r1, #0]
 800f0c8:	3101      	adds	r1, #1
 800f0ca:	e7eb      	b.n	800f0a4 <__exponent+0x4c>
 800f0cc:	2330      	movs	r3, #48	@ 0x30
 800f0ce:	18e4      	adds	r4, r4, r3
 800f0d0:	70ab      	strb	r3, [r5, #2]
 800f0d2:	1d28      	adds	r0, r5, #4
 800f0d4:	70ec      	strb	r4, [r5, #3]
 800f0d6:	e7f1      	b.n	800f0bc <__exponent+0x64>

0800f0d8 <_printf_float>:
 800f0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0da:	b097      	sub	sp, #92	@ 0x5c
 800f0dc:	000d      	movs	r5, r1
 800f0de:	920a      	str	r2, [sp, #40]	@ 0x28
 800f0e0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f0e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0e4:	9009      	str	r0, [sp, #36]	@ 0x24
 800f0e6:	f000 fcd9 	bl	800fa9c <_localeconv_r>
 800f0ea:	6803      	ldr	r3, [r0, #0]
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800f0f0:	f7f1 f80a 	bl	8000108 <strlen>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f0f8:	9314      	str	r3, [sp, #80]	@ 0x50
 800f0fa:	7e2b      	ldrb	r3, [r5, #24]
 800f0fc:	2207      	movs	r2, #7
 800f0fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	930e      	str	r3, [sp, #56]	@ 0x38
 800f104:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	05c9      	lsls	r1, r1, #23
 800f10a:	d545      	bpl.n	800f198 <_printf_float+0xc0>
 800f10c:	189b      	adds	r3, r3, r2
 800f10e:	4393      	bics	r3, r2
 800f110:	001a      	movs	r2, r3
 800f112:	3208      	adds	r2, #8
 800f114:	6022      	str	r2, [r4, #0]
 800f116:	2201      	movs	r2, #1
 800f118:	681e      	ldr	r6, [r3, #0]
 800f11a:	685f      	ldr	r7, [r3, #4]
 800f11c:	007b      	lsls	r3, r7, #1
 800f11e:	085b      	lsrs	r3, r3, #1
 800f120:	9311      	str	r3, [sp, #68]	@ 0x44
 800f122:	9610      	str	r6, [sp, #64]	@ 0x40
 800f124:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f126:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f128:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f12a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f12c:	4ba7      	ldr	r3, [pc, #668]	@ (800f3cc <_printf_float+0x2f4>)
 800f12e:	4252      	negs	r2, r2
 800f130:	f7f2 ffc6 	bl	80020c0 <__aeabi_dcmpun>
 800f134:	2800      	cmp	r0, #0
 800f136:	d131      	bne.n	800f19c <_printf_float+0xc4>
 800f138:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f13a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f13c:	2201      	movs	r2, #1
 800f13e:	4ba3      	ldr	r3, [pc, #652]	@ (800f3cc <_printf_float+0x2f4>)
 800f140:	4252      	negs	r2, r2
 800f142:	f7f1 f993 	bl	800046c <__aeabi_dcmple>
 800f146:	2800      	cmp	r0, #0
 800f148:	d128      	bne.n	800f19c <_printf_float+0xc4>
 800f14a:	2200      	movs	r2, #0
 800f14c:	2300      	movs	r3, #0
 800f14e:	0030      	movs	r0, r6
 800f150:	0039      	movs	r1, r7
 800f152:	f7f1 f981 	bl	8000458 <__aeabi_dcmplt>
 800f156:	2800      	cmp	r0, #0
 800f158:	d003      	beq.n	800f162 <_printf_float+0x8a>
 800f15a:	002b      	movs	r3, r5
 800f15c:	222d      	movs	r2, #45	@ 0x2d
 800f15e:	3343      	adds	r3, #67	@ 0x43
 800f160:	701a      	strb	r2, [r3, #0]
 800f162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f164:	4f9a      	ldr	r7, [pc, #616]	@ (800f3d0 <_printf_float+0x2f8>)
 800f166:	2b47      	cmp	r3, #71	@ 0x47
 800f168:	d900      	bls.n	800f16c <_printf_float+0x94>
 800f16a:	4f9a      	ldr	r7, [pc, #616]	@ (800f3d4 <_printf_float+0x2fc>)
 800f16c:	2303      	movs	r3, #3
 800f16e:	2400      	movs	r4, #0
 800f170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f172:	612b      	str	r3, [r5, #16]
 800f174:	3301      	adds	r3, #1
 800f176:	439a      	bics	r2, r3
 800f178:	602a      	str	r2, [r5, #0]
 800f17a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f17c:	0029      	movs	r1, r5
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f184:	aa15      	add	r2, sp, #84	@ 0x54
 800f186:	f000 f9e5 	bl	800f554 <_printf_common>
 800f18a:	3001      	adds	r0, #1
 800f18c:	d000      	beq.n	800f190 <_printf_float+0xb8>
 800f18e:	e09f      	b.n	800f2d0 <_printf_float+0x1f8>
 800f190:	2001      	movs	r0, #1
 800f192:	4240      	negs	r0, r0
 800f194:	b017      	add	sp, #92	@ 0x5c
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f198:	3307      	adds	r3, #7
 800f19a:	e7b8      	b.n	800f10e <_printf_float+0x36>
 800f19c:	0032      	movs	r2, r6
 800f19e:	003b      	movs	r3, r7
 800f1a0:	0030      	movs	r0, r6
 800f1a2:	0039      	movs	r1, r7
 800f1a4:	f7f2 ff8c 	bl	80020c0 <__aeabi_dcmpun>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d00b      	beq.n	800f1c4 <_printf_float+0xec>
 800f1ac:	2f00      	cmp	r7, #0
 800f1ae:	da03      	bge.n	800f1b8 <_printf_float+0xe0>
 800f1b0:	002b      	movs	r3, r5
 800f1b2:	222d      	movs	r2, #45	@ 0x2d
 800f1b4:	3343      	adds	r3, #67	@ 0x43
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1ba:	4f87      	ldr	r7, [pc, #540]	@ (800f3d8 <_printf_float+0x300>)
 800f1bc:	2b47      	cmp	r3, #71	@ 0x47
 800f1be:	d9d5      	bls.n	800f16c <_printf_float+0x94>
 800f1c0:	4f86      	ldr	r7, [pc, #536]	@ (800f3dc <_printf_float+0x304>)
 800f1c2:	e7d3      	b.n	800f16c <_printf_float+0x94>
 800f1c4:	2220      	movs	r2, #32
 800f1c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f1c8:	686b      	ldr	r3, [r5, #4]
 800f1ca:	4394      	bics	r4, r2
 800f1cc:	1c5a      	adds	r2, r3, #1
 800f1ce:	d146      	bne.n	800f25e <_printf_float+0x186>
 800f1d0:	3307      	adds	r3, #7
 800f1d2:	606b      	str	r3, [r5, #4]
 800f1d4:	2380      	movs	r3, #128	@ 0x80
 800f1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	2200      	movs	r2, #0
 800f1de:	602b      	str	r3, [r5, #0]
 800f1e0:	9206      	str	r2, [sp, #24]
 800f1e2:	aa14      	add	r2, sp, #80	@ 0x50
 800f1e4:	9205      	str	r2, [sp, #20]
 800f1e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f1e8:	a90a      	add	r1, sp, #40	@ 0x28
 800f1ea:	9204      	str	r2, [sp, #16]
 800f1ec:	aa13      	add	r2, sp, #76	@ 0x4c
 800f1ee:	9203      	str	r2, [sp, #12]
 800f1f0:	2223      	movs	r2, #35	@ 0x23
 800f1f2:	1852      	adds	r2, r2, r1
 800f1f4:	9202      	str	r2, [sp, #8]
 800f1f6:	9301      	str	r3, [sp, #4]
 800f1f8:	686b      	ldr	r3, [r5, #4]
 800f1fa:	0032      	movs	r2, r6
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f200:	003b      	movs	r3, r7
 800f202:	f7ff fec3 	bl	800ef8c <__cvt>
 800f206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f208:	0007      	movs	r7, r0
 800f20a:	2c47      	cmp	r4, #71	@ 0x47
 800f20c:	d12d      	bne.n	800f26a <_printf_float+0x192>
 800f20e:	1cd3      	adds	r3, r2, #3
 800f210:	db02      	blt.n	800f218 <_printf_float+0x140>
 800f212:	686b      	ldr	r3, [r5, #4]
 800f214:	429a      	cmp	r2, r3
 800f216:	dd48      	ble.n	800f2aa <_printf_float+0x1d2>
 800f218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f21a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f21c:	3b02      	subs	r3, #2
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	930c      	str	r3, [sp, #48]	@ 0x30
 800f222:	0028      	movs	r0, r5
 800f224:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f226:	3901      	subs	r1, #1
 800f228:	3050      	adds	r0, #80	@ 0x50
 800f22a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f22c:	f7ff ff14 	bl	800f058 <__exponent>
 800f230:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f232:	0004      	movs	r4, r0
 800f234:	1813      	adds	r3, r2, r0
 800f236:	612b      	str	r3, [r5, #16]
 800f238:	2a01      	cmp	r2, #1
 800f23a:	dc02      	bgt.n	800f242 <_printf_float+0x16a>
 800f23c:	682a      	ldr	r2, [r5, #0]
 800f23e:	07d2      	lsls	r2, r2, #31
 800f240:	d501      	bpl.n	800f246 <_printf_float+0x16e>
 800f242:	3301      	adds	r3, #1
 800f244:	612b      	str	r3, [r5, #16]
 800f246:	2323      	movs	r3, #35	@ 0x23
 800f248:	aa0a      	add	r2, sp, #40	@ 0x28
 800f24a:	189b      	adds	r3, r3, r2
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d100      	bne.n	800f254 <_printf_float+0x17c>
 800f252:	e792      	b.n	800f17a <_printf_float+0xa2>
 800f254:	002b      	movs	r3, r5
 800f256:	222d      	movs	r2, #45	@ 0x2d
 800f258:	3343      	adds	r3, #67	@ 0x43
 800f25a:	701a      	strb	r2, [r3, #0]
 800f25c:	e78d      	b.n	800f17a <_printf_float+0xa2>
 800f25e:	2c47      	cmp	r4, #71	@ 0x47
 800f260:	d1b8      	bne.n	800f1d4 <_printf_float+0xfc>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1b6      	bne.n	800f1d4 <_printf_float+0xfc>
 800f266:	3301      	adds	r3, #1
 800f268:	e7b3      	b.n	800f1d2 <_printf_float+0xfa>
 800f26a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f26c:	0011      	movs	r1, r2
 800f26e:	2b65      	cmp	r3, #101	@ 0x65
 800f270:	d9d7      	bls.n	800f222 <_printf_float+0x14a>
 800f272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f274:	2b66      	cmp	r3, #102	@ 0x66
 800f276:	d11a      	bne.n	800f2ae <_printf_float+0x1d6>
 800f278:	686b      	ldr	r3, [r5, #4]
 800f27a:	2a00      	cmp	r2, #0
 800f27c:	dd09      	ble.n	800f292 <_printf_float+0x1ba>
 800f27e:	612a      	str	r2, [r5, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d102      	bne.n	800f28a <_printf_float+0x1b2>
 800f284:	6829      	ldr	r1, [r5, #0]
 800f286:	07c9      	lsls	r1, r1, #31
 800f288:	d50b      	bpl.n	800f2a2 <_printf_float+0x1ca>
 800f28a:	3301      	adds	r3, #1
 800f28c:	189b      	adds	r3, r3, r2
 800f28e:	612b      	str	r3, [r5, #16]
 800f290:	e007      	b.n	800f2a2 <_printf_float+0x1ca>
 800f292:	2b00      	cmp	r3, #0
 800f294:	d103      	bne.n	800f29e <_printf_float+0x1c6>
 800f296:	2201      	movs	r2, #1
 800f298:	6829      	ldr	r1, [r5, #0]
 800f29a:	4211      	tst	r1, r2
 800f29c:	d000      	beq.n	800f2a0 <_printf_float+0x1c8>
 800f29e:	1c9a      	adds	r2, r3, #2
 800f2a0:	612a      	str	r2, [r5, #16]
 800f2a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2a4:	2400      	movs	r4, #0
 800f2a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f2a8:	e7cd      	b.n	800f246 <_printf_float+0x16e>
 800f2aa:	2367      	movs	r3, #103	@ 0x67
 800f2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f2b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f2b2:	4299      	cmp	r1, r3
 800f2b4:	db06      	blt.n	800f2c4 <_printf_float+0x1ec>
 800f2b6:	682b      	ldr	r3, [r5, #0]
 800f2b8:	6129      	str	r1, [r5, #16]
 800f2ba:	07db      	lsls	r3, r3, #31
 800f2bc:	d5f1      	bpl.n	800f2a2 <_printf_float+0x1ca>
 800f2be:	3101      	adds	r1, #1
 800f2c0:	6129      	str	r1, [r5, #16]
 800f2c2:	e7ee      	b.n	800f2a2 <_printf_float+0x1ca>
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	2900      	cmp	r1, #0
 800f2c8:	dce0      	bgt.n	800f28c <_printf_float+0x1b4>
 800f2ca:	1892      	adds	r2, r2, r2
 800f2cc:	1a52      	subs	r2, r2, r1
 800f2ce:	e7dd      	b.n	800f28c <_printf_float+0x1b4>
 800f2d0:	682a      	ldr	r2, [r5, #0]
 800f2d2:	0553      	lsls	r3, r2, #21
 800f2d4:	d408      	bmi.n	800f2e8 <_printf_float+0x210>
 800f2d6:	692b      	ldr	r3, [r5, #16]
 800f2d8:	003a      	movs	r2, r7
 800f2da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f2dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f2e0:	47a0      	blx	r4
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	d129      	bne.n	800f33a <_printf_float+0x262>
 800f2e6:	e753      	b.n	800f190 <_printf_float+0xb8>
 800f2e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2ea:	2b65      	cmp	r3, #101	@ 0x65
 800f2ec:	d800      	bhi.n	800f2f0 <_printf_float+0x218>
 800f2ee:	e0da      	b.n	800f4a6 <_printf_float+0x3ce>
 800f2f0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f2f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f7f1 f8a8 	bl	800044c <__aeabi_dcmpeq>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d033      	beq.n	800f368 <_printf_float+0x290>
 800f300:	2301      	movs	r3, #1
 800f302:	4a37      	ldr	r2, [pc, #220]	@ (800f3e0 <_printf_float+0x308>)
 800f304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f308:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f30a:	47a0      	blx	r4
 800f30c:	3001      	adds	r0, #1
 800f30e:	d100      	bne.n	800f312 <_printf_float+0x23a>
 800f310:	e73e      	b.n	800f190 <_printf_float+0xb8>
 800f312:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f316:	42b3      	cmp	r3, r6
 800f318:	db02      	blt.n	800f320 <_printf_float+0x248>
 800f31a:	682b      	ldr	r3, [r5, #0]
 800f31c:	07db      	lsls	r3, r3, #31
 800f31e:	d50c      	bpl.n	800f33a <_printf_float+0x262>
 800f320:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f326:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f328:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f32a:	47a0      	blx	r4
 800f32c:	2400      	movs	r4, #0
 800f32e:	3001      	adds	r0, #1
 800f330:	d100      	bne.n	800f334 <_printf_float+0x25c>
 800f332:	e72d      	b.n	800f190 <_printf_float+0xb8>
 800f334:	1e73      	subs	r3, r6, #1
 800f336:	42a3      	cmp	r3, r4
 800f338:	dc0a      	bgt.n	800f350 <_printf_float+0x278>
 800f33a:	682b      	ldr	r3, [r5, #0]
 800f33c:	079b      	lsls	r3, r3, #30
 800f33e:	d500      	bpl.n	800f342 <_printf_float+0x26a>
 800f340:	e105      	b.n	800f54e <_printf_float+0x476>
 800f342:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f344:	68e8      	ldr	r0, [r5, #12]
 800f346:	4298      	cmp	r0, r3
 800f348:	db00      	blt.n	800f34c <_printf_float+0x274>
 800f34a:	e723      	b.n	800f194 <_printf_float+0xbc>
 800f34c:	0018      	movs	r0, r3
 800f34e:	e721      	b.n	800f194 <_printf_float+0xbc>
 800f350:	002a      	movs	r2, r5
 800f352:	2301      	movs	r3, #1
 800f354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f358:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f35a:	321a      	adds	r2, #26
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	d100      	bne.n	800f364 <_printf_float+0x28c>
 800f362:	e715      	b.n	800f190 <_printf_float+0xb8>
 800f364:	3401      	adds	r4, #1
 800f366:	e7e5      	b.n	800f334 <_printf_float+0x25c>
 800f368:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	dc3a      	bgt.n	800f3e4 <_printf_float+0x30c>
 800f36e:	2301      	movs	r3, #1
 800f370:	4a1b      	ldr	r2, [pc, #108]	@ (800f3e0 <_printf_float+0x308>)
 800f372:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f374:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f376:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f378:	47a0      	blx	r4
 800f37a:	3001      	adds	r0, #1
 800f37c:	d100      	bne.n	800f380 <_printf_float+0x2a8>
 800f37e:	e707      	b.n	800f190 <_printf_float+0xb8>
 800f380:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f382:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f384:	4333      	orrs	r3, r6
 800f386:	d102      	bne.n	800f38e <_printf_float+0x2b6>
 800f388:	682b      	ldr	r3, [r5, #0]
 800f38a:	07db      	lsls	r3, r3, #31
 800f38c:	d5d5      	bpl.n	800f33a <_printf_float+0x262>
 800f38e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f396:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f398:	47a0      	blx	r4
 800f39a:	2300      	movs	r3, #0
 800f39c:	3001      	adds	r0, #1
 800f39e:	d100      	bne.n	800f3a2 <_printf_float+0x2ca>
 800f3a0:	e6f6      	b.n	800f190 <_printf_float+0xb8>
 800f3a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f3a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f3a8:	425b      	negs	r3, r3
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	dc01      	bgt.n	800f3b2 <_printf_float+0x2da>
 800f3ae:	0033      	movs	r3, r6
 800f3b0:	e792      	b.n	800f2d8 <_printf_float+0x200>
 800f3b2:	002a      	movs	r2, r5
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f3bc:	321a      	adds	r2, #26
 800f3be:	47a0      	blx	r4
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	d100      	bne.n	800f3c6 <_printf_float+0x2ee>
 800f3c4:	e6e4      	b.n	800f190 <_printf_float+0xb8>
 800f3c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	e7ea      	b.n	800f3a2 <_printf_float+0x2ca>
 800f3cc:	7fefffff 	.word	0x7fefffff
 800f3d0:	08011cd6 	.word	0x08011cd6
 800f3d4:	08011cda 	.word	0x08011cda
 800f3d8:	08011cde 	.word	0x08011cde
 800f3dc:	08011ce2 	.word	0x08011ce2
 800f3e0:	08011ce6 	.word	0x08011ce6
 800f3e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f3e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f3e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3ea:	429e      	cmp	r6, r3
 800f3ec:	dd00      	ble.n	800f3f0 <_printf_float+0x318>
 800f3ee:	001e      	movs	r6, r3
 800f3f0:	2e00      	cmp	r6, #0
 800f3f2:	dc31      	bgt.n	800f458 <_printf_float+0x380>
 800f3f4:	43f3      	mvns	r3, r6
 800f3f6:	2400      	movs	r4, #0
 800f3f8:	17db      	asrs	r3, r3, #31
 800f3fa:	4033      	ands	r3, r6
 800f3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f402:	1af3      	subs	r3, r6, r3
 800f404:	42a3      	cmp	r3, r4
 800f406:	dc30      	bgt.n	800f46a <_printf_float+0x392>
 800f408:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f40a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f40c:	429a      	cmp	r2, r3
 800f40e:	dc38      	bgt.n	800f482 <_printf_float+0x3aa>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	07db      	lsls	r3, r3, #31
 800f414:	d435      	bmi.n	800f482 <_printf_float+0x3aa>
 800f416:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f41a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f41c:	1b9b      	subs	r3, r3, r6
 800f41e:	1b14      	subs	r4, r2, r4
 800f420:	429c      	cmp	r4, r3
 800f422:	dd00      	ble.n	800f426 <_printf_float+0x34e>
 800f424:	001c      	movs	r4, r3
 800f426:	2c00      	cmp	r4, #0
 800f428:	dc34      	bgt.n	800f494 <_printf_float+0x3bc>
 800f42a:	43e3      	mvns	r3, r4
 800f42c:	2600      	movs	r6, #0
 800f42e:	17db      	asrs	r3, r3, #31
 800f430:	401c      	ands	r4, r3
 800f432:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f434:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	1b1b      	subs	r3, r3, r4
 800f43a:	42b3      	cmp	r3, r6
 800f43c:	dc00      	bgt.n	800f440 <_printf_float+0x368>
 800f43e:	e77c      	b.n	800f33a <_printf_float+0x262>
 800f440:	002a      	movs	r2, r5
 800f442:	2301      	movs	r3, #1
 800f444:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f448:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f44a:	321a      	adds	r2, #26
 800f44c:	47b8      	blx	r7
 800f44e:	3001      	adds	r0, #1
 800f450:	d100      	bne.n	800f454 <_printf_float+0x37c>
 800f452:	e69d      	b.n	800f190 <_printf_float+0xb8>
 800f454:	3601      	adds	r6, #1
 800f456:	e7ec      	b.n	800f432 <_printf_float+0x35a>
 800f458:	0033      	movs	r3, r6
 800f45a:	003a      	movs	r2, r7
 800f45c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f460:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f462:	47a0      	blx	r4
 800f464:	3001      	adds	r0, #1
 800f466:	d1c5      	bne.n	800f3f4 <_printf_float+0x31c>
 800f468:	e692      	b.n	800f190 <_printf_float+0xb8>
 800f46a:	002a      	movs	r2, r5
 800f46c:	2301      	movs	r3, #1
 800f46e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f470:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f472:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f474:	321a      	adds	r2, #26
 800f476:	47b0      	blx	r6
 800f478:	3001      	adds	r0, #1
 800f47a:	d100      	bne.n	800f47e <_printf_float+0x3a6>
 800f47c:	e688      	b.n	800f190 <_printf_float+0xb8>
 800f47e:	3401      	adds	r4, #1
 800f480:	e7bd      	b.n	800f3fe <_printf_float+0x326>
 800f482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f486:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f488:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f48a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f48c:	47a0      	blx	r4
 800f48e:	3001      	adds	r0, #1
 800f490:	d1c1      	bne.n	800f416 <_printf_float+0x33e>
 800f492:	e67d      	b.n	800f190 <_printf_float+0xb8>
 800f494:	19ba      	adds	r2, r7, r6
 800f496:	0023      	movs	r3, r4
 800f498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f49c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f49e:	47b0      	blx	r6
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d1c2      	bne.n	800f42a <_printf_float+0x352>
 800f4a4:	e674      	b.n	800f190 <_printf_float+0xb8>
 800f4a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f4a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	dc02      	bgt.n	800f4b4 <_printf_float+0x3dc>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	421a      	tst	r2, r3
 800f4b2:	d039      	beq.n	800f528 <_printf_float+0x450>
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	003a      	movs	r2, r7
 800f4b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f4be:	47b0      	blx	r6
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d100      	bne.n	800f4c6 <_printf_float+0x3ee>
 800f4c4:	e664      	b.n	800f190 <_printf_float+0xb8>
 800f4c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f4d0:	47b0      	blx	r6
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	d100      	bne.n	800f4d8 <_printf_float+0x400>
 800f4d6:	e65b      	b.n	800f190 <_printf_float+0xb8>
 800f4d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f4da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f4dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4de:	2200      	movs	r2, #0
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f7f0 ffb1 	bl	800044c <__aeabi_dcmpeq>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d11a      	bne.n	800f524 <_printf_float+0x44c>
 800f4ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4f0:	1c7a      	adds	r2, r7, #1
 800f4f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f4f8:	47b0      	blx	r6
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	d10e      	bne.n	800f51c <_printf_float+0x444>
 800f4fe:	e647      	b.n	800f190 <_printf_float+0xb8>
 800f500:	002a      	movs	r2, r5
 800f502:	2301      	movs	r3, #1
 800f504:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f508:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f50a:	321a      	adds	r2, #26
 800f50c:	47b8      	blx	r7
 800f50e:	3001      	adds	r0, #1
 800f510:	d100      	bne.n	800f514 <_printf_float+0x43c>
 800f512:	e63d      	b.n	800f190 <_printf_float+0xb8>
 800f514:	3601      	adds	r6, #1
 800f516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f518:	429e      	cmp	r6, r3
 800f51a:	dbf1      	blt.n	800f500 <_printf_float+0x428>
 800f51c:	002a      	movs	r2, r5
 800f51e:	0023      	movs	r3, r4
 800f520:	3250      	adds	r2, #80	@ 0x50
 800f522:	e6da      	b.n	800f2da <_printf_float+0x202>
 800f524:	2600      	movs	r6, #0
 800f526:	e7f6      	b.n	800f516 <_printf_float+0x43e>
 800f528:	003a      	movs	r2, r7
 800f52a:	e7e2      	b.n	800f4f2 <_printf_float+0x41a>
 800f52c:	002a      	movs	r2, r5
 800f52e:	2301      	movs	r3, #1
 800f530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f534:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f536:	3219      	adds	r2, #25
 800f538:	47b0      	blx	r6
 800f53a:	3001      	adds	r0, #1
 800f53c:	d100      	bne.n	800f540 <_printf_float+0x468>
 800f53e:	e627      	b.n	800f190 <_printf_float+0xb8>
 800f540:	3401      	adds	r4, #1
 800f542:	68eb      	ldr	r3, [r5, #12]
 800f544:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f546:	1a9b      	subs	r3, r3, r2
 800f548:	42a3      	cmp	r3, r4
 800f54a:	dcef      	bgt.n	800f52c <_printf_float+0x454>
 800f54c:	e6f9      	b.n	800f342 <_printf_float+0x26a>
 800f54e:	2400      	movs	r4, #0
 800f550:	e7f7      	b.n	800f542 <_printf_float+0x46a>
 800f552:	46c0      	nop			@ (mov r8, r8)

0800f554 <_printf_common>:
 800f554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f556:	0016      	movs	r6, r2
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	688a      	ldr	r2, [r1, #8]
 800f55c:	690b      	ldr	r3, [r1, #16]
 800f55e:	000c      	movs	r4, r1
 800f560:	9000      	str	r0, [sp, #0]
 800f562:	4293      	cmp	r3, r2
 800f564:	da00      	bge.n	800f568 <_printf_common+0x14>
 800f566:	0013      	movs	r3, r2
 800f568:	0022      	movs	r2, r4
 800f56a:	6033      	str	r3, [r6, #0]
 800f56c:	3243      	adds	r2, #67	@ 0x43
 800f56e:	7812      	ldrb	r2, [r2, #0]
 800f570:	2a00      	cmp	r2, #0
 800f572:	d001      	beq.n	800f578 <_printf_common+0x24>
 800f574:	3301      	adds	r3, #1
 800f576:	6033      	str	r3, [r6, #0]
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	069b      	lsls	r3, r3, #26
 800f57c:	d502      	bpl.n	800f584 <_printf_common+0x30>
 800f57e:	6833      	ldr	r3, [r6, #0]
 800f580:	3302      	adds	r3, #2
 800f582:	6033      	str	r3, [r6, #0]
 800f584:	6822      	ldr	r2, [r4, #0]
 800f586:	2306      	movs	r3, #6
 800f588:	0015      	movs	r5, r2
 800f58a:	401d      	ands	r5, r3
 800f58c:	421a      	tst	r2, r3
 800f58e:	d027      	beq.n	800f5e0 <_printf_common+0x8c>
 800f590:	0023      	movs	r3, r4
 800f592:	3343      	adds	r3, #67	@ 0x43
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	1e5a      	subs	r2, r3, #1
 800f598:	4193      	sbcs	r3, r2
 800f59a:	6822      	ldr	r2, [r4, #0]
 800f59c:	0692      	lsls	r2, r2, #26
 800f59e:	d430      	bmi.n	800f602 <_printf_common+0xae>
 800f5a0:	0022      	movs	r2, r4
 800f5a2:	9901      	ldr	r1, [sp, #4]
 800f5a4:	9800      	ldr	r0, [sp, #0]
 800f5a6:	9d08      	ldr	r5, [sp, #32]
 800f5a8:	3243      	adds	r2, #67	@ 0x43
 800f5aa:	47a8      	blx	r5
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	d025      	beq.n	800f5fc <_printf_common+0xa8>
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	6823      	ldr	r3, [r4, #0]
 800f5b4:	2500      	movs	r5, #0
 800f5b6:	4013      	ands	r3, r2
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	d105      	bne.n	800f5c8 <_printf_common+0x74>
 800f5bc:	6833      	ldr	r3, [r6, #0]
 800f5be:	68e5      	ldr	r5, [r4, #12]
 800f5c0:	1aed      	subs	r5, r5, r3
 800f5c2:	43eb      	mvns	r3, r5
 800f5c4:	17db      	asrs	r3, r3, #31
 800f5c6:	401d      	ands	r5, r3
 800f5c8:	68a3      	ldr	r3, [r4, #8]
 800f5ca:	6922      	ldr	r2, [r4, #16]
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	dd01      	ble.n	800f5d4 <_printf_common+0x80>
 800f5d0:	1a9b      	subs	r3, r3, r2
 800f5d2:	18ed      	adds	r5, r5, r3
 800f5d4:	2600      	movs	r6, #0
 800f5d6:	42b5      	cmp	r5, r6
 800f5d8:	d120      	bne.n	800f61c <_printf_common+0xc8>
 800f5da:	2000      	movs	r0, #0
 800f5dc:	e010      	b.n	800f600 <_printf_common+0xac>
 800f5de:	3501      	adds	r5, #1
 800f5e0:	68e3      	ldr	r3, [r4, #12]
 800f5e2:	6832      	ldr	r2, [r6, #0]
 800f5e4:	1a9b      	subs	r3, r3, r2
 800f5e6:	42ab      	cmp	r3, r5
 800f5e8:	ddd2      	ble.n	800f590 <_printf_common+0x3c>
 800f5ea:	0022      	movs	r2, r4
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	9901      	ldr	r1, [sp, #4]
 800f5f0:	9800      	ldr	r0, [sp, #0]
 800f5f2:	9f08      	ldr	r7, [sp, #32]
 800f5f4:	3219      	adds	r2, #25
 800f5f6:	47b8      	blx	r7
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d1f0      	bne.n	800f5de <_printf_common+0x8a>
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	4240      	negs	r0, r0
 800f600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f602:	2030      	movs	r0, #48	@ 0x30
 800f604:	18e1      	adds	r1, r4, r3
 800f606:	3143      	adds	r1, #67	@ 0x43
 800f608:	7008      	strb	r0, [r1, #0]
 800f60a:	0021      	movs	r1, r4
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	3145      	adds	r1, #69	@ 0x45
 800f610:	7809      	ldrb	r1, [r1, #0]
 800f612:	18a2      	adds	r2, r4, r2
 800f614:	3243      	adds	r2, #67	@ 0x43
 800f616:	3302      	adds	r3, #2
 800f618:	7011      	strb	r1, [r2, #0]
 800f61a:	e7c1      	b.n	800f5a0 <_printf_common+0x4c>
 800f61c:	0022      	movs	r2, r4
 800f61e:	2301      	movs	r3, #1
 800f620:	9901      	ldr	r1, [sp, #4]
 800f622:	9800      	ldr	r0, [sp, #0]
 800f624:	9f08      	ldr	r7, [sp, #32]
 800f626:	321a      	adds	r2, #26
 800f628:	47b8      	blx	r7
 800f62a:	3001      	adds	r0, #1
 800f62c:	d0e6      	beq.n	800f5fc <_printf_common+0xa8>
 800f62e:	3601      	adds	r6, #1
 800f630:	e7d1      	b.n	800f5d6 <_printf_common+0x82>
	...

0800f634 <_printf_i>:
 800f634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f636:	b08b      	sub	sp, #44	@ 0x2c
 800f638:	9206      	str	r2, [sp, #24]
 800f63a:	000a      	movs	r2, r1
 800f63c:	3243      	adds	r2, #67	@ 0x43
 800f63e:	9307      	str	r3, [sp, #28]
 800f640:	9005      	str	r0, [sp, #20]
 800f642:	9203      	str	r2, [sp, #12]
 800f644:	7e0a      	ldrb	r2, [r1, #24]
 800f646:	000c      	movs	r4, r1
 800f648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f64a:	2a78      	cmp	r2, #120	@ 0x78
 800f64c:	d809      	bhi.n	800f662 <_printf_i+0x2e>
 800f64e:	2a62      	cmp	r2, #98	@ 0x62
 800f650:	d80b      	bhi.n	800f66a <_printf_i+0x36>
 800f652:	2a00      	cmp	r2, #0
 800f654:	d100      	bne.n	800f658 <_printf_i+0x24>
 800f656:	e0bc      	b.n	800f7d2 <_printf_i+0x19e>
 800f658:	497b      	ldr	r1, [pc, #492]	@ (800f848 <_printf_i+0x214>)
 800f65a:	9104      	str	r1, [sp, #16]
 800f65c:	2a58      	cmp	r2, #88	@ 0x58
 800f65e:	d100      	bne.n	800f662 <_printf_i+0x2e>
 800f660:	e090      	b.n	800f784 <_printf_i+0x150>
 800f662:	0025      	movs	r5, r4
 800f664:	3542      	adds	r5, #66	@ 0x42
 800f666:	702a      	strb	r2, [r5, #0]
 800f668:	e022      	b.n	800f6b0 <_printf_i+0x7c>
 800f66a:	0010      	movs	r0, r2
 800f66c:	3863      	subs	r0, #99	@ 0x63
 800f66e:	2815      	cmp	r0, #21
 800f670:	d8f7      	bhi.n	800f662 <_printf_i+0x2e>
 800f672:	f7f0 fd5b 	bl	800012c <__gnu_thumb1_case_shi>
 800f676:	0016      	.short	0x0016
 800f678:	fff6001f 	.word	0xfff6001f
 800f67c:	fff6fff6 	.word	0xfff6fff6
 800f680:	001ffff6 	.word	0x001ffff6
 800f684:	fff6fff6 	.word	0xfff6fff6
 800f688:	fff6fff6 	.word	0xfff6fff6
 800f68c:	003600a1 	.word	0x003600a1
 800f690:	fff60080 	.word	0xfff60080
 800f694:	00b2fff6 	.word	0x00b2fff6
 800f698:	0036fff6 	.word	0x0036fff6
 800f69c:	fff6fff6 	.word	0xfff6fff6
 800f6a0:	0084      	.short	0x0084
 800f6a2:	0025      	movs	r5, r4
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	3542      	adds	r5, #66	@ 0x42
 800f6a8:	1d11      	adds	r1, r2, #4
 800f6aa:	6019      	str	r1, [r3, #0]
 800f6ac:	6813      	ldr	r3, [r2, #0]
 800f6ae:	702b      	strb	r3, [r5, #0]
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e0a0      	b.n	800f7f6 <_printf_i+0x1c2>
 800f6b4:	6818      	ldr	r0, [r3, #0]
 800f6b6:	6809      	ldr	r1, [r1, #0]
 800f6b8:	1d02      	adds	r2, r0, #4
 800f6ba:	060d      	lsls	r5, r1, #24
 800f6bc:	d50b      	bpl.n	800f6d6 <_printf_i+0xa2>
 800f6be:	6806      	ldr	r6, [r0, #0]
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	2e00      	cmp	r6, #0
 800f6c4:	da03      	bge.n	800f6ce <_printf_i+0x9a>
 800f6c6:	232d      	movs	r3, #45	@ 0x2d
 800f6c8:	9a03      	ldr	r2, [sp, #12]
 800f6ca:	4276      	negs	r6, r6
 800f6cc:	7013      	strb	r3, [r2, #0]
 800f6ce:	4b5e      	ldr	r3, [pc, #376]	@ (800f848 <_printf_i+0x214>)
 800f6d0:	270a      	movs	r7, #10
 800f6d2:	9304      	str	r3, [sp, #16]
 800f6d4:	e018      	b.n	800f708 <_printf_i+0xd4>
 800f6d6:	6806      	ldr	r6, [r0, #0]
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	0649      	lsls	r1, r1, #25
 800f6dc:	d5f1      	bpl.n	800f6c2 <_printf_i+0x8e>
 800f6de:	b236      	sxth	r6, r6
 800f6e0:	e7ef      	b.n	800f6c2 <_printf_i+0x8e>
 800f6e2:	6808      	ldr	r0, [r1, #0]
 800f6e4:	6819      	ldr	r1, [r3, #0]
 800f6e6:	c940      	ldmia	r1!, {r6}
 800f6e8:	0605      	lsls	r5, r0, #24
 800f6ea:	d402      	bmi.n	800f6f2 <_printf_i+0xbe>
 800f6ec:	0640      	lsls	r0, r0, #25
 800f6ee:	d500      	bpl.n	800f6f2 <_printf_i+0xbe>
 800f6f0:	b2b6      	uxth	r6, r6
 800f6f2:	6019      	str	r1, [r3, #0]
 800f6f4:	4b54      	ldr	r3, [pc, #336]	@ (800f848 <_printf_i+0x214>)
 800f6f6:	270a      	movs	r7, #10
 800f6f8:	9304      	str	r3, [sp, #16]
 800f6fa:	2a6f      	cmp	r2, #111	@ 0x6f
 800f6fc:	d100      	bne.n	800f700 <_printf_i+0xcc>
 800f6fe:	3f02      	subs	r7, #2
 800f700:	0023      	movs	r3, r4
 800f702:	2200      	movs	r2, #0
 800f704:	3343      	adds	r3, #67	@ 0x43
 800f706:	701a      	strb	r2, [r3, #0]
 800f708:	6863      	ldr	r3, [r4, #4]
 800f70a:	60a3      	str	r3, [r4, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	db03      	blt.n	800f718 <_printf_i+0xe4>
 800f710:	2104      	movs	r1, #4
 800f712:	6822      	ldr	r2, [r4, #0]
 800f714:	438a      	bics	r2, r1
 800f716:	6022      	str	r2, [r4, #0]
 800f718:	2e00      	cmp	r6, #0
 800f71a:	d102      	bne.n	800f722 <_printf_i+0xee>
 800f71c:	9d03      	ldr	r5, [sp, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00c      	beq.n	800f73c <_printf_i+0x108>
 800f722:	9d03      	ldr	r5, [sp, #12]
 800f724:	0030      	movs	r0, r6
 800f726:	0039      	movs	r1, r7
 800f728:	f7f0 fd90 	bl	800024c <__aeabi_uidivmod>
 800f72c:	9b04      	ldr	r3, [sp, #16]
 800f72e:	3d01      	subs	r5, #1
 800f730:	5c5b      	ldrb	r3, [r3, r1]
 800f732:	702b      	strb	r3, [r5, #0]
 800f734:	0033      	movs	r3, r6
 800f736:	0006      	movs	r6, r0
 800f738:	429f      	cmp	r7, r3
 800f73a:	d9f3      	bls.n	800f724 <_printf_i+0xf0>
 800f73c:	2f08      	cmp	r7, #8
 800f73e:	d109      	bne.n	800f754 <_printf_i+0x120>
 800f740:	6823      	ldr	r3, [r4, #0]
 800f742:	07db      	lsls	r3, r3, #31
 800f744:	d506      	bpl.n	800f754 <_printf_i+0x120>
 800f746:	6862      	ldr	r2, [r4, #4]
 800f748:	6923      	ldr	r3, [r4, #16]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	dc02      	bgt.n	800f754 <_printf_i+0x120>
 800f74e:	2330      	movs	r3, #48	@ 0x30
 800f750:	3d01      	subs	r5, #1
 800f752:	702b      	strb	r3, [r5, #0]
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1b5b      	subs	r3, r3, r5
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	9b07      	ldr	r3, [sp, #28]
 800f75c:	0021      	movs	r1, r4
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	9805      	ldr	r0, [sp, #20]
 800f762:	9b06      	ldr	r3, [sp, #24]
 800f764:	aa09      	add	r2, sp, #36	@ 0x24
 800f766:	f7ff fef5 	bl	800f554 <_printf_common>
 800f76a:	3001      	adds	r0, #1
 800f76c:	d148      	bne.n	800f800 <_printf_i+0x1cc>
 800f76e:	2001      	movs	r0, #1
 800f770:	4240      	negs	r0, r0
 800f772:	b00b      	add	sp, #44	@ 0x2c
 800f774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f776:	2220      	movs	r2, #32
 800f778:	6809      	ldr	r1, [r1, #0]
 800f77a:	430a      	orrs	r2, r1
 800f77c:	6022      	str	r2, [r4, #0]
 800f77e:	2278      	movs	r2, #120	@ 0x78
 800f780:	4932      	ldr	r1, [pc, #200]	@ (800f84c <_printf_i+0x218>)
 800f782:	9104      	str	r1, [sp, #16]
 800f784:	0021      	movs	r1, r4
 800f786:	3145      	adds	r1, #69	@ 0x45
 800f788:	700a      	strb	r2, [r1, #0]
 800f78a:	6819      	ldr	r1, [r3, #0]
 800f78c:	6822      	ldr	r2, [r4, #0]
 800f78e:	c940      	ldmia	r1!, {r6}
 800f790:	0610      	lsls	r0, r2, #24
 800f792:	d402      	bmi.n	800f79a <_printf_i+0x166>
 800f794:	0650      	lsls	r0, r2, #25
 800f796:	d500      	bpl.n	800f79a <_printf_i+0x166>
 800f798:	b2b6      	uxth	r6, r6
 800f79a:	6019      	str	r1, [r3, #0]
 800f79c:	07d3      	lsls	r3, r2, #31
 800f79e:	d502      	bpl.n	800f7a6 <_printf_i+0x172>
 800f7a0:	2320      	movs	r3, #32
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	6023      	str	r3, [r4, #0]
 800f7a6:	2e00      	cmp	r6, #0
 800f7a8:	d001      	beq.n	800f7ae <_printf_i+0x17a>
 800f7aa:	2710      	movs	r7, #16
 800f7ac:	e7a8      	b.n	800f700 <_printf_i+0xcc>
 800f7ae:	2220      	movs	r2, #32
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	4393      	bics	r3, r2
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	e7f8      	b.n	800f7aa <_printf_i+0x176>
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	680d      	ldr	r5, [r1, #0]
 800f7bc:	1d10      	adds	r0, r2, #4
 800f7be:	6949      	ldr	r1, [r1, #20]
 800f7c0:	6018      	str	r0, [r3, #0]
 800f7c2:	6813      	ldr	r3, [r2, #0]
 800f7c4:	062e      	lsls	r6, r5, #24
 800f7c6:	d501      	bpl.n	800f7cc <_printf_i+0x198>
 800f7c8:	6019      	str	r1, [r3, #0]
 800f7ca:	e002      	b.n	800f7d2 <_printf_i+0x19e>
 800f7cc:	066d      	lsls	r5, r5, #25
 800f7ce:	d5fb      	bpl.n	800f7c8 <_printf_i+0x194>
 800f7d0:	8019      	strh	r1, [r3, #0]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	9d03      	ldr	r5, [sp, #12]
 800f7d6:	6123      	str	r3, [r4, #16]
 800f7d8:	e7bf      	b.n	800f75a <_printf_i+0x126>
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	1d11      	adds	r1, r2, #4
 800f7de:	6019      	str	r1, [r3, #0]
 800f7e0:	6815      	ldr	r5, [r2, #0]
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	0028      	movs	r0, r5
 800f7e6:	6862      	ldr	r2, [r4, #4]
 800f7e8:	f000 f9d7 	bl	800fb9a <memchr>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d001      	beq.n	800f7f4 <_printf_i+0x1c0>
 800f7f0:	1b40      	subs	r0, r0, r5
 800f7f2:	6060      	str	r0, [r4, #4]
 800f7f4:	6863      	ldr	r3, [r4, #4]
 800f7f6:	6123      	str	r3, [r4, #16]
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	9a03      	ldr	r2, [sp, #12]
 800f7fc:	7013      	strb	r3, [r2, #0]
 800f7fe:	e7ac      	b.n	800f75a <_printf_i+0x126>
 800f800:	002a      	movs	r2, r5
 800f802:	6923      	ldr	r3, [r4, #16]
 800f804:	9906      	ldr	r1, [sp, #24]
 800f806:	9805      	ldr	r0, [sp, #20]
 800f808:	9d07      	ldr	r5, [sp, #28]
 800f80a:	47a8      	blx	r5
 800f80c:	3001      	adds	r0, #1
 800f80e:	d0ae      	beq.n	800f76e <_printf_i+0x13a>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	079b      	lsls	r3, r3, #30
 800f814:	d415      	bmi.n	800f842 <_printf_i+0x20e>
 800f816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f818:	68e0      	ldr	r0, [r4, #12]
 800f81a:	4298      	cmp	r0, r3
 800f81c:	daa9      	bge.n	800f772 <_printf_i+0x13e>
 800f81e:	0018      	movs	r0, r3
 800f820:	e7a7      	b.n	800f772 <_printf_i+0x13e>
 800f822:	0022      	movs	r2, r4
 800f824:	2301      	movs	r3, #1
 800f826:	9906      	ldr	r1, [sp, #24]
 800f828:	9805      	ldr	r0, [sp, #20]
 800f82a:	9e07      	ldr	r6, [sp, #28]
 800f82c:	3219      	adds	r2, #25
 800f82e:	47b0      	blx	r6
 800f830:	3001      	adds	r0, #1
 800f832:	d09c      	beq.n	800f76e <_printf_i+0x13a>
 800f834:	3501      	adds	r5, #1
 800f836:	68e3      	ldr	r3, [r4, #12]
 800f838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f83a:	1a9b      	subs	r3, r3, r2
 800f83c:	42ab      	cmp	r3, r5
 800f83e:	dcf0      	bgt.n	800f822 <_printf_i+0x1ee>
 800f840:	e7e9      	b.n	800f816 <_printf_i+0x1e2>
 800f842:	2500      	movs	r5, #0
 800f844:	e7f7      	b.n	800f836 <_printf_i+0x202>
 800f846:	46c0      	nop			@ (mov r8, r8)
 800f848:	08011ce8 	.word	0x08011ce8
 800f84c:	08011cf9 	.word	0x08011cf9

0800f850 <std>:
 800f850:	2300      	movs	r3, #0
 800f852:	b510      	push	{r4, lr}
 800f854:	0004      	movs	r4, r0
 800f856:	6003      	str	r3, [r0, #0]
 800f858:	6043      	str	r3, [r0, #4]
 800f85a:	6083      	str	r3, [r0, #8]
 800f85c:	8181      	strh	r1, [r0, #12]
 800f85e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f860:	81c2      	strh	r2, [r0, #14]
 800f862:	6103      	str	r3, [r0, #16]
 800f864:	6143      	str	r3, [r0, #20]
 800f866:	6183      	str	r3, [r0, #24]
 800f868:	0019      	movs	r1, r3
 800f86a:	2208      	movs	r2, #8
 800f86c:	305c      	adds	r0, #92	@ 0x5c
 800f86e:	f000 f90d 	bl	800fa8c <memset>
 800f872:	4b0b      	ldr	r3, [pc, #44]	@ (800f8a0 <std+0x50>)
 800f874:	6224      	str	r4, [r4, #32]
 800f876:	6263      	str	r3, [r4, #36]	@ 0x24
 800f878:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a4 <std+0x54>)
 800f87a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f87c:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a8 <std+0x58>)
 800f87e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f880:	4b0a      	ldr	r3, [pc, #40]	@ (800f8ac <std+0x5c>)
 800f882:	6323      	str	r3, [r4, #48]	@ 0x30
 800f884:	4b0a      	ldr	r3, [pc, #40]	@ (800f8b0 <std+0x60>)
 800f886:	429c      	cmp	r4, r3
 800f888:	d005      	beq.n	800f896 <std+0x46>
 800f88a:	4b0a      	ldr	r3, [pc, #40]	@ (800f8b4 <std+0x64>)
 800f88c:	429c      	cmp	r4, r3
 800f88e:	d002      	beq.n	800f896 <std+0x46>
 800f890:	4b09      	ldr	r3, [pc, #36]	@ (800f8b8 <std+0x68>)
 800f892:	429c      	cmp	r4, r3
 800f894:	d103      	bne.n	800f89e <std+0x4e>
 800f896:	0020      	movs	r0, r4
 800f898:	3058      	adds	r0, #88	@ 0x58
 800f89a:	f000 f97b 	bl	800fb94 <__retarget_lock_init_recursive>
 800f89e:	bd10      	pop	{r4, pc}
 800f8a0:	0800f9d9 	.word	0x0800f9d9
 800f8a4:	0800fa01 	.word	0x0800fa01
 800f8a8:	0800fa39 	.word	0x0800fa39
 800f8ac:	0800fa65 	.word	0x0800fa65
 800f8b0:	20001c6c 	.word	0x20001c6c
 800f8b4:	20001cd4 	.word	0x20001cd4
 800f8b8:	20001d3c 	.word	0x20001d3c

0800f8bc <stdio_exit_handler>:
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	4a03      	ldr	r2, [pc, #12]	@ (800f8cc <stdio_exit_handler+0x10>)
 800f8c0:	4903      	ldr	r1, [pc, #12]	@ (800f8d0 <stdio_exit_handler+0x14>)
 800f8c2:	4804      	ldr	r0, [pc, #16]	@ (800f8d4 <stdio_exit_handler+0x18>)
 800f8c4:	f000 f86c 	bl	800f9a0 <_fwalk_sglue>
 800f8c8:	bd10      	pop	{r4, pc}
 800f8ca:	46c0      	nop			@ (mov r8, r8)
 800f8cc:	200001f4 	.word	0x200001f4
 800f8d0:	08011329 	.word	0x08011329
 800f8d4:	20000204 	.word	0x20000204

0800f8d8 <cleanup_stdio>:
 800f8d8:	6841      	ldr	r1, [r0, #4]
 800f8da:	4b0b      	ldr	r3, [pc, #44]	@ (800f908 <cleanup_stdio+0x30>)
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	0004      	movs	r4, r0
 800f8e0:	4299      	cmp	r1, r3
 800f8e2:	d001      	beq.n	800f8e8 <cleanup_stdio+0x10>
 800f8e4:	f001 fd20 	bl	8011328 <_fflush_r>
 800f8e8:	68a1      	ldr	r1, [r4, #8]
 800f8ea:	4b08      	ldr	r3, [pc, #32]	@ (800f90c <cleanup_stdio+0x34>)
 800f8ec:	4299      	cmp	r1, r3
 800f8ee:	d002      	beq.n	800f8f6 <cleanup_stdio+0x1e>
 800f8f0:	0020      	movs	r0, r4
 800f8f2:	f001 fd19 	bl	8011328 <_fflush_r>
 800f8f6:	68e1      	ldr	r1, [r4, #12]
 800f8f8:	4b05      	ldr	r3, [pc, #20]	@ (800f910 <cleanup_stdio+0x38>)
 800f8fa:	4299      	cmp	r1, r3
 800f8fc:	d002      	beq.n	800f904 <cleanup_stdio+0x2c>
 800f8fe:	0020      	movs	r0, r4
 800f900:	f001 fd12 	bl	8011328 <_fflush_r>
 800f904:	bd10      	pop	{r4, pc}
 800f906:	46c0      	nop			@ (mov r8, r8)
 800f908:	20001c6c 	.word	0x20001c6c
 800f90c:	20001cd4 	.word	0x20001cd4
 800f910:	20001d3c 	.word	0x20001d3c

0800f914 <global_stdio_init.part.0>:
 800f914:	b510      	push	{r4, lr}
 800f916:	4b09      	ldr	r3, [pc, #36]	@ (800f93c <global_stdio_init.part.0+0x28>)
 800f918:	4a09      	ldr	r2, [pc, #36]	@ (800f940 <global_stdio_init.part.0+0x2c>)
 800f91a:	2104      	movs	r1, #4
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	4809      	ldr	r0, [pc, #36]	@ (800f944 <global_stdio_init.part.0+0x30>)
 800f920:	2200      	movs	r2, #0
 800f922:	f7ff ff95 	bl	800f850 <std>
 800f926:	2201      	movs	r2, #1
 800f928:	2109      	movs	r1, #9
 800f92a:	4807      	ldr	r0, [pc, #28]	@ (800f948 <global_stdio_init.part.0+0x34>)
 800f92c:	f7ff ff90 	bl	800f850 <std>
 800f930:	2202      	movs	r2, #2
 800f932:	2112      	movs	r1, #18
 800f934:	4805      	ldr	r0, [pc, #20]	@ (800f94c <global_stdio_init.part.0+0x38>)
 800f936:	f7ff ff8b 	bl	800f850 <std>
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	20001da4 	.word	0x20001da4
 800f940:	0800f8bd 	.word	0x0800f8bd
 800f944:	20001c6c 	.word	0x20001c6c
 800f948:	20001cd4 	.word	0x20001cd4
 800f94c:	20001d3c 	.word	0x20001d3c

0800f950 <__sfp_lock_acquire>:
 800f950:	b510      	push	{r4, lr}
 800f952:	4802      	ldr	r0, [pc, #8]	@ (800f95c <__sfp_lock_acquire+0xc>)
 800f954:	f000 f91f 	bl	800fb96 <__retarget_lock_acquire_recursive>
 800f958:	bd10      	pop	{r4, pc}
 800f95a:	46c0      	nop			@ (mov r8, r8)
 800f95c:	20001dad 	.word	0x20001dad

0800f960 <__sfp_lock_release>:
 800f960:	b510      	push	{r4, lr}
 800f962:	4802      	ldr	r0, [pc, #8]	@ (800f96c <__sfp_lock_release+0xc>)
 800f964:	f000 f918 	bl	800fb98 <__retarget_lock_release_recursive>
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	46c0      	nop			@ (mov r8, r8)
 800f96c:	20001dad 	.word	0x20001dad

0800f970 <__sinit>:
 800f970:	b510      	push	{r4, lr}
 800f972:	0004      	movs	r4, r0
 800f974:	f7ff ffec 	bl	800f950 <__sfp_lock_acquire>
 800f978:	6a23      	ldr	r3, [r4, #32]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d002      	beq.n	800f984 <__sinit+0x14>
 800f97e:	f7ff ffef 	bl	800f960 <__sfp_lock_release>
 800f982:	bd10      	pop	{r4, pc}
 800f984:	4b04      	ldr	r3, [pc, #16]	@ (800f998 <__sinit+0x28>)
 800f986:	6223      	str	r3, [r4, #32]
 800f988:	4b04      	ldr	r3, [pc, #16]	@ (800f99c <__sinit+0x2c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1f6      	bne.n	800f97e <__sinit+0xe>
 800f990:	f7ff ffc0 	bl	800f914 <global_stdio_init.part.0>
 800f994:	e7f3      	b.n	800f97e <__sinit+0xe>
 800f996:	46c0      	nop			@ (mov r8, r8)
 800f998:	0800f8d9 	.word	0x0800f8d9
 800f99c:	20001da4 	.word	0x20001da4

0800f9a0 <_fwalk_sglue>:
 800f9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9a2:	0014      	movs	r4, r2
 800f9a4:	2600      	movs	r6, #0
 800f9a6:	9000      	str	r0, [sp, #0]
 800f9a8:	9101      	str	r1, [sp, #4]
 800f9aa:	68a5      	ldr	r5, [r4, #8]
 800f9ac:	6867      	ldr	r7, [r4, #4]
 800f9ae:	3f01      	subs	r7, #1
 800f9b0:	d504      	bpl.n	800f9bc <_fwalk_sglue+0x1c>
 800f9b2:	6824      	ldr	r4, [r4, #0]
 800f9b4:	2c00      	cmp	r4, #0
 800f9b6:	d1f8      	bne.n	800f9aa <_fwalk_sglue+0xa>
 800f9b8:	0030      	movs	r0, r6
 800f9ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f9bc:	89ab      	ldrh	r3, [r5, #12]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d908      	bls.n	800f9d4 <_fwalk_sglue+0x34>
 800f9c2:	220e      	movs	r2, #14
 800f9c4:	5eab      	ldrsh	r3, [r5, r2]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	d004      	beq.n	800f9d4 <_fwalk_sglue+0x34>
 800f9ca:	0029      	movs	r1, r5
 800f9cc:	9800      	ldr	r0, [sp, #0]
 800f9ce:	9b01      	ldr	r3, [sp, #4]
 800f9d0:	4798      	blx	r3
 800f9d2:	4306      	orrs	r6, r0
 800f9d4:	3568      	adds	r5, #104	@ 0x68
 800f9d6:	e7ea      	b.n	800f9ae <_fwalk_sglue+0xe>

0800f9d8 <__sread>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	000c      	movs	r4, r1
 800f9dc:	250e      	movs	r5, #14
 800f9de:	5f49      	ldrsh	r1, [r1, r5]
 800f9e0:	f000 f886 	bl	800faf0 <_read_r>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	db03      	blt.n	800f9f0 <__sread+0x18>
 800f9e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f9ea:	181b      	adds	r3, r3, r0
 800f9ec:	6563      	str	r3, [r4, #84]	@ 0x54
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	4a02      	ldr	r2, [pc, #8]	@ (800f9fc <__sread+0x24>)
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	81a3      	strh	r3, [r4, #12]
 800f9f8:	e7f9      	b.n	800f9ee <__sread+0x16>
 800f9fa:	46c0      	nop			@ (mov r8, r8)
 800f9fc:	ffffefff 	.word	0xffffefff

0800fa00 <__swrite>:
 800fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa02:	001f      	movs	r7, r3
 800fa04:	898b      	ldrh	r3, [r1, #12]
 800fa06:	0005      	movs	r5, r0
 800fa08:	000c      	movs	r4, r1
 800fa0a:	0016      	movs	r6, r2
 800fa0c:	05db      	lsls	r3, r3, #23
 800fa0e:	d505      	bpl.n	800fa1c <__swrite+0x1c>
 800fa10:	230e      	movs	r3, #14
 800fa12:	5ec9      	ldrsh	r1, [r1, r3]
 800fa14:	2200      	movs	r2, #0
 800fa16:	2302      	movs	r3, #2
 800fa18:	f000 f856 	bl	800fac8 <_lseek_r>
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	4a05      	ldr	r2, [pc, #20]	@ (800fa34 <__swrite+0x34>)
 800fa20:	0028      	movs	r0, r5
 800fa22:	4013      	ands	r3, r2
 800fa24:	81a3      	strh	r3, [r4, #12]
 800fa26:	0032      	movs	r2, r6
 800fa28:	230e      	movs	r3, #14
 800fa2a:	5ee1      	ldrsh	r1, [r4, r3]
 800fa2c:	003b      	movs	r3, r7
 800fa2e:	f000 f873 	bl	800fb18 <_write_r>
 800fa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa34:	ffffefff 	.word	0xffffefff

0800fa38 <__sseek>:
 800fa38:	b570      	push	{r4, r5, r6, lr}
 800fa3a:	000c      	movs	r4, r1
 800fa3c:	250e      	movs	r5, #14
 800fa3e:	5f49      	ldrsh	r1, [r1, r5]
 800fa40:	f000 f842 	bl	800fac8 <_lseek_r>
 800fa44:	89a3      	ldrh	r3, [r4, #12]
 800fa46:	1c42      	adds	r2, r0, #1
 800fa48:	d103      	bne.n	800fa52 <__sseek+0x1a>
 800fa4a:	4a05      	ldr	r2, [pc, #20]	@ (800fa60 <__sseek+0x28>)
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	81a3      	strh	r3, [r4, #12]
 800fa50:	bd70      	pop	{r4, r5, r6, pc}
 800fa52:	2280      	movs	r2, #128	@ 0x80
 800fa54:	0152      	lsls	r2, r2, #5
 800fa56:	4313      	orrs	r3, r2
 800fa58:	81a3      	strh	r3, [r4, #12]
 800fa5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa5c:	e7f8      	b.n	800fa50 <__sseek+0x18>
 800fa5e:	46c0      	nop			@ (mov r8, r8)
 800fa60:	ffffefff 	.word	0xffffefff

0800fa64 <__sclose>:
 800fa64:	b510      	push	{r4, lr}
 800fa66:	230e      	movs	r3, #14
 800fa68:	5ec9      	ldrsh	r1, [r1, r3]
 800fa6a:	f000 f81b 	bl	800faa4 <_close_r>
 800fa6e:	bd10      	pop	{r4, pc}

0800fa70 <memcmp>:
 800fa70:	b530      	push	{r4, r5, lr}
 800fa72:	2400      	movs	r4, #0
 800fa74:	3901      	subs	r1, #1
 800fa76:	42a2      	cmp	r2, r4
 800fa78:	d101      	bne.n	800fa7e <memcmp+0xe>
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	e005      	b.n	800fa8a <memcmp+0x1a>
 800fa7e:	5d03      	ldrb	r3, [r0, r4]
 800fa80:	3401      	adds	r4, #1
 800fa82:	5d0d      	ldrb	r5, [r1, r4]
 800fa84:	42ab      	cmp	r3, r5
 800fa86:	d0f6      	beq.n	800fa76 <memcmp+0x6>
 800fa88:	1b58      	subs	r0, r3, r5
 800fa8a:	bd30      	pop	{r4, r5, pc}

0800fa8c <memset>:
 800fa8c:	0003      	movs	r3, r0
 800fa8e:	1882      	adds	r2, r0, r2
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d100      	bne.n	800fa96 <memset+0xa>
 800fa94:	4770      	bx	lr
 800fa96:	7019      	strb	r1, [r3, #0]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	e7f9      	b.n	800fa90 <memset+0x4>

0800fa9c <_localeconv_r>:
 800fa9c:	4800      	ldr	r0, [pc, #0]	@ (800faa0 <_localeconv_r+0x4>)
 800fa9e:	4770      	bx	lr
 800faa0:	20000340 	.word	0x20000340

0800faa4 <_close_r>:
 800faa4:	2300      	movs	r3, #0
 800faa6:	b570      	push	{r4, r5, r6, lr}
 800faa8:	4d06      	ldr	r5, [pc, #24]	@ (800fac4 <_close_r+0x20>)
 800faaa:	0004      	movs	r4, r0
 800faac:	0008      	movs	r0, r1
 800faae:	602b      	str	r3, [r5, #0]
 800fab0:	f7f3 f9b8 	bl	8002e24 <_close>
 800fab4:	1c43      	adds	r3, r0, #1
 800fab6:	d103      	bne.n	800fac0 <_close_r+0x1c>
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d000      	beq.n	800fac0 <_close_r+0x1c>
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	bd70      	pop	{r4, r5, r6, pc}
 800fac2:	46c0      	nop			@ (mov r8, r8)
 800fac4:	20001da8 	.word	0x20001da8

0800fac8 <_lseek_r>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	0004      	movs	r4, r0
 800facc:	0008      	movs	r0, r1
 800face:	0011      	movs	r1, r2
 800fad0:	001a      	movs	r2, r3
 800fad2:	2300      	movs	r3, #0
 800fad4:	4d05      	ldr	r5, [pc, #20]	@ (800faec <_lseek_r+0x24>)
 800fad6:	602b      	str	r3, [r5, #0]
 800fad8:	f7f3 f9c5 	bl	8002e66 <_lseek>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d103      	bne.n	800fae8 <_lseek_r+0x20>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d000      	beq.n	800fae8 <_lseek_r+0x20>
 800fae6:	6023      	str	r3, [r4, #0]
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
 800faea:	46c0      	nop			@ (mov r8, r8)
 800faec:	20001da8 	.word	0x20001da8

0800faf0 <_read_r>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	0004      	movs	r4, r0
 800faf4:	0008      	movs	r0, r1
 800faf6:	0011      	movs	r1, r2
 800faf8:	001a      	movs	r2, r3
 800fafa:	2300      	movs	r3, #0
 800fafc:	4d05      	ldr	r5, [pc, #20]	@ (800fb14 <_read_r+0x24>)
 800fafe:	602b      	str	r3, [r5, #0]
 800fb00:	f7f3 f957 	bl	8002db2 <_read>
 800fb04:	1c43      	adds	r3, r0, #1
 800fb06:	d103      	bne.n	800fb10 <_read_r+0x20>
 800fb08:	682b      	ldr	r3, [r5, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d000      	beq.n	800fb10 <_read_r+0x20>
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	bd70      	pop	{r4, r5, r6, pc}
 800fb12:	46c0      	nop			@ (mov r8, r8)
 800fb14:	20001da8 	.word	0x20001da8

0800fb18 <_write_r>:
 800fb18:	b570      	push	{r4, r5, r6, lr}
 800fb1a:	0004      	movs	r4, r0
 800fb1c:	0008      	movs	r0, r1
 800fb1e:	0011      	movs	r1, r2
 800fb20:	001a      	movs	r2, r3
 800fb22:	2300      	movs	r3, #0
 800fb24:	4d05      	ldr	r5, [pc, #20]	@ (800fb3c <_write_r+0x24>)
 800fb26:	602b      	str	r3, [r5, #0]
 800fb28:	f7f3 f960 	bl	8002dec <_write>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d103      	bne.n	800fb38 <_write_r+0x20>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d000      	beq.n	800fb38 <_write_r+0x20>
 800fb36:	6023      	str	r3, [r4, #0]
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
 800fb3a:	46c0      	nop			@ (mov r8, r8)
 800fb3c:	20001da8 	.word	0x20001da8

0800fb40 <__errno>:
 800fb40:	4b01      	ldr	r3, [pc, #4]	@ (800fb48 <__errno+0x8>)
 800fb42:	6818      	ldr	r0, [r3, #0]
 800fb44:	4770      	bx	lr
 800fb46:	46c0      	nop			@ (mov r8, r8)
 800fb48:	20000200 	.word	0x20000200

0800fb4c <__libc_init_array>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	2600      	movs	r6, #0
 800fb50:	4c0c      	ldr	r4, [pc, #48]	@ (800fb84 <__libc_init_array+0x38>)
 800fb52:	4d0d      	ldr	r5, [pc, #52]	@ (800fb88 <__libc_init_array+0x3c>)
 800fb54:	1b64      	subs	r4, r4, r5
 800fb56:	10a4      	asrs	r4, r4, #2
 800fb58:	42a6      	cmp	r6, r4
 800fb5a:	d109      	bne.n	800fb70 <__libc_init_array+0x24>
 800fb5c:	2600      	movs	r6, #0
 800fb5e:	f001 ff5f 	bl	8011a20 <_init>
 800fb62:	4c0a      	ldr	r4, [pc, #40]	@ (800fb8c <__libc_init_array+0x40>)
 800fb64:	4d0a      	ldr	r5, [pc, #40]	@ (800fb90 <__libc_init_array+0x44>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	42a6      	cmp	r6, r4
 800fb6c:	d105      	bne.n	800fb7a <__libc_init_array+0x2e>
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}
 800fb70:	00b3      	lsls	r3, r6, #2
 800fb72:	58eb      	ldr	r3, [r5, r3]
 800fb74:	4798      	blx	r3
 800fb76:	3601      	adds	r6, #1
 800fb78:	e7ee      	b.n	800fb58 <__libc_init_array+0xc>
 800fb7a:	00b3      	lsls	r3, r6, #2
 800fb7c:	58eb      	ldr	r3, [r5, r3]
 800fb7e:	4798      	blx	r3
 800fb80:	3601      	adds	r6, #1
 800fb82:	e7f2      	b.n	800fb6a <__libc_init_array+0x1e>
 800fb84:	08012048 	.word	0x08012048
 800fb88:	08012048 	.word	0x08012048
 800fb8c:	0801204c 	.word	0x0801204c
 800fb90:	08012048 	.word	0x08012048

0800fb94 <__retarget_lock_init_recursive>:
 800fb94:	4770      	bx	lr

0800fb96 <__retarget_lock_acquire_recursive>:
 800fb96:	4770      	bx	lr

0800fb98 <__retarget_lock_release_recursive>:
 800fb98:	4770      	bx	lr

0800fb9a <memchr>:
 800fb9a:	b2c9      	uxtb	r1, r1
 800fb9c:	1882      	adds	r2, r0, r2
 800fb9e:	4290      	cmp	r0, r2
 800fba0:	d101      	bne.n	800fba6 <memchr+0xc>
 800fba2:	2000      	movs	r0, #0
 800fba4:	4770      	bx	lr
 800fba6:	7803      	ldrb	r3, [r0, #0]
 800fba8:	428b      	cmp	r3, r1
 800fbaa:	d0fb      	beq.n	800fba4 <memchr+0xa>
 800fbac:	3001      	adds	r0, #1
 800fbae:	e7f6      	b.n	800fb9e <memchr+0x4>

0800fbb0 <memcpy>:
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	b510      	push	{r4, lr}
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d100      	bne.n	800fbba <memcpy+0xa>
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	5ccc      	ldrb	r4, [r1, r3]
 800fbbc:	54c4      	strb	r4, [r0, r3]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	e7f8      	b.n	800fbb4 <memcpy+0x4>

0800fbc2 <quorem>:
 800fbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc4:	6902      	ldr	r2, [r0, #16]
 800fbc6:	690f      	ldr	r7, [r1, #16]
 800fbc8:	b087      	sub	sp, #28
 800fbca:	0006      	movs	r6, r0
 800fbcc:	000b      	movs	r3, r1
 800fbce:	2000      	movs	r0, #0
 800fbd0:	9102      	str	r1, [sp, #8]
 800fbd2:	42ba      	cmp	r2, r7
 800fbd4:	db6d      	blt.n	800fcb2 <quorem+0xf0>
 800fbd6:	3f01      	subs	r7, #1
 800fbd8:	00bc      	lsls	r4, r7, #2
 800fbda:	3314      	adds	r3, #20
 800fbdc:	9305      	str	r3, [sp, #20]
 800fbde:	191b      	adds	r3, r3, r4
 800fbe0:	9303      	str	r3, [sp, #12]
 800fbe2:	0033      	movs	r3, r6
 800fbe4:	3314      	adds	r3, #20
 800fbe6:	191c      	adds	r4, r3, r4
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	9304      	str	r3, [sp, #16]
 800fbee:	9b03      	ldr	r3, [sp, #12]
 800fbf0:	9804      	ldr	r0, [sp, #16]
 800fbf2:	681d      	ldr	r5, [r3, #0]
 800fbf4:	3501      	adds	r5, #1
 800fbf6:	0029      	movs	r1, r5
 800fbf8:	f7f0 faa2 	bl	8000140 <__udivsi3>
 800fbfc:	9b04      	ldr	r3, [sp, #16]
 800fbfe:	9000      	str	r0, [sp, #0]
 800fc00:	42ab      	cmp	r3, r5
 800fc02:	d32b      	bcc.n	800fc5c <quorem+0x9a>
 800fc04:	9b05      	ldr	r3, [sp, #20]
 800fc06:	9d01      	ldr	r5, [sp, #4]
 800fc08:	469c      	mov	ip, r3
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	9305      	str	r3, [sp, #20]
 800fc0e:	9304      	str	r3, [sp, #16]
 800fc10:	4662      	mov	r2, ip
 800fc12:	ca08      	ldmia	r2!, {r3}
 800fc14:	6828      	ldr	r0, [r5, #0]
 800fc16:	4694      	mov	ip, r2
 800fc18:	9a00      	ldr	r2, [sp, #0]
 800fc1a:	b299      	uxth	r1, r3
 800fc1c:	4351      	muls	r1, r2
 800fc1e:	9a05      	ldr	r2, [sp, #20]
 800fc20:	0c1b      	lsrs	r3, r3, #16
 800fc22:	1889      	adds	r1, r1, r2
 800fc24:	9a00      	ldr	r2, [sp, #0]
 800fc26:	4353      	muls	r3, r2
 800fc28:	0c0a      	lsrs	r2, r1, #16
 800fc2a:	189b      	adds	r3, r3, r2
 800fc2c:	0c1a      	lsrs	r2, r3, #16
 800fc2e:	b289      	uxth	r1, r1
 800fc30:	9205      	str	r2, [sp, #20]
 800fc32:	b282      	uxth	r2, r0
 800fc34:	1a52      	subs	r2, r2, r1
 800fc36:	9904      	ldr	r1, [sp, #16]
 800fc38:	0c00      	lsrs	r0, r0, #16
 800fc3a:	1852      	adds	r2, r2, r1
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	1411      	asrs	r1, r2, #16
 800fc40:	1ac3      	subs	r3, r0, r3
 800fc42:	185b      	adds	r3, r3, r1
 800fc44:	1419      	asrs	r1, r3, #16
 800fc46:	b292      	uxth	r2, r2
 800fc48:	041b      	lsls	r3, r3, #16
 800fc4a:	431a      	orrs	r2, r3
 800fc4c:	9b03      	ldr	r3, [sp, #12]
 800fc4e:	9104      	str	r1, [sp, #16]
 800fc50:	c504      	stmia	r5!, {r2}
 800fc52:	4563      	cmp	r3, ip
 800fc54:	d2dc      	bcs.n	800fc10 <quorem+0x4e>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d030      	beq.n	800fcbe <quorem+0xfc>
 800fc5c:	0030      	movs	r0, r6
 800fc5e:	9902      	ldr	r1, [sp, #8]
 800fc60:	f001 f9c6 	bl	8010ff0 <__mcmp>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	db23      	blt.n	800fcb0 <quorem+0xee>
 800fc68:	0034      	movs	r4, r6
 800fc6a:	2500      	movs	r5, #0
 800fc6c:	9902      	ldr	r1, [sp, #8]
 800fc6e:	3414      	adds	r4, #20
 800fc70:	3114      	adds	r1, #20
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	c901      	ldmia	r1!, {r0}
 800fc76:	9302      	str	r3, [sp, #8]
 800fc78:	466b      	mov	r3, sp
 800fc7a:	891b      	ldrh	r3, [r3, #8]
 800fc7c:	b282      	uxth	r2, r0
 800fc7e:	1a9a      	subs	r2, r3, r2
 800fc80:	9b02      	ldr	r3, [sp, #8]
 800fc82:	1952      	adds	r2, r2, r5
 800fc84:	0c00      	lsrs	r0, r0, #16
 800fc86:	0c1b      	lsrs	r3, r3, #16
 800fc88:	1a1b      	subs	r3, r3, r0
 800fc8a:	1410      	asrs	r0, r2, #16
 800fc8c:	181b      	adds	r3, r3, r0
 800fc8e:	141d      	asrs	r5, r3, #16
 800fc90:	b292      	uxth	r2, r2
 800fc92:	041b      	lsls	r3, r3, #16
 800fc94:	431a      	orrs	r2, r3
 800fc96:	9b03      	ldr	r3, [sp, #12]
 800fc98:	c404      	stmia	r4!, {r2}
 800fc9a:	428b      	cmp	r3, r1
 800fc9c:	d2e9      	bcs.n	800fc72 <quorem+0xb0>
 800fc9e:	9a01      	ldr	r2, [sp, #4]
 800fca0:	00bb      	lsls	r3, r7, #2
 800fca2:	18d3      	adds	r3, r2, r3
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	d013      	beq.n	800fcd2 <quorem+0x110>
 800fcaa:	9b00      	ldr	r3, [sp, #0]
 800fcac:	3301      	adds	r3, #1
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	9800      	ldr	r0, [sp, #0]
 800fcb2:	b007      	add	sp, #28
 800fcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb6:	6823      	ldr	r3, [r4, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <quorem+0x104>
 800fcbc:	3f01      	subs	r7, #1
 800fcbe:	9b01      	ldr	r3, [sp, #4]
 800fcc0:	3c04      	subs	r4, #4
 800fcc2:	42a3      	cmp	r3, r4
 800fcc4:	d3f7      	bcc.n	800fcb6 <quorem+0xf4>
 800fcc6:	6137      	str	r7, [r6, #16]
 800fcc8:	e7c8      	b.n	800fc5c <quorem+0x9a>
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	2a00      	cmp	r2, #0
 800fcce:	d104      	bne.n	800fcda <quorem+0x118>
 800fcd0:	3f01      	subs	r7, #1
 800fcd2:	9a01      	ldr	r2, [sp, #4]
 800fcd4:	3b04      	subs	r3, #4
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d3f7      	bcc.n	800fcca <quorem+0x108>
 800fcda:	6137      	str	r7, [r6, #16]
 800fcdc:	e7e5      	b.n	800fcaa <quorem+0xe8>
	...

0800fce0 <_dtoa_r>:
 800fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce2:	0014      	movs	r4, r2
 800fce4:	001d      	movs	r5, r3
 800fce6:	69c6      	ldr	r6, [r0, #28]
 800fce8:	b09d      	sub	sp, #116	@ 0x74
 800fcea:	940a      	str	r4, [sp, #40]	@ 0x28
 800fcec:	950b      	str	r5, [sp, #44]	@ 0x2c
 800fcee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800fcf0:	9003      	str	r0, [sp, #12]
 800fcf2:	2e00      	cmp	r6, #0
 800fcf4:	d10f      	bne.n	800fd16 <_dtoa_r+0x36>
 800fcf6:	2010      	movs	r0, #16
 800fcf8:	f000 fe30 	bl	801095c <malloc>
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	1e02      	subs	r2, r0, #0
 800fd00:	61d8      	str	r0, [r3, #28]
 800fd02:	d104      	bne.n	800fd0e <_dtoa_r+0x2e>
 800fd04:	21ef      	movs	r1, #239	@ 0xef
 800fd06:	4bc7      	ldr	r3, [pc, #796]	@ (8010024 <_dtoa_r+0x344>)
 800fd08:	48c7      	ldr	r0, [pc, #796]	@ (8010028 <_dtoa_r+0x348>)
 800fd0a:	f001 fb4b 	bl	80113a4 <__assert_func>
 800fd0e:	6046      	str	r6, [r0, #4]
 800fd10:	6086      	str	r6, [r0, #8]
 800fd12:	6006      	str	r6, [r0, #0]
 800fd14:	60c6      	str	r6, [r0, #12]
 800fd16:	9b03      	ldr	r3, [sp, #12]
 800fd18:	69db      	ldr	r3, [r3, #28]
 800fd1a:	6819      	ldr	r1, [r3, #0]
 800fd1c:	2900      	cmp	r1, #0
 800fd1e:	d00b      	beq.n	800fd38 <_dtoa_r+0x58>
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	2301      	movs	r3, #1
 800fd24:	4093      	lsls	r3, r2
 800fd26:	604a      	str	r2, [r1, #4]
 800fd28:	608b      	str	r3, [r1, #8]
 800fd2a:	9803      	ldr	r0, [sp, #12]
 800fd2c:	f000 ff16 	bl	8010b5c <_Bfree>
 800fd30:	2200      	movs	r2, #0
 800fd32:	9b03      	ldr	r3, [sp, #12]
 800fd34:	69db      	ldr	r3, [r3, #28]
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	2d00      	cmp	r5, #0
 800fd3a:	da1e      	bge.n	800fd7a <_dtoa_r+0x9a>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	603b      	str	r3, [r7, #0]
 800fd40:	006b      	lsls	r3, r5, #1
 800fd42:	085b      	lsrs	r3, r3, #1
 800fd44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd46:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fd48:	4bb8      	ldr	r3, [pc, #736]	@ (801002c <_dtoa_r+0x34c>)
 800fd4a:	4ab8      	ldr	r2, [pc, #736]	@ (801002c <_dtoa_r+0x34c>)
 800fd4c:	403b      	ands	r3, r7
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d116      	bne.n	800fd80 <_dtoa_r+0xa0>
 800fd52:	4bb7      	ldr	r3, [pc, #732]	@ (8010030 <_dtoa_r+0x350>)
 800fd54:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fd56:	6013      	str	r3, [r2, #0]
 800fd58:	033b      	lsls	r3, r7, #12
 800fd5a:	0b1b      	lsrs	r3, r3, #12
 800fd5c:	4323      	orrs	r3, r4
 800fd5e:	d101      	bne.n	800fd64 <_dtoa_r+0x84>
 800fd60:	f000 fd83 	bl	801086a <_dtoa_r+0xb8a>
 800fd64:	4bb3      	ldr	r3, [pc, #716]	@ (8010034 <_dtoa_r+0x354>)
 800fd66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fd68:	9308      	str	r3, [sp, #32]
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	d002      	beq.n	800fd74 <_dtoa_r+0x94>
 800fd6e:	4bb2      	ldr	r3, [pc, #712]	@ (8010038 <_dtoa_r+0x358>)
 800fd70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	9808      	ldr	r0, [sp, #32]
 800fd76:	b01d      	add	sp, #116	@ 0x74
 800fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	603b      	str	r3, [r7, #0]
 800fd7e:	e7e2      	b.n	800fd46 <_dtoa_r+0x66>
 800fd80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd84:	9212      	str	r2, [sp, #72]	@ 0x48
 800fd86:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fd8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f7f0 fb5c 	bl	800044c <__aeabi_dcmpeq>
 800fd94:	1e06      	subs	r6, r0, #0
 800fd96:	d00b      	beq.n	800fdb0 <_dtoa_r+0xd0>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fd9c:	6013      	str	r3, [r2, #0]
 800fd9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <_dtoa_r+0xca>
 800fda4:	4ba5      	ldr	r3, [pc, #660]	@ (801003c <_dtoa_r+0x35c>)
 800fda6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fda8:	6013      	str	r3, [r2, #0]
 800fdaa:	4ba5      	ldr	r3, [pc, #660]	@ (8010040 <_dtoa_r+0x360>)
 800fdac:	9308      	str	r3, [sp, #32]
 800fdae:	e7e1      	b.n	800fd74 <_dtoa_r+0x94>
 800fdb0:	ab1a      	add	r3, sp, #104	@ 0x68
 800fdb2:	9301      	str	r3, [sp, #4]
 800fdb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	9803      	ldr	r0, [sp, #12]
 800fdba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fdbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fdbe:	f001 f9cd 	bl	801115c <__d2b>
 800fdc2:	007a      	lsls	r2, r7, #1
 800fdc4:	9005      	str	r0, [sp, #20]
 800fdc6:	0d52      	lsrs	r2, r2, #21
 800fdc8:	d100      	bne.n	800fdcc <_dtoa_r+0xec>
 800fdca:	e07b      	b.n	800fec4 <_dtoa_r+0x1e4>
 800fdcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fdce:	9618      	str	r6, [sp, #96]	@ 0x60
 800fdd0:	0319      	lsls	r1, r3, #12
 800fdd2:	4b9c      	ldr	r3, [pc, #624]	@ (8010044 <_dtoa_r+0x364>)
 800fdd4:	0b09      	lsrs	r1, r1, #12
 800fdd6:	430b      	orrs	r3, r1
 800fdd8:	499b      	ldr	r1, [pc, #620]	@ (8010048 <_dtoa_r+0x368>)
 800fdda:	1857      	adds	r7, r2, r1
 800fddc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fdde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fde0:	0019      	movs	r1, r3
 800fde2:	2200      	movs	r2, #0
 800fde4:	4b99      	ldr	r3, [pc, #612]	@ (801004c <_dtoa_r+0x36c>)
 800fde6:	f7f1 fdcf 	bl	8001988 <__aeabi_dsub>
 800fdea:	4a99      	ldr	r2, [pc, #612]	@ (8010050 <_dtoa_r+0x370>)
 800fdec:	4b99      	ldr	r3, [pc, #612]	@ (8010054 <_dtoa_r+0x374>)
 800fdee:	f7f1 fb03 	bl	80013f8 <__aeabi_dmul>
 800fdf2:	4a99      	ldr	r2, [pc, #612]	@ (8010058 <_dtoa_r+0x378>)
 800fdf4:	4b99      	ldr	r3, [pc, #612]	@ (801005c <_dtoa_r+0x37c>)
 800fdf6:	f7f0 fb57 	bl	80004a8 <__aeabi_dadd>
 800fdfa:	0004      	movs	r4, r0
 800fdfc:	0038      	movs	r0, r7
 800fdfe:	000d      	movs	r5, r1
 800fe00:	f7f2 f9bc 	bl	800217c <__aeabi_i2d>
 800fe04:	4a96      	ldr	r2, [pc, #600]	@ (8010060 <_dtoa_r+0x380>)
 800fe06:	4b97      	ldr	r3, [pc, #604]	@ (8010064 <_dtoa_r+0x384>)
 800fe08:	f7f1 faf6 	bl	80013f8 <__aeabi_dmul>
 800fe0c:	0002      	movs	r2, r0
 800fe0e:	000b      	movs	r3, r1
 800fe10:	0020      	movs	r0, r4
 800fe12:	0029      	movs	r1, r5
 800fe14:	f7f0 fb48 	bl	80004a8 <__aeabi_dadd>
 800fe18:	0004      	movs	r4, r0
 800fe1a:	000d      	movs	r5, r1
 800fe1c:	f7f2 f972 	bl	8002104 <__aeabi_d2iz>
 800fe20:	2200      	movs	r2, #0
 800fe22:	9004      	str	r0, [sp, #16]
 800fe24:	2300      	movs	r3, #0
 800fe26:	0020      	movs	r0, r4
 800fe28:	0029      	movs	r1, r5
 800fe2a:	f7f0 fb15 	bl	8000458 <__aeabi_dcmplt>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d00b      	beq.n	800fe4a <_dtoa_r+0x16a>
 800fe32:	9804      	ldr	r0, [sp, #16]
 800fe34:	f7f2 f9a2 	bl	800217c <__aeabi_i2d>
 800fe38:	002b      	movs	r3, r5
 800fe3a:	0022      	movs	r2, r4
 800fe3c:	f7f0 fb06 	bl	800044c <__aeabi_dcmpeq>
 800fe40:	4243      	negs	r3, r0
 800fe42:	4158      	adcs	r0, r3
 800fe44:	9b04      	ldr	r3, [sp, #16]
 800fe46:	1a1b      	subs	r3, r3, r0
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe4e:	9b04      	ldr	r3, [sp, #16]
 800fe50:	2b16      	cmp	r3, #22
 800fe52:	d810      	bhi.n	800fe76 <_dtoa_r+0x196>
 800fe54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fe56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fe58:	9a04      	ldr	r2, [sp, #16]
 800fe5a:	4b83      	ldr	r3, [pc, #524]	@ (8010068 <_dtoa_r+0x388>)
 800fe5c:	00d2      	lsls	r2, r2, #3
 800fe5e:	189b      	adds	r3, r3, r2
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	f7f0 faf8 	bl	8000458 <__aeabi_dcmplt>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d047      	beq.n	800fefc <_dtoa_r+0x21c>
 800fe6c:	9b04      	ldr	r3, [sp, #16]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	2300      	movs	r3, #0
 800fe74:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe76:	2200      	movs	r2, #0
 800fe78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fe7a:	9206      	str	r2, [sp, #24]
 800fe7c:	1bdb      	subs	r3, r3, r7
 800fe7e:	1e5a      	subs	r2, r3, #1
 800fe80:	d53e      	bpl.n	800ff00 <_dtoa_r+0x220>
 800fe82:	2201      	movs	r2, #1
 800fe84:	1ad3      	subs	r3, r2, r3
 800fe86:	9306      	str	r3, [sp, #24]
 800fe88:	2300      	movs	r3, #0
 800fe8a:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe8c:	9b04      	ldr	r3, [sp, #16]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	db38      	blt.n	800ff04 <_dtoa_r+0x224>
 800fe92:	9a04      	ldr	r2, [sp, #16]
 800fe94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe96:	4694      	mov	ip, r2
 800fe98:	4463      	add	r3, ip
 800fe9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9214      	str	r2, [sp, #80]	@ 0x50
 800fea0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fea2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fea4:	2401      	movs	r4, #1
 800fea6:	2b09      	cmp	r3, #9
 800fea8:	d867      	bhi.n	800ff7a <_dtoa_r+0x29a>
 800feaa:	2b05      	cmp	r3, #5
 800feac:	dd02      	ble.n	800feb4 <_dtoa_r+0x1d4>
 800feae:	2400      	movs	r4, #0
 800feb0:	3b04      	subs	r3, #4
 800feb2:	9322      	str	r3, [sp, #136]	@ 0x88
 800feb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800feb6:	1e98      	subs	r0, r3, #2
 800feb8:	2803      	cmp	r0, #3
 800feba:	d867      	bhi.n	800ff8c <_dtoa_r+0x2ac>
 800febc:	f7f0 f92c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800fec0:	5b383a2b 	.word	0x5b383a2b
 800fec4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fec6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800fec8:	18f6      	adds	r6, r6, r3
 800feca:	4b68      	ldr	r3, [pc, #416]	@ (801006c <_dtoa_r+0x38c>)
 800fecc:	18f2      	adds	r2, r6, r3
 800fece:	2a20      	cmp	r2, #32
 800fed0:	dd0f      	ble.n	800fef2 <_dtoa_r+0x212>
 800fed2:	2340      	movs	r3, #64	@ 0x40
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	409f      	lsls	r7, r3
 800fed8:	4b65      	ldr	r3, [pc, #404]	@ (8010070 <_dtoa_r+0x390>)
 800feda:	0038      	movs	r0, r7
 800fedc:	18f3      	adds	r3, r6, r3
 800fede:	40dc      	lsrs	r4, r3
 800fee0:	4320      	orrs	r0, r4
 800fee2:	f7f2 f979 	bl	80021d8 <__aeabi_ui2d>
 800fee6:	2201      	movs	r2, #1
 800fee8:	4b62      	ldr	r3, [pc, #392]	@ (8010074 <_dtoa_r+0x394>)
 800feea:	1e77      	subs	r7, r6, #1
 800feec:	18cb      	adds	r3, r1, r3
 800feee:	9218      	str	r2, [sp, #96]	@ 0x60
 800fef0:	e776      	b.n	800fde0 <_dtoa_r+0x100>
 800fef2:	2320      	movs	r3, #32
 800fef4:	0020      	movs	r0, r4
 800fef6:	1a9b      	subs	r3, r3, r2
 800fef8:	4098      	lsls	r0, r3
 800fefa:	e7f2      	b.n	800fee2 <_dtoa_r+0x202>
 800fefc:	9015      	str	r0, [sp, #84]	@ 0x54
 800fefe:	e7ba      	b.n	800fe76 <_dtoa_r+0x196>
 800ff00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ff02:	e7c3      	b.n	800fe8c <_dtoa_r+0x1ac>
 800ff04:	9b06      	ldr	r3, [sp, #24]
 800ff06:	9a04      	ldr	r2, [sp, #16]
 800ff08:	1a9b      	subs	r3, r3, r2
 800ff0a:	9306      	str	r3, [sp, #24]
 800ff0c:	4253      	negs	r3, r2
 800ff0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff10:	2300      	movs	r3, #0
 800ff12:	9314      	str	r3, [sp, #80]	@ 0x50
 800ff14:	e7c5      	b.n	800fea2 <_dtoa_r+0x1c2>
 800ff16:	2300      	movs	r3, #0
 800ff18:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff1c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ff1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dc13      	bgt.n	800ff4c <_dtoa_r+0x26c>
 800ff24:	2301      	movs	r3, #1
 800ff26:	001a      	movs	r2, r3
 800ff28:	930e      	str	r3, [sp, #56]	@ 0x38
 800ff2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff2c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800ff2e:	e00d      	b.n	800ff4c <_dtoa_r+0x26c>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7f1      	b.n	800ff18 <_dtoa_r+0x238>
 800ff34:	2300      	movs	r3, #0
 800ff36:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ff38:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff3a:	4694      	mov	ip, r2
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	4463      	add	r3, ip
 800ff40:	930e      	str	r3, [sp, #56]	@ 0x38
 800ff42:	3301      	adds	r3, #1
 800ff44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dc00      	bgt.n	800ff4c <_dtoa_r+0x26c>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	9a03      	ldr	r2, [sp, #12]
 800ff4e:	2100      	movs	r1, #0
 800ff50:	69d0      	ldr	r0, [r2, #28]
 800ff52:	2204      	movs	r2, #4
 800ff54:	0015      	movs	r5, r2
 800ff56:	3514      	adds	r5, #20
 800ff58:	429d      	cmp	r5, r3
 800ff5a:	d91b      	bls.n	800ff94 <_dtoa_r+0x2b4>
 800ff5c:	6041      	str	r1, [r0, #4]
 800ff5e:	9803      	ldr	r0, [sp, #12]
 800ff60:	f000 fdb8 	bl	8010ad4 <_Balloc>
 800ff64:	9008      	str	r0, [sp, #32]
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d117      	bne.n	800ff9a <_dtoa_r+0x2ba>
 800ff6a:	21b0      	movs	r1, #176	@ 0xb0
 800ff6c:	4b42      	ldr	r3, [pc, #264]	@ (8010078 <_dtoa_r+0x398>)
 800ff6e:	482e      	ldr	r0, [pc, #184]	@ (8010028 <_dtoa_r+0x348>)
 800ff70:	9a08      	ldr	r2, [sp, #32]
 800ff72:	31ff      	adds	r1, #255	@ 0xff
 800ff74:	e6c9      	b.n	800fd0a <_dtoa_r+0x2a>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e7dd      	b.n	800ff36 <_dtoa_r+0x256>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	9410      	str	r4, [sp, #64]	@ 0x40
 800ff7e:	9322      	str	r3, [sp, #136]	@ 0x88
 800ff80:	3b01      	subs	r3, #1
 800ff82:	930e      	str	r3, [sp, #56]	@ 0x38
 800ff84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff86:	2200      	movs	r2, #0
 800ff88:	3313      	adds	r3, #19
 800ff8a:	e7cf      	b.n	800ff2c <_dtoa_r+0x24c>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff90:	3b02      	subs	r3, #2
 800ff92:	e7f6      	b.n	800ff82 <_dtoa_r+0x2a2>
 800ff94:	3101      	adds	r1, #1
 800ff96:	0052      	lsls	r2, r2, #1
 800ff98:	e7dc      	b.n	800ff54 <_dtoa_r+0x274>
 800ff9a:	9b03      	ldr	r3, [sp, #12]
 800ff9c:	9a08      	ldr	r2, [sp, #32]
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	601a      	str	r2, [r3, #0]
 800ffa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffa4:	2b0e      	cmp	r3, #14
 800ffa6:	d900      	bls.n	800ffaa <_dtoa_r+0x2ca>
 800ffa8:	e0d9      	b.n	801015e <_dtoa_r+0x47e>
 800ffaa:	2c00      	cmp	r4, #0
 800ffac:	d100      	bne.n	800ffb0 <_dtoa_r+0x2d0>
 800ffae:	e0d6      	b.n	801015e <_dtoa_r+0x47e>
 800ffb0:	9b04      	ldr	r3, [sp, #16]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	dd64      	ble.n	8010080 <_dtoa_r+0x3a0>
 800ffb6:	210f      	movs	r1, #15
 800ffb8:	9a04      	ldr	r2, [sp, #16]
 800ffba:	4b2b      	ldr	r3, [pc, #172]	@ (8010068 <_dtoa_r+0x388>)
 800ffbc:	400a      	ands	r2, r1
 800ffbe:	00d2      	lsls	r2, r2, #3
 800ffc0:	189b      	adds	r3, r3, r2
 800ffc2:	681e      	ldr	r6, [r3, #0]
 800ffc4:	685f      	ldr	r7, [r3, #4]
 800ffc6:	9b04      	ldr	r3, [sp, #16]
 800ffc8:	2402      	movs	r4, #2
 800ffca:	111d      	asrs	r5, r3, #4
 800ffcc:	05db      	lsls	r3, r3, #23
 800ffce:	d50a      	bpl.n	800ffe6 <_dtoa_r+0x306>
 800ffd0:	4b2a      	ldr	r3, [pc, #168]	@ (801007c <_dtoa_r+0x39c>)
 800ffd2:	400d      	ands	r5, r1
 800ffd4:	6a1a      	ldr	r2, [r3, #32]
 800ffd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ffda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ffdc:	f7f0 fdc8 	bl	8000b70 <__aeabi_ddiv>
 800ffe0:	900a      	str	r0, [sp, #40]	@ 0x28
 800ffe2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ffe4:	3401      	adds	r4, #1
 800ffe6:	4b25      	ldr	r3, [pc, #148]	@ (801007c <_dtoa_r+0x39c>)
 800ffe8:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffea:	2d00      	cmp	r5, #0
 800ffec:	d108      	bne.n	8010000 <_dtoa_r+0x320>
 800ffee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fff2:	0032      	movs	r2, r6
 800fff4:	003b      	movs	r3, r7
 800fff6:	f7f0 fdbb 	bl	8000b70 <__aeabi_ddiv>
 800fffa:	900a      	str	r0, [sp, #40]	@ 0x28
 800fffc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fffe:	e05a      	b.n	80100b6 <_dtoa_r+0x3d6>
 8010000:	2301      	movs	r3, #1
 8010002:	421d      	tst	r5, r3
 8010004:	d009      	beq.n	801001a <_dtoa_r+0x33a>
 8010006:	18e4      	adds	r4, r4, r3
 8010008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801000a:	0030      	movs	r0, r6
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	0039      	movs	r1, r7
 8010012:	f7f1 f9f1 	bl	80013f8 <__aeabi_dmul>
 8010016:	0006      	movs	r6, r0
 8010018:	000f      	movs	r7, r1
 801001a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801001c:	106d      	asrs	r5, r5, #1
 801001e:	3308      	adds	r3, #8
 8010020:	e7e2      	b.n	800ffe8 <_dtoa_r+0x308>
 8010022:	46c0      	nop			@ (mov r8, r8)
 8010024:	08011d17 	.word	0x08011d17
 8010028:	08011d2e 	.word	0x08011d2e
 801002c:	7ff00000 	.word	0x7ff00000
 8010030:	0000270f 	.word	0x0000270f
 8010034:	08011d13 	.word	0x08011d13
 8010038:	08011d16 	.word	0x08011d16
 801003c:	08011ce7 	.word	0x08011ce7
 8010040:	08011ce6 	.word	0x08011ce6
 8010044:	3ff00000 	.word	0x3ff00000
 8010048:	fffffc01 	.word	0xfffffc01
 801004c:	3ff80000 	.word	0x3ff80000
 8010050:	636f4361 	.word	0x636f4361
 8010054:	3fd287a7 	.word	0x3fd287a7
 8010058:	8b60c8b3 	.word	0x8b60c8b3
 801005c:	3fc68a28 	.word	0x3fc68a28
 8010060:	509f79fb 	.word	0x509f79fb
 8010064:	3fd34413 	.word	0x3fd34413
 8010068:	08011e28 	.word	0x08011e28
 801006c:	00000432 	.word	0x00000432
 8010070:	00000412 	.word	0x00000412
 8010074:	fe100000 	.word	0xfe100000
 8010078:	08011d86 	.word	0x08011d86
 801007c:	08011e00 	.word	0x08011e00
 8010080:	9b04      	ldr	r3, [sp, #16]
 8010082:	2402      	movs	r4, #2
 8010084:	2b00      	cmp	r3, #0
 8010086:	d016      	beq.n	80100b6 <_dtoa_r+0x3d6>
 8010088:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801008a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801008c:	220f      	movs	r2, #15
 801008e:	425d      	negs	r5, r3
 8010090:	402a      	ands	r2, r5
 8010092:	4bd7      	ldr	r3, [pc, #860]	@ (80103f0 <_dtoa_r+0x710>)
 8010094:	00d2      	lsls	r2, r2, #3
 8010096:	189b      	adds	r3, r3, r2
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f7f1 f9ac 	bl	80013f8 <__aeabi_dmul>
 80100a0:	2701      	movs	r7, #1
 80100a2:	2300      	movs	r3, #0
 80100a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80100a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80100a8:	4ed2      	ldr	r6, [pc, #840]	@ (80103f4 <_dtoa_r+0x714>)
 80100aa:	112d      	asrs	r5, r5, #4
 80100ac:	2d00      	cmp	r5, #0
 80100ae:	d000      	beq.n	80100b2 <_dtoa_r+0x3d2>
 80100b0:	e0ba      	b.n	8010228 <_dtoa_r+0x548>
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1a1      	bne.n	800fffa <_dtoa_r+0x31a>
 80100b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80100b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80100ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d100      	bne.n	80100c2 <_dtoa_r+0x3e2>
 80100c0:	e0bd      	b.n	801023e <_dtoa_r+0x55e>
 80100c2:	2200      	movs	r2, #0
 80100c4:	0030      	movs	r0, r6
 80100c6:	0039      	movs	r1, r7
 80100c8:	4bcb      	ldr	r3, [pc, #812]	@ (80103f8 <_dtoa_r+0x718>)
 80100ca:	f7f0 f9c5 	bl	8000458 <__aeabi_dcmplt>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d100      	bne.n	80100d4 <_dtoa_r+0x3f4>
 80100d2:	e0b4      	b.n	801023e <_dtoa_r+0x55e>
 80100d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d100      	bne.n	80100dc <_dtoa_r+0x3fc>
 80100da:	e0b0      	b.n	801023e <_dtoa_r+0x55e>
 80100dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100de:	2b00      	cmp	r3, #0
 80100e0:	dd39      	ble.n	8010156 <_dtoa_r+0x476>
 80100e2:	9b04      	ldr	r3, [sp, #16]
 80100e4:	2200      	movs	r2, #0
 80100e6:	3b01      	subs	r3, #1
 80100e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80100ea:	0030      	movs	r0, r6
 80100ec:	4bc3      	ldr	r3, [pc, #780]	@ (80103fc <_dtoa_r+0x71c>)
 80100ee:	0039      	movs	r1, r7
 80100f0:	f7f1 f982 	bl	80013f8 <__aeabi_dmul>
 80100f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80100f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80100f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100fa:	3401      	adds	r4, #1
 80100fc:	0020      	movs	r0, r4
 80100fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8010100:	f7f2 f83c 	bl	800217c <__aeabi_i2d>
 8010104:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010108:	f7f1 f976 	bl	80013f8 <__aeabi_dmul>
 801010c:	4bbc      	ldr	r3, [pc, #752]	@ (8010400 <_dtoa_r+0x720>)
 801010e:	2200      	movs	r2, #0
 8010110:	f7f0 f9ca 	bl	80004a8 <__aeabi_dadd>
 8010114:	4bbb      	ldr	r3, [pc, #748]	@ (8010404 <_dtoa_r+0x724>)
 8010116:	0006      	movs	r6, r0
 8010118:	18cf      	adds	r7, r1, r3
 801011a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801011c:	2b00      	cmp	r3, #0
 801011e:	d000      	beq.n	8010122 <_dtoa_r+0x442>
 8010120:	e091      	b.n	8010246 <_dtoa_r+0x566>
 8010122:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010124:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010126:	2200      	movs	r2, #0
 8010128:	4bb7      	ldr	r3, [pc, #732]	@ (8010408 <_dtoa_r+0x728>)
 801012a:	f7f1 fc2d 	bl	8001988 <__aeabi_dsub>
 801012e:	0032      	movs	r2, r6
 8010130:	003b      	movs	r3, r7
 8010132:	0004      	movs	r4, r0
 8010134:	000d      	movs	r5, r1
 8010136:	f7f0 f9a3 	bl	8000480 <__aeabi_dcmpgt>
 801013a:	2800      	cmp	r0, #0
 801013c:	d000      	beq.n	8010140 <_dtoa_r+0x460>
 801013e:	e29d      	b.n	801067c <_dtoa_r+0x99c>
 8010140:	2180      	movs	r1, #128	@ 0x80
 8010142:	0609      	lsls	r1, r1, #24
 8010144:	187b      	adds	r3, r7, r1
 8010146:	0032      	movs	r2, r6
 8010148:	0020      	movs	r0, r4
 801014a:	0029      	movs	r1, r5
 801014c:	f7f0 f984 	bl	8000458 <__aeabi_dcmplt>
 8010150:	2800      	cmp	r0, #0
 8010152:	d000      	beq.n	8010156 <_dtoa_r+0x476>
 8010154:	e130      	b.n	80103b8 <_dtoa_r+0x6d8>
 8010156:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010158:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801015a:	930a      	str	r3, [sp, #40]	@ 0x28
 801015c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801015e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010160:	2b00      	cmp	r3, #0
 8010162:	da00      	bge.n	8010166 <_dtoa_r+0x486>
 8010164:	e177      	b.n	8010456 <_dtoa_r+0x776>
 8010166:	9a04      	ldr	r2, [sp, #16]
 8010168:	2a0e      	cmp	r2, #14
 801016a:	dd00      	ble.n	801016e <_dtoa_r+0x48e>
 801016c:	e173      	b.n	8010456 <_dtoa_r+0x776>
 801016e:	4ba0      	ldr	r3, [pc, #640]	@ (80103f0 <_dtoa_r+0x710>)
 8010170:	00d2      	lsls	r2, r2, #3
 8010172:	189b      	adds	r3, r3, r2
 8010174:	685c      	ldr	r4, [r3, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	9306      	str	r3, [sp, #24]
 801017a:	9407      	str	r4, [sp, #28]
 801017c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801017e:	2b00      	cmp	r3, #0
 8010180:	da03      	bge.n	801018a <_dtoa_r+0x4aa>
 8010182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010184:	2b00      	cmp	r3, #0
 8010186:	dc00      	bgt.n	801018a <_dtoa_r+0x4aa>
 8010188:	e106      	b.n	8010398 <_dtoa_r+0x6b8>
 801018a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801018c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801018e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010190:	9d08      	ldr	r5, [sp, #32]
 8010192:	3b01      	subs	r3, #1
 8010194:	195b      	adds	r3, r3, r5
 8010196:	930a      	str	r3, [sp, #40]	@ 0x28
 8010198:	9a06      	ldr	r2, [sp, #24]
 801019a:	9b07      	ldr	r3, [sp, #28]
 801019c:	0030      	movs	r0, r6
 801019e:	0039      	movs	r1, r7
 80101a0:	f7f0 fce6 	bl	8000b70 <__aeabi_ddiv>
 80101a4:	f7f1 ffae 	bl	8002104 <__aeabi_d2iz>
 80101a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80101aa:	f7f1 ffe7 	bl	800217c <__aeabi_i2d>
 80101ae:	9a06      	ldr	r2, [sp, #24]
 80101b0:	9b07      	ldr	r3, [sp, #28]
 80101b2:	f7f1 f921 	bl	80013f8 <__aeabi_dmul>
 80101b6:	0002      	movs	r2, r0
 80101b8:	000b      	movs	r3, r1
 80101ba:	0030      	movs	r0, r6
 80101bc:	0039      	movs	r1, r7
 80101be:	f7f1 fbe3 	bl	8001988 <__aeabi_dsub>
 80101c2:	002b      	movs	r3, r5
 80101c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101c6:	3501      	adds	r5, #1
 80101c8:	3230      	adds	r2, #48	@ 0x30
 80101ca:	701a      	strb	r2, [r3, #0]
 80101cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80101ce:	002c      	movs	r4, r5
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d000      	beq.n	80101d6 <_dtoa_r+0x4f6>
 80101d4:	e131      	b.n	801043a <_dtoa_r+0x75a>
 80101d6:	0002      	movs	r2, r0
 80101d8:	000b      	movs	r3, r1
 80101da:	f7f0 f965 	bl	80004a8 <__aeabi_dadd>
 80101de:	9a06      	ldr	r2, [sp, #24]
 80101e0:	9b07      	ldr	r3, [sp, #28]
 80101e2:	0006      	movs	r6, r0
 80101e4:	000f      	movs	r7, r1
 80101e6:	f7f0 f94b 	bl	8000480 <__aeabi_dcmpgt>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d000      	beq.n	80101f0 <_dtoa_r+0x510>
 80101ee:	e10f      	b.n	8010410 <_dtoa_r+0x730>
 80101f0:	9a06      	ldr	r2, [sp, #24]
 80101f2:	9b07      	ldr	r3, [sp, #28]
 80101f4:	0030      	movs	r0, r6
 80101f6:	0039      	movs	r1, r7
 80101f8:	f7f0 f928 	bl	800044c <__aeabi_dcmpeq>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d003      	beq.n	8010208 <_dtoa_r+0x528>
 8010200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010202:	07dd      	lsls	r5, r3, #31
 8010204:	d500      	bpl.n	8010208 <_dtoa_r+0x528>
 8010206:	e103      	b.n	8010410 <_dtoa_r+0x730>
 8010208:	9905      	ldr	r1, [sp, #20]
 801020a:	9803      	ldr	r0, [sp, #12]
 801020c:	f000 fca6 	bl	8010b5c <_Bfree>
 8010210:	2300      	movs	r3, #0
 8010212:	7023      	strb	r3, [r4, #0]
 8010214:	9b04      	ldr	r3, [sp, #16]
 8010216:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010218:	3301      	adds	r3, #1
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801021e:	2b00      	cmp	r3, #0
 8010220:	d100      	bne.n	8010224 <_dtoa_r+0x544>
 8010222:	e5a7      	b.n	800fd74 <_dtoa_r+0x94>
 8010224:	601c      	str	r4, [r3, #0]
 8010226:	e5a5      	b.n	800fd74 <_dtoa_r+0x94>
 8010228:	423d      	tst	r5, r7
 801022a:	d005      	beq.n	8010238 <_dtoa_r+0x558>
 801022c:	6832      	ldr	r2, [r6, #0]
 801022e:	6873      	ldr	r3, [r6, #4]
 8010230:	f7f1 f8e2 	bl	80013f8 <__aeabi_dmul>
 8010234:	003b      	movs	r3, r7
 8010236:	3401      	adds	r4, #1
 8010238:	106d      	asrs	r5, r5, #1
 801023a:	3608      	adds	r6, #8
 801023c:	e736      	b.n	80100ac <_dtoa_r+0x3cc>
 801023e:	9b04      	ldr	r3, [sp, #16]
 8010240:	930c      	str	r3, [sp, #48]	@ 0x30
 8010242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010244:	e75a      	b.n	80100fc <_dtoa_r+0x41c>
 8010246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010248:	4b69      	ldr	r3, [pc, #420]	@ (80103f0 <_dtoa_r+0x710>)
 801024a:	3a01      	subs	r2, #1
 801024c:	00d2      	lsls	r2, r2, #3
 801024e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010250:	189b      	adds	r3, r3, r2
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	2900      	cmp	r1, #0
 8010258:	d04c      	beq.n	80102f4 <_dtoa_r+0x614>
 801025a:	2000      	movs	r0, #0
 801025c:	496b      	ldr	r1, [pc, #428]	@ (801040c <_dtoa_r+0x72c>)
 801025e:	f7f0 fc87 	bl	8000b70 <__aeabi_ddiv>
 8010262:	0032      	movs	r2, r6
 8010264:	003b      	movs	r3, r7
 8010266:	f7f1 fb8f 	bl	8001988 <__aeabi_dsub>
 801026a:	9a08      	ldr	r2, [sp, #32]
 801026c:	0006      	movs	r6, r0
 801026e:	4694      	mov	ip, r2
 8010270:	000f      	movs	r7, r1
 8010272:	9b08      	ldr	r3, [sp, #32]
 8010274:	9316      	str	r3, [sp, #88]	@ 0x58
 8010276:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010278:	4463      	add	r3, ip
 801027a:	9311      	str	r3, [sp, #68]	@ 0x44
 801027c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801027e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010280:	f7f1 ff40 	bl	8002104 <__aeabi_d2iz>
 8010284:	0005      	movs	r5, r0
 8010286:	f7f1 ff79 	bl	800217c <__aeabi_i2d>
 801028a:	0002      	movs	r2, r0
 801028c:	000b      	movs	r3, r1
 801028e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010292:	f7f1 fb79 	bl	8001988 <__aeabi_dsub>
 8010296:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010298:	3530      	adds	r5, #48	@ 0x30
 801029a:	1c5c      	adds	r4, r3, #1
 801029c:	701d      	strb	r5, [r3, #0]
 801029e:	0032      	movs	r2, r6
 80102a0:	003b      	movs	r3, r7
 80102a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80102a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80102a6:	f7f0 f8d7 	bl	8000458 <__aeabi_dcmplt>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d16a      	bne.n	8010384 <_dtoa_r+0x6a4>
 80102ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102b2:	2000      	movs	r0, #0
 80102b4:	4950      	ldr	r1, [pc, #320]	@ (80103f8 <_dtoa_r+0x718>)
 80102b6:	f7f1 fb67 	bl	8001988 <__aeabi_dsub>
 80102ba:	0032      	movs	r2, r6
 80102bc:	003b      	movs	r3, r7
 80102be:	f7f0 f8cb 	bl	8000458 <__aeabi_dcmplt>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d000      	beq.n	80102c8 <_dtoa_r+0x5e8>
 80102c6:	e0a5      	b.n	8010414 <_dtoa_r+0x734>
 80102c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80102ca:	42a3      	cmp	r3, r4
 80102cc:	d100      	bne.n	80102d0 <_dtoa_r+0x5f0>
 80102ce:	e742      	b.n	8010156 <_dtoa_r+0x476>
 80102d0:	2200      	movs	r2, #0
 80102d2:	0030      	movs	r0, r6
 80102d4:	0039      	movs	r1, r7
 80102d6:	4b49      	ldr	r3, [pc, #292]	@ (80103fc <_dtoa_r+0x71c>)
 80102d8:	f7f1 f88e 	bl	80013f8 <__aeabi_dmul>
 80102dc:	2200      	movs	r2, #0
 80102de:	0006      	movs	r6, r0
 80102e0:	000f      	movs	r7, r1
 80102e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80102e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80102e6:	4b45      	ldr	r3, [pc, #276]	@ (80103fc <_dtoa_r+0x71c>)
 80102e8:	f7f1 f886 	bl	80013f8 <__aeabi_dmul>
 80102ec:	9416      	str	r4, [sp, #88]	@ 0x58
 80102ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80102f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80102f2:	e7c3      	b.n	801027c <_dtoa_r+0x59c>
 80102f4:	0030      	movs	r0, r6
 80102f6:	0039      	movs	r1, r7
 80102f8:	f7f1 f87e 	bl	80013f8 <__aeabi_dmul>
 80102fc:	9d08      	ldr	r5, [sp, #32]
 80102fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010300:	002b      	movs	r3, r5
 8010302:	4694      	mov	ip, r2
 8010304:	9016      	str	r0, [sp, #88]	@ 0x58
 8010306:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010308:	4463      	add	r3, ip
 801030a:	9319      	str	r3, [sp, #100]	@ 0x64
 801030c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801030e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010310:	f7f1 fef8 	bl	8002104 <__aeabi_d2iz>
 8010314:	0004      	movs	r4, r0
 8010316:	f7f1 ff31 	bl	800217c <__aeabi_i2d>
 801031a:	000b      	movs	r3, r1
 801031c:	0002      	movs	r2, r0
 801031e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010322:	f7f1 fb31 	bl	8001988 <__aeabi_dsub>
 8010326:	3430      	adds	r4, #48	@ 0x30
 8010328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801032a:	702c      	strb	r4, [r5, #0]
 801032c:	3501      	adds	r5, #1
 801032e:	0006      	movs	r6, r0
 8010330:	000f      	movs	r7, r1
 8010332:	42ab      	cmp	r3, r5
 8010334:	d129      	bne.n	801038a <_dtoa_r+0x6aa>
 8010336:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010338:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801033a:	9b08      	ldr	r3, [sp, #32]
 801033c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801033e:	469c      	mov	ip, r3
 8010340:	2200      	movs	r2, #0
 8010342:	4b32      	ldr	r3, [pc, #200]	@ (801040c <_dtoa_r+0x72c>)
 8010344:	4464      	add	r4, ip
 8010346:	f7f0 f8af 	bl	80004a8 <__aeabi_dadd>
 801034a:	0002      	movs	r2, r0
 801034c:	000b      	movs	r3, r1
 801034e:	0030      	movs	r0, r6
 8010350:	0039      	movs	r1, r7
 8010352:	f7f0 f895 	bl	8000480 <__aeabi_dcmpgt>
 8010356:	2800      	cmp	r0, #0
 8010358:	d15c      	bne.n	8010414 <_dtoa_r+0x734>
 801035a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801035c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801035e:	2000      	movs	r0, #0
 8010360:	492a      	ldr	r1, [pc, #168]	@ (801040c <_dtoa_r+0x72c>)
 8010362:	f7f1 fb11 	bl	8001988 <__aeabi_dsub>
 8010366:	0002      	movs	r2, r0
 8010368:	000b      	movs	r3, r1
 801036a:	0030      	movs	r0, r6
 801036c:	0039      	movs	r1, r7
 801036e:	f7f0 f873 	bl	8000458 <__aeabi_dcmplt>
 8010372:	2800      	cmp	r0, #0
 8010374:	d100      	bne.n	8010378 <_dtoa_r+0x698>
 8010376:	e6ee      	b.n	8010156 <_dtoa_r+0x476>
 8010378:	0023      	movs	r3, r4
 801037a:	3c01      	subs	r4, #1
 801037c:	7822      	ldrb	r2, [r4, #0]
 801037e:	2a30      	cmp	r2, #48	@ 0x30
 8010380:	d0fa      	beq.n	8010378 <_dtoa_r+0x698>
 8010382:	001c      	movs	r4, r3
 8010384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010386:	9304      	str	r3, [sp, #16]
 8010388:	e73e      	b.n	8010208 <_dtoa_r+0x528>
 801038a:	2200      	movs	r2, #0
 801038c:	4b1b      	ldr	r3, [pc, #108]	@ (80103fc <_dtoa_r+0x71c>)
 801038e:	f7f1 f833 	bl	80013f8 <__aeabi_dmul>
 8010392:	900a      	str	r0, [sp, #40]	@ 0x28
 8010394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010396:	e7b9      	b.n	801030c <_dtoa_r+0x62c>
 8010398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039a:	2b00      	cmp	r3, #0
 801039c:	d10c      	bne.n	80103b8 <_dtoa_r+0x6d8>
 801039e:	9806      	ldr	r0, [sp, #24]
 80103a0:	9907      	ldr	r1, [sp, #28]
 80103a2:	2200      	movs	r2, #0
 80103a4:	4b18      	ldr	r3, [pc, #96]	@ (8010408 <_dtoa_r+0x728>)
 80103a6:	f7f1 f827 	bl	80013f8 <__aeabi_dmul>
 80103aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103ae:	f7f0 f871 	bl	8000494 <__aeabi_dcmpge>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d100      	bne.n	80103b8 <_dtoa_r+0x6d8>
 80103b6:	e164      	b.n	8010682 <_dtoa_r+0x9a2>
 80103b8:	2600      	movs	r6, #0
 80103ba:	0037      	movs	r7, r6
 80103bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103be:	9c08      	ldr	r4, [sp, #32]
 80103c0:	43db      	mvns	r3, r3
 80103c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80103c4:	2300      	movs	r3, #0
 80103c6:	9304      	str	r3, [sp, #16]
 80103c8:	0031      	movs	r1, r6
 80103ca:	9803      	ldr	r0, [sp, #12]
 80103cc:	f000 fbc6 	bl	8010b5c <_Bfree>
 80103d0:	2f00      	cmp	r7, #0
 80103d2:	d0d7      	beq.n	8010384 <_dtoa_r+0x6a4>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d005      	beq.n	80103e6 <_dtoa_r+0x706>
 80103da:	42bb      	cmp	r3, r7
 80103dc:	d003      	beq.n	80103e6 <_dtoa_r+0x706>
 80103de:	0019      	movs	r1, r3
 80103e0:	9803      	ldr	r0, [sp, #12]
 80103e2:	f000 fbbb 	bl	8010b5c <_Bfree>
 80103e6:	0039      	movs	r1, r7
 80103e8:	9803      	ldr	r0, [sp, #12]
 80103ea:	f000 fbb7 	bl	8010b5c <_Bfree>
 80103ee:	e7c9      	b.n	8010384 <_dtoa_r+0x6a4>
 80103f0:	08011e28 	.word	0x08011e28
 80103f4:	08011e00 	.word	0x08011e00
 80103f8:	3ff00000 	.word	0x3ff00000
 80103fc:	40240000 	.word	0x40240000
 8010400:	401c0000 	.word	0x401c0000
 8010404:	fcc00000 	.word	0xfcc00000
 8010408:	40140000 	.word	0x40140000
 801040c:	3fe00000 	.word	0x3fe00000
 8010410:	9b04      	ldr	r3, [sp, #16]
 8010412:	930c      	str	r3, [sp, #48]	@ 0x30
 8010414:	0023      	movs	r3, r4
 8010416:	001c      	movs	r4, r3
 8010418:	3b01      	subs	r3, #1
 801041a:	781a      	ldrb	r2, [r3, #0]
 801041c:	2a39      	cmp	r2, #57	@ 0x39
 801041e:	d108      	bne.n	8010432 <_dtoa_r+0x752>
 8010420:	9a08      	ldr	r2, [sp, #32]
 8010422:	429a      	cmp	r2, r3
 8010424:	d1f7      	bne.n	8010416 <_dtoa_r+0x736>
 8010426:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010428:	9908      	ldr	r1, [sp, #32]
 801042a:	3201      	adds	r2, #1
 801042c:	920c      	str	r2, [sp, #48]	@ 0x30
 801042e:	2230      	movs	r2, #48	@ 0x30
 8010430:	700a      	strb	r2, [r1, #0]
 8010432:	781a      	ldrb	r2, [r3, #0]
 8010434:	3201      	adds	r2, #1
 8010436:	701a      	strb	r2, [r3, #0]
 8010438:	e7a4      	b.n	8010384 <_dtoa_r+0x6a4>
 801043a:	2200      	movs	r2, #0
 801043c:	4bc6      	ldr	r3, [pc, #792]	@ (8010758 <_dtoa_r+0xa78>)
 801043e:	f7f0 ffdb 	bl	80013f8 <__aeabi_dmul>
 8010442:	2200      	movs	r2, #0
 8010444:	2300      	movs	r3, #0
 8010446:	0006      	movs	r6, r0
 8010448:	000f      	movs	r7, r1
 801044a:	f7ef ffff 	bl	800044c <__aeabi_dcmpeq>
 801044e:	2800      	cmp	r0, #0
 8010450:	d100      	bne.n	8010454 <_dtoa_r+0x774>
 8010452:	e6a1      	b.n	8010198 <_dtoa_r+0x4b8>
 8010454:	e6d8      	b.n	8010208 <_dtoa_r+0x528>
 8010456:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010458:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801045a:	9c06      	ldr	r4, [sp, #24]
 801045c:	2f00      	cmp	r7, #0
 801045e:	d014      	beq.n	801048a <_dtoa_r+0x7aa>
 8010460:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010462:	2a01      	cmp	r2, #1
 8010464:	dd00      	ble.n	8010468 <_dtoa_r+0x788>
 8010466:	e0c8      	b.n	80105fa <_dtoa_r+0x91a>
 8010468:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801046a:	2a00      	cmp	r2, #0
 801046c:	d100      	bne.n	8010470 <_dtoa_r+0x790>
 801046e:	e0be      	b.n	80105ee <_dtoa_r+0x90e>
 8010470:	4aba      	ldr	r2, [pc, #744]	@ (801075c <_dtoa_r+0xa7c>)
 8010472:	189b      	adds	r3, r3, r2
 8010474:	9a06      	ldr	r2, [sp, #24]
 8010476:	2101      	movs	r1, #1
 8010478:	18d2      	adds	r2, r2, r3
 801047a:	9206      	str	r2, [sp, #24]
 801047c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801047e:	9803      	ldr	r0, [sp, #12]
 8010480:	18d3      	adds	r3, r2, r3
 8010482:	930d      	str	r3, [sp, #52]	@ 0x34
 8010484:	f000 fc22 	bl	8010ccc <__i2b>
 8010488:	0007      	movs	r7, r0
 801048a:	2c00      	cmp	r4, #0
 801048c:	d00e      	beq.n	80104ac <_dtoa_r+0x7cc>
 801048e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010490:	2b00      	cmp	r3, #0
 8010492:	dd0b      	ble.n	80104ac <_dtoa_r+0x7cc>
 8010494:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010496:	0023      	movs	r3, r4
 8010498:	4294      	cmp	r4, r2
 801049a:	dd00      	ble.n	801049e <_dtoa_r+0x7be>
 801049c:	0013      	movs	r3, r2
 801049e:	9a06      	ldr	r2, [sp, #24]
 80104a0:	1ae4      	subs	r4, r4, r3
 80104a2:	1ad2      	subs	r2, r2, r3
 80104a4:	9206      	str	r2, [sp, #24]
 80104a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80104ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d01f      	beq.n	80104f2 <_dtoa_r+0x812>
 80104b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d100      	bne.n	80104ba <_dtoa_r+0x7da>
 80104b8:	e0b5      	b.n	8010626 <_dtoa_r+0x946>
 80104ba:	2d00      	cmp	r5, #0
 80104bc:	d010      	beq.n	80104e0 <_dtoa_r+0x800>
 80104be:	0039      	movs	r1, r7
 80104c0:	002a      	movs	r2, r5
 80104c2:	9803      	ldr	r0, [sp, #12]
 80104c4:	f000 fccc 	bl	8010e60 <__pow5mult>
 80104c8:	9a05      	ldr	r2, [sp, #20]
 80104ca:	0001      	movs	r1, r0
 80104cc:	0007      	movs	r7, r0
 80104ce:	9803      	ldr	r0, [sp, #12]
 80104d0:	f000 fc14 	bl	8010cfc <__multiply>
 80104d4:	0006      	movs	r6, r0
 80104d6:	9905      	ldr	r1, [sp, #20]
 80104d8:	9803      	ldr	r0, [sp, #12]
 80104da:	f000 fb3f 	bl	8010b5c <_Bfree>
 80104de:	9605      	str	r6, [sp, #20]
 80104e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104e2:	1b5a      	subs	r2, r3, r5
 80104e4:	42ab      	cmp	r3, r5
 80104e6:	d004      	beq.n	80104f2 <_dtoa_r+0x812>
 80104e8:	9905      	ldr	r1, [sp, #20]
 80104ea:	9803      	ldr	r0, [sp, #12]
 80104ec:	f000 fcb8 	bl	8010e60 <__pow5mult>
 80104f0:	9005      	str	r0, [sp, #20]
 80104f2:	2101      	movs	r1, #1
 80104f4:	9803      	ldr	r0, [sp, #12]
 80104f6:	f000 fbe9 	bl	8010ccc <__i2b>
 80104fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80104fc:	0006      	movs	r6, r0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d100      	bne.n	8010504 <_dtoa_r+0x824>
 8010502:	e1bc      	b.n	801087e <_dtoa_r+0xb9e>
 8010504:	001a      	movs	r2, r3
 8010506:	0001      	movs	r1, r0
 8010508:	9803      	ldr	r0, [sp, #12]
 801050a:	f000 fca9 	bl	8010e60 <__pow5mult>
 801050e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010510:	0006      	movs	r6, r0
 8010512:	2500      	movs	r5, #0
 8010514:	2b01      	cmp	r3, #1
 8010516:	dc16      	bgt.n	8010546 <_dtoa_r+0x866>
 8010518:	2500      	movs	r5, #0
 801051a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801051c:	42ab      	cmp	r3, r5
 801051e:	d10e      	bne.n	801053e <_dtoa_r+0x85e>
 8010520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010522:	031b      	lsls	r3, r3, #12
 8010524:	42ab      	cmp	r3, r5
 8010526:	d10a      	bne.n	801053e <_dtoa_r+0x85e>
 8010528:	4b8d      	ldr	r3, [pc, #564]	@ (8010760 <_dtoa_r+0xa80>)
 801052a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801052c:	4213      	tst	r3, r2
 801052e:	d006      	beq.n	801053e <_dtoa_r+0x85e>
 8010530:	9b06      	ldr	r3, [sp, #24]
 8010532:	3501      	adds	r5, #1
 8010534:	3301      	adds	r3, #1
 8010536:	9306      	str	r3, [sp, #24]
 8010538:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801053a:	3301      	adds	r3, #1
 801053c:	930d      	str	r3, [sp, #52]	@ 0x34
 801053e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010540:	2001      	movs	r0, #1
 8010542:	2b00      	cmp	r3, #0
 8010544:	d008      	beq.n	8010558 <_dtoa_r+0x878>
 8010546:	6933      	ldr	r3, [r6, #16]
 8010548:	3303      	adds	r3, #3
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	18f3      	adds	r3, r6, r3
 801054e:	6858      	ldr	r0, [r3, #4]
 8010550:	f000 fb6c 	bl	8010c2c <__hi0bits>
 8010554:	2320      	movs	r3, #32
 8010556:	1a18      	subs	r0, r3, r0
 8010558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801055a:	1818      	adds	r0, r3, r0
 801055c:	0002      	movs	r2, r0
 801055e:	231f      	movs	r3, #31
 8010560:	401a      	ands	r2, r3
 8010562:	4218      	tst	r0, r3
 8010564:	d065      	beq.n	8010632 <_dtoa_r+0x952>
 8010566:	3301      	adds	r3, #1
 8010568:	1a9b      	subs	r3, r3, r2
 801056a:	2b04      	cmp	r3, #4
 801056c:	dd5d      	ble.n	801062a <_dtoa_r+0x94a>
 801056e:	231c      	movs	r3, #28
 8010570:	1a9b      	subs	r3, r3, r2
 8010572:	9a06      	ldr	r2, [sp, #24]
 8010574:	18e4      	adds	r4, r4, r3
 8010576:	18d2      	adds	r2, r2, r3
 8010578:	9206      	str	r2, [sp, #24]
 801057a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801057c:	18d3      	adds	r3, r2, r3
 801057e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010580:	9b06      	ldr	r3, [sp, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	dd05      	ble.n	8010592 <_dtoa_r+0x8b2>
 8010586:	001a      	movs	r2, r3
 8010588:	9905      	ldr	r1, [sp, #20]
 801058a:	9803      	ldr	r0, [sp, #12]
 801058c:	f000 fcc4 	bl	8010f18 <__lshift>
 8010590:	9005      	str	r0, [sp, #20]
 8010592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010594:	2b00      	cmp	r3, #0
 8010596:	dd05      	ble.n	80105a4 <_dtoa_r+0x8c4>
 8010598:	0031      	movs	r1, r6
 801059a:	001a      	movs	r2, r3
 801059c:	9803      	ldr	r0, [sp, #12]
 801059e:	f000 fcbb 	bl	8010f18 <__lshift>
 80105a2:	0006      	movs	r6, r0
 80105a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d045      	beq.n	8010636 <_dtoa_r+0x956>
 80105aa:	0031      	movs	r1, r6
 80105ac:	9805      	ldr	r0, [sp, #20]
 80105ae:	f000 fd1f 	bl	8010ff0 <__mcmp>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	da3f      	bge.n	8010636 <_dtoa_r+0x956>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	220a      	movs	r2, #10
 80105ba:	3b01      	subs	r3, #1
 80105bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80105be:	9905      	ldr	r1, [sp, #20]
 80105c0:	2300      	movs	r3, #0
 80105c2:	9803      	ldr	r0, [sp, #12]
 80105c4:	f000 faee 	bl	8010ba4 <__multadd>
 80105c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105ca:	9005      	str	r0, [sp, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d100      	bne.n	80105d2 <_dtoa_r+0x8f2>
 80105d0:	e15c      	b.n	801088c <_dtoa_r+0xbac>
 80105d2:	2300      	movs	r3, #0
 80105d4:	0039      	movs	r1, r7
 80105d6:	220a      	movs	r2, #10
 80105d8:	9803      	ldr	r0, [sp, #12]
 80105da:	f000 fae3 	bl	8010ba4 <__multadd>
 80105de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105e0:	0007      	movs	r7, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	dc55      	bgt.n	8010692 <_dtoa_r+0x9b2>
 80105e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	dc2d      	bgt.n	8010648 <_dtoa_r+0x968>
 80105ec:	e051      	b.n	8010692 <_dtoa_r+0x9b2>
 80105ee:	2336      	movs	r3, #54	@ 0x36
 80105f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80105f2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80105f4:	9c06      	ldr	r4, [sp, #24]
 80105f6:	1a9b      	subs	r3, r3, r2
 80105f8:	e73c      	b.n	8010474 <_dtoa_r+0x794>
 80105fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105fc:	1e5d      	subs	r5, r3, #1
 80105fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010600:	42ab      	cmp	r3, r5
 8010602:	db08      	blt.n	8010616 <_dtoa_r+0x936>
 8010604:	1b5d      	subs	r5, r3, r5
 8010606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010608:	9c06      	ldr	r4, [sp, #24]
 801060a:	2b00      	cmp	r3, #0
 801060c:	db00      	blt.n	8010610 <_dtoa_r+0x930>
 801060e:	e731      	b.n	8010474 <_dtoa_r+0x794>
 8010610:	1ae4      	subs	r4, r4, r3
 8010612:	2300      	movs	r3, #0
 8010614:	e72e      	b.n	8010474 <_dtoa_r+0x794>
 8010616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010618:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801061a:	1aeb      	subs	r3, r5, r3
 801061c:	18d3      	adds	r3, r2, r3
 801061e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010620:	9314      	str	r3, [sp, #80]	@ 0x50
 8010622:	2500      	movs	r5, #0
 8010624:	e7ef      	b.n	8010606 <_dtoa_r+0x926>
 8010626:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010628:	e75e      	b.n	80104e8 <_dtoa_r+0x808>
 801062a:	2b04      	cmp	r3, #4
 801062c:	d0a8      	beq.n	8010580 <_dtoa_r+0x8a0>
 801062e:	331c      	adds	r3, #28
 8010630:	e79f      	b.n	8010572 <_dtoa_r+0x892>
 8010632:	0013      	movs	r3, r2
 8010634:	e7fb      	b.n	801062e <_dtoa_r+0x94e>
 8010636:	9b04      	ldr	r3, [sp, #16]
 8010638:	930c      	str	r3, [sp, #48]	@ 0x30
 801063a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801063c:	930e      	str	r3, [sp, #56]	@ 0x38
 801063e:	2b00      	cmp	r3, #0
 8010640:	dc23      	bgt.n	801068a <_dtoa_r+0x9aa>
 8010642:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010644:	2b02      	cmp	r3, #2
 8010646:	dd20      	ble.n	801068a <_dtoa_r+0x9aa>
 8010648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801064a:	2b00      	cmp	r3, #0
 801064c:	d000      	beq.n	8010650 <_dtoa_r+0x970>
 801064e:	e6b5      	b.n	80103bc <_dtoa_r+0x6dc>
 8010650:	0031      	movs	r1, r6
 8010652:	2205      	movs	r2, #5
 8010654:	9803      	ldr	r0, [sp, #12]
 8010656:	f000 faa5 	bl	8010ba4 <__multadd>
 801065a:	0006      	movs	r6, r0
 801065c:	0001      	movs	r1, r0
 801065e:	9805      	ldr	r0, [sp, #20]
 8010660:	f000 fcc6 	bl	8010ff0 <__mcmp>
 8010664:	2800      	cmp	r0, #0
 8010666:	dc00      	bgt.n	801066a <_dtoa_r+0x98a>
 8010668:	e6a8      	b.n	80103bc <_dtoa_r+0x6dc>
 801066a:	9b08      	ldr	r3, [sp, #32]
 801066c:	9a08      	ldr	r2, [sp, #32]
 801066e:	1c5c      	adds	r4, r3, #1
 8010670:	2331      	movs	r3, #49	@ 0x31
 8010672:	7013      	strb	r3, [r2, #0]
 8010674:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010676:	3301      	adds	r3, #1
 8010678:	930c      	str	r3, [sp, #48]	@ 0x30
 801067a:	e6a3      	b.n	80103c4 <_dtoa_r+0x6e4>
 801067c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801067e:	0037      	movs	r7, r6
 8010680:	e7f3      	b.n	801066a <_dtoa_r+0x98a>
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010686:	930c      	str	r3, [sp, #48]	@ 0x30
 8010688:	e7f9      	b.n	801067e <_dtoa_r+0x99e>
 801068a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801068c:	2b00      	cmp	r3, #0
 801068e:	d100      	bne.n	8010692 <_dtoa_r+0x9b2>
 8010690:	e100      	b.n	8010894 <_dtoa_r+0xbb4>
 8010692:	2c00      	cmp	r4, #0
 8010694:	dd05      	ble.n	80106a2 <_dtoa_r+0x9c2>
 8010696:	0039      	movs	r1, r7
 8010698:	0022      	movs	r2, r4
 801069a:	9803      	ldr	r0, [sp, #12]
 801069c:	f000 fc3c 	bl	8010f18 <__lshift>
 80106a0:	0007      	movs	r7, r0
 80106a2:	0038      	movs	r0, r7
 80106a4:	2d00      	cmp	r5, #0
 80106a6:	d018      	beq.n	80106da <_dtoa_r+0x9fa>
 80106a8:	6879      	ldr	r1, [r7, #4]
 80106aa:	9803      	ldr	r0, [sp, #12]
 80106ac:	f000 fa12 	bl	8010ad4 <_Balloc>
 80106b0:	1e04      	subs	r4, r0, #0
 80106b2:	d105      	bne.n	80106c0 <_dtoa_r+0x9e0>
 80106b4:	0022      	movs	r2, r4
 80106b6:	4b2b      	ldr	r3, [pc, #172]	@ (8010764 <_dtoa_r+0xa84>)
 80106b8:	482b      	ldr	r0, [pc, #172]	@ (8010768 <_dtoa_r+0xa88>)
 80106ba:	492c      	ldr	r1, [pc, #176]	@ (801076c <_dtoa_r+0xa8c>)
 80106bc:	f7ff fb25 	bl	800fd0a <_dtoa_r+0x2a>
 80106c0:	0039      	movs	r1, r7
 80106c2:	693a      	ldr	r2, [r7, #16]
 80106c4:	310c      	adds	r1, #12
 80106c6:	3202      	adds	r2, #2
 80106c8:	0092      	lsls	r2, r2, #2
 80106ca:	300c      	adds	r0, #12
 80106cc:	f7ff fa70 	bl	800fbb0 <memcpy>
 80106d0:	2201      	movs	r2, #1
 80106d2:	0021      	movs	r1, r4
 80106d4:	9803      	ldr	r0, [sp, #12]
 80106d6:	f000 fc1f 	bl	8010f18 <__lshift>
 80106da:	9b08      	ldr	r3, [sp, #32]
 80106dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106de:	9306      	str	r3, [sp, #24]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	189b      	adds	r3, r3, r2
 80106e4:	2201      	movs	r2, #1
 80106e6:	9704      	str	r7, [sp, #16]
 80106e8:	0007      	movs	r7, r0
 80106ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80106ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106ee:	4013      	ands	r3, r2
 80106f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80106f2:	0031      	movs	r1, r6
 80106f4:	9805      	ldr	r0, [sp, #20]
 80106f6:	f7ff fa64 	bl	800fbc2 <quorem>
 80106fa:	9904      	ldr	r1, [sp, #16]
 80106fc:	0005      	movs	r5, r0
 80106fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8010700:	9805      	ldr	r0, [sp, #20]
 8010702:	f000 fc75 	bl	8010ff0 <__mcmp>
 8010706:	003a      	movs	r2, r7
 8010708:	900d      	str	r0, [sp, #52]	@ 0x34
 801070a:	0031      	movs	r1, r6
 801070c:	9803      	ldr	r0, [sp, #12]
 801070e:	f000 fc8b 	bl	8011028 <__mdiff>
 8010712:	2201      	movs	r2, #1
 8010714:	68c3      	ldr	r3, [r0, #12]
 8010716:	0004      	movs	r4, r0
 8010718:	3530      	adds	r5, #48	@ 0x30
 801071a:	9209      	str	r2, [sp, #36]	@ 0x24
 801071c:	2b00      	cmp	r3, #0
 801071e:	d104      	bne.n	801072a <_dtoa_r+0xa4a>
 8010720:	0001      	movs	r1, r0
 8010722:	9805      	ldr	r0, [sp, #20]
 8010724:	f000 fc64 	bl	8010ff0 <__mcmp>
 8010728:	9009      	str	r0, [sp, #36]	@ 0x24
 801072a:	0021      	movs	r1, r4
 801072c:	9803      	ldr	r0, [sp, #12]
 801072e:	f000 fa15 	bl	8010b5c <_Bfree>
 8010732:	9b06      	ldr	r3, [sp, #24]
 8010734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010736:	1c5c      	adds	r4, r3, #1
 8010738:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801073a:	4313      	orrs	r3, r2
 801073c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801073e:	4313      	orrs	r3, r2
 8010740:	d116      	bne.n	8010770 <_dtoa_r+0xa90>
 8010742:	2d39      	cmp	r5, #57	@ 0x39
 8010744:	d02f      	beq.n	80107a6 <_dtoa_r+0xac6>
 8010746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010748:	2b00      	cmp	r3, #0
 801074a:	dd01      	ble.n	8010750 <_dtoa_r+0xa70>
 801074c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801074e:	3531      	adds	r5, #49	@ 0x31
 8010750:	9b06      	ldr	r3, [sp, #24]
 8010752:	701d      	strb	r5, [r3, #0]
 8010754:	e638      	b.n	80103c8 <_dtoa_r+0x6e8>
 8010756:	46c0      	nop			@ (mov r8, r8)
 8010758:	40240000 	.word	0x40240000
 801075c:	00000433 	.word	0x00000433
 8010760:	7ff00000 	.word	0x7ff00000
 8010764:	08011d86 	.word	0x08011d86
 8010768:	08011d2e 	.word	0x08011d2e
 801076c:	000002ef 	.word	0x000002ef
 8010770:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010772:	2b00      	cmp	r3, #0
 8010774:	db04      	blt.n	8010780 <_dtoa_r+0xaa0>
 8010776:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010778:	4313      	orrs	r3, r2
 801077a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801077c:	4313      	orrs	r3, r2
 801077e:	d11e      	bne.n	80107be <_dtoa_r+0xade>
 8010780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010782:	2b00      	cmp	r3, #0
 8010784:	dde4      	ble.n	8010750 <_dtoa_r+0xa70>
 8010786:	9905      	ldr	r1, [sp, #20]
 8010788:	2201      	movs	r2, #1
 801078a:	9803      	ldr	r0, [sp, #12]
 801078c:	f000 fbc4 	bl	8010f18 <__lshift>
 8010790:	0031      	movs	r1, r6
 8010792:	9005      	str	r0, [sp, #20]
 8010794:	f000 fc2c 	bl	8010ff0 <__mcmp>
 8010798:	2800      	cmp	r0, #0
 801079a:	dc02      	bgt.n	80107a2 <_dtoa_r+0xac2>
 801079c:	d1d8      	bne.n	8010750 <_dtoa_r+0xa70>
 801079e:	07eb      	lsls	r3, r5, #31
 80107a0:	d5d6      	bpl.n	8010750 <_dtoa_r+0xa70>
 80107a2:	2d39      	cmp	r5, #57	@ 0x39
 80107a4:	d1d2      	bne.n	801074c <_dtoa_r+0xa6c>
 80107a6:	2339      	movs	r3, #57	@ 0x39
 80107a8:	9a06      	ldr	r2, [sp, #24]
 80107aa:	7013      	strb	r3, [r2, #0]
 80107ac:	0023      	movs	r3, r4
 80107ae:	001c      	movs	r4, r3
 80107b0:	3b01      	subs	r3, #1
 80107b2:	781a      	ldrb	r2, [r3, #0]
 80107b4:	2a39      	cmp	r2, #57	@ 0x39
 80107b6:	d04f      	beq.n	8010858 <_dtoa_r+0xb78>
 80107b8:	3201      	adds	r2, #1
 80107ba:	701a      	strb	r2, [r3, #0]
 80107bc:	e604      	b.n	80103c8 <_dtoa_r+0x6e8>
 80107be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	dd03      	ble.n	80107cc <_dtoa_r+0xaec>
 80107c4:	2d39      	cmp	r5, #57	@ 0x39
 80107c6:	d0ee      	beq.n	80107a6 <_dtoa_r+0xac6>
 80107c8:	3501      	adds	r5, #1
 80107ca:	e7c1      	b.n	8010750 <_dtoa_r+0xa70>
 80107cc:	9b06      	ldr	r3, [sp, #24]
 80107ce:	9a06      	ldr	r2, [sp, #24]
 80107d0:	701d      	strb	r5, [r3, #0]
 80107d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d02a      	beq.n	801082e <_dtoa_r+0xb4e>
 80107d8:	2300      	movs	r3, #0
 80107da:	220a      	movs	r2, #10
 80107dc:	9905      	ldr	r1, [sp, #20]
 80107de:	9803      	ldr	r0, [sp, #12]
 80107e0:	f000 f9e0 	bl	8010ba4 <__multadd>
 80107e4:	9b04      	ldr	r3, [sp, #16]
 80107e6:	9005      	str	r0, [sp, #20]
 80107e8:	42bb      	cmp	r3, r7
 80107ea:	d109      	bne.n	8010800 <_dtoa_r+0xb20>
 80107ec:	2300      	movs	r3, #0
 80107ee:	220a      	movs	r2, #10
 80107f0:	9904      	ldr	r1, [sp, #16]
 80107f2:	9803      	ldr	r0, [sp, #12]
 80107f4:	f000 f9d6 	bl	8010ba4 <__multadd>
 80107f8:	9004      	str	r0, [sp, #16]
 80107fa:	0007      	movs	r7, r0
 80107fc:	9406      	str	r4, [sp, #24]
 80107fe:	e778      	b.n	80106f2 <_dtoa_r+0xa12>
 8010800:	9904      	ldr	r1, [sp, #16]
 8010802:	2300      	movs	r3, #0
 8010804:	220a      	movs	r2, #10
 8010806:	9803      	ldr	r0, [sp, #12]
 8010808:	f000 f9cc 	bl	8010ba4 <__multadd>
 801080c:	2300      	movs	r3, #0
 801080e:	9004      	str	r0, [sp, #16]
 8010810:	220a      	movs	r2, #10
 8010812:	0039      	movs	r1, r7
 8010814:	9803      	ldr	r0, [sp, #12]
 8010816:	f000 f9c5 	bl	8010ba4 <__multadd>
 801081a:	e7ee      	b.n	80107fa <_dtoa_r+0xb1a>
 801081c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801081e:	2401      	movs	r4, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	dd00      	ble.n	8010826 <_dtoa_r+0xb46>
 8010824:	001c      	movs	r4, r3
 8010826:	9b08      	ldr	r3, [sp, #32]
 8010828:	191c      	adds	r4, r3, r4
 801082a:	2300      	movs	r3, #0
 801082c:	9304      	str	r3, [sp, #16]
 801082e:	9905      	ldr	r1, [sp, #20]
 8010830:	2201      	movs	r2, #1
 8010832:	9803      	ldr	r0, [sp, #12]
 8010834:	f000 fb70 	bl	8010f18 <__lshift>
 8010838:	0031      	movs	r1, r6
 801083a:	9005      	str	r0, [sp, #20]
 801083c:	f000 fbd8 	bl	8010ff0 <__mcmp>
 8010840:	2800      	cmp	r0, #0
 8010842:	dcb3      	bgt.n	80107ac <_dtoa_r+0xacc>
 8010844:	d101      	bne.n	801084a <_dtoa_r+0xb6a>
 8010846:	07ed      	lsls	r5, r5, #31
 8010848:	d4b0      	bmi.n	80107ac <_dtoa_r+0xacc>
 801084a:	0023      	movs	r3, r4
 801084c:	001c      	movs	r4, r3
 801084e:	3b01      	subs	r3, #1
 8010850:	781a      	ldrb	r2, [r3, #0]
 8010852:	2a30      	cmp	r2, #48	@ 0x30
 8010854:	d0fa      	beq.n	801084c <_dtoa_r+0xb6c>
 8010856:	e5b7      	b.n	80103c8 <_dtoa_r+0x6e8>
 8010858:	9a08      	ldr	r2, [sp, #32]
 801085a:	429a      	cmp	r2, r3
 801085c:	d1a7      	bne.n	80107ae <_dtoa_r+0xace>
 801085e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010860:	3301      	adds	r3, #1
 8010862:	930c      	str	r3, [sp, #48]	@ 0x30
 8010864:	2331      	movs	r3, #49	@ 0x31
 8010866:	7013      	strb	r3, [r2, #0]
 8010868:	e5ae      	b.n	80103c8 <_dtoa_r+0x6e8>
 801086a:	4b15      	ldr	r3, [pc, #84]	@ (80108c0 <_dtoa_r+0xbe0>)
 801086c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801086e:	9308      	str	r3, [sp, #32]
 8010870:	4b14      	ldr	r3, [pc, #80]	@ (80108c4 <_dtoa_r+0xbe4>)
 8010872:	2a00      	cmp	r2, #0
 8010874:	d001      	beq.n	801087a <_dtoa_r+0xb9a>
 8010876:	f7ff fa7b 	bl	800fd70 <_dtoa_r+0x90>
 801087a:	f7ff fa7b 	bl	800fd74 <_dtoa_r+0x94>
 801087e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010880:	2b01      	cmp	r3, #1
 8010882:	dc00      	bgt.n	8010886 <_dtoa_r+0xba6>
 8010884:	e648      	b.n	8010518 <_dtoa_r+0x838>
 8010886:	2001      	movs	r0, #1
 8010888:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801088a:	e665      	b.n	8010558 <_dtoa_r+0x878>
 801088c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801088e:	2b00      	cmp	r3, #0
 8010890:	dc00      	bgt.n	8010894 <_dtoa_r+0xbb4>
 8010892:	e6d6      	b.n	8010642 <_dtoa_r+0x962>
 8010894:	2400      	movs	r4, #0
 8010896:	0031      	movs	r1, r6
 8010898:	9805      	ldr	r0, [sp, #20]
 801089a:	f7ff f992 	bl	800fbc2 <quorem>
 801089e:	9b08      	ldr	r3, [sp, #32]
 80108a0:	3030      	adds	r0, #48	@ 0x30
 80108a2:	5518      	strb	r0, [r3, r4]
 80108a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108a6:	3401      	adds	r4, #1
 80108a8:	0005      	movs	r5, r0
 80108aa:	429c      	cmp	r4, r3
 80108ac:	dab6      	bge.n	801081c <_dtoa_r+0xb3c>
 80108ae:	2300      	movs	r3, #0
 80108b0:	220a      	movs	r2, #10
 80108b2:	9905      	ldr	r1, [sp, #20]
 80108b4:	9803      	ldr	r0, [sp, #12]
 80108b6:	f000 f975 	bl	8010ba4 <__multadd>
 80108ba:	9005      	str	r0, [sp, #20]
 80108bc:	e7eb      	b.n	8010896 <_dtoa_r+0xbb6>
 80108be:	46c0      	nop			@ (mov r8, r8)
 80108c0:	08011d0a 	.word	0x08011d0a
 80108c4:	08011d12 	.word	0x08011d12

080108c8 <_free_r>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	0005      	movs	r5, r0
 80108cc:	1e0c      	subs	r4, r1, #0
 80108ce:	d010      	beq.n	80108f2 <_free_r+0x2a>
 80108d0:	3c04      	subs	r4, #4
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	da00      	bge.n	80108da <_free_r+0x12>
 80108d8:	18e4      	adds	r4, r4, r3
 80108da:	0028      	movs	r0, r5
 80108dc:	f000 f8ea 	bl	8010ab4 <__malloc_lock>
 80108e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010958 <_free_r+0x90>)
 80108e2:	6813      	ldr	r3, [r2, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d105      	bne.n	80108f4 <_free_r+0x2c>
 80108e8:	6063      	str	r3, [r4, #4]
 80108ea:	6014      	str	r4, [r2, #0]
 80108ec:	0028      	movs	r0, r5
 80108ee:	f000 f8e9 	bl	8010ac4 <__malloc_unlock>
 80108f2:	bd70      	pop	{r4, r5, r6, pc}
 80108f4:	42a3      	cmp	r3, r4
 80108f6:	d908      	bls.n	801090a <_free_r+0x42>
 80108f8:	6820      	ldr	r0, [r4, #0]
 80108fa:	1821      	adds	r1, r4, r0
 80108fc:	428b      	cmp	r3, r1
 80108fe:	d1f3      	bne.n	80108e8 <_free_r+0x20>
 8010900:	6819      	ldr	r1, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	1809      	adds	r1, r1, r0
 8010906:	6021      	str	r1, [r4, #0]
 8010908:	e7ee      	b.n	80108e8 <_free_r+0x20>
 801090a:	001a      	movs	r2, r3
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <_free_r+0x4e>
 8010912:	42a3      	cmp	r3, r4
 8010914:	d9f9      	bls.n	801090a <_free_r+0x42>
 8010916:	6811      	ldr	r1, [r2, #0]
 8010918:	1850      	adds	r0, r2, r1
 801091a:	42a0      	cmp	r0, r4
 801091c:	d10b      	bne.n	8010936 <_free_r+0x6e>
 801091e:	6820      	ldr	r0, [r4, #0]
 8010920:	1809      	adds	r1, r1, r0
 8010922:	1850      	adds	r0, r2, r1
 8010924:	6011      	str	r1, [r2, #0]
 8010926:	4283      	cmp	r3, r0
 8010928:	d1e0      	bne.n	80108ec <_free_r+0x24>
 801092a:	6818      	ldr	r0, [r3, #0]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	1841      	adds	r1, r0, r1
 8010930:	6011      	str	r1, [r2, #0]
 8010932:	6053      	str	r3, [r2, #4]
 8010934:	e7da      	b.n	80108ec <_free_r+0x24>
 8010936:	42a0      	cmp	r0, r4
 8010938:	d902      	bls.n	8010940 <_free_r+0x78>
 801093a:	230c      	movs	r3, #12
 801093c:	602b      	str	r3, [r5, #0]
 801093e:	e7d5      	b.n	80108ec <_free_r+0x24>
 8010940:	6820      	ldr	r0, [r4, #0]
 8010942:	1821      	adds	r1, r4, r0
 8010944:	428b      	cmp	r3, r1
 8010946:	d103      	bne.n	8010950 <_free_r+0x88>
 8010948:	6819      	ldr	r1, [r3, #0]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	1809      	adds	r1, r1, r0
 801094e:	6021      	str	r1, [r4, #0]
 8010950:	6063      	str	r3, [r4, #4]
 8010952:	6054      	str	r4, [r2, #4]
 8010954:	e7ca      	b.n	80108ec <_free_r+0x24>
 8010956:	46c0      	nop			@ (mov r8, r8)
 8010958:	20001db4 	.word	0x20001db4

0801095c <malloc>:
 801095c:	b510      	push	{r4, lr}
 801095e:	4b03      	ldr	r3, [pc, #12]	@ (801096c <malloc+0x10>)
 8010960:	0001      	movs	r1, r0
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	f000 f826 	bl	80109b4 <_malloc_r>
 8010968:	bd10      	pop	{r4, pc}
 801096a:	46c0      	nop			@ (mov r8, r8)
 801096c:	20000200 	.word	0x20000200

08010970 <sbrk_aligned>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4e0f      	ldr	r6, [pc, #60]	@ (80109b0 <sbrk_aligned+0x40>)
 8010974:	000d      	movs	r5, r1
 8010976:	6831      	ldr	r1, [r6, #0]
 8010978:	0004      	movs	r4, r0
 801097a:	2900      	cmp	r1, #0
 801097c:	d102      	bne.n	8010984 <sbrk_aligned+0x14>
 801097e:	f000 fcff 	bl	8011380 <_sbrk_r>
 8010982:	6030      	str	r0, [r6, #0]
 8010984:	0029      	movs	r1, r5
 8010986:	0020      	movs	r0, r4
 8010988:	f000 fcfa 	bl	8011380 <_sbrk_r>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d103      	bne.n	8010998 <sbrk_aligned+0x28>
 8010990:	2501      	movs	r5, #1
 8010992:	426d      	negs	r5, r5
 8010994:	0028      	movs	r0, r5
 8010996:	bd70      	pop	{r4, r5, r6, pc}
 8010998:	2303      	movs	r3, #3
 801099a:	1cc5      	adds	r5, r0, #3
 801099c:	439d      	bics	r5, r3
 801099e:	42a8      	cmp	r0, r5
 80109a0:	d0f8      	beq.n	8010994 <sbrk_aligned+0x24>
 80109a2:	1a29      	subs	r1, r5, r0
 80109a4:	0020      	movs	r0, r4
 80109a6:	f000 fceb 	bl	8011380 <_sbrk_r>
 80109aa:	3001      	adds	r0, #1
 80109ac:	d1f2      	bne.n	8010994 <sbrk_aligned+0x24>
 80109ae:	e7ef      	b.n	8010990 <sbrk_aligned+0x20>
 80109b0:	20001db0 	.word	0x20001db0

080109b4 <_malloc_r>:
 80109b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109b6:	2203      	movs	r2, #3
 80109b8:	1ccb      	adds	r3, r1, #3
 80109ba:	4393      	bics	r3, r2
 80109bc:	3308      	adds	r3, #8
 80109be:	0005      	movs	r5, r0
 80109c0:	001f      	movs	r7, r3
 80109c2:	2b0c      	cmp	r3, #12
 80109c4:	d234      	bcs.n	8010a30 <_malloc_r+0x7c>
 80109c6:	270c      	movs	r7, #12
 80109c8:	42b9      	cmp	r1, r7
 80109ca:	d833      	bhi.n	8010a34 <_malloc_r+0x80>
 80109cc:	0028      	movs	r0, r5
 80109ce:	f000 f871 	bl	8010ab4 <__malloc_lock>
 80109d2:	4e37      	ldr	r6, [pc, #220]	@ (8010ab0 <_malloc_r+0xfc>)
 80109d4:	6833      	ldr	r3, [r6, #0]
 80109d6:	001c      	movs	r4, r3
 80109d8:	2c00      	cmp	r4, #0
 80109da:	d12f      	bne.n	8010a3c <_malloc_r+0x88>
 80109dc:	0039      	movs	r1, r7
 80109de:	0028      	movs	r0, r5
 80109e0:	f7ff ffc6 	bl	8010970 <sbrk_aligned>
 80109e4:	0004      	movs	r4, r0
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	d15f      	bne.n	8010aaa <_malloc_r+0xf6>
 80109ea:	6834      	ldr	r4, [r6, #0]
 80109ec:	9400      	str	r4, [sp, #0]
 80109ee:	9b00      	ldr	r3, [sp, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d14a      	bne.n	8010a8a <_malloc_r+0xd6>
 80109f4:	2c00      	cmp	r4, #0
 80109f6:	d052      	beq.n	8010a9e <_malloc_r+0xea>
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	0028      	movs	r0, r5
 80109fc:	18e3      	adds	r3, r4, r3
 80109fe:	9900      	ldr	r1, [sp, #0]
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	f000 fcbd 	bl	8011380 <_sbrk_r>
 8010a06:	9b01      	ldr	r3, [sp, #4]
 8010a08:	4283      	cmp	r3, r0
 8010a0a:	d148      	bne.n	8010a9e <_malloc_r+0xea>
 8010a0c:	6823      	ldr	r3, [r4, #0]
 8010a0e:	0028      	movs	r0, r5
 8010a10:	1aff      	subs	r7, r7, r3
 8010a12:	0039      	movs	r1, r7
 8010a14:	f7ff ffac 	bl	8010970 <sbrk_aligned>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d040      	beq.n	8010a9e <_malloc_r+0xea>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	19db      	adds	r3, r3, r7
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	6833      	ldr	r3, [r6, #0]
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	2a00      	cmp	r2, #0
 8010a28:	d133      	bne.n	8010a92 <_malloc_r+0xde>
 8010a2a:	9b00      	ldr	r3, [sp, #0]
 8010a2c:	6033      	str	r3, [r6, #0]
 8010a2e:	e019      	b.n	8010a64 <_malloc_r+0xb0>
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	dac9      	bge.n	80109c8 <_malloc_r+0x14>
 8010a34:	230c      	movs	r3, #12
 8010a36:	602b      	str	r3, [r5, #0]
 8010a38:	2000      	movs	r0, #0
 8010a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a3c:	6821      	ldr	r1, [r4, #0]
 8010a3e:	1bc9      	subs	r1, r1, r7
 8010a40:	d420      	bmi.n	8010a84 <_malloc_r+0xd0>
 8010a42:	290b      	cmp	r1, #11
 8010a44:	d90a      	bls.n	8010a5c <_malloc_r+0xa8>
 8010a46:	19e2      	adds	r2, r4, r7
 8010a48:	6027      	str	r7, [r4, #0]
 8010a4a:	42a3      	cmp	r3, r4
 8010a4c:	d104      	bne.n	8010a58 <_malloc_r+0xa4>
 8010a4e:	6032      	str	r2, [r6, #0]
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	6011      	str	r1, [r2, #0]
 8010a54:	6053      	str	r3, [r2, #4]
 8010a56:	e005      	b.n	8010a64 <_malloc_r+0xb0>
 8010a58:	605a      	str	r2, [r3, #4]
 8010a5a:	e7f9      	b.n	8010a50 <_malloc_r+0x9c>
 8010a5c:	6862      	ldr	r2, [r4, #4]
 8010a5e:	42a3      	cmp	r3, r4
 8010a60:	d10e      	bne.n	8010a80 <_malloc_r+0xcc>
 8010a62:	6032      	str	r2, [r6, #0]
 8010a64:	0028      	movs	r0, r5
 8010a66:	f000 f82d 	bl	8010ac4 <__malloc_unlock>
 8010a6a:	0020      	movs	r0, r4
 8010a6c:	2207      	movs	r2, #7
 8010a6e:	300b      	adds	r0, #11
 8010a70:	1d23      	adds	r3, r4, #4
 8010a72:	4390      	bics	r0, r2
 8010a74:	1ac2      	subs	r2, r0, r3
 8010a76:	4298      	cmp	r0, r3
 8010a78:	d0df      	beq.n	8010a3a <_malloc_r+0x86>
 8010a7a:	1a1b      	subs	r3, r3, r0
 8010a7c:	50a3      	str	r3, [r4, r2]
 8010a7e:	e7dc      	b.n	8010a3a <_malloc_r+0x86>
 8010a80:	605a      	str	r2, [r3, #4]
 8010a82:	e7ef      	b.n	8010a64 <_malloc_r+0xb0>
 8010a84:	0023      	movs	r3, r4
 8010a86:	6864      	ldr	r4, [r4, #4]
 8010a88:	e7a6      	b.n	80109d8 <_malloc_r+0x24>
 8010a8a:	9c00      	ldr	r4, [sp, #0]
 8010a8c:	6863      	ldr	r3, [r4, #4]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	e7ad      	b.n	80109ee <_malloc_r+0x3a>
 8010a92:	001a      	movs	r2, r3
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	42a3      	cmp	r3, r4
 8010a98:	d1fb      	bne.n	8010a92 <_malloc_r+0xde>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	e7da      	b.n	8010a54 <_malloc_r+0xa0>
 8010a9e:	230c      	movs	r3, #12
 8010aa0:	0028      	movs	r0, r5
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	f000 f80e 	bl	8010ac4 <__malloc_unlock>
 8010aa8:	e7c6      	b.n	8010a38 <_malloc_r+0x84>
 8010aaa:	6007      	str	r7, [r0, #0]
 8010aac:	e7da      	b.n	8010a64 <_malloc_r+0xb0>
 8010aae:	46c0      	nop			@ (mov r8, r8)
 8010ab0:	20001db4 	.word	0x20001db4

08010ab4 <__malloc_lock>:
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	4802      	ldr	r0, [pc, #8]	@ (8010ac0 <__malloc_lock+0xc>)
 8010ab8:	f7ff f86d 	bl	800fb96 <__retarget_lock_acquire_recursive>
 8010abc:	bd10      	pop	{r4, pc}
 8010abe:	46c0      	nop			@ (mov r8, r8)
 8010ac0:	20001dac 	.word	0x20001dac

08010ac4 <__malloc_unlock>:
 8010ac4:	b510      	push	{r4, lr}
 8010ac6:	4802      	ldr	r0, [pc, #8]	@ (8010ad0 <__malloc_unlock+0xc>)
 8010ac8:	f7ff f866 	bl	800fb98 <__retarget_lock_release_recursive>
 8010acc:	bd10      	pop	{r4, pc}
 8010ace:	46c0      	nop			@ (mov r8, r8)
 8010ad0:	20001dac 	.word	0x20001dac

08010ad4 <_Balloc>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	69c5      	ldr	r5, [r0, #28]
 8010ad8:	0006      	movs	r6, r0
 8010ada:	000c      	movs	r4, r1
 8010adc:	2d00      	cmp	r5, #0
 8010ade:	d10e      	bne.n	8010afe <_Balloc+0x2a>
 8010ae0:	2010      	movs	r0, #16
 8010ae2:	f7ff ff3b 	bl	801095c <malloc>
 8010ae6:	1e02      	subs	r2, r0, #0
 8010ae8:	61f0      	str	r0, [r6, #28]
 8010aea:	d104      	bne.n	8010af6 <_Balloc+0x22>
 8010aec:	216b      	movs	r1, #107	@ 0x6b
 8010aee:	4b19      	ldr	r3, [pc, #100]	@ (8010b54 <_Balloc+0x80>)
 8010af0:	4819      	ldr	r0, [pc, #100]	@ (8010b58 <_Balloc+0x84>)
 8010af2:	f000 fc57 	bl	80113a4 <__assert_func>
 8010af6:	6045      	str	r5, [r0, #4]
 8010af8:	6085      	str	r5, [r0, #8]
 8010afa:	6005      	str	r5, [r0, #0]
 8010afc:	60c5      	str	r5, [r0, #12]
 8010afe:	69f5      	ldr	r5, [r6, #28]
 8010b00:	68eb      	ldr	r3, [r5, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d013      	beq.n	8010b2e <_Balloc+0x5a>
 8010b06:	69f3      	ldr	r3, [r6, #28]
 8010b08:	00a2      	lsls	r2, r4, #2
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	189b      	adds	r3, r3, r2
 8010b0e:	6818      	ldr	r0, [r3, #0]
 8010b10:	2800      	cmp	r0, #0
 8010b12:	d118      	bne.n	8010b46 <_Balloc+0x72>
 8010b14:	2101      	movs	r1, #1
 8010b16:	000d      	movs	r5, r1
 8010b18:	40a5      	lsls	r5, r4
 8010b1a:	1d6a      	adds	r2, r5, #5
 8010b1c:	0030      	movs	r0, r6
 8010b1e:	0092      	lsls	r2, r2, #2
 8010b20:	f000 fc5e 	bl	80113e0 <_calloc_r>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	d00c      	beq.n	8010b42 <_Balloc+0x6e>
 8010b28:	6044      	str	r4, [r0, #4]
 8010b2a:	6085      	str	r5, [r0, #8]
 8010b2c:	e00d      	b.n	8010b4a <_Balloc+0x76>
 8010b2e:	2221      	movs	r2, #33	@ 0x21
 8010b30:	2104      	movs	r1, #4
 8010b32:	0030      	movs	r0, r6
 8010b34:	f000 fc54 	bl	80113e0 <_calloc_r>
 8010b38:	69f3      	ldr	r3, [r6, #28]
 8010b3a:	60e8      	str	r0, [r5, #12]
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1e1      	bne.n	8010b06 <_Balloc+0x32>
 8010b42:	2000      	movs	r0, #0
 8010b44:	bd70      	pop	{r4, r5, r6, pc}
 8010b46:	6802      	ldr	r2, [r0, #0]
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	6103      	str	r3, [r0, #16]
 8010b4e:	60c3      	str	r3, [r0, #12]
 8010b50:	e7f8      	b.n	8010b44 <_Balloc+0x70>
 8010b52:	46c0      	nop			@ (mov r8, r8)
 8010b54:	08011d17 	.word	0x08011d17
 8010b58:	08011d97 	.word	0x08011d97

08010b5c <_Bfree>:
 8010b5c:	b570      	push	{r4, r5, r6, lr}
 8010b5e:	69c6      	ldr	r6, [r0, #28]
 8010b60:	0005      	movs	r5, r0
 8010b62:	000c      	movs	r4, r1
 8010b64:	2e00      	cmp	r6, #0
 8010b66:	d10e      	bne.n	8010b86 <_Bfree+0x2a>
 8010b68:	2010      	movs	r0, #16
 8010b6a:	f7ff fef7 	bl	801095c <malloc>
 8010b6e:	1e02      	subs	r2, r0, #0
 8010b70:	61e8      	str	r0, [r5, #28]
 8010b72:	d104      	bne.n	8010b7e <_Bfree+0x22>
 8010b74:	218f      	movs	r1, #143	@ 0x8f
 8010b76:	4b09      	ldr	r3, [pc, #36]	@ (8010b9c <_Bfree+0x40>)
 8010b78:	4809      	ldr	r0, [pc, #36]	@ (8010ba0 <_Bfree+0x44>)
 8010b7a:	f000 fc13 	bl	80113a4 <__assert_func>
 8010b7e:	6046      	str	r6, [r0, #4]
 8010b80:	6086      	str	r6, [r0, #8]
 8010b82:	6006      	str	r6, [r0, #0]
 8010b84:	60c6      	str	r6, [r0, #12]
 8010b86:	2c00      	cmp	r4, #0
 8010b88:	d007      	beq.n	8010b9a <_Bfree+0x3e>
 8010b8a:	69eb      	ldr	r3, [r5, #28]
 8010b8c:	6862      	ldr	r2, [r4, #4]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	0092      	lsls	r2, r2, #2
 8010b92:	189b      	adds	r3, r3, r2
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	6022      	str	r2, [r4, #0]
 8010b98:	601c      	str	r4, [r3, #0]
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	08011d17 	.word	0x08011d17
 8010ba0:	08011d97 	.word	0x08011d97

08010ba4 <__multadd>:
 8010ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ba6:	000f      	movs	r7, r1
 8010ba8:	9001      	str	r0, [sp, #4]
 8010baa:	000c      	movs	r4, r1
 8010bac:	001e      	movs	r6, r3
 8010bae:	2000      	movs	r0, #0
 8010bb0:	690d      	ldr	r5, [r1, #16]
 8010bb2:	3714      	adds	r7, #20
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	b299      	uxth	r1, r3
 8010bba:	4351      	muls	r1, r2
 8010bbc:	0c1b      	lsrs	r3, r3, #16
 8010bbe:	4353      	muls	r3, r2
 8010bc0:	1989      	adds	r1, r1, r6
 8010bc2:	0c0e      	lsrs	r6, r1, #16
 8010bc4:	199b      	adds	r3, r3, r6
 8010bc6:	0c1e      	lsrs	r6, r3, #16
 8010bc8:	b289      	uxth	r1, r1
 8010bca:	041b      	lsls	r3, r3, #16
 8010bcc:	185b      	adds	r3, r3, r1
 8010bce:	c708      	stmia	r7!, {r3}
 8010bd0:	4285      	cmp	r5, r0
 8010bd2:	dcef      	bgt.n	8010bb4 <__multadd+0x10>
 8010bd4:	2e00      	cmp	r6, #0
 8010bd6:	d022      	beq.n	8010c1e <__multadd+0x7a>
 8010bd8:	68a3      	ldr	r3, [r4, #8]
 8010bda:	42ab      	cmp	r3, r5
 8010bdc:	dc19      	bgt.n	8010c12 <__multadd+0x6e>
 8010bde:	6861      	ldr	r1, [r4, #4]
 8010be0:	9801      	ldr	r0, [sp, #4]
 8010be2:	3101      	adds	r1, #1
 8010be4:	f7ff ff76 	bl	8010ad4 <_Balloc>
 8010be8:	1e07      	subs	r7, r0, #0
 8010bea:	d105      	bne.n	8010bf8 <__multadd+0x54>
 8010bec:	003a      	movs	r2, r7
 8010bee:	21ba      	movs	r1, #186	@ 0xba
 8010bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8010c24 <__multadd+0x80>)
 8010bf2:	480d      	ldr	r0, [pc, #52]	@ (8010c28 <__multadd+0x84>)
 8010bf4:	f000 fbd6 	bl	80113a4 <__assert_func>
 8010bf8:	0021      	movs	r1, r4
 8010bfa:	6922      	ldr	r2, [r4, #16]
 8010bfc:	310c      	adds	r1, #12
 8010bfe:	3202      	adds	r2, #2
 8010c00:	0092      	lsls	r2, r2, #2
 8010c02:	300c      	adds	r0, #12
 8010c04:	f7fe ffd4 	bl	800fbb0 <memcpy>
 8010c08:	0021      	movs	r1, r4
 8010c0a:	9801      	ldr	r0, [sp, #4]
 8010c0c:	f7ff ffa6 	bl	8010b5c <_Bfree>
 8010c10:	003c      	movs	r4, r7
 8010c12:	1d2b      	adds	r3, r5, #4
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	18e3      	adds	r3, r4, r3
 8010c18:	3501      	adds	r5, #1
 8010c1a:	605e      	str	r6, [r3, #4]
 8010c1c:	6125      	str	r5, [r4, #16]
 8010c1e:	0020      	movs	r0, r4
 8010c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010c22:	46c0      	nop			@ (mov r8, r8)
 8010c24:	08011d86 	.word	0x08011d86
 8010c28:	08011d97 	.word	0x08011d97

08010c2c <__hi0bits>:
 8010c2c:	2280      	movs	r2, #128	@ 0x80
 8010c2e:	0003      	movs	r3, r0
 8010c30:	0252      	lsls	r2, r2, #9
 8010c32:	2000      	movs	r0, #0
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d201      	bcs.n	8010c3c <__hi0bits+0x10>
 8010c38:	041b      	lsls	r3, r3, #16
 8010c3a:	3010      	adds	r0, #16
 8010c3c:	2280      	movs	r2, #128	@ 0x80
 8010c3e:	0452      	lsls	r2, r2, #17
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d201      	bcs.n	8010c48 <__hi0bits+0x1c>
 8010c44:	3008      	adds	r0, #8
 8010c46:	021b      	lsls	r3, r3, #8
 8010c48:	2280      	movs	r2, #128	@ 0x80
 8010c4a:	0552      	lsls	r2, r2, #21
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d201      	bcs.n	8010c54 <__hi0bits+0x28>
 8010c50:	3004      	adds	r0, #4
 8010c52:	011b      	lsls	r3, r3, #4
 8010c54:	2280      	movs	r2, #128	@ 0x80
 8010c56:	05d2      	lsls	r2, r2, #23
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d201      	bcs.n	8010c60 <__hi0bits+0x34>
 8010c5c:	3002      	adds	r0, #2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	db03      	blt.n	8010c6c <__hi0bits+0x40>
 8010c64:	3001      	adds	r0, #1
 8010c66:	4213      	tst	r3, r2
 8010c68:	d100      	bne.n	8010c6c <__hi0bits+0x40>
 8010c6a:	2020      	movs	r0, #32
 8010c6c:	4770      	bx	lr

08010c6e <__lo0bits>:
 8010c6e:	6803      	ldr	r3, [r0, #0]
 8010c70:	0001      	movs	r1, r0
 8010c72:	2207      	movs	r2, #7
 8010c74:	0018      	movs	r0, r3
 8010c76:	4010      	ands	r0, r2
 8010c78:	4213      	tst	r3, r2
 8010c7a:	d00d      	beq.n	8010c98 <__lo0bits+0x2a>
 8010c7c:	3a06      	subs	r2, #6
 8010c7e:	2000      	movs	r0, #0
 8010c80:	4213      	tst	r3, r2
 8010c82:	d105      	bne.n	8010c90 <__lo0bits+0x22>
 8010c84:	3002      	adds	r0, #2
 8010c86:	4203      	tst	r3, r0
 8010c88:	d003      	beq.n	8010c92 <__lo0bits+0x24>
 8010c8a:	40d3      	lsrs	r3, r2
 8010c8c:	0010      	movs	r0, r2
 8010c8e:	600b      	str	r3, [r1, #0]
 8010c90:	4770      	bx	lr
 8010c92:	089b      	lsrs	r3, r3, #2
 8010c94:	600b      	str	r3, [r1, #0]
 8010c96:	e7fb      	b.n	8010c90 <__lo0bits+0x22>
 8010c98:	b29a      	uxth	r2, r3
 8010c9a:	2a00      	cmp	r2, #0
 8010c9c:	d101      	bne.n	8010ca2 <__lo0bits+0x34>
 8010c9e:	2010      	movs	r0, #16
 8010ca0:	0c1b      	lsrs	r3, r3, #16
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d101      	bne.n	8010cac <__lo0bits+0x3e>
 8010ca8:	3008      	adds	r0, #8
 8010caa:	0a1b      	lsrs	r3, r3, #8
 8010cac:	071a      	lsls	r2, r3, #28
 8010cae:	d101      	bne.n	8010cb4 <__lo0bits+0x46>
 8010cb0:	3004      	adds	r0, #4
 8010cb2:	091b      	lsrs	r3, r3, #4
 8010cb4:	079a      	lsls	r2, r3, #30
 8010cb6:	d101      	bne.n	8010cbc <__lo0bits+0x4e>
 8010cb8:	3002      	adds	r0, #2
 8010cba:	089b      	lsrs	r3, r3, #2
 8010cbc:	07da      	lsls	r2, r3, #31
 8010cbe:	d4e9      	bmi.n	8010c94 <__lo0bits+0x26>
 8010cc0:	3001      	adds	r0, #1
 8010cc2:	085b      	lsrs	r3, r3, #1
 8010cc4:	d1e6      	bne.n	8010c94 <__lo0bits+0x26>
 8010cc6:	2020      	movs	r0, #32
 8010cc8:	e7e2      	b.n	8010c90 <__lo0bits+0x22>
	...

08010ccc <__i2b>:
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	000c      	movs	r4, r1
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	f7ff feff 	bl	8010ad4 <_Balloc>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d107      	bne.n	8010cea <__i2b+0x1e>
 8010cda:	2146      	movs	r1, #70	@ 0x46
 8010cdc:	4c05      	ldr	r4, [pc, #20]	@ (8010cf4 <__i2b+0x28>)
 8010cde:	0002      	movs	r2, r0
 8010ce0:	4b05      	ldr	r3, [pc, #20]	@ (8010cf8 <__i2b+0x2c>)
 8010ce2:	0020      	movs	r0, r4
 8010ce4:	31ff      	adds	r1, #255	@ 0xff
 8010ce6:	f000 fb5d 	bl	80113a4 <__assert_func>
 8010cea:	2301      	movs	r3, #1
 8010cec:	6144      	str	r4, [r0, #20]
 8010cee:	6103      	str	r3, [r0, #16]
 8010cf0:	bd10      	pop	{r4, pc}
 8010cf2:	46c0      	nop			@ (mov r8, r8)
 8010cf4:	08011d97 	.word	0x08011d97
 8010cf8:	08011d86 	.word	0x08011d86

08010cfc <__multiply>:
 8010cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cfe:	0014      	movs	r4, r2
 8010d00:	690a      	ldr	r2, [r1, #16]
 8010d02:	6923      	ldr	r3, [r4, #16]
 8010d04:	000d      	movs	r5, r1
 8010d06:	b08b      	sub	sp, #44	@ 0x2c
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	db02      	blt.n	8010d12 <__multiply+0x16>
 8010d0c:	0023      	movs	r3, r4
 8010d0e:	000c      	movs	r4, r1
 8010d10:	001d      	movs	r5, r3
 8010d12:	6927      	ldr	r7, [r4, #16]
 8010d14:	692e      	ldr	r6, [r5, #16]
 8010d16:	6861      	ldr	r1, [r4, #4]
 8010d18:	19bb      	adds	r3, r7, r6
 8010d1a:	9303      	str	r3, [sp, #12]
 8010d1c:	68a3      	ldr	r3, [r4, #8]
 8010d1e:	19ba      	adds	r2, r7, r6
 8010d20:	4293      	cmp	r3, r2
 8010d22:	da00      	bge.n	8010d26 <__multiply+0x2a>
 8010d24:	3101      	adds	r1, #1
 8010d26:	f7ff fed5 	bl	8010ad4 <_Balloc>
 8010d2a:	9002      	str	r0, [sp, #8]
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d106      	bne.n	8010d3e <__multiply+0x42>
 8010d30:	21b1      	movs	r1, #177	@ 0xb1
 8010d32:	4b49      	ldr	r3, [pc, #292]	@ (8010e58 <__multiply+0x15c>)
 8010d34:	4849      	ldr	r0, [pc, #292]	@ (8010e5c <__multiply+0x160>)
 8010d36:	9a02      	ldr	r2, [sp, #8]
 8010d38:	0049      	lsls	r1, r1, #1
 8010d3a:	f000 fb33 	bl	80113a4 <__assert_func>
 8010d3e:	9b02      	ldr	r3, [sp, #8]
 8010d40:	2200      	movs	r2, #0
 8010d42:	3314      	adds	r3, #20
 8010d44:	469c      	mov	ip, r3
 8010d46:	19bb      	adds	r3, r7, r6
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4463      	add	r3, ip
 8010d4c:	9304      	str	r3, [sp, #16]
 8010d4e:	4663      	mov	r3, ip
 8010d50:	9904      	ldr	r1, [sp, #16]
 8010d52:	428b      	cmp	r3, r1
 8010d54:	d32a      	bcc.n	8010dac <__multiply+0xb0>
 8010d56:	0023      	movs	r3, r4
 8010d58:	00bf      	lsls	r7, r7, #2
 8010d5a:	3314      	adds	r3, #20
 8010d5c:	3514      	adds	r5, #20
 8010d5e:	9308      	str	r3, [sp, #32]
 8010d60:	00b6      	lsls	r6, r6, #2
 8010d62:	19db      	adds	r3, r3, r7
 8010d64:	9305      	str	r3, [sp, #20]
 8010d66:	19ab      	adds	r3, r5, r6
 8010d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d6a:	2304      	movs	r3, #4
 8010d6c:	9306      	str	r3, [sp, #24]
 8010d6e:	0023      	movs	r3, r4
 8010d70:	9a05      	ldr	r2, [sp, #20]
 8010d72:	3315      	adds	r3, #21
 8010d74:	9501      	str	r5, [sp, #4]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d305      	bcc.n	8010d86 <__multiply+0x8a>
 8010d7a:	1b13      	subs	r3, r2, r4
 8010d7c:	3b15      	subs	r3, #21
 8010d7e:	089b      	lsrs	r3, r3, #2
 8010d80:	3301      	adds	r3, #1
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	9306      	str	r3, [sp, #24]
 8010d86:	9b01      	ldr	r3, [sp, #4]
 8010d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d310      	bcc.n	8010db0 <__multiply+0xb4>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dd05      	ble.n	8010da0 <__multiply+0xa4>
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	3b04      	subs	r3, #4
 8010d98:	9304      	str	r3, [sp, #16]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d056      	beq.n	8010e4e <__multiply+0x152>
 8010da0:	9b02      	ldr	r3, [sp, #8]
 8010da2:	9a03      	ldr	r2, [sp, #12]
 8010da4:	0018      	movs	r0, r3
 8010da6:	611a      	str	r2, [r3, #16]
 8010da8:	b00b      	add	sp, #44	@ 0x2c
 8010daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dac:	c304      	stmia	r3!, {r2}
 8010dae:	e7cf      	b.n	8010d50 <__multiply+0x54>
 8010db0:	9b01      	ldr	r3, [sp, #4]
 8010db2:	6818      	ldr	r0, [r3, #0]
 8010db4:	b280      	uxth	r0, r0
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d01e      	beq.n	8010df8 <__multiply+0xfc>
 8010dba:	4667      	mov	r7, ip
 8010dbc:	2500      	movs	r5, #0
 8010dbe:	9e08      	ldr	r6, [sp, #32]
 8010dc0:	ce02      	ldmia	r6!, {r1}
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	9307      	str	r3, [sp, #28]
 8010dc6:	b28b      	uxth	r3, r1
 8010dc8:	4343      	muls	r3, r0
 8010dca:	001a      	movs	r2, r3
 8010dcc:	466b      	mov	r3, sp
 8010dce:	0c09      	lsrs	r1, r1, #16
 8010dd0:	8b9b      	ldrh	r3, [r3, #28]
 8010dd2:	4341      	muls	r1, r0
 8010dd4:	18d3      	adds	r3, r2, r3
 8010dd6:	9a07      	ldr	r2, [sp, #28]
 8010dd8:	195b      	adds	r3, r3, r5
 8010dda:	0c12      	lsrs	r2, r2, #16
 8010ddc:	1889      	adds	r1, r1, r2
 8010dde:	0c1a      	lsrs	r2, r3, #16
 8010de0:	188a      	adds	r2, r1, r2
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	0c15      	lsrs	r5, r2, #16
 8010de6:	0412      	lsls	r2, r2, #16
 8010de8:	431a      	orrs	r2, r3
 8010dea:	9b05      	ldr	r3, [sp, #20]
 8010dec:	c704      	stmia	r7!, {r2}
 8010dee:	42b3      	cmp	r3, r6
 8010df0:	d8e6      	bhi.n	8010dc0 <__multiply+0xc4>
 8010df2:	4663      	mov	r3, ip
 8010df4:	9a06      	ldr	r2, [sp, #24]
 8010df6:	509d      	str	r5, [r3, r2]
 8010df8:	9b01      	ldr	r3, [sp, #4]
 8010dfa:	6818      	ldr	r0, [r3, #0]
 8010dfc:	0c00      	lsrs	r0, r0, #16
 8010dfe:	d020      	beq.n	8010e42 <__multiply+0x146>
 8010e00:	4663      	mov	r3, ip
 8010e02:	0025      	movs	r5, r4
 8010e04:	4661      	mov	r1, ip
 8010e06:	2700      	movs	r7, #0
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3514      	adds	r5, #20
 8010e0c:	682a      	ldr	r2, [r5, #0]
 8010e0e:	680e      	ldr	r6, [r1, #0]
 8010e10:	b292      	uxth	r2, r2
 8010e12:	4342      	muls	r2, r0
 8010e14:	0c36      	lsrs	r6, r6, #16
 8010e16:	1992      	adds	r2, r2, r6
 8010e18:	19d2      	adds	r2, r2, r7
 8010e1a:	0416      	lsls	r6, r2, #16
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	431e      	orrs	r6, r3
 8010e20:	600e      	str	r6, [r1, #0]
 8010e22:	cd40      	ldmia	r5!, {r6}
 8010e24:	684b      	ldr	r3, [r1, #4]
 8010e26:	0c36      	lsrs	r6, r6, #16
 8010e28:	4346      	muls	r6, r0
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	0c12      	lsrs	r2, r2, #16
 8010e2e:	18f3      	adds	r3, r6, r3
 8010e30:	189b      	adds	r3, r3, r2
 8010e32:	9a05      	ldr	r2, [sp, #20]
 8010e34:	0c1f      	lsrs	r7, r3, #16
 8010e36:	3104      	adds	r1, #4
 8010e38:	42aa      	cmp	r2, r5
 8010e3a:	d8e7      	bhi.n	8010e0c <__multiply+0x110>
 8010e3c:	4662      	mov	r2, ip
 8010e3e:	9906      	ldr	r1, [sp, #24]
 8010e40:	5053      	str	r3, [r2, r1]
 8010e42:	9b01      	ldr	r3, [sp, #4]
 8010e44:	3304      	adds	r3, #4
 8010e46:	9301      	str	r3, [sp, #4]
 8010e48:	2304      	movs	r3, #4
 8010e4a:	449c      	add	ip, r3
 8010e4c:	e79b      	b.n	8010d86 <__multiply+0x8a>
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	9303      	str	r3, [sp, #12]
 8010e54:	e79b      	b.n	8010d8e <__multiply+0x92>
 8010e56:	46c0      	nop			@ (mov r8, r8)
 8010e58:	08011d86 	.word	0x08011d86
 8010e5c:	08011d97 	.word	0x08011d97

08010e60 <__pow5mult>:
 8010e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e62:	2303      	movs	r3, #3
 8010e64:	0015      	movs	r5, r2
 8010e66:	0007      	movs	r7, r0
 8010e68:	000e      	movs	r6, r1
 8010e6a:	401a      	ands	r2, r3
 8010e6c:	421d      	tst	r5, r3
 8010e6e:	d008      	beq.n	8010e82 <__pow5mult+0x22>
 8010e70:	4925      	ldr	r1, [pc, #148]	@ (8010f08 <__pow5mult+0xa8>)
 8010e72:	3a01      	subs	r2, #1
 8010e74:	0092      	lsls	r2, r2, #2
 8010e76:	5852      	ldr	r2, [r2, r1]
 8010e78:	2300      	movs	r3, #0
 8010e7a:	0031      	movs	r1, r6
 8010e7c:	f7ff fe92 	bl	8010ba4 <__multadd>
 8010e80:	0006      	movs	r6, r0
 8010e82:	10ad      	asrs	r5, r5, #2
 8010e84:	d03d      	beq.n	8010f02 <__pow5mult+0xa2>
 8010e86:	69fc      	ldr	r4, [r7, #28]
 8010e88:	2c00      	cmp	r4, #0
 8010e8a:	d10f      	bne.n	8010eac <__pow5mult+0x4c>
 8010e8c:	2010      	movs	r0, #16
 8010e8e:	f7ff fd65 	bl	801095c <malloc>
 8010e92:	1e02      	subs	r2, r0, #0
 8010e94:	61f8      	str	r0, [r7, #28]
 8010e96:	d105      	bne.n	8010ea4 <__pow5mult+0x44>
 8010e98:	21b4      	movs	r1, #180	@ 0xb4
 8010e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8010f0c <__pow5mult+0xac>)
 8010e9c:	481c      	ldr	r0, [pc, #112]	@ (8010f10 <__pow5mult+0xb0>)
 8010e9e:	31ff      	adds	r1, #255	@ 0xff
 8010ea0:	f000 fa80 	bl	80113a4 <__assert_func>
 8010ea4:	6044      	str	r4, [r0, #4]
 8010ea6:	6084      	str	r4, [r0, #8]
 8010ea8:	6004      	str	r4, [r0, #0]
 8010eaa:	60c4      	str	r4, [r0, #12]
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	689c      	ldr	r4, [r3, #8]
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	2c00      	cmp	r4, #0
 8010eb4:	d108      	bne.n	8010ec8 <__pow5mult+0x68>
 8010eb6:	0038      	movs	r0, r7
 8010eb8:	4916      	ldr	r1, [pc, #88]	@ (8010f14 <__pow5mult+0xb4>)
 8010eba:	f7ff ff07 	bl	8010ccc <__i2b>
 8010ebe:	9b01      	ldr	r3, [sp, #4]
 8010ec0:	0004      	movs	r4, r0
 8010ec2:	6098      	str	r0, [r3, #8]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	6003      	str	r3, [r0, #0]
 8010ec8:	2301      	movs	r3, #1
 8010eca:	421d      	tst	r5, r3
 8010ecc:	d00a      	beq.n	8010ee4 <__pow5mult+0x84>
 8010ece:	0031      	movs	r1, r6
 8010ed0:	0022      	movs	r2, r4
 8010ed2:	0038      	movs	r0, r7
 8010ed4:	f7ff ff12 	bl	8010cfc <__multiply>
 8010ed8:	0031      	movs	r1, r6
 8010eda:	9001      	str	r0, [sp, #4]
 8010edc:	0038      	movs	r0, r7
 8010ede:	f7ff fe3d 	bl	8010b5c <_Bfree>
 8010ee2:	9e01      	ldr	r6, [sp, #4]
 8010ee4:	106d      	asrs	r5, r5, #1
 8010ee6:	d00c      	beq.n	8010f02 <__pow5mult+0xa2>
 8010ee8:	6820      	ldr	r0, [r4, #0]
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d107      	bne.n	8010efe <__pow5mult+0x9e>
 8010eee:	0022      	movs	r2, r4
 8010ef0:	0021      	movs	r1, r4
 8010ef2:	0038      	movs	r0, r7
 8010ef4:	f7ff ff02 	bl	8010cfc <__multiply>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	6020      	str	r0, [r4, #0]
 8010efc:	6003      	str	r3, [r0, #0]
 8010efe:	0004      	movs	r4, r0
 8010f00:	e7e2      	b.n	8010ec8 <__pow5mult+0x68>
 8010f02:	0030      	movs	r0, r6
 8010f04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f06:	46c0      	nop			@ (mov r8, r8)
 8010f08:	08011df0 	.word	0x08011df0
 8010f0c:	08011d17 	.word	0x08011d17
 8010f10:	08011d97 	.word	0x08011d97
 8010f14:	00000271 	.word	0x00000271

08010f18 <__lshift>:
 8010f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f1a:	000c      	movs	r4, r1
 8010f1c:	0016      	movs	r6, r2
 8010f1e:	6923      	ldr	r3, [r4, #16]
 8010f20:	1157      	asrs	r7, r2, #5
 8010f22:	b085      	sub	sp, #20
 8010f24:	18fb      	adds	r3, r7, r3
 8010f26:	9301      	str	r3, [sp, #4]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	6849      	ldr	r1, [r1, #4]
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	9002      	str	r0, [sp, #8]
 8010f32:	9a00      	ldr	r2, [sp, #0]
 8010f34:	4293      	cmp	r3, r2
 8010f36:	db10      	blt.n	8010f5a <__lshift+0x42>
 8010f38:	9802      	ldr	r0, [sp, #8]
 8010f3a:	f7ff fdcb 	bl	8010ad4 <_Balloc>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	0001      	movs	r1, r0
 8010f42:	0005      	movs	r5, r0
 8010f44:	001a      	movs	r2, r3
 8010f46:	3114      	adds	r1, #20
 8010f48:	4298      	cmp	r0, r3
 8010f4a:	d10c      	bne.n	8010f66 <__lshift+0x4e>
 8010f4c:	21ef      	movs	r1, #239	@ 0xef
 8010f4e:	002a      	movs	r2, r5
 8010f50:	4b25      	ldr	r3, [pc, #148]	@ (8010fe8 <__lshift+0xd0>)
 8010f52:	4826      	ldr	r0, [pc, #152]	@ (8010fec <__lshift+0xd4>)
 8010f54:	0049      	lsls	r1, r1, #1
 8010f56:	f000 fa25 	bl	80113a4 <__assert_func>
 8010f5a:	3101      	adds	r1, #1
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	e7e8      	b.n	8010f32 <__lshift+0x1a>
 8010f60:	0098      	lsls	r0, r3, #2
 8010f62:	500a      	str	r2, [r1, r0]
 8010f64:	3301      	adds	r3, #1
 8010f66:	42bb      	cmp	r3, r7
 8010f68:	dbfa      	blt.n	8010f60 <__lshift+0x48>
 8010f6a:	43fb      	mvns	r3, r7
 8010f6c:	17db      	asrs	r3, r3, #31
 8010f6e:	401f      	ands	r7, r3
 8010f70:	00bf      	lsls	r7, r7, #2
 8010f72:	0023      	movs	r3, r4
 8010f74:	201f      	movs	r0, #31
 8010f76:	19c9      	adds	r1, r1, r7
 8010f78:	0037      	movs	r7, r6
 8010f7a:	6922      	ldr	r2, [r4, #16]
 8010f7c:	3314      	adds	r3, #20
 8010f7e:	0092      	lsls	r2, r2, #2
 8010f80:	189a      	adds	r2, r3, r2
 8010f82:	4007      	ands	r7, r0
 8010f84:	4206      	tst	r6, r0
 8010f86:	d029      	beq.n	8010fdc <__lshift+0xc4>
 8010f88:	3001      	adds	r0, #1
 8010f8a:	1bc0      	subs	r0, r0, r7
 8010f8c:	9003      	str	r0, [sp, #12]
 8010f8e:	468c      	mov	ip, r1
 8010f90:	2000      	movs	r0, #0
 8010f92:	681e      	ldr	r6, [r3, #0]
 8010f94:	40be      	lsls	r6, r7
 8010f96:	4306      	orrs	r6, r0
 8010f98:	4660      	mov	r0, ip
 8010f9a:	c040      	stmia	r0!, {r6}
 8010f9c:	4684      	mov	ip, r0
 8010f9e:	9e03      	ldr	r6, [sp, #12]
 8010fa0:	cb01      	ldmia	r3!, {r0}
 8010fa2:	40f0      	lsrs	r0, r6
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d8f4      	bhi.n	8010f92 <__lshift+0x7a>
 8010fa8:	0026      	movs	r6, r4
 8010faa:	3615      	adds	r6, #21
 8010fac:	2304      	movs	r3, #4
 8010fae:	42b2      	cmp	r2, r6
 8010fb0:	d304      	bcc.n	8010fbc <__lshift+0xa4>
 8010fb2:	1b13      	subs	r3, r2, r4
 8010fb4:	3b15      	subs	r3, #21
 8010fb6:	089b      	lsrs	r3, r3, #2
 8010fb8:	3301      	adds	r3, #1
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	50c8      	str	r0, [r1, r3]
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d002      	beq.n	8010fc8 <__lshift+0xb0>
 8010fc2:	9b01      	ldr	r3, [sp, #4]
 8010fc4:	3302      	adds	r3, #2
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	9b00      	ldr	r3, [sp, #0]
 8010fca:	9802      	ldr	r0, [sp, #8]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	0021      	movs	r1, r4
 8010fd0:	612b      	str	r3, [r5, #16]
 8010fd2:	f7ff fdc3 	bl	8010b5c <_Bfree>
 8010fd6:	0028      	movs	r0, r5
 8010fd8:	b005      	add	sp, #20
 8010fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fdc:	cb01      	ldmia	r3!, {r0}
 8010fde:	c101      	stmia	r1!, {r0}
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d8fb      	bhi.n	8010fdc <__lshift+0xc4>
 8010fe4:	e7f0      	b.n	8010fc8 <__lshift+0xb0>
 8010fe6:	46c0      	nop			@ (mov r8, r8)
 8010fe8:	08011d86 	.word	0x08011d86
 8010fec:	08011d97 	.word	0x08011d97

08010ff0 <__mcmp>:
 8010ff0:	b530      	push	{r4, r5, lr}
 8010ff2:	690b      	ldr	r3, [r1, #16]
 8010ff4:	6904      	ldr	r4, [r0, #16]
 8010ff6:	0002      	movs	r2, r0
 8010ff8:	1ae0      	subs	r0, r4, r3
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	d10f      	bne.n	801101e <__mcmp+0x2e>
 8010ffe:	3214      	adds	r2, #20
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	3114      	adds	r1, #20
 8011004:	0014      	movs	r4, r2
 8011006:	18c9      	adds	r1, r1, r3
 8011008:	18d2      	adds	r2, r2, r3
 801100a:	3a04      	subs	r2, #4
 801100c:	3904      	subs	r1, #4
 801100e:	6815      	ldr	r5, [r2, #0]
 8011010:	680b      	ldr	r3, [r1, #0]
 8011012:	429d      	cmp	r5, r3
 8011014:	d004      	beq.n	8011020 <__mcmp+0x30>
 8011016:	2001      	movs	r0, #1
 8011018:	429d      	cmp	r5, r3
 801101a:	d200      	bcs.n	801101e <__mcmp+0x2e>
 801101c:	3802      	subs	r0, #2
 801101e:	bd30      	pop	{r4, r5, pc}
 8011020:	4294      	cmp	r4, r2
 8011022:	d3f2      	bcc.n	801100a <__mcmp+0x1a>
 8011024:	e7fb      	b.n	801101e <__mcmp+0x2e>
	...

08011028 <__mdiff>:
 8011028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801102a:	000c      	movs	r4, r1
 801102c:	b087      	sub	sp, #28
 801102e:	9000      	str	r0, [sp, #0]
 8011030:	0011      	movs	r1, r2
 8011032:	0020      	movs	r0, r4
 8011034:	0017      	movs	r7, r2
 8011036:	f7ff ffdb 	bl	8010ff0 <__mcmp>
 801103a:	1e05      	subs	r5, r0, #0
 801103c:	d110      	bne.n	8011060 <__mdiff+0x38>
 801103e:	0001      	movs	r1, r0
 8011040:	9800      	ldr	r0, [sp, #0]
 8011042:	f7ff fd47 	bl	8010ad4 <_Balloc>
 8011046:	1e02      	subs	r2, r0, #0
 8011048:	d104      	bne.n	8011054 <__mdiff+0x2c>
 801104a:	4b40      	ldr	r3, [pc, #256]	@ (801114c <__mdiff+0x124>)
 801104c:	4840      	ldr	r0, [pc, #256]	@ (8011150 <__mdiff+0x128>)
 801104e:	4941      	ldr	r1, [pc, #260]	@ (8011154 <__mdiff+0x12c>)
 8011050:	f000 f9a8 	bl	80113a4 <__assert_func>
 8011054:	2301      	movs	r3, #1
 8011056:	6145      	str	r5, [r0, #20]
 8011058:	6103      	str	r3, [r0, #16]
 801105a:	0010      	movs	r0, r2
 801105c:	b007      	add	sp, #28
 801105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011060:	2600      	movs	r6, #0
 8011062:	42b0      	cmp	r0, r6
 8011064:	da03      	bge.n	801106e <__mdiff+0x46>
 8011066:	0023      	movs	r3, r4
 8011068:	003c      	movs	r4, r7
 801106a:	001f      	movs	r7, r3
 801106c:	3601      	adds	r6, #1
 801106e:	6861      	ldr	r1, [r4, #4]
 8011070:	9800      	ldr	r0, [sp, #0]
 8011072:	f7ff fd2f 	bl	8010ad4 <_Balloc>
 8011076:	1e02      	subs	r2, r0, #0
 8011078:	d103      	bne.n	8011082 <__mdiff+0x5a>
 801107a:	4b34      	ldr	r3, [pc, #208]	@ (801114c <__mdiff+0x124>)
 801107c:	4834      	ldr	r0, [pc, #208]	@ (8011150 <__mdiff+0x128>)
 801107e:	4936      	ldr	r1, [pc, #216]	@ (8011158 <__mdiff+0x130>)
 8011080:	e7e6      	b.n	8011050 <__mdiff+0x28>
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	3414      	adds	r4, #20
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	18e3      	adds	r3, r4, r3
 801108c:	0021      	movs	r1, r4
 801108e:	9401      	str	r4, [sp, #4]
 8011090:	003c      	movs	r4, r7
 8011092:	9302      	str	r3, [sp, #8]
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	3414      	adds	r4, #20
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	18e3      	adds	r3, r4, r3
 801109c:	9303      	str	r3, [sp, #12]
 801109e:	0003      	movs	r3, r0
 80110a0:	60c6      	str	r6, [r0, #12]
 80110a2:	468c      	mov	ip, r1
 80110a4:	2000      	movs	r0, #0
 80110a6:	3314      	adds	r3, #20
 80110a8:	9304      	str	r3, [sp, #16]
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	4663      	mov	r3, ip
 80110ae:	cb20      	ldmia	r3!, {r5}
 80110b0:	b2a9      	uxth	r1, r5
 80110b2:	000e      	movs	r6, r1
 80110b4:	469c      	mov	ip, r3
 80110b6:	cc08      	ldmia	r4!, {r3}
 80110b8:	0c2d      	lsrs	r5, r5, #16
 80110ba:	b299      	uxth	r1, r3
 80110bc:	1a71      	subs	r1, r6, r1
 80110be:	1809      	adds	r1, r1, r0
 80110c0:	0c1b      	lsrs	r3, r3, #16
 80110c2:	1408      	asrs	r0, r1, #16
 80110c4:	1aeb      	subs	r3, r5, r3
 80110c6:	181b      	adds	r3, r3, r0
 80110c8:	1418      	asrs	r0, r3, #16
 80110ca:	b289      	uxth	r1, r1
 80110cc:	041b      	lsls	r3, r3, #16
 80110ce:	4319      	orrs	r1, r3
 80110d0:	9b05      	ldr	r3, [sp, #20]
 80110d2:	c302      	stmia	r3!, {r1}
 80110d4:	9305      	str	r3, [sp, #20]
 80110d6:	9b03      	ldr	r3, [sp, #12]
 80110d8:	42a3      	cmp	r3, r4
 80110da:	d8e7      	bhi.n	80110ac <__mdiff+0x84>
 80110dc:	0039      	movs	r1, r7
 80110de:	9c03      	ldr	r4, [sp, #12]
 80110e0:	3115      	adds	r1, #21
 80110e2:	2304      	movs	r3, #4
 80110e4:	428c      	cmp	r4, r1
 80110e6:	d304      	bcc.n	80110f2 <__mdiff+0xca>
 80110e8:	1be3      	subs	r3, r4, r7
 80110ea:	3b15      	subs	r3, #21
 80110ec:	089b      	lsrs	r3, r3, #2
 80110ee:	3301      	adds	r3, #1
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	9901      	ldr	r1, [sp, #4]
 80110f4:	18cd      	adds	r5, r1, r3
 80110f6:	9904      	ldr	r1, [sp, #16]
 80110f8:	002e      	movs	r6, r5
 80110fa:	18cb      	adds	r3, r1, r3
 80110fc:	001f      	movs	r7, r3
 80110fe:	9902      	ldr	r1, [sp, #8]
 8011100:	428e      	cmp	r6, r1
 8011102:	d311      	bcc.n	8011128 <__mdiff+0x100>
 8011104:	9c02      	ldr	r4, [sp, #8]
 8011106:	1ee9      	subs	r1, r5, #3
 8011108:	2000      	movs	r0, #0
 801110a:	428c      	cmp	r4, r1
 801110c:	d304      	bcc.n	8011118 <__mdiff+0xf0>
 801110e:	0021      	movs	r1, r4
 8011110:	3103      	adds	r1, #3
 8011112:	1b49      	subs	r1, r1, r5
 8011114:	0889      	lsrs	r1, r1, #2
 8011116:	0088      	lsls	r0, r1, #2
 8011118:	181b      	adds	r3, r3, r0
 801111a:	3b04      	subs	r3, #4
 801111c:	6819      	ldr	r1, [r3, #0]
 801111e:	2900      	cmp	r1, #0
 8011120:	d010      	beq.n	8011144 <__mdiff+0x11c>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	6113      	str	r3, [r2, #16]
 8011126:	e798      	b.n	801105a <__mdiff+0x32>
 8011128:	4684      	mov	ip, r0
 801112a:	ce02      	ldmia	r6!, {r1}
 801112c:	b288      	uxth	r0, r1
 801112e:	4460      	add	r0, ip
 8011130:	1400      	asrs	r0, r0, #16
 8011132:	0c0c      	lsrs	r4, r1, #16
 8011134:	1904      	adds	r4, r0, r4
 8011136:	4461      	add	r1, ip
 8011138:	1420      	asrs	r0, r4, #16
 801113a:	b289      	uxth	r1, r1
 801113c:	0424      	lsls	r4, r4, #16
 801113e:	4321      	orrs	r1, r4
 8011140:	c702      	stmia	r7!, {r1}
 8011142:	e7dc      	b.n	80110fe <__mdiff+0xd6>
 8011144:	9900      	ldr	r1, [sp, #0]
 8011146:	3901      	subs	r1, #1
 8011148:	9100      	str	r1, [sp, #0]
 801114a:	e7e6      	b.n	801111a <__mdiff+0xf2>
 801114c:	08011d86 	.word	0x08011d86
 8011150:	08011d97 	.word	0x08011d97
 8011154:	00000237 	.word	0x00000237
 8011158:	00000245 	.word	0x00000245

0801115c <__d2b>:
 801115c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801115e:	2101      	movs	r1, #1
 8011160:	0016      	movs	r6, r2
 8011162:	001f      	movs	r7, r3
 8011164:	f7ff fcb6 	bl	8010ad4 <_Balloc>
 8011168:	1e04      	subs	r4, r0, #0
 801116a:	d105      	bne.n	8011178 <__d2b+0x1c>
 801116c:	0022      	movs	r2, r4
 801116e:	4b25      	ldr	r3, [pc, #148]	@ (8011204 <__d2b+0xa8>)
 8011170:	4825      	ldr	r0, [pc, #148]	@ (8011208 <__d2b+0xac>)
 8011172:	4926      	ldr	r1, [pc, #152]	@ (801120c <__d2b+0xb0>)
 8011174:	f000 f916 	bl	80113a4 <__assert_func>
 8011178:	033b      	lsls	r3, r7, #12
 801117a:	007d      	lsls	r5, r7, #1
 801117c:	0b1b      	lsrs	r3, r3, #12
 801117e:	0d6d      	lsrs	r5, r5, #21
 8011180:	d002      	beq.n	8011188 <__d2b+0x2c>
 8011182:	2280      	movs	r2, #128	@ 0x80
 8011184:	0352      	lsls	r2, r2, #13
 8011186:	4313      	orrs	r3, r2
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	2e00      	cmp	r6, #0
 801118c:	d025      	beq.n	80111da <__d2b+0x7e>
 801118e:	4668      	mov	r0, sp
 8011190:	9600      	str	r6, [sp, #0]
 8011192:	f7ff fd6c 	bl	8010c6e <__lo0bits>
 8011196:	9b01      	ldr	r3, [sp, #4]
 8011198:	9900      	ldr	r1, [sp, #0]
 801119a:	2800      	cmp	r0, #0
 801119c:	d01b      	beq.n	80111d6 <__d2b+0x7a>
 801119e:	2220      	movs	r2, #32
 80111a0:	001e      	movs	r6, r3
 80111a2:	1a12      	subs	r2, r2, r0
 80111a4:	4096      	lsls	r6, r2
 80111a6:	0032      	movs	r2, r6
 80111a8:	40c3      	lsrs	r3, r0
 80111aa:	430a      	orrs	r2, r1
 80111ac:	6162      	str	r2, [r4, #20]
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	9e01      	ldr	r6, [sp, #4]
 80111b2:	61a6      	str	r6, [r4, #24]
 80111b4:	1e73      	subs	r3, r6, #1
 80111b6:	419e      	sbcs	r6, r3
 80111b8:	3601      	adds	r6, #1
 80111ba:	6126      	str	r6, [r4, #16]
 80111bc:	2d00      	cmp	r5, #0
 80111be:	d014      	beq.n	80111ea <__d2b+0x8e>
 80111c0:	2635      	movs	r6, #53	@ 0x35
 80111c2:	4b13      	ldr	r3, [pc, #76]	@ (8011210 <__d2b+0xb4>)
 80111c4:	18ed      	adds	r5, r5, r3
 80111c6:	9b08      	ldr	r3, [sp, #32]
 80111c8:	182d      	adds	r5, r5, r0
 80111ca:	601d      	str	r5, [r3, #0]
 80111cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ce:	1a36      	subs	r6, r6, r0
 80111d0:	601e      	str	r6, [r3, #0]
 80111d2:	0020      	movs	r0, r4
 80111d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111d6:	6161      	str	r1, [r4, #20]
 80111d8:	e7ea      	b.n	80111b0 <__d2b+0x54>
 80111da:	a801      	add	r0, sp, #4
 80111dc:	f7ff fd47 	bl	8010c6e <__lo0bits>
 80111e0:	9b01      	ldr	r3, [sp, #4]
 80111e2:	2601      	movs	r6, #1
 80111e4:	6163      	str	r3, [r4, #20]
 80111e6:	3020      	adds	r0, #32
 80111e8:	e7e7      	b.n	80111ba <__d2b+0x5e>
 80111ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011214 <__d2b+0xb8>)
 80111ec:	18c0      	adds	r0, r0, r3
 80111ee:	9b08      	ldr	r3, [sp, #32]
 80111f0:	6018      	str	r0, [r3, #0]
 80111f2:	4b09      	ldr	r3, [pc, #36]	@ (8011218 <__d2b+0xbc>)
 80111f4:	18f3      	adds	r3, r6, r3
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	18e3      	adds	r3, r4, r3
 80111fa:	6958      	ldr	r0, [r3, #20]
 80111fc:	f7ff fd16 	bl	8010c2c <__hi0bits>
 8011200:	0176      	lsls	r6, r6, #5
 8011202:	e7e3      	b.n	80111cc <__d2b+0x70>
 8011204:	08011d86 	.word	0x08011d86
 8011208:	08011d97 	.word	0x08011d97
 801120c:	0000030f 	.word	0x0000030f
 8011210:	fffffbcd 	.word	0xfffffbcd
 8011214:	fffffbce 	.word	0xfffffbce
 8011218:	3fffffff 	.word	0x3fffffff

0801121c <__sflush_r>:
 801121c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801121e:	220c      	movs	r2, #12
 8011220:	5e8b      	ldrsh	r3, [r1, r2]
 8011222:	0005      	movs	r5, r0
 8011224:	000c      	movs	r4, r1
 8011226:	071a      	lsls	r2, r3, #28
 8011228:	d456      	bmi.n	80112d8 <__sflush_r+0xbc>
 801122a:	684a      	ldr	r2, [r1, #4]
 801122c:	2a00      	cmp	r2, #0
 801122e:	dc02      	bgt.n	8011236 <__sflush_r+0x1a>
 8011230:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011232:	2a00      	cmp	r2, #0
 8011234:	dd4e      	ble.n	80112d4 <__sflush_r+0xb8>
 8011236:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011238:	2f00      	cmp	r7, #0
 801123a:	d04b      	beq.n	80112d4 <__sflush_r+0xb8>
 801123c:	2200      	movs	r2, #0
 801123e:	2080      	movs	r0, #128	@ 0x80
 8011240:	682e      	ldr	r6, [r5, #0]
 8011242:	602a      	str	r2, [r5, #0]
 8011244:	001a      	movs	r2, r3
 8011246:	0140      	lsls	r0, r0, #5
 8011248:	6a21      	ldr	r1, [r4, #32]
 801124a:	4002      	ands	r2, r0
 801124c:	4203      	tst	r3, r0
 801124e:	d033      	beq.n	80112b8 <__sflush_r+0x9c>
 8011250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	075b      	lsls	r3, r3, #29
 8011256:	d506      	bpl.n	8011266 <__sflush_r+0x4a>
 8011258:	6863      	ldr	r3, [r4, #4]
 801125a:	1ad2      	subs	r2, r2, r3
 801125c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <__sflush_r+0x4a>
 8011262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011264:	1ad2      	subs	r2, r2, r3
 8011266:	2300      	movs	r3, #0
 8011268:	0028      	movs	r0, r5
 801126a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801126c:	6a21      	ldr	r1, [r4, #32]
 801126e:	47b8      	blx	r7
 8011270:	89a2      	ldrh	r2, [r4, #12]
 8011272:	1c43      	adds	r3, r0, #1
 8011274:	d106      	bne.n	8011284 <__sflush_r+0x68>
 8011276:	6829      	ldr	r1, [r5, #0]
 8011278:	291d      	cmp	r1, #29
 801127a:	d846      	bhi.n	801130a <__sflush_r+0xee>
 801127c:	4b29      	ldr	r3, [pc, #164]	@ (8011324 <__sflush_r+0x108>)
 801127e:	410b      	asrs	r3, r1
 8011280:	07db      	lsls	r3, r3, #31
 8011282:	d442      	bmi.n	801130a <__sflush_r+0xee>
 8011284:	2300      	movs	r3, #0
 8011286:	6063      	str	r3, [r4, #4]
 8011288:	6923      	ldr	r3, [r4, #16]
 801128a:	6023      	str	r3, [r4, #0]
 801128c:	04d2      	lsls	r2, r2, #19
 801128e:	d505      	bpl.n	801129c <__sflush_r+0x80>
 8011290:	1c43      	adds	r3, r0, #1
 8011292:	d102      	bne.n	801129a <__sflush_r+0x7e>
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d100      	bne.n	801129c <__sflush_r+0x80>
 801129a:	6560      	str	r0, [r4, #84]	@ 0x54
 801129c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801129e:	602e      	str	r6, [r5, #0]
 80112a0:	2900      	cmp	r1, #0
 80112a2:	d017      	beq.n	80112d4 <__sflush_r+0xb8>
 80112a4:	0023      	movs	r3, r4
 80112a6:	3344      	adds	r3, #68	@ 0x44
 80112a8:	4299      	cmp	r1, r3
 80112aa:	d002      	beq.n	80112b2 <__sflush_r+0x96>
 80112ac:	0028      	movs	r0, r5
 80112ae:	f7ff fb0b 	bl	80108c8 <_free_r>
 80112b2:	2300      	movs	r3, #0
 80112b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80112b6:	e00d      	b.n	80112d4 <__sflush_r+0xb8>
 80112b8:	2301      	movs	r3, #1
 80112ba:	0028      	movs	r0, r5
 80112bc:	47b8      	blx	r7
 80112be:	0002      	movs	r2, r0
 80112c0:	1c43      	adds	r3, r0, #1
 80112c2:	d1c6      	bne.n	8011252 <__sflush_r+0x36>
 80112c4:	682b      	ldr	r3, [r5, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d0c3      	beq.n	8011252 <__sflush_r+0x36>
 80112ca:	2b1d      	cmp	r3, #29
 80112cc:	d001      	beq.n	80112d2 <__sflush_r+0xb6>
 80112ce:	2b16      	cmp	r3, #22
 80112d0:	d11a      	bne.n	8011308 <__sflush_r+0xec>
 80112d2:	602e      	str	r6, [r5, #0]
 80112d4:	2000      	movs	r0, #0
 80112d6:	e01e      	b.n	8011316 <__sflush_r+0xfa>
 80112d8:	690e      	ldr	r6, [r1, #16]
 80112da:	2e00      	cmp	r6, #0
 80112dc:	d0fa      	beq.n	80112d4 <__sflush_r+0xb8>
 80112de:	680f      	ldr	r7, [r1, #0]
 80112e0:	600e      	str	r6, [r1, #0]
 80112e2:	1bba      	subs	r2, r7, r6
 80112e4:	9201      	str	r2, [sp, #4]
 80112e6:	2200      	movs	r2, #0
 80112e8:	079b      	lsls	r3, r3, #30
 80112ea:	d100      	bne.n	80112ee <__sflush_r+0xd2>
 80112ec:	694a      	ldr	r2, [r1, #20]
 80112ee:	60a2      	str	r2, [r4, #8]
 80112f0:	9b01      	ldr	r3, [sp, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	ddee      	ble.n	80112d4 <__sflush_r+0xb8>
 80112f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80112f8:	0032      	movs	r2, r6
 80112fa:	001f      	movs	r7, r3
 80112fc:	0028      	movs	r0, r5
 80112fe:	9b01      	ldr	r3, [sp, #4]
 8011300:	6a21      	ldr	r1, [r4, #32]
 8011302:	47b8      	blx	r7
 8011304:	2800      	cmp	r0, #0
 8011306:	dc07      	bgt.n	8011318 <__sflush_r+0xfc>
 8011308:	89a2      	ldrh	r2, [r4, #12]
 801130a:	2340      	movs	r3, #64	@ 0x40
 801130c:	2001      	movs	r0, #1
 801130e:	4313      	orrs	r3, r2
 8011310:	b21b      	sxth	r3, r3
 8011312:	81a3      	strh	r3, [r4, #12]
 8011314:	4240      	negs	r0, r0
 8011316:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011318:	9b01      	ldr	r3, [sp, #4]
 801131a:	1836      	adds	r6, r6, r0
 801131c:	1a1b      	subs	r3, r3, r0
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	e7e6      	b.n	80112f0 <__sflush_r+0xd4>
 8011322:	46c0      	nop			@ (mov r8, r8)
 8011324:	dfbffffe 	.word	0xdfbffffe

08011328 <_fflush_r>:
 8011328:	690b      	ldr	r3, [r1, #16]
 801132a:	b570      	push	{r4, r5, r6, lr}
 801132c:	0005      	movs	r5, r0
 801132e:	000c      	movs	r4, r1
 8011330:	2b00      	cmp	r3, #0
 8011332:	d102      	bne.n	801133a <_fflush_r+0x12>
 8011334:	2500      	movs	r5, #0
 8011336:	0028      	movs	r0, r5
 8011338:	bd70      	pop	{r4, r5, r6, pc}
 801133a:	2800      	cmp	r0, #0
 801133c:	d004      	beq.n	8011348 <_fflush_r+0x20>
 801133e:	6a03      	ldr	r3, [r0, #32]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d101      	bne.n	8011348 <_fflush_r+0x20>
 8011344:	f7fe fb14 	bl	800f970 <__sinit>
 8011348:	220c      	movs	r2, #12
 801134a:	5ea3      	ldrsh	r3, [r4, r2]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d0f1      	beq.n	8011334 <_fflush_r+0xc>
 8011350:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011352:	07d2      	lsls	r2, r2, #31
 8011354:	d404      	bmi.n	8011360 <_fflush_r+0x38>
 8011356:	059b      	lsls	r3, r3, #22
 8011358:	d402      	bmi.n	8011360 <_fflush_r+0x38>
 801135a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801135c:	f7fe fc1b 	bl	800fb96 <__retarget_lock_acquire_recursive>
 8011360:	0028      	movs	r0, r5
 8011362:	0021      	movs	r1, r4
 8011364:	f7ff ff5a 	bl	801121c <__sflush_r>
 8011368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801136a:	0005      	movs	r5, r0
 801136c:	07db      	lsls	r3, r3, #31
 801136e:	d4e2      	bmi.n	8011336 <_fflush_r+0xe>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	059b      	lsls	r3, r3, #22
 8011374:	d4df      	bmi.n	8011336 <_fflush_r+0xe>
 8011376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011378:	f7fe fc0e 	bl	800fb98 <__retarget_lock_release_recursive>
 801137c:	e7db      	b.n	8011336 <_fflush_r+0xe>
	...

08011380 <_sbrk_r>:
 8011380:	2300      	movs	r3, #0
 8011382:	b570      	push	{r4, r5, r6, lr}
 8011384:	4d06      	ldr	r5, [pc, #24]	@ (80113a0 <_sbrk_r+0x20>)
 8011386:	0004      	movs	r4, r0
 8011388:	0008      	movs	r0, r1
 801138a:	602b      	str	r3, [r5, #0]
 801138c:	f7f1 fd76 	bl	8002e7c <_sbrk>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d103      	bne.n	801139c <_sbrk_r+0x1c>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d000      	beq.n	801139c <_sbrk_r+0x1c>
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	bd70      	pop	{r4, r5, r6, pc}
 801139e:	46c0      	nop			@ (mov r8, r8)
 80113a0:	20001da8 	.word	0x20001da8

080113a4 <__assert_func>:
 80113a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80113a6:	0014      	movs	r4, r2
 80113a8:	001a      	movs	r2, r3
 80113aa:	4b09      	ldr	r3, [pc, #36]	@ (80113d0 <__assert_func+0x2c>)
 80113ac:	0005      	movs	r5, r0
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	000e      	movs	r6, r1
 80113b2:	68d8      	ldr	r0, [r3, #12]
 80113b4:	4b07      	ldr	r3, [pc, #28]	@ (80113d4 <__assert_func+0x30>)
 80113b6:	2c00      	cmp	r4, #0
 80113b8:	d101      	bne.n	80113be <__assert_func+0x1a>
 80113ba:	4b07      	ldr	r3, [pc, #28]	@ (80113d8 <__assert_func+0x34>)
 80113bc:	001c      	movs	r4, r3
 80113be:	4907      	ldr	r1, [pc, #28]	@ (80113dc <__assert_func+0x38>)
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	9402      	str	r4, [sp, #8]
 80113c4:	002b      	movs	r3, r5
 80113c6:	9600      	str	r6, [sp, #0]
 80113c8:	f000 f856 	bl	8011478 <fiprintf>
 80113cc:	f000 f864 	bl	8011498 <abort>
 80113d0:	20000200 	.word	0x20000200
 80113d4:	08011efa 	.word	0x08011efa
 80113d8:	08011f35 	.word	0x08011f35
 80113dc:	08011f07 	.word	0x08011f07

080113e0 <_calloc_r>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	0c0b      	lsrs	r3, r1, #16
 80113e4:	0c15      	lsrs	r5, r2, #16
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d11e      	bne.n	8011428 <_calloc_r+0x48>
 80113ea:	2d00      	cmp	r5, #0
 80113ec:	d10c      	bne.n	8011408 <_calloc_r+0x28>
 80113ee:	b289      	uxth	r1, r1
 80113f0:	b294      	uxth	r4, r2
 80113f2:	434c      	muls	r4, r1
 80113f4:	0021      	movs	r1, r4
 80113f6:	f7ff fadd 	bl	80109b4 <_malloc_r>
 80113fa:	1e05      	subs	r5, r0, #0
 80113fc:	d01a      	beq.n	8011434 <_calloc_r+0x54>
 80113fe:	0022      	movs	r2, r4
 8011400:	2100      	movs	r1, #0
 8011402:	f7fe fb43 	bl	800fa8c <memset>
 8011406:	e016      	b.n	8011436 <_calloc_r+0x56>
 8011408:	1c2b      	adds	r3, r5, #0
 801140a:	1c0c      	adds	r4, r1, #0
 801140c:	b289      	uxth	r1, r1
 801140e:	b292      	uxth	r2, r2
 8011410:	434a      	muls	r2, r1
 8011412:	b29b      	uxth	r3, r3
 8011414:	b2a1      	uxth	r1, r4
 8011416:	4359      	muls	r1, r3
 8011418:	0c14      	lsrs	r4, r2, #16
 801141a:	190c      	adds	r4, r1, r4
 801141c:	0c23      	lsrs	r3, r4, #16
 801141e:	d107      	bne.n	8011430 <_calloc_r+0x50>
 8011420:	0424      	lsls	r4, r4, #16
 8011422:	b292      	uxth	r2, r2
 8011424:	4314      	orrs	r4, r2
 8011426:	e7e5      	b.n	80113f4 <_calloc_r+0x14>
 8011428:	2d00      	cmp	r5, #0
 801142a:	d101      	bne.n	8011430 <_calloc_r+0x50>
 801142c:	1c14      	adds	r4, r2, #0
 801142e:	e7ed      	b.n	801140c <_calloc_r+0x2c>
 8011430:	230c      	movs	r3, #12
 8011432:	6003      	str	r3, [r0, #0]
 8011434:	2500      	movs	r5, #0
 8011436:	0028      	movs	r0, r5
 8011438:	bd70      	pop	{r4, r5, r6, pc}

0801143a <__ascii_mbtowc>:
 801143a:	b082      	sub	sp, #8
 801143c:	2900      	cmp	r1, #0
 801143e:	d100      	bne.n	8011442 <__ascii_mbtowc+0x8>
 8011440:	a901      	add	r1, sp, #4
 8011442:	1e10      	subs	r0, r2, #0
 8011444:	d006      	beq.n	8011454 <__ascii_mbtowc+0x1a>
 8011446:	2b00      	cmp	r3, #0
 8011448:	d006      	beq.n	8011458 <__ascii_mbtowc+0x1e>
 801144a:	7813      	ldrb	r3, [r2, #0]
 801144c:	600b      	str	r3, [r1, #0]
 801144e:	7810      	ldrb	r0, [r2, #0]
 8011450:	1e43      	subs	r3, r0, #1
 8011452:	4198      	sbcs	r0, r3
 8011454:	b002      	add	sp, #8
 8011456:	4770      	bx	lr
 8011458:	2002      	movs	r0, #2
 801145a:	4240      	negs	r0, r0
 801145c:	e7fa      	b.n	8011454 <__ascii_mbtowc+0x1a>

0801145e <__ascii_wctomb>:
 801145e:	0003      	movs	r3, r0
 8011460:	1e08      	subs	r0, r1, #0
 8011462:	d005      	beq.n	8011470 <__ascii_wctomb+0x12>
 8011464:	2aff      	cmp	r2, #255	@ 0xff
 8011466:	d904      	bls.n	8011472 <__ascii_wctomb+0x14>
 8011468:	228a      	movs	r2, #138	@ 0x8a
 801146a:	2001      	movs	r0, #1
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	4240      	negs	r0, r0
 8011470:	4770      	bx	lr
 8011472:	2001      	movs	r0, #1
 8011474:	700a      	strb	r2, [r1, #0]
 8011476:	e7fb      	b.n	8011470 <__ascii_wctomb+0x12>

08011478 <fiprintf>:
 8011478:	b40e      	push	{r1, r2, r3}
 801147a:	b517      	push	{r0, r1, r2, r4, lr}
 801147c:	4c05      	ldr	r4, [pc, #20]	@ (8011494 <fiprintf+0x1c>)
 801147e:	ab05      	add	r3, sp, #20
 8011480:	cb04      	ldmia	r3!, {r2}
 8011482:	0001      	movs	r1, r0
 8011484:	6820      	ldr	r0, [r4, #0]
 8011486:	9301      	str	r3, [sp, #4]
 8011488:	f000 f834 	bl	80114f4 <_vfiprintf_r>
 801148c:	bc1e      	pop	{r1, r2, r3, r4}
 801148e:	bc08      	pop	{r3}
 8011490:	b003      	add	sp, #12
 8011492:	4718      	bx	r3
 8011494:	20000200 	.word	0x20000200

08011498 <abort>:
 8011498:	2006      	movs	r0, #6
 801149a:	b510      	push	{r4, lr}
 801149c:	f000 fa10 	bl	80118c0 <raise>
 80114a0:	2001      	movs	r0, #1
 80114a2:	f7f1 fc79 	bl	8002d98 <_exit>

080114a6 <__sfputc_r>:
 80114a6:	6893      	ldr	r3, [r2, #8]
 80114a8:	b510      	push	{r4, lr}
 80114aa:	3b01      	subs	r3, #1
 80114ac:	6093      	str	r3, [r2, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	da04      	bge.n	80114bc <__sfputc_r+0x16>
 80114b2:	6994      	ldr	r4, [r2, #24]
 80114b4:	42a3      	cmp	r3, r4
 80114b6:	db07      	blt.n	80114c8 <__sfputc_r+0x22>
 80114b8:	290a      	cmp	r1, #10
 80114ba:	d005      	beq.n	80114c8 <__sfputc_r+0x22>
 80114bc:	6813      	ldr	r3, [r2, #0]
 80114be:	1c58      	adds	r0, r3, #1
 80114c0:	6010      	str	r0, [r2, #0]
 80114c2:	7019      	strb	r1, [r3, #0]
 80114c4:	0008      	movs	r0, r1
 80114c6:	bd10      	pop	{r4, pc}
 80114c8:	f000 f930 	bl	801172c <__swbuf_r>
 80114cc:	0001      	movs	r1, r0
 80114ce:	e7f9      	b.n	80114c4 <__sfputc_r+0x1e>

080114d0 <__sfputs_r>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	0006      	movs	r6, r0
 80114d4:	000f      	movs	r7, r1
 80114d6:	0014      	movs	r4, r2
 80114d8:	18d5      	adds	r5, r2, r3
 80114da:	42ac      	cmp	r4, r5
 80114dc:	d101      	bne.n	80114e2 <__sfputs_r+0x12>
 80114de:	2000      	movs	r0, #0
 80114e0:	e007      	b.n	80114f2 <__sfputs_r+0x22>
 80114e2:	7821      	ldrb	r1, [r4, #0]
 80114e4:	003a      	movs	r2, r7
 80114e6:	0030      	movs	r0, r6
 80114e8:	f7ff ffdd 	bl	80114a6 <__sfputc_r>
 80114ec:	3401      	adds	r4, #1
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	d1f3      	bne.n	80114da <__sfputs_r+0xa>
 80114f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114f4 <_vfiprintf_r>:
 80114f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114f6:	b0a1      	sub	sp, #132	@ 0x84
 80114f8:	000f      	movs	r7, r1
 80114fa:	0015      	movs	r5, r2
 80114fc:	001e      	movs	r6, r3
 80114fe:	9003      	str	r0, [sp, #12]
 8011500:	2800      	cmp	r0, #0
 8011502:	d004      	beq.n	801150e <_vfiprintf_r+0x1a>
 8011504:	6a03      	ldr	r3, [r0, #32]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d101      	bne.n	801150e <_vfiprintf_r+0x1a>
 801150a:	f7fe fa31 	bl	800f970 <__sinit>
 801150e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011510:	07db      	lsls	r3, r3, #31
 8011512:	d405      	bmi.n	8011520 <_vfiprintf_r+0x2c>
 8011514:	89bb      	ldrh	r3, [r7, #12]
 8011516:	059b      	lsls	r3, r3, #22
 8011518:	d402      	bmi.n	8011520 <_vfiprintf_r+0x2c>
 801151a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801151c:	f7fe fb3b 	bl	800fb96 <__retarget_lock_acquire_recursive>
 8011520:	89bb      	ldrh	r3, [r7, #12]
 8011522:	071b      	lsls	r3, r3, #28
 8011524:	d502      	bpl.n	801152c <_vfiprintf_r+0x38>
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d113      	bne.n	8011554 <_vfiprintf_r+0x60>
 801152c:	0039      	movs	r1, r7
 801152e:	9803      	ldr	r0, [sp, #12]
 8011530:	f000 f93e 	bl	80117b0 <__swsetup_r>
 8011534:	2800      	cmp	r0, #0
 8011536:	d00d      	beq.n	8011554 <_vfiprintf_r+0x60>
 8011538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801153a:	07db      	lsls	r3, r3, #31
 801153c:	d503      	bpl.n	8011546 <_vfiprintf_r+0x52>
 801153e:	2001      	movs	r0, #1
 8011540:	4240      	negs	r0, r0
 8011542:	b021      	add	sp, #132	@ 0x84
 8011544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011546:	89bb      	ldrh	r3, [r7, #12]
 8011548:	059b      	lsls	r3, r3, #22
 801154a:	d4f8      	bmi.n	801153e <_vfiprintf_r+0x4a>
 801154c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801154e:	f7fe fb23 	bl	800fb98 <__retarget_lock_release_recursive>
 8011552:	e7f4      	b.n	801153e <_vfiprintf_r+0x4a>
 8011554:	2300      	movs	r3, #0
 8011556:	ac08      	add	r4, sp, #32
 8011558:	6163      	str	r3, [r4, #20]
 801155a:	3320      	adds	r3, #32
 801155c:	7663      	strb	r3, [r4, #25]
 801155e:	3310      	adds	r3, #16
 8011560:	76a3      	strb	r3, [r4, #26]
 8011562:	9607      	str	r6, [sp, #28]
 8011564:	002e      	movs	r6, r5
 8011566:	7833      	ldrb	r3, [r6, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <_vfiprintf_r+0x7c>
 801156c:	2b25      	cmp	r3, #37	@ 0x25
 801156e:	d148      	bne.n	8011602 <_vfiprintf_r+0x10e>
 8011570:	1b73      	subs	r3, r6, r5
 8011572:	9305      	str	r3, [sp, #20]
 8011574:	42ae      	cmp	r6, r5
 8011576:	d00b      	beq.n	8011590 <_vfiprintf_r+0x9c>
 8011578:	002a      	movs	r2, r5
 801157a:	0039      	movs	r1, r7
 801157c:	9803      	ldr	r0, [sp, #12]
 801157e:	f7ff ffa7 	bl	80114d0 <__sfputs_r>
 8011582:	3001      	adds	r0, #1
 8011584:	d100      	bne.n	8011588 <_vfiprintf_r+0x94>
 8011586:	e0ae      	b.n	80116e6 <_vfiprintf_r+0x1f2>
 8011588:	6963      	ldr	r3, [r4, #20]
 801158a:	9a05      	ldr	r2, [sp, #20]
 801158c:	189b      	adds	r3, r3, r2
 801158e:	6163      	str	r3, [r4, #20]
 8011590:	7833      	ldrb	r3, [r6, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d100      	bne.n	8011598 <_vfiprintf_r+0xa4>
 8011596:	e0a6      	b.n	80116e6 <_vfiprintf_r+0x1f2>
 8011598:	2201      	movs	r2, #1
 801159a:	2300      	movs	r3, #0
 801159c:	4252      	negs	r2, r2
 801159e:	6062      	str	r2, [r4, #4]
 80115a0:	a904      	add	r1, sp, #16
 80115a2:	3254      	adds	r2, #84	@ 0x54
 80115a4:	1852      	adds	r2, r2, r1
 80115a6:	1c75      	adds	r5, r6, #1
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	60e3      	str	r3, [r4, #12]
 80115ac:	60a3      	str	r3, [r4, #8]
 80115ae:	7013      	strb	r3, [r2, #0]
 80115b0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80115b2:	4b59      	ldr	r3, [pc, #356]	@ (8011718 <_vfiprintf_r+0x224>)
 80115b4:	2205      	movs	r2, #5
 80115b6:	0018      	movs	r0, r3
 80115b8:	7829      	ldrb	r1, [r5, #0]
 80115ba:	9305      	str	r3, [sp, #20]
 80115bc:	f7fe faed 	bl	800fb9a <memchr>
 80115c0:	1c6e      	adds	r6, r5, #1
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d11f      	bne.n	8011606 <_vfiprintf_r+0x112>
 80115c6:	6822      	ldr	r2, [r4, #0]
 80115c8:	06d3      	lsls	r3, r2, #27
 80115ca:	d504      	bpl.n	80115d6 <_vfiprintf_r+0xe2>
 80115cc:	2353      	movs	r3, #83	@ 0x53
 80115ce:	a904      	add	r1, sp, #16
 80115d0:	185b      	adds	r3, r3, r1
 80115d2:	2120      	movs	r1, #32
 80115d4:	7019      	strb	r1, [r3, #0]
 80115d6:	0713      	lsls	r3, r2, #28
 80115d8:	d504      	bpl.n	80115e4 <_vfiprintf_r+0xf0>
 80115da:	2353      	movs	r3, #83	@ 0x53
 80115dc:	a904      	add	r1, sp, #16
 80115de:	185b      	adds	r3, r3, r1
 80115e0:	212b      	movs	r1, #43	@ 0x2b
 80115e2:	7019      	strb	r1, [r3, #0]
 80115e4:	782b      	ldrb	r3, [r5, #0]
 80115e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80115e8:	d016      	beq.n	8011618 <_vfiprintf_r+0x124>
 80115ea:	002e      	movs	r6, r5
 80115ec:	2100      	movs	r1, #0
 80115ee:	200a      	movs	r0, #10
 80115f0:	68e3      	ldr	r3, [r4, #12]
 80115f2:	7832      	ldrb	r2, [r6, #0]
 80115f4:	1c75      	adds	r5, r6, #1
 80115f6:	3a30      	subs	r2, #48	@ 0x30
 80115f8:	2a09      	cmp	r2, #9
 80115fa:	d950      	bls.n	801169e <_vfiprintf_r+0x1aa>
 80115fc:	2900      	cmp	r1, #0
 80115fe:	d111      	bne.n	8011624 <_vfiprintf_r+0x130>
 8011600:	e017      	b.n	8011632 <_vfiprintf_r+0x13e>
 8011602:	3601      	adds	r6, #1
 8011604:	e7af      	b.n	8011566 <_vfiprintf_r+0x72>
 8011606:	9b05      	ldr	r3, [sp, #20]
 8011608:	6822      	ldr	r2, [r4, #0]
 801160a:	1ac0      	subs	r0, r0, r3
 801160c:	2301      	movs	r3, #1
 801160e:	4083      	lsls	r3, r0
 8011610:	4313      	orrs	r3, r2
 8011612:	0035      	movs	r5, r6
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	e7cc      	b.n	80115b2 <_vfiprintf_r+0xbe>
 8011618:	9b07      	ldr	r3, [sp, #28]
 801161a:	1d19      	adds	r1, r3, #4
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	9107      	str	r1, [sp, #28]
 8011620:	2b00      	cmp	r3, #0
 8011622:	db01      	blt.n	8011628 <_vfiprintf_r+0x134>
 8011624:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011626:	e004      	b.n	8011632 <_vfiprintf_r+0x13e>
 8011628:	425b      	negs	r3, r3
 801162a:	60e3      	str	r3, [r4, #12]
 801162c:	2302      	movs	r3, #2
 801162e:	4313      	orrs	r3, r2
 8011630:	6023      	str	r3, [r4, #0]
 8011632:	7833      	ldrb	r3, [r6, #0]
 8011634:	2b2e      	cmp	r3, #46	@ 0x2e
 8011636:	d10c      	bne.n	8011652 <_vfiprintf_r+0x15e>
 8011638:	7873      	ldrb	r3, [r6, #1]
 801163a:	2b2a      	cmp	r3, #42	@ 0x2a
 801163c:	d134      	bne.n	80116a8 <_vfiprintf_r+0x1b4>
 801163e:	9b07      	ldr	r3, [sp, #28]
 8011640:	3602      	adds	r6, #2
 8011642:	1d1a      	adds	r2, r3, #4
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	9207      	str	r2, [sp, #28]
 8011648:	2b00      	cmp	r3, #0
 801164a:	da01      	bge.n	8011650 <_vfiprintf_r+0x15c>
 801164c:	2301      	movs	r3, #1
 801164e:	425b      	negs	r3, r3
 8011650:	9309      	str	r3, [sp, #36]	@ 0x24
 8011652:	4d32      	ldr	r5, [pc, #200]	@ (801171c <_vfiprintf_r+0x228>)
 8011654:	2203      	movs	r2, #3
 8011656:	0028      	movs	r0, r5
 8011658:	7831      	ldrb	r1, [r6, #0]
 801165a:	f7fe fa9e 	bl	800fb9a <memchr>
 801165e:	2800      	cmp	r0, #0
 8011660:	d006      	beq.n	8011670 <_vfiprintf_r+0x17c>
 8011662:	2340      	movs	r3, #64	@ 0x40
 8011664:	1b40      	subs	r0, r0, r5
 8011666:	4083      	lsls	r3, r0
 8011668:	6822      	ldr	r2, [r4, #0]
 801166a:	3601      	adds	r6, #1
 801166c:	4313      	orrs	r3, r2
 801166e:	6023      	str	r3, [r4, #0]
 8011670:	7831      	ldrb	r1, [r6, #0]
 8011672:	2206      	movs	r2, #6
 8011674:	482a      	ldr	r0, [pc, #168]	@ (8011720 <_vfiprintf_r+0x22c>)
 8011676:	1c75      	adds	r5, r6, #1
 8011678:	7621      	strb	r1, [r4, #24]
 801167a:	f7fe fa8e 	bl	800fb9a <memchr>
 801167e:	2800      	cmp	r0, #0
 8011680:	d040      	beq.n	8011704 <_vfiprintf_r+0x210>
 8011682:	4b28      	ldr	r3, [pc, #160]	@ (8011724 <_vfiprintf_r+0x230>)
 8011684:	2b00      	cmp	r3, #0
 8011686:	d122      	bne.n	80116ce <_vfiprintf_r+0x1da>
 8011688:	2207      	movs	r2, #7
 801168a:	9b07      	ldr	r3, [sp, #28]
 801168c:	3307      	adds	r3, #7
 801168e:	4393      	bics	r3, r2
 8011690:	3308      	adds	r3, #8
 8011692:	9307      	str	r3, [sp, #28]
 8011694:	6963      	ldr	r3, [r4, #20]
 8011696:	9a04      	ldr	r2, [sp, #16]
 8011698:	189b      	adds	r3, r3, r2
 801169a:	6163      	str	r3, [r4, #20]
 801169c:	e762      	b.n	8011564 <_vfiprintf_r+0x70>
 801169e:	4343      	muls	r3, r0
 80116a0:	002e      	movs	r6, r5
 80116a2:	2101      	movs	r1, #1
 80116a4:	189b      	adds	r3, r3, r2
 80116a6:	e7a4      	b.n	80115f2 <_vfiprintf_r+0xfe>
 80116a8:	2300      	movs	r3, #0
 80116aa:	200a      	movs	r0, #10
 80116ac:	0019      	movs	r1, r3
 80116ae:	3601      	adds	r6, #1
 80116b0:	6063      	str	r3, [r4, #4]
 80116b2:	7832      	ldrb	r2, [r6, #0]
 80116b4:	1c75      	adds	r5, r6, #1
 80116b6:	3a30      	subs	r2, #48	@ 0x30
 80116b8:	2a09      	cmp	r2, #9
 80116ba:	d903      	bls.n	80116c4 <_vfiprintf_r+0x1d0>
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d0c8      	beq.n	8011652 <_vfiprintf_r+0x15e>
 80116c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80116c2:	e7c6      	b.n	8011652 <_vfiprintf_r+0x15e>
 80116c4:	4341      	muls	r1, r0
 80116c6:	002e      	movs	r6, r5
 80116c8:	2301      	movs	r3, #1
 80116ca:	1889      	adds	r1, r1, r2
 80116cc:	e7f1      	b.n	80116b2 <_vfiprintf_r+0x1be>
 80116ce:	aa07      	add	r2, sp, #28
 80116d0:	9200      	str	r2, [sp, #0]
 80116d2:	0021      	movs	r1, r4
 80116d4:	003a      	movs	r2, r7
 80116d6:	4b14      	ldr	r3, [pc, #80]	@ (8011728 <_vfiprintf_r+0x234>)
 80116d8:	9803      	ldr	r0, [sp, #12]
 80116da:	f7fd fcfd 	bl	800f0d8 <_printf_float>
 80116de:	9004      	str	r0, [sp, #16]
 80116e0:	9b04      	ldr	r3, [sp, #16]
 80116e2:	3301      	adds	r3, #1
 80116e4:	d1d6      	bne.n	8011694 <_vfiprintf_r+0x1a0>
 80116e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80116e8:	07db      	lsls	r3, r3, #31
 80116ea:	d405      	bmi.n	80116f8 <_vfiprintf_r+0x204>
 80116ec:	89bb      	ldrh	r3, [r7, #12]
 80116ee:	059b      	lsls	r3, r3, #22
 80116f0:	d402      	bmi.n	80116f8 <_vfiprintf_r+0x204>
 80116f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80116f4:	f7fe fa50 	bl	800fb98 <__retarget_lock_release_recursive>
 80116f8:	89bb      	ldrh	r3, [r7, #12]
 80116fa:	065b      	lsls	r3, r3, #25
 80116fc:	d500      	bpl.n	8011700 <_vfiprintf_r+0x20c>
 80116fe:	e71e      	b.n	801153e <_vfiprintf_r+0x4a>
 8011700:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011702:	e71e      	b.n	8011542 <_vfiprintf_r+0x4e>
 8011704:	aa07      	add	r2, sp, #28
 8011706:	9200      	str	r2, [sp, #0]
 8011708:	0021      	movs	r1, r4
 801170a:	003a      	movs	r2, r7
 801170c:	4b06      	ldr	r3, [pc, #24]	@ (8011728 <_vfiprintf_r+0x234>)
 801170e:	9803      	ldr	r0, [sp, #12]
 8011710:	f7fd ff90 	bl	800f634 <_printf_i>
 8011714:	e7e3      	b.n	80116de <_vfiprintf_r+0x1ea>
 8011716:	46c0      	nop			@ (mov r8, r8)
 8011718:	08012037 	.word	0x08012037
 801171c:	0801203d 	.word	0x0801203d
 8011720:	08012041 	.word	0x08012041
 8011724:	0800f0d9 	.word	0x0800f0d9
 8011728:	080114d1 	.word	0x080114d1

0801172c <__swbuf_r>:
 801172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172e:	0006      	movs	r6, r0
 8011730:	000d      	movs	r5, r1
 8011732:	0014      	movs	r4, r2
 8011734:	2800      	cmp	r0, #0
 8011736:	d004      	beq.n	8011742 <__swbuf_r+0x16>
 8011738:	6a03      	ldr	r3, [r0, #32]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d101      	bne.n	8011742 <__swbuf_r+0x16>
 801173e:	f7fe f917 	bl	800f970 <__sinit>
 8011742:	69a3      	ldr	r3, [r4, #24]
 8011744:	60a3      	str	r3, [r4, #8]
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	071b      	lsls	r3, r3, #28
 801174a:	d502      	bpl.n	8011752 <__swbuf_r+0x26>
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <__swbuf_r+0x3a>
 8011752:	0021      	movs	r1, r4
 8011754:	0030      	movs	r0, r6
 8011756:	f000 f82b 	bl	80117b0 <__swsetup_r>
 801175a:	2800      	cmp	r0, #0
 801175c:	d003      	beq.n	8011766 <__swbuf_r+0x3a>
 801175e:	2501      	movs	r5, #1
 8011760:	426d      	negs	r5, r5
 8011762:	0028      	movs	r0, r5
 8011764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011766:	6923      	ldr	r3, [r4, #16]
 8011768:	6820      	ldr	r0, [r4, #0]
 801176a:	b2ef      	uxtb	r7, r5
 801176c:	1ac0      	subs	r0, r0, r3
 801176e:	6963      	ldr	r3, [r4, #20]
 8011770:	b2ed      	uxtb	r5, r5
 8011772:	4283      	cmp	r3, r0
 8011774:	dc05      	bgt.n	8011782 <__swbuf_r+0x56>
 8011776:	0021      	movs	r1, r4
 8011778:	0030      	movs	r0, r6
 801177a:	f7ff fdd5 	bl	8011328 <_fflush_r>
 801177e:	2800      	cmp	r0, #0
 8011780:	d1ed      	bne.n	801175e <__swbuf_r+0x32>
 8011782:	68a3      	ldr	r3, [r4, #8]
 8011784:	3001      	adds	r0, #1
 8011786:	3b01      	subs	r3, #1
 8011788:	60a3      	str	r3, [r4, #8]
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	1c5a      	adds	r2, r3, #1
 801178e:	6022      	str	r2, [r4, #0]
 8011790:	701f      	strb	r7, [r3, #0]
 8011792:	6963      	ldr	r3, [r4, #20]
 8011794:	4283      	cmp	r3, r0
 8011796:	d004      	beq.n	80117a2 <__swbuf_r+0x76>
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	07db      	lsls	r3, r3, #31
 801179c:	d5e1      	bpl.n	8011762 <__swbuf_r+0x36>
 801179e:	2d0a      	cmp	r5, #10
 80117a0:	d1df      	bne.n	8011762 <__swbuf_r+0x36>
 80117a2:	0021      	movs	r1, r4
 80117a4:	0030      	movs	r0, r6
 80117a6:	f7ff fdbf 	bl	8011328 <_fflush_r>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d0d9      	beq.n	8011762 <__swbuf_r+0x36>
 80117ae:	e7d6      	b.n	801175e <__swbuf_r+0x32>

080117b0 <__swsetup_r>:
 80117b0:	4b2d      	ldr	r3, [pc, #180]	@ (8011868 <__swsetup_r+0xb8>)
 80117b2:	b570      	push	{r4, r5, r6, lr}
 80117b4:	0005      	movs	r5, r0
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	000c      	movs	r4, r1
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d004      	beq.n	80117c8 <__swsetup_r+0x18>
 80117be:	6a03      	ldr	r3, [r0, #32]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <__swsetup_r+0x18>
 80117c4:	f7fe f8d4 	bl	800f970 <__sinit>
 80117c8:	230c      	movs	r3, #12
 80117ca:	5ee2      	ldrsh	r2, [r4, r3]
 80117cc:	0713      	lsls	r3, r2, #28
 80117ce:	d423      	bmi.n	8011818 <__swsetup_r+0x68>
 80117d0:	06d3      	lsls	r3, r2, #27
 80117d2:	d407      	bmi.n	80117e4 <__swsetup_r+0x34>
 80117d4:	2309      	movs	r3, #9
 80117d6:	602b      	str	r3, [r5, #0]
 80117d8:	2340      	movs	r3, #64	@ 0x40
 80117da:	2001      	movs	r0, #1
 80117dc:	4313      	orrs	r3, r2
 80117de:	81a3      	strh	r3, [r4, #12]
 80117e0:	4240      	negs	r0, r0
 80117e2:	e03a      	b.n	801185a <__swsetup_r+0xaa>
 80117e4:	0752      	lsls	r2, r2, #29
 80117e6:	d513      	bpl.n	8011810 <__swsetup_r+0x60>
 80117e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117ea:	2900      	cmp	r1, #0
 80117ec:	d008      	beq.n	8011800 <__swsetup_r+0x50>
 80117ee:	0023      	movs	r3, r4
 80117f0:	3344      	adds	r3, #68	@ 0x44
 80117f2:	4299      	cmp	r1, r3
 80117f4:	d002      	beq.n	80117fc <__swsetup_r+0x4c>
 80117f6:	0028      	movs	r0, r5
 80117f8:	f7ff f866 	bl	80108c8 <_free_r>
 80117fc:	2300      	movs	r3, #0
 80117fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8011800:	2224      	movs	r2, #36	@ 0x24
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	4393      	bics	r3, r2
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	2300      	movs	r3, #0
 801180a:	6063      	str	r3, [r4, #4]
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	6023      	str	r3, [r4, #0]
 8011810:	2308      	movs	r3, #8
 8011812:	89a2      	ldrh	r2, [r4, #12]
 8011814:	4313      	orrs	r3, r2
 8011816:	81a3      	strh	r3, [r4, #12]
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d10b      	bne.n	8011836 <__swsetup_r+0x86>
 801181e:	21a0      	movs	r1, #160	@ 0xa0
 8011820:	2280      	movs	r2, #128	@ 0x80
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	0089      	lsls	r1, r1, #2
 8011826:	0092      	lsls	r2, r2, #2
 8011828:	400b      	ands	r3, r1
 801182a:	4293      	cmp	r3, r2
 801182c:	d003      	beq.n	8011836 <__swsetup_r+0x86>
 801182e:	0021      	movs	r1, r4
 8011830:	0028      	movs	r0, r5
 8011832:	f000 f88f 	bl	8011954 <__smakebuf_r>
 8011836:	230c      	movs	r3, #12
 8011838:	5ee2      	ldrsh	r2, [r4, r3]
 801183a:	2101      	movs	r1, #1
 801183c:	0013      	movs	r3, r2
 801183e:	400b      	ands	r3, r1
 8011840:	420a      	tst	r2, r1
 8011842:	d00b      	beq.n	801185c <__swsetup_r+0xac>
 8011844:	2300      	movs	r3, #0
 8011846:	60a3      	str	r3, [r4, #8]
 8011848:	6963      	ldr	r3, [r4, #20]
 801184a:	425b      	negs	r3, r3
 801184c:	61a3      	str	r3, [r4, #24]
 801184e:	2000      	movs	r0, #0
 8011850:	6923      	ldr	r3, [r4, #16]
 8011852:	4283      	cmp	r3, r0
 8011854:	d101      	bne.n	801185a <__swsetup_r+0xaa>
 8011856:	0613      	lsls	r3, r2, #24
 8011858:	d4be      	bmi.n	80117d8 <__swsetup_r+0x28>
 801185a:	bd70      	pop	{r4, r5, r6, pc}
 801185c:	0791      	lsls	r1, r2, #30
 801185e:	d400      	bmi.n	8011862 <__swsetup_r+0xb2>
 8011860:	6963      	ldr	r3, [r4, #20]
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	e7f3      	b.n	801184e <__swsetup_r+0x9e>
 8011866:	46c0      	nop			@ (mov r8, r8)
 8011868:	20000200 	.word	0x20000200

0801186c <_raise_r>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	0004      	movs	r4, r0
 8011870:	000d      	movs	r5, r1
 8011872:	291f      	cmp	r1, #31
 8011874:	d904      	bls.n	8011880 <_raise_r+0x14>
 8011876:	2316      	movs	r3, #22
 8011878:	6003      	str	r3, [r0, #0]
 801187a:	2001      	movs	r0, #1
 801187c:	4240      	negs	r0, r0
 801187e:	bd70      	pop	{r4, r5, r6, pc}
 8011880:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011882:	2b00      	cmp	r3, #0
 8011884:	d004      	beq.n	8011890 <_raise_r+0x24>
 8011886:	008a      	lsls	r2, r1, #2
 8011888:	189b      	adds	r3, r3, r2
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	2a00      	cmp	r2, #0
 801188e:	d108      	bne.n	80118a2 <_raise_r+0x36>
 8011890:	0020      	movs	r0, r4
 8011892:	f000 f831 	bl	80118f8 <_getpid_r>
 8011896:	002a      	movs	r2, r5
 8011898:	0001      	movs	r1, r0
 801189a:	0020      	movs	r0, r4
 801189c:	f000 f81a 	bl	80118d4 <_kill_r>
 80118a0:	e7ed      	b.n	801187e <_raise_r+0x12>
 80118a2:	2a01      	cmp	r2, #1
 80118a4:	d009      	beq.n	80118ba <_raise_r+0x4e>
 80118a6:	1c51      	adds	r1, r2, #1
 80118a8:	d103      	bne.n	80118b2 <_raise_r+0x46>
 80118aa:	2316      	movs	r3, #22
 80118ac:	6003      	str	r3, [r0, #0]
 80118ae:	2001      	movs	r0, #1
 80118b0:	e7e5      	b.n	801187e <_raise_r+0x12>
 80118b2:	2100      	movs	r1, #0
 80118b4:	0028      	movs	r0, r5
 80118b6:	6019      	str	r1, [r3, #0]
 80118b8:	4790      	blx	r2
 80118ba:	2000      	movs	r0, #0
 80118bc:	e7df      	b.n	801187e <_raise_r+0x12>
	...

080118c0 <raise>:
 80118c0:	b510      	push	{r4, lr}
 80118c2:	4b03      	ldr	r3, [pc, #12]	@ (80118d0 <raise+0x10>)
 80118c4:	0001      	movs	r1, r0
 80118c6:	6818      	ldr	r0, [r3, #0]
 80118c8:	f7ff ffd0 	bl	801186c <_raise_r>
 80118cc:	bd10      	pop	{r4, pc}
 80118ce:	46c0      	nop			@ (mov r8, r8)
 80118d0:	20000200 	.word	0x20000200

080118d4 <_kill_r>:
 80118d4:	2300      	movs	r3, #0
 80118d6:	b570      	push	{r4, r5, r6, lr}
 80118d8:	4d06      	ldr	r5, [pc, #24]	@ (80118f4 <_kill_r+0x20>)
 80118da:	0004      	movs	r4, r0
 80118dc:	0008      	movs	r0, r1
 80118de:	0011      	movs	r1, r2
 80118e0:	602b      	str	r3, [r5, #0]
 80118e2:	f7f1 fa49 	bl	8002d78 <_kill>
 80118e6:	1c43      	adds	r3, r0, #1
 80118e8:	d103      	bne.n	80118f2 <_kill_r+0x1e>
 80118ea:	682b      	ldr	r3, [r5, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d000      	beq.n	80118f2 <_kill_r+0x1e>
 80118f0:	6023      	str	r3, [r4, #0]
 80118f2:	bd70      	pop	{r4, r5, r6, pc}
 80118f4:	20001da8 	.word	0x20001da8

080118f8 <_getpid_r>:
 80118f8:	b510      	push	{r4, lr}
 80118fa:	f7f1 fa37 	bl	8002d6c <_getpid>
 80118fe:	bd10      	pop	{r4, pc}

08011900 <__swhatbuf_r>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	000e      	movs	r6, r1
 8011904:	001d      	movs	r5, r3
 8011906:	230e      	movs	r3, #14
 8011908:	5ec9      	ldrsh	r1, [r1, r3]
 801190a:	0014      	movs	r4, r2
 801190c:	b096      	sub	sp, #88	@ 0x58
 801190e:	2900      	cmp	r1, #0
 8011910:	da0c      	bge.n	801192c <__swhatbuf_r+0x2c>
 8011912:	89b2      	ldrh	r2, [r6, #12]
 8011914:	2380      	movs	r3, #128	@ 0x80
 8011916:	0011      	movs	r1, r2
 8011918:	4019      	ands	r1, r3
 801191a:	421a      	tst	r2, r3
 801191c:	d114      	bne.n	8011948 <__swhatbuf_r+0x48>
 801191e:	2380      	movs	r3, #128	@ 0x80
 8011920:	00db      	lsls	r3, r3, #3
 8011922:	2000      	movs	r0, #0
 8011924:	6029      	str	r1, [r5, #0]
 8011926:	6023      	str	r3, [r4, #0]
 8011928:	b016      	add	sp, #88	@ 0x58
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	466a      	mov	r2, sp
 801192e:	f000 f853 	bl	80119d8 <_fstat_r>
 8011932:	2800      	cmp	r0, #0
 8011934:	dbed      	blt.n	8011912 <__swhatbuf_r+0x12>
 8011936:	23f0      	movs	r3, #240	@ 0xf0
 8011938:	9901      	ldr	r1, [sp, #4]
 801193a:	021b      	lsls	r3, r3, #8
 801193c:	4019      	ands	r1, r3
 801193e:	4b04      	ldr	r3, [pc, #16]	@ (8011950 <__swhatbuf_r+0x50>)
 8011940:	18c9      	adds	r1, r1, r3
 8011942:	424b      	negs	r3, r1
 8011944:	4159      	adcs	r1, r3
 8011946:	e7ea      	b.n	801191e <__swhatbuf_r+0x1e>
 8011948:	2100      	movs	r1, #0
 801194a:	2340      	movs	r3, #64	@ 0x40
 801194c:	e7e9      	b.n	8011922 <__swhatbuf_r+0x22>
 801194e:	46c0      	nop			@ (mov r8, r8)
 8011950:	ffffe000 	.word	0xffffe000

08011954 <__smakebuf_r>:
 8011954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011956:	2602      	movs	r6, #2
 8011958:	898b      	ldrh	r3, [r1, #12]
 801195a:	0005      	movs	r5, r0
 801195c:	000c      	movs	r4, r1
 801195e:	b085      	sub	sp, #20
 8011960:	4233      	tst	r3, r6
 8011962:	d007      	beq.n	8011974 <__smakebuf_r+0x20>
 8011964:	0023      	movs	r3, r4
 8011966:	3347      	adds	r3, #71	@ 0x47
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	6123      	str	r3, [r4, #16]
 801196c:	2301      	movs	r3, #1
 801196e:	6163      	str	r3, [r4, #20]
 8011970:	b005      	add	sp, #20
 8011972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011974:	ab03      	add	r3, sp, #12
 8011976:	aa02      	add	r2, sp, #8
 8011978:	f7ff ffc2 	bl	8011900 <__swhatbuf_r>
 801197c:	9f02      	ldr	r7, [sp, #8]
 801197e:	9001      	str	r0, [sp, #4]
 8011980:	0039      	movs	r1, r7
 8011982:	0028      	movs	r0, r5
 8011984:	f7ff f816 	bl	80109b4 <_malloc_r>
 8011988:	2800      	cmp	r0, #0
 801198a:	d108      	bne.n	801199e <__smakebuf_r+0x4a>
 801198c:	220c      	movs	r2, #12
 801198e:	5ea3      	ldrsh	r3, [r4, r2]
 8011990:	059a      	lsls	r2, r3, #22
 8011992:	d4ed      	bmi.n	8011970 <__smakebuf_r+0x1c>
 8011994:	2203      	movs	r2, #3
 8011996:	4393      	bics	r3, r2
 8011998:	431e      	orrs	r6, r3
 801199a:	81a6      	strh	r6, [r4, #12]
 801199c:	e7e2      	b.n	8011964 <__smakebuf_r+0x10>
 801199e:	2380      	movs	r3, #128	@ 0x80
 80119a0:	89a2      	ldrh	r2, [r4, #12]
 80119a2:	6020      	str	r0, [r4, #0]
 80119a4:	4313      	orrs	r3, r2
 80119a6:	81a3      	strh	r3, [r4, #12]
 80119a8:	9b03      	ldr	r3, [sp, #12]
 80119aa:	6120      	str	r0, [r4, #16]
 80119ac:	6167      	str	r7, [r4, #20]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00c      	beq.n	80119cc <__smakebuf_r+0x78>
 80119b2:	0028      	movs	r0, r5
 80119b4:	230e      	movs	r3, #14
 80119b6:	5ee1      	ldrsh	r1, [r4, r3]
 80119b8:	f000 f820 	bl	80119fc <_isatty_r>
 80119bc:	2800      	cmp	r0, #0
 80119be:	d005      	beq.n	80119cc <__smakebuf_r+0x78>
 80119c0:	2303      	movs	r3, #3
 80119c2:	89a2      	ldrh	r2, [r4, #12]
 80119c4:	439a      	bics	r2, r3
 80119c6:	3b02      	subs	r3, #2
 80119c8:	4313      	orrs	r3, r2
 80119ca:	81a3      	strh	r3, [r4, #12]
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	9a01      	ldr	r2, [sp, #4]
 80119d0:	4313      	orrs	r3, r2
 80119d2:	81a3      	strh	r3, [r4, #12]
 80119d4:	e7cc      	b.n	8011970 <__smakebuf_r+0x1c>
	...

080119d8 <_fstat_r>:
 80119d8:	2300      	movs	r3, #0
 80119da:	b570      	push	{r4, r5, r6, lr}
 80119dc:	4d06      	ldr	r5, [pc, #24]	@ (80119f8 <_fstat_r+0x20>)
 80119de:	0004      	movs	r4, r0
 80119e0:	0008      	movs	r0, r1
 80119e2:	0011      	movs	r1, r2
 80119e4:	602b      	str	r3, [r5, #0]
 80119e6:	f7f1 fa27 	bl	8002e38 <_fstat>
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	d103      	bne.n	80119f6 <_fstat_r+0x1e>
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d000      	beq.n	80119f6 <_fstat_r+0x1e>
 80119f4:	6023      	str	r3, [r4, #0]
 80119f6:	bd70      	pop	{r4, r5, r6, pc}
 80119f8:	20001da8 	.word	0x20001da8

080119fc <_isatty_r>:
 80119fc:	2300      	movs	r3, #0
 80119fe:	b570      	push	{r4, r5, r6, lr}
 8011a00:	4d06      	ldr	r5, [pc, #24]	@ (8011a1c <_isatty_r+0x20>)
 8011a02:	0004      	movs	r4, r0
 8011a04:	0008      	movs	r0, r1
 8011a06:	602b      	str	r3, [r5, #0]
 8011a08:	f7f1 fa24 	bl	8002e54 <_isatty>
 8011a0c:	1c43      	adds	r3, r0, #1
 8011a0e:	d103      	bne.n	8011a18 <_isatty_r+0x1c>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d000      	beq.n	8011a18 <_isatty_r+0x1c>
 8011a16:	6023      	str	r3, [r4, #0]
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	46c0      	nop			@ (mov r8, r8)
 8011a1c:	20001da8 	.word	0x20001da8

08011a20 <_init>:
 8011a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a22:	46c0      	nop			@ (mov r8, r8)
 8011a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a26:	bc08      	pop	{r3}
 8011a28:	469e      	mov	lr, r3
 8011a2a:	4770      	bx	lr

08011a2c <_fini>:
 8011a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2e:	46c0      	nop			@ (mov r8, r8)
 8011a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a32:	bc08      	pop	{r3}
 8011a34:	469e      	mov	lr, r3
 8011a36:	4770      	bx	lr
